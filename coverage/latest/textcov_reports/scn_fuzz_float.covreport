_ZN10fast_float19parse_number_stringIcEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  275|   910k|parsed_number_string_t<UC> parse_number_string(UC const *p, UC const * pend, parse_options_t<UC> options) noexcept {
  276|   910k|  chars_format const fmt = options.format;
  277|   910k|  UC const decimal_point = options.decimal_point;
  278|       |
  279|   910k|  parsed_number_string_t<UC> answer;
  280|   910k|  answer.valid = false;
  281|   910k|  answer.too_many_digits = false;
  282|   910k|  answer.negative = (*p == UC('-'));
  283|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  284|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  285|       |#else
  286|   910k|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (286:7): [True: 0, False: 910k]
  ------------------
  287|      0|#endif
  288|      0|    ++p;
  289|      0|    if (p == pend) {
  ------------------
  |  Branch (289:9): [True: 0, False: 0]
  ------------------
  290|      0|      return answer;
  291|      0|    }
  292|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (292:9): [True: 0, False: 0]
  ------------------
  293|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        return answer;
  295|      0|      }    
  296|      0|    } else {
  297|      0|      if (!is_integer(*p) && (*p != decimal_point)) { // a sign must be followed by an integer or the dot
  ------------------
  |  Branch (297:11): [True: 0, False: 0]
  |  Branch (297:30): [True: 0, False: 0]
  ------------------
  298|      0|        return answer;
  299|      0|      }
  300|      0|    }
  301|      0|  }
  302|   910k|  UC const * const start_digits = p;
  303|       |
  304|   910k|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  305|       |
  306|  4.81M|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (306:10): [True: 4.35M, False: 454k]
  |  Branch (306:25): [True: 3.90M, False: 455k]
  ------------------
  307|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  308|       |    // multiplication
  309|  3.90M|    i = 10 * i +
  310|  3.90M|        uint64_t(*p - UC('0')); // might overflow, we will handle the overflow later
  311|  3.90M|    ++p;
  312|  3.90M|  }
  313|   910k|  UC const * const end_of_integer_part = p;
  314|   910k|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  315|   910k|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  316|   910k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   910k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (316:7): [True: 0, False: 910k]
  ------------------
  317|       |    // at least 1 digit in integer part, without leading zeros
  318|      0|    if (digit_count == 0 || (start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (318:9): [True: 0, False: 0]
  |  Branch (318:30): [True: 0, False: 0]
  |  Branch (318:60): [True: 0, False: 0]
  ------------------
  319|      0|      return answer;
  320|      0|    }
  321|      0|  }
  322|       |
  323|   910k|  int64_t exponent = 0;
  324|   910k|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (324:34): [True: 455k, False: 454k]
  |  Branch (324:49): [True: 166k, False: 289k]
  ------------------
  325|   910k|  if (has_decimal_point) {
  ------------------
  |  Branch (325:7): [True: 166k, False: 744k]
  ------------------
  326|   166k|    ++p;
  327|   166k|    UC const * before = p;
  328|       |    // can occur at most twice without overflowing, but let it occur more, since
  329|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  330|   166k|    loop_parse_if_eight_digits(p, pend, i);
  331|       |
  332|   692k|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (332:12): [True: 589k, False: 103k]
  |  Branch (332:27): [True: 526k, False: 62.9k]
  ------------------
  333|   526k|      uint8_t digit = uint8_t(*p - UC('0'));
  334|   526k|      ++p;
  335|   526k|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  336|   526k|    }
  337|   166k|    exponent = before - p;
  338|   166k|    answer.fraction = span<const UC>(before, size_t(p - before));
  339|   166k|    digit_count -= exponent;
  340|   166k|  }
  341|   910k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   910k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (341:7): [True: 0, False: 910k]
  ------------------
  342|       |    // at least 1 digit in fractional part
  343|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (343:9): [True: 0, False: 0]
  |  Branch (343:30): [True: 0, False: 0]
  ------------------
  344|      0|      return answer;
  345|      0|    }
  346|      0|  } 
  347|   910k|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (347:12): [True: 0, False: 910k]
  ------------------
  348|      0|    return answer;
  349|      0|  }
  350|   910k|  int64_t exp_number = 0;            // explicit exponential part
  351|   910k|  if ( ((fmt & chars_format::scientific) &&
  ------------------
  |  Branch (351:9): [True: 785k, False: 124k]
  ------------------
  352|   910k|        (p != pend) &&
  ------------------
  |  Branch (352:9): [True: 352k, False: 432k]
  ------------------
  353|   910k|        ((UC('e') == *p) || (UC('E') == *p)))
  ------------------
  |  Branch (353:10): [True: 77.8k, False: 274k]
  |  Branch (353:29): [True: 47.6k, False: 227k]
  ------------------
  354|   910k|       ||
  355|   910k|       ((fmt & FASTFLOAT_FORTRANFMT) &&
  ------------------
  |  |   20|   784k|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (355:9): [True: 0, False: 784k]
  ------------------
  356|   784k|        (p != pend) &&
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|   784k|        ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) || (UC('D') == *p)))) {
  ------------------
  |  Branch (357:10): [True: 0, False: 0]
  |  Branch (357:29): [True: 0, False: 0]
  |  Branch (357:48): [True: 0, False: 0]
  |  Branch (357:67): [True: 0, False: 0]
  ------------------
  358|   125k|    UC const * location_of_e = p;
  359|   125k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) || (UC('D') == *p)) {
  ------------------
  |  Branch (359:9): [True: 77.8k, False: 47.6k]
  |  Branch (359:28): [True: 47.6k, False: 0]
  |  Branch (359:47): [True: 0, False: 0]
  |  Branch (359:66): [True: 0, False: 0]
  ------------------
  360|   125k|      ++p;
  361|   125k|    }
  362|   125k|    bool neg_exp = false;
  363|   125k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (363:9): [True: 125k, False: 115]
  |  Branch (363:24): [True: 6.21k, False: 119k]
  ------------------
  364|  6.21k|      neg_exp = true;
  365|  6.21k|      ++p;
  366|   119k|    } else if ((p != pend) && (UC('+') == *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  ------------------
  |  Branch (366:16): [True: 119k, False: 115]
  |  Branch (366:31): [True: 31.8k, False: 87.2k]
  ------------------
  367|  31.8k|      ++p;
  368|  31.8k|    }
  369|   125k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (369:9): [True: 165, False: 125k]
  |  Branch (369:24): [True: 505, False: 124k]
  ------------------
  370|    670|      if(!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (370:10): [True: 0, False: 670]
  ------------------
  371|       |        // We are in error.
  372|      0|        return answer;
  373|      0|      }
  374|       |      // Otherwise, we will be ignoring the 'e'.
  375|    670|      p = location_of_e;
  376|   124k|    } else {
  377|   389k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (377:14): [True: 297k, False: 91.9k]
  |  Branch (377:29): [True: 264k, False: 32.8k]
  ------------------
  378|   264k|        uint8_t digit = uint8_t(*p - UC('0'));
  379|   264k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (379:13): [True: 243k, False: 20.8k]
  ------------------
  380|   243k|          exp_number = 10 * exp_number + digit;
  381|   243k|        }
  382|   264k|        ++p;
  383|   264k|      }
  384|   124k|      if(neg_exp) { exp_number = - exp_number; }
  ------------------
  |  Branch (384:10): [True: 6.17k, False: 118k]
  ------------------
  385|   124k|      exponent += exp_number;
  386|   124k|    }
  387|   784k|  } else {
  388|       |    // If it scientific and not fixed, we have to bail out.
  389|   784k|    if((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) { return answer; }
  ------------------
  |  Branch (389:8): [True: 660k, False: 124k]
  |  Branch (389:44): [True: 0, False: 660k]
  ------------------
  390|   784k|  }
  391|   910k|  answer.lastmatch = p;
  392|   910k|  answer.valid = true;
  393|       |
  394|       |  // If we frequently had to deal with long strings of digits,
  395|       |  // we could extend our code by using a 128-bit integer instead
  396|       |  // of a 64-bit integer. However, this is uncommon.
  397|       |  //
  398|       |  // We can deal with up to 19 digits.
  399|   910k|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (399:7): [True: 152k, False: 758k]
  ------------------
  400|       |    // It is possible that the integer had an overflow.
  401|       |    // We have to handle the case where we have 0.0000somenumber.
  402|       |    // We need to be mindful of the case where we only have zeroes...
  403|       |    // E.g., 0.000000000...000.
  404|   152k|    UC const * start = start_digits;
  405|   646k|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (405:12): [True: 644k, False: 1.36k]
  |  Branch (405:32): [True: 486k, False: 158k]
  |  Branch (405:53): [True: 7.27k, False: 150k]
  ------------------
  406|   493k|      if(*start == UC('0')) { digit_count --; }
  ------------------
  |  Branch (406:10): [True: 486k, False: 7.27k]
  ------------------
  407|   493k|      start++;
  408|   493k|    }
  409|       |
  410|   152k|    if (digit_count > 19) {
  ------------------
  |  Branch (410:9): [True: 147k, False: 5.02k]
  ------------------
  411|   147k|      answer.too_many_digits = true;
  412|       |      // Let us start again, this time, avoiding overflows.
  413|       |      // We don't need to check if is_integer, since we use the
  414|       |      // pre-tokenized spans from above.
  415|   147k|      i = 0;
  416|   147k|      p = answer.integer.ptr;
  417|   147k|      UC const* int_end = p + answer.integer.len();
  418|   147k|      const uint64_t minimal_nineteen_digit_integer{ 1000000000000000000 };
  419|  1.50M|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (419:14): [True: 1.46M, False: 39.2k]
  |  Branch (419:54): [True: 1.36M, False: 107k]
  ------------------
  420|  1.36M|        i = i * 10 + uint64_t(*p - UC('0'));
  421|  1.36M|        ++p;
  422|  1.36M|      }
  423|   147k|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (423:11): [True: 39.2k, False: 107k]
  ------------------
  424|  39.2k|        exponent = end_of_integer_part - p + exp_number;
  425|  39.2k|      }
  426|   107k|      else { // We have a value with a fractional component.
  427|   107k|        p = answer.fraction.ptr;
  428|   107k|        UC const* frac_end = p + answer.fraction.len();
  429|  1.90M|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (429:16): [True: 1.79M, False: 107k]
  |  Branch (429:56): [True: 1.79M, False: 0]
  ------------------
  430|  1.79M|          i = i * 10 + uint64_t(*p - UC('0'));
  431|  1.79M|          ++p;
  432|  1.79M|        }
  433|   107k|        exponent = answer.fraction.ptr - p + exp_number;
  434|   107k|      }
  435|       |      // We have now corrected both exponent and i, to a truncated value
  436|   147k|    }
  437|   152k|  }
  438|   910k|  answer.exponent = exponent;
  439|   910k|  answer.mantissa = i;
  440|   910k|  return answer;
  441|   910k|}
_ZN10fast_float10is_integerIcEEbT_:
   35|  5.36M|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   36|  5.36M|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (36:12): [True: 143k, False: 5.22M]
  |  Branch (36:27): [True: 408k, False: 4.81M]
  ------------------
   37|  5.36M|}
_ZN10fast_float26loop_parse_if_eight_digitsERPKcS1_Rm:
  247|   166k|void loop_parse_if_eight_digits(const char*& p, const char* const pend, uint64_t& i) {
  248|       |  // optimizes better than parse_if_eight_digits_unrolled() for UC = char.
  249|   611k|  while ((std::distance(p, pend) >= 8) && is_made_of_eight_digits_fast(read8_to_u64(p))) {
  ------------------
  |  Branch (249:10): [True: 495k, False: 115k]
  |  Branch (249:43): [True: 445k, False: 50.3k]
  ------------------
  250|   445k|    i = i * 100000000 + parse_eight_digits_unrolled(read8_to_u64(p)); // in rare cases, this will overflow, but that's ok
  251|   445k|    p += 8;
  252|   445k|  }
  253|   166k|}
_ZN10fast_float28is_made_of_eight_digits_fastEm:
  169|   495k|fastfloat_really_inline constexpr bool is_made_of_eight_digits_fast(uint64_t val)  noexcept {
  170|   495k|  return !((((val + 0x4646464646464646) | (val - 0x3030303030303030)) &
  171|   495k|     0x8080808080808080));
  172|   495k|}
_ZN10fast_float12read8_to_u64IcEEmPKT_:
   53|  1.13M|uint64_t read8_to_u64(const UC *chars) {
   54|  1.13M|  if (cpp20_and_in_constexpr() || !std::is_same<UC, char>::value) {
  ------------------
  |  Branch (54:7): [Folded - Ignored]
  |  Branch (54:35): [Folded - Ignored]
  ------------------
   55|      0|    uint64_t val = 0;
   56|      0|    for(int i = 0; i < 8; ++i) {
  ------------------
  |  Branch (56:20): [True: 0, False: 0]
  ------------------
   57|      0|      val |= uint64_t(uint8_t(*chars)) << (i*8);
   58|      0|      ++chars;
   59|      0|    }
   60|      0|    return val;
   61|      0|  }
   62|  1.13M|  uint64_t val;
   63|  1.13M|  ::memcpy(&val, chars, sizeof(uint64_t));
   64|       |#if FASTFLOAT_IS_BIG_ENDIAN == 1
   65|       |  // Need to read as-if the number was in little-endian order.
   66|       |  val = byteswap(val);
   67|       |#endif
   68|  1.13M|  return val;
   69|  1.13M|}
_ZN10fast_float27parse_eight_digits_unrolledEm:
  146|   639k|uint32_t parse_eight_digits_unrolled(uint64_t val) {
  147|   639k|  const uint64_t mask = 0x000000FF000000FF;
  148|   639k|  const uint64_t mul1 = 0x000F424000000064; // 100 + (1000000ULL << 32)
  149|   639k|  const uint64_t mul2 = 0x0000271000000001; // 1 + (10000ULL << 32)
  150|   639k|  val -= 0x3030303030303030;
  151|   639k|  val = (val * 10) + (val >> 8); // val = (val * 2561) >> 8;
  152|   639k|  val = (((val & mask) * mul1) + (((val >> 16) & mask) * mul2)) >> 32;
  153|   639k|  return uint32_t(val);
  154|   639k|}
_ZN10fast_float27parse_eight_digits_unrolledIcEEjPKT_:
  160|   194k|uint32_t parse_eight_digits_unrolled(UC const * chars)  noexcept {
  161|   194k|  if (cpp20_and_in_constexpr() || !has_simd_opt<UC>()) {
  ------------------
  |  Branch (161:7): [Folded - Ignored]
  |  Branch (161:35): [Folded - Ignored]
  ------------------
  162|   194k|    return parse_eight_digits_unrolled(read8_to_u64(chars)); // truncation okay
  163|   194k|  }
  164|      0|  return parse_eight_digits_unrolled(simd_read8_to_u64(chars));
  165|   194k|}
_ZN10fast_float19parse_number_stringIDiEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  275|   384k|parsed_number_string_t<UC> parse_number_string(UC const *p, UC const * pend, parse_options_t<UC> options) noexcept {
  276|   384k|  chars_format const fmt = options.format;
  277|   384k|  UC const decimal_point = options.decimal_point;
  278|       |
  279|   384k|  parsed_number_string_t<UC> answer;
  280|   384k|  answer.valid = false;
  281|   384k|  answer.too_many_digits = false;
  282|   384k|  answer.negative = (*p == UC('-'));
  283|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  284|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  285|       |#else
  286|   384k|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (286:7): [True: 0, False: 384k]
  ------------------
  287|      0|#endif
  288|      0|    ++p;
  289|      0|    if (p == pend) {
  ------------------
  |  Branch (289:9): [True: 0, False: 0]
  ------------------
  290|      0|      return answer;
  291|      0|    }
  292|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (292:9): [True: 0, False: 0]
  ------------------
  293|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        return answer;
  295|      0|      }    
  296|      0|    } else {
  297|      0|      if (!is_integer(*p) && (*p != decimal_point)) { // a sign must be followed by an integer or the dot
  ------------------
  |  Branch (297:11): [True: 0, False: 0]
  |  Branch (297:30): [True: 0, False: 0]
  ------------------
  298|      0|        return answer;
  299|      0|      }
  300|      0|    }
  301|      0|  }
  302|   384k|  UC const * const start_digits = p;
  303|       |
  304|   384k|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  305|       |
  306|   824k|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (306:10): [True: 562k, False: 261k]
  |  Branch (306:25): [True: 440k, False: 122k]
  ------------------
  307|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  308|       |    // multiplication
  309|   440k|    i = 10 * i +
  310|   440k|        uint64_t(*p - UC('0')); // might overflow, we will handle the overflow later
  311|   440k|    ++p;
  312|   440k|  }
  313|   384k|  UC const * const end_of_integer_part = p;
  314|   384k|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  315|   384k|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  316|   384k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   384k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (316:7): [True: 0, False: 384k]
  ------------------
  317|       |    // at least 1 digit in integer part, without leading zeros
  318|      0|    if (digit_count == 0 || (start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (318:9): [True: 0, False: 0]
  |  Branch (318:30): [True: 0, False: 0]
  |  Branch (318:60): [True: 0, False: 0]
  ------------------
  319|      0|      return answer;
  320|      0|    }
  321|      0|  }
  322|       |
  323|   384k|  int64_t exponent = 0;
  324|   384k|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (324:34): [True: 122k, False: 261k]
  |  Branch (324:49): [True: 2.17k, False: 120k]
  ------------------
  325|   384k|  if (has_decimal_point) {
  ------------------
  |  Branch (325:7): [True: 2.17k, False: 382k]
  ------------------
  326|  2.17k|    ++p;
  327|  2.17k|    UC const * before = p;
  328|       |    // can occur at most twice without overflowing, but let it occur more, since
  329|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  330|  2.17k|    loop_parse_if_eight_digits(p, pend, i);
  331|       |
  332|  13.5k|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (332:12): [True: 12.2k, False: 1.36k]
  |  Branch (332:27): [True: 11.4k, False: 805]
  ------------------
  333|  11.4k|      uint8_t digit = uint8_t(*p - UC('0'));
  334|  11.4k|      ++p;
  335|  11.4k|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  336|  11.4k|    }
  337|  2.17k|    exponent = before - p;
  338|  2.17k|    answer.fraction = span<const UC>(before, size_t(p - before));
  339|  2.17k|    digit_count -= exponent;
  340|  2.17k|  }
  341|   384k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   384k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (341:7): [True: 0, False: 384k]
  ------------------
  342|       |    // at least 1 digit in fractional part
  343|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (343:9): [True: 0, False: 0]
  |  Branch (343:30): [True: 0, False: 0]
  ------------------
  344|      0|      return answer;
  345|      0|    }
  346|      0|  } 
  347|   384k|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (347:12): [True: 0, False: 384k]
  ------------------
  348|      0|    return answer;
  349|      0|  }
  350|   384k|  int64_t exp_number = 0;            // explicit exponential part
  351|   384k|  if ( ((fmt & chars_format::scientific) &&
  ------------------
  |  Branch (351:9): [True: 312k, False: 71.5k]
  ------------------
  352|   384k|        (p != pend) &&
  ------------------
  |  Branch (352:9): [True: 121k, False: 191k]
  ------------------
  353|   384k|        ((UC('e') == *p) || (UC('E') == *p)))
  ------------------
  |  Branch (353:10): [True: 251, False: 120k]
  |  Branch (353:29): [True: 12.6k, False: 108k]
  ------------------
  354|   384k|       ||
  355|   384k|       ((fmt & FASTFLOAT_FORTRANFMT) &&
  ------------------
  |  |   20|   371k|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (355:9): [True: 0, False: 371k]
  ------------------
  356|   371k|        (p != pend) &&
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|   371k|        ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) || (UC('D') == *p)))) {
  ------------------
  |  Branch (357:10): [True: 0, False: 0]
  |  Branch (357:29): [True: 0, False: 0]
  |  Branch (357:48): [True: 0, False: 0]
  |  Branch (357:67): [True: 0, False: 0]
  ------------------
  358|  12.9k|    UC const * location_of_e = p;
  359|  12.9k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) || (UC('D') == *p)) {
  ------------------
  |  Branch (359:9): [True: 251, False: 12.6k]
  |  Branch (359:28): [True: 12.6k, False: 0]
  |  Branch (359:47): [True: 0, False: 0]
  |  Branch (359:66): [True: 0, False: 0]
  ------------------
  360|  12.9k|      ++p;
  361|  12.9k|    }
  362|  12.9k|    bool neg_exp = false;
  363|  12.9k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (363:9): [True: 12.8k, False: 20]
  |  Branch (363:24): [True: 2.98k, False: 9.90k]
  ------------------
  364|  2.98k|      neg_exp = true;
  365|  2.98k|      ++p;
  366|  9.92k|    } else if ((p != pend) && (UC('+') == *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  ------------------
  |  Branch (366:16): [True: 9.90k, False: 20]
  |  Branch (366:31): [True: 265, False: 9.64k]
  ------------------
  367|    265|      ++p;
  368|    265|    }
  369|  12.9k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (369:9): [True: 40, False: 12.8k]
  |  Branch (369:24): [True: 370, False: 12.5k]
  ------------------
  370|    410|      if(!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (370:10): [True: 0, False: 410]
  ------------------
  371|       |        // We are in error.
  372|      0|        return answer;
  373|      0|      }
  374|       |      // Otherwise, we will be ignoring the 'e'.
  375|    410|      p = location_of_e;
  376|  12.5k|    } else {
  377|  46.3k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (377:14): [True: 37.6k, False: 8.66k]
  |  Branch (377:29): [True: 33.8k, False: 3.83k]
  ------------------
  378|  33.8k|        uint8_t digit = uint8_t(*p - UC('0'));
  379|  33.8k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (379:13): [True: 31.8k, False: 1.93k]
  ------------------
  380|  31.8k|          exp_number = 10 * exp_number + digit;
  381|  31.8k|        }
  382|  33.8k|        ++p;
  383|  33.8k|      }
  384|  12.5k|      if(neg_exp) { exp_number = - exp_number; }
  ------------------
  |  Branch (384:10): [True: 2.96k, False: 9.53k]
  ------------------
  385|  12.5k|      exponent += exp_number;
  386|  12.5k|    }
  387|   371k|  } else {
  388|       |    // If it scientific and not fixed, we have to bail out.
  389|   371k|    if((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) { return answer; }
  ------------------
  |  Branch (389:8): [True: 300k, False: 71.5k]
  |  Branch (389:44): [True: 0, False: 300k]
  ------------------
  390|   371k|  }
  391|   384k|  answer.lastmatch = p;
  392|   384k|  answer.valid = true;
  393|       |
  394|       |  // If we frequently had to deal with long strings of digits,
  395|       |  // we could extend our code by using a 128-bit integer instead
  396|       |  // of a 64-bit integer. However, this is uncommon.
  397|       |  //
  398|       |  // We can deal with up to 19 digits.
  399|   384k|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (399:7): [True: 1.03k, False: 383k]
  ------------------
  400|       |    // It is possible that the integer had an overflow.
  401|       |    // We have to handle the case where we have 0.0000somenumber.
  402|       |    // We need to be mindful of the case where we only have zeroes...
  403|       |    // E.g., 0.000000000...000.
  404|  1.03k|    UC const * start = start_digits;
  405|  1.25k|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (405:12): [True: 1.25k, False: 0]
  |  Branch (405:32): [True: 220, False: 1.03k]
  |  Branch (405:53): [True: 0, False: 1.03k]
  ------------------
  406|    220|      if(*start == UC('0')) { digit_count --; }
  ------------------
  |  Branch (406:10): [True: 220, False: 0]
  ------------------
  407|    220|      start++;
  408|    220|    }
  409|       |
  410|  1.03k|    if (digit_count > 19) {
  ------------------
  |  Branch (410:9): [True: 936, False: 100]
  ------------------
  411|    936|      answer.too_many_digits = true;
  412|       |      // Let us start again, this time, avoiding overflows.
  413|       |      // We don't need to check if is_integer, since we use the
  414|       |      // pre-tokenized spans from above.
  415|    936|      i = 0;
  416|    936|      p = answer.integer.ptr;
  417|    936|      UC const* int_end = p + answer.integer.len();
  418|    936|      const uint64_t minimal_nineteen_digit_integer{ 1000000000000000000 };
  419|  14.1k|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (419:14): [True: 13.6k, False: 432]
  |  Branch (419:54): [True: 13.1k, False: 504]
  ------------------
  420|  13.1k|        i = i * 10 + uint64_t(*p - UC('0'));
  421|  13.1k|        ++p;
  422|  13.1k|      }
  423|    936|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (423:11): [True: 432, False: 504]
  ------------------
  424|    432|        exponent = end_of_integer_part - p + exp_number;
  425|    432|      }
  426|    504|      else { // We have a value with a fractional component.
  427|    504|        p = answer.fraction.ptr;
  428|    504|        UC const* frac_end = p + answer.fraction.len();
  429|  5.20k|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (429:16): [True: 4.70k, False: 504]
  |  Branch (429:56): [True: 4.70k, False: 0]
  ------------------
  430|  4.70k|          i = i * 10 + uint64_t(*p - UC('0'));
  431|  4.70k|          ++p;
  432|  4.70k|        }
  433|    504|        exponent = answer.fraction.ptr - p + exp_number;
  434|    504|      }
  435|       |      // We have now corrected both exponent and i, to a truncated value
  436|    936|    }
  437|  1.03k|  }
  438|   384k|  answer.exponent = exponent;
  439|   384k|  answer.mantissa = i;
  440|   384k|  return answer;
  441|   384k|}
_ZN10fast_float10is_integerIDiEEbT_:
   35|   625k|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   36|   625k|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (36:12): [True: 124k, False: 501k]
  |  Branch (36:27): [True: 3.01k, False: 498k]
  ------------------
   37|   625k|}
_ZN10fast_float26loop_parse_if_eight_digitsIDiTnNSt3__19enable_ifIXntsr3std7is_sameIT_cEE5valueEiE4typeELi0EEEvRPKS3_S7_Rm:
  237|  2.17k|void loop_parse_if_eight_digits(const UC*& p, const UC* const pend, uint64_t& i) {
  238|  2.17k|  if (!has_simd_opt<UC>()) {
  ------------------
  |  Branch (238:7): [Folded - Ignored]
  ------------------
  239|  2.17k|    return;
  240|  2.17k|  }
  241|      0|  while ((std::distance(p, pend) >= 8) && simd_parse_if_eight_digits_unrolled(p, i)) { // in rare cases, this will overflow, but that's ok
  ------------------
  |  Branch (241:10): [True: 0, False: 0]
  |  Branch (241:43): [True: 0, False: 0]
  ------------------
  242|      0|    p += 8;
  243|      0|  }
  244|      0|}
_ZN10fast_float27parse_eight_digits_unrolledIDiEEjPKT_:
  160|    108|uint32_t parse_eight_digits_unrolled(UC const * chars)  noexcept {
  161|    108|  if (cpp20_and_in_constexpr() || !has_simd_opt<UC>()) {
  ------------------
  |  Branch (161:7): [Folded - Ignored]
  |  Branch (161:35): [Folded - Ignored]
  ------------------
  162|    108|    return parse_eight_digits_unrolled(read8_to_u64(chars)); // truncation okay
  163|    108|  }
  164|      0|  return parse_eight_digits_unrolled(simd_read8_to_u64(chars));
  165|    108|}
_ZN10fast_float12read8_to_u64IDiEEmPKT_:
   53|    108|uint64_t read8_to_u64(const UC *chars) {
   54|    108|  if (cpp20_and_in_constexpr() || !std::is_same<UC, char>::value) {
  ------------------
  |  Branch (54:7): [Folded - Ignored]
  |  Branch (54:35): [Folded - Ignored]
  ------------------
   55|    108|    uint64_t val = 0;
   56|    972|    for(int i = 0; i < 8; ++i) {
  ------------------
  |  Branch (56:20): [True: 864, False: 108]
  ------------------
   57|    864|      val |= uint64_t(uint8_t(*chars)) << (i*8);
   58|    864|      ++chars;
   59|    864|    }
   60|    108|    return val;
   61|    108|  }
   62|      0|  uint64_t val;
   63|      0|  ::memcpy(&val, chars, sizeof(uint64_t));
   64|       |#if FASTFLOAT_IS_BIG_ENDIAN == 1
   65|       |  // Need to read as-if the number was in little-endian order.
   66|       |  val = byteswap(val);
   67|       |#endif
   68|      0|  return val;
   69|    108|}

_ZN10fast_float6bigintC2Ev:
  412|  51.1k|  FASTFLOAT_CONSTEXPR20 bigint(): vec() {}
_ZN10fast_float8stackvecILt62EEC2Ev:
   46|   110k|  stackvec() = default;
_ZN10fast_float6bigint3mulEm:
  563|   173k|  FASTFLOAT_CONSTEXPR20 bool mul(limb y) noexcept {
  564|   173k|    return small_mul(vec, y);
  565|   173k|  }
_ZN10fast_float9small_mulILt62EEEbRNS_8stackvecIXT_EEEm:
  282|   255k|bool small_mul(stackvec<size>& vec, limb y) noexcept {
  283|   255k|  limb carry = 0;
  284|  1.03M|  for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (284:26): [True: 784k, False: 255k]
  ------------------
  285|   784k|    vec[index] = scalar_mul(vec[index], y, carry);
  286|   784k|  }
  287|   255k|  if (carry != 0) {
  ------------------
  |  Branch (287:7): [True: 148k, False: 107k]
  ------------------
  288|   148k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|   148k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 148k]
  |  |  ------------------
  ------------------
  289|   148k|  }
  290|   255k|  return true;
  291|   255k|}
_ZNK10fast_float8stackvecILt62EE3lenEv:
   76|  1.98M|  constexpr size_t len() const noexcept {
   77|  1.98M|    return length;
   78|  1.98M|  }
_ZN10fast_float10scalar_mulEmmRm:
  229|   784k|limb scalar_mul(limb x, limb y, limb& carry) noexcept {
  230|   784k|#ifdef FASTFLOAT_64BIT_LIMB
  231|   784k|  #if defined(__SIZEOF_INT128__)
  232|       |  // GCC and clang both define it as an extension.
  233|   784k|  __uint128_t z = __uint128_t(x) * __uint128_t(y) + __uint128_t(carry);
  234|   784k|  carry = limb(z >> limb_bits);
  235|   784k|  return limb(z);
  236|       |  #else
  237|       |  // fallback, no native 128-bit integer multiplication with carry.
  238|       |  // on msvc, this optimizes identically, somehow.
  239|       |  value128 z = full_multiplication(x, y);
  240|       |  bool overflow;
  241|       |  z.low = scalar_add(z.low, carry, overflow);
  242|       |  z.high += uint64_t(overflow);  // cannot overflow
  243|       |  carry = z.high;
  244|       |  return z.low;
  245|       |  #endif
  246|       |#else
  247|       |  uint64_t z = uint64_t(x) * uint64_t(y) + uint64_t(carry);
  248|       |  carry = limb(z >> limb_bits);
  249|       |  return limb(z);
  250|       |#endif
  251|   784k|}
_ZN10fast_float8stackvecILt62EEixEm:
   57|  2.15M|  FASTFLOAT_CONSTEXPR14 limb& operator[](size_t index) noexcept {
   58|  2.15M|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|  2.15M|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   59|  2.15M|    return data[index];
   60|  2.15M|  }
_ZN10fast_float8stackvecILt62EE8try_pushEm:
   91|   209k|  FASTFLOAT_CONSTEXPR14 bool try_push(limb value) noexcept {
   92|   209k|    if (len() < capacity()) {
  ------------------
  |  Branch (92:9): [True: 209k, False: 0]
  ------------------
   93|   209k|      push_unchecked(value);
   94|   209k|      return true;
   95|   209k|    } else {
   96|      0|      return false;
   97|      0|    }
   98|   209k|  }
_ZNK10fast_float8stackvecILt62EE8capacityEv:
   82|   244k|  constexpr size_t capacity() const noexcept {
   83|   244k|    return size;
   84|   244k|  }
_ZN10fast_float8stackvecILt62EE14push_uncheckedEm:
   86|   256k|  FASTFLOAT_CONSTEXPR14 void push_unchecked(limb value) noexcept {
   87|   256k|    data[length] = value;
   88|   256k|    length++;
   89|   256k|  }
_ZN10fast_float6bigint3addEm:
  567|   173k|  FASTFLOAT_CONSTEXPR20 bool add(limb y) noexcept {
  568|   173k|    return small_add(vec, y);
  569|   173k|  }
_ZN10fast_float9small_addILt62EEEbRNS_8stackvecIXT_EEEm:
  275|   173k|bool small_add(stackvec<size>& vec, limb y) noexcept {
  276|   173k|  return small_add_from(vec, y, 0);
  277|   173k|}
_ZN10fast_float14small_add_fromILt62EEEbRNS_8stackvecIXT_EEEmm:
  257|   173k|bool small_add_from(stackvec<size>& vec, limb y, size_t start) noexcept {
  258|   173k|  size_t index = start;
  259|   173k|  limb carry = y;
  260|   173k|  bool overflow;
  261|   262k|  while (carry != 0 && index < vec.len()) {
  ------------------
  |  Branch (261:10): [True: 140k, False: 122k]
  |  Branch (261:24): [True: 89.0k, False: 51.1k]
  ------------------
  262|  89.0k|    vec[index] = scalar_add(vec[index], carry, overflow);
  263|  89.0k|    carry = limb(overflow);
  264|  89.0k|    index += 1;
  265|  89.0k|  }
  266|   173k|  if (carry != 0) {
  ------------------
  |  Branch (266:7): [True: 51.1k, False: 122k]
  ------------------
  267|  51.1k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|  51.1k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 51.1k]
  |  |  ------------------
  ------------------
  268|  51.1k|  }
  269|   173k|  return true;
  270|   173k|}
_ZN10fast_float10scalar_addEmmRb:
  209|   221k|limb scalar_add(limb x, limb y, bool& overflow) noexcept {
  210|   221k|  limb z;
  211|       |// gcc and clang
  212|   221k|#if defined(__has_builtin)
  213|   221k|  #if __has_builtin(__builtin_add_overflow)
  214|   221k|    if (!cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (214:9): [Folded - Ignored]
  ------------------
  215|   221k|      overflow = __builtin_add_overflow(x, y, &z);
  216|   221k|      return z;
  217|   221k|    }
  218|      0|  #endif
  219|      0|#endif
  220|       |
  221|       |  // generic, this still optimizes correctly on MSVC.
  222|      0|  z = x + y;
  223|      0|  overflow = z < x;
  224|      0|  return z;
  225|   221k|}
_ZN10fast_float6bigint5pow10Ej:
  609|  4.02k|  FASTFLOAT_CONSTEXPR20 bool pow10(uint32_t exp) noexcept {
  610|  4.02k|    FASTFLOAT_TRY(pow5(exp));
  ------------------
  |  |  178|  4.02k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 4.02k]
  |  |  ------------------
  ------------------
  611|  4.02k|    return pow2(exp);
  612|  4.02k|  }
_ZN10fast_float6bigint4pow5Ej:
  577|  51.1k|  FASTFLOAT_CONSTEXPR20 bool pow5(uint32_t exp) noexcept {
  578|       |    // multiply by a power of 5
  579|  51.1k|    size_t large_length = sizeof(large_power_of_5) / sizeof(limb);
  580|  51.1k|    limb_span large = limb_span(large_power_of_5, large_length);
  581|  54.3k|    while (exp >= large_step) {
  ------------------
  |  Branch (581:12): [True: 3.19k, False: 51.1k]
  ------------------
  582|  3.19k|      FASTFLOAT_TRY(large_mul(vec, large));
  ------------------
  |  |  178|  3.19k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 3.19k]
  |  |  ------------------
  ------------------
  583|  3.19k|      exp -= large_step;
  584|  3.19k|    }
  585|  51.1k|#ifdef FASTFLOAT_64BIT_LIMB
  586|  51.1k|    uint32_t small_step = 27;
  587|  51.1k|    limb max_native = 7450580596923828125UL;
  588|       |#else
  589|       |    uint32_t small_step = 13;
  590|       |    limb max_native = 1220703125U;
  591|       |#endif
  592|  73.2k|    while (exp >= small_step) {
  ------------------
  |  Branch (592:12): [True: 22.0k, False: 51.1k]
  ------------------
  593|  22.0k|      FASTFLOAT_TRY(small_mul(vec, max_native));
  ------------------
  |  |  178|  22.0k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 22.0k]
  |  |  ------------------
  ------------------
  594|  22.0k|      exp -= small_step;
  595|  22.0k|    }
  596|  51.1k|    if (exp != 0) {
  ------------------
  |  Branch (596:9): [True: 44.3k, False: 6.76k]
  ------------------
  597|       |      // Work around clang bug https://godbolt.org/z/zedh7rrhc
  598|       |      // This is similar to https://github.com/llvm/llvm-project/issues/47746,
  599|       |      // except the workaround described there don't work here
  600|  44.3k|      FASTFLOAT_TRY(
  ------------------
  |  |  178|  44.3k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 44.3k]
  |  |  ------------------
  ------------------
  601|  44.3k|        small_mul(vec, limb(((void)small_power_of_5[0], small_power_of_5[exp])))
  602|  44.3k|      );
  603|  44.3k|    }
  604|       |
  605|  51.1k|    return true;
  606|  51.1k|  }
_ZN10fast_float9large_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  364|  3.19k|bool large_mul(stackvec<size>& x, limb_span y) noexcept {
  365|  3.19k|  if (y.len() == 1) {
  ------------------
  |  Branch (365:7): [True: 0, False: 3.19k]
  ------------------
  366|      0|    FASTFLOAT_TRY(small_mul(x, y[0]));
  ------------------
  |  |  178|      0|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  367|  3.19k|  } else {
  368|  3.19k|    FASTFLOAT_TRY(long_mul(x, y));
  ------------------
  |  |  178|  3.19k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 3.19k]
  |  |  ------------------
  ------------------
  369|  3.19k|  }
  370|  3.19k|  return true;
  371|  3.19k|}
_ZN10fast_float8long_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  335|  3.19k|bool long_mul(stackvec<size>& x, limb_span y) noexcept {
  336|  3.19k|  limb_span xs = limb_span(x.data, x.len());
  337|  3.19k|  stackvec<size> z(xs);
  338|  3.19k|  limb_span zs = limb_span(z.data, z.len());
  339|       |
  340|  3.19k|  if (y.len() != 0) {
  ------------------
  |  Branch (340:7): [True: 3.19k, False: 0]
  ------------------
  341|  3.19k|    limb y0 = y[0];
  342|  3.19k|    FASTFLOAT_TRY(small_mul(x, y0));
  ------------------
  |  |  178|  3.19k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 3.19k]
  |  |  ------------------
  ------------------
  343|  15.9k|    for (size_t index = 1; index < y.len(); index++) {
  ------------------
  |  Branch (343:28): [True: 12.7k, False: 3.19k]
  ------------------
  344|  12.7k|      limb yi = y[index];
  345|  12.7k|      stackvec<size> zi;
  346|  12.7k|      if (yi != 0) {
  ------------------
  |  Branch (346:11): [True: 12.7k, False: 0]
  ------------------
  347|       |        // re-use the same buffer throughout
  348|  12.7k|        zi.set_len(0);
  349|  12.7k|        FASTFLOAT_TRY(zi.try_extend(zs));
  ------------------
  |  |  178|  12.7k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 12.7k]
  |  |  ------------------
  ------------------
  350|  12.7k|        FASTFLOAT_TRY(small_mul(zi, yi));
  ------------------
  |  |  178|  12.7k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 12.7k]
  |  |  ------------------
  ------------------
  351|  12.7k|        limb_span zis = limb_span(zi.data, zi.len());
  352|  12.7k|        FASTFLOAT_TRY(large_add_from(x, zis, index));
  ------------------
  |  |  178|  12.7k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 12.7k]
  |  |  ------------------
  ------------------
  353|  12.7k|      }
  354|  12.7k|    }
  355|  3.19k|  }
  356|       |
  357|  3.19k|  x.normalize();
  358|  3.19k|  return true;
  359|  3.19k|}
_ZN10fast_float8stackvecILt62EEC2ENS_4spanImEE:
   53|  3.19k|  FASTFLOAT_CONSTEXPR20 stackvec(limb_span s) {
   54|  3.19k|    FASTFLOAT_ASSERT(try_extend(s));
  ------------------
  |  |  170|  3.19k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
   55|  3.19k|  }
_ZN10fast_float8stackvecILt62EE7set_lenEm:
   73|  47.2k|  FASTFLOAT_CONSTEXPR14 void set_len(size_t len) noexcept {
   74|  47.2k|    length = uint16_t(len);
   75|  47.2k|  }
_ZN10fast_float8stackvecILt62EE10try_extendENS_4spanImEE:
  106|  15.9k|  FASTFLOAT_CONSTEXPR20 bool try_extend(limb_span s) noexcept {
  107|  15.9k|    if (len() + s.len() <= capacity()) {
  ------------------
  |  Branch (107:9): [True: 15.9k, False: 0]
  ------------------
  108|  15.9k|      extend_unchecked(s);
  109|  15.9k|      return true;
  110|  15.9k|    } else {
  111|      0|      return false;
  112|      0|    }
  113|  15.9k|  }
_ZN10fast_float8stackvecILt62EE16extend_uncheckedENS_4spanImEE:
  100|  15.9k|  FASTFLOAT_CONSTEXPR20 void extend_unchecked(limb_span s) noexcept {
  101|  15.9k|    limb* ptr = data + length;
  102|  15.9k|    std::copy_n(s.ptr, s.len(), ptr);
  103|  15.9k|    set_len(len() + s.len());
  104|  15.9k|  }
_ZN10fast_float14large_add_fromILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEEm:
  297|  12.7k|bool large_add_from(stackvec<size>& x, limb_span y, size_t start) noexcept {
  298|       |  // the effective x buffer is from `xstart..x.len()`, so exit early
  299|       |  // if we can't get that current range.
  300|  12.7k|  if (x.len() < start || y.len() > x.len() - start) {
  ------------------
  |  Branch (300:7): [True: 0, False: 12.7k]
  |  Branch (300:26): [True: 12.5k, False: 220]
  ------------------
  301|  12.5k|      FASTFLOAT_TRY(x.try_resize(y.len() + start, 0));
  ------------------
  |  |  178|  12.5k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 12.5k]
  |  |  ------------------
  ------------------
  302|  12.5k|  }
  303|       |
  304|  12.7k|  bool carry = false;
  305|   108k|  for (size_t index = 0; index < y.len(); index++) {
  ------------------
  |  Branch (305:26): [True: 95.8k, False: 12.7k]
  ------------------
  306|  95.8k|    limb xi = x[index + start];
  307|  95.8k|    limb yi = y[index];
  308|  95.8k|    bool c1 = false;
  309|  95.8k|    bool c2 = false;
  310|  95.8k|    xi = scalar_add(xi, yi, c1);
  311|  95.8k|    if (carry) {
  ------------------
  |  Branch (311:9): [True: 36.4k, False: 59.3k]
  ------------------
  312|  36.4k|      xi = scalar_add(xi, 1, c2);
  313|  36.4k|    }
  314|  95.8k|    x[index + start] = xi;
  315|  95.8k|    carry = c1 | c2;
  316|  95.8k|  }
  317|       |
  318|       |  // handle overflow
  319|  12.7k|  if (carry) {
  ------------------
  |  Branch (319:7): [True: 0, False: 12.7k]
  ------------------
  320|      0|    FASTFLOAT_TRY(small_add_from(x, 1, y.len() + start));
  ------------------
  |  |  178|      0|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  321|      0|  }
  322|  12.7k|  return true;
  323|  12.7k|}
_ZN10fast_float8stackvecILt62EE10try_resizeEmm:
  130|  12.5k|  FASTFLOAT_CONSTEXPR20 bool try_resize(size_t new_len, limb value) noexcept {
  131|  12.5k|    if (new_len > capacity()) {
  ------------------
  |  Branch (131:9): [True: 0, False: 12.5k]
  ------------------
  132|      0|      return false;
  133|  12.5k|    } else {
  134|  12.5k|      resize_unchecked(new_len, value);
  135|  12.5k|      return true;
  136|  12.5k|    }
  137|  12.5k|  }
_ZN10fast_float8stackvecILt62EE16resize_uncheckedEmm:
  118|  12.5k|  void resize_unchecked(size_t new_len, limb value) noexcept {
  119|  12.5k|    if (new_len > len()) {
  ------------------
  |  Branch (119:9): [True: 12.5k, False: 0]
  ------------------
  120|  12.5k|      size_t count = new_len - len();
  121|  12.5k|      limb* first = data + len();
  122|  12.5k|      limb* last = first + count;
  123|  12.5k|      ::std::fill(first, last, value);
  124|  12.5k|      set_len(new_len);
  125|  12.5k|    } else {
  126|      0|      set_len(new_len);
  127|      0|    }
  128|  12.5k|  }
_ZN10fast_float8stackvecILt62EE9normalizeEv:
  151|  50.2k|  FASTFLOAT_CONSTEXPR14 void normalize() noexcept {
  152|  50.2k|    while (len() > 0 && rindex(0) == 0) {
  ------------------
  |  Branch (152:12): [True: 50.2k, False: 0]
  |  Branch (152:25): [True: 0, False: 50.2k]
  ------------------
  153|      0|      length--;
  154|      0|    }
  155|  50.2k|  }
_ZNK10fast_float8stackvecILt62EE6rindexEm:
   66|  61.8k|  FASTFLOAT_CONSTEXPR14 const limb& rindex(size_t index) const noexcept {
   67|  61.8k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|  61.8k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   68|  61.8k|    size_t rindex = length - index - 1;
   69|  61.8k|    return data[rindex];
   70|  61.8k|  }
_ZN10fast_float6bigint4pow2Ej:
  572|  51.0k|  FASTFLOAT_CONSTEXPR20 bool pow2(uint32_t exp) noexcept {
  573|  51.0k|    return shl(exp);
  574|  51.0k|  }
_ZN10fast_float6bigint3shlEm:
  530|  51.0k|  FASTFLOAT_CONSTEXPR20 bool shl(size_t n) noexcept {
  531|  51.0k|    size_t rem = n % limb_bits;
  532|  51.0k|    size_t div = n / limb_bits;
  533|  51.0k|    if (rem != 0) {
  ------------------
  |  Branch (533:9): [True: 47.1k, False: 3.88k]
  ------------------
  534|  47.1k|      FASTFLOAT_TRY(shl_bits(rem));
  ------------------
  |  |  178|  47.1k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 47.1k]
  |  |  ------------------
  ------------------
  535|  47.1k|    }
  536|  51.0k|    if (div != 0) {
  ------------------
  |  Branch (536:9): [True: 6.03k, False: 45.0k]
  ------------------
  537|  6.03k|      FASTFLOAT_TRY(shl_limbs(div));
  ------------------
  |  |  178|  6.03k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 6.03k]
  |  |  ------------------
  ------------------
  538|  6.03k|    }
  539|  51.0k|    return true;
  540|  51.0k|  }
_ZN10fast_float6bigint8shl_bitsEm:
  483|  47.1k|  FASTFLOAT_CONSTEXPR20 bool shl_bits(size_t n) noexcept {
  484|       |    // Internally, for each item, we shift left by n, and add the previous
  485|       |    // right shifted limb-bits.
  486|       |    // For example, we transform (for u8) shifted left 2, to:
  487|       |    //      b10100100 b01000010
  488|       |    //      b10 b10010001 b00001000
  489|  47.1k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  174|  47.1k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  490|  47.1k|    FASTFLOAT_DEBUG_ASSERT(n < sizeof(limb) * 8);
  ------------------
  |  |  174|  47.1k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  491|       |
  492|  47.1k|    size_t shl = n;
  493|  47.1k|    size_t shr = limb_bits - shl;
  494|  47.1k|    limb prev = 0;
  495|   155k|    for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (495:28): [True: 108k, False: 47.1k]
  ------------------
  496|   108k|      limb xi = vec[index];
  497|   108k|      vec[index] = (xi << shl) | (prev >> shr);
  498|   108k|      prev = xi;
  499|   108k|    }
  500|       |
  501|  47.1k|    limb carry = prev >> shr;
  502|  47.1k|    if (carry != 0) {
  ------------------
  |  Branch (502:9): [True: 10.4k, False: 36.6k]
  ------------------
  503|  10.4k|      return vec.try_push(carry);
  504|  10.4k|    }
  505|  36.6k|    return true;
  506|  47.1k|  }
_ZN10fast_float6bigint9shl_limbsEm:
  509|  6.03k|  FASTFLOAT_CONSTEXPR20 bool shl_limbs(size_t n) noexcept {
  510|  6.03k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  174|  6.03k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  511|  6.03k|    if (n + vec.len() > vec.capacity()) {
  ------------------
  |  Branch (511:9): [True: 0, False: 6.03k]
  ------------------
  512|      0|      return false;
  513|  6.03k|    } else if (!vec.is_empty()) {
  ------------------
  |  Branch (513:16): [True: 6.03k, False: 0]
  ------------------
  514|       |      // move limbs
  515|  6.03k|      limb* dst = vec.data + n;
  516|  6.03k|      const limb* src = vec.data;
  517|  6.03k|      std::copy_backward(src, src + vec.len(), dst + vec.len());
  518|       |      // fill in empty limbs
  519|  6.03k|      limb* first = vec.data;
  520|  6.03k|      limb* last = first + n;
  521|  6.03k|      ::std::fill(first, last, 0);
  522|  6.03k|      vec.set_len(n + vec.len());
  523|  6.03k|      return true;
  524|  6.03k|    } else {
  525|      0|      return true;
  526|      0|    }
  527|  6.03k|  }
_ZNK10fast_float8stackvecILt62EE8is_emptyEv:
   79|  10.0k|  constexpr bool is_empty() const noexcept {
   80|  10.0k|    return length == 0;
   81|  10.0k|  }
_ZNK10fast_float6bigint4hi64ERb:
  430|  4.02k|  FASTFLOAT_CONSTEXPR20 uint64_t hi64(bool& truncated) const noexcept {
  431|  4.02k|#ifdef FASTFLOAT_64BIT_LIMB
  432|  4.02k|    if (vec.len() == 0) {
  ------------------
  |  Branch (432:9): [True: 0, False: 4.02k]
  ------------------
  433|      0|      return empty_hi64(truncated);
  434|  4.02k|    } else if (vec.len() == 1) {
  ------------------
  |  Branch (434:16): [True: 952, False: 3.06k]
  ------------------
  435|    952|      return uint64_hi64(vec.rindex(0), truncated);
  436|  3.06k|    } else {
  437|  3.06k|      uint64_t result = uint64_hi64(vec.rindex(0), vec.rindex(1), truncated);
  438|  3.06k|      truncated |= vec.nonzero(2);
  439|  3.06k|      return result;
  440|  3.06k|    }
  441|       |#else
  442|       |    if (vec.len() == 0) {
  443|       |      return empty_hi64(truncated);
  444|       |    } else if (vec.len() == 1) {
  445|       |      return uint32_hi64(vec.rindex(0), truncated);
  446|       |    } else if (vec.len() == 2) {
  447|       |      return uint32_hi64(vec.rindex(0), vec.rindex(1), truncated);
  448|       |    } else {
  449|       |      uint64_t result = uint32_hi64(vec.rindex(0), vec.rindex(1), vec.rindex(2), truncated);
  450|       |      truncated |= vec.nonzero(3);
  451|       |      return result;
  452|       |    }
  453|       |#endif
  454|  4.02k|  }
_ZN10fast_float11uint64_hi64EmRb:
  165|    952|uint64_t uint64_hi64(uint64_t r0, bool& truncated) noexcept {
  166|    952|  truncated = false;
  167|    952|  int shl = leading_zeroes(r0);
  168|    952|  return r0 << shl;
  169|    952|}
_ZN10fast_float11uint64_hi64EmmRb:
  172|  3.06k|uint64_t uint64_hi64(uint64_t r0, uint64_t r1, bool& truncated) noexcept {
  173|  3.06k|  int shl = leading_zeroes(r0);
  174|  3.06k|  if (shl == 0) {
  ------------------
  |  Branch (174:7): [True: 36, False: 3.03k]
  ------------------
  175|     36|    truncated = r1 != 0;
  176|     36|    return r0;
  177|  3.03k|  } else {
  178|  3.03k|    int shr = 64 - shl;
  179|  3.03k|    truncated = (r1 << shl) != 0;
  180|  3.03k|    return (r0 << shl) | (r1 >> shr);
  181|  3.03k|  }
  182|  3.06k|}
_ZNK10fast_float8stackvecILt62EE7nonzeroEm:
  141|  3.06k|  FASTFLOAT_CONSTEXPR14 bool nonzero(size_t index) const noexcept {
  142|  3.10k|    while (index < len()) {
  ------------------
  |  Branch (142:12): [True: 503, False: 2.60k]
  ------------------
  143|    503|      if (rindex(index) != 0) {
  ------------------
  |  Branch (143:11): [True: 465, False: 38]
  ------------------
  144|    465|        return true;
  145|    465|      }
  146|     38|      index++;
  147|     38|    }
  148|  2.60k|    return false;
  149|  3.06k|  }
_ZNK10fast_float6bigint10bit_lengthEv:
  558|  4.02k|  FASTFLOAT_CONSTEXPR20 int bit_length() const noexcept {
  559|  4.02k|    int lz = ctlz();
  560|  4.02k|    return int(limb_bits * vec.len()) - lz;
  561|  4.02k|  }
_ZNK10fast_float6bigint4ctlzEv:
  543|  4.02k|  FASTFLOAT_CONSTEXPR20 int ctlz() const noexcept {
  544|  4.02k|    if (vec.is_empty()) {
  ------------------
  |  Branch (544:9): [True: 0, False: 4.02k]
  ------------------
  545|      0|      return 0;
  546|  4.02k|    } else {
  547|  4.02k|#ifdef FASTFLOAT_64BIT_LIMB
  548|  4.02k|      return leading_zeroes(vec.rindex(0));
  549|       |#else
  550|       |      // no use defining a specialized leading_zeroes for a 32-bit type.
  551|       |      uint64_t r0 = vec.rindex(0);
  552|       |      return leading_zeroes(r0 << 32);
  553|       |#endif
  554|  4.02k|    }
  555|  4.02k|  }
_ZN10fast_float6bigintC2Em:
  418|  47.0k|  FASTFLOAT_CONSTEXPR20 bigint(uint64_t value): vec() {
  419|  47.0k|#ifdef FASTFLOAT_64BIT_LIMB
  420|  47.0k|    vec.push_unchecked(value);
  421|       |#else
  422|       |    vec.push_unchecked(uint32_t(value));
  423|       |    vec.push_unchecked(uint32_t(value >> 32));
  424|       |#endif
  425|  47.0k|    vec.normalize();
  426|  47.0k|  }
_ZNK10fast_float6bigint7compareERKS0_:
  462|  47.0k|  FASTFLOAT_CONSTEXPR20 int compare(const bigint& other) const noexcept {
  463|  47.0k|    if (vec.len() > other.vec.len()) {
  ------------------
  |  Branch (463:9): [True: 0, False: 47.0k]
  ------------------
  464|      0|      return 1;
  465|  47.0k|    } else if (vec.len() < other.vec.len()) {
  ------------------
  |  Branch (465:16): [True: 0, False: 47.0k]
  ------------------
  466|      0|      return -1;
  467|  47.0k|    } else {
  468|  92.3k|      for (size_t index = vec.len(); index > 0; index--) {
  ------------------
  |  Branch (468:38): [True: 88.4k, False: 3.86k]
  ------------------
  469|  88.4k|        limb xi = vec[index - 1];
  470|  88.4k|        limb yi = other.vec[index - 1];
  471|  88.4k|        if (xi > yi) {
  ------------------
  |  Branch (471:13): [True: 11.0k, False: 77.4k]
  ------------------
  472|  11.0k|          return 1;
  473|  77.4k|        } else if (xi < yi) {
  ------------------
  |  Branch (473:20): [True: 32.1k, False: 45.2k]
  ------------------
  474|  32.1k|          return -1;
  475|  32.1k|        }
  476|  88.4k|      }
  477|  3.86k|      return 0;
  478|  47.0k|    }
  479|  47.0k|  }
_ZNK10fast_float8stackvecILt62EEixEm:
   61|   176k|  FASTFLOAT_CONSTEXPR14 const limb& operator[](size_t index) const noexcept {
   62|   176k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   176k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   63|   176k|    return data[index];
   64|   176k|  }

_ZN10fast_float13compute_floatINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   94|   201k|adjusted_mantissa compute_float(int64_t q, uint64_t w)  noexcept  {
   95|   201k|  adjusted_mantissa answer;
   96|   201k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (96:7): [True: 3.39k, False: 197k]
  |  Branch (96:19): [True: 1.16k, False: 196k]
  ------------------
   97|  4.56k|    answer.power2 = 0;
   98|  4.56k|    answer.mantissa = 0;
   99|       |    // result should be zero
  100|  4.56k|    return answer;
  101|  4.56k|  }
  102|   196k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (102:7): [True: 7.01k, False: 189k]
  ------------------
  103|       |    // we want to get infinity:
  104|  7.01k|    answer.power2 = binary::infinite_power();
  105|  7.01k|    answer.mantissa = 0;
  106|  7.01k|    return answer;
  107|  7.01k|  }
  108|       |  // At this point in time q is in [powers::smallest_power_of_five, powers::largest_power_of_five].
  109|       |
  110|       |  // We want the most significant bit of i to be 1. Shift if needed.
  111|   189k|  int lz = leading_zeroes(w);
  112|   189k|  w <<= lz;
  113|       |
  114|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  115|       |  // 1. We need the implicit bit
  116|       |  // 2. We need an extra bit for rounding purposes
  117|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small, requiring a shift)
  118|       |
  119|   189k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  120|       |  // The computed 'product' is always sufficient.
  121|       |  // Mathematical proof:
  122|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to appear)
  123|       |  // See script/mushtak_lemire.py
  124|       |
  125|       |  // The "compute_product_approximation" function can be slightly slower than a branchless approach:
  126|       |  // value128 product = compute_product(q, w);
  127|       |  // but in practice, we can win big with the compute_product_approximation if its additional branch
  128|       |  // is easily predicted. Which is best is data specific.
  129|   189k|  int upperbit = int(product.high >> 63);
  130|       |
  131|   189k|  answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  132|       |
  133|   189k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz - binary::minimum_exponent());
  134|   189k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (134:7): [True: 940, False: 188k]
  ------------------
  135|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  136|    940|    if(-answer.power2 + 1 >= 64) { // if we have more than 64 bits below the minimum exponent, you have a zero for sure.
  ------------------
  |  Branch (136:8): [True: 88, False: 852]
  ------------------
  137|     88|      answer.power2 = 0;
  138|     88|      answer.mantissa = 0;
  139|       |      // result should be zero
  140|     88|      return answer;
  141|     88|    }
  142|       |    // next line is safe because -answer.power2 + 1 < 64
  143|    852|    answer.mantissa >>= -answer.power2 + 1;
  144|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  145|       |    // "round-to-even" only occurs for powers close to 0.
  146|    852|    answer.mantissa += (answer.mantissa & 1); // round up
  147|    852|    answer.mantissa >>= 1;
  148|       |    // There is a weird scenario where we don't have a subnormal but just.
  149|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  150|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  151|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  152|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  153|       |    // subnormal, but we can only know this after rounding.
  154|       |    // So we only declare a subnormal if we are smaller than the threshold.
  155|    852|    answer.power2 = (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (155:21): [True: 852, False: 0]
  ------------------
  156|    852|    return answer;
  157|    940|  }
  158|       |
  159|       |  // usually, we round *up*, but if we fall right in between and and we have an
  160|       |  // even basis, we need to round down
  161|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  162|   188k|  if ((product.low <= 1) &&  (q >= binary::min_exponent_round_to_even()) && (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (162:7): [True: 65.2k, False: 123k]
  |  Branch (162:30): [True: 63.5k, False: 1.70k]
  |  Branch (162:77): [True: 58.1k, False: 5.41k]
  ------------------
  163|   188k|      ((answer.mantissa & 3) == 1) ) { // we may fall between two floats!
  ------------------
  |  Branch (163:7): [True: 8.09k, False: 50.0k]
  ------------------
  164|       |    // To be in-between two floats we need that in doing
  165|       |    //   answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  166|       |    // ... we dropped out only zeroes. But if this happened, then we can go back!!!
  167|  8.09k|    if((answer.mantissa  << (upperbit + 64 - binary::mantissa_explicit_bits() - 3)) ==  product.high) {
  ------------------
  |  Branch (167:8): [True: 4.06k, False: 4.03k]
  ------------------
  168|  4.06k|      answer.mantissa &= ~uint64_t(1);          // flip it so that we do not round up
  169|  4.06k|    }
  170|  8.09k|  }
  171|       |
  172|   188k|  answer.mantissa += (answer.mantissa & 1); // round up
  173|   188k|  answer.mantissa >>= 1;
  174|   188k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (174:7): [True: 12.2k, False: 176k]
  ------------------
  175|  12.2k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  176|  12.2k|    answer.power2++; // undo previous addition
  177|  12.2k|  }
  178|       |
  179|   188k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  180|   188k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (180:7): [True: 1.09k, False: 187k]
  ------------------
  181|  1.09k|    answer.power2 = binary::infinite_power();
  182|  1.09k|    answer.mantissa = 0;
  183|  1.09k|  }
  184|   188k|  return answer;
  185|   189k|}
_ZN10fast_float29compute_product_approximationILi26EEENS_8value128Elm:
   21|   210k|value128 compute_product_approximation(int64_t q, uint64_t w) {
   22|   210k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   23|       |  // For small values of q, e.g., q in [0,27], the answer is always exact because
   24|       |  // The line value128 firstproduct = full_multiplication(w, power_of_five_128[index]);
   25|       |  // gives the exact answer.
   26|   210k|  value128 firstproduct = full_multiplication(w, powers::power_of_five_128[index]);
   27|   210k|  static_assert((bit_precision >= 0) && (bit_precision <= 64), " precision should  be in (0,64]");
   28|   210k|  constexpr uint64_t precision_mask = (bit_precision < 64) ?
  ------------------
  |  Branch (28:39): [Folded - Ignored]
  ------------------
   29|      0|               (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
   30|   210k|               : uint64_t(0xFFFFFFFFFFFFFFFF);
   31|   210k|  if((firstproduct.high & precision_mask) == precision_mask) { // could further guard with  (lower + w < lower)
  ------------------
  |  Branch (31:6): [True: 41.2k, False: 169k]
  ------------------
   32|       |    // regarding the second product, we only need secondproduct.high, but our expectation is that the compiler will optimize this extra work away if needed.
   33|  41.2k|    value128 secondproduct = full_multiplication(w, powers::power_of_five_128[index + 1]);
   34|  41.2k|    firstproduct.low += secondproduct.high;
   35|  41.2k|    if(secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (35:8): [True: 29.6k, False: 11.5k]
  ------------------
   36|  29.6k|      firstproduct.high++;
   37|  29.6k|    }
   38|  41.2k|  }
   39|   210k|  return firstproduct;
   40|   210k|}
_ZN10fast_float6detail5powerEi:
   58|   416k|  constexpr fastfloat_really_inline int32_t power(int32_t q)  noexcept  {
   59|   416k|    return (((152170 + 65536) * q) >> 16) + 63;
   60|   416k|  }
_ZN10fast_float13compute_errorINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   80|  21.4k|adjusted_mantissa compute_error(int64_t q, uint64_t w)  noexcept  {
   81|  21.4k|  int lz = leading_zeroes(w);
   82|  21.4k|  w <<= lz;
   83|  21.4k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   84|  21.4k|  return compute_error_scaled<binary>(q, product.high, lz);
   85|  21.4k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIfEEEENS_17adjusted_mantissaElmi:
   67|  21.4k|adjusted_mantissa compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept  {
   68|  21.4k|  int hilz = int(w >> 63) ^ 1;
   69|  21.4k|  adjusted_mantissa answer;
   70|  21.4k|  answer.mantissa = w << hilz;
   71|  21.4k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   72|  21.4k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 + invalid_am_bias);
   73|  21.4k|  return answer;
   74|  21.4k|}
_ZN10fast_float13compute_floatINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   94|   183k|adjusted_mantissa compute_float(int64_t q, uint64_t w)  noexcept  {
   95|   183k|  adjusted_mantissa answer;
   96|   183k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (96:7): [True: 3.15k, False: 179k]
  |  Branch (96:19): [True: 299, False: 179k]
  ------------------
   97|  3.45k|    answer.power2 = 0;
   98|  3.45k|    answer.mantissa = 0;
   99|       |    // result should be zero
  100|  3.45k|    return answer;
  101|  3.45k|  }
  102|   179k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (102:7): [True: 3.64k, False: 175k]
  ------------------
  103|       |    // we want to get infinity:
  104|  3.64k|    answer.power2 = binary::infinite_power();
  105|  3.64k|    answer.mantissa = 0;
  106|  3.64k|    return answer;
  107|  3.64k|  }
  108|       |  // At this point in time q is in [powers::smallest_power_of_five, powers::largest_power_of_five].
  109|       |
  110|       |  // We want the most significant bit of i to be 1. Shift if needed.
  111|   175k|  int lz = leading_zeroes(w);
  112|   175k|  w <<= lz;
  113|       |
  114|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  115|       |  // 1. We need the implicit bit
  116|       |  // 2. We need an extra bit for rounding purposes
  117|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small, requiring a shift)
  118|       |
  119|   175k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  120|       |  // The computed 'product' is always sufficient.
  121|       |  // Mathematical proof:
  122|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to appear)
  123|       |  // See script/mushtak_lemire.py
  124|       |
  125|       |  // The "compute_product_approximation" function can be slightly slower than a branchless approach:
  126|       |  // value128 product = compute_product(q, w);
  127|       |  // but in practice, we can win big with the compute_product_approximation if its additional branch
  128|       |  // is easily predicted. Which is best is data specific.
  129|   175k|  int upperbit = int(product.high >> 63);
  130|       |
  131|   175k|  answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  132|       |
  133|   175k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz - binary::minimum_exponent());
  134|   175k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (134:7): [True: 2.61k, False: 173k]
  ------------------
  135|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  136|  2.61k|    if(-answer.power2 + 1 >= 64) { // if we have more than 64 bits below the minimum exponent, you have a zero for sure.
  ------------------
  |  Branch (136:8): [True: 102, False: 2.51k]
  ------------------
  137|    102|      answer.power2 = 0;
  138|    102|      answer.mantissa = 0;
  139|       |      // result should be zero
  140|    102|      return answer;
  141|    102|    }
  142|       |    // next line is safe because -answer.power2 + 1 < 64
  143|  2.51k|    answer.mantissa >>= -answer.power2 + 1;
  144|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  145|       |    // "round-to-even" only occurs for powers close to 0.
  146|  2.51k|    answer.mantissa += (answer.mantissa & 1); // round up
  147|  2.51k|    answer.mantissa >>= 1;
  148|       |    // There is a weird scenario where we don't have a subnormal but just.
  149|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  150|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  151|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  152|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  153|       |    // subnormal, but we can only know this after rounding.
  154|       |    // So we only declare a subnormal if we are smaller than the threshold.
  155|  2.51k|    answer.power2 = (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (155:21): [True: 2.51k, False: 0]
  ------------------
  156|  2.51k|    return answer;
  157|  2.61k|  }
  158|       |
  159|       |  // usually, we round *up*, but if we fall right in between and and we have an
  160|       |  // even basis, we need to round down
  161|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  162|   173k|  if ((product.low <= 1) &&  (q >= binary::min_exponent_round_to_even()) && (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (162:7): [True: 52.9k, False: 120k]
  |  Branch (162:30): [True: 29.2k, False: 23.6k]
  |  Branch (162:77): [True: 24.9k, False: 4.32k]
  ------------------
  163|   173k|      ((answer.mantissa & 3) == 1) ) { // we may fall between two floats!
  ------------------
  |  Branch (163:7): [True: 5.32k, False: 19.6k]
  ------------------
  164|       |    // To be in-between two floats we need that in doing
  165|       |    //   answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  166|       |    // ... we dropped out only zeroes. But if this happened, then we can go back!!!
  167|  5.32k|    if((answer.mantissa  << (upperbit + 64 - binary::mantissa_explicit_bits() - 3)) ==  product.high) {
  ------------------
  |  Branch (167:8): [True: 4.23k, False: 1.08k]
  ------------------
  168|  4.23k|      answer.mantissa &= ~uint64_t(1);          // flip it so that we do not round up
  169|  4.23k|    }
  170|  5.32k|  }
  171|       |
  172|   173k|  answer.mantissa += (answer.mantissa & 1); // round up
  173|   173k|  answer.mantissa >>= 1;
  174|   173k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (174:7): [True: 11.6k, False: 161k]
  ------------------
  175|  11.6k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  176|  11.6k|    answer.power2++; // undo previous addition
  177|  11.6k|  }
  178|       |
  179|   173k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  180|   173k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (180:7): [True: 244, False: 173k]
  ------------------
  181|    244|    answer.power2 = binary::infinite_power();
  182|    244|    answer.mantissa = 0;
  183|    244|  }
  184|   173k|  return answer;
  185|   175k|}
_ZN10fast_float29compute_product_approximationILi55EEENS_8value128Elm:
   21|   205k|value128 compute_product_approximation(int64_t q, uint64_t w) {
   22|   205k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   23|       |  // For small values of q, e.g., q in [0,27], the answer is always exact because
   24|       |  // The line value128 firstproduct = full_multiplication(w, power_of_five_128[index]);
   25|       |  // gives the exact answer.
   26|   205k|  value128 firstproduct = full_multiplication(w, powers::power_of_five_128[index]);
   27|   205k|  static_assert((bit_precision >= 0) && (bit_precision <= 64), " precision should  be in (0,64]");
   28|   205k|  constexpr uint64_t precision_mask = (bit_precision < 64) ?
  ------------------
  |  Branch (28:39): [Folded - Ignored]
  ------------------
   29|      0|               (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
   30|   205k|               : uint64_t(0xFFFFFFFFFFFFFFFF);
   31|   205k|  if((firstproduct.high & precision_mask) == precision_mask) { // could further guard with  (lower + w < lower)
  ------------------
  |  Branch (31:6): [True: 80.1k, False: 125k]
  ------------------
   32|       |    // regarding the second product, we only need secondproduct.high, but our expectation is that the compiler will optimize this extra work away if needed.
   33|  80.1k|    value128 secondproduct = full_multiplication(w, powers::power_of_five_128[index + 1]);
   34|  80.1k|    firstproduct.low += secondproduct.high;
   35|  80.1k|    if(secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (35:8): [True: 26.4k, False: 53.6k]
  ------------------
   36|  26.4k|      firstproduct.high++;
   37|  26.4k|    }
   38|  80.1k|  }
   39|   205k|  return firstproduct;
   40|   205k|}
_ZN10fast_float13compute_errorINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   80|  29.6k|adjusted_mantissa compute_error(int64_t q, uint64_t w)  noexcept  {
   81|  29.6k|  int lz = leading_zeroes(w);
   82|  29.6k|  w <<= lz;
   83|  29.6k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   84|  29.6k|  return compute_error_scaled<binary>(q, product.high, lz);
   85|  29.6k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIdEEEENS_17adjusted_mantissaElmi:
   67|  29.6k|adjusted_mantissa compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept  {
   68|  29.6k|  int hilz = int(w >> 63) ^ 1;
   69|  29.6k|  adjusted_mantissa answer;
   70|  29.6k|  answer.mantissa = w << hilz;
   71|  29.6k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   72|  29.6k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 + invalid_am_bias);
   73|  29.6k|  return answer;
   74|  29.6k|}

_ZN10fast_float10digit_compIfcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  21.4k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  21.4k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  21.4k|  int32_t sci_exp = scientific_exponent(num);
  411|  21.4k|  size_t max_digits = binary_format<T>::max_digits();
  412|  21.4k|  size_t digits = 0;
  413|  21.4k|  bigint bigmant;
  414|  21.4k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  21.4k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  21.4k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 514, False: 20.9k]
  ------------------
  418|    514|    return positive_digit_comp<T>(bigmant, exponent);
  419|  20.9k|  } else {
  420|  20.9k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  20.9k|  }
  422|  21.4k|}
_ZN10fast_float19scientific_exponentIcEEiRNS_22parsed_number_string_tIT_EE:
   28|  51.0k|int32_t scientific_exponent(parsed_number_string_t<UC> & num) noexcept {
   29|  51.0k|  uint64_t mantissa = num.mantissa;
   30|  51.0k|  int32_t exponent = int32_t(num.exponent);
   31|   255k|  while (mantissa >= 10000) {
  ------------------
  |  Branch (31:10): [True: 204k, False: 51.0k]
  ------------------
   32|   204k|    mantissa /= 10000;
   33|   204k|    exponent += 4;
   34|   204k|  }
   35|   102k|  while (mantissa >= 100) {
  ------------------
  |  Branch (35:10): [True: 51.0k, False: 51.0k]
  ------------------
   36|  51.0k|    mantissa /= 100;
   37|  51.0k|    exponent += 2;
   38|  51.0k|  }
   39|  51.0k|  while (mantissa >= 10) {
  ------------------
  |  Branch (39:10): [True: 0, False: 51.0k]
  ------------------
   40|      0|    mantissa /= 10;
   41|      0|    exponent += 1;
   42|      0|  }
   43|  51.0k|  return exponent;
   44|  51.0k|}
_ZN10fast_float14parse_mantissaIcEEvRNS_6bigintERNS_22parsed_number_string_tIT_EEmRm:
  240|  51.0k|void parse_mantissa(bigint& result, parsed_number_string_t<UC>& num, size_t max_digits, size_t& digits) noexcept {
  241|       |  // try to minimize the number of big integer and scalar multiplication.
  242|       |  // therefore, try to parse 8 digits at a time, and multiply by the largest
  243|       |  // scalar value (9 or 19 digits) for each step.
  244|  51.0k|  size_t counter = 0;
  245|  51.0k|  digits = 0;
  246|  51.0k|  limb value = 0;
  247|  51.0k|#ifdef FASTFLOAT_64BIT_LIMB
  248|  51.0k|  size_t step = 19;
  249|       |#else
  250|       |  size_t step = 9;
  251|       |#endif
  252|       |
  253|       |  // process all integer digits.
  254|  51.0k|  UC const * p = num.integer.ptr;
  255|  51.0k|  UC const * pend = p + num.integer.len();
  256|  51.0k|  skip_zeros(p, pend);
  257|       |  // process all digits, in increments of step per loop
  258|   115k|  while (p != pend) {
  ------------------
  |  Branch (258:10): [True: 64.3k, False: 50.7k]
  ------------------
  259|   110k|    while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (259:12): [True: 59.6k, False: 50.7k]
  |  Branch (259:45): [True: 46.2k, False: 13.4k]
  |  Branch (259:70): [True: 45.9k, False: 272]
  ------------------
  260|  45.9k|      parse_eight_digits(p, value, counter, digits);
  261|  45.9k|    }
  262|   205k|    while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (262:12): [True: 189k, False: 15.6k]
  |  Branch (262:30): [True: 141k, False: 48.4k]
  |  Branch (262:43): [True: 141k, False: 272]
  ------------------
  263|   141k|      parse_one_digit(p, value, counter, digits);
  264|   141k|    }
  265|  64.3k|    if (digits == max_digits) {
  ------------------
  |  Branch (265:9): [True: 272, False: 64.1k]
  ------------------
  266|       |      // add the temporary value, then check if we've truncated any digits
  267|    272|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  268|    272|      bool truncated = is_truncated(p, pend);
  269|    272|      if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (269:11): [True: 236, False: 36]
  ------------------
  270|    236|        truncated |= is_truncated(num.fraction);
  271|    236|      }
  272|    272|      if (truncated) {
  ------------------
  |  Branch (272:11): [True: 166, False: 106]
  ------------------
  273|    166|        round_up_bigint(result, digits);
  274|    166|      }
  275|    272|      return;
  276|  64.1k|    } else {
  277|  64.1k|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  278|  64.1k|      counter = 0;
  279|  64.1k|      value = 0;
  280|  64.1k|    }
  281|  64.3k|  }
  282|       |
  283|       |  // add our fraction digits, if they're available.
  284|  50.7k|  if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (284:7): [True: 47.1k, False: 3.61k]
  ------------------
  285|  47.1k|    p = num.fraction.ptr;
  286|  47.1k|    pend = p + num.fraction.len();
  287|  47.1k|    if (digits == 0) {
  ------------------
  |  Branch (287:9): [True: 2.31k, False: 44.8k]
  ------------------
  288|  2.31k|      skip_zeros(p, pend);
  289|  2.31k|    }
  290|       |    // process all digits, in increments of step per loop
  291|   151k|    while (p != pend) {
  ------------------
  |  Branch (291:12): [True: 106k, False: 44.4k]
  ------------------
  292|   254k|      while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (292:14): [True: 198k, False: 56.6k]
  |  Branch (292:47): [True: 149k, False: 48.7k]
  |  Branch (292:72): [True: 148k, False: 1.27k]
  ------------------
  293|   148k|        parse_eight_digits(p, value, counter, digits);
  294|   148k|      }
  295|   445k|      while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (295:14): [True: 384k, False: 61.2k]
  |  Branch (295:32): [True: 341k, False: 43.2k]
  |  Branch (295:45): [True: 339k, False: 2.12k]
  ------------------
  296|   339k|        parse_one_digit(p, value, counter, digits);
  297|   339k|      }
  298|   106k|      if (digits == max_digits) {
  ------------------
  |  Branch (298:11): [True: 2.70k, False: 103k]
  ------------------
  299|       |        // add the temporary value, then check if we've truncated any digits
  300|  2.70k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  301|  2.70k|        bool truncated = is_truncated(p, pend);
  302|  2.70k|        if (truncated) {
  ------------------
  |  Branch (302:13): [True: 1.89k, False: 815]
  ------------------
  303|  1.89k|          round_up_bigint(result, digits);
  304|  1.89k|        }
  305|  2.70k|        return;
  306|   103k|      } else {
  307|   103k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  308|   103k|        counter = 0;
  309|   103k|        value = 0;
  310|   103k|      }
  311|   106k|    }
  312|  47.1k|  }
  313|       |
  314|  48.0k|  if (counter != 0) {
  ------------------
  |  Branch (314:7): [True: 0, False: 48.0k]
  ------------------
  315|      0|    add_native(result, limb(powers_of_ten_uint64[counter]), value);
  316|      0|  }
  317|  48.0k|}
_ZN10fast_float10skip_zerosIcEEvRPKT_S3_:
  159|  53.3k|void skip_zeros(UC const * & first, UC const * last) noexcept {
  160|  53.3k|  uint64_t val;
  161|  65.4k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (161:10): [Folded - Ignored]
  |  Branch (161:39): [True: 31.8k, False: 33.5k]
  ------------------
  162|  31.8k|    ::memcpy(&val, first, sizeof(uint64_t));
  163|  31.8k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (163:9): [True: 19.7k, False: 12.0k]
  ------------------
  164|  19.7k|      break;
  165|  19.7k|    }
  166|  12.0k|    first += int_cmp_len<UC>();
  167|  12.0k|  }
  168|   102k|  while (first != last) {
  ------------------
  |  Branch (168:10): [True: 100k, False: 2.31k]
  ------------------
  169|   100k|    if (*first != UC('0')) {
  ------------------
  |  Branch (169:9): [True: 51.0k, False: 49.1k]
  ------------------
  170|  51.0k|      break;
  171|  51.0k|    }
  172|  49.1k|    first++;
  173|  49.1k|  }
  174|  53.3k|}
_ZN10fast_float18parse_eight_digitsIcEEvRPKT_RmS5_S5_:
  207|   194k|void parse_eight_digits(const UC*& p, limb& value, size_t& counter, size_t& count) noexcept {
  208|   194k|  value = value * 100000000 + parse_eight_digits_unrolled(p);
  209|   194k|  p += 8;
  210|   194k|  counter += 8;
  211|   194k|  count += 8;
  212|   194k|}
_ZN10fast_float15parse_one_digitIcEEvRPKT_RmS5_S5_:
  216|   480k|void parse_one_digit(UC const *& p, limb& value, size_t& counter, size_t& count) noexcept {
  217|   480k|  value = value * 10 + limb(*p - UC('0'));
  218|   480k|  p++;
  219|   480k|  counter++;
  220|   480k|  count++;
  221|   480k|}
_ZN10fast_float10add_nativeERNS_6bigintEmm:
  224|   173k|void add_native(bigint& big, limb power, limb value) noexcept {
  225|   173k|  big.mul(power);
  226|   173k|  big.add(value);
  227|   173k|}
_ZN10fast_float12is_truncatedIcEEbPKT_S3_:
  180|  3.21k|bool is_truncated(UC const * first, UC const * last) noexcept {
  181|       |  // do 8-bit optimizations, can just compare to 8 literal 0s.
  182|  3.21k|  uint64_t val;
  183|  6.38k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (183:10): [Folded - Ignored]
  |  Branch (183:39): [True: 4.20k, False: 2.18k]
  ------------------
  184|  4.20k|    ::memcpy(&val, first, sizeof(uint64_t));
  185|  4.20k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (185:9): [True: 1.03k, False: 3.16k]
  ------------------
  186|  1.03k|      return true;
  187|  1.03k|    }
  188|  3.16k|    first += int_cmp_len<UC>();
  189|  3.16k|  }
  190|  3.69k|  while (first != last) {
  ------------------
  |  Branch (190:10): [True: 2.62k, False: 1.07k]
  ------------------
  191|  2.62k|    if (*first != UC('0')) {
  ------------------
  |  Branch (191:9): [True: 1.11k, False: 1.51k]
  ------------------
  192|  1.11k|      return true;
  193|  1.11k|    }
  194|  1.51k|    ++first;
  195|  1.51k|  }
  196|  1.07k|  return false;
  197|  2.18k|}
_ZN10fast_float12is_truncatedIcEEbNS_4spanIKT_EE:
  200|    236|bool is_truncated(span<const UC> s) noexcept {
  201|    236|  return is_truncated(s.ptr, s.ptr + s.len());
  202|    236|}
_ZN10fast_float15round_up_bigintERNS_6bigintERm:
  230|  2.05k|void round_up_bigint(bigint& big, size_t& count) noexcept {
  231|       |  // need to round-up the digits, but need to avoid rounding
  232|       |  // ....9999 to ...10000, which could cause a false halfway point.
  233|  2.05k|  add_native(big, 10, 1);
  234|  2.05k|  count++;
  235|  2.05k|}
_ZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEi:
  321|    514|adjusted_mantissa positive_digit_comp(bigint& bigmant, int32_t exponent) noexcept {
  322|    514|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  170|    514|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  323|    514|  adjusted_mantissa answer;
  324|    514|  bool truncated;
  325|    514|  answer.mantissa = bigmant.hi64(truncated);
  326|    514|  int bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
  327|    514|  answer.power2 = bigmant.bit_length() - 64 + bias;
  328|       |
  329|    514|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|    514|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    514|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|    514|    });
  333|    514|  });
  334|       |
  335|    514|  return answer;
  336|    514|}
_ZN10fast_float5roundIfZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
   93|    514|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|    514|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|    514|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 514]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|    514|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|    514|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 514]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|    514|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|    514|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 514]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|    514|}
_ZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  329|    514|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|    514|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    514|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|    514|    });
  333|    514|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  123|    514|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|    514|  const uint64_t mask
  125|    514|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 514]
  ------------------
  126|    514|    ? UINT64_MAX
  127|    514|    : (uint64_t(1) << shift) - 1;
  128|    514|  const uint64_t halfway
  129|    514|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 514]
  ------------------
  130|    514|    ? 0
  131|    514|    : uint64_t(1) << (shift - 1);
  132|    514|  uint64_t truncated_bits = am.mantissa & mask;
  133|    514|  bool is_above = truncated_bits > halfway;
  134|    514|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|    514|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 514]
  ------------------
  138|      0|    am.mantissa = 0;
  139|    514|  } else {
  140|    514|    am.mantissa >>= shift;
  141|    514|  }
  142|    514|  am.power2 += shift;
  143|       |
  144|    514|  bool is_odd = (am.mantissa & 1) == 1;
  145|    514|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|    514|}
_ZZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  330|    514|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    514|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  ------------------
  |  Branch (331:14): [True: 74, False: 440]
  |  Branch (331:27): [True: 348, False: 92]
  |  Branch (331:41): [True: 58, False: 290]
  |  Branch (331:56): [True: 56, False: 326]
  |  Branch (331:66): [True: 32, False: 24]
  ------------------
  332|    514|    });
_ZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_i:
  345|  20.9k|adjusted_mantissa negative_digit_comp(bigint& bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  346|  20.9k|  bigint& real_digits = bigmant;
  347|  20.9k|  int32_t real_exp = exponent;
  348|       |
  349|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  350|  20.9k|  adjusted_mantissa am_b = am;
  351|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with -Wnoexcept-type.
  352|  20.9k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
  353|  20.9k|  T b;
  354|  20.9k|  to_float(false, am_b, b);
  355|  20.9k|  adjusted_mantissa theor = to_extended_halfway(b);
  356|  20.9k|  bigint theor_digits(theor.mantissa);
  357|  20.9k|  int32_t theor_exp = theor.power2;
  358|       |
  359|       |  // scale real digits and theor digits to be same power.
  360|  20.9k|  int32_t pow2_exp = theor_exp - real_exp;
  361|  20.9k|  uint32_t pow5_exp = uint32_t(-real_exp);
  362|  20.9k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (362:7): [True: 20.9k, False: 0]
  ------------------
  363|  20.9k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  170|  20.9k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  364|  20.9k|  }
  365|  20.9k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (365:7): [True: 20.9k, False: 0]
  ------------------
  366|  20.9k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  170|  20.9k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  367|  20.9k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (367:14): [True: 0, False: 0]
  ------------------
  368|      0|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  170|      0|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  369|      0|  }
  370|       |
  371|       |  // compare digits, and use it to director rounding
  372|  20.9k|  int ord = real_digits.compare(theor_digits);
  373|  20.9k|  adjusted_mantissa answer = am;
  374|  20.9k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  20.9k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  20.9k|      (void)_;  // not needed, since we've done our comparison
  377|  20.9k|      (void)__; // not needed, since we've done our comparison
  378|  20.9k|      if (ord > 0) {
  379|  20.9k|        return true;
  380|  20.9k|      } else if (ord < 0) {
  381|  20.9k|        return false;
  382|  20.9k|      } else {
  383|  20.9k|        return is_odd;
  384|  20.9k|      }
  385|  20.9k|    });
  386|  20.9k|  });
  387|       |
  388|  20.9k|  return answer;
  389|  20.9k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
   93|  20.9k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  20.9k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  20.9k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 20.9k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  20.9k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  20.9k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 20.9k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  20.9k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  20.9k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 20.9k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  20.9k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  352|  20.9k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float10round_downERNS_17adjusted_mantissaEi:
  149|  47.0k|void round_down(adjusted_mantissa& am, int32_t shift) noexcept {
  150|  47.0k|  if (shift == 64) {
  ------------------
  |  Branch (150:7): [True: 0, False: 47.0k]
  ------------------
  151|      0|    am.mantissa = 0;
  152|  47.0k|  } else {
  153|  47.0k|    am.mantissa >>= shift;
  154|  47.0k|  }
  155|  47.0k|  am.power2 += shift;
  156|  47.0k|}
_ZN10fast_float19to_extended_halfwayIfEENS_17adjusted_mantissaET_:
   82|  20.9k|adjusted_mantissa to_extended_halfway(T value) noexcept {
   83|  20.9k|  adjusted_mantissa am = to_extended(value);
   84|  20.9k|  am.mantissa <<= 1;
   85|  20.9k|  am.mantissa += 1;
   86|  20.9k|  am.power2 -= 1;
   87|  20.9k|  return am;
   88|  20.9k|}
_ZN10fast_float11to_extendedIfEENS_17adjusted_mantissaET_:
   49|  20.9k|adjusted_mantissa to_extended(T value) noexcept {
   50|  20.9k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   51|  20.9k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   52|  20.9k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   53|  20.9k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   54|       |
   55|  20.9k|  adjusted_mantissa am;
   56|  20.9k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
   57|  20.9k|  equiv_uint bits;
   58|       |#if FASTFLOAT_HAS_BIT_CAST
   59|       |  bits = std::bit_cast<equiv_uint>(value);
   60|       |#else
   61|  20.9k|  ::memcpy(&bits, &value, sizeof(T));
   62|  20.9k|#endif
   63|  20.9k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (63:7): [True: 0, False: 20.9k]
  ------------------
   64|       |    // denormal
   65|      0|    am.power2 = 1 - bias;
   66|      0|    am.mantissa = bits & mantissa_mask;
   67|  20.9k|  } else {
   68|       |    // normal
   69|  20.9k|    am.power2 = int32_t((bits & exponent_mask) >> binary_format<T>::mantissa_explicit_bits());
   70|  20.9k|    am.power2 -= bias;
   71|  20.9k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   72|  20.9k|  }
   73|       |
   74|  20.9k|  return am;
   75|  20.9k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
   93|  20.9k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  20.9k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  20.9k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 20.9k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  20.9k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  20.9k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 20.9k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  20.9k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  20.9k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 20.9k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  20.9k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  374|  20.9k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  20.9k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  20.9k|      (void)_;  // not needed, since we've done our comparison
  377|  20.9k|      (void)__; // not needed, since we've done our comparison
  378|  20.9k|      if (ord > 0) {
  379|  20.9k|        return true;
  380|  20.9k|      } else if (ord < 0) {
  381|  20.9k|        return false;
  382|  20.9k|      } else {
  383|  20.9k|        return is_odd;
  384|  20.9k|      }
  385|  20.9k|    });
  386|  20.9k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  123|  20.9k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  20.9k|  const uint64_t mask
  125|  20.9k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 20.9k]
  ------------------
  126|  20.9k|    ? UINT64_MAX
  127|  20.9k|    : (uint64_t(1) << shift) - 1;
  128|  20.9k|  const uint64_t halfway
  129|  20.9k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 20.9k]
  ------------------
  130|  20.9k|    ? 0
  131|  20.9k|    : uint64_t(1) << (shift - 1);
  132|  20.9k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  20.9k|  bool is_above = truncated_bits > halfway;
  134|  20.9k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  20.9k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 20.9k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  20.9k|  } else {
  140|  20.9k|    am.mantissa >>= shift;
  141|  20.9k|  }
  142|  20.9k|  am.power2 += shift;
  143|       |
  144|  20.9k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  20.9k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  20.9k|}
_ZZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  375|  20.9k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  20.9k|      (void)_;  // not needed, since we've done our comparison
  377|  20.9k|      (void)__; // not needed, since we've done our comparison
  378|  20.9k|      if (ord > 0) {
  ------------------
  |  Branch (378:11): [True: 210, False: 20.7k]
  ------------------
  379|    210|        return true;
  380|  20.7k|      } else if (ord < 0) {
  ------------------
  |  Branch (380:18): [True: 17.3k, False: 3.38k]
  ------------------
  381|  17.3k|        return false;
  382|  17.3k|      } else {
  383|  3.38k|        return is_odd;
  384|  3.38k|      }
  385|  20.9k|    });
_ZN10fast_float19scientific_exponentIDiEEiRNS_22parsed_number_string_tIT_EE:
   28|     72|int32_t scientific_exponent(parsed_number_string_t<UC> & num) noexcept {
   29|     72|  uint64_t mantissa = num.mantissa;
   30|     72|  int32_t exponent = int32_t(num.exponent);
   31|    360|  while (mantissa >= 10000) {
  ------------------
  |  Branch (31:10): [True: 288, False: 72]
  ------------------
   32|    288|    mantissa /= 10000;
   33|    288|    exponent += 4;
   34|    288|  }
   35|    144|  while (mantissa >= 100) {
  ------------------
  |  Branch (35:10): [True: 72, False: 72]
  ------------------
   36|     72|    mantissa /= 100;
   37|     72|    exponent += 2;
   38|     72|  }
   39|     72|  while (mantissa >= 10) {
  ------------------
  |  Branch (39:10): [True: 0, False: 72]
  ------------------
   40|      0|    mantissa /= 10;
   41|      0|    exponent += 1;
   42|      0|  }
   43|     72|  return exponent;
   44|     72|}
_ZN10fast_float14parse_mantissaIDiEEvRNS_6bigintERNS_22parsed_number_string_tIT_EEmRm:
  240|     72|void parse_mantissa(bigint& result, parsed_number_string_t<UC>& num, size_t max_digits, size_t& digits) noexcept {
  241|       |  // try to minimize the number of big integer and scalar multiplication.
  242|       |  // therefore, try to parse 8 digits at a time, and multiply by the largest
  243|       |  // scalar value (9 or 19 digits) for each step.
  244|     72|  size_t counter = 0;
  245|     72|  digits = 0;
  246|     72|  limb value = 0;
  247|     72|#ifdef FASTFLOAT_64BIT_LIMB
  248|     72|  size_t step = 19;
  249|       |#else
  250|       |  size_t step = 9;
  251|       |#endif
  252|       |
  253|       |  // process all integer digits.
  254|     72|  UC const * p = num.integer.ptr;
  255|     72|  UC const * pend = p + num.integer.len();
  256|     72|  skip_zeros(p, pend);
  257|       |  // process all digits, in increments of step per loop
  258|    144|  while (p != pend) {
  ------------------
  |  Branch (258:10): [True: 72, False: 72]
  ------------------
  259|     72|    while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (259:12): [True: 0, False: 72]
  |  Branch (259:45): [True: 0, False: 0]
  |  Branch (259:70): [True: 0, False: 0]
  ------------------
  260|      0|      parse_eight_digits(p, value, counter, digits);
  261|      0|    }
  262|    576|    while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (262:12): [True: 576, False: 0]
  |  Branch (262:30): [True: 504, False: 72]
  |  Branch (262:43): [True: 504, False: 0]
  ------------------
  263|    504|      parse_one_digit(p, value, counter, digits);
  264|    504|    }
  265|     72|    if (digits == max_digits) {
  ------------------
  |  Branch (265:9): [True: 0, False: 72]
  ------------------
  266|       |      // add the temporary value, then check if we've truncated any digits
  267|      0|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  268|      0|      bool truncated = is_truncated(p, pend);
  269|      0|      if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (269:11): [True: 0, False: 0]
  ------------------
  270|      0|        truncated |= is_truncated(num.fraction);
  271|      0|      }
  272|      0|      if (truncated) {
  ------------------
  |  Branch (272:11): [True: 0, False: 0]
  ------------------
  273|      0|        round_up_bigint(result, digits);
  274|      0|      }
  275|      0|      return;
  276|     72|    } else {
  277|     72|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  278|     72|      counter = 0;
  279|     72|      value = 0;
  280|     72|    }
  281|     72|  }
  282|       |
  283|       |  // add our fraction digits, if they're available.
  284|     72|  if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (284:7): [True: 72, False: 0]
  ------------------
  285|     72|    p = num.fraction.ptr;
  286|     72|    pend = p + num.fraction.len();
  287|     72|    if (digits == 0) {
  ------------------
  |  Branch (287:9): [True: 0, False: 72]
  ------------------
  288|      0|      skip_zeros(p, pend);
  289|      0|    }
  290|       |    // process all digits, in increments of step per loop
  291|    162|    while (p != pend) {
  ------------------
  |  Branch (291:12): [True: 90, False: 72]
  ------------------
  292|    198|      while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (292:14): [True: 108, False: 90]
  |  Branch (292:47): [True: 108, False: 0]
  |  Branch (292:72): [True: 108, False: 0]
  ------------------
  293|    108|        parse_eight_digits(p, value, counter, digits);
  294|    108|      }
  295|    432|      while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (295:14): [True: 414, False: 18]
  |  Branch (295:32): [True: 342, False: 72]
  |  Branch (295:45): [True: 342, False: 0]
  ------------------
  296|    342|        parse_one_digit(p, value, counter, digits);
  297|    342|      }
  298|     90|      if (digits == max_digits) {
  ------------------
  |  Branch (298:11): [True: 0, False: 90]
  ------------------
  299|       |        // add the temporary value, then check if we've truncated any digits
  300|      0|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  301|      0|        bool truncated = is_truncated(p, pend);
  302|      0|        if (truncated) {
  ------------------
  |  Branch (302:13): [True: 0, False: 0]
  ------------------
  303|      0|          round_up_bigint(result, digits);
  304|      0|        }
  305|      0|        return;
  306|     90|      } else {
  307|     90|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  308|     90|        counter = 0;
  309|     90|        value = 0;
  310|     90|      }
  311|     90|    }
  312|     72|  }
  313|       |
  314|     72|  if (counter != 0) {
  ------------------
  |  Branch (314:7): [True: 0, False: 72]
  ------------------
  315|      0|    add_native(result, limb(powers_of_ten_uint64[counter]), value);
  316|      0|  }
  317|     72|}
_ZN10fast_float10skip_zerosIDiEEvRPKT_S3_:
  159|     72|void skip_zeros(UC const * & first, UC const * last) noexcept {
  160|     72|  uint64_t val;
  161|     72|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (161:10): [Folded - Ignored]
  |  Branch (161:39): [True: 72, False: 0]
  ------------------
  162|     72|    ::memcpy(&val, first, sizeof(uint64_t));
  163|     72|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (163:9): [True: 72, False: 0]
  ------------------
  164|     72|      break;
  165|     72|    }
  166|      0|    first += int_cmp_len<UC>();
  167|      0|  }
  168|     72|  while (first != last) {
  ------------------
  |  Branch (168:10): [True: 72, False: 0]
  ------------------
  169|     72|    if (*first != UC('0')) {
  ------------------
  |  Branch (169:9): [True: 72, False: 0]
  ------------------
  170|     72|      break;
  171|     72|    }
  172|      0|    first++;
  173|      0|  }
  174|     72|}
_ZN10fast_float18parse_eight_digitsIDiEEvRPKT_RmS5_S5_:
  207|    108|void parse_eight_digits(const UC*& p, limb& value, size_t& counter, size_t& count) noexcept {
  208|    108|  value = value * 100000000 + parse_eight_digits_unrolled(p);
  209|    108|  p += 8;
  210|    108|  counter += 8;
  211|    108|  count += 8;
  212|    108|}
_ZN10fast_float15parse_one_digitIDiEEvRPKT_RmS5_S5_:
  216|    846|void parse_one_digit(UC const *& p, limb& value, size_t& counter, size_t& count) noexcept {
  217|    846|  value = value * 10 + limb(*p - UC('0'));
  218|    846|  p++;
  219|    846|  counter++;
  220|    846|  count++;
  221|    846|}
_ZN10fast_float10digit_compIdcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  29.5k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  29.5k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  29.5k|  int32_t sci_exp = scientific_exponent(num);
  411|  29.5k|  size_t max_digits = binary_format<T>::max_digits();
  412|  29.5k|  size_t digits = 0;
  413|  29.5k|  bigint bigmant;
  414|  29.5k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  29.5k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  29.5k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 3.50k, False: 26.0k]
  ------------------
  418|  3.50k|    return positive_digit_comp<T>(bigmant, exponent);
  419|  26.0k|  } else {
  420|  26.0k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  26.0k|  }
  422|  29.5k|}
_ZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEi:
  321|  3.50k|adjusted_mantissa positive_digit_comp(bigint& bigmant, int32_t exponent) noexcept {
  322|  3.50k|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  170|  3.50k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  323|  3.50k|  adjusted_mantissa answer;
  324|  3.50k|  bool truncated;
  325|  3.50k|  answer.mantissa = bigmant.hi64(truncated);
  326|  3.50k|  int bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
  327|  3.50k|  answer.power2 = bigmant.bit_length() - 64 + bias;
  328|       |
  329|  3.50k|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|  3.50k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  3.50k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|  3.50k|    });
  333|  3.50k|  });
  334|       |
  335|  3.50k|  return answer;
  336|  3.50k|}
_ZN10fast_float5roundIdZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
   93|  3.50k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  3.50k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  3.50k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 3.50k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  3.50k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  3.50k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 432, False: 3.07k]
  ------------------
  109|    432|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|    432|    am.power2++;
  111|    432|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  3.50k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  3.50k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 3.50k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  3.50k|}
_ZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  329|  3.50k|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|  3.50k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  3.50k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|  3.50k|    });
  333|  3.50k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  123|  3.50k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  3.50k|  const uint64_t mask
  125|  3.50k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 3.50k]
  ------------------
  126|  3.50k|    ? UINT64_MAX
  127|  3.50k|    : (uint64_t(1) << shift) - 1;
  128|  3.50k|  const uint64_t halfway
  129|  3.50k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 3.50k]
  ------------------
  130|  3.50k|    ? 0
  131|  3.50k|    : uint64_t(1) << (shift - 1);
  132|  3.50k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  3.50k|  bool is_above = truncated_bits > halfway;
  134|  3.50k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  3.50k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 3.50k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  3.50k|  } else {
  140|  3.50k|    am.mantissa >>= shift;
  141|  3.50k|  }
  142|  3.50k|  am.power2 += shift;
  143|       |
  144|  3.50k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  3.50k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  3.50k|}
_ZZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  330|  3.50k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  3.50k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  ------------------
  |  Branch (331:14): [True: 492, False: 3.01k]
  |  Branch (331:27): [True: 2.39k, False: 622]
  |  Branch (331:41): [True: 749, False: 1.64k]
  |  Branch (331:56): [True: 294, False: 1.97k]
  |  Branch (331:66): [True: 60, False: 234]
  ------------------
  332|  3.50k|    });
_ZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_i:
  345|  26.1k|adjusted_mantissa negative_digit_comp(bigint& bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  346|  26.1k|  bigint& real_digits = bigmant;
  347|  26.1k|  int32_t real_exp = exponent;
  348|       |
  349|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  350|  26.1k|  adjusted_mantissa am_b = am;
  351|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with -Wnoexcept-type.
  352|  26.1k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
  353|  26.1k|  T b;
  354|  26.1k|  to_float(false, am_b, b);
  355|  26.1k|  adjusted_mantissa theor = to_extended_halfway(b);
  356|  26.1k|  bigint theor_digits(theor.mantissa);
  357|  26.1k|  int32_t theor_exp = theor.power2;
  358|       |
  359|       |  // scale real digits and theor digits to be same power.
  360|  26.1k|  int32_t pow2_exp = theor_exp - real_exp;
  361|  26.1k|  uint32_t pow5_exp = uint32_t(-real_exp);
  362|  26.1k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (362:7): [True: 26.1k, False: 0]
  ------------------
  363|  26.1k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  170|  26.1k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  364|  26.1k|  }
  365|  26.1k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (365:7): [True: 2.38k, False: 23.7k]
  ------------------
  366|  2.38k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  170|  2.38k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  367|  23.7k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (367:14): [True: 23.6k, False: 74]
  ------------------
  368|  23.6k|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  170|  23.6k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  369|  23.6k|  }
  370|       |
  371|       |  // compare digits, and use it to director rounding
  372|  26.1k|  int ord = real_digits.compare(theor_digits);
  373|  26.1k|  adjusted_mantissa answer = am;
  374|  26.1k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  26.1k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  26.1k|      (void)_;  // not needed, since we've done our comparison
  377|  26.1k|      (void)__; // not needed, since we've done our comparison
  378|  26.1k|      if (ord > 0) {
  379|  26.1k|        return true;
  380|  26.1k|      } else if (ord < 0) {
  381|  26.1k|        return false;
  382|  26.1k|      } else {
  383|  26.1k|        return is_odd;
  384|  26.1k|      }
  385|  26.1k|    });
  386|  26.1k|  });
  387|       |
  388|  26.1k|  return answer;
  389|  26.1k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
   93|  26.1k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  26.1k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  26.1k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 114, False: 26.0k]
  ------------------
   96|       |    // have a denormal float
   97|    114|    int32_t shift = -am.power2 + 1;
   98|    114|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|    114|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 114, False: 0]
  ------------------
  101|    114|    return;
  102|    114|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  26.0k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  26.0k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 26.0k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  26.0k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  26.0k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 26.0k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  26.0k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  352|  26.1k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float19to_extended_halfwayIdEENS_17adjusted_mantissaET_:
   82|  26.1k|adjusted_mantissa to_extended_halfway(T value) noexcept {
   83|  26.1k|  adjusted_mantissa am = to_extended(value);
   84|  26.1k|  am.mantissa <<= 1;
   85|  26.1k|  am.mantissa += 1;
   86|  26.1k|  am.power2 -= 1;
   87|  26.1k|  return am;
   88|  26.1k|}
_ZN10fast_float11to_extendedIdEENS_17adjusted_mantissaET_:
   49|  26.1k|adjusted_mantissa to_extended(T value) noexcept {
   50|  26.1k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   51|  26.1k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   52|  26.1k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   53|  26.1k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   54|       |
   55|  26.1k|  adjusted_mantissa am;
   56|  26.1k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
   57|  26.1k|  equiv_uint bits;
   58|       |#if FASTFLOAT_HAS_BIT_CAST
   59|       |  bits = std::bit_cast<equiv_uint>(value);
   60|       |#else
   61|  26.1k|  ::memcpy(&bits, &value, sizeof(T));
   62|  26.1k|#endif
   63|  26.1k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (63:7): [True: 114, False: 26.0k]
  ------------------
   64|       |    // denormal
   65|    114|    am.power2 = 1 - bias;
   66|    114|    am.mantissa = bits & mantissa_mask;
   67|  26.0k|  } else {
   68|       |    // normal
   69|  26.0k|    am.power2 = int32_t((bits & exponent_mask) >> binary_format<T>::mantissa_explicit_bits());
   70|  26.0k|    am.power2 -= bias;
   71|  26.0k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   72|  26.0k|  }
   73|       |
   74|  26.1k|  return am;
   75|  26.1k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
   93|  26.1k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  26.1k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  26.1k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 114, False: 26.0k]
  ------------------
   96|       |    // have a denormal float
   97|    114|    int32_t shift = -am.power2 + 1;
   98|    114|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|    114|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 114, False: 0]
  ------------------
  101|    114|    return;
  102|    114|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  26.0k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  26.0k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 74, False: 25.9k]
  ------------------
  109|     74|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|     74|    am.power2++;
  111|     74|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  26.0k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  26.0k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 26.0k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  26.0k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  374|  26.1k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  26.1k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  26.1k|      (void)_;  // not needed, since we've done our comparison
  377|  26.1k|      (void)__; // not needed, since we've done our comparison
  378|  26.1k|      if (ord > 0) {
  379|  26.1k|        return true;
  380|  26.1k|      } else if (ord < 0) {
  381|  26.1k|        return false;
  382|  26.1k|      } else {
  383|  26.1k|        return is_odd;
  384|  26.1k|      }
  385|  26.1k|    });
  386|  26.1k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  123|  26.1k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  26.1k|  const uint64_t mask
  125|  26.1k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 26.1k]
  ------------------
  126|  26.1k|    ? UINT64_MAX
  127|  26.1k|    : (uint64_t(1) << shift) - 1;
  128|  26.1k|  const uint64_t halfway
  129|  26.1k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 26.1k]
  ------------------
  130|  26.1k|    ? 0
  131|  26.1k|    : uint64_t(1) << (shift - 1);
  132|  26.1k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  26.1k|  bool is_above = truncated_bits > halfway;
  134|  26.1k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  26.1k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 26.1k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  26.1k|  } else {
  140|  26.1k|    am.mantissa >>= shift;
  141|  26.1k|  }
  142|  26.1k|  am.power2 += shift;
  143|       |
  144|  26.1k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  26.1k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  26.1k|}
_ZZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  375|  26.1k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  26.1k|      (void)_;  // not needed, since we've done our comparison
  377|  26.1k|      (void)__; // not needed, since we've done our comparison
  378|  26.1k|      if (ord > 0) {
  ------------------
  |  Branch (378:11): [True: 10.8k, False: 15.3k]
  ------------------
  379|  10.8k|        return true;
  380|  15.3k|      } else if (ord < 0) {
  ------------------
  |  Branch (380:18): [True: 14.8k, False: 488]
  ------------------
  381|  14.8k|        return false;
  382|  14.8k|      } else {
  383|    488|        return is_odd;
  384|    488|      }
  385|  26.1k|    });
_ZN10fast_float10digit_compIdDiEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|     72|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|     72|  am.power2 -= invalid_am_bias;
  409|       |
  410|     72|  int32_t sci_exp = scientific_exponent(num);
  411|     72|  size_t max_digits = binary_format<T>::max_digits();
  412|     72|  size_t digits = 0;
  413|     72|  bigint bigmant;
  414|     72|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|     72|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|     72|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 0, False: 72]
  ------------------
  418|      0|    return positive_digit_comp<T>(bigmant, exponent);
  419|     72|  } else {
  420|     72|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|     72|  }
  422|     72|}

_ZN10fast_float4spanIKcEC2Ev:
  235|  1.82M|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKcEC2EPS1_m:
  234|  1.07M|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanIKcE3lenEv:
  237|   353k|  constexpr size_t len() const noexcept {
  238|   353k|    return length;
  239|   353k|  }
_ZN10fast_float13binary_formatIfE22min_exponent_fast_pathEv:
  464|   621k|template <> inline constexpr int binary_format<float>::min_exponent_fast_path() {
  465|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  466|       |  return 0;
  467|       |#else
  468|   621k|  return -10;
  469|   621k|#endif
  470|   621k|}
_ZN10fast_float13binary_formatIfE22max_exponent_fast_pathEv:
  515|   584k|template <> inline constexpr int binary_format<float>::max_exponent_fast_path() {
  516|   584k|  return 10;
  517|   584k|}
_ZN10fast_float13binary_formatIfE22max_mantissa_fast_pathEv:
  529|   516k|template <> inline constexpr uint64_t binary_format<float>::max_mantissa_fast_path() {
  530|   516k|  return uint64_t(2) << mantissa_explicit_bits();
  531|   516k|}
_ZN10fast_float13binary_formatIfE22mantissa_explicit_bitsEv:
  475|  1.44M|template <> inline constexpr int binary_format<float>::mantissa_explicit_bits() {
  476|  1.44M|  return 23;
  477|  1.44M|}
_ZN10fast_float13binary_formatIfE18exact_power_of_tenEl:
  546|   493k|inline constexpr float binary_format<float>::exact_power_of_ten(int64_t power) {
  547|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  548|   493k|  return (void)powers_of_ten[0], powers_of_ten[power];
  549|   493k|}
_ZN10fast_float17adjusted_mantissaC2Ev:
  347|   486k|  adjusted_mantissa() = default;
_ZN10fast_float13binary_formatIfE21smallest_power_of_tenEv:
  566|   197k|inline constexpr int binary_format<float>::smallest_power_of_ten() {
  567|   197k|  return -65;
  568|   197k|}
_ZN10fast_float13binary_formatIfE20largest_power_of_tenEv:
  557|   196k|inline constexpr int binary_format<float>::largest_power_of_ten() {
  558|   196k|  return 38;
  559|   196k|}
_ZN10fast_float14leading_zeroesEm:
  268|   424k|int leading_zeroes(uint64_t input_num) {
  269|   424k|  assert(input_num > 0);
  270|   424k|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (270:7): [Folded - Ignored]
  ------------------
  271|      0|    return leading_zeroes_generic(input_num);
  272|      0|  }
  273|       |#ifdef FASTFLOAT_VISUAL_STUDIO
  274|       |  #if defined(_M_X64) || defined(_M_ARM64)
  275|       |  unsigned long leading_zero = 0;
  276|       |  // Search the mask data from most significant bit (MSB)
  277|       |  // to least significant bit (LSB) for a set bit (1).
  278|       |  _BitScanReverse64(&leading_zero, input_num);
  279|       |  return (int)(63 - leading_zero);
  280|       |  #else
  281|       |  return leading_zeroes_generic(input_num);
  282|       |  #endif
  283|       |#else
  284|   424k|  return __builtin_clzll(input_num);
  285|   424k|#endif
  286|   424k|}
_ZN10fast_float19full_multiplicationEmm:
  320|   537k|value128 full_multiplication(uint64_t a, uint64_t b) {
  321|   537k|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (321:7): [Folded - Ignored]
  ------------------
  322|      0|    value128 answer;
  323|      0|    answer.low = umul128_generic(a, b, &answer.high);
  324|      0|    return answer;
  325|      0|  }
  326|   537k|  value128 answer;
  327|       |#if defined(_M_ARM64) && !defined(__MINGW32__)
  328|       |  // ARM64 has native support for 64-bit multiplications, no need to emulate
  329|       |  // But MinGW on ARM64 doesn't have native support for 64-bit multiplications
  330|       |  answer.high = __umulh(a, b);
  331|       |  answer.low = a * b;
  332|       |#elif defined(FASTFLOAT_32BIT) || (defined(_WIN64) && !defined(__clang__))
  333|       |  answer.low = _umul128(a, b, &answer.high); // _umul128 not available on ARM64
  334|       |#elif defined(FASTFLOAT_64BIT) && defined(__SIZEOF_INT128__)
  335|       |  __uint128_t r = ((__uint128_t)a) * b;
  336|   537k|  answer.low = uint64_t(r);
  337|   537k|  answer.high = uint64_t(r >> 64);
  338|       |#else
  339|       |  answer.low = umul128_generic(a, b, &answer.high);
  340|       |#endif
  341|   537k|  return answer;
  342|   537k|}
_ZN10fast_float8value128C2Ev:
  251|   537k|  constexpr value128() : low(0), high(0) {}
_ZN10fast_float13binary_formatIfE16minimum_exponentEv:
  498|   232k|template <> inline constexpr int binary_format<float>::minimum_exponent() {
  499|   232k|  return -127;
  500|   232k|}
_ZN10fast_float13binary_formatIfE26min_exponent_round_to_evenEv:
  491|  65.2k|template <> inline constexpr int binary_format<float>::min_exponent_round_to_even() {
  492|  65.2k|  return -17;
  493|  65.2k|}
_ZN10fast_float13binary_formatIfE26max_exponent_round_to_evenEv:
  483|  63.5k|template <> inline constexpr int binary_format<float>::max_exponent_round_to_even() {
  484|  63.5k|  return 10;
  485|  63.5k|}
_ZNK10fast_float17adjusted_mantissaneERKS0_:
  351|   148k|  constexpr bool operator!=(const adjusted_mantissa &o) const {
  352|   148k|    return mantissa != o.mantissa || power2 != o.power2;
  ------------------
  |  Branch (352:12): [True: 51.1k, False: 96.9k]
  |  Branch (352:38): [True: 0, False: 96.9k]
  ------------------
  353|   148k|  }
_ZN10fast_float13binary_formatIfE10max_digitsEv:
  573|  21.4k|template <> inline constexpr size_t binary_format<float>::max_digits() {
  574|  21.4k|  return 114;
  575|  21.4k|}
impl.cpp:_ZN10fast_floatL11int_cmp_lenIcEEiv:
  649|  87.0k|{
  650|  87.0k|    return sizeof(uint64_t) / sizeof(UC);
  651|  87.0k|}
impl.cpp:_ZN10fast_floatL13int_cmp_zerosIcEEmv:
  643|  36.0k|{
  644|  36.0k|    static_assert((sizeof(UC) == 1) || (sizeof(UC) == 2) || (sizeof(UC) == 4), "Unsupported character size");
  645|  36.0k|    return (sizeof(UC) == 1) ? 0x3030303030303030 : (sizeof(UC) == 2) ? (uint64_t(UC('0')) << 48 | uint64_t(UC('0')) << 32 | uint64_t(UC('0')) << 16 | UC('0')) : (uint64_t(UC('0')) << 32 | UC('0'));
  ------------------
  |  Branch (645:12): [Folded - Ignored]
  |  Branch (645:53): [Folded - Ignored]
  ------------------
  646|  36.0k|}
_ZN10fast_float4spanImEC2EPKmm:
  234|  70.2k|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanImE3lenEv:
  237|   204k|  constexpr size_t len() const noexcept {
  238|   204k|    return length;
  239|   204k|  }
_ZNK10fast_float4spanImEixEm:
  241|   111k|  FASTFLOAT_CONSTEXPR14 const T& operator[](size_t index) const noexcept {
  242|   111k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   111k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  243|   111k|    return ptr[index];
  244|   111k|  }
_ZN10fast_float8to_floatIfEEvbNS_17adjusted_mantissaERT_:
  606|   148k|void to_float(bool negative, adjusted_mantissa am, T &value) {
  607|   148k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  608|   148k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  609|   148k|  word |= fastfloat_uint(am.power2) << binary_format<T>::mantissa_explicit_bits();
  610|   148k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  611|       |#if FASTFLOAT_HAS_BIT_CAST
  612|       |  value = std::bit_cast<T>(word);
  613|       |#else
  614|   148k|  ::memcpy(&value, &word, sizeof(T));
  615|   148k|#endif
  616|   148k|}
_ZN10fast_float13binary_formatIfE10sign_indexEv:
  510|   148k|template <> inline constexpr int binary_format<float>::sign_index() { return 31; }
_ZN10fast_float13binary_formatIfE14infinite_powerEv:
  505|   365k|template <> inline constexpr int binary_format<float>::infinite_power() {
  506|   365k|  return 0xFF;
  507|   365k|}
_ZN10fast_float15parse_options_tIcEC2ENS_12chars_formatEc:
   46|   910k|    : format(fmt), decimal_point(dot) {}
_ZN10fast_float4spanIKDiEC2Ev:
  235|   768k|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKDiEC2EPS1_m:
  234|   386k|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanIKDiE3lenEv:
  237|  1.58k|  constexpr size_t len() const noexcept {
  238|  1.58k|    return length;
  239|  1.58k|  }
impl.cpp:_ZN10fast_floatL11int_cmp_lenIDiEEiv:
  649|     72|{
  650|     72|    return sizeof(uint64_t) / sizeof(UC);
  651|     72|}
impl.cpp:_ZN10fast_floatL13int_cmp_zerosIDiEEmv:
  643|     72|{
  644|     72|    static_assert((sizeof(UC) == 1) || (sizeof(UC) == 2) || (sizeof(UC) == 4), "Unsupported character size");
  645|     72|    return (sizeof(UC) == 1) ? 0x3030303030303030 : (sizeof(UC) == 2) ? (uint64_t(UC('0')) << 48 | uint64_t(UC('0')) << 32 | uint64_t(UC('0')) << 16 | UC('0')) : (uint64_t(UC('0')) << 32 | UC('0'));
  ------------------
  |  Branch (645:12): [Folded - Ignored]
  |  Branch (645:53): [Folded - Ignored]
  ------------------
  646|     72|}
_ZN10fast_float15parse_options_tIDiEC2ENS_12chars_formatEDi:
   46|   384k|    : format(fmt), decimal_point(dot) {}
_ZN10fast_float13binary_formatIdE22min_exponent_fast_pathEv:
  456|   673k|template <> inline constexpr int binary_format<double>::min_exponent_fast_path() {
  457|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  458|       |  return 0;
  459|       |#else
  460|   673k|  return -22;
  461|   673k|#endif
  462|   673k|}
_ZN10fast_float13binary_formatIdE22max_exponent_fast_pathEv:
  512|   666k|template <> inline constexpr int binary_format<double>::max_exponent_fast_path() {
  513|   666k|  return 22;
  514|   666k|}
_ZN10fast_float13binary_formatIdE22max_mantissa_fast_pathEv:
  519|   569k|template <> inline constexpr uint64_t binary_format<double>::max_mantissa_fast_path() {
  520|   569k|  return uint64_t(2) << mantissa_explicit_bits();
  521|   569k|}
_ZN10fast_float13binary_formatIdE22mantissa_explicit_bitsEv:
  472|  1.49M|template <> inline constexpr int binary_format<double>::mantissa_explicit_bits() {
  473|  1.49M|  return 52;
  474|  1.49M|}
_ZN10fast_float13binary_formatIdE18exact_power_of_tenEl:
  541|   565k|inline constexpr double binary_format<double>::exact_power_of_ten(int64_t power) {
  542|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  543|   565k|  return (void)powers_of_ten[0], powers_of_ten[power];
  544|   565k|}
_ZN10fast_float13binary_formatIdE21smallest_power_of_tenEv:
  562|   179k|inline constexpr int binary_format<double>::smallest_power_of_ten() {
  563|   179k|  return -342;
  564|   179k|}
_ZN10fast_float13binary_formatIdE20largest_power_of_tenEv:
  553|   179k|inline constexpr int binary_format<double>::largest_power_of_ten() {
  554|   179k|  return 308;
  555|   179k|}
_ZN10fast_float13binary_formatIdE16minimum_exponentEv:
  495|   235k|template <> inline constexpr int binary_format<double>::minimum_exponent() {
  496|   235k|  return -1023;
  497|   235k|}
_ZN10fast_float13binary_formatIdE26min_exponent_round_to_evenEv:
  487|  52.9k|template <> inline constexpr int binary_format<double>::min_exponent_round_to_even() {
  488|  52.9k|  return -4;
  489|  52.9k|}
_ZN10fast_float13binary_formatIdE26max_exponent_round_to_evenEv:
  479|  29.2k|template <> inline constexpr int binary_format<double>::max_exponent_round_to_even() {
  480|  29.2k|  return 23;
  481|  29.2k|}
_ZN10fast_float13binary_formatIdE10max_digitsEv:
  570|  29.6k|template <> inline constexpr size_t binary_format<double>::max_digits() {
  571|  29.6k|  return 769;
  572|  29.6k|}
_ZN10fast_float8to_floatIdEEvbNS_17adjusted_mantissaERT_:
  606|   134k|void to_float(bool negative, adjusted_mantissa am, T &value) {
  607|   134k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  608|   134k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  609|   134k|  word |= fastfloat_uint(am.power2) << binary_format<T>::mantissa_explicit_bits();
  610|   134k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  611|       |#if FASTFLOAT_HAS_BIT_CAST
  612|       |  value = std::bit_cast<T>(word);
  613|       |#else
  614|   134k|  ::memcpy(&value, &word, sizeof(T));
  615|   134k|#endif
  616|   134k|}
_ZN10fast_float13binary_formatIdE10sign_indexEv:
  509|   134k|template <> inline constexpr int binary_format<double>::sign_index() { return 63; }
_ZN10fast_float13binary_formatIdE14infinite_powerEv:
  502|   340k|template <> inline constexpr int binary_format<double>::infinite_power() {
  503|   340k|  return 0x7FF;
  504|   340k|}

_ZN10fast_float10from_charsIfciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   447k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   447k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   447k|}
_ZN10fast_float17from_chars_callerIfE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  141|   447k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   447k|    return from_chars_advanced(first, last, value, options);
  143|   447k|  }
_ZN10fast_float19from_chars_advancedIfcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   447k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   447k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   447k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   447k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   447k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 447k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   447k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   447k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 447k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   447k|  answer.ec = std::errc(); // be optimistic
  221|   447k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   447k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 411k, False: 36.0k]
  |  Branch (227:69): [True: 387k, False: 23.7k]
  |  Branch (227:131): [True: 346k, False: 41.0k]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   346k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 346k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   346k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 324k, False: 22.2k]
  ------------------
  239|   324k|        value = T(pns.mantissa);
  240|   324k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 7.18k, False: 316k]
  ------------------
  241|   316k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   324k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 324k]
  ------------------
  243|   324k|        return answer;
  244|   324k|      }
  245|   346k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   346k|  }
  262|   123k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|   123k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 72.5k, False: 50.5k]
  |  Branch (263:29): [True: 72.5k, False: 0]
  ------------------
  264|  72.5k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 21.4k, False: 51.1k]
  ------------------
  265|  21.4k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|  21.4k|    }
  267|  72.5k|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|   123k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 21.4k, False: 101k]
  ------------------
  271|   123k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|   123k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 120k, False: 3.00k]
  |  Branch (273:29): [True: 13.2k, False: 106k]
  |  Branch (273:49): [True: 757, False: 12.5k]
  |  Branch (273:68): [True: 3.99k, False: 118k]
  ------------------
  274|  4.75k|    answer.ec = std::errc::result_out_of_range;
  275|  4.75k|  }
  276|   123k|  return answer;
  277|   447k|}
_ZN10fast_float6detail17rounds_to_nearestEv:
   74|  1.08M|fastfloat_really_inline bool rounds_to_nearest() noexcept {
   75|       |  // https://lemire.me/blog/2020/06/26/gcc-not-nearest/
   76|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
   77|       |  return false;
   78|       |#endif
   79|       |  // See
   80|       |  // A fast function to check your floating-point rounding mode
   81|       |  // https://lemire.me/blog/2022/11/16/a-fast-function-to-check-your-floating-point-rounding-mode/
   82|       |  //
   83|       |  // This function is meant to be equivalent to :
   84|       |  // prior: #include <cfenv>
   85|       |  //  return fegetround() == FE_TONEAREST;
   86|       |  // However, it is expected to be much faster than the fegetround()
   87|       |  // function call.
   88|       |  //
   89|       |  // The volatile keywoard prevents the compiler from computing the function
   90|       |  // at compile-time.
   91|       |  // There might be other ways to prevent compile-time optimizations (e.g., asm).
   92|       |  // The value does not need to be std::numeric_limits<float>::min(), any small
   93|       |  // value so that 1 + x should round to 1 would do (after accounting for excess
   94|       |  // precision, as in 387 instructions).
   95|  1.08M|  static volatile float fmin = std::numeric_limits<float>::min();
   96|  1.08M|  float fmini = fmin; // we copy it so that it gets loaded at most once.
   97|       |  //
   98|       |  // Explanation:
   99|       |  // Only when fegetround() == FE_TONEAREST do we have that
  100|       |  // fmin + 1.0f == 1.0f - fmin.
  101|       |  //
  102|       |  // FE_UPWARD:
  103|       |  //  fmin + 1.0f > 1
  104|       |  //  1.0f - fmin == 1
  105|       |  //
  106|       |  // FE_DOWNWARD or  FE_TOWARDZERO:
  107|       |  //  fmin + 1.0f == 1
  108|       |  //  1.0f - fmin < 1
  109|       |  //
  110|       |  // Note: This may fail to be accurate if fast-math has been
  111|       |  // enabled, as rounding conventions may not apply.
  112|       |  #ifdef FASTFLOAT_VISUAL_STUDIO
  113|       |  #   pragma warning(push)
  114|       |  //  todo: is there a VS warning?
  115|       |  //  see https://stackoverflow.com/questions/46079446/is-there-a-warning-for-floating-point-equality-checking-in-visual-studio-2013
  116|       |  #elif defined(__clang__)
  117|       |  #   pragma clang diagnostic push
  118|  1.08M|  #   pragma clang diagnostic ignored "-Wfloat-equal"
  119|       |  #elif defined(__GNUC__)
  120|       |  #   pragma GCC diagnostic push
  121|       |  #   pragma GCC diagnostic ignored "-Wfloat-equal"
  122|       |  #endif
  123|  1.08M|  return (fmini + 1.0f == 1.0f - fmini);
  124|       |  #ifdef FASTFLOAT_VISUAL_STUDIO
  125|       |  #   pragma warning(pop)
  126|       |  #elif defined(__clang__)
  127|       |  #   pragma clang diagnostic pop
  128|       |  #elif defined(__GNUC__)
  129|       |  #   pragma GCC diagnostic pop
  130|       |  #endif
  131|  1.08M|}
_ZN10fast_float10from_charsIfDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   174k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   174k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   174k|}
_ZN10fast_float17from_chars_callerIfE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  141|   174k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   174k|    return from_chars_advanced(first, last, value, options);
  143|   174k|  }
_ZN10fast_float19from_chars_advancedIfDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   174k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   174k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   174k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   174k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   174k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 174k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   174k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   174k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 174k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   174k|  answer.ec = std::errc(); // be optimistic
  221|   174k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   174k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 172k, False: 1.26k]
  |  Branch (227:69): [True: 169k, False: 3.06k]
  |  Branch (227:131): [True: 169k, False: 174]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   169k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 169k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   169k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 169k, False: 452]
  ------------------
  239|   169k|        value = T(pns.mantissa);
  240|   169k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 434, False: 168k]
  ------------------
  241|   168k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   169k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 169k]
  ------------------
  243|   169k|        return answer;
  244|   169k|      }
  245|   169k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   169k|  }
  262|  4.95k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|  4.95k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 468, False: 4.48k]
  |  Branch (263:29): [True: 468, False: 0]
  ------------------
  264|    468|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 0, False: 468]
  ------------------
  265|      0|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|      0|    }
  267|    468|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|  4.95k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 0, False: 4.95k]
  ------------------
  271|  4.95k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|  4.95k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 4.56k, False: 394]
  |  Branch (273:29): [True: 3.29k, False: 1.27k]
  |  Branch (273:49): [True: 762, False: 2.53k]
  |  Branch (273:68): [True: 2.53k, False: 1.66k]
  ------------------
  274|  3.29k|    answer.ec = std::errc::result_out_of_range;
  275|  3.29k|  }
  276|  4.95k|  return answer;
  277|   174k|}
_ZN10fast_float10from_charsIdciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   463k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   463k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   463k|}
_ZN10fast_float17from_chars_callerIdE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  141|   463k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   463k|    return from_chars_advanced(first, last, value, options);
  143|   463k|  }
_ZN10fast_float19from_chars_advancedIdcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   463k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   463k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   463k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   463k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   463k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 463k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   463k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   463k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 463k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   463k|  answer.ec = std::errc(); // be optimistic
  221|   463k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   463k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 457k, False: 5.43k]
  |  Branch (227:69): [True: 434k, False: 22.9k]
  |  Branch (227:131): [True: 365k, False: 69.6k]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   365k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 365k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   365k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 360k, False: 4.24k]
  ------------------
  239|   360k|        value = T(pns.mantissa);
  240|   360k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 18.9k, False: 341k]
  ------------------
  241|   341k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   360k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 360k]
  ------------------
  243|   360k|        return answer;
  244|   360k|      }
  245|   365k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   365k|  }
  262|   102k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|   102k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 74.5k, False: 27.7k]
  |  Branch (263:29): [True: 74.5k, False: 0]
  ------------------
  264|  74.5k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 29.5k, False: 44.9k]
  ------------------
  265|  29.5k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|  29.5k|    }
  267|  74.5k|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|   102k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 29.5k, False: 72.6k]
  ------------------
  271|   102k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|   102k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 99.5k, False: 2.73k]
  |  Branch (273:29): [True: 8.36k, False: 91.1k]
  |  Branch (273:49): [True: 193, False: 8.17k]
  |  Branch (273:68): [True: 2.05k, False: 100k]
  ------------------
  274|  2.24k|    answer.ec = std::errc::result_out_of_range;
  275|  2.24k|  }
  276|   102k|  return answer;
  277|   463k|}
_ZN10fast_float10from_charsIdDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   210k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   210k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   210k|}
_ZN10fast_float17from_chars_callerIdE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  141|   210k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   210k|    return from_chars_advanced(first, last, value, options);
  143|   210k|  }
_ZN10fast_float19from_chars_advancedIdDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   210k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   210k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   210k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   210k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   210k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 210k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   210k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   210k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 210k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   210k|  answer.ec = std::errc(); // be optimistic
  221|   210k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   210k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 208k, False: 1.58k]
  |  Branch (227:69): [True: 204k, False: 3.76k]
  |  Branch (227:131): [True: 204k, False: 350]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   204k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 204k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   204k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 204k, False: 126]
  ------------------
  239|   204k|        value = T(pns.mantissa);
  240|   204k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 648, False: 203k]
  ------------------
  241|   203k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   204k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 204k]
  ------------------
  243|   204k|        return answer;
  244|   204k|      }
  245|   204k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   204k|  }
  262|  5.82k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|  5.82k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 468, False: 5.35k]
  |  Branch (263:29): [True: 468, False: 0]
  ------------------
  264|    468|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 72, False: 396]
  ------------------
  265|     72|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|     72|    }
  267|    468|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|  5.82k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 72, False: 5.74k]
  ------------------
  271|  5.82k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|  5.82k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 5.39k, False: 422]
  |  Branch (273:29): [True: 1.60k, False: 3.79k]
  |  Branch (273:49): [True: 170, False: 1.43k]
  |  Branch (273:68): [True: 1.43k, False: 4.22k]
  ------------------
  274|  1.60k|    answer.ec = std::errc::result_out_of_range;
  275|  1.60k|  }
  276|  5.82k|  return answer;
  277|   210k|}

_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIccEEDaSG_SQ_:
  859|  3.37M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIwcEEDaSG_SQ_:
  859|  1.61M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  859|  1.61M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3802|  2.97M|{
 3803|  2.97M|    if constexpr (sizeof(U) == 1) {
 3804|  2.97M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3805|       |    }
 3806|       |    else if constexpr (sizeof(U) == 2) {
 3807|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 3808|       |    }
 3809|       |    else {
 3810|       |        // utf-32
 3811|       |        static_assert(sizeof(U) == 4);
 3812|       |        SCN_UNUSED(ch);
 3813|       |        return 1;
 3814|       |    }
 3815|  2.97M|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3766|  2.97M|{
 3767|  2.97M|    static_assert(sizeof(U8) == 1);
 3768|       |
 3769|  2.97M|    SCN_GCC_COMPAT_PUSH
 3770|  2.97M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3771|  2.97M|    constexpr char lengths[] =
 3772|  2.97M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3773|  2.97M|        "\1\1\1\1\1\1\1\1"
 3774|  2.97M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3775|       |                            // byte
 3776|  2.97M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3777|  2.97M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3778|  2.97M|        "\4";               // highest bits 11110 -> 4-byte cp
 3779|  2.97M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3780|  2.97M|    SCN_GCC_COMPAT_POP
 3781|  2.97M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4008|  2.69M|{
 4009|  2.69M|    if constexpr (sizeof(CharT) == 1) {
 4010|  2.69M|        return decode_utf8_code_point_exhaustive(input);
 4011|       |    }
 4012|       |    else if constexpr (sizeof(CharT) == 2) {
 4013|       |        return decode_utf16_code_point_exhaustive(input);
 4014|       |    }
 4015|       |    else {
 4016|       |        SCN_EXPECT(input.size() == 1);
 4017|       |        auto cp = static_cast<char32_t>(input.front());
 4018|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4019|       |            return invalid_code_point;
 4020|       |        }
 4021|       |        return cp;
 4022|       |    }
 4023|  2.69M|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3821|  2.69M|{
 3822|  2.69M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  2.69M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.69M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3823|       |
 3824|  2.69M|    const auto is_trailing_code_unit = [](char ch) {
 3825|  2.69M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3826|  2.69M|    };
 3827|       |
 3828|  2.69M|    if (input.size() == 1) {
  ------------------
  |  Branch (3828:9): [True: 2.63M, False: 59.4k]
  ------------------
 3829|  2.63M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3829:13): [True: 700, False: 2.63M]
  ------------------
 3830|    700|            SCN_UNLIKELY_ATTR
 3831|    700|            return invalid_code_point;
 3832|    700|        }
 3833|  2.63M|        return static_cast<char32_t>(input[0]);
 3834|  2.63M|    }
 3835|       |
 3836|  59.4k|    if (input.size() == 2) {
  ------------------
  |  Branch (3836:9): [True: 54.4k, False: 5.04k]
  ------------------
 3837|  54.4k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3837:13): [True: 152, False: 54.2k]
  ------------------
 3838|    152|            SCN_UNLIKELY_ATTR
 3839|    152|            return invalid_code_point;
 3840|    152|        }
 3841|  54.2k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3841:13): [True: 5.06k, False: 49.2k]
  ------------------
 3842|  5.06k|            SCN_UNLIKELY_ATTR
 3843|  5.06k|            return invalid_code_point;
 3844|  5.06k|        }
 3845|       |
 3846|  49.2k|        char32_t cp{};
 3847|  49.2k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3848|  49.2k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3849|  49.2k|        return cp;
 3850|  54.2k|    }
 3851|       |
 3852|  5.04k|    if (input.size() == 3) {
  ------------------
  |  Branch (3852:9): [True: 2.70k, False: 2.34k]
  ------------------
 3853|  2.70k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3853:13): [True: 113, False: 2.58k]
  ------------------
 3854|    113|            SCN_UNLIKELY_ATTR
 3855|    113|            return invalid_code_point;
 3856|    113|        }
 3857|  2.58k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3857:13): [True: 1.10k, False: 1.48k]
  ------------------
 3858|  2.58k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3858:13): [True: 596, False: 888]
  ------------------
 3859|  1.70k|            SCN_UNLIKELY_ATTR
 3860|  1.70k|            return invalid_code_point;
 3861|  1.70k|        }
 3862|       |
 3863|    888|        char32_t cp{};
 3864|    888|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3865|    888|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3866|    888|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3867|    888|        return cp;
 3868|  2.58k|    }
 3869|       |
 3870|  2.34k|    if (input.size() == 4) {
  ------------------
  |  Branch (3870:9): [True: 2.34k, False: 0]
  ------------------
 3871|  2.34k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3871:13): [True: 0, False: 2.34k]
  ------------------
 3872|      0|            SCN_UNLIKELY_ATTR
 3873|      0|            return invalid_code_point;
 3874|      0|        }
 3875|  2.34k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3875:13): [True: 495, False: 1.85k]
  ------------------
 3876|    495|            SCN_UNLIKELY_ATTR
 3877|    495|            return invalid_code_point;
 3878|    495|        }
 3879|  1.85k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3879:13): [True: 465, False: 1.38k]
  ------------------
 3880|  1.85k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3880:13): [True: 555, False: 833]
  ------------------
 3881|  1.85k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3881:13): [True: 542, False: 291]
  ------------------
 3882|  1.56k|            SCN_UNLIKELY_ATTR
 3883|  1.56k|            return invalid_code_point;
 3884|  1.56k|        }
 3885|       |
 3886|    291|        char32_t cp{};
 3887|    291|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3888|    291|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3889|    291|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3890|    291|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3891|    291|        return cp;
 3892|  1.85k|    }
 3893|       |
 3894|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3895|       |    // gcc 7 thinks we'll get here, even when we won't
 3896|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3897|      0|#endif
 3898|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3899|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3824|  62.4k|    const auto is_trailing_code_unit = [](char ch) {
 3825|  62.4k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3826|  62.4k|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3694|  4.53M|{
 3695|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3696|       |                                          decltype(first), decltype(last)> &&
 3697|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3698|       |        return {first, last};
 3699|       |    }
 3700|  4.53M|    else {
 3701|  4.53M|        return {to_address(first), static_cast<size_t>(std::distance(
 3702|  4.53M|                                       to_address(first), to_address(last)))};
 3703|  4.53M|    }
 3704|  4.53M|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  13.7M|{
  326|  13.7M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  13.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  13.7M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  303|  21.1M|{
  304|  21.1M|    return p;
  305|  21.1M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3725|  7.20M|{
 3726|       |    if constexpr (std::is_constructible_v<
 3727|       |                      typename std::basic_string_view<CharT>::iterator,
 3728|       |                      decltype(it)> &&
 3729|  7.20M|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3730|  7.20M|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  7.20M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3731|  7.20M|        return it;
 3732|       |    }
 3733|       |    else {
 3734|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3735|       |    }
 3736|  7.20M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  89.0k|    {
 2724|  89.0k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  89.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  89.0k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  89.0k|    {
 2705|  89.0k|        return decay_copy(t.begin());
 2706|  89.0k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1948|  10.4M|{
 1949|  10.4M|    return SCN_FWD(t);
  ------------------
  |  |  930|  10.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  10.4M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.97M|    {
 2781|  1.97M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.97M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.97M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.97M|    {
 2763|  1.97M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.97M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.97M|    }
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8877|   145k|{
 8878|   145k|    auto args = make_scan_args<scan_context, Args...>();
 8879|   145k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   145k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|   145k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   145k|    static_cast<    \
  |  |  929|   145k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   145k|    static_cast<    \
  |  |  929|   145k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|   145k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJfEEEDav:
 5405|   621k|{
 5406|   621k|    detail::check_scan_arg_types<Args...>();
 5407|   621k|    return detail::scan_arg_store<Context, Args...>{};
 5408|   621k|}
_ZN3scn2v36detail20check_scan_arg_typesIJfEEEvv:
 5144|  1.02M|{
 5145|  1.02M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|  1.02M|                  "Scan argument types must be default constructible");
 5147|  1.02M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|  1.02M|                  "Scan argument types must be Destructible");
 5149|  1.02M|    static_assert(
 5150|  1.02M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|  1.02M|        "Scan argument types must not be references");
 5152|  1.02M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEEC2Ev:
 5357|   621k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|   621k|    {
 5359|   621k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|   621k|    {
 5370|   621k|        return {detail::make_arg<
 5371|   621k|            kind, Context,
 5372|   621k|            mapped_type_constant<remove_cvref_t<A>,
 5373|   621k|                                 typename Context::char_type>::value>(args)...};
 5374|   621k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE16EfvEEPvRT2_:
 5179|   621k|{
 5180|   621k|    return make_value<Context>(value).ref_value;
 5181|   621k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEfEEDaRT0_:
 5129|   687k|{
 5130|   687k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|   687k|                                  needs_context_tag>) {
 5134|   687k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   687k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|   687k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERf:
 4968|   687k|    {                                                                        \
 4969|   687k|        return val;                                                          \
 4970|   687k|    }
_ZN3scn2v36detail15make_value_implIRfEEDaOT_:
 5098|  1.02M|{
 5099|  1.02M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|  1.02M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|  1.02M|    constexpr bool scannable_char =
 5103|  1.02M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|  1.02M|    static_assert(scannable_char,
 5105|  1.02M|                  "Cannot scan an argument of an unsupported character "
 5106|  1.02M|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|  1.02M|    constexpr bool scannable_const =
 5109|  1.02M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|  1.02M|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|  1.02M|    constexpr bool scannable_disabled =
 5113|  1.02M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|  1.02M|    static_assert(scannable_disabled,
 5115|  1.02M|                  "Cannot scan an argument that has been disabled by "
 5116|  1.02M|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|  1.02M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|  1.02M|    static_assert(
 5120|  1.02M|        scannable,
 5121|  1.02M|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|  1.02M|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|  1.02M|    return arg_value{arg};
 5125|  1.02M|}
_ZN3scn2v36detail9arg_valueC2IfEERT_:
 4909|  1.02M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|  1.02M|    {
 4911|  1.02M|    }
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8664|   445k|{
 8665|   445k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   445k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8666|   445k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8601|   445k|{
 8602|   445k|    auto buffer = make_scan_buffer(range);
 8603|       |
 8604|   445k|    auto result = vscan_impl(buffer, format, args);
 8605|   445k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   445k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 40.0k, False: 405k]
  |  |  ------------------
  ------------------
 8606|  40.0k|        return unexpected(result.error());
 8607|  40.0k|    }
 8608|   405k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   405k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8609|   445k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 4728|   988k|{
 4729|   988k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4730|       |
 4731|   988k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4732|   988k|                  "\n"
 4733|   988k|                  "Unsupported range type given as input to a scanning "
 4734|   988k|                  "function.\n"
 4735|   988k|                  "A range needs to have a character type (value type) "
 4736|   988k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4737|   988k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4738|   988k|                  "to be included.\n"
 4739|   988k|                  "See the scnlib documentation for more details.");
 4740|   988k|    static_assert(
 4741|   988k|        !std::is_same_v<T, custom_char_traits>,
 4742|   988k|        "\n"
 4743|   988k|        "Unsupported range type given as input to a scanning "
 4744|   988k|        "function.\n"
 4745|   988k|        "String types (std::basic_string, and std::basic_string_view) "
 4746|   988k|        "need to use std::char_traits. Strings with custom Traits are "
 4747|   988k|        "not supported.");
 4748|   988k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4749|   988k|                  "\n"
 4750|   988k|                  "Unsupported range type given as input to a scanning "
 4751|   988k|                  "function.\n"
 4752|   988k|                  "file_marker_found cannot be used as an "
 4753|   988k|                  "source range type to scn::scan.\n"
 4754|   988k|                  "To read from stdin, use scn::input or scn::prompt, "
 4755|   988k|                  "and do not provide an explicit source range, "
 4756|   988k|                  "or use scn::scan with a FILE* directly.");
 4757|   988k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4758|   988k|                  "\n"
 4759|   988k|                  "Unsupported range type given as input to a scanning "
 4760|   988k|                  "function.\n"
 4761|   988k|                  "In order to be scannable, a range needs to satisfy "
 4762|   988k|                  "`forward_range`. `input_range` is not sufficient.");
 4763|   988k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4764|   988k|                  "\n"
 4765|   988k|                  "Unsupported range type given as input to a scanning "
 4766|   988k|                  "function.\n"
 4767|   988k|                  "A range needs to model forward_range and have a valid "
 4768|   988k|                  "character type (char or wchar_t) to be scannable.\n"
 4769|   988k|                  "Examples of scannable ranges are std::string, "
 4770|   988k|                  "std::string_view, "
 4771|   988k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4772|   988k|                  "See the scnlib documentation for more details.");
 4773|       |
 4774|   988k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4775|   988k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 4667|   988k|{
 4668|   988k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 4669|   988k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4670|       |    }
 4671|       |    else {
 4672|       |        return invalid_char_type{};
 4673|       |    }
 4674|   988k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   988k|    {
 2855|   988k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   988k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   988k|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   988k|    {
 2836|   988k|        return t.data();
 2837|   988k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3228|   988k|    {
 3229|   988k|        return detail::to_address(ranges::begin(derived()));
 3230|   988k|    }
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  7.39M|{
  326|  7.39M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  7.39M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  7.39M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.88M|    {
 2724|  1.88M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.88M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.88M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.88M|    {
 2705|  1.88M|        return decay_copy(t.begin());
 2706|  1.88M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3325|  23.7M|    {
 3326|  23.7M|        return m_iterator;
 3327|  23.7M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3184|   988k|    {
 3185|   988k|        return static_cast<const D&>(*this);
 3186|   988k|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|   988k|    {
 2930|   988k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|   988k|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|   988k|    {
 2896|   988k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|   988k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|   988k|    }
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1948|  4.23M|{
 1949|  4.23M|    return SCN_FWD(t);
  ------------------
  |  |  930|  4.23M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  4.23M|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3341|  5.44M|    {
 3342|  5.44M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3343|  5.44M|    }
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1597|  10.5M|    {
 1598|  10.5M|        return has_value();
 1599|  10.5M|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  484|  20.8M|    {
  485|  20.8M|        return m_has_value;
  486|  20.8M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1603|   790k|    {
 1604|   790k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   790k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   790k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   790k|        return this->get_unexpected().error();
 1606|   790k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   790k|    {
  468|   790k|        return m_unexpected;
  469|   790k|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  360|  6.10M|    {
  361|  6.10M|        return m_unexpected;
  362|  6.10M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  345|  2.98M|        : m_unexpected(std::forward<Err>(e))
  346|  2.98M|    {
  347|  2.98M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  2.98M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  2.98M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1473|  86.8k|        : base(unexpect, std::move(e.error())),
 1474|  86.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  86.8k|    {
 1476|  86.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|  86.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  86.8k|          m_has_value(false)
  446|  86.8k|    {
  447|  86.8k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  354|  6.55M|        : m_unexpected(std::forward<Args>(args)...)
  355|  6.55M|    {
  356|  6.55M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  6.55M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  6.55M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   988k|    {
 1177|   988k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5932|   901k|{
 5933|       |    if constexpr (ranges::random_access_iterator<
 5934|   901k|                      ranges::iterator_t<SourceRange>>) {
 5935|   901k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5936|       |    }
 5937|       |    else {
 5938|       |        auto it = ranges::begin(source);
 5939|       |        while (n > 0) {
 5940|       |            --n;
 5941|       |            ++it;
 5942|       |        }
 5943|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5944|       |    }
 5945|   901k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  5.59M|    {
 2724|  5.59M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  5.59M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  5.59M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  5.59M|    {
 2705|  5.59M|        return decay_copy(t.begin());
 2706|  5.59M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 5919|   901k|{
 5920|   901k|    return ranges::end(source);
 5921|   901k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   901k|    {
 2781|   901k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   901k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   901k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   901k|    {
 2763|   901k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   901k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   901k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3329|  11.5M|    {
 3330|  11.5M|        return m_sentinel;
 3331|  11.5M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1652|  4.11M|    {
 1653|  4.11M|        return value();
 1654|  4.11M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1626|  9.51M|    {
 1627|  9.51M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  9.51M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.51M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  9.51M|        return this->get_value();
 1629|  9.51M|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  450|  9.51M|    {
  451|  9.51M|        return m_value;
  452|  9.51M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|   901k|        : base(std::in_place, std::forward<U>(val)),
 1428|   901k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   901k|    {
 1430|   901k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  435|   901k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   901k|    {
  437|   901k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7985|   290k|    {
 7986|   290k|        return m_str;
 7987|   290k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJfEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|   621k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|   621k|    {
 5436|   621k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE12arg_pointersEv:
 5388|   621k|    {
 5389|   621k|        return m_argptrs;
 5390|   621k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5486|  1.91M|        : m_desc(desc), m_builtin_values(data)
 5487|  1.91M|    {
 5488|  1.91M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|   290k|{
 8831|   290k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   290k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.7k, False: 263k]
  |  |  ------------------
  ------------------
 8832|  26.7k|        return unexpected(result.error());
 8833|  26.7k|    }
 8834|   263k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   263k|    static_cast<    \
  |  |  929|   263k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   263k|    static_cast<    \
  |  |  929|   263k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|   290k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1597|   988k|    {
 1598|   988k|        return has_value();
 1599|   988k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.97M|    {
  485|  1.97M|        return m_has_value;
  486|  1.97M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1603|  86.8k|    {
 1604|  86.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  86.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  86.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  86.8k|        return this->get_unexpected().error();
 1606|  86.8k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  86.8k|    {
  468|  86.8k|        return m_unexpected;
  469|  86.8k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  28.9k|        : base(unexpect, std::move(e.error())),
 1474|  28.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  28.9k|    {
 1476|  28.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  28.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  28.9k|          m_has_value(false)
  446|  28.9k|    {
  447|  28.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   321k|    {
 1177|   321k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1652|   810k|    {
 1653|   810k|        return value();
 1654|   810k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|   901k|    {
 1627|   901k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   901k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   901k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   901k|        return this->get_value();
 1629|   901k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   901k|    {
  451|   901k|        return m_value;
  452|   901k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2ES8_ONSt3__15tupleIJfEEE:
 5838|   292k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   292k|    static_cast<    \
  |  |  929|   292k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   292k|    static_cast<    \
  |  |  929|   292k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   292k|    {
 5840|   292k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5689|   901k|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|   901k|    static_cast<    \
  |  |  929|   901k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5690|   901k|    {
 5691|   901k|    }
_ZN3scn2v36detail25scan_result_value_storageIJfEEC2EONSt3__15tupleIJfEEE:
 5624|   853k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|   853k|    static_cast<    \
  |  |  929|   853k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|   853k|    {
 5626|   853k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|   292k|        : base(std::in_place, std::forward<U>(val)),
 1428|   292k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   292k|    {
 1430|   292k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|   292k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   292k|    {
  437|   292k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE4argsEv:
 5383|   621k|    {
 5384|   621k|        return m_args;
 5385|   621k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3310|  9.26M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  9.26M|    static_cast<    \
  |  |  929|  9.26M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  9.26M|    static_cast<    \
  |  |  929|  9.26M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  9.26M|    {
 3312|  9.26M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7701|  1.91M|{
 7702|  1.91M|    return s;
 7703|  1.91M|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7678|  1.91M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|   290k|        : m_str(r.str)
 7981|   290k|    {
 7982|   290k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   321k|    {
 1598|   321k|        return has_value();
 1599|   321k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   614k|    {
  485|   614k|        return m_has_value;
  486|   614k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEptEv:
 1672|   292k|    {
 1673|   292k|        return &value();
 1674|   292k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|   292k|    {
 1627|   292k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   292k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   292k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   292k|        return this->get_value();
 1629|   292k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   292k|    {
  451|   292k|        return m_value;
  452|   292k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 5707|   901k|    {
 5708|   901k|        return ranges::begin(m_range);
 5709|   901k|    }
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8944|   145k|{
 8945|   145k|    auto args = make_scan_args<scan_context, Args...>();
 8946|   145k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   145k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|   145k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   145k|    static_cast<    \
  |  |  929|   145k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   145k|    static_cast<    \
  |  |  929|   145k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|   145k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8682|   445k|{
 8683|   445k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   445k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8684|   445k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8617|   445k|{
 8618|   445k|#if !SCN_DISABLE_LOCALE
 8619|   445k|    auto buffer = detail::make_scan_buffer(range);
 8620|       |
 8621|   445k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8622|   445k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8623|   445k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8624|       |
 8625|   445k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   445k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 40.0k, False: 405k]
  |  |  ------------------
  ------------------
 8626|  40.0k|        return unexpected(result.error());
 8627|  40.0k|    }
 8628|   405k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   405k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8629|       |#else
 8630|       |    static_assert(dependent_false<Locale>::value,
 8631|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8632|       |
 8633|       |    return {};
 8634|       |#endif
 8635|   445k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8983|  31.5k|{
 8984|  31.5k|    T value;
 8985|  31.5k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  31.5k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  31.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  31.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  31.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  31.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.22k, False: 29.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.22k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.22k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.22k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.22k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.22k|    }                                                  \
  |  |  |  | 3667|  31.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  29.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  29.2k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  29.2k|    static_cast<    \
  |  |  929|  29.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  29.2k|    static_cast<    \
  |  |  929|  29.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  31.5k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEfEENS0_14basic_scan_argIT_EERT0_:
 5164|  65.5k|{
 5165|  65.5k|    check_scan_arg_types<T>();
 5166|       |
 5167|  65.5k|    basic_scan_arg<Context> arg;
 5168|  65.5k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  65.5k|    arg.m_value = make_value<Context>(value);
 5170|  65.5k|    return arg;
 5171|  65.5k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5250|  2.11M|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4906|  3.22M|    arg_value() = default;
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8695|  97.4k|{
 8696|  97.4k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|  97.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8697|  97.4k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8641|  97.4k|{
 8642|  97.4k|    auto buffer = detail::make_scan_buffer(range);
 8643|       |
 8644|  97.4k|    auto result = detail::vscan_value_impl(buffer, arg);
 8645|  97.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  97.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.68k, False: 90.7k]
  |  |  ------------------
  ------------------
 8646|  6.68k|        return unexpected(result.error());
 8647|  6.68k|    }
 8648|  90.7k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  90.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8649|  97.4k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1662|  90.7k|    {
 1663|  90.7k|        return std::move(value());
 1664|  90.7k|    }
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8877|   149k|{
 8878|   149k|    auto args = make_scan_args<scan_context, Args...>();
 8879|   149k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   149k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|   149k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   149k|    static_cast<    \
  |  |  929|   149k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   149k|    static_cast<    \
  |  |  929|   149k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|   149k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJdEEEDav:
 5405|   643k|{
 5406|   643k|    detail::check_scan_arg_types<Args...>();
 5407|   643k|    return detail::scan_arg_store<Context, Args...>{};
 5408|   643k|}
_ZN3scn2v36detail20check_scan_arg_typesIJdEEEvv:
 5144|  1.08M|{
 5145|  1.08M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|  1.08M|                  "Scan argument types must be default constructible");
 5147|  1.08M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|  1.08M|                  "Scan argument types must be Destructible");
 5149|  1.08M|    static_assert(
 5150|  1.08M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|  1.08M|        "Scan argument types must not be references");
 5152|  1.08M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEEC2Ev:
 5357|   643k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|   643k|    {
 5359|   643k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|   643k|    {
 5370|   643k|        return {detail::make_arg<
 5371|   643k|            kind, Context,
 5372|   643k|            mapped_type_constant<remove_cvref_t<A>,
 5373|   643k|                                 typename Context::char_type>::value>(args)...};
 5374|   643k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE17EdvEEPvRT2_:
 5179|   643k|{
 5180|   643k|    return make_value<Context>(value).ref_value;
 5181|   643k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEdEEDaRT0_:
 5129|   711k|{
 5130|   711k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|   711k|                                  needs_context_tag>) {
 5134|   711k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   711k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|   711k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERd:
 4968|   711k|    {                                                                        \
 4969|   711k|        return val;                                                          \
 4970|   711k|    }
_ZN3scn2v36detail15make_value_implIRdEEDaOT_:
 5098|  1.08M|{
 5099|  1.08M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|  1.08M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|  1.08M|    constexpr bool scannable_char =
 5103|  1.08M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|  1.08M|    static_assert(scannable_char,
 5105|  1.08M|                  "Cannot scan an argument of an unsupported character "
 5106|  1.08M|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|  1.08M|    constexpr bool scannable_const =
 5109|  1.08M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|  1.08M|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|  1.08M|    constexpr bool scannable_disabled =
 5113|  1.08M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|  1.08M|    static_assert(scannable_disabled,
 5115|  1.08M|                  "Cannot scan an argument that has been disabled by "
 5116|  1.08M|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|  1.08M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|  1.08M|    static_assert(
 5120|  1.08M|        scannable,
 5121|  1.08M|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|  1.08M|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|  1.08M|    return arg_value{arg};
 5125|  1.08M|}
_ZN3scn2v36detail9arg_valueC2IdEERT_:
 4909|  1.08M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|  1.08M|    {
 4911|  1.08M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7985|   298k|    {
 7986|   298k|        return m_str;
 7987|   298k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|   643k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|   643k|    {
 5436|   643k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12arg_pointersEv:
 5388|   643k|    {
 5389|   643k|        return m_argptrs;
 5390|   643k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|   298k|{
 8831|   298k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   298k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.7k, False: 271k]
  |  |  ------------------
  ------------------
 8832|  26.7k|        return unexpected(result.error());
 8833|  26.7k|    }
 8834|   271k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   271k|    static_cast<    \
  |  |  929|   271k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   271k|    static_cast<    \
  |  |  929|   271k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|   298k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  28.9k|        : base(unexpect, std::move(e.error())),
 1474|  28.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  28.9k|    {
 1476|  28.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  28.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  28.9k|          m_has_value(false)
  446|  28.9k|    {
  447|  28.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   331k|    {
 1177|   331k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2ES8_ONSt3__15tupleIJdEEE:
 5838|   302k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   302k|    static_cast<    \
  |  |  929|   302k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   302k|    static_cast<    \
  |  |  929|   302k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   302k|    {
 5840|   302k|    }
_ZN3scn2v36detail25scan_result_value_storageIJdEEC2EONSt3__15tupleIJdEEE:
 5624|   915k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|   915k|    static_cast<    \
  |  |  929|   915k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|   915k|    {
 5626|   915k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|   302k|        : base(std::in_place, std::forward<U>(val)),
 1428|   302k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   302k|    {
 1430|   302k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|   302k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   302k|    {
  437|   302k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE4argsEv:
 5383|   643k|    {
 5384|   643k|        return m_args;
 5385|   643k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|   298k|        : m_str(r.str)
 7981|   298k|    {
 7982|   298k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   331k|    {
 1598|   331k|        return has_value();
 1599|   331k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   633k|    {
  485|   633k|        return m_has_value;
  486|   633k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEptEv:
 1672|   302k|    {
 1673|   302k|        return &value();
 1674|   302k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|   302k|    {
 1627|   302k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   302k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   302k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   302k|        return this->get_value();
 1629|   302k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   302k|    {
  451|   302k|        return m_value;
  452|   302k|    }
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8944|   149k|{
 8945|   149k|    auto args = make_scan_args<scan_context, Args...>();
 8946|   149k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   149k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|   149k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   149k|    static_cast<    \
  |  |  929|   149k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   149k|    static_cast<    \
  |  |  929|   149k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|   149k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8983|  32.7k|{
 8984|  32.7k|    T value;
 8985|  32.7k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  32.7k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  32.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  32.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  32.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  32.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.22k, False: 30.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.22k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.22k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.22k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.22k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.22k|    }                                                  \
  |  |  |  | 3667|  32.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  30.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  30.4k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  30.4k|    static_cast<    \
  |  |  929|  30.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  30.4k|    static_cast<    \
  |  |  929|  30.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  32.7k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEdEENS0_14basic_scan_argIT_EERT0_:
 5164|  68.3k|{
 5165|  68.3k|    check_scan_arg_types<T>();
 5166|       |
 5167|  68.3k|    basic_scan_arg<Context> arg;
 5168|  68.3k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  68.3k|    arg.m_value = make_value<Context>(value);
 5170|  68.3k|    return arg;
 5171|  68.3k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8877|   151k|{
 8878|   151k|    auto args = make_scan_args<scan_context, Args...>();
 8879|   151k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   151k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|   151k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   151k|    static_cast<    \
  |  |  929|   151k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   151k|    static_cast<    \
  |  |  929|   151k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|   151k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJeEEEDav:
 5405|   650k|{
 5406|   650k|    detail::check_scan_arg_types<Args...>();
 5407|   650k|    return detail::scan_arg_store<Context, Args...>{};
 5408|   650k|}
_ZN3scn2v36detail20check_scan_arg_typesIJeEEEvv:
 5144|  1.10M|{
 5145|  1.10M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|  1.10M|                  "Scan argument types must be default constructible");
 5147|  1.10M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|  1.10M|                  "Scan argument types must be Destructible");
 5149|  1.10M|    static_assert(
 5150|  1.10M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|  1.10M|        "Scan argument types must not be references");
 5152|  1.10M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEEC2Ev:
 5357|   650k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|   650k|    {
 5359|   650k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|   650k|    {
 5370|   650k|        return {detail::make_arg<
 5371|   650k|            kind, Context,
 5372|   650k|            mapped_type_constant<remove_cvref_t<A>,
 5373|   650k|                                 typename Context::char_type>::value>(args)...};
 5374|   650k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE18EevEEPvRT2_:
 5179|   650k|{
 5180|   650k|    return make_value<Context>(value).ref_value;
 5181|   650k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEeEEDaRT0_:
 5129|   719k|{
 5130|   719k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|   719k|                                  needs_context_tag>) {
 5134|   719k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   719k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|   719k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERe:
 4968|   719k|    {                                                                        \
 4969|   719k|        return val;                                                          \
 4970|   719k|    }
_ZN3scn2v36detail15make_value_implIReEEDaOT_:
 5098|  1.10M|{
 5099|  1.10M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|  1.10M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|  1.10M|    constexpr bool scannable_char =
 5103|  1.10M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|  1.10M|    static_assert(scannable_char,
 5105|  1.10M|                  "Cannot scan an argument of an unsupported character "
 5106|  1.10M|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|  1.10M|    constexpr bool scannable_const =
 5109|  1.10M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|  1.10M|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|  1.10M|    constexpr bool scannable_disabled =
 5113|  1.10M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|  1.10M|    static_assert(scannable_disabled,
 5115|  1.10M|                  "Cannot scan an argument that has been disabled by "
 5116|  1.10M|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|  1.10M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|  1.10M|    static_assert(
 5120|  1.10M|        scannable,
 5121|  1.10M|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|  1.10M|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|  1.10M|    return arg_value{arg};
 5125|  1.10M|}
_ZN3scn2v36detail9arg_valueC2IeEERT_:
 4909|  1.10M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|  1.10M|    {
 4911|  1.10M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7985|   302k|    {
 7986|   302k|        return m_str;
 7987|   302k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJeEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|   650k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|   650k|    {
 5436|   650k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE12arg_pointersEv:
 5388|   650k|    {
 5389|   650k|        return m_argptrs;
 5390|   650k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|   302k|{
 8831|   302k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   302k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.7k, False: 275k]
  |  |  ------------------
  ------------------
 8832|  26.7k|        return unexpected(result.error());
 8833|  26.7k|    }
 8834|   275k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   275k|    static_cast<    \
  |  |  929|   275k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   275k|    static_cast<    \
  |  |  929|   275k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|   302k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  28.9k|        : base(unexpect, std::move(e.error())),
 1474|  28.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  28.9k|    {
 1476|  28.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  28.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  28.9k|          m_has_value(false)
  446|  28.9k|    {
  447|  28.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   335k|    {
 1177|   335k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2ES8_ONSt3__15tupleIJeEEE:
 5838|   306k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   306k|    static_cast<    \
  |  |  929|   306k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   306k|    static_cast<    \
  |  |  929|   306k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   306k|    {
 5840|   306k|    }
_ZN3scn2v36detail25scan_result_value_storageIJeEEC2EONSt3__15tupleIJeEEE:
 5624|   930k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|   930k|    static_cast<    \
  |  |  929|   930k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|   930k|    {
 5626|   930k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|   306k|        : base(std::in_place, std::forward<U>(val)),
 1428|   306k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   306k|    {
 1430|   306k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|   306k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   306k|    {
  437|   306k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE4argsEv:
 5383|   650k|    {
 5384|   650k|        return m_args;
 5385|   650k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|   302k|        : m_str(r.str)
 7981|   302k|    {
 7982|   302k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   335k|    {
 1598|   335k|        return has_value();
 1599|   335k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   641k|    {
  485|   641k|        return m_has_value;
  486|   641k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEptEv:
 1672|   306k|    {
 1673|   306k|        return &value();
 1674|   306k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|   306k|    {
 1627|   306k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   306k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   306k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   306k|        return this->get_value();
 1629|   306k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   306k|    {
  451|   306k|        return m_value;
  452|   306k|    }
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8944|   151k|{
 8945|   151k|    auto args = make_scan_args<scan_context, Args...>();
 8946|   151k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   151k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|   151k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   151k|    static_cast<    \
  |  |  929|   151k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   151k|    static_cast<    \
  |  |  929|   151k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|   151k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8983|  33.2k|{
 8984|  33.2k|    T value;
 8985|  33.2k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  33.2k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  33.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  33.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  33.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  33.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.22k, False: 31.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.22k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.22k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.22k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.22k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.22k|    }                                                  \
  |  |  |  | 3667|  33.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  31.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  31.0k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  31.0k|    static_cast<    \
  |  |  929|  31.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  31.0k|    static_cast<    \
  |  |  929|  31.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  33.2k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEeEENS0_14basic_scan_argIT_EERT0_:
 5164|  69.2k|{
 5165|  69.2k|    check_scan_arg_types<T>();
 5166|       |
 5167|  69.2k|    basic_scan_arg<Context> arg;
 5168|  69.2k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  69.2k|    arg.m_value = make_value<Context>(value);
 5170|  69.2k|    return arg;
 5171|  69.2k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  86.8k|    {
 2724|  86.8k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  86.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  86.8k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  86.8k|    {
 2705|  86.8k|        return decay_copy(t.begin());
 2706|  86.8k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 1948|  48.0M|{
 1949|  48.0M|    return SCN_FWD(t);
  ------------------
  |  |  930|  48.0M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  48.0M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  2.26M|    {
 2781|  2.26M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.26M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  2.26M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  2.26M|    {
 2763|  2.26M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.26M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  2.26M|    }
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8877|   165k|{
 8878|   165k|    auto args = make_scan_args<scan_context, Args...>();
 8879|   165k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   165k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|   165k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   165k|    static_cast<    \
  |  |  929|   165k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   165k|    static_cast<    \
  |  |  929|   165k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|   165k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8664|   512k|{
 8665|   512k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   512k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8666|   512k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8601|   512k|{
 8602|   512k|    auto buffer = make_scan_buffer(range);
 8603|       |
 8604|   512k|    auto result = vscan_impl(buffer, format, args);
 8605|   512k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   512k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 40.0k, False: 472k]
  |  |  ------------------
  ------------------
 8606|  40.0k|        return unexpected(result.error());
 8607|  40.0k|    }
 8608|   472k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   472k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8609|   512k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4728|  1.13M|{
 4729|  1.13M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4730|       |
 4731|  1.13M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4732|  1.13M|                  "\n"
 4733|  1.13M|                  "Unsupported range type given as input to a scanning "
 4734|  1.13M|                  "function.\n"
 4735|  1.13M|                  "A range needs to have a character type (value type) "
 4736|  1.13M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4737|  1.13M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4738|  1.13M|                  "to be included.\n"
 4739|  1.13M|                  "See the scnlib documentation for more details.");
 4740|  1.13M|    static_assert(
 4741|  1.13M|        !std::is_same_v<T, custom_char_traits>,
 4742|  1.13M|        "\n"
 4743|  1.13M|        "Unsupported range type given as input to a scanning "
 4744|  1.13M|        "function.\n"
 4745|  1.13M|        "String types (std::basic_string, and std::basic_string_view) "
 4746|  1.13M|        "need to use std::char_traits. Strings with custom Traits are "
 4747|  1.13M|        "not supported.");
 4748|  1.13M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4749|  1.13M|                  "\n"
 4750|  1.13M|                  "Unsupported range type given as input to a scanning "
 4751|  1.13M|                  "function.\n"
 4752|  1.13M|                  "file_marker_found cannot be used as an "
 4753|  1.13M|                  "source range type to scn::scan.\n"
 4754|  1.13M|                  "To read from stdin, use scn::input or scn::prompt, "
 4755|  1.13M|                  "and do not provide an explicit source range, "
 4756|  1.13M|                  "or use scn::scan with a FILE* directly.");
 4757|  1.13M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4758|  1.13M|                  "\n"
 4759|  1.13M|                  "Unsupported range type given as input to a scanning "
 4760|  1.13M|                  "function.\n"
 4761|  1.13M|                  "In order to be scannable, a range needs to satisfy "
 4762|  1.13M|                  "`forward_range`. `input_range` is not sufficient.");
 4763|  1.13M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4764|  1.13M|                  "\n"
 4765|  1.13M|                  "Unsupported range type given as input to a scanning "
 4766|  1.13M|                  "function.\n"
 4767|  1.13M|                  "A range needs to model forward_range and have a valid "
 4768|  1.13M|                  "character type (char or wchar_t) to be scannable.\n"
 4769|  1.13M|                  "Examples of scannable ranges are std::string, "
 4770|  1.13M|                  "std::string_view, "
 4771|  1.13M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4772|  1.13M|                  "See the scnlib documentation for more details.");
 4773|       |
 4774|  1.13M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4775|  1.13M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4698|  1.13M|{
 4699|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 4700|       |        return file_marker_found{};
 4701|       |    }
 4702|       |    else if constexpr (!ranges::forward_range<Range>) {
 4703|       |        if constexpr (ranges::range<Range>) {
 4704|       |            return insufficient_range{};
 4705|       |        }
 4706|       |        else {
 4707|       |            return invalid_input_range{};
 4708|       |        }
 4709|       |    }
 4710|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 4711|       |        return invalid_char_type{};
 4712|       |    }
 4713|  1.13M|    else {
 4714|  1.13M|        return make_forward_scan_buffer(r);
 4715|  1.13M|    }
 4716|  1.13M|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4532|  1.13M|{
 4533|  1.13M|    return basic_scan_forward_buffer_impl(range);
 4534|  1.13M|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4417|  1.13M|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  930|  1.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4418|  1.13M|          m_cursor(ranges::begin(*m_range))
 4419|  1.13M|    {
 4420|  1.13M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4389|  1.13M|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4390|  1.13M|    {
 4391|  1.13M|    }
_ZN3scn2v36detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4157|  1.13M|        : m_current_view(sv), m_is_contiguous(false)
 4158|  1.13M|    {
 4159|  1.13M|    }
_ZN3scn2v36detail17basic_scan_bufferIcED2Ev:
 4073|  1.13M|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  2.17M|    {
 2724|  2.17M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.17M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  2.17M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  2.17M|    {
 2705|  2.17M|        return decay_copy(t.begin());
 2706|  2.17M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3325|  3.21M|    {
 3326|  3.21M|        return m_iterator;
 3327|  3.21M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4423|  14.0M|    {
 4424|  14.0M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4424:13): [True: 285k, False: 13.7M]
  ------------------
 4425|   285k|            return false;
 4426|   285k|        }
 4427|  13.7M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4428|  13.7M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  13.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4429|  13.7M|        }
 4430|  13.7M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4430:13): [True: 12.6M, False: 1.11M]
  ------------------
 4431|  12.6M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4432|  12.6M|                                          this->m_current_view.begin(),
 4433|  12.6M|                                          this->m_current_view.end());
 4434|  12.6M|        }
 4435|  13.7M|        m_latest = *m_cursor;
 4436|  13.7M|        ++m_cursor;
 4437|  13.7M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4438|  13.7M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4439|  13.7M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  13.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4440|  13.7M|        }
 4441|  13.7M|        return true;
 4442|  14.0M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  41.4M|    {
 2781|  41.4M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  41.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  41.4M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  41.4M|    {
 2763|  41.4M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  41.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  41.4M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3329|  42.5M|    {
 3330|  42.5M|        return m_sentinel;
 3331|  42.5M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE4syncEl:
 4078|  1.13M|    {
 4079|  1.13M|        SCN_UNUSED(position);
  ------------------
  |  |  909|  1.13M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4080|  1.13M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1473|  86.8k|        : base(unexpect, std::move(e.error())),
 1474|  86.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  86.8k|    {
 1476|  86.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  444|  86.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  86.8k|          m_has_value(false)
  446|  86.8k|    {
  447|  86.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.13M|    {
 1177|  1.13M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5932|  1.04M|{
 5933|       |    if constexpr (ranges::random_access_iterator<
 5934|  1.04M|                      ranges::iterator_t<SourceRange>>) {
 5935|  1.04M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5936|       |    }
 5937|       |    else {
 5938|       |        auto it = ranges::begin(source);
 5939|       |        while (n > 0) {
 5940|       |            --n;
 5941|       |            ++it;
 5942|       |        }
 5943|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5944|       |    }
 5945|  1.04M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.04M|    {
 2724|  1.04M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.04M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.04M|    {
 2705|  1.04M|        return decay_copy(t.begin());
 2706|  1.04M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 5919|  1.04M|{
 5920|  1.04M|    return ranges::end(source);
 5921|  1.04M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.04M|    {
 2781|  1.04M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.04M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.04M|    {
 2763|  1.04M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.04M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1427|  1.04M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.04M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.04M|    {
 1430|  1.04M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  435|  1.04M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.04M|    {
  437|  1.04M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7985|   331k|    {
 7986|   331k|        return m_str;
 7987|   331k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8830|   331k|{
 8831|   331k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   331k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.7k, False: 304k]
  |  |  ------------------
  ------------------
 8832|  26.7k|        return unexpected(result.error());
 8833|  26.7k|    }
 8834|   304k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   304k|    static_cast<    \
  |  |  929|   304k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   304k|    static_cast<    \
  |  |  929|   304k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|   331k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1597|  1.13M|    {
 1598|  1.13M|        return has_value();
 1599|  1.13M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.26M|    {
  485|  2.26M|        return m_has_value;
  486|  2.26M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1603|  86.8k|    {
 1604|  86.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  86.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  86.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  86.8k|        return this->get_unexpected().error();
 1606|  86.8k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  86.8k|    {
  468|  86.8k|        return m_unexpected;
  469|  86.8k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  28.9k|        : base(unexpect, std::move(e.error())),
 1474|  28.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  28.9k|    {
 1476|  28.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  28.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  28.9k|          m_has_value(false)
  446|  28.9k|    {
  447|  28.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   365k|    {
 1177|   365k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1652|   944k|    {
 1653|   944k|        return value();
 1654|   944k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1626|  1.04M|    {
 1627|  1.04M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.04M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.04M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.04M|        return this->get_value();
 1629|  1.04M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.04M|    {
  451|  1.04M|        return m_value;
  452|  1.04M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2ESE_ONS6_5tupleIJfEEE:
 5838|   336k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   336k|    static_cast<    \
  |  |  929|   336k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   336k|    static_cast<    \
  |  |  929|   336k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   336k|    {
 5840|   336k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2EOSF_:
 5689|  1.04M|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|  1.04M|    static_cast<    \
  |  |  929|  1.04M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5690|  1.04M|    {
 5691|  1.04M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|   336k|        : base(std::in_place, std::forward<U>(val)),
 1428|   336k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   336k|    {
 1430|   336k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|   336k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   336k|    {
  437|   336k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3310|  2.17M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  2.17M|    static_cast<    \
  |  |  929|  2.17M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  2.17M|    static_cast<    \
  |  |  929|  2.17M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  2.17M|    {
 3312|  2.17M|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|   331k|        : m_str(r.str)
 7981|   331k|    {
 7982|   331k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   365k|    {
 1598|   365k|        return has_value();
 1599|   365k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   702k|    {
  485|   702k|        return m_has_value;
  486|   702k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1672|   336k|    {
 1673|   336k|        return &value();
 1674|   336k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|   336k|    {
 1627|   336k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   336k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   336k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   336k|        return this->get_value();
 1629|   336k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   336k|    {
  451|   336k|        return m_value;
  452|   336k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 5707|  1.04M|    {
 5708|  1.04M|        return ranges::begin(m_range);
 5709|  1.04M|    }
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8944|   165k|{
 8945|   165k|    auto args = make_scan_args<scan_context, Args...>();
 8946|   165k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   165k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|   165k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   165k|    static_cast<    \
  |  |  929|   165k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   165k|    static_cast<    \
  |  |  929|   165k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|   165k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8682|   512k|{
 8683|   512k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   512k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8684|   512k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8617|   512k|{
 8618|   512k|#if !SCN_DISABLE_LOCALE
 8619|   512k|    auto buffer = detail::make_scan_buffer(range);
 8620|       |
 8621|   512k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8622|   512k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8623|   512k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8624|       |
 8625|   512k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   512k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 40.0k, False: 472k]
  |  |  ------------------
  ------------------
 8626|  40.0k|        return unexpected(result.error());
 8627|  40.0k|    }
 8628|   472k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   472k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8629|       |#else
 8630|       |    static_assert(dependent_false<Locale>::value,
 8631|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8632|       |
 8633|       |    return {};
 8634|       |#endif
 8635|   512k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8983|  34.0k|{
 8984|  34.0k|    T value;
 8985|  34.0k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  34.0k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  34.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  34.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  34.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  34.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.22k, False: 31.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.22k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.22k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.22k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.22k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.22k|    }                                                  \
  |  |  |  | 3667|  34.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  31.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  31.7k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  31.7k|    static_cast<    \
  |  |  929|  31.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  31.7k|    static_cast<    \
  |  |  929|  31.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  34.0k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8695|   105k|{
 8696|   105k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|   105k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8697|   105k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8641|   105k|{
 8642|   105k|    auto buffer = detail::make_scan_buffer(range);
 8643|       |
 8644|   105k|    auto result = detail::vscan_value_impl(buffer, arg);
 8645|   105k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.68k, False: 98.9k]
  |  |  ------------------
  ------------------
 8646|  6.68k|        return unexpected(result.error());
 8647|  6.68k|    }
 8648|  98.9k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  98.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8649|   105k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSJ_v:
 1662|  98.9k|    {
 1663|  98.9k|        return std::move(value());
 1664|  98.9k|    }
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8877|   172k|{
 8878|   172k|    auto args = make_scan_args<scan_context, Args...>();
 8879|   172k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   172k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|   172k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   172k|    static_cast<    \
  |  |  929|   172k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   172k|    static_cast<    \
  |  |  929|   172k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|   172k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7985|   344k|    {
 7986|   344k|        return m_str;
 7987|   344k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8830|   344k|{
 8831|   344k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   344k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.7k, False: 318k]
  |  |  ------------------
  ------------------
 8832|  26.7k|        return unexpected(result.error());
 8833|  26.7k|    }
 8834|   318k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   318k|    static_cast<    \
  |  |  929|   318k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   318k|    static_cast<    \
  |  |  929|   318k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|   344k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  28.9k|        : base(unexpect, std::move(e.error())),
 1474|  28.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  28.9k|    {
 1476|  28.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  28.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  28.9k|          m_has_value(false)
  446|  28.9k|    {
  447|  28.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   380k|    {
 1177|   380k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2ESE_ONS6_5tupleIJdEEE:
 5838|   351k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   351k|    static_cast<    \
  |  |  929|   351k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   351k|    static_cast<    \
  |  |  929|   351k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   351k|    {
 5840|   351k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|   351k|        : base(std::in_place, std::forward<U>(val)),
 1428|   351k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   351k|    {
 1430|   351k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|   351k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   351k|    {
  437|   351k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|   344k|        : m_str(r.str)
 7981|   344k|    {
 7982|   344k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   380k|    {
 1598|   380k|        return has_value();
 1599|   380k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   731k|    {
  485|   731k|        return m_has_value;
  486|   731k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1672|   351k|    {
 1673|   351k|        return &value();
 1674|   351k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|   351k|    {
 1627|   351k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   351k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   351k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   351k|        return this->get_value();
 1629|   351k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   351k|    {
  451|   351k|        return m_value;
  452|   351k|    }
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8944|   172k|{
 8945|   172k|    auto args = make_scan_args<scan_context, Args...>();
 8946|   172k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   172k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|   172k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   172k|    static_cast<    \
  |  |  929|   172k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   172k|    static_cast<    \
  |  |  929|   172k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|   172k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8983|  35.6k|{
 8984|  35.6k|    T value;
 8985|  35.6k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  35.6k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  35.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  35.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  35.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  35.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.22k, False: 33.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.22k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.22k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.22k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.22k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.22k|    }                                                  \
  |  |  |  | 3667|  35.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  33.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  33.3k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  33.3k|    static_cast<    \
  |  |  929|  33.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  33.3k|    static_cast<    \
  |  |  929|  33.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  35.6k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8877|   174k|{
 8878|   174k|    auto args = make_scan_args<scan_context, Args...>();
 8879|   174k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   174k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|   174k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   174k|    static_cast<    \
  |  |  929|   174k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   174k|    static_cast<    \
  |  |  929|   174k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|   174k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7985|   348k|    {
 7986|   348k|        return m_str;
 7987|   348k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8830|   348k|{
 8831|   348k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   348k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.7k, False: 321k]
  |  |  ------------------
  ------------------
 8832|  26.7k|        return unexpected(result.error());
 8833|  26.7k|    }
 8834|   321k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   321k|    static_cast<    \
  |  |  929|   321k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   321k|    static_cast<    \
  |  |  929|   321k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|   348k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  28.9k|        : base(unexpect, std::move(e.error())),
 1474|  28.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  28.9k|    {
 1476|  28.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  28.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  28.9k|          m_has_value(false)
  446|  28.9k|    {
  447|  28.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   384k|    {
 1177|   384k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2ESE_ONS6_5tupleIJeEEE:
 5838|   355k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   355k|    static_cast<    \
  |  |  929|   355k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   355k|    static_cast<    \
  |  |  929|   355k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   355k|    {
 5840|   355k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|   355k|        : base(std::in_place, std::forward<U>(val)),
 1428|   355k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   355k|    {
 1430|   355k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|   355k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   355k|    {
  437|   355k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|   348k|        : m_str(r.str)
 7981|   348k|    {
 7982|   348k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   384k|    {
 1598|   384k|        return has_value();
 1599|   384k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   739k|    {
  485|   739k|        return m_has_value;
  486|   739k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1672|   355k|    {
 1673|   355k|        return &value();
 1674|   355k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|   355k|    {
 1627|   355k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   355k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   355k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   355k|        return this->get_value();
 1629|   355k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   355k|    {
  451|   355k|        return m_value;
  452|   355k|    }
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8944|   174k|{
 8945|   174k|    auto args = make_scan_args<scan_context, Args...>();
 8946|   174k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   174k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|   174k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   174k|    static_cast<    \
  |  |  929|   174k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   174k|    static_cast<    \
  |  |  929|   174k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|   174k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8983|  35.9k|{
 8984|  35.9k|    T value;
 8985|  35.9k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  35.9k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  35.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  35.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  35.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  35.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.22k, False: 33.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.22k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.22k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.22k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.22k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.22k|    }                                                  \
  |  |  |  | 3667|  35.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  33.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  33.7k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  33.7k|    static_cast<    \
  |  |  929|  33.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  33.7k|    static_cast<    \
  |  |  929|  33.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  35.9k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   178k|    {
 2724|   178k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   178k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   178k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   178k|    {
 2705|   178k|        return decay_copy(t.begin());
 2706|   178k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1948|  3.63M|{
 1949|  3.63M|    return SCN_FWD(t);
  ------------------
  |  |  930|  3.63M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  3.63M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.10M|    {
 2781|  1.10M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.10M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.10M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.10M|    {
 2763|  1.10M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.10M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.10M|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJfEEEDav:
 5405|   311k|{
 5406|   311k|    detail::check_scan_arg_types<Args...>();
 5407|   311k|    return detail::scan_arg_store<Context, Args...>{};
 5408|   311k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEEC2Ev:
 5357|   311k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|   311k|    {
 5359|   311k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|   311k|    {
 5370|   311k|        return {detail::make_arg<
 5371|   311k|            kind, Context,
 5372|   311k|            mapped_type_constant<remove_cvref_t<A>,
 5373|   311k|                                 typename Context::char_type>::value>(args)...};
 5374|   311k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE16EfvEEPvRT2_:
 5179|   311k|{
 5180|   311k|    return make_value<Context>(value).ref_value;
 5181|   311k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEfEEDaRT0_:
 5129|   339k|{
 5130|   339k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|   339k|                                  needs_context_tag>) {
 5134|   339k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   339k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|   339k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERf:
 4968|   339k|    {                                                                        \
 4969|   339k|        return val;                                                          \
 4970|   339k|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8601|   251k|{
 8602|   251k|    auto buffer = make_scan_buffer(range);
 8603|       |
 8604|   251k|    auto result = vscan_impl(buffer, format, args);
 8605|   251k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   251k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 80.1k, False: 171k]
  |  |  ------------------
  ------------------
 8606|  80.1k|        return unexpected(result.error());
 8607|  80.1k|    }
 8608|   171k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   171k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8609|   251k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 4728|   551k|{
 4729|   551k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4730|       |
 4731|   551k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4732|   551k|                  "\n"
 4733|   551k|                  "Unsupported range type given as input to a scanning "
 4734|   551k|                  "function.\n"
 4735|   551k|                  "A range needs to have a character type (value type) "
 4736|   551k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4737|   551k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4738|   551k|                  "to be included.\n"
 4739|   551k|                  "See the scnlib documentation for more details.");
 4740|   551k|    static_assert(
 4741|   551k|        !std::is_same_v<T, custom_char_traits>,
 4742|   551k|        "\n"
 4743|   551k|        "Unsupported range type given as input to a scanning "
 4744|   551k|        "function.\n"
 4745|   551k|        "String types (std::basic_string, and std::basic_string_view) "
 4746|   551k|        "need to use std::char_traits. Strings with custom Traits are "
 4747|   551k|        "not supported.");
 4748|   551k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4749|   551k|                  "\n"
 4750|   551k|                  "Unsupported range type given as input to a scanning "
 4751|   551k|                  "function.\n"
 4752|   551k|                  "file_marker_found cannot be used as an "
 4753|   551k|                  "source range type to scn::scan.\n"
 4754|   551k|                  "To read from stdin, use scn::input or scn::prompt, "
 4755|   551k|                  "and do not provide an explicit source range, "
 4756|   551k|                  "or use scn::scan with a FILE* directly.");
 4757|   551k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4758|   551k|                  "\n"
 4759|   551k|                  "Unsupported range type given as input to a scanning "
 4760|   551k|                  "function.\n"
 4761|   551k|                  "In order to be scannable, a range needs to satisfy "
 4762|   551k|                  "`forward_range`. `input_range` is not sufficient.");
 4763|   551k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4764|   551k|                  "\n"
 4765|   551k|                  "Unsupported range type given as input to a scanning "
 4766|   551k|                  "function.\n"
 4767|   551k|                  "A range needs to model forward_range and have a valid "
 4768|   551k|                  "character type (char or wchar_t) to be scannable.\n"
 4769|   551k|                  "Examples of scannable ranges are std::string, "
 4770|   551k|                  "std::string_view, "
 4771|   551k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4772|   551k|                  "See the scnlib documentation for more details.");
 4773|       |
 4774|   551k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4775|   551k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 4667|   551k|{
 4668|   551k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 4669|   551k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4670|       |    }
 4671|       |    else {
 4672|       |        return invalid_char_type{};
 4673|       |    }
 4674|   551k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   551k|    {
 2855|   551k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   551k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   551k|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   551k|    {
 2836|   551k|        return t.data();
 2837|   551k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3228|   551k|    {
 3229|   551k|        return detail::to_address(ranges::begin(derived()));
 3230|   551k|    }
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  1.77M|{
  326|  1.77M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  1.77M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  1.77M|}
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  303|  1.77M|{
  304|  1.77M|    return p;
  305|  1.77M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   928k|    {
 2724|   928k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   928k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   928k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   928k|    {
 2705|   928k|        return decay_copy(t.begin());
 2706|   928k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3325|  19.2M|    {
 3326|  19.2M|        return m_iterator;
 3327|  19.2M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3184|   551k|    {
 3185|   551k|        return static_cast<const D&>(*this);
 3186|   551k|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|   551k|    {
 2930|   551k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|   551k|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|   551k|    {
 2896|   551k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|   551k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|   551k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3341|  2.46M|    {
 3342|  2.46M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3343|  2.46M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1473|   173k|        : base(unexpect, std::move(e.error())),
 1474|   173k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   173k|    {
 1476|   173k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|   173k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   173k|          m_has_value(false)
  446|   173k|    {
  447|   173k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   551k|    {
 1177|   551k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5932|   377k|{
 5933|       |    if constexpr (ranges::random_access_iterator<
 5934|   377k|                      ranges::iterator_t<SourceRange>>) {
 5935|   377k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5936|       |    }
 5937|       |    else {
 5938|       |        auto it = ranges::begin(source);
 5939|       |        while (n > 0) {
 5940|       |            --n;
 5941|       |            ++it;
 5942|       |        }
 5943|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5944|       |    }
 5945|   377k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.04M|    {
 2724|  1.04M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.04M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.04M|    {
 2705|  1.04M|        return decay_copy(t.begin());
 2706|  1.04M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 5919|   377k|{
 5920|   377k|    return ranges::end(source);
 5921|   377k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   377k|    {
 2781|   377k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   377k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   377k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   377k|    {
 2763|   377k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   377k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   377k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3329|  11.1M|    {
 3330|  11.1M|        return m_sentinel;
 3331|  11.1M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|   377k|        : base(std::in_place, std::forward<U>(val)),
 1428|   377k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   377k|    {
 1430|   377k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  435|   377k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   377k|    {
  437|   377k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7985|   155k|    {
 7986|   155k|        return m_str;
 7987|   155k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJfEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|   311k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|   311k|    {
 5436|   311k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE12arg_pointersEv:
 5388|   311k|    {
 5389|   311k|        return m_argptrs;
 5390|   311k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5486|  1.00M|        : m_desc(desc), m_builtin_values(data)
 5487|  1.00M|    {
 5488|  1.00M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|   155k|{
 8831|   155k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 53.4k, False: 102k]
  |  |  ------------------
  ------------------
 8832|  53.4k|        return unexpected(result.error());
 8833|  53.4k|    }
 8834|   102k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   102k|    static_cast<    \
  |  |  929|   102k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   102k|    static_cast<    \
  |  |  929|   102k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|   155k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1597|   551k|    {
 1598|   551k|        return has_value();
 1599|   551k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.10M|    {
  485|  1.10M|        return m_has_value;
  486|  1.10M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1603|   173k|    {
 1604|   173k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   173k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   173k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   173k|        return this->get_unexpected().error();
 1606|   173k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   173k|    {
  468|   173k|        return m_unexpected;
  469|   173k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  57.9k|        : base(unexpect, std::move(e.error())),
 1474|  57.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  57.9k|    {
 1476|  57.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  57.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  57.9k|          m_has_value(false)
  446|  57.9k|    {
  447|  57.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   170k|    {
 1177|   170k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1652|   342k|    {
 1653|   342k|        return value();
 1654|   342k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|   377k|    {
 1627|   377k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   377k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   377k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   377k|        return this->get_value();
 1629|   377k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   377k|    {
  451|   377k|        return m_value;
  452|   377k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2ES8_ONSt3__15tupleIJfEEE:
 5838|   112k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   112k|    static_cast<    \
  |  |  929|   112k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   112k|    static_cast<    \
  |  |  929|   112k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   112k|    {
 5840|   112k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5689|   377k|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|   377k|    static_cast<    \
  |  |  929|   377k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5690|   377k|    {
 5691|   377k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|   112k|        : base(std::in_place, std::forward<U>(val)),
 1428|   112k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   112k|    {
 1430|   112k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|   112k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   112k|    {
  437|   112k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE4argsEv:
 5383|   311k|    {
 5384|   311k|        return m_args;
 5385|   311k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3310|  6.90M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  6.90M|    static_cast<    \
  |  |  929|  6.90M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  6.90M|    static_cast<    \
  |  |  929|  6.90M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  6.90M|    {
 3312|  6.90M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7706|  1.00M|{
 7707|  1.00M|    return s;
 7708|  1.00M|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7678|  1.00M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|   155k|        : m_str(r.str)
 7981|   155k|    {
 7982|   155k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   170k|    {
 1598|   170k|        return has_value();
 1599|   170k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   282k|    {
  485|   282k|        return m_has_value;
  486|   282k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEptEv:
 1672|   112k|    {
 1673|   112k|        return &value();
 1674|   112k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|   112k|    {
 1627|   112k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   112k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   112k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   112k|        return this->get_value();
 1629|   112k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   112k|    {
  451|   112k|        return m_value;
  452|   112k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 5707|   377k|    {
 5708|   377k|        return ranges::begin(m_range);
 5709|   377k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8617|   251k|{
 8618|   251k|#if !SCN_DISABLE_LOCALE
 8619|   251k|    auto buffer = detail::make_scan_buffer(range);
 8620|       |
 8621|   251k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8622|   251k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8623|   251k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8624|       |
 8625|   251k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   251k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 80.1k, False: 171k]
  |  |  ------------------
  ------------------
 8626|  80.1k|        return unexpected(result.error());
 8627|  80.1k|    }
 8628|   171k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   171k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8629|       |#else
 8630|       |    static_assert(dependent_false<Locale>::value,
 8631|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8632|       |
 8633|       |    return {};
 8634|       |#endif
 8635|   251k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEfEENS0_14basic_scan_argIT_EERT0_:
 5164|  28.5k|{
 5165|  28.5k|    check_scan_arg_types<T>();
 5166|       |
 5167|  28.5k|    basic_scan_arg<Context> arg;
 5168|  28.5k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  28.5k|    arg.m_value = make_value<Context>(value);
 5170|  28.5k|    return arg;
 5171|  28.5k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5250|  1.10M|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8641|  48.6k|{
 8642|  48.6k|    auto buffer = detail::make_scan_buffer(range);
 8643|       |
 8644|  48.6k|    auto result = detail::vscan_value_impl(buffer, arg);
 8645|  48.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  48.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.3k, False: 35.3k]
  |  |  ------------------
  ------------------
 8646|  13.3k|        return unexpected(result.error());
 8647|  13.3k|    }
 8648|  35.3k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  35.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8649|  48.6k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1662|  35.3k|    {
 1663|  35.3k|        return std::move(value());
 1664|  35.3k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJdEEEDav:
 5405|   343k|{
 5406|   343k|    detail::check_scan_arg_types<Args...>();
 5407|   343k|    return detail::scan_arg_store<Context, Args...>{};
 5408|   343k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEEC2Ev:
 5357|   343k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|   343k|    {
 5359|   343k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|   343k|    {
 5370|   343k|        return {detail::make_arg<
 5371|   343k|            kind, Context,
 5372|   343k|            mapped_type_constant<remove_cvref_t<A>,
 5373|   343k|                                 typename Context::char_type>::value>(args)...};
 5374|   343k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE17EdvEEPvRT2_:
 5179|   343k|{
 5180|   343k|    return make_value<Context>(value).ref_value;
 5181|   343k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEdEEDaRT0_:
 5129|   377k|{
 5130|   377k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|   377k|                                  needs_context_tag>) {
 5134|   377k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   377k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|   377k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERd:
 4968|   377k|    {                                                                        \
 4969|   377k|        return val;                                                          \
 4970|   377k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7985|   171k|    {
 7986|   171k|        return m_str;
 7987|   171k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|   343k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|   343k|    {
 5436|   343k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12arg_pointersEv:
 5388|   343k|    {
 5389|   343k|        return m_argptrs;
 5390|   343k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|   171k|{
 8831|   171k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   171k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 53.4k, False: 118k]
  |  |  ------------------
  ------------------
 8832|  53.4k|        return unexpected(result.error());
 8833|  53.4k|    }
 8834|   118k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   118k|    static_cast<    \
  |  |  929|   118k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   118k|    static_cast<    \
  |  |  929|   118k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|   171k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  57.9k|        : base(unexpect, std::move(e.error())),
 1474|  57.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  57.9k|    {
 1476|  57.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  57.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  57.9k|          m_has_value(false)
  446|  57.9k|    {
  447|  57.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   188k|    {
 1177|   188k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2ES8_ONSt3__15tupleIJdEEE:
 5838|   131k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   131k|    static_cast<    \
  |  |  929|   131k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   131k|    static_cast<    \
  |  |  929|   131k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   131k|    {
 5840|   131k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|   131k|        : base(std::in_place, std::forward<U>(val)),
 1428|   131k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   131k|    {
 1430|   131k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|   131k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   131k|    {
  437|   131k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE4argsEv:
 5383|   343k|    {
 5384|   343k|        return m_args;
 5385|   343k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|   171k|        : m_str(r.str)
 7981|   171k|    {
 7982|   171k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   188k|    {
 1598|   188k|        return has_value();
 1599|   188k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   319k|    {
  485|   319k|        return m_has_value;
  486|   319k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEptEv:
 1672|   131k|    {
 1673|   131k|        return &value();
 1674|   131k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|   131k|    {
 1627|   131k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   131k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   131k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   131k|        return this->get_value();
 1629|   131k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   131k|    {
  451|   131k|        return m_value;
  452|   131k|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEdEENS0_14basic_scan_argIT_EERT0_:
 5164|  33.9k|{
 5165|  33.9k|    check_scan_arg_types<T>();
 5166|       |
 5167|  33.9k|    basic_scan_arg<Context> arg;
 5168|  33.9k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  33.9k|    arg.m_value = make_value<Context>(value);
 5170|  33.9k|    return arg;
 5171|  33.9k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJeEEEDav:
 5405|   349k|{
 5406|   349k|    detail::check_scan_arg_types<Args...>();
 5407|   349k|    return detail::scan_arg_store<Context, Args...>{};
 5408|   349k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEEC2Ev:
 5357|   349k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|   349k|    {
 5359|   349k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|   349k|    {
 5370|   349k|        return {detail::make_arg<
 5371|   349k|            kind, Context,
 5372|   349k|            mapped_type_constant<remove_cvref_t<A>,
 5373|   349k|                                 typename Context::char_type>::value>(args)...};
 5374|   349k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE18EevEEPvRT2_:
 5179|   349k|{
 5180|   349k|    return make_value<Context>(value).ref_value;
 5181|   349k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEeEEDaRT0_:
 5129|   384k|{
 5130|   384k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|   384k|                                  needs_context_tag>) {
 5134|   384k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   384k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|   384k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERe:
 4968|   384k|    {                                                                        \
 4969|   384k|        return val;                                                          \
 4970|   384k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7985|   174k|    {
 7986|   174k|        return m_str;
 7987|   174k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJeEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|   349k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|   349k|    {
 5436|   349k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE12arg_pointersEv:
 5388|   349k|    {
 5389|   349k|        return m_argptrs;
 5390|   349k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|   174k|{
 8831|   174k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   174k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 53.4k, False: 121k]
  |  |  ------------------
  ------------------
 8832|  53.4k|        return unexpected(result.error());
 8833|  53.4k|    }
 8834|   121k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   121k|    static_cast<    \
  |  |  929|   121k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   121k|    static_cast<    \
  |  |  929|   121k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|   174k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  57.9k|        : base(unexpect, std::move(e.error())),
 1474|  57.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  57.9k|    {
 1476|  57.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  57.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  57.9k|          m_has_value(false)
  446|  57.9k|    {
  447|  57.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   192k|    {
 1177|   192k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2ES8_ONSt3__15tupleIJeEEE:
 5838|   134k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   134k|    static_cast<    \
  |  |  929|   134k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   134k|    static_cast<    \
  |  |  929|   134k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   134k|    {
 5840|   134k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|   134k|        : base(std::in_place, std::forward<U>(val)),
 1428|   134k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   134k|    {
 1430|   134k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|   134k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   134k|    {
  437|   134k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE4argsEv:
 5383|   349k|    {
 5384|   349k|        return m_args;
 5385|   349k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|   174k|        : m_str(r.str)
 7981|   174k|    {
 7982|   174k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   192k|    {
 1598|   192k|        return has_value();
 1599|   192k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   326k|    {
  485|   326k|        return m_has_value;
  486|   326k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEptEv:
 1672|   134k|    {
 1673|   134k|        return &value();
 1674|   134k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|   134k|    {
 1627|   134k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   134k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   134k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   134k|        return this->get_value();
 1629|   134k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   134k|    {
  451|   134k|        return m_value;
  452|   134k|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEeEENS0_14basic_scan_argIT_EERT0_:
 5164|  34.8k|{
 5165|  34.8k|    check_scan_arg_types<T>();
 5166|       |
 5167|  34.8k|    basic_scan_arg<Context> arg;
 5168|  34.8k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  34.8k|    arg.m_value = make_value<Context>(value);
 5170|  34.8k|    return arg;
 5171|  34.8k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   173k|    {
 2724|   173k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   173k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   173k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   173k|    {
 2705|   173k|        return decay_copy(t.begin());
 2706|   173k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 1948|  10.8M|{
 1949|  10.8M|    return SCN_FWD(t);
  ------------------
  |  |  930|  10.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  10.8M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.10M|    {
 2781|  1.10M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.10M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.10M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.10M|    {
 2763|  1.10M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.10M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.10M|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8601|   251k|{
 8602|   251k|    auto buffer = make_scan_buffer(range);
 8603|       |
 8604|   251k|    auto result = vscan_impl(buffer, format, args);
 8605|   251k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   251k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 80.1k, False: 170k]
  |  |  ------------------
  ------------------
 8606|  80.1k|        return unexpected(result.error());
 8607|  80.1k|    }
 8608|   170k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   170k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8609|   251k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4728|   550k|{
 4729|   550k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4730|       |
 4731|   550k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4732|   550k|                  "\n"
 4733|   550k|                  "Unsupported range type given as input to a scanning "
 4734|   550k|                  "function.\n"
 4735|   550k|                  "A range needs to have a character type (value type) "
 4736|   550k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4737|   550k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4738|   550k|                  "to be included.\n"
 4739|   550k|                  "See the scnlib documentation for more details.");
 4740|   550k|    static_assert(
 4741|   550k|        !std::is_same_v<T, custom_char_traits>,
 4742|   550k|        "\n"
 4743|   550k|        "Unsupported range type given as input to a scanning "
 4744|   550k|        "function.\n"
 4745|   550k|        "String types (std::basic_string, and std::basic_string_view) "
 4746|   550k|        "need to use std::char_traits. Strings with custom Traits are "
 4747|   550k|        "not supported.");
 4748|   550k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4749|   550k|                  "\n"
 4750|   550k|                  "Unsupported range type given as input to a scanning "
 4751|   550k|                  "function.\n"
 4752|   550k|                  "file_marker_found cannot be used as an "
 4753|   550k|                  "source range type to scn::scan.\n"
 4754|   550k|                  "To read from stdin, use scn::input or scn::prompt, "
 4755|   550k|                  "and do not provide an explicit source range, "
 4756|   550k|                  "or use scn::scan with a FILE* directly.");
 4757|   550k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4758|   550k|                  "\n"
 4759|   550k|                  "Unsupported range type given as input to a scanning "
 4760|   550k|                  "function.\n"
 4761|   550k|                  "In order to be scannable, a range needs to satisfy "
 4762|   550k|                  "`forward_range`. `input_range` is not sufficient.");
 4763|   550k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4764|   550k|                  "\n"
 4765|   550k|                  "Unsupported range type given as input to a scanning "
 4766|   550k|                  "function.\n"
 4767|   550k|                  "A range needs to model forward_range and have a valid "
 4768|   550k|                  "character type (char or wchar_t) to be scannable.\n"
 4769|   550k|                  "Examples of scannable ranges are std::string, "
 4770|   550k|                  "std::string_view, "
 4771|   550k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4772|   550k|                  "See the scnlib documentation for more details.");
 4773|       |
 4774|   550k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4775|   550k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4698|   550k|{
 4699|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 4700|       |        return file_marker_found{};
 4701|       |    }
 4702|       |    else if constexpr (!ranges::forward_range<Range>) {
 4703|       |        if constexpr (ranges::range<Range>) {
 4704|       |            return insufficient_range{};
 4705|       |        }
 4706|       |        else {
 4707|       |            return invalid_input_range{};
 4708|       |        }
 4709|       |    }
 4710|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 4711|       |        return invalid_char_type{};
 4712|       |    }
 4713|   550k|    else {
 4714|   550k|        return make_forward_scan_buffer(r);
 4715|   550k|    }
 4716|   550k|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4532|   550k|{
 4533|   550k|    return basic_scan_forward_buffer_impl(range);
 4534|   550k|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4417|   550k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  930|   550k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4418|   550k|          m_cursor(ranges::begin(*m_range))
 4419|   550k|    {
 4420|   550k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4389|   550k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4390|   550k|    {
 4391|   550k|    }
_ZN3scn2v36detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4157|   550k|        : m_current_view(sv), m_is_contiguous(false)
 4158|   550k|    {
 4159|   550k|    }
_ZN3scn2v36detail17basic_scan_bufferIwED2Ev:
 4073|   550k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   927k|    {
 2724|   927k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   927k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   927k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   927k|    {
 2705|   927k|        return decay_copy(t.begin());
 2706|   927k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3325|  1.30M|    {
 3326|  1.30M|        return m_iterator;
 3327|  1.30M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4423|  2.76M|    {
 4424|  2.76M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4424:13): [True: 180k, False: 2.58M]
  ------------------
 4425|   180k|            return false;
 4426|   180k|        }
 4427|  2.58M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4428|  2.58M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  2.58M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.58M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4429|  2.58M|        }
 4430|  2.58M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4430:13): [True: 2.03M, False: 549k]
  ------------------
 4431|  2.03M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4432|  2.03M|                                          this->m_current_view.begin(),
 4433|  2.03M|                                          this->m_current_view.end());
 4434|  2.03M|        }
 4435|  2.58M|        m_latest = *m_cursor;
 4436|  2.58M|        ++m_cursor;
 4437|  2.58M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4438|  2.58M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4439|  2.58M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  2.58M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.58M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4440|  2.58M|        }
 4441|  2.58M|        return true;
 4442|  2.76M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  7.92M|    {
 2781|  7.92M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  7.92M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  7.92M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  7.92M|    {
 2763|  7.92M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  7.92M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  7.92M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3329|  8.29M|    {
 3330|  8.29M|        return m_sentinel;
 3331|  8.29M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE4syncEl:
 4078|   550k|    {
 4079|   550k|        SCN_UNUSED(position);
  ------------------
  |  |  909|   550k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4080|   550k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1473|   173k|        : base(unexpect, std::move(e.error())),
 1474|   173k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   173k|    {
 1476|   173k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  444|   173k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   173k|          m_has_value(false)
  446|   173k|    {
  447|   173k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   550k|    {
 1177|   550k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5932|   377k|{
 5933|       |    if constexpr (ranges::random_access_iterator<
 5934|   377k|                      ranges::iterator_t<SourceRange>>) {
 5935|   377k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5936|       |    }
 5937|       |    else {
 5938|       |        auto it = ranges::begin(source);
 5939|       |        while (n > 0) {
 5940|       |            --n;
 5941|       |            ++it;
 5942|       |        }
 5943|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5944|       |    }
 5945|   377k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   377k|    {
 2724|   377k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   377k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   377k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   377k|    {
 2705|   377k|        return decay_copy(t.begin());
 2706|   377k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 5919|   377k|{
 5920|   377k|    return ranges::end(source);
 5921|   377k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   377k|    {
 2781|   377k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   377k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   377k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   377k|    {
 2763|   377k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   377k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   377k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1427|   377k|        : base(std::in_place, std::forward<U>(val)),
 1428|   377k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   377k|    {
 1430|   377k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  435|   377k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   377k|    {
  437|   377k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7985|   155k|    {
 7986|   155k|        return m_str;
 7987|   155k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8830|   155k|{
 8831|   155k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 53.4k, False: 102k]
  |  |  ------------------
  ------------------
 8832|  53.4k|        return unexpected(result.error());
 8833|  53.4k|    }
 8834|   102k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   102k|    static_cast<    \
  |  |  929|   102k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   102k|    static_cast<    \
  |  |  929|   102k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|   155k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1597|   550k|    {
 1598|   550k|        return has_value();
 1599|   550k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.10M|    {
  485|  1.10M|        return m_has_value;
  486|  1.10M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1603|   173k|    {
 1604|   173k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   173k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   173k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   173k|        return this->get_unexpected().error();
 1606|   173k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   173k|    {
  468|   173k|        return m_unexpected;
  469|   173k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  57.9k|        : base(unexpect, std::move(e.error())),
 1474|  57.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  57.9k|    {
 1476|  57.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  57.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  57.9k|          m_has_value(false)
  446|  57.9k|    {
  447|  57.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   169k|    {
 1177|   169k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1652|   341k|    {
 1653|   341k|        return value();
 1654|   341k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1626|   377k|    {
 1627|   377k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   377k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   377k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   377k|        return this->get_value();
 1629|   377k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   377k|    {
  451|   377k|        return m_value;
  452|   377k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2ESE_ONS6_5tupleIJfEEE:
 5838|   111k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   111k|    static_cast<    \
  |  |  929|   111k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   111k|    static_cast<    \
  |  |  929|   111k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   111k|    {
 5840|   111k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2EOSF_:
 5689|   377k|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|   377k|    static_cast<    \
  |  |  929|   377k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5690|   377k|    {
 5691|   377k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|   111k|        : base(std::in_place, std::forward<U>(val)),
 1428|   111k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   111k|    {
 1430|   111k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|   111k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   111k|    {
  437|   111k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3310|   927k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   927k|    static_cast<    \
  |  |  929|   927k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   927k|    static_cast<    \
  |  |  929|   927k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|   927k|    {
 3312|   927k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|   155k|        : m_str(r.str)
 7981|   155k|    {
 7982|   155k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   169k|    {
 1598|   169k|        return has_value();
 1599|   169k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   281k|    {
  485|   281k|        return m_has_value;
  486|   281k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1672|   111k|    {
 1673|   111k|        return &value();
 1674|   111k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|   111k|    {
 1627|   111k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   111k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   111k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   111k|        return this->get_value();
 1629|   111k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   111k|    {
  451|   111k|        return m_value;
  452|   111k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 5707|   377k|    {
 5708|   377k|        return ranges::begin(m_range);
 5709|   377k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8617|   251k|{
 8618|   251k|#if !SCN_DISABLE_LOCALE
 8619|   251k|    auto buffer = detail::make_scan_buffer(range);
 8620|       |
 8621|   251k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8622|   251k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8623|   251k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8624|       |
 8625|   251k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   251k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 80.1k, False: 170k]
  |  |  ------------------
  ------------------
 8626|  80.1k|        return unexpected(result.error());
 8627|  80.1k|    }
 8628|   170k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   170k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8629|       |#else
 8630|       |    static_assert(dependent_false<Locale>::value,
 8631|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8632|       |
 8633|       |    return {};
 8634|       |#endif
 8635|   251k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8641|  48.6k|{
 8642|  48.6k|    auto buffer = detail::make_scan_buffer(range);
 8643|       |
 8644|  48.6k|    auto result = detail::vscan_value_impl(buffer, arg);
 8645|  48.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  48.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.3k, False: 35.2k]
  |  |  ------------------
  ------------------
 8646|  13.3k|        return unexpected(result.error());
 8647|  13.3k|    }
 8648|  35.2k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  35.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8649|  48.6k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSJ_v:
 1662|  35.2k|    {
 1663|  35.2k|        return std::move(value());
 1664|  35.2k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7985|   171k|    {
 7986|   171k|        return m_str;
 7987|   171k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8830|   171k|{
 8831|   171k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   171k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 53.4k, False: 118k]
  |  |  ------------------
  ------------------
 8832|  53.4k|        return unexpected(result.error());
 8833|  53.4k|    }
 8834|   118k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   118k|    static_cast<    \
  |  |  929|   118k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   118k|    static_cast<    \
  |  |  929|   118k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|   171k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  57.9k|        : base(unexpect, std::move(e.error())),
 1474|  57.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  57.9k|    {
 1476|  57.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  57.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  57.9k|          m_has_value(false)
  446|  57.9k|    {
  447|  57.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   188k|    {
 1177|   188k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2ESE_ONS6_5tupleIJdEEE:
 5838|   130k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   130k|    static_cast<    \
  |  |  929|   130k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   130k|    static_cast<    \
  |  |  929|   130k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   130k|    {
 5840|   130k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|   130k|        : base(std::in_place, std::forward<U>(val)),
 1428|   130k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   130k|    {
 1430|   130k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|   130k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   130k|    {
  437|   130k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|   171k|        : m_str(r.str)
 7981|   171k|    {
 7982|   171k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   188k|    {
 1598|   188k|        return has_value();
 1599|   188k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   319k|    {
  485|   319k|        return m_has_value;
  486|   319k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1672|   130k|    {
 1673|   130k|        return &value();
 1674|   130k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|   130k|    {
 1627|   130k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   130k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   130k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   130k|        return this->get_value();
 1629|   130k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   130k|    {
  451|   130k|        return m_value;
  452|   130k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7985|   174k|    {
 7986|   174k|        return m_str;
 7987|   174k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8830|   174k|{
 8831|   174k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   174k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 53.4k, False: 121k]
  |  |  ------------------
  ------------------
 8832|  53.4k|        return unexpected(result.error());
 8833|  53.4k|    }
 8834|   121k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   121k|    static_cast<    \
  |  |  929|   121k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   121k|    static_cast<    \
  |  |  929|   121k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|   174k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  57.9k|        : base(unexpect, std::move(e.error())),
 1474|  57.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  57.9k|    {
 1476|  57.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  57.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  57.9k|          m_has_value(false)
  446|  57.9k|    {
  447|  57.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   192k|    {
 1177|   192k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2ESE_ONS6_5tupleIJeEEE:
 5838|   134k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   134k|    static_cast<    \
  |  |  929|   134k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   134k|    static_cast<    \
  |  |  929|   134k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   134k|    {
 5840|   134k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|   134k|        : base(std::in_place, std::forward<U>(val)),
 1428|   134k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   134k|    {
 1430|   134k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|   134k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   134k|    {
  437|   134k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|   174k|        : m_str(r.str)
 7981|   174k|    {
 7982|   174k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   192k|    {
 1598|   192k|        return has_value();
 1599|   192k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   326k|    {
  485|   326k|        return m_has_value;
  486|   326k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1672|   134k|    {
 1673|   134k|        return &value();
 1674|   134k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|   134k|    {
 1627|   134k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   134k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   134k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   134k|        return this->get_value();
 1629|   134k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   134k|    {
  451|   134k|        return m_value;
  452|   134k|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3562|  3.58M|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3563|  3.58M|    {
 3564|  3.58M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  3.58M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3565|  3.58M|    }
_ZNK3scn2v310scan_errorcvbEv:
 3569|  14.8M|    {
 3570|  14.8M|        return m_code == good;
 3571|  14.8M|    }
_ZNK3scn2v310scan_error4codeEv:
 3580|   400k|    {
 3581|   400k|        return m_code;
 3582|   400k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3325|  50.8M|    {
 3326|  50.8M|        return m_iterator;
 3327|  50.8M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3325|  22.9M|    {
 3326|  22.9M|        return m_iterator;
 3327|  22.9M|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6269|  2.31M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6313|  1.69M|    {
 6314|  1.69M|        m_specs.type = type;
 6315|  1.69M|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6386|  2.31M|    {
 6387|  2.31M|        return static_cast<bool>(m_error);
 6388|  2.31M|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3604|   400k|{
 3605|   400k|    return a.code() == b;
 3606|   400k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3608|   400k|{
 3609|   400k|    return !(a == b);
 3610|   400k|}
_ZN3scn2v36detail11is_cp_spaceEDi:
 4042|  4.68M|{
 4043|       |    // Pattern_White_Space property
 4044|  4.68M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4044:13): [True: 4.47M, False: 204k]
  |  Branch (4044:27): [True: 852k, False: 3.62M]
  ------------------
 4045|  4.68M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4045:12): [True: 52.1k, False: 3.77M]
  ------------------
 4046|  4.68M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4046:12): [True: 47.5k, False: 3.73M]
  ------------------
 4047|  4.68M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4047:12): [True: 3.93k, False: 3.72M]
  ------------------
 4048|  4.68M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4048:12): [True: 19.7k, False: 3.70M]
  ------------------
 4049|  4.68M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4049:12): [True: 894k, False: 2.81M]
  ------------------
 4050|  4.68M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4050:12): [True: 154, False: 2.81M]
  ------------------
 4051|  4.68M|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7073|   621k|{
 7074|   621k|    switch (type) {
 7075|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7075:9): [True: 0, False: 621k]
  ------------------
 7076|      0|            return arg_type_category::none;
 7077|       |
 7078|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7078:9): [True: 0, False: 621k]
  ------------------
 7079|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7079:9): [True: 0, False: 621k]
  ------------------
 7080|      0|        case arg_type::int_type:
  ------------------
  |  Branch (7080:9): [True: 0, False: 621k]
  ------------------
 7081|      0|        case arg_type::long_type:
  ------------------
  |  Branch (7081:9): [True: 0, False: 621k]
  ------------------
 7082|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (7082:9): [True: 0, False: 621k]
  ------------------
 7083|      0|            return arg_type_category::integer;
 7084|       |
 7085|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7085:9): [True: 0, False: 621k]
  ------------------
 7086|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7086:9): [True: 0, False: 621k]
  ------------------
 7087|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (7087:9): [True: 0, False: 621k]
  ------------------
 7088|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (7088:9): [True: 0, False: 621k]
  ------------------
 7089|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (7089:9): [True: 0, False: 621k]
  ------------------
 7090|      0|            return arg_type_category::unsigned_integer;
 7091|       |
 7092|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7092:9): [True: 0, False: 621k]
  ------------------
 7093|      0|            return arg_type_category::pointer;
 7094|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7094:9): [True: 0, False: 621k]
  ------------------
 7095|      0|            return arg_type_category::boolean;
 7096|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7096:9): [True: 0, False: 621k]
  ------------------
 7097|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7097:9): [True: 0, False: 621k]
  ------------------
 7098|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7098:9): [True: 0, False: 621k]
  ------------------
 7099|      0|            return arg_type_category::character;
 7100|       |
 7101|   194k|        case arg_type::float_type:
  ------------------
  |  Branch (7101:9): [True: 194k, False: 427k]
  ------------------
 7102|   406k|        case arg_type::double_type:
  ------------------
  |  Branch (7102:9): [True: 211k, False: 410k]
  ------------------
 7103|   621k|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7103:9): [True: 215k, False: 406k]
  ------------------
 7104|   621k|            return arg_type_category::floating;
 7105|       |
 7106|      0|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7106:9): [True: 0, False: 621k]
  ------------------
 7107|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7107:9): [True: 0, False: 621k]
  ------------------
 7108|      0|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7108:9): [True: 0, False: 621k]
  ------------------
 7109|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7109:9): [True: 0, False: 621k]
  ------------------
 7110|      0|            return arg_type_category::string;
 7111|       |
 7112|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7112:9): [True: 0, False: 621k]
  ------------------
 7113|      0|            return arg_type_category::custom;
 7114|       |
 7115|      0|            SCN_CLANG_PUSH
 7116|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7117|      0|        default:
  ------------------
  |  Branch (7117:9): [True: 0, False: 621k]
  ------------------
 7118|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7119|   621k|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7120|   621k|            SCN_CLANG_POP
 7121|   621k|    }
 7122|       |
 7123|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7124|   621k|}
_ZN3scn2v36ranges6detail5size_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|  2.69M|    {
 2896|  2.69M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  2.69M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|  2.69M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSE_:
 2929|  2.69M|    {
 2930|  2.69M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|  2.69M|    }
_ZN3scn2v36ranges6detail6ssize_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISE_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSE_:
 2952|  2.69M|    {
 2953|  2.69M|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 2954|  2.69M|    }
_ZNK3scn2v36ranges6detail6ssize_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSE_:
 2961|  2.69M|    {
 2962|  2.69M|        return fn::impl(std::forward<T>(t));
 2963|  2.69M|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA20_KcEEEDaDpOT_:
 3649|    994|{
 3650|    994|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|    994|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|    994|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
 3649|  2.49k|{
 3650|  2.49k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  2.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  2.49k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA38_KcEEEDaDpOT_:
 3649|  28.7k|{
 3650|  28.7k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  28.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  28.7k|}
_ZN3scn2v36detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7203|  2.31M|{
 7204|  2.31M|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7204:9): [True: 1.69M, False: 621k]
  ------------------
 7205|  2.31M|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (7205:10): [True: 0, False: 1.69M]
  ------------------
 7206|  1.69M|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (7206:10): [True: 0, False: 1.69M]
  ------------------
 7207|      0|        SCN_UNLIKELY_ATTR
 7208|      0|        return handler.on_error("Invalid type specifier for float type");
 7209|      0|    }
 7210|  2.31M|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4202|   318M|    {
 4203|   318M|        assert(m_begin);
 4204|   318M|        return m_end == nullptr;
 4205|   318M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3710|   848k|{
 3711|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3712|       |                                          const CharT*, const CharT*>) {
 3713|       |        return {first, last};
 3714|       |    }
 3715|   848k|    else {
 3716|   848k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3717|   848k|    }
 3718|   848k|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4219|  4.24M|    {
 4220|  4.24M|        if (!stores_parent()) {
  ------------------
  |  Branch (4220:13): [True: 0, False: 4.24M]
  ------------------
 4221|      0|            return make_string_view_from_pointers(
 4222|      0|                static_cast<const CharT*>(m_begin) + position(),
 4223|      0|                static_cast<const CharT*>(m_end));
 4224|      0|        }
 4225|  4.24M|        return parent()->get_segment_starting_at(position());
 4226|  4.24M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4213|   177M|    {
 4214|   177M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|   177M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   177M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4215|   177M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4216|   177M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4108|  4.24M|    {
 4109|  4.24M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  4.24M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.83M, False: 2.40M]
  |  |  ------------------
  ------------------
 4110|  4.24M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4111|  1.83M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4112|  1.83M|        }
 4113|  2.40M|        const auto start = pos - m_putback_buffer.size();
 4114|  2.40M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|  2.40M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.40M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4115|  2.40M|        return m_current_view.substr(start);
 4116|  2.40M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4208|  2.96M|    {
 4209|  2.96M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  2.96M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.96M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4210|  2.96M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4211|  2.96M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4197|  7.80M|    {
 4198|  7.80M|        return m_position;
 4199|  7.80M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE13is_contiguousEv:
 4130|  3.39M|    {
 4131|  3.39M|        return m_is_contiguous;
 4132|  3.39M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4202|  73.6M|    {
 4203|  73.6M|        assert(m_begin);
 4204|  73.6M|        return m_end == nullptr;
 4205|  73.6M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3710|   366k|{
 3711|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3712|       |                                          const CharT*, const CharT*>) {
 3713|       |        return {first, last};
 3714|       |    }
 3715|   366k|    else {
 3716|   366k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3717|   366k|    }
 3718|   366k|}
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4219|  1.31M|    {
 4220|  1.31M|        if (!stores_parent()) {
  ------------------
  |  Branch (4220:13): [True: 0, False: 1.31M]
  ------------------
 4221|      0|            return make_string_view_from_pointers(
 4222|      0|                static_cast<const CharT*>(m_begin) + position(),
 4223|      0|                static_cast<const CharT*>(m_end));
 4224|      0|        }
 4225|  1.31M|        return parent()->get_segment_starting_at(position());
 4226|  1.31M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4213|  39.4M|    {
 4214|  39.4M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  39.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  39.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4215|  39.4M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4216|  39.4M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4108|  1.31M|    {
 4109|  1.31M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  1.31M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 744k, False: 565k]
  |  |  ------------------
  ------------------
 4110|  1.31M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4111|   744k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4112|   744k|        }
 4113|   565k|        const auto start = pos - m_putback_buffer.size();
 4114|   565k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|   565k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   565k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4115|   565k|        return m_current_view.substr(start);
 4116|   565k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4208|  1.44M|    {
 4209|  1.44M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  1.44M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.44M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4210|  1.44M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4211|  1.44M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4197|  2.88M|    {
 4198|  2.88M|        return m_position;
 4199|  2.88M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE13is_contiguousEv:
 4130|  1.65M|    {
 4131|  1.65M|        return m_is_contiguous;
 4132|  1.65M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3179|  4.42M|    {
 3180|  4.42M|        return static_cast<D&>(*this);
 3181|  4.42M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3220|  4.42M|    {
 3221|  4.42M|        return detail::to_address(ranges::begin(derived()));
 3222|  4.42M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3179|   469k|    {
 3180|   469k|        return static_cast<D&>(*this);
 3181|   469k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3220|   469k|    {
 3221|   469k|        return detail::to_address(ranges::begin(derived()));
 3222|   469k|    }
_ZNK3scn2v318basic_scan_contextIcE5rangeEv:
 8179|   813k|    {
 8180|   813k|        return ranges::subrange{begin(), end()};
 8181|   813k|    }
_ZNK3scn2v318basic_scan_contextIcE5beginEv:
 8163|  2.37M|    {
 8164|  2.37M|        return m_current;
 8165|  2.37M|    }
_ZNK3scn2v318basic_scan_contextIcE3endEv:
 8171|   813k|    {
 8172|   813k|        return ranges::default_sentinel;
 8173|   813k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3310|  12.3M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  12.3M|    static_cast<    \
  |  |  929|  12.3M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  12.3M|    static_cast<    \
  |  |  929|  12.3M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  12.3M|    {
 3312|  12.3M|    }
_ZN3scn2v36detail10locale_refC2Ev:
 8001|  4.92M|    constexpr locale_ref() = default;
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  1.13M|    {
 1837|  1.13M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.13M|                                            std::forward<F>(f));
 1839|  1.13M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|  1.13M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.13M|    else {
 1333|  1.13M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.13M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.13M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.11M, False: 19.0k]
  |  |  ------------------
  ------------------
 1335|  1.13M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.13M|                   : result(unexpect,
 1337|  19.0k|                            trivial_invoke(std::forward<F>(f),
 1338|  19.0k|                                           std::forward<Exp>(exp).error()));
 1339|  1.13M|    }
 1340|  1.13M|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  11.9M|    {
  485|  11.9M|        return m_has_value;
  486|  11.9M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|  4.04M|    {
 1663|  4.04M|        return std::move(value());
 1664|  4.04M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|  4.64M|    {
 1627|  4.64M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.64M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.64M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.64M|        return this->get_value();
 1629|  4.64M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  4.64M|    {
  451|  4.64M|        return m_value;
  452|  4.64M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1427|  4.98M|        : base(std::in_place, std::forward<U>(val)),
 1428|  4.98M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  4.98M|    {
 1430|  4.98M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  4.98M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  4.98M|    {
  437|  4.98M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  6.38M|    {
 1177|  6.38M|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|  42.2k|{
 1211|  42.2k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  42.2k|}
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  54.6k|    {
 1614|  54.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  54.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  54.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  54.6k|        return std::move(this->get_unexpected().error());
 1616|  54.6k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  73.7k|    {
  468|  73.7k|        return m_unexpected;
  469|  73.7k|    }
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  360|   426k|    {
  361|   426k|        return m_unexpected;
  362|   426k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1483|  1.12M|        : base(unexpect, std::forward<Args>(args)...),
 1484|  1.12M|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  1.12M|    {
 1486|  1.12M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  1.33M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.33M|          m_has_value(false)
  446|  1.33M|    {
  447|  1.33M|    }
_ZNK3scn2v318basic_scan_contextIwE5rangeEv:
 8179|   404k|    {
 8180|   404k|        return ranges::subrange{begin(), end()};
 8181|   404k|    }
_ZNK3scn2v318basic_scan_contextIwE5beginEv:
 8163|  1.08M|    {
 8164|  1.08M|        return m_current;
 8165|  1.08M|    }
_ZNK3scn2v318basic_scan_contextIwE3endEv:
 8171|   404k|    {
 8172|   404k|        return ranges::default_sentinel;
 8173|   404k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3310|  5.57M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  5.57M|    static_cast<    \
  |  |  929|  5.57M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  5.57M|    static_cast<    \
  |  |  929|  5.57M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  5.57M|    {
 3312|  5.57M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|   550k|    {
 1837|   550k|        return detail::transform_error_impl(std::move(*this),
 1838|   550k|                                            std::forward<F>(f));
 1839|   550k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|   550k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   550k|    else {
 1333|   550k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   550k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   550k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 547k, False: 3.64k]
  |  |  ------------------
  ------------------
 1335|   550k|                   ? result(*std::forward<Exp>(exp))
 1336|   550k|                   : result(unexpect,
 1337|  3.64k|                            trivial_invoke(std::forward<F>(f),
 1338|  3.64k|                                           std::forward<Exp>(exp).error()));
 1339|   550k|    }
 1340|   550k|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  5.27M|    {
  485|  5.27M|        return m_has_value;
  486|  5.27M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|  1.93M|    {
 1663|  1.93M|        return std::move(value());
 1664|  1.93M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|  1.95M|    {
 1627|  1.95M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.95M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.95M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.95M|        return this->get_value();
 1629|  1.95M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  1.95M|    {
  451|  1.95M|        return m_value;
  452|  1.95M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1427|  1.95M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.95M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.95M|    {
 1430|  1.95M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  1.95M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.95M|    {
  437|  1.95M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.14M|    {
 1177|  3.14M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  58.0k|    {
 1614|  58.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  58.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  58.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  58.0k|        return std::move(this->get_unexpected().error());
 1616|  58.0k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  60.0k|    {
  468|  60.0k|        return m_unexpected;
  469|  60.0k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1483|   714k|        : base(unexpect, std::forward<Args>(args)...),
 1484|   714k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|   714k|    {
 1486|   714k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  1.19M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.19M|          m_has_value(false)
  446|  1.19M|    {
  447|  1.19M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  345|   152k|        : m_unexpected(std::forward<Err>(e))
  346|   152k|    {
  347|   152k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   152k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   152k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1473|   192k|        : base(unexpect, std::move(e.error())),
 1474|   192k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   192k|    {
 1476|   192k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  444|  1.14M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.14M|          m_has_value(false)
  446|  1.14M|    {
  447|  1.14M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  5.56M|    {
 1177|  5.56M|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1427|  4.36M|        : base(std::in_place, std::forward<U>(val)),
 1428|  4.36M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  4.36M|    {
 1430|  4.36M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  4.36M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  4.36M|    {
  437|  4.36M|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1597|  6.52M|    {
 1598|  6.52M|        return has_value();
 1599|  6.52M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  484|  10.2M|    {
  485|  10.2M|        return m_has_value;
  486|  10.2M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1603|   230k|    {
 1604|   230k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   230k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   230k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   230k|        return this->get_unexpected().error();
 1606|   230k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   230k|    {
  468|   230k|        return m_unexpected;
  469|   230k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1662|  2.81M|    {
 1663|  2.81M|        return std::move(value());
 1664|  2.81M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1626|  3.48M|    {
 1627|  3.48M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.48M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.48M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.48M|        return this->get_value();
 1629|  3.48M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  450|  3.48M|    {
  451|  3.48M|        return m_value;
  452|  3.48M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1473|   386k|        : base(unexpect, std::move(e.error())),
 1474|   386k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   386k|    {
 1476|   386k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  444|  1.01M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.01M|          m_has_value(false)
  446|  1.01M|    {
  447|  1.01M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.14M|    {
 1177|  3.14M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1427|  2.13M|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.13M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.13M|    {
 1430|  2.13M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  2.13M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.13M|    {
  437|  2.13M|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1597|  3.69M|    {
 1598|  3.69M|        return has_value();
 1599|  3.69M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  484|  5.82M|    {
  485|  5.82M|        return m_has_value;
  486|  5.82M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1603|   464k|    {
 1604|   464k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   464k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   464k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   464k|        return this->get_unexpected().error();
 1606|   464k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   464k|    {
  468|   464k|        return m_unexpected;
  469|   464k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1662|  1.39M|    {
 1663|  1.39M|        return std::move(value());
 1664|  1.39M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1626|  1.66M|    {
 1627|  1.66M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.66M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.66M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.66M|        return this->get_value();
 1629|  1.66M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  450|  1.66M|    {
  451|  1.66M|        return m_value;
  452|  1.66M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|   988k|    {
 1837|   988k|        return detail::transform_error_impl(std::move(*this),
 1838|   988k|                                            std::forward<F>(f));
 1839|   988k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|   988k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   988k|    else {
 1333|   988k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   988k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   988k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 972k, False: 15.8k]
  |  |  ------------------
  ------------------
 1335|   988k|                   ? result(*std::forward<Exp>(exp))
 1336|   988k|                   : result(unexpect,
 1337|  15.8k|                            trivial_invoke(std::forward<F>(f),
 1338|  15.8k|                                           std::forward<Exp>(exp).error()));
 1339|   988k|    }
 1340|   988k|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  3.75M|    {
  485|  3.75M|        return m_has_value;
  486|  3.75M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|   972k|    {
 1663|   972k|        return std::move(value());
 1664|   972k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|  1.29M|    {
 1627|  1.29M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.29M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.29M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.29M|        return this->get_value();
 1629|  1.29M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  1.29M|    {
  451|  1.29M|        return m_value;
  452|  1.29M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1613|  15.8k|    {
 1614|  15.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  15.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  15.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  15.8k|        return std::move(this->get_unexpected().error());
 1616|  15.8k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  20.6k|    {
  468|  20.6k|        return m_unexpected;
  469|  20.6k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1483|   953k|        : base(unexpect, std::forward<Args>(args)...),
 1484|   953k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|   953k|    {
 1486|   953k|    }
_ZN3scn2v310scan_errorC2Ev:
 3558|  10.1M|    constexpr scan_error() noexcept = default;
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|   215k|        : base(unexpect, std::move(e.error())),
 1474|   215k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   215k|    {
 1476|   215k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4288|  9.88M|    {
 4289|  9.88M|        return x.is_at_end();
 4290|  9.88M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4332|  24.1M|    {
 4333|  24.1M|        if (m_end) {
  ------------------
  |  Branch (4333:13): [True: 0, False: 24.1M]
  ------------------
 4334|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4335|      0|        }
 4336|  24.1M|        if (!m_begin) {
  ------------------
  |  Branch (4336:13): [True: 0, False: 24.1M]
  ------------------
 4337|      0|            return true;
 4338|      0|        }
 4339|  24.1M|        return !read_at_position();
 4340|  24.1M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4312|   104M|    {
 4313|   104M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|   104M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   104M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4314|       |
 4315|   104M|        if (!stores_parent()) {
  ------------------
  |  Branch (4315:13): [True: 0, False: 104M]
  ------------------
 4316|      0|            return true;
 4317|      0|        }
 4318|       |
 4319|   104M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|   104M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 90.0M, False: 14.0M]
  |  |  ------------------
  ------------------
 4320|  90.0M|            return true;
 4321|  90.0M|        }
 4322|       |
 4323|  27.7M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4323:16): [True: 14.0M, False: 13.7M]
  ------------------
 4324|  14.0M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4324:17): [True: 285k, False: 13.7M]
  ------------------
 4325|   285k|                return false;
 4326|   285k|            }
 4327|  14.0M|        }
 4328|  13.7M|        return true;
 4329|  14.0M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE15chars_availableEv:
 4088|   134M|    {
 4089|   134M|        return m_putback_buffer.size() + m_current_view.size();
 4090|   134M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4247|  27.1M|    {
 4248|  27.1M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  27.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  27.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|       |
 4250|  27.1M|        if (!stores_parent()) {
  ------------------
  |  Branch (4250:13): [True: 0, False: 27.1M]
  ------------------
 4251|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4252|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4253|      0|            return *ptr;
 4254|      0|        }
 4255|       |
 4256|  27.1M|        auto res = read_at_position();
 4257|  27.1M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  27.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  27.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4258|  27.1M|        return parent()->get_character_at(m_position);
 4259|  27.1M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16get_character_atEl:
 4119|  27.1M|    {
 4120|  27.1M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  27.1M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.2M, False: 9.89M]
  |  |  ------------------
  ------------------
 4121|  27.1M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4122|  17.2M|            return m_putback_buffer[pos];
 4123|  17.2M|        }
 4124|  9.89M|        const auto start = pos - m_putback_buffer.size();
 4125|  9.89M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  9.89M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.89M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4126|  9.89M|        return m_current_view[start];
 4127|  9.89M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1427|  7.20M|        : base(std::in_place, std::forward<U>(val)),
 1428|  7.20M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  7.20M|    {
 1430|  7.20M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  7.20M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  7.20M|    {
  437|  7.20M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  7.27M|    {
 1177|  7.27M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  345|   144k|        : m_unexpected(std::forward<Err>(e))
  346|   144k|    {
  347|   144k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   144k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   144k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|  73.7k|        : base(unexpect, std::move(e.error())),
 1474|  73.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  73.7k|    {
 1476|  73.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|  73.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  73.7k|          m_has_value(false)
  446|  73.7k|    {
  447|  73.7k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  354|   213k|        : m_unexpected(std::forward<Args>(args)...)
  355|   213k|    {
  356|   213k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   213k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|   213k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1597|  3.18M|    {
 1598|  3.18M|        return has_value();
 1599|  3.18M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1652|   598k|    {
 1653|   598k|        return value();
 1654|   598k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4282|  25.4M|    {
 4283|  25.4M|        return !(lhs == rhs);
 4284|  25.4M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4277|  28.3M|    {
 4278|  28.3M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4278:16): [True: 28.3M, False: 0]
  |  Branch (4278:46): [True: 3.72M, False: 24.6M]
  ------------------
 4279|  28.3M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4233|  52.8M|    {
 4234|  52.8M|        ++m_position;
 4235|  52.8M|        (void)read_at_position();
 4236|  52.8M|        return *this;
 4237|  52.8M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  345|  68.6k|        : m_unexpected(std::forward<Err>(e))
  346|  68.6k|    {
  347|  68.6k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  68.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  68.6k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  14.4k|        : base(unexpect, std::move(e.error())),
 1474|  14.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  14.4k|    {
 1476|  14.4k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|  14.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  14.4k|          m_has_value(false)
  446|  14.4k|    {
  447|  14.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.54M|    {
 1177|  1.54M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|  1.53M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.53M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.53M|    {
 1430|  1.53M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  435|  1.53M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.53M|    {
  437|  1.53M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|  1.54M|    {
 1598|  1.54M|        return has_value();
 1599|  1.54M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  3.09M|    {
  485|  3.09M|        return m_has_value;
  486|  3.09M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  14.4k|    {
 1604|  14.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  14.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  14.4k|        return this->get_unexpected().error();
 1606|  14.4k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  14.4k|    {
  468|  14.4k|        return m_unexpected;
  469|  14.4k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|  1.53M|    {
 1663|  1.53M|        return std::move(value());
 1664|  1.53M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|  1.53M|    {
 1627|  1.53M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.53M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.53M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.53M|        return this->get_value();
 1629|  1.53M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.53M|    {
  451|  1.53M|        return m_value;
  452|  1.53M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3329|  34.5M|    {
 3330|  34.5M|        return m_sentinel;
 3331|  34.5M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  345|  62.0k|        : m_unexpected(std::forward<Err>(e))
  346|  62.0k|    {
  347|  62.0k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  62.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  62.0k|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_errorEE5errorEv:
  360|  12.8M|    {
  361|  12.8M|        return m_unexpected;
  362|  12.8M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  354|  3.50M|        : m_unexpected(std::forward<Args>(args)...)
  355|  3.50M|    {
  356|  3.50M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  3.50M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  3.50M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  345|  15.6M|        : m_unexpected(std::forward<Err>(e))
  346|  15.6M|    {
  347|  15.6M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  15.6M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  15.6M|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  360|  15.6M|    {
  361|  15.6M|        return m_unexpected;
  362|  15.6M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  354|  15.6M|        : m_unexpected(std::forward<Args>(args)...)
  355|  15.6M|    {
  356|  15.6M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  15.6M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  15.6M|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|   144k|{
 1211|   144k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|   144k|}
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  345|  3.30M|        : m_unexpected(std::forward<Err>(e))
  346|  3.30M|    {
  347|  3.30M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  3.30M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  3.30M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1603|  19.1k|    {
 1604|  19.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  19.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  19.1k|        return this->get_unexpected().error();
 1606|  19.1k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|  1.15M|        : base(unexpect, std::move(e.error())),
 1474|  1.15M|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  1.15M|    {
 1476|  1.15M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|  1.19M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.19M|          m_has_value(false)
  446|  1.19M|    {
  447|  1.19M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  12.3M|    {
 1177|  12.3M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1427|   603k|        : base(std::in_place, std::forward<U>(val)),
 1428|   603k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   603k|    {
 1430|   603k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  435|   603k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   603k|    {
  437|   603k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  6.27M|        : base(unexpect, std::move(e.error())),
 1474|  6.27M|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  6.27M|    {
 1476|  6.27M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|  6.27M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  6.27M|          m_has_value(false)
  446|  6.27M|    {
  447|  6.27M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1597|  13.5M|    {
 1598|  13.5M|        return has_value();
 1599|  13.5M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  23.8M|    {
  485|  23.8M|        return m_has_value;
  486|  23.8M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1603|  3.16M|    {
 1604|  3.16M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  3.16M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.16M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  3.16M|        return this->get_unexpected().error();
 1606|  3.16M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  3.16M|    {
  468|  3.16M|        return m_unexpected;
  469|  3.16M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1427|  1.22M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.22M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.22M|    {
 1430|  1.22M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  435|  1.22M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.22M|    {
  437|  1.22M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.22M|    {
 1177|  1.22M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSE_IXsr3stdE16is_convertible_vISG_SB_EEvE4typeELSK_0EEEONS0_10unexpectedISF_EE:
 1473|    288|        : base(unexpect, std::move(e.error())),
 1474|    288|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|    288|    {
 1476|    288|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  444|    288|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|    288|          m_has_value(false)
  446|    288|    {
  447|    288|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1652|  3.16M|    {
 1653|  3.16M|        return value();
 1654|  3.16M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|  6.09M|    {
 1627|  6.09M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  6.09M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.09M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  6.09M|        return this->get_value();
 1629|  6.09M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  6.09M|    {
  451|  6.09M|        return m_value;
  452|  6.09M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1597|   113k|    {
 1598|   113k|        return has_value();
 1599|   113k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  484|  2.44M|    {
  485|  2.44M|        return m_has_value;
  486|  2.44M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|  1.11M|    {
 1663|  1.11M|        return std::move(value());
 1664|  1.11M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|  1.22M|    {
 1627|  1.22M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.22M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.22M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.22M|        return this->get_value();
 1629|  1.22M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  450|  1.22M|    {
  451|  1.22M|        return m_value;
  452|  1.22M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  2.96M|    {
 1837|  2.96M|        return detail::transform_error_impl(std::move(*this),
 1838|  2.96M|                                            std::forward<F>(f));
 1839|  2.96M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|  2.96M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  2.96M|    else {
 1333|  2.96M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.96M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.96M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.93M, False: 35.5k]
  |  |  ------------------
  ------------------
 1335|  2.96M|                   ? result(*std::forward<Exp>(exp))
 1336|  2.96M|                   : result(unexpect,
 1337|  35.5k|                            trivial_invoke(std::forward<F>(f),
 1338|  35.5k|                                           std::forward<Exp>(exp).error()));
 1339|  2.96M|    }
 1340|  2.96M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1427|  4.32M|        : base(std::in_place, std::forward<U>(val)),
 1428|  4.32M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  4.32M|    {
 1430|  4.32M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  4.32M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  4.32M|    {
  437|  4.32M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1483|  35.5k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  35.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  35.5k|    {
 1486|  35.5k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|  2.93M|    {
 1663|  2.93M|        return std::move(value());
 1664|  2.93M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3325|  1.28M|    {
 3326|  1.28M|        return m_iterator;
 3327|  1.28M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3329|  1.28M|    {
 3330|  1.28M|        return m_sentinel;
 3331|  1.28M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|  7.48M|    {
 1598|  7.48M|        return has_value();
 1599|  7.48M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|  11.7M|    {
  485|  11.7M|        return m_has_value;
  486|  11.7M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|   285k|    {
 1604|   285k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   285k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   285k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   285k|        return this->get_unexpected().error();
 1606|   285k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   285k|    {
  468|   285k|        return m_unexpected;
  469|   285k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|  3.20M|    {
 1663|  3.20M|        return std::move(value());
 1664|  3.20M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|  3.99M|    {
 1627|  3.99M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.99M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.99M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.99M|        return this->get_value();
 1629|  3.99M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|  3.99M|    {
  451|  3.99M|        return m_value;
  452|  3.99M|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3310|   994k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   994k|    static_cast<    \
  |  |  929|   994k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   994k|    static_cast<    \
  |  |  929|   994k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|   994k|    {
 3312|   994k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4299|  14.2M|    {
 4300|  14.2M|        return !x.is_at_end();
 4301|  14.2M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|  20.6k|        : base(unexpect, std::move(e.error())),
 1474|  20.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  20.6k|    {
 1476|  20.6k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  20.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  20.6k|          m_has_value(false)
  446|  20.6k|    {
  447|  20.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.44M|    {
 1177|  2.44M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1427|  2.42M|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.42M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.42M|    {
 1430|  2.42M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  2.42M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.42M|    {
  437|  2.42M|    }
_ZNK3scn2v38expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1597|  1.45M|    {
 1598|  1.45M|        return has_value();
 1599|  1.45M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1652|   319k|    {
 1653|   319k|        return value();
 1654|   319k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  11.4k|        : base(unexpect, std::move(e.error())),
 1474|  11.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  11.4k|    {
 1476|  11.4k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  444|  11.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  11.4k|          m_has_value(false)
  446|  11.4k|    {
  447|  11.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.31M|    {
 1177|  1.31M|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|  1.30M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.30M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.30M|    {
 1430|  1.30M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  435|  1.30M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.30M|    {
  437|  1.30M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1597|  1.31M|    {
 1598|  1.31M|        return has_value();
 1599|  1.31M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.62M|    {
  485|  2.62M|        return m_has_value;
  486|  2.62M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1603|  11.4k|    {
 1604|  11.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  11.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  11.4k|        return this->get_unexpected().error();
 1606|  11.4k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  11.4k|    {
  468|  11.4k|        return m_unexpected;
  469|  11.4k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|  1.30M|    {
 1663|  1.30M|        return std::move(value());
 1664|  1.30M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|  1.30M|    {
 1627|  1.30M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.30M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.30M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.30M|        return this->get_value();
 1629|  1.30M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.30M|    {
  451|  1.30M|        return m_value;
  452|  1.30M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1603|  4.77k|    {
 1604|  4.77k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  4.77k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.77k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  4.77k|        return this->get_unexpected().error();
 1606|  4.77k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|  1.00M|        : base(unexpect, std::move(e.error())),
 1474|  1.00M|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  1.00M|    {
 1476|  1.00M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  1.00M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.00M|          m_has_value(false)
  446|  1.00M|    {
  447|  1.00M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  5.56M|    {
 1177|  5.56M|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1427|   324k|        : base(std::in_place, std::forward<U>(val)),
 1428|   324k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   324k|    {
 1430|   324k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  435|   324k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   324k|    {
  437|   324k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  3.81M|        : base(unexpect, std::move(e.error())),
 1474|  3.81M|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  3.81M|    {
 1476|  3.81M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|  3.81M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  3.81M|          m_has_value(false)
  446|  3.81M|    {
  447|  3.81M|    }
_ZNK3scn2v38expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1597|  6.53M|    {
 1598|  6.53M|        return has_value();
 1599|  6.53M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  11.1M|    {
  485|  11.1M|        return m_has_value;
  486|  11.1M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1603|  2.65M|    {
 1604|  2.65M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.65M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.65M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.65M|        return this->get_unexpected().error();
 1606|  2.65M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  2.65M|    {
  468|  2.65M|        return m_unexpected;
  469|  2.65M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1427|   999k|        : base(std::in_place, std::forward<U>(val)),
 1428|   999k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   999k|    {
 1430|   999k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  435|   999k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   999k|    {
  437|   999k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   999k|    {
 1177|   999k|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|     96|        : base(unexpect, std::move(e.error())),
 1474|     96|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|     96|    {
 1476|     96|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|     96|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|     96|          m_has_value(false)
  446|     96|    {
  447|     96|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1652|  1.03M|    {
 1653|  1.03M|        return value();
 1654|  1.03M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|  1.03M|    {
 1627|  1.03M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.03M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.03M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.03M|        return this->get_value();
 1629|  1.03M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  1.03M|    {
  451|  1.03M|        return m_value;
  452|  1.03M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  27.1k|    {
 1598|  27.1k|        return has_value();
 1599|  27.1k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|  1.99M|    {
  485|  1.99M|        return m_has_value;
  486|  1.99M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|   972k|    {
 1663|   972k|        return std::move(value());
 1664|   972k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|   999k|    {
 1627|   999k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   999k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   999k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   999k|        return this->get_value();
 1629|   999k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|   999k|    {
  451|   999k|        return m_value;
  452|   999k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1427|   417k|        : base(std::in_place, std::forward<U>(val)),
 1428|   417k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   417k|    {
 1430|   417k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|   417k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   417k|    {
  437|   417k|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  1.86M|    {
 2855|  1.86M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  1.86M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  1.86M|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  1.86M|    {
 2836|  1.86M|        return t.data();
 2837|  1.86M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1473|   790k|        : base(unexpect, std::move(e.error())),
 1474|   790k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   790k|    {
 1476|   790k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  444|   790k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   790k|          m_has_value(false)
  446|   790k|    {
  447|   790k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  8.88M|    {
 1177|  8.88M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1427|  7.98M|        : base(std::in_place, std::forward<U>(val)),
 1428|  7.98M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  7.98M|    {
 1430|  7.98M|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  435|  7.98M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  7.98M|    {
  437|  7.98M|    }
_ZNO3scn2v38expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS7_v:
 1662|  5.39M|    {
 1663|  5.39M|        return std::move(value());
 1664|  5.39M|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1210|  3.37M|{
 1211|  3.37M|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  3.37M|}
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1836|  1.11M|    {
 1837|  1.11M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.11M|                                            std::forward<F>(f));
 1839|  1.11M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSI_OT0_:
 1322|  1.11M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.11M|    else {
 1333|  1.11M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.11M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.11M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.11M, False: 0]
  |  |  ------------------
  ------------------
 1335|  1.11M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.11M|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  1.11M|    }
 1340|  1.11M|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|  1.11M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.11M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.11M|    {
 1430|  1.11M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  435|  1.11M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.11M|    {
  437|  1.11M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.11M|    {
 1177|  1.11M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|  1.11M|    {
 1598|  1.11M|        return has_value();
 1599|  1.11M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.22M|    {
  485|  2.22M|        return m_has_value;
  486|  2.22M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|  1.11M|    {
 1663|  1.11M|        return std::move(value());
 1664|  1.11M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|  1.11M|    {
 1627|  1.11M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.11M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.11M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.11M|        return this->get_value();
 1629|  1.11M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.11M|    {
  451|  1.11M|        return m_value;
  452|  1.11M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1822|  1.10M|    {
 1823|  1.10M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|  1.10M|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSI_OT0_:
 1322|  1.10M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.10M|    else {
 1333|  1.10M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.10M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.10M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 1.10M]
  |  |  ------------------
  ------------------
 1335|  1.10M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.10M|                   : result(unexpect,
 1337|  1.10M|                            trivial_invoke(std::forward<F>(f),
 1338|  1.10M|                                           std::forward<Exp>(exp).error()));
 1339|  1.10M|    }
 1340|  1.10M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1427|  58.9k|        : base(std::in_place, std::forward<U>(val)),
 1428|  58.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  58.9k|    {
 1430|  58.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  435|  58.9k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  58.9k|    {
  437|  58.9k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1652|   792k|    {
 1653|   792k|        return value();
 1654|   792k|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3663|   259k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1672|   112k|    {
 1673|   112k|        return &value();
 1674|   112k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2723|   793k|    {
 2724|   793k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   793k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   793k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2704|   793k|    {
 2705|   793k|        return decay_copy(t.begin());
 2706|   793k|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEu7__decayIT_EOS8_:
 1948|   793k|{
 1949|   793k|    return SCN_FWD(t);
  ------------------
  |  |  930|   793k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|   793k|}
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3663|   484k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|   972k|    {
 1837|   972k|        return detail::transform_error_impl(std::move(*this),
 1838|   972k|                                            std::forward<F>(f));
 1839|   972k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1322|   972k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   972k|    else {
 1333|   972k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   972k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   972k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 972k, False: 0]
  |  |  ------------------
  ------------------
 1335|   972k|                   ? result(*std::forward<Exp>(exp))
 1336|   972k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|   972k|    }
 1340|   972k|}
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|   972k|        : base(std::in_place, std::forward<U>(val)),
 1428|   972k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   972k|    {
 1430|   972k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  435|   972k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   972k|    {
  437|   972k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   972k|    {
 1177|   972k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|   972k|    {
 1598|   972k|        return has_value();
 1599|   972k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.94M|    {
  485|  1.94M|        return m_has_value;
  486|  1.94M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|   972k|    {
 1663|   972k|        return std::move(value());
 1664|   972k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|   972k|    {
 1627|   972k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   972k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   972k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   972k|        return this->get_value();
 1629|   972k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   972k|    {
  451|   972k|        return m_value;
  452|   972k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1822|   938k|    {
 1823|   938k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|   938k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|   938k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   938k|    else {
 1333|   938k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   938k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   938k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 938k]
  |  |  ------------------
  ------------------
 1335|   938k|                   ? result(*std::forward<Exp>(exp))
 1336|   938k|                   : result(unexpect,
 1337|   938k|                            trivial_invoke(std::forward<F>(f),
 1338|   938k|                                           std::forward<Exp>(exp).error()));
 1339|   938k|    }
 1340|   938k|}
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRS3_vEEOT_:
 1427|  57.5k|        : base(std::in_place, std::forward<U>(val)),
 1428|  57.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  57.5k|    {
 1430|  57.5k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  435|  57.5k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  57.5k|    {
  437|  57.5k|    }
_ZN3scn2v313scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3642|   938k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  928|   938k|    static_cast<    \
  |  |  929|   938k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3643|   938k|    {
 3644|   938k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1652|   674k|    {
 1653|   674k|        return value();
 1654|   674k|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1672|  27.0k|    {
 1673|  27.0k|        return &value();
 1674|  27.0k|    }
_ZN3scn2v313scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3642|  1.10M|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  928|  1.10M|    static_cast<    \
  |  |  929|  1.10M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3643|  1.10M|    {
 3644|  1.10M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|   475k|        : base(unexpect, std::move(e.error())),
 1474|   475k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   475k|    {
 1476|   475k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4288|  4.60M|    {
 4289|  4.60M|        return x.is_at_end();
 4290|  4.60M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4332|  7.24M|    {
 4333|  7.24M|        if (m_end) {
  ------------------
  |  Branch (4333:13): [True: 0, False: 7.24M]
  ------------------
 4334|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4335|      0|        }
 4336|  7.24M|        if (!m_begin) {
  ------------------
  |  Branch (4336:13): [True: 0, False: 7.24M]
  ------------------
 4337|      0|            return true;
 4338|      0|        }
 4339|  7.24M|        return !read_at_position();
 4340|  7.24M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4312|  22.8M|    {
 4313|  22.8M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  22.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  22.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4314|       |
 4315|  22.8M|        if (!stores_parent()) {
  ------------------
  |  Branch (4315:13): [True: 0, False: 22.8M]
  ------------------
 4316|      0|            return true;
 4317|      0|        }
 4318|       |
 4319|  22.8M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|  22.8M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 20.0M, False: 2.76M]
  |  |  ------------------
  ------------------
 4320|  20.0M|            return true;
 4321|  20.0M|        }
 4322|       |
 4323|  5.34M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4323:16): [True: 2.76M, False: 2.58M]
  ------------------
 4324|  2.76M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4324:17): [True: 180k, False: 2.58M]
  ------------------
 4325|   180k|                return false;
 4326|   180k|            }
 4327|  2.76M|        }
 4328|  2.58M|        return true;
 4329|  2.76M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE15chars_availableEv:
 4088|  29.6M|    {
 4089|  29.6M|        return m_putback_buffer.size() + m_current_view.size();
 4090|  29.6M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4247|  7.15M|    {
 4248|  7.15M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  7.15M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.15M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|       |
 4250|  7.15M|        if (!stores_parent()) {
  ------------------
  |  Branch (4250:13): [True: 0, False: 7.15M]
  ------------------
 4251|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4252|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4253|      0|            return *ptr;
 4254|      0|        }
 4255|       |
 4256|  7.15M|        auto res = read_at_position();
 4257|  7.15M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  7.15M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.15M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4258|  7.15M|        return parent()->get_character_at(m_position);
 4259|  7.15M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16get_character_atEl:
 4119|  7.15M|    {
 4120|  7.15M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  7.15M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.06M, False: 1.08M]
  |  |  ------------------
  ------------------
 4121|  7.15M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4122|  6.06M|            return m_putback_buffer[pos];
 4123|  6.06M|        }
 4124|  1.08M|        const auto start = pos - m_putback_buffer.size();
 4125|  1.08M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  1.08M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.08M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4126|  1.08M|        return m_current_view[start];
 4127|  1.08M|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3802|  2.56M|{
 3803|       |    if constexpr (sizeof(U) == 1) {
 3804|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 3805|       |    }
 3806|       |    else if constexpr (sizeof(U) == 2) {
 3807|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 3808|       |    }
 3809|  2.56M|    else {
 3810|       |        // utf-32
 3811|  2.56M|        static_assert(sizeof(U) == 4);
 3812|  2.56M|        SCN_UNUSED(ch);
  ------------------
  |  |  909|  2.56M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3813|  2.56M|        return 1;
 3814|  2.56M|    }
 3815|  2.56M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1427|  3.20M|        : base(std::in_place, std::forward<U>(val)),
 1428|  3.20M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  3.20M|    {
 1430|  3.20M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  3.20M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  3.20M|    {
  437|  3.20M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.26M|    {
 1177|  3.26M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|  60.0k|        : base(unexpect, std::move(e.error())),
 1474|  60.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  60.0k|    {
 1476|  60.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|  60.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  60.0k|          m_has_value(false)
  446|  60.0k|    {
  447|  60.0k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1597|  1.27M|    {
 1598|  1.27M|        return has_value();
 1599|  1.27M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1652|  18.1k|    {
 1653|  18.1k|        return value();
 1654|  18.1k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4282|  3.44M|    {
 4283|  3.44M|        return !(lhs == rhs);
 4284|  3.44M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4277|  4.68M|    {
 4278|  4.68M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4278:16): [True: 4.68M, False: 0]
  |  Branch (4278:46): [True: 1.50M, False: 3.17M]
  ------------------
 4279|  4.68M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4233|  8.45M|    {
 4234|  8.45M|        ++m_position;
 4235|  8.45M|        (void)read_at_position();
 4236|  8.45M|        return *this;
 4237|  8.45M|    }
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4008|  2.56M|{
 4009|       |    if constexpr (sizeof(CharT) == 1) {
 4010|       |        return decode_utf8_code_point_exhaustive(input);
 4011|       |    }
 4012|       |    else if constexpr (sizeof(CharT) == 2) {
 4013|       |        return decode_utf16_code_point_exhaustive(input);
 4014|       |    }
 4015|  2.56M|    else {
 4016|  2.56M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|  2.56M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.56M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4017|  2.56M|        auto cp = static_cast<char32_t>(input.front());
 4018|  2.56M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  2.56M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 177k, False: 2.38M]
  |  |  ------------------
  ------------------
 4019|   177k|            return invalid_code_point;
 4020|   177k|        }
 4021|  2.38M|        return cp;
 4022|  2.56M|    }
 4023|  2.56M|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  2.71k|        : base(unexpect, std::move(e.error())),
 1474|  2.71k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  2.71k|    {
 1476|  2.71k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|  2.71k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  2.71k|          m_has_value(false)
  446|  2.71k|    {
  447|  2.71k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   674k|    {
 1177|   674k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|   672k|        : base(std::in_place, std::forward<U>(val)),
 1428|   672k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   672k|    {
 1430|   672k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  435|   672k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   672k|    {
  437|   672k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|   674k|    {
 1598|   674k|        return has_value();
 1599|   674k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.34M|    {
  485|  1.34M|        return m_has_value;
  486|  1.34M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  2.71k|    {
 1604|  2.71k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.71k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.71k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.71k|        return this->get_unexpected().error();
 1606|  2.71k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  2.71k|    {
  468|  2.71k|        return m_unexpected;
  469|  2.71k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|   672k|    {
 1663|   672k|        return std::move(value());
 1664|   672k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|   672k|    {
 1627|   672k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   672k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   672k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   672k|        return this->get_value();
 1629|   672k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|   672k|    {
  451|   672k|        return m_value;
  452|   672k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3329|  11.8M|    {
 3330|  11.8M|        return m_sentinel;
 3331|  11.8M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1603|  2.01k|    {
 1604|  2.01k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.01k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.01k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.01k|        return this->get_unexpected().error();
 1606|  2.01k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|   603k|        : base(unexpect, std::move(e.error())),
 1474|   603k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   603k|    {
 1476|   603k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|   657k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   657k|          m_has_value(false)
  446|   657k|    {
  447|   657k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  5.64M|    {
 1177|  5.64M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1427|  18.1k|        : base(std::in_place, std::forward<U>(val)),
 1428|  18.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  18.1k|    {
 1430|  18.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  435|  18.1k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  18.1k|    {
  437|  18.1k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  3.18M|        : base(unexpect, std::move(e.error())),
 1474|  3.18M|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  3.18M|    {
 1476|  3.18M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|  3.18M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  3.18M|          m_has_value(false)
  446|  3.18M|    {
  447|  3.18M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1597|  6.18M|    {
 1598|  6.18M|        return has_value();
 1599|  6.18M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  10.9M|    {
  485|  10.9M|        return m_has_value;
  486|  10.9M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1603|  1.86M|    {
 1604|  1.86M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.86M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.86M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.86M|        return this->get_unexpected().error();
 1606|  1.86M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  1.86M|    {
  468|  1.86M|        return m_unexpected;
  469|  1.86M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1427|   558k|        : base(std::in_place, std::forward<U>(val)),
 1428|   558k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   558k|    {
 1430|   558k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  435|   558k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   558k|    {
  437|   558k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   558k|    {
 1177|   558k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSE_IXsr3stdE16is_convertible_vISG_SB_EEvE4typeELSK_0EEEONS0_10unexpectedISF_EE:
 1473|     70|        : base(unexpect, std::move(e.error())),
 1474|     70|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|     70|    {
 1476|     70|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  444|     70|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|     70|          m_has_value(false)
  446|     70|    {
  447|     70|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1652|   798k|    {
 1653|   798k|        return value();
 1654|   798k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|  2.18M|    {
 1627|  2.18M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.18M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.18M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.18M|        return this->get_value();
 1629|  2.18M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  2.18M|    {
  451|  2.18M|        return m_value;
  452|  2.18M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1597|  11.0k|    {
 1598|  11.0k|        return has_value();
 1599|  11.0k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  484|  1.11M|    {
  485|  1.11M|        return m_has_value;
  486|  1.11M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|   547k|    {
 1663|   547k|        return std::move(value());
 1664|   547k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|   558k|    {
 1627|   558k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   558k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   558k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   558k|        return this->get_value();
 1629|   558k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  450|   558k|    {
  451|   558k|        return m_value;
  452|   558k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  1.44M|    {
 1837|  1.44M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.44M|                                            std::forward<F>(f));
 1839|  1.44M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|  1.44M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.44M|    else {
 1333|  1.44M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.44M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.44M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.38M, False: 54.3k]
  |  |  ------------------
  ------------------
 1335|  1.44M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.44M|                   : result(unexpect,
 1337|  54.3k|                            trivial_invoke(std::forward<F>(f),
 1338|  54.3k|                                           std::forward<Exp>(exp).error()));
 1339|  1.44M|    }
 1340|  1.44M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1427|  1.78M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.78M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.78M|    {
 1430|  1.78M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  1.78M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.78M|    {
  437|  1.78M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1483|  54.3k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  54.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  54.3k|    {
 1486|  54.3k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|  1.38M|    {
 1663|  1.38M|        return std::move(value());
 1664|  1.38M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3325|   406k|    {
 3326|   406k|        return m_iterator;
 3327|   406k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3329|   406k|    {
 3330|   406k|        return m_sentinel;
 3331|   406k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|  3.69M|    {
 1598|  3.69M|        return has_value();
 1599|  3.69M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|  5.91M|    {
  485|  5.91M|        return m_has_value;
  486|  5.91M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|   643k|    {
 1604|   643k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   643k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   643k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   643k|        return this->get_unexpected().error();
 1606|   643k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   643k|    {
  468|   643k|        return m_unexpected;
  469|   643k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|  1.30M|    {
 1663|  1.30M|        return std::move(value());
 1664|  1.30M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|  1.57M|    {
 1627|  1.57M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.57M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.57M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.57M|        return this->get_value();
 1629|  1.57M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.57M|    {
  451|  1.57M|        return m_value;
  452|  1.57M|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3310|   379k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   379k|    static_cast<    \
  |  |  929|   379k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   379k|    static_cast<    \
  |  |  929|   379k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|   379k|    {
 3312|   379k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4299|  2.64M|    {
 4300|  2.64M|        return !x.is_at_end();
 4301|  2.64M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|  58.6k|        : base(unexpect, std::move(e.error())),
 1474|  58.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  58.6k|    {
 1476|  58.6k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  58.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  58.6k|          m_has_value(false)
  446|  58.6k|    {
  447|  58.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.74M|    {
 1177|  2.74M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1427|  2.68M|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.68M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.68M|    {
 1430|  2.68M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  2.68M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.68M|    {
  437|  2.68M|    }
_ZNK3scn2v38expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1597|   748k|    {
 1598|   748k|        return has_value();
 1599|   748k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  4.74M|    {
  485|  4.74M|        return m_has_value;
  486|  4.74M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1652|  7.67k|    {
 1653|  7.67k|        return value();
 1654|  7.67k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|  1.94M|    {
 1627|  1.94M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.94M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.94M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.94M|        return this->get_value();
 1629|  1.94M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  1.94M|    {
  451|  1.94M|        return m_value;
  452|  1.94M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  2.71k|        : base(unexpect, std::move(e.error())),
 1474|  2.71k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  2.71k|    {
 1476|  2.71k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  444|  2.71k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  2.71k|          m_has_value(false)
  446|  2.71k|    {
  447|  2.71k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   675k|    {
 1177|   675k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|   672k|        : base(std::in_place, std::forward<U>(val)),
 1428|   672k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   672k|    {
 1430|   672k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  435|   672k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   672k|    {
  437|   672k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|   551k|    {
 1837|   551k|        return detail::transform_error_impl(std::move(*this),
 1838|   551k|                                            std::forward<F>(f));
 1839|   551k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|   551k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   551k|    else {
 1333|   551k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   551k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   551k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 547k, False: 3.64k]
  |  |  ------------------
  ------------------
 1335|   551k|                   ? result(*std::forward<Exp>(exp))
 1336|   551k|                   : result(unexpect,
 1337|  3.64k|                            trivial_invoke(std::forward<F>(f),
 1338|  3.64k|                                           std::forward<Exp>(exp).error()));
 1339|   551k|    }
 1340|   551k|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|  1.93M|    {
 1663|  1.93M|        return std::move(value());
 1664|  1.93M|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1613|  58.1k|    {
 1614|  58.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  58.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  58.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  58.1k|        return std::move(this->get_unexpected().error());
 1616|  58.1k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  58.6k|    {
  468|  58.6k|        return m_unexpected;
  469|  58.6k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1483|   626k|        : base(unexpect, std::forward<Args>(args)...),
 1484|   626k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|   626k|    {
 1486|   626k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1597|   675k|    {
 1598|   675k|        return has_value();
 1599|   675k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.35M|    {
  485|  1.35M|        return m_has_value;
  486|  1.35M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1603|  2.71k|    {
 1604|  2.71k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.71k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.71k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.71k|        return this->get_unexpected().error();
 1606|  2.71k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  2.71k|    {
  468|  2.71k|        return m_unexpected;
  469|  2.71k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|   672k|    {
 1663|   672k|        return std::move(value());
 1664|   672k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|   672k|    {
 1627|   672k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   672k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   672k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   672k|        return this->get_value();
 1629|   672k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  450|   672k|    {
  451|   672k|        return m_value;
  452|   672k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1603|    516|    {
 1604|    516|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    516|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    516|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    516|        return this->get_unexpected().error();
 1606|    516|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|   602k|        : base(unexpect, std::move(e.error())),
 1474|   602k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   602k|    {
 1476|   602k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|   657k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   657k|          m_has_value(false)
  446|   657k|    {
  447|   657k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  4.51M|    {
 1177|  4.51M|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1427|  7.67k|        : base(std::in_place, std::forward<U>(val)),
 1428|  7.67k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  7.67k|    {
 1430|  7.67k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  435|  7.67k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  7.67k|    {
  437|  7.67k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  2.32M|        : base(unexpect, std::move(e.error())),
 1474|  2.32M|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  2.32M|    {
 1476|  2.32M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|  2.32M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  2.32M|          m_has_value(false)
  446|  2.32M|    {
  447|  2.32M|    }
_ZNK3scn2v38expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1597|  5.05M|    {
 1598|  5.05M|        return has_value();
 1599|  5.05M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  9.10M|    {
  485|  9.10M|        return m_has_value;
  486|  9.10M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1603|  1.77M|    {
 1604|  1.77M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.77M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.77M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.77M|        return this->get_unexpected().error();
 1606|  1.77M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  1.77M|    {
  468|  1.77M|        return m_unexpected;
  469|  1.77M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1427|   551k|        : base(std::in_place, std::forward<U>(val)),
 1428|   551k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   551k|    {
 1430|   551k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  435|   551k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   551k|    {
  437|   551k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   551k|    {
 1177|   551k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|     24|        : base(unexpect, std::move(e.error())),
 1474|     24|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|     24|    {
 1476|     24|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|     24|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|     24|          m_has_value(false)
  446|     24|    {
  447|     24|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1652|   264k|    {
 1653|   264k|        return value();
 1654|   264k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|  1.65M|    {
 1627|  1.65M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.65M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.65M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.65M|        return this->get_value();
 1629|  1.65M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  1.65M|    {
  451|  1.65M|        return m_value;
  452|  1.65M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  3.82k|    {
 1598|  3.82k|        return has_value();
 1599|  3.82k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|  1.10M|    {
  485|  1.10M|        return m_has_value;
  486|  1.10M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|   547k|    {
 1663|   547k|        return std::move(value());
 1664|   547k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|   551k|    {
 1627|   551k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   551k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   551k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   551k|        return this->get_value();
 1629|   551k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|   551k|    {
  451|   551k|        return m_value;
  452|   551k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  1.44M|    {
 1837|  1.44M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.44M|                                            std::forward<F>(f));
 1839|  1.44M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|  1.44M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.44M|    else {
 1333|  1.44M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.44M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.44M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.38M, False: 54.5k]
  |  |  ------------------
  ------------------
 1335|  1.44M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.44M|                   : result(unexpect,
 1337|  54.5k|                            trivial_invoke(std::forward<F>(f),
 1338|  54.5k|                                           std::forward<Exp>(exp).error()));
 1339|  1.44M|    }
 1340|  1.44M|}
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1427|  1.51M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.51M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.51M|    {
 1430|  1.51M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  1.51M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.51M|    {
  437|  1.51M|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1483|  54.5k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  54.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  54.5k|    {
 1486|  54.5k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|  1.38M|    {
 1663|  1.38M|        return std::move(value());
 1664|  1.38M|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   469k|    {
 2855|   469k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   469k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   469k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   469k|    {
 2836|   469k|        return t.data();
 2837|   469k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1836|   547k|    {
 1837|   547k|        return detail::transform_error_impl(std::move(*this),
 1838|   547k|                                            std::forward<F>(f));
 1839|   547k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSI_OT0_:
 1322|   547k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   547k|    else {
 1333|   547k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   547k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   547k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 547k, False: 0]
  |  |  ------------------
  ------------------
 1335|   547k|                   ? result(*std::forward<Exp>(exp))
 1336|   547k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|   547k|    }
 1340|   547k|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|   547k|        : base(std::in_place, std::forward<U>(val)),
 1428|   547k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   547k|    {
 1430|   547k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  435|   547k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   547k|    {
  437|   547k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   547k|    {
 1177|   547k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|   547k|    {
 1598|   547k|        return has_value();
 1599|   547k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.09M|    {
  485|  1.09M|        return m_has_value;
  486|  1.09M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|   547k|    {
 1663|   547k|        return std::move(value());
 1664|   547k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|   547k|    {
 1627|   547k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   547k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   547k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   547k|        return this->get_value();
 1629|   547k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   547k|    {
  451|   547k|        return m_value;
  452|   547k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1822|   711k|    {
 1823|   711k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|   711k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSI_OT0_:
 1322|   711k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   711k|    else {
 1333|   711k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   711k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   711k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 711k]
  |  |  ------------------
  ------------------
 1335|   711k|                   ? result(*std::forward<Exp>(exp))
 1336|   711k|                   : result(unexpect,
 1337|   711k|                            trivial_invoke(std::forward<F>(f),
 1338|   711k|                                           std::forward<Exp>(exp).error()));
 1339|   711k|    }
 1340|   711k|}
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1652|   271k|    {
 1653|   271k|        return value();
 1654|   271k|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3663|   105k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1672|  11.0k|    {
 1673|  11.0k|        return &value();
 1674|  11.0k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2723|   441k|    {
 2724|   441k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   441k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   441k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2704|   441k|    {
 2705|   441k|        return decay_copy(t.begin());
 2706|   441k|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEu7__decayIT_EOS8_:
 1948|   441k|{
 1949|   441k|    return SCN_FWD(t);
  ------------------
  |  |  930|   441k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|   441k|}
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3663|   241k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|   547k|    {
 1837|   547k|        return detail::transform_error_impl(std::move(*this),
 1838|   547k|                                            std::forward<F>(f));
 1839|   547k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1322|   547k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   547k|    else {
 1333|   547k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   547k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   547k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 547k, False: 0]
  |  |  ------------------
  ------------------
 1335|   547k|                   ? result(*std::forward<Exp>(exp))
 1336|   547k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|   547k|    }
 1340|   547k|}
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|   547k|        : base(std::in_place, std::forward<U>(val)),
 1428|   547k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   547k|    {
 1430|   547k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  435|   547k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   547k|    {
  437|   547k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   547k|    {
 1177|   547k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|   547k|    {
 1598|   547k|        return has_value();
 1599|   547k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.09M|    {
  485|  1.09M|        return m_has_value;
  486|  1.09M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|   547k|    {
 1663|   547k|        return std::move(value());
 1664|   547k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|   547k|    {
 1627|   547k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   547k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   547k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   547k|        return this->get_value();
 1629|   547k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   547k|    {
  451|   547k|        return m_value;
  452|   547k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1822|   622k|    {
 1823|   622k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|   622k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSH_OT0_:
 1322|   622k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   622k|    else {
 1333|   622k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   622k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   622k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 622k]
  |  |  ------------------
  ------------------
 1335|   622k|                   ? result(*std::forward<Exp>(exp))
 1336|   622k|                   : result(unexpect,
 1337|   622k|                            trivial_invoke(std::forward<F>(f),
 1338|   622k|                                           std::forward<Exp>(exp).error()));
 1339|   622k|    }
 1340|   622k|}
_ZN3scn2v313scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3642|   622k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  928|   622k|    static_cast<    \
  |  |  929|   622k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3643|   622k|    {
 3644|   622k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1652|   271k|    {
 1653|   271k|        return value();
 1654|   271k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1672|  3.79k|    {
 1673|  3.79k|        return &value();
 1674|  3.79k|    }
_ZN3scn2v313scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3642|   711k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  928|   711k|    static_cast<    \
  |  |  929|   711k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3643|   711k|    {
 3644|   711k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IivEEOT_:
 1427|   109k|        : base(std::in_place, std::forward<U>(val)),
 1428|   109k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   109k|    {
 1430|   109k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJiEvEENSt3__110in_place_tEDpOT_:
  435|   109k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   109k|    {
  437|   109k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA29_KcEEEDaDpOT_:
 3649|   120k|{
 3650|   120k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|   120k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|   120k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   881k|    {
 2855|   881k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   881k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   881k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   881k|    {
 2836|   881k|        return t.data();
 2837|   881k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5475|  1.91M|    {
 5476|  1.91M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  1.91M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.91M]
  |  |  ------------------
  ------------------
 5477|      0|            return max_size();
 5478|      0|        }
 5479|       |
 5480|  1.91M|        return static_cast<std::size_t>(m_desc &
 5481|  1.91M|                                        ((1 << detail::packed_arg_bits) - 1));
 5482|  1.91M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5500|  3.83M|    {
 5501|  3.83M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5502|  3.83M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5443|  1.91M|    {
 5444|  1.91M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  1.91M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.91M]
  |  |  ------------------
  ------------------
 5445|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5446|      0|                return m_args[id];
 5447|      0|            }
 5448|      0|            return {};
 5449|      0|        }
 5450|       |
 5451|  1.91M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  1.91M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.91M]
  |  |  ------------------
  ------------------
 5452|      0|            return {};
 5453|      0|        }
 5454|       |
 5455|  1.91M|        const auto t = type(id);
 5456|  1.91M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  1.91M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.91M]
  |  |  ------------------
  ------------------
 5457|      0|            return {};
 5458|      0|        }
 5459|       |
 5460|  1.91M|        basic_scan_arg<Context> arg;
 5461|  1.91M|        arg.m_type = t;
 5462|  1.91M|        if (is_only_builtin()) {
  ------------------
  |  Branch (5462:13): [True: 1.91M, False: 0]
  ------------------
 5463|  1.91M|            arg.m_value.ref_value = m_builtin_values[id];
 5464|  1.91M|        }
 5465|      0|        else {
 5466|      0|            arg.m_value = m_values[id];
 5467|      0|        }
 5468|  1.91M|        return arg;
 5469|  1.91M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5509|  1.91M|    {
 5510|       |        // First (0th) index is size, types start after that
 5511|  1.91M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5512|  1.91M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5513|  1.91M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5514|  1.91M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5504|  1.91M|    {
 5505|  1.91M|        return (m_desc & detail::has_custom_types_bit) == 0;
 5506|  1.91M|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5256|  3.62M|    {
 5257|  3.62M|        return m_type != detail::arg_type::none_type;
 5258|  3.62M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|   292k|{
 8428|   292k|#define SCN_VISIT(Type)                                         \
 8429|   292k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|   292k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|   292k|    }                                                           \
 8432|   292k|    else {                                                      \
 8433|   292k|        return vis(monostate_val);                              \
 8434|   292k|    }
 8435|       |
 8436|   292k|    monostate monostate_val{};
 8437|       |
 8438|   292k|    switch (arg.m_type) {
 8439|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 0, False: 292k]
  ------------------
 8440|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8441|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 292k]
  ------------------
 8442|      0|            SCN_VISIT(short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8443|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 0, False: 292k]
  ------------------
 8444|      0|            SCN_VISIT(int);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8445|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 292k]
  ------------------
 8446|      0|            SCN_VISIT(long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8447|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 0, False: 292k]
  ------------------
 8448|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8449|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 0, False: 292k]
  ------------------
 8450|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8451|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 292k]
  ------------------
 8452|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8453|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 0, False: 292k]
  ------------------
 8454|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8455|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 292k]
  ------------------
 8456|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8457|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 0, False: 292k]
  ------------------
 8458|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8459|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 292k]
  ------------------
 8460|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8461|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 292k]
  ------------------
 8462|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8463|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 292k]
  ------------------
 8464|      0|            SCN_VISIT(char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8465|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 292k]
  ------------------
 8466|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8467|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 292k]
  ------------------
 8468|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8469|  94.5k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 94.5k, False: 197k]
  ------------------
 8470|  94.5k|            SCN_VISIT(float);
  ------------------
  |  | 8429|  94.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  94.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  94.5k|    }                                                           \
  |  | 8432|  94.5k|    else {                                                      \
  |  | 8433|  94.5k|        return vis(monostate_val);                              \
  |  | 8434|  94.5k|    }
  ------------------
 8471|   192k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 98.1k, False: 194k]
  ------------------
 8472|   192k|            SCN_VISIT(double);
  ------------------
  |  | 8429|   192k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   192k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   192k|    }                                                           \
  |  | 8432|   192k|    else {                                                      \
  |  | 8433|   192k|        return vis(monostate_val);                              \
  |  | 8434|   192k|    }
  ------------------
 8473|   292k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 99.7k, False: 192k]
  ------------------
 8474|   292k|            SCN_VISIT(long double);
  ------------------
  |  | 8429|   292k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   292k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   292k|    }                                                           \
  |  | 8432|   292k|    else {                                                      \
  |  | 8433|   292k|        return vis(monostate_val);                              \
  |  | 8434|   292k|    }
  ------------------
 8475|   292k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 292k]
  ------------------
 8476|   292k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|   292k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   292k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   292k|    }                                                           \
  |  | 8432|   292k|    else {                                                      \
  |  | 8433|   292k|        return vis(monostate_val);                              \
  |  | 8434|   292k|    }
  ------------------
 8477|   292k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 292k]
  ------------------
 8478|   292k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|   292k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   292k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   292k|    }                                                           \
  |  | 8432|   292k|    else {                                                      \
  |  | 8433|   292k|        return vis(monostate_val);                              \
  |  | 8434|   292k|    }
  ------------------
 8479|   292k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 292k]
  ------------------
 8480|   292k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|   292k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   292k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   292k|    }                                                           \
  |  | 8432|   292k|    else {                                                      \
  |  | 8433|   292k|        return vis(monostate_val);                              \
  |  | 8434|   292k|    }
  ------------------
 8481|   292k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 292k]
  ------------------
 8482|   292k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|   292k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   292k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   292k|    }                                                           \
  |  | 8432|   292k|    else {                                                      \
  |  | 8433|   292k|        return vis(monostate_val);                              \
  |  | 8434|   292k|    }
  ------------------
 8483|   292k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 292k]
  ------------------
 8484|   292k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|   292k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   292k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   292k|    }                                                           \
  |  | 8432|   292k|    else {                                                      \
  |  | 8433|   292k|        return vis(monostate_val);                              \
  |  | 8434|   292k|    }
  ------------------
 8485|   292k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 292k]
  ------------------
 8486|   292k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|   292k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   292k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   292k|    }                                                           \
  |  | 8432|   292k|    else {                                                      \
  |  | 8433|   292k|        return vis(monostate_val);                              \
  |  | 8434|   292k|    }
  ------------------
 8487|       |
 8488|   292k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 292k]
  ------------------
 8489|   292k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|   292k|            return vis(
 8491|   292k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 292k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 292k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|   292k|            SCN_CLANG_POP
 8506|   292k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5553|  1.50M|        : m_format{format}, m_next_arg_id{next_arg_id}
 5554|  1.50M|    {
 5555|  1.50M|    }
_ZN3scn2v318basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8147|   813k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  928|   813k|    static_cast<    \
  |  |  929|   813k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8148|   813k|    {
 8149|   813k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8065|  1.50M|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|  1.50M|    static_cast<    \
  |  |  929|  1.50M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|  1.50M|    static_cast<    \
  |  |  929|  1.50M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8066|  1.50M|    {
 8067|  1.50M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE3getEv:
 4352|  1.13M|{
 4353|  1.13M|    if (is_contiguous()) {
  ------------------
  |  Branch (4353:9): [True: 0, False: 1.13M]
  ------------------
 4354|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4355|      0|                                ranges::default_sentinel};
 4356|      0|    }
 4357|  1.13M|    return ranges::subrange{forward_iterator{this, 0},
 4358|  1.13M|                            ranges::default_sentinel};
 4359|  1.13M|}
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4183|  1.13M|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4184|  1.13M|    {
 4185|  1.13M|        SCN_EXPECT(parent);
  ------------------
  |  |  924|  1.13M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.13M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4186|  1.13M|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|  1.13M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.13M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4187|  1.13M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|   316k|{
 8428|   316k|#define SCN_VISIT(Type)                                         \
 8429|   316k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|   316k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|   316k|    }                                                           \
 8432|   316k|    else {                                                      \
 8433|   316k|        return vis(monostate_val);                              \
 8434|   316k|    }
 8435|       |
 8436|   316k|    monostate monostate_val{};
 8437|       |
 8438|   316k|    switch (arg.m_type) {
 8439|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 0, False: 316k]
  ------------------
 8440|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8441|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 316k]
  ------------------
 8442|      0|            SCN_VISIT(short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8443|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 0, False: 316k]
  ------------------
 8444|      0|            SCN_VISIT(int);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8445|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 316k]
  ------------------
 8446|      0|            SCN_VISIT(long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8447|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 0, False: 316k]
  ------------------
 8448|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8449|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 0, False: 316k]
  ------------------
 8450|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8451|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 316k]
  ------------------
 8452|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8453|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 0, False: 316k]
  ------------------
 8454|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8455|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 316k]
  ------------------
 8456|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8457|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 0, False: 316k]
  ------------------
 8458|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8459|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 316k]
  ------------------
 8460|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8461|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 316k]
  ------------------
 8462|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8463|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 316k]
  ------------------
 8464|      0|            SCN_VISIT(char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8465|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 316k]
  ------------------
 8466|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8467|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 316k]
  ------------------
 8468|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8469|   102k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 102k, False: 214k]
  ------------------
 8470|   102k|            SCN_VISIT(float);
  ------------------
  |  | 8429|   102k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   102k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   102k|    }                                                           \
  |  | 8432|   102k|    else {                                                      \
  |  | 8433|   102k|        return vis(monostate_val);                              \
  |  | 8434|   102k|    }
  ------------------
 8471|   208k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 106k, False: 209k]
  ------------------
 8472|   208k|            SCN_VISIT(double);
  ------------------
  |  | 8429|   208k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   208k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   208k|    }                                                           \
  |  | 8432|   208k|    else {                                                      \
  |  | 8433|   208k|        return vis(monostate_val);                              \
  |  | 8434|   208k|    }
  ------------------
 8473|   316k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 107k, False: 208k]
  ------------------
 8474|   316k|            SCN_VISIT(long double);
  ------------------
  |  | 8429|   316k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   316k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   316k|    }                                                           \
  |  | 8432|   316k|    else {                                                      \
  |  | 8433|   316k|        return vis(monostate_val);                              \
  |  | 8434|   316k|    }
  ------------------
 8475|   316k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 316k]
  ------------------
 8476|   316k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|   316k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   316k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   316k|    }                                                           \
  |  | 8432|   316k|    else {                                                      \
  |  | 8433|   316k|        return vis(monostate_val);                              \
  |  | 8434|   316k|    }
  ------------------
 8477|   316k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 316k]
  ------------------
 8478|   316k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|   316k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   316k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   316k|    }                                                           \
  |  | 8432|   316k|    else {                                                      \
  |  | 8433|   316k|        return vis(monostate_val);                              \
  |  | 8434|   316k|    }
  ------------------
 8479|   316k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 316k]
  ------------------
 8480|   316k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|   316k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   316k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   316k|    }                                                           \
  |  | 8432|   316k|    else {                                                      \
  |  | 8433|   316k|        return vis(monostate_val);                              \
  |  | 8434|   316k|    }
  ------------------
 8481|   316k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 316k]
  ------------------
 8482|   316k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|   316k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   316k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   316k|    }                                                           \
  |  | 8432|   316k|    else {                                                      \
  |  | 8433|   316k|        return vis(monostate_val);                              \
  |  | 8434|   316k|    }
  ------------------
 8483|   316k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 316k]
  ------------------
 8484|   316k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|   316k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   316k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   316k|    }                                                           \
  |  | 8432|   316k|    else {                                                      \
  |  | 8433|   316k|        return vis(monostate_val);                              \
  |  | 8434|   316k|    }
  ------------------
 8485|   316k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 316k]
  ------------------
 8486|   316k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|   316k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   316k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   316k|    }                                                           \
  |  | 8432|   316k|    else {                                                      \
  |  | 8433|   316k|        return vis(monostate_val);                              \
  |  | 8434|   316k|    }
  ------------------
 8487|       |
 8488|   316k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 316k]
  ------------------
 8489|   316k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|   316k|            return vis(
 8491|   316k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 316k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 316k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|   316k|            SCN_CLANG_POP
 8506|   316k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7054|   695k|{
 7055|   695k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7056|   695k|    handler.check_args_exhausted();
 7057|   695k|    return handler.get_error();
 7058|   695k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7020|   695k|{
 7021|       |    // TODO: memchr fast path with a larger (> 32) format string
 7022|       |
 7023|   695k|    auto begin = format.data();
 7024|   695k|    auto it = begin;
 7025|   695k|    const auto end = format.data() + format.size();
 7026|       |
 7027|  1.32M|    while (it != end) {
  ------------------
  |  Branch (7027:12): [True: 695k, False: 629k]
  ------------------
 7028|   695k|        const auto ch = *it++;
 7029|   695k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7029:13): [True: 695k, False: 0]
  ------------------
 7030|   695k|            handler.on_literal_text(begin, it - 1);
 7031|       |
 7032|   695k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7033|   695k|            if (!handler) {
  ------------------
  |  Branch (7033:17): [True: 66.8k, False: 629k]
  ------------------
 7034|  66.8k|                return;
 7035|  66.8k|            }
 7036|   695k|        }
 7037|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7037:18): [True: 0, False: 0]
  ------------------
 7038|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7039|      0|                handler.on_error("Unmatched '}' in format string");
 7040|      0|                return;
 7041|      0|            }
 7042|       |
 7043|      0|            handler.on_literal_text(begin, it);
 7044|      0|            begin = ++it;
 7045|      0|        }
 7046|   695k|    }
 7047|       |
 7048|   629k|    handler.on_literal_text(begin, end);
 7049|   629k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6952|   695k|{
 6953|   695k|    struct id_adapter {
 6954|   695k|        constexpr void operator()()
 6955|   695k|        {
 6956|   695k|            arg_id = handler.on_arg_id();
 6957|   695k|        }
 6958|   695k|        constexpr void operator()(std::size_t id)
 6959|   695k|        {
 6960|   695k|            arg_id = handler.on_arg_id(id);
 6961|   695k|        }
 6962|       |
 6963|   695k|        constexpr void on_error(const char* msg)
 6964|   695k|        {
 6965|   695k|            SCN_UNLIKELY_ATTR
 6966|   695k|            handler.on_error(msg);
 6967|   695k|        }
 6968|       |
 6969|   695k|        Handler& handler;
 6970|   695k|        std::size_t arg_id;
 6971|   695k|    };
 6972|       |
 6973|   695k|    ++begin;
 6974|   695k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   695k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 695k]
  |  |  ------------------
  ------------------
 6975|      0|        handler.on_error("Unexpected end of replacement field");
 6976|      0|        return begin;
 6977|      0|    }
 6978|       |
 6979|   695k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:9): [True: 0, False: 695k]
  ------------------
 6980|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6981|      0|    }
 6982|   695k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6982:14): [True: 0, False: 695k]
  ------------------
 6983|      0|        handler.on_literal_text(begin, begin + 1);
 6984|      0|    }
 6985|   695k|    else {
 6986|   695k|        auto adapter = id_adapter{handler, 0};
 6987|   695k|        begin = parse_arg_id(begin, end, adapter);
 6988|       |
 6989|   695k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   695k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 695k]
  |  |  ------------------
  ------------------
 6990|      0|            handler.on_error("Missing '}' in format string");
 6991|      0|            return begin;
 6992|      0|        }
 6993|       |
 6994|   695k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6994:13): [True: 0, False: 695k]
  ------------------
 6995|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6996|      0|        }
 6997|   695k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6997:18): [True: 695k, False: 0]
  ------------------
 6998|   695k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   695k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 695k]
  |  |  ------------------
  ------------------
 6999|      0|                handler.on_error("Unexpected end of replacement field");
 7000|      0|                return begin;
 7001|      0|            }
 7002|   695k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7003|   695k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  1.39M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 695k]
  |  |  |  Branch (859:45): [True: 0, False: 695k]
  |  |  |  Branch (859:45): [True: 0, False: 695k]
  |  |  ------------------
  ------------------
 7004|      0|                handler.on_error("Unknown format specifier");
 7005|      0|                return begin;
 7006|      0|            }
 7007|   695k|        }
 7008|      0|        else {
 7009|      0|            SCN_UNLIKELY_ATTR
 7010|      0|            handler.on_error("Missing '}' in format string");
 7011|      0|            return begin;
 7012|      0|        }
 7013|   695k|    }
 7014|   695k|    return begin + 1;
 7015|   695k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 8049|  1.50M|    {
 8050|  1.50M|        return m_args.get(id);
 8051|  1.50M|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8059|  1.50M|    {
 8060|  1.50M|        return m_locale;
 8061|  1.50M|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5575|  1.50M|    {
 5576|  1.50M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  1.50M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.50M]
  |  |  ------------------
  ------------------
 5577|      0|            on_error(
 5578|      0|                "Cannot switch from manual to automatic argument indexing");
 5579|      0|            return 0;
 5580|      0|        }
 5581|       |
 5582|  1.50M|        auto id = static_cast<size_t>(m_next_arg_id++);
 5583|  1.50M|        do_check_arg_id(id);
 5584|  1.50M|        return id;
 5585|  1.50M|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6063|  1.50M|{
 6064|  1.50M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6064:9): [Folded - Ignored]
  ------------------
 6065|  1.50M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6065:10): [Folded - Ignored]
  |  Branch (6065:22): [Folded - Ignored]
  ------------------
 6066|       |        // The cast below will cause an error on gcc pre-12
 6067|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6068|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6068:13): [True: 0, False: 0]
  ------------------
 6069|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6070|      0|            SCN_UNLIKELY_ATTR
 6071|      0|            on_error("Argument not found");
 6072|      0|        }
 6073|      0|    }
 6074|  1.50M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6453|   695k|{
 6454|   695k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   695k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   695k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6455|   695k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6455:9): [True: 695k, False: 0]
  |  Branch (6455:26): [True: 0, False: 695k]
  ------------------
 6456|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6457|      0|    }
 6458|       |
 6459|   695k|    handler();
 6460|   695k|    return begin;
 6461|   695k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6955|   695k|        {
 6956|   695k|            arg_id = handler.on_arg_id();
 6957|   695k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5261|  3.01M|    {
 5262|  3.01M|        return m_type;
 5263|  3.01M|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5570|  1.50M|    {
 5571|  1.50M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5572|  1.50M|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5559|  3.01M|    {
 5560|  3.01M|        return m_format.data();
 5561|  3.01M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7131|   695k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|   695k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7132|   695k|    {
 7133|   695k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   695k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   695k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7134|   695k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6868|   695k|{
 6869|   695k|    auto do_presentation = [&]() -> const CharT* {
 6870|   695k|        if (*begin == CharT{'['}) {
 6871|   695k|            auto set = parse_presentation_set(begin, end, handler);
 6872|   695k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6873|       |                // clang-format off
 6874|   695k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|   695k|                return begin;
 6877|   695k|            }
 6878|   695k|            handler.on_character_set_string(set);
 6879|   695k|            return begin;
 6880|   695k|        }
 6881|   695k|        if (*begin == CharT{'/'}) {
 6882|   695k|            return parse_presentation_regex(begin, end, handler);
 6883|   695k|        }
 6884|   695k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   695k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6886|   695k|            handler.on_error("Invalid type specifier in format string");
 6887|   695k|            return begin;
 6888|   695k|        }
 6889|   695k|        handler.on_type(type);
 6890|   695k|        return begin;
 6891|   695k|    };
 6892|       |
 6893|   695k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6893:9): [True: 695k, False: 0]
  |  Branch (6893:28): [True: 695k, False: 0]
  ------------------
 6894|   695k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6894:9): [True: 695k, False: 0]
  |  Branch (6894:36): [True: 501k, False: 194k]
  ------------------
 6895|   501k|        return do_presentation();
 6896|   501k|    }
 6897|       |
 6898|   194k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   194k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 194k]
  |  |  ------------------
  ------------------
 6899|      0|        handler.on_error("Unexpected end of format string");
 6900|      0|        return begin;
 6901|      0|    }
 6902|       |
 6903|   194k|    begin = parse_align(begin, end, handler);
 6904|   194k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   194k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 194k]
  |  |  ------------------
  ------------------
 6905|      0|        handler.on_error("Unexpected end of format string");
 6906|      0|        return begin;
 6907|      0|    }
 6908|       |
 6909|   194k|    begin = parse_width(begin, end, handler);
 6910|   194k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   194k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 194k]
  |  |  ------------------
  ------------------
 6911|      0|        handler.on_error("Unexpected end of format string");
 6912|      0|        return begin;
 6913|      0|    }
 6914|       |
 6915|   194k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6915:9): [True: 0, False: 194k]
  ------------------
 6916|      0|        ++begin;
 6917|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6918|      0|            handler.on_error("Unexpected end of format string");
 6919|      0|            return begin;
 6920|      0|        }
 6921|      0|        begin = parse_precision(begin, end, handler);
 6922|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6923|      0|            handler.on_error("Unexpected end of format string");
 6924|      0|            return begin;
 6925|      0|        }
 6926|      0|    }
 6927|       |
 6928|   194k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6928:9): [True: 194k, False: 0]
  ------------------
 6929|   194k|        handler.on_localized();
 6930|   194k|        ++begin;
 6931|   194k|    }
 6932|   194k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   194k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 194k]
  |  |  ------------------
  ------------------
 6933|      0|        handler.on_error("Unexpected end of format string");
 6934|      0|        return begin;
 6935|      0|    }
 6936|       |
 6937|   194k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6937:9): [True: 194k, False: 0]
  |  Branch (6937:25): [True: 0, False: 194k]
  ------------------
 6938|      0|        do_presentation();
 6939|      0|    }
 6940|   194k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   194k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 194k]
  |  |  ------------------
  ------------------
 6941|      0|        handler.on_error("Unexpected end of format string");
 6942|      0|        return begin;
 6943|      0|    }
 6944|       |
 6945|   194k|    return begin;
 6946|   194k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6517|  1.50M|{
 6518|  1.50M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6518:13): [True: 1.08M, False: 427k]
  |  Branch (6518:33): [True: 1.08M, False: 0]
  ------------------
 6519|  1.50M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6519:13): [True: 427k, False: 0]
  |  Branch (6519:33): [True: 427k, False: 0]
  ------------------
 6520|  1.50M|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6869|   501k|    auto do_presentation = [&]() -> const CharT* {
 6870|   501k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 501k]
  ------------------
 6871|      0|            auto set = parse_presentation_set(begin, end, handler);
 6872|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6873|       |                // clang-format off
 6874|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|      0|                return begin;
 6877|      0|            }
 6878|      0|            handler.on_character_set_string(set);
 6879|      0|            return begin;
 6880|      0|        }
 6881|   501k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6881:13): [True: 0, False: 501k]
  ------------------
 6882|      0|            return parse_presentation_regex(begin, end, handler);
 6883|      0|        }
 6884|   501k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   501k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   501k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 501k]
  |  |  ------------------
  ------------------
 6886|      0|            handler.on_error("Invalid type specifier in format string");
 6887|      0|            return begin;
 6888|      0|        }
 6889|   501k|        handler.on_type(type);
 6890|   501k|        return begin;
 6891|   501k|    };
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6465|  1.08M|{
 6466|  1.08M|    switch (type) {
 6467|      0|        case 'b':
  ------------------
  |  Branch (6467:9): [True: 0, False: 1.08M]
  ------------------
 6468|      0|        case 'B':
  ------------------
  |  Branch (6468:9): [True: 0, False: 1.08M]
  ------------------
 6469|      0|            return presentation_type::int_binary;
 6470|      0|        case 'd':
  ------------------
  |  Branch (6470:9): [True: 0, False: 1.08M]
  ------------------
 6471|      0|            return presentation_type::int_decimal;
 6472|      0|        case 'i':
  ------------------
  |  Branch (6472:9): [True: 0, False: 1.08M]
  ------------------
 6473|      0|            return presentation_type::int_generic;
 6474|      0|        case 'u':
  ------------------
  |  Branch (6474:9): [True: 0, False: 1.08M]
  ------------------
 6475|      0|            return presentation_type::int_unsigned_decimal;
 6476|      0|        case 'o':
  ------------------
  |  Branch (6476:9): [True: 0, False: 1.08M]
  ------------------
 6477|      0|            return presentation_type::int_octal;
 6478|      0|        case 'x':
  ------------------
  |  Branch (6478:9): [True: 0, False: 1.08M]
  ------------------
 6479|      0|        case 'X':
  ------------------
  |  Branch (6479:9): [True: 0, False: 1.08M]
  ------------------
 6480|      0|            return presentation_type::int_hex;
 6481|      0|        case 'r':
  ------------------
  |  Branch (6481:9): [True: 0, False: 1.08M]
  ------------------
 6482|      0|        case 'R':
  ------------------
  |  Branch (6482:9): [True: 0, False: 1.08M]
  ------------------
 6483|      0|            return presentation_type::int_arbitrary_base;
 6484|   462k|        case 'a':
  ------------------
  |  Branch (6484:9): [True: 462k, False: 620k]
  ------------------
 6485|   462k|        case 'A':
  ------------------
  |  Branch (6485:9): [True: 0, False: 1.08M]
  ------------------
 6486|   462k|            return presentation_type::float_hex;
 6487|  41.8k|        case 'e':
  ------------------
  |  Branch (6487:9): [True: 41.8k, False: 1.04M]
  ------------------
 6488|  41.8k|        case 'E':
  ------------------
  |  Branch (6488:9): [True: 0, False: 1.08M]
  ------------------
 6489|  41.8k|            return presentation_type::float_scientific;
 6490|   219k|        case 'f':
  ------------------
  |  Branch (6490:9): [True: 219k, False: 862k]
  ------------------
 6491|   219k|        case 'F':
  ------------------
  |  Branch (6491:9): [True: 0, False: 1.08M]
  ------------------
 6492|   219k|            return presentation_type::float_fixed;
 6493|   358k|        case 'g':
  ------------------
  |  Branch (6493:9): [True: 358k, False: 723k]
  ------------------
 6494|   358k|        case 'G':
  ------------------
  |  Branch (6494:9): [True: 0, False: 1.08M]
  ------------------
 6495|   358k|            return presentation_type::float_general;
 6496|      0|        case 's':
  ------------------
  |  Branch (6496:9): [True: 0, False: 1.08M]
  ------------------
 6497|      0|            return presentation_type::string;
 6498|      0|        case 'c':
  ------------------
  |  Branch (6498:9): [True: 0, False: 1.08M]
  ------------------
 6499|      0|            return presentation_type::character;
 6500|      0|        case '?':
  ------------------
  |  Branch (6500:9): [True: 0, False: 1.08M]
  ------------------
 6501|      0|            return presentation_type::escaped_character;
 6502|      0|        case 'p':
  ------------------
  |  Branch (6502:9): [True: 0, False: 1.08M]
  ------------------
 6503|      0|            return presentation_type::pointer;
 6504|      0|        case '[':
  ------------------
  |  Branch (6504:9): [True: 0, False: 1.08M]
  ------------------
 6505|      0|        case '/':
  ------------------
  |  Branch (6505:9): [True: 0, False: 1.08M]
  ------------------
 6506|       |            // Should be handled by parse_presentation_set and
 6507|       |            // parse_presentation_regex
 6508|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6509|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6510|      0|        default:
  ------------------
  |  Branch (6510:9): [True: 0, False: 1.08M]
  ------------------
 6511|      0|            return presentation_type::none;
 6512|  1.08M|    }
 6513|  1.08M|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6542|   194k|{
 6543|   194k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   194k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   194k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6544|       |
 6545|   194k|    auto check_align = [](wchar_t ch) {
 6546|   194k|        switch (ch) {
 6547|   194k|            case L'<':
 6548|   194k|                return align_type::left;
 6549|   194k|            case L'>':
 6550|   194k|                return align_type::right;
 6551|   194k|            case L'^':
 6552|   194k|                return align_type::center;
 6553|   194k|            default:
 6554|   194k|                return align_type::none;
 6555|   194k|        }
 6556|   194k|    };
 6557|       |
 6558|   194k|    auto potential_fill_len = code_point_length(begin, end);
 6559|   194k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   389k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 194k]
  |  |  |  Branch (859:45): [True: 0, False: 194k]
  |  |  |  Branch (859:45): [True: 0, False: 194k]
  |  |  ------------------
  ------------------
 6560|   194k|                     std::distance(begin, end) < potential_fill_len)) {
 6561|      0|        handler.on_error("Invalid encoding in fill character");
 6562|      0|        return begin;
 6563|      0|    }
 6564|       |
 6565|   194k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6566|       |
 6567|   194k|    auto potential_fill = std::basic_string_view<CharT>{
 6568|   194k|        begin, static_cast<size_t>(potential_fill_len)};
 6569|   194k|    const auto begin_before_fill = begin;
 6570|   194k|    begin += potential_fill_len;
 6571|       |
 6572|   194k|    if (begin == end) {
  ------------------
  |  Branch (6572:9): [True: 0, False: 194k]
  ------------------
 6573|      0|        return begin_before_fill;
 6574|      0|    }
 6575|       |
 6576|   194k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6577|   194k|    const auto begin_after_fill = begin;
 6578|   194k|    ++begin;
 6579|       |
 6580|   194k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6580:9): [True: 194k, False: 0]
  ------------------
 6581|   194k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   194k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 194k]
  |  |  ------------------
  ------------------
 6582|      0|            handler.on_error("Invalid fill character '{' in format string");
 6583|      0|            return begin;
 6584|      0|        }
 6585|   194k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6585:13): [True: 0, False: 194k]
  ------------------
 6586|      0|            return begin_before_fill;
 6587|      0|        }
 6588|   194k|    }
 6589|       |
 6590|   194k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6590:9): [True: 194k, False: 0]
  ------------------
 6591|   194k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6591:13): [True: 0, False: 194k]
  ------------------
 6592|      0|            handler.on_align(potential_align_on_fill);
 6593|      0|            return begin_after_fill;
 6594|      0|        }
 6595|   194k|        return begin_before_fill;
 6596|   194k|    }
 6597|       |
 6598|      0|    handler.on_fill(potential_fill);
 6599|      0|    handler.on_align(potential_align_after_fill);
 6600|      0|    return begin;
 6601|   194k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6524|   427k|{
 6525|   427k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   427k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   427k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6526|       |    if constexpr (sizeof(CharT) != 1) {
 6527|       |        return 1;
 6528|       |    }
 6529|   427k|    else {
 6530|   427k|        const auto lengths =
 6531|   427k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6532|   427k|            "\3\4";
 6533|   427k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6534|   427k|        return len;
 6535|   427k|    }
 6536|   427k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6545|   389k|    auto check_align = [](wchar_t ch) {
 6546|   389k|        switch (ch) {
 6547|      0|            case L'<':
  ------------------
  |  Branch (6547:13): [True: 0, False: 389k]
  ------------------
 6548|      0|                return align_type::left;
 6549|      0|            case L'>':
  ------------------
  |  Branch (6549:13): [True: 0, False: 389k]
  ------------------
 6550|      0|                return align_type::right;
 6551|      0|            case L'^':
  ------------------
  |  Branch (6551:13): [True: 0, False: 389k]
  ------------------
 6552|      0|                return align_type::center;
 6553|   389k|            default:
  ------------------
  |  Branch (6553:13): [True: 389k, False: 0]
  ------------------
 6554|   389k|                return align_type::none;
 6555|   389k|        }
 6556|   389k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6607|   194k|{
 6608|   194k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   194k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   194k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6609|       |
 6610|   194k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6610:9): [True: 194k, False: 0]
  |  Branch (6610:33): [True: 0, False: 194k]
  ------------------
 6611|      0|        int width = parse_simple_int(begin, end);
 6612|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6613|      0|            handler.on_width(width);
 6614|      0|        }
 6615|      0|        else {
 6616|      0|            handler.on_error("Invalid field width");
 6617|      0|            return begin;
 6618|      0|        }
 6619|      0|    }
 6620|   194k|    return begin;
 6621|   194k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7137|   194k|    {
 7138|   194k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7139|   194k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7139:13): [True: 194k, False: 0]
  ------------------
 7140|   194k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7140:13): [True: 194k, False: 0]
  ------------------
 7141|   194k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7141:13): [True: 0, False: 194k]
  ------------------
 7142|   194k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7142:13): [True: 0, False: 0]
  ------------------
 7143|      0|            SCN_UNLIKELY_ATTR
 7144|       |            // clang-format off
 7145|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7146|       |            // clang-format on
 7147|      0|        }
 7148|       |
 7149|   194k|        Handler::on_localized();
 7150|   194k|    }
_ZN3scn2v36detail12specs_setter12on_localizedILb1EEEvv:
 6282|   621k|    {
 6283|   621k|        if constexpr (!SCN_DISABLE_LOCALE) {
 6284|   621k|            m_specs.localized = true;
 6285|       |        }
 6286|       |        else {
 6287|       |            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 6288|       |        }
 6289|   621k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|   695k|{
 8428|   695k|#define SCN_VISIT(Type)                                         \
 8429|   695k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|   695k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|   695k|    }                                                           \
 8432|   695k|    else {                                                      \
 8433|   695k|        return vis(monostate_val);                              \
 8434|   695k|    }
 8435|       |
 8436|   695k|    monostate monostate_val{};
 8437|       |
 8438|   695k|    switch (arg.m_type) {
 8439|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 0, False: 695k]
  ------------------
 8440|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8441|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 695k]
  ------------------
 8442|      0|            SCN_VISIT(short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8443|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 0, False: 695k]
  ------------------
 8444|      0|            SCN_VISIT(int);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8445|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 695k]
  ------------------
 8446|      0|            SCN_VISIT(long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8447|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 0, False: 695k]
  ------------------
 8448|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8449|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 0, False: 695k]
  ------------------
 8450|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8451|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 695k]
  ------------------
 8452|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8453|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 0, False: 695k]
  ------------------
 8454|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8455|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 695k]
  ------------------
 8456|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8457|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 0, False: 695k]
  ------------------
 8458|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8459|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 695k]
  ------------------
 8460|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8461|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 695k]
  ------------------
 8462|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8463|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 695k]
  ------------------
 8464|      0|            SCN_VISIT(char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8465|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 695k]
  ------------------
 8466|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8467|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 695k]
  ------------------
 8468|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8469|   227k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 227k, False: 468k]
  ------------------
 8470|   227k|            SCN_VISIT(float);
  ------------------
  |  | 8429|   227k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   227k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   227k|    }                                                           \
  |  | 8432|   227k|    else {                                                      \
  |  | 8433|   227k|        return vis(monostate_val);                              \
  |  | 8434|   227k|    }
  ------------------
 8471|   460k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 233k, False: 462k]
  ------------------
 8472|   460k|            SCN_VISIT(double);
  ------------------
  |  | 8429|   460k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   460k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   460k|    }                                                           \
  |  | 8432|   460k|    else {                                                      \
  |  | 8433|   460k|        return vis(monostate_val);                              \
  |  | 8434|   460k|    }
  ------------------
 8473|   695k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 235k, False: 460k]
  ------------------
 8474|   695k|            SCN_VISIT(long double);
  ------------------
  |  | 8429|   695k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   695k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   695k|    }                                                           \
  |  | 8432|   695k|    else {                                                      \
  |  | 8433|   695k|        return vis(monostate_val);                              \
  |  | 8434|   695k|    }
  ------------------
 8475|   695k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 695k]
  ------------------
 8476|   695k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|   695k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   695k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   695k|    }                                                           \
  |  | 8432|   695k|    else {                                                      \
  |  | 8433|   695k|        return vis(monostate_val);                              \
  |  | 8434|   695k|    }
  ------------------
 8477|   695k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 695k]
  ------------------
 8478|   695k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|   695k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   695k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   695k|    }                                                           \
  |  | 8432|   695k|    else {                                                      \
  |  | 8433|   695k|        return vis(monostate_val);                              \
  |  | 8434|   695k|    }
  ------------------
 8479|   695k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 695k]
  ------------------
 8480|   695k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|   695k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   695k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   695k|    }                                                           \
  |  | 8432|   695k|    else {                                                      \
  |  | 8433|   695k|        return vis(monostate_val);                              \
  |  | 8434|   695k|    }
  ------------------
 8481|   695k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 695k]
  ------------------
 8482|   695k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|   695k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   695k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   695k|    }                                                           \
  |  | 8432|   695k|    else {                                                      \
  |  | 8433|   695k|        return vis(monostate_val);                              \
  |  | 8434|   695k|    }
  ------------------
 8483|   695k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 695k]
  ------------------
 8484|   695k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|   695k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   695k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   695k|    }                                                           \
  |  | 8432|   695k|    else {                                                      \
  |  | 8433|   695k|        return vis(monostate_val);                              \
  |  | 8434|   695k|    }
  ------------------
 8485|   695k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 695k]
  ------------------
 8486|   695k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|   695k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   695k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   695k|    }                                                           \
  |  | 8432|   695k|    else {                                                      \
  |  | 8433|   695k|        return vis(monostate_val);                              \
  |  | 8434|   695k|    }
  ------------------
 8487|       |
 8488|   695k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 695k]
  ------------------
 8489|   695k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|   695k|            return vis(
 8491|   695k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 695k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 695k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|   695k|            SCN_CLANG_POP
 8506|   695k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7054|   813k|{
 7055|   813k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7056|   813k|    handler.check_args_exhausted();
 7057|   813k|    return handler.get_error();
 7058|   813k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7020|   813k|{
 7021|       |    // TODO: memchr fast path with a larger (> 32) format string
 7022|       |
 7023|   813k|    auto begin = format.data();
 7024|   813k|    auto it = begin;
 7025|   813k|    const auto end = format.data() + format.size();
 7026|       |
 7027|  1.56M|    while (it != end) {
  ------------------
  |  Branch (7027:12): [True: 813k, False: 746k]
  ------------------
 7028|   813k|        const auto ch = *it++;
 7029|   813k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7029:13): [True: 813k, False: 0]
  ------------------
 7030|   813k|            handler.on_literal_text(begin, it - 1);
 7031|       |
 7032|   813k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7033|   813k|            if (!handler) {
  ------------------
  |  Branch (7033:17): [True: 66.8k, False: 746k]
  ------------------
 7034|  66.8k|                return;
 7035|  66.8k|            }
 7036|   813k|        }
 7037|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7037:18): [True: 0, False: 0]
  ------------------
 7038|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7039|      0|                handler.on_error("Unmatched '}' in format string");
 7040|      0|                return;
 7041|      0|            }
 7042|       |
 7043|      0|            handler.on_literal_text(begin, it);
 7044|      0|            begin = ++it;
 7045|      0|        }
 7046|   813k|    }
 7047|       |
 7048|   746k|    handler.on_literal_text(begin, end);
 7049|   746k|}
_ZN3scn2v318basic_scan_contextIcE10advance_toENS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
 8185|   746k|    {
 8186|   746k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   746k|    static_cast<    \
  |  |  929|   746k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8187|   746k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 6952|   813k|{
 6953|   813k|    struct id_adapter {
 6954|   813k|        constexpr void operator()()
 6955|   813k|        {
 6956|   813k|            arg_id = handler.on_arg_id();
 6957|   813k|        }
 6958|   813k|        constexpr void operator()(std::size_t id)
 6959|   813k|        {
 6960|   813k|            arg_id = handler.on_arg_id(id);
 6961|   813k|        }
 6962|       |
 6963|   813k|        constexpr void on_error(const char* msg)
 6964|   813k|        {
 6965|   813k|            SCN_UNLIKELY_ATTR
 6966|   813k|            handler.on_error(msg);
 6967|   813k|        }
 6968|       |
 6969|   813k|        Handler& handler;
 6970|   813k|        std::size_t arg_id;
 6971|   813k|    };
 6972|       |
 6973|   813k|    ++begin;
 6974|   813k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   813k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 813k]
  |  |  ------------------
  ------------------
 6975|      0|        handler.on_error("Unexpected end of replacement field");
 6976|      0|        return begin;
 6977|      0|    }
 6978|       |
 6979|   813k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:9): [True: 0, False: 813k]
  ------------------
 6980|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6981|      0|    }
 6982|   813k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6982:14): [True: 0, False: 813k]
  ------------------
 6983|      0|        handler.on_literal_text(begin, begin + 1);
 6984|      0|    }
 6985|   813k|    else {
 6986|   813k|        auto adapter = id_adapter{handler, 0};
 6987|   813k|        begin = parse_arg_id(begin, end, adapter);
 6988|       |
 6989|   813k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   813k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 813k]
  |  |  ------------------
  ------------------
 6990|      0|            handler.on_error("Missing '}' in format string");
 6991|      0|            return begin;
 6992|      0|        }
 6993|       |
 6994|   813k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6994:13): [True: 0, False: 813k]
  ------------------
 6995|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6996|      0|        }
 6997|   813k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6997:18): [True: 813k, False: 0]
  ------------------
 6998|   813k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   813k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 813k]
  |  |  ------------------
  ------------------
 6999|      0|                handler.on_error("Unexpected end of replacement field");
 7000|      0|                return begin;
 7001|      0|            }
 7002|   813k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7003|   813k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  1.62M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 813k]
  |  |  |  Branch (859:45): [True: 0, False: 813k]
  |  |  |  Branch (859:45): [True: 0, False: 813k]
  |  |  ------------------
  ------------------
 7004|      0|                handler.on_error("Unknown format specifier");
 7005|      0|                return begin;
 7006|      0|            }
 7007|   813k|        }
 7008|      0|        else {
 7009|      0|            SCN_UNLIKELY_ATTR
 7010|      0|            handler.on_error("Missing '}' in format string");
 7011|      0|            return begin;
 7012|      0|        }
 7013|   813k|    }
 7014|   813k|    return begin + 1;
 7015|   813k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6453|   813k|{
 6454|   813k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   813k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   813k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6455|   813k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6455:9): [True: 813k, False: 0]
  |  Branch (6455:26): [True: 0, False: 813k]
  ------------------
 6456|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6457|      0|    }
 6458|       |
 6459|   813k|    handler();
 6460|   813k|    return begin;
 6461|   813k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6955|   813k|        {
 6956|   813k|            arg_id = handler.on_arg_id();
 6957|   813k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7131|   813k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|   813k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7132|   813k|    {
 7133|   813k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   813k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   813k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7134|   813k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6868|   813k|{
 6869|   813k|    auto do_presentation = [&]() -> const CharT* {
 6870|   813k|        if (*begin == CharT{'['}) {
 6871|   813k|            auto set = parse_presentation_set(begin, end, handler);
 6872|   813k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6873|       |                // clang-format off
 6874|   813k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|   813k|                return begin;
 6877|   813k|            }
 6878|   813k|            handler.on_character_set_string(set);
 6879|   813k|            return begin;
 6880|   813k|        }
 6881|   813k|        if (*begin == CharT{'/'}) {
 6882|   813k|            return parse_presentation_regex(begin, end, handler);
 6883|   813k|        }
 6884|   813k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   813k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6886|   813k|            handler.on_error("Invalid type specifier in format string");
 6887|   813k|            return begin;
 6888|   813k|        }
 6889|   813k|        handler.on_type(type);
 6890|   813k|        return begin;
 6891|   813k|    };
 6892|       |
 6893|   813k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6893:9): [True: 813k, False: 0]
  |  Branch (6893:28): [True: 813k, False: 0]
  ------------------
 6894|   813k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6894:9): [True: 813k, False: 0]
  |  Branch (6894:36): [True: 581k, False: 232k]
  ------------------
 6895|   581k|        return do_presentation();
 6896|   581k|    }
 6897|       |
 6898|   232k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   232k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 232k]
  |  |  ------------------
  ------------------
 6899|      0|        handler.on_error("Unexpected end of format string");
 6900|      0|        return begin;
 6901|      0|    }
 6902|       |
 6903|   232k|    begin = parse_align(begin, end, handler);
 6904|   232k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   232k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 232k]
  |  |  ------------------
  ------------------
 6905|      0|        handler.on_error("Unexpected end of format string");
 6906|      0|        return begin;
 6907|      0|    }
 6908|       |
 6909|   232k|    begin = parse_width(begin, end, handler);
 6910|   232k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   232k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 232k]
  |  |  ------------------
  ------------------
 6911|      0|        handler.on_error("Unexpected end of format string");
 6912|      0|        return begin;
 6913|      0|    }
 6914|       |
 6915|   232k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6915:9): [True: 0, False: 232k]
  ------------------
 6916|      0|        ++begin;
 6917|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6918|      0|            handler.on_error("Unexpected end of format string");
 6919|      0|            return begin;
 6920|      0|        }
 6921|      0|        begin = parse_precision(begin, end, handler);
 6922|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6923|      0|            handler.on_error("Unexpected end of format string");
 6924|      0|            return begin;
 6925|      0|        }
 6926|      0|    }
 6927|       |
 6928|   232k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6928:9): [True: 232k, False: 0]
  ------------------
 6929|   232k|        handler.on_localized();
 6930|   232k|        ++begin;
 6931|   232k|    }
 6932|   232k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   232k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 232k]
  |  |  ------------------
  ------------------
 6933|      0|        handler.on_error("Unexpected end of format string");
 6934|      0|        return begin;
 6935|      0|    }
 6936|       |
 6937|   232k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6937:9): [True: 232k, False: 0]
  |  Branch (6937:25): [True: 0, False: 232k]
  ------------------
 6938|      0|        do_presentation();
 6939|      0|    }
 6940|   232k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   232k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 232k]
  |  |  ------------------
  ------------------
 6941|      0|        handler.on_error("Unexpected end of format string");
 6942|      0|        return begin;
 6943|      0|    }
 6944|       |
 6945|   232k|    return begin;
 6946|   232k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6869|   581k|    auto do_presentation = [&]() -> const CharT* {
 6870|   581k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 581k]
  ------------------
 6871|      0|            auto set = parse_presentation_set(begin, end, handler);
 6872|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6873|       |                // clang-format off
 6874|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|      0|                return begin;
 6877|      0|            }
 6878|      0|            handler.on_character_set_string(set);
 6879|      0|            return begin;
 6880|      0|        }
 6881|   581k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6881:13): [True: 0, False: 581k]
  ------------------
 6882|      0|            return parse_presentation_regex(begin, end, handler);
 6883|      0|        }
 6884|   581k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   581k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   581k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 581k]
  |  |  ------------------
  ------------------
 6886|      0|            handler.on_error("Invalid type specifier in format string");
 6887|      0|            return begin;
 6888|      0|        }
 6889|   581k|        handler.on_type(type);
 6890|   581k|        return begin;
 6891|   581k|    };
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6542|   232k|{
 6543|   232k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   232k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   232k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6544|       |
 6545|   232k|    auto check_align = [](wchar_t ch) {
 6546|   232k|        switch (ch) {
 6547|   232k|            case L'<':
 6548|   232k|                return align_type::left;
 6549|   232k|            case L'>':
 6550|   232k|                return align_type::right;
 6551|   232k|            case L'^':
 6552|   232k|                return align_type::center;
 6553|   232k|            default:
 6554|   232k|                return align_type::none;
 6555|   232k|        }
 6556|   232k|    };
 6557|       |
 6558|   232k|    auto potential_fill_len = code_point_length(begin, end);
 6559|   232k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   464k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 232k]
  |  |  |  Branch (859:45): [True: 0, False: 232k]
  |  |  |  Branch (859:45): [True: 0, False: 232k]
  |  |  ------------------
  ------------------
 6560|   232k|                     std::distance(begin, end) < potential_fill_len)) {
 6561|      0|        handler.on_error("Invalid encoding in fill character");
 6562|      0|        return begin;
 6563|      0|    }
 6564|       |
 6565|   232k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6566|       |
 6567|   232k|    auto potential_fill = std::basic_string_view<CharT>{
 6568|   232k|        begin, static_cast<size_t>(potential_fill_len)};
 6569|   232k|    const auto begin_before_fill = begin;
 6570|   232k|    begin += potential_fill_len;
 6571|       |
 6572|   232k|    if (begin == end) {
  ------------------
  |  Branch (6572:9): [True: 0, False: 232k]
  ------------------
 6573|      0|        return begin_before_fill;
 6574|      0|    }
 6575|       |
 6576|   232k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6577|   232k|    const auto begin_after_fill = begin;
 6578|   232k|    ++begin;
 6579|       |
 6580|   232k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6580:9): [True: 232k, False: 0]
  ------------------
 6581|   232k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   232k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 232k]
  |  |  ------------------
  ------------------
 6582|      0|            handler.on_error("Invalid fill character '{' in format string");
 6583|      0|            return begin;
 6584|      0|        }
 6585|   232k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6585:13): [True: 0, False: 232k]
  ------------------
 6586|      0|            return begin_before_fill;
 6587|      0|        }
 6588|   232k|    }
 6589|       |
 6590|   232k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6590:9): [True: 232k, False: 0]
  ------------------
 6591|   232k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6591:13): [True: 0, False: 232k]
  ------------------
 6592|      0|            handler.on_align(potential_align_on_fill);
 6593|      0|            return begin_after_fill;
 6594|      0|        }
 6595|   232k|        return begin_before_fill;
 6596|   232k|    }
 6597|       |
 6598|      0|    handler.on_fill(potential_fill);
 6599|      0|    handler.on_align(potential_align_after_fill);
 6600|      0|    return begin;
 6601|   232k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6545|   464k|    auto check_align = [](wchar_t ch) {
 6546|   464k|        switch (ch) {
 6547|      0|            case L'<':
  ------------------
  |  Branch (6547:13): [True: 0, False: 464k]
  ------------------
 6548|      0|                return align_type::left;
 6549|      0|            case L'>':
  ------------------
  |  Branch (6549:13): [True: 0, False: 464k]
  ------------------
 6550|      0|                return align_type::right;
 6551|      0|            case L'^':
  ------------------
  |  Branch (6551:13): [True: 0, False: 464k]
  ------------------
 6552|      0|                return align_type::center;
 6553|   464k|            default:
  ------------------
  |  Branch (6553:13): [True: 464k, False: 0]
  ------------------
 6554|   464k|                return align_type::none;
 6555|   464k|        }
 6556|   464k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6607|   232k|{
 6608|   232k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   232k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   232k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6609|       |
 6610|   232k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6610:9): [True: 232k, False: 0]
  |  Branch (6610:33): [True: 0, False: 232k]
  ------------------
 6611|      0|        int width = parse_simple_int(begin, end);
 6612|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6613|      0|            handler.on_width(width);
 6614|      0|        }
 6615|      0|        else {
 6616|      0|            handler.on_error("Invalid field width");
 6617|      0|            return begin;
 6618|      0|        }
 6619|      0|    }
 6620|   232k|    return begin;
 6621|   232k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 7137|   232k|    {
 7138|   232k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7139|   232k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7139:13): [True: 232k, False: 0]
  ------------------
 7140|   232k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7140:13): [True: 232k, False: 0]
  ------------------
 7141|   232k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7141:13): [True: 0, False: 232k]
  ------------------
 7142|   232k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7142:13): [True: 0, False: 0]
  ------------------
 7143|      0|            SCN_UNLIKELY_ATTR
 7144|       |            // clang-format off
 7145|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7146|       |            // clang-format on
 7147|      0|        }
 7148|       |
 7149|   232k|        Handler::on_localized();
 7150|   232k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|   813k|{
 8428|   813k|#define SCN_VISIT(Type)                                         \
 8429|   813k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|   813k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|   813k|    }                                                           \
 8432|   813k|    else {                                                      \
 8433|   813k|        return vis(monostate_val);                              \
 8434|   813k|    }
 8435|       |
 8436|   813k|    monostate monostate_val{};
 8437|       |
 8438|   813k|    switch (arg.m_type) {
 8439|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 0, False: 813k]
  ------------------
 8440|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8441|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 813k]
  ------------------
 8442|      0|            SCN_VISIT(short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8443|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 0, False: 813k]
  ------------------
 8444|      0|            SCN_VISIT(int);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8445|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 813k]
  ------------------
 8446|      0|            SCN_VISIT(long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8447|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 0, False: 813k]
  ------------------
 8448|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8449|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 0, False: 813k]
  ------------------
 8450|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8451|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 813k]
  ------------------
 8452|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8453|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 0, False: 813k]
  ------------------
 8454|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8455|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 813k]
  ------------------
 8456|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8457|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 0, False: 813k]
  ------------------
 8458|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8459|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 813k]
  ------------------
 8460|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8461|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 813k]
  ------------------
 8462|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8463|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 813k]
  ------------------
 8464|      0|            SCN_VISIT(char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8465|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 813k]
  ------------------
 8466|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8467|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 813k]
  ------------------
 8468|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8469|   263k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 263k, False: 550k]
  ------------------
 8470|   263k|            SCN_VISIT(float);
  ------------------
  |  | 8429|   263k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   263k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   263k|    }                                                           \
  |  | 8432|   263k|    else {                                                      \
  |  | 8433|   263k|        return vis(monostate_val);                              \
  |  | 8434|   263k|    }
  ------------------
 8471|   537k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 273k, False: 539k]
  ------------------
 8472|   537k|            SCN_VISIT(double);
  ------------------
  |  | 8429|   537k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   537k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   537k|    }                                                           \
  |  | 8432|   537k|    else {                                                      \
  |  | 8433|   537k|        return vis(monostate_val);                              \
  |  | 8434|   537k|    }
  ------------------
 8473|   813k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 276k, False: 537k]
  ------------------
 8474|   813k|            SCN_VISIT(long double);
  ------------------
  |  | 8429|   813k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   813k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   813k|    }                                                           \
  |  | 8432|   813k|    else {                                                      \
  |  | 8433|   813k|        return vis(monostate_val);                              \
  |  | 8434|   813k|    }
  ------------------
 8475|   813k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 813k]
  ------------------
 8476|   813k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|   813k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   813k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   813k|    }                                                           \
  |  | 8432|   813k|    else {                                                      \
  |  | 8433|   813k|        return vis(monostate_val);                              \
  |  | 8434|   813k|    }
  ------------------
 8477|   813k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 813k]
  ------------------
 8478|   813k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|   813k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   813k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   813k|    }                                                           \
  |  | 8432|   813k|    else {                                                      \
  |  | 8433|   813k|        return vis(monostate_val);                              \
  |  | 8434|   813k|    }
  ------------------
 8479|   813k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 813k]
  ------------------
 8480|   813k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|   813k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   813k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   813k|    }                                                           \
  |  | 8432|   813k|    else {                                                      \
  |  | 8433|   813k|        return vis(monostate_val);                              \
  |  | 8434|   813k|    }
  ------------------
 8481|   813k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 813k]
  ------------------
 8482|   813k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|   813k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   813k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   813k|    }                                                           \
  |  | 8432|   813k|    else {                                                      \
  |  | 8433|   813k|        return vis(monostate_val);                              \
  |  | 8434|   813k|    }
  ------------------
 8483|   813k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 813k]
  ------------------
 8484|   813k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|   813k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   813k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   813k|    }                                                           \
  |  | 8432|   813k|    else {                                                      \
  |  | 8433|   813k|        return vis(monostate_val);                              \
  |  | 8434|   813k|    }
  ------------------
 8485|   813k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 813k]
  ------------------
 8486|   813k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|   813k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   813k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   813k|    }                                                           \
  |  | 8432|   813k|    else {                                                      \
  |  | 8433|   813k|        return vis(monostate_val);                              \
  |  | 8434|   813k|    }
  ------------------
 8487|       |
 8488|   813k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 813k]
  ------------------
 8489|   813k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|   813k|            return vis(
 8491|   813k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 813k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 813k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|   813k|            SCN_CLANG_POP
 8506|   813k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
_ZN3scn2v36detail17basic_scan_bufferIcE8sync_allEv:
 4083|  86.8k|    {
 4084|  86.8k|        sync(0);
 4085|  86.8k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5475|  1.00M|    {
 5476|  1.00M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.00M]
  |  |  ------------------
  ------------------
 5477|      0|            return max_size();
 5478|      0|        }
 5479|       |
 5480|  1.00M|        return static_cast<std::size_t>(m_desc &
 5481|  1.00M|                                        ((1 << detail::packed_arg_bits) - 1));
 5482|  1.00M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5500|  2.00M|    {
 5501|  2.00M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5502|  2.00M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5443|  1.00M|    {
 5444|  1.00M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.00M]
  |  |  ------------------
  ------------------
 5445|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5446|      0|                return m_args[id];
 5447|      0|            }
 5448|      0|            return {};
 5449|      0|        }
 5450|       |
 5451|  1.00M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.00M]
  |  |  ------------------
  ------------------
 5452|      0|            return {};
 5453|      0|        }
 5454|       |
 5455|  1.00M|        const auto t = type(id);
 5456|  1.00M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.00M]
  |  |  ------------------
  ------------------
 5457|      0|            return {};
 5458|      0|        }
 5459|       |
 5460|  1.00M|        basic_scan_arg<Context> arg;
 5461|  1.00M|        arg.m_type = t;
 5462|  1.00M|        if (is_only_builtin()) {
  ------------------
  |  Branch (5462:13): [True: 1.00M, False: 0]
  ------------------
 5463|  1.00M|            arg.m_value.ref_value = m_builtin_values[id];
 5464|  1.00M|        }
 5465|      0|        else {
 5466|      0|            arg.m_value = m_values[id];
 5467|      0|        }
 5468|  1.00M|        return arg;
 5469|  1.00M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5509|  1.00M|    {
 5510|       |        // First (0th) index is size, types start after that
 5511|  1.00M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5512|  1.00M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5513|  1.00M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5514|  1.00M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5504|  1.00M|    {
 5505|  1.00M|        return (m_desc & detail::has_custom_types_bit) == 0;
 5506|  1.00M|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5256|  1.91M|    {
 5257|  1.91M|        return m_type != detail::arg_type::none_type;
 5258|  1.91M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|   146k|{
 8428|   146k|#define SCN_VISIT(Type)                                         \
 8429|   146k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|   146k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|   146k|    }                                                           \
 8432|   146k|    else {                                                      \
 8433|   146k|        return vis(monostate_val);                              \
 8434|   146k|    }
 8435|       |
 8436|   146k|    monostate monostate_val{};
 8437|       |
 8438|   146k|    switch (arg.m_type) {
 8439|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 0, False: 146k]
  ------------------
 8440|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8441|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 146k]
  ------------------
 8442|      0|            SCN_VISIT(short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8443|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 0, False: 146k]
  ------------------
 8444|      0|            SCN_VISIT(int);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8445|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 146k]
  ------------------
 8446|      0|            SCN_VISIT(long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8447|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 0, False: 146k]
  ------------------
 8448|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8449|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 0, False: 146k]
  ------------------
 8450|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8451|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 146k]
  ------------------
 8452|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8453|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 0, False: 146k]
  ------------------
 8454|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8455|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 146k]
  ------------------
 8456|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8457|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 0, False: 146k]
  ------------------
 8458|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8459|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 146k]
  ------------------
 8460|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8461|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 146k]
  ------------------
 8462|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8463|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 146k]
  ------------------
 8464|      0|            SCN_VISIT(char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8465|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 146k]
  ------------------
 8466|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8467|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 146k]
  ------------------
 8468|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8469|  42.8k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 42.8k, False: 103k]
  ------------------
 8470|  42.8k|            SCN_VISIT(float);
  ------------------
  |  | 8429|  42.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  42.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  42.8k|    }                                                           \
  |  | 8432|  42.8k|    else {                                                      \
  |  | 8433|  42.8k|        return vis(monostate_val);                              \
  |  | 8434|  42.8k|    }
  ------------------
 8471|  93.7k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 50.9k, False: 95.1k]
  ------------------
 8472|  93.7k|            SCN_VISIT(double);
  ------------------
  |  | 8429|  93.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  93.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  93.7k|    }                                                           \
  |  | 8432|  93.7k|    else {                                                      \
  |  | 8433|  93.7k|        return vis(monostate_val);                              \
  |  | 8434|  93.7k|    }
  ------------------
 8473|   146k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 52.3k, False: 93.7k]
  ------------------
 8474|   146k|            SCN_VISIT(long double);
  ------------------
  |  | 8429|   146k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   146k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   146k|    }                                                           \
  |  | 8432|   146k|    else {                                                      \
  |  | 8433|   146k|        return vis(monostate_val);                              \
  |  | 8434|   146k|    }
  ------------------
 8475|   146k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 146k]
  ------------------
 8476|   146k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|   146k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   146k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   146k|    }                                                           \
  |  | 8432|   146k|    else {                                                      \
  |  | 8433|   146k|        return vis(monostate_val);                              \
  |  | 8434|   146k|    }
  ------------------
 8477|   146k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 146k]
  ------------------
 8478|   146k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|   146k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   146k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   146k|    }                                                           \
  |  | 8432|   146k|    else {                                                      \
  |  | 8433|   146k|        return vis(monostate_val);                              \
  |  | 8434|   146k|    }
  ------------------
 8479|   146k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 146k]
  ------------------
 8480|   146k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|   146k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   146k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   146k|    }                                                           \
  |  | 8432|   146k|    else {                                                      \
  |  | 8433|   146k|        return vis(monostate_val);                              \
  |  | 8434|   146k|    }
  ------------------
 8481|   146k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 146k]
  ------------------
 8482|   146k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|   146k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   146k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   146k|    }                                                           \
  |  | 8432|   146k|    else {                                                      \
  |  | 8433|   146k|        return vis(monostate_val);                              \
  |  | 8434|   146k|    }
  ------------------
 8483|   146k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 146k]
  ------------------
 8484|   146k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|   146k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   146k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   146k|    }                                                           \
  |  | 8432|   146k|    else {                                                      \
  |  | 8433|   146k|        return vis(monostate_val);                              \
  |  | 8434|   146k|    }
  ------------------
 8485|   146k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 146k]
  ------------------
 8486|   146k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|   146k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   146k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   146k|    }                                                           \
  |  | 8432|   146k|    else {                                                      \
  |  | 8433|   146k|        return vis(monostate_val);                              \
  |  | 8434|   146k|    }
  ------------------
 8487|       |
 8488|   146k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 146k]
  ------------------
 8489|   146k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|   146k|            return vis(
 8491|   146k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 146k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 146k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|   146k|            SCN_CLANG_POP
 8506|   146k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5553|   809k|        : m_format{format}, m_next_arg_id{next_arg_id}
 5554|   809k|    {
 5555|   809k|    }
_ZN3scn2v318basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8147|   404k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  928|   404k|    static_cast<    \
  |  |  929|   404k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8148|   404k|    {
 8149|   404k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8065|   809k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|   809k|    static_cast<    \
  |  |  929|   809k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|   809k|    static_cast<    \
  |  |  929|   809k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8066|   809k|    {
 8067|   809k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7054|   405k|{
 7055|   405k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7056|   405k|    handler.check_args_exhausted();
 7057|   405k|    return handler.get_error();
 7058|   405k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7020|   405k|{
 7021|       |    // TODO: memchr fast path with a larger (> 32) format string
 7022|       |
 7023|   405k|    auto begin = format.data();
 7024|   405k|    auto it = begin;
 7025|   405k|    const auto end = format.data() + format.size();
 7026|       |
 7027|   676k|    while (it != end) {
  ------------------
  |  Branch (7027:12): [True: 405k, False: 271k]
  ------------------
 7028|   405k|        const auto ch = *it++;
 7029|   405k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7029:13): [True: 405k, False: 0]
  ------------------
 7030|   405k|            handler.on_literal_text(begin, it - 1);
 7031|       |
 7032|   405k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7033|   405k|            if (!handler) {
  ------------------
  |  Branch (7033:17): [True: 133k, False: 271k]
  ------------------
 7034|   133k|                return;
 7035|   133k|            }
 7036|   405k|        }
 7037|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7037:18): [True: 0, False: 0]
  ------------------
 7038|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7039|      0|                handler.on_error("Unmatched '}' in format string");
 7040|      0|                return;
 7041|      0|            }
 7042|       |
 7043|      0|            handler.on_literal_text(begin, it);
 7044|      0|            begin = ++it;
 7045|      0|        }
 7046|   405k|    }
 7047|       |
 7048|   271k|    handler.on_literal_text(begin, end);
 7049|   271k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6952|   405k|{
 6953|   405k|    struct id_adapter {
 6954|   405k|        constexpr void operator()()
 6955|   405k|        {
 6956|   405k|            arg_id = handler.on_arg_id();
 6957|   405k|        }
 6958|   405k|        constexpr void operator()(std::size_t id)
 6959|   405k|        {
 6960|   405k|            arg_id = handler.on_arg_id(id);
 6961|   405k|        }
 6962|       |
 6963|   405k|        constexpr void on_error(const char* msg)
 6964|   405k|        {
 6965|   405k|            SCN_UNLIKELY_ATTR
 6966|   405k|            handler.on_error(msg);
 6967|   405k|        }
 6968|       |
 6969|   405k|        Handler& handler;
 6970|   405k|        std::size_t arg_id;
 6971|   405k|    };
 6972|       |
 6973|   405k|    ++begin;
 6974|   405k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   405k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 405k]
  |  |  ------------------
  ------------------
 6975|      0|        handler.on_error("Unexpected end of replacement field");
 6976|      0|        return begin;
 6977|      0|    }
 6978|       |
 6979|   405k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:9): [True: 0, False: 405k]
  ------------------
 6980|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6981|      0|    }
 6982|   405k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6982:14): [True: 0, False: 405k]
  ------------------
 6983|      0|        handler.on_literal_text(begin, begin + 1);
 6984|      0|    }
 6985|   405k|    else {
 6986|   405k|        auto adapter = id_adapter{handler, 0};
 6987|   405k|        begin = parse_arg_id(begin, end, adapter);
 6988|       |
 6989|   405k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   405k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 405k]
  |  |  ------------------
  ------------------
 6990|      0|            handler.on_error("Missing '}' in format string");
 6991|      0|            return begin;
 6992|      0|        }
 6993|       |
 6994|   405k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6994:13): [True: 0, False: 405k]
  ------------------
 6995|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6996|      0|        }
 6997|   405k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6997:18): [True: 405k, False: 0]
  ------------------
 6998|   405k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   405k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 405k]
  |  |  ------------------
  ------------------
 6999|      0|                handler.on_error("Unexpected end of replacement field");
 7000|      0|                return begin;
 7001|      0|            }
 7002|   405k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7003|   405k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   810k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 405k]
  |  |  |  Branch (859:45): [True: 0, False: 405k]
  |  |  |  Branch (859:45): [True: 0, False: 405k]
  |  |  ------------------
  ------------------
 7004|      0|                handler.on_error("Unknown format specifier");
 7005|      0|                return begin;
 7006|      0|            }
 7007|   405k|        }
 7008|      0|        else {
 7009|      0|            SCN_UNLIKELY_ATTR
 7010|      0|            handler.on_error("Missing '}' in format string");
 7011|      0|            return begin;
 7012|      0|        }
 7013|   405k|    }
 7014|   405k|    return begin + 1;
 7015|   405k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 8049|   809k|    {
 8050|   809k|        return m_args.get(id);
 8051|   809k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8059|   809k|    {
 8060|   809k|        return m_locale;
 8061|   809k|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5575|   809k|    {
 5576|   809k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|   809k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 809k]
  |  |  ------------------
  ------------------
 5577|      0|            on_error(
 5578|      0|                "Cannot switch from manual to automatic argument indexing");
 5579|      0|            return 0;
 5580|      0|        }
 5581|       |
 5582|   809k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5583|   809k|        do_check_arg_id(id);
 5584|   809k|        return id;
 5585|   809k|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6063|   809k|{
 6064|   809k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6064:9): [Folded - Ignored]
  ------------------
 6065|   809k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6065:10): [Folded - Ignored]
  |  Branch (6065:22): [Folded - Ignored]
  ------------------
 6066|       |        // The cast below will cause an error on gcc pre-12
 6067|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6068|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6068:13): [True: 0, False: 0]
  ------------------
 6069|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6070|      0|            SCN_UNLIKELY_ATTR
 6071|      0|            on_error("Argument not found");
 6072|      0|        }
 6073|      0|    }
 6074|   809k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6453|   405k|{
 6454|   405k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   405k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   405k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6455|   405k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6455:9): [True: 405k, False: 0]
  |  Branch (6455:26): [True: 0, False: 405k]
  ------------------
 6456|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6457|      0|    }
 6458|       |
 6459|   405k|    handler();
 6460|   405k|    return begin;
 6461|   405k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6955|   405k|        {
 6956|   405k|            arg_id = handler.on_arg_id();
 6957|   405k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5261|  1.61M|    {
 5262|  1.61M|        return m_type;
 5263|  1.61M|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5570|   809k|    {
 5571|   809k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5572|   809k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE3getEv:
 4352|   550k|{
 4353|   550k|    if (is_contiguous()) {
  ------------------
  |  Branch (4353:9): [True: 0, False: 550k]
  ------------------
 4354|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4355|      0|                                ranges::default_sentinel};
 4356|      0|    }
 4357|   550k|    return ranges::subrange{forward_iterator{this, 0},
 4358|   550k|                            ranges::default_sentinel};
 4359|   550k|}
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4183|   550k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4184|   550k|    {
 4185|   550k|        SCN_EXPECT(parent);
  ------------------
  |  |  924|   550k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   550k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4186|   550k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|   550k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   550k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4187|   550k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5559|  1.61M|    {
 5560|  1.61M|        return m_format.data();
 5561|  1.61M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7131|   405k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|   405k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7132|   405k|    {
 7133|   405k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   405k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   405k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7134|   405k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6868|   405k|{
 6869|   405k|    auto do_presentation = [&]() -> const CharT* {
 6870|   405k|        if (*begin == CharT{'['}) {
 6871|   405k|            auto set = parse_presentation_set(begin, end, handler);
 6872|   405k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6873|       |                // clang-format off
 6874|   405k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|   405k|                return begin;
 6877|   405k|            }
 6878|   405k|            handler.on_character_set_string(set);
 6879|   405k|            return begin;
 6880|   405k|        }
 6881|   405k|        if (*begin == CharT{'/'}) {
 6882|   405k|            return parse_presentation_regex(begin, end, handler);
 6883|   405k|        }
 6884|   405k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   405k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6886|   405k|            handler.on_error("Invalid type specifier in format string");
 6887|   405k|            return begin;
 6888|   405k|        }
 6889|   405k|        handler.on_type(type);
 6890|   405k|        return begin;
 6891|   405k|    };
 6892|       |
 6893|   405k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6893:9): [True: 405k, False: 0]
  |  Branch (6893:28): [True: 405k, False: 0]
  ------------------
 6894|   405k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6894:9): [True: 405k, False: 0]
  |  Branch (6894:36): [True: 307k, False: 97.3k]
  ------------------
 6895|   307k|        return do_presentation();
 6896|   307k|    }
 6897|       |
 6898|  97.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  97.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 97.3k]
  |  |  ------------------
  ------------------
 6899|      0|        handler.on_error("Unexpected end of format string");
 6900|      0|        return begin;
 6901|      0|    }
 6902|       |
 6903|  97.3k|    begin = parse_align(begin, end, handler);
 6904|  97.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  97.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 97.3k]
  |  |  ------------------
  ------------------
 6905|      0|        handler.on_error("Unexpected end of format string");
 6906|      0|        return begin;
 6907|      0|    }
 6908|       |
 6909|  97.3k|    begin = parse_width(begin, end, handler);
 6910|  97.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  97.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 97.3k]
  |  |  ------------------
  ------------------
 6911|      0|        handler.on_error("Unexpected end of format string");
 6912|      0|        return begin;
 6913|      0|    }
 6914|       |
 6915|  97.3k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6915:9): [True: 0, False: 97.3k]
  ------------------
 6916|      0|        ++begin;
 6917|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6918|      0|            handler.on_error("Unexpected end of format string");
 6919|      0|            return begin;
 6920|      0|        }
 6921|      0|        begin = parse_precision(begin, end, handler);
 6922|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6923|      0|            handler.on_error("Unexpected end of format string");
 6924|      0|            return begin;
 6925|      0|        }
 6926|      0|    }
 6927|       |
 6928|  97.3k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6928:9): [True: 97.3k, False: 0]
  ------------------
 6929|  97.3k|        handler.on_localized();
 6930|  97.3k|        ++begin;
 6931|  97.3k|    }
 6932|  97.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  97.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 97.3k]
  |  |  ------------------
  ------------------
 6933|      0|        handler.on_error("Unexpected end of format string");
 6934|      0|        return begin;
 6935|      0|    }
 6936|       |
 6937|  97.3k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6937:9): [True: 97.3k, False: 0]
  |  Branch (6937:25): [True: 0, False: 97.3k]
  ------------------
 6938|      0|        do_presentation();
 6939|      0|    }
 6940|  97.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  97.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 97.3k]
  |  |  ------------------
  ------------------
 6941|      0|        handler.on_error("Unexpected end of format string");
 6942|      0|        return begin;
 6943|      0|    }
 6944|       |
 6945|  97.3k|    return begin;
 6946|  97.3k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6517|   809k|{
 6518|   809k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6518:13): [True: 615k, False: 194k]
  |  Branch (6518:33): [True: 615k, False: 0]
  ------------------
 6519|   809k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6519:13): [True: 194k, False: 0]
  |  Branch (6519:33): [True: 194k, False: 0]
  ------------------
 6520|   809k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6869|   307k|    auto do_presentation = [&]() -> const CharT* {
 6870|   307k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 307k]
  ------------------
 6871|      0|            auto set = parse_presentation_set(begin, end, handler);
 6872|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6873|       |                // clang-format off
 6874|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|      0|                return begin;
 6877|      0|            }
 6878|      0|            handler.on_character_set_string(set);
 6879|      0|            return begin;
 6880|      0|        }
 6881|   307k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6881:13): [True: 0, False: 307k]
  ------------------
 6882|      0|            return parse_presentation_regex(begin, end, handler);
 6883|      0|        }
 6884|   307k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   307k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   307k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 307k]
  |  |  ------------------
  ------------------
 6886|      0|            handler.on_error("Invalid type specifier in format string");
 6887|      0|            return begin;
 6888|      0|        }
 6889|   307k|        handler.on_type(type);
 6890|   307k|        return begin;
 6891|   307k|    };
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6465|   615k|{
 6466|   615k|    switch (type) {
 6467|      0|        case 'b':
  ------------------
  |  Branch (6467:9): [True: 0, False: 615k]
  ------------------
 6468|      0|        case 'B':
  ------------------
  |  Branch (6468:9): [True: 0, False: 615k]
  ------------------
 6469|      0|            return presentation_type::int_binary;
 6470|      0|        case 'd':
  ------------------
  |  Branch (6470:9): [True: 0, False: 615k]
  ------------------
 6471|      0|            return presentation_type::int_decimal;
 6472|      0|        case 'i':
  ------------------
  |  Branch (6472:9): [True: 0, False: 615k]
  ------------------
 6473|      0|            return presentation_type::int_generic;
 6474|      0|        case 'u':
  ------------------
  |  Branch (6474:9): [True: 0, False: 615k]
  ------------------
 6475|      0|            return presentation_type::int_unsigned_decimal;
 6476|      0|        case 'o':
  ------------------
  |  Branch (6476:9): [True: 0, False: 615k]
  ------------------
 6477|      0|            return presentation_type::int_octal;
 6478|      0|        case 'x':
  ------------------
  |  Branch (6478:9): [True: 0, False: 615k]
  ------------------
 6479|      0|        case 'X':
  ------------------
  |  Branch (6479:9): [True: 0, False: 615k]
  ------------------
 6480|      0|            return presentation_type::int_hex;
 6481|      0|        case 'r':
  ------------------
  |  Branch (6481:9): [True: 0, False: 615k]
  ------------------
 6482|      0|        case 'R':
  ------------------
  |  Branch (6482:9): [True: 0, False: 615k]
  ------------------
 6483|      0|            return presentation_type::int_arbitrary_base;
 6484|   212k|        case 'a':
  ------------------
  |  Branch (6484:9): [True: 212k, False: 402k]
  ------------------
 6485|   212k|        case 'A':
  ------------------
  |  Branch (6485:9): [True: 0, False: 615k]
  ------------------
 6486|   212k|            return presentation_type::float_hex;
 6487|  54.7k|        case 'e':
  ------------------
  |  Branch (6487:9): [True: 54.7k, False: 560k]
  ------------------
 6488|  54.7k|        case 'E':
  ------------------
  |  Branch (6488:9): [True: 0, False: 615k]
  ------------------
 6489|  54.7k|            return presentation_type::float_scientific;
 6490|   160k|        case 'f':
  ------------------
  |  Branch (6490:9): [True: 160k, False: 454k]
  ------------------
 6491|   160k|        case 'F':
  ------------------
  |  Branch (6491:9): [True: 0, False: 615k]
  ------------------
 6492|   160k|            return presentation_type::float_fixed;
 6493|   187k|        case 'g':
  ------------------
  |  Branch (6493:9): [True: 187k, False: 427k]
  ------------------
 6494|   187k|        case 'G':
  ------------------
  |  Branch (6494:9): [True: 0, False: 615k]
  ------------------
 6495|   187k|            return presentation_type::float_general;
 6496|      0|        case 's':
  ------------------
  |  Branch (6496:9): [True: 0, False: 615k]
  ------------------
 6497|      0|            return presentation_type::string;
 6498|      0|        case 'c':
  ------------------
  |  Branch (6498:9): [True: 0, False: 615k]
  ------------------
 6499|      0|            return presentation_type::character;
 6500|      0|        case '?':
  ------------------
  |  Branch (6500:9): [True: 0, False: 615k]
  ------------------
 6501|      0|            return presentation_type::escaped_character;
 6502|      0|        case 'p':
  ------------------
  |  Branch (6502:9): [True: 0, False: 615k]
  ------------------
 6503|      0|            return presentation_type::pointer;
 6504|      0|        case '[':
  ------------------
  |  Branch (6504:9): [True: 0, False: 615k]
  ------------------
 6505|      0|        case '/':
  ------------------
  |  Branch (6505:9): [True: 0, False: 615k]
  ------------------
 6506|       |            // Should be handled by parse_presentation_set and
 6507|       |            // parse_presentation_regex
 6508|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6509|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6510|      0|        default:
  ------------------
  |  Branch (6510:9): [True: 0, False: 615k]
  ------------------
 6511|      0|            return presentation_type::none;
 6512|   615k|    }
 6513|   615k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6542|  97.3k|{
 6543|  97.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  97.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  97.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6544|       |
 6545|  97.3k|    auto check_align = [](wchar_t ch) {
 6546|  97.3k|        switch (ch) {
 6547|  97.3k|            case L'<':
 6548|  97.3k|                return align_type::left;
 6549|  97.3k|            case L'>':
 6550|  97.3k|                return align_type::right;
 6551|  97.3k|            case L'^':
 6552|  97.3k|                return align_type::center;
 6553|  97.3k|            default:
 6554|  97.3k|                return align_type::none;
 6555|  97.3k|        }
 6556|  97.3k|    };
 6557|       |
 6558|  97.3k|    auto potential_fill_len = code_point_length(begin, end);
 6559|  97.3k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   194k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 97.3k]
  |  |  |  Branch (859:45): [True: 0, False: 97.3k]
  |  |  |  Branch (859:45): [True: 0, False: 97.3k]
  |  |  ------------------
  ------------------
 6560|  97.3k|                     std::distance(begin, end) < potential_fill_len)) {
 6561|      0|        handler.on_error("Invalid encoding in fill character");
 6562|      0|        return begin;
 6563|      0|    }
 6564|       |
 6565|  97.3k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6566|       |
 6567|  97.3k|    auto potential_fill = std::basic_string_view<CharT>{
 6568|  97.3k|        begin, static_cast<size_t>(potential_fill_len)};
 6569|  97.3k|    const auto begin_before_fill = begin;
 6570|  97.3k|    begin += potential_fill_len;
 6571|       |
 6572|  97.3k|    if (begin == end) {
  ------------------
  |  Branch (6572:9): [True: 0, False: 97.3k]
  ------------------
 6573|      0|        return begin_before_fill;
 6574|      0|    }
 6575|       |
 6576|  97.3k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6577|  97.3k|    const auto begin_after_fill = begin;
 6578|  97.3k|    ++begin;
 6579|       |
 6580|  97.3k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6580:9): [True: 97.3k, False: 0]
  ------------------
 6581|  97.3k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  97.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 97.3k]
  |  |  ------------------
  ------------------
 6582|      0|            handler.on_error("Invalid fill character '{' in format string");
 6583|      0|            return begin;
 6584|      0|        }
 6585|  97.3k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6585:13): [True: 0, False: 97.3k]
  ------------------
 6586|      0|            return begin_before_fill;
 6587|      0|        }
 6588|  97.3k|    }
 6589|       |
 6590|  97.3k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6590:9): [True: 97.3k, False: 0]
  ------------------
 6591|  97.3k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6591:13): [True: 0, False: 97.3k]
  ------------------
 6592|      0|            handler.on_align(potential_align_on_fill);
 6593|      0|            return begin_after_fill;
 6594|      0|        }
 6595|  97.3k|        return begin_before_fill;
 6596|  97.3k|    }
 6597|       |
 6598|      0|    handler.on_fill(potential_fill);
 6599|      0|    handler.on_align(potential_align_after_fill);
 6600|      0|    return begin;
 6601|  97.3k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6524|   194k|{
 6525|   194k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   194k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   194k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6526|   194k|    if constexpr (sizeof(CharT) != 1) {
 6527|   194k|        return 1;
 6528|       |    }
 6529|       |    else {
 6530|       |        const auto lengths =
 6531|       |            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6532|       |            "\3\4";
 6533|       |        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6534|       |        return len;
 6535|       |    }
 6536|   194k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6545|   194k|    auto check_align = [](wchar_t ch) {
 6546|   194k|        switch (ch) {
 6547|      0|            case L'<':
  ------------------
  |  Branch (6547:13): [True: 0, False: 194k]
  ------------------
 6548|      0|                return align_type::left;
 6549|      0|            case L'>':
  ------------------
  |  Branch (6549:13): [True: 0, False: 194k]
  ------------------
 6550|      0|                return align_type::right;
 6551|      0|            case L'^':
  ------------------
  |  Branch (6551:13): [True: 0, False: 194k]
  ------------------
 6552|      0|                return align_type::center;
 6553|   194k|            default:
  ------------------
  |  Branch (6553:13): [True: 194k, False: 0]
  ------------------
 6554|   194k|                return align_type::none;
 6555|   194k|        }
 6556|   194k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6607|  97.3k|{
 6608|  97.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  97.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  97.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6609|       |
 6610|  97.3k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6610:9): [True: 97.3k, False: 0]
  |  Branch (6610:33): [True: 0, False: 97.3k]
  ------------------
 6611|      0|        int width = parse_simple_int(begin, end);
 6612|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6613|      0|            handler.on_width(width);
 6614|      0|        }
 6615|      0|        else {
 6616|      0|            handler.on_error("Invalid field width");
 6617|      0|            return begin;
 6618|      0|        }
 6619|      0|    }
 6620|  97.3k|    return begin;
 6621|  97.3k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7137|  97.3k|    {
 7138|  97.3k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7139|  97.3k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7139:13): [True: 97.3k, False: 0]
  ------------------
 7140|  97.3k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7140:13): [True: 97.3k, False: 0]
  ------------------
 7141|  97.3k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7141:13): [True: 0, False: 97.3k]
  ------------------
 7142|  97.3k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7142:13): [True: 0, False: 0]
  ------------------
 7143|      0|            SCN_UNLIKELY_ATTR
 7144|       |            // clang-format off
 7145|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7146|       |            // clang-format on
 7147|      0|        }
 7148|       |
 7149|  97.3k|        Handler::on_localized();
 7150|  97.3k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|   405k|{
 8428|   405k|#define SCN_VISIT(Type)                                         \
 8429|   405k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|   405k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|   405k|    }                                                           \
 8432|   405k|    else {                                                      \
 8433|   405k|        return vis(monostate_val);                              \
 8434|   405k|    }
 8435|       |
 8436|   405k|    monostate monostate_val{};
 8437|       |
 8438|   405k|    switch (arg.m_type) {
 8439|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 0, False: 405k]
  ------------------
 8440|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8441|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 405k]
  ------------------
 8442|      0|            SCN_VISIT(short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8443|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 0, False: 405k]
  ------------------
 8444|      0|            SCN_VISIT(int);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8445|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 405k]
  ------------------
 8446|      0|            SCN_VISIT(long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8447|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 0, False: 405k]
  ------------------
 8448|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8449|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 0, False: 405k]
  ------------------
 8450|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8451|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 405k]
  ------------------
 8452|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8453|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 0, False: 405k]
  ------------------
 8454|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8455|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 405k]
  ------------------
 8456|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8457|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 0, False: 405k]
  ------------------
 8458|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8459|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 405k]
  ------------------
 8460|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8461|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 405k]
  ------------------
 8462|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8463|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 405k]
  ------------------
 8464|      0|            SCN_VISIT(char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8465|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 405k]
  ------------------
 8466|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8467|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 405k]
  ------------------
 8468|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8469|   127k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 127k, False: 277k]
  ------------------
 8470|   127k|            SCN_VISIT(float);
  ------------------
  |  | 8429|   127k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   127k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   127k|    }                                                           \
  |  | 8432|   127k|    else {                                                      \
  |  | 8433|   127k|        return vis(monostate_val);                              \
  |  | 8434|   127k|    }
  ------------------
 8471|   265k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 137k, False: 267k]
  ------------------
 8472|   265k|            SCN_VISIT(double);
  ------------------
  |  | 8429|   265k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   265k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   265k|    }                                                           \
  |  | 8432|   265k|    else {                                                      \
  |  | 8433|   265k|        return vis(monostate_val);                              \
  |  | 8434|   265k|    }
  ------------------
 8473|   405k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 139k, False: 265k]
  ------------------
 8474|   405k|            SCN_VISIT(long double);
  ------------------
  |  | 8429|   405k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   405k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   405k|    }                                                           \
  |  | 8432|   405k|    else {                                                      \
  |  | 8433|   405k|        return vis(monostate_val);                              \
  |  | 8434|   405k|    }
  ------------------
 8475|   405k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 405k]
  ------------------
 8476|   405k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|   405k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   405k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   405k|    }                                                           \
  |  | 8432|   405k|    else {                                                      \
  |  | 8433|   405k|        return vis(monostate_val);                              \
  |  | 8434|   405k|    }
  ------------------
 8477|   405k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 405k]
  ------------------
 8478|   405k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|   405k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   405k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   405k|    }                                                           \
  |  | 8432|   405k|    else {                                                      \
  |  | 8433|   405k|        return vis(monostate_val);                              \
  |  | 8434|   405k|    }
  ------------------
 8479|   405k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 405k]
  ------------------
 8480|   405k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|   405k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   405k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   405k|    }                                                           \
  |  | 8432|   405k|    else {                                                      \
  |  | 8433|   405k|        return vis(monostate_val);                              \
  |  | 8434|   405k|    }
  ------------------
 8481|   405k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 405k]
  ------------------
 8482|   405k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|   405k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   405k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   405k|    }                                                           \
  |  | 8432|   405k|    else {                                                      \
  |  | 8433|   405k|        return vis(monostate_val);                              \
  |  | 8434|   405k|    }
  ------------------
 8483|   405k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 405k]
  ------------------
 8484|   405k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|   405k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   405k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   405k|    }                                                           \
  |  | 8432|   405k|    else {                                                      \
  |  | 8433|   405k|        return vis(monostate_val);                              \
  |  | 8434|   405k|    }
  ------------------
 8485|   405k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 405k]
  ------------------
 8486|   405k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|   405k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   405k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   405k|    }                                                           \
  |  | 8432|   405k|    else {                                                      \
  |  | 8433|   405k|        return vis(monostate_val);                              \
  |  | 8434|   405k|    }
  ------------------
 8487|       |
 8488|   405k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 405k]
  ------------------
 8489|   405k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|   405k|            return vis(
 8491|   405k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 405k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 405k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|   405k|            SCN_CLANG_POP
 8506|   405k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|   145k|{
 8428|   145k|#define SCN_VISIT(Type)                                         \
 8429|   145k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|   145k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|   145k|    }                                                           \
 8432|   145k|    else {                                                      \
 8433|   145k|        return vis(monostate_val);                              \
 8434|   145k|    }
 8435|       |
 8436|   145k|    monostate monostate_val{};
 8437|       |
 8438|   145k|    switch (arg.m_type) {
 8439|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 0, False: 145k]
  ------------------
 8440|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8441|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 145k]
  ------------------
 8442|      0|            SCN_VISIT(short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8443|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 0, False: 145k]
  ------------------
 8444|      0|            SCN_VISIT(int);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8445|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 145k]
  ------------------
 8446|      0|            SCN_VISIT(long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8447|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 0, False: 145k]
  ------------------
 8448|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8449|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 0, False: 145k]
  ------------------
 8450|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8451|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 145k]
  ------------------
 8452|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8453|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 0, False: 145k]
  ------------------
 8454|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8455|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 145k]
  ------------------
 8456|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8457|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 0, False: 145k]
  ------------------
 8458|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8459|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 145k]
  ------------------
 8460|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8461|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 145k]
  ------------------
 8462|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8463|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 145k]
  ------------------
 8464|      0|            SCN_VISIT(char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8465|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 145k]
  ------------------
 8466|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8467|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 145k]
  ------------------
 8468|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8469|  42.7k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 42.7k, False: 103k]
  ------------------
 8470|  42.7k|            SCN_VISIT(float);
  ------------------
  |  | 8429|  42.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  42.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  42.7k|    }                                                           \
  |  | 8432|  42.7k|    else {                                                      \
  |  | 8433|  42.7k|        return vis(monostate_val);                              \
  |  | 8434|  42.7k|    }
  ------------------
 8471|  93.6k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 50.8k, False: 95.0k]
  ------------------
 8472|  93.6k|            SCN_VISIT(double);
  ------------------
  |  | 8429|  93.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  93.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  93.6k|    }                                                           \
  |  | 8432|  93.6k|    else {                                                      \
  |  | 8433|  93.6k|        return vis(monostate_val);                              \
  |  | 8434|  93.6k|    }
  ------------------
 8473|   145k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 52.2k, False: 93.6k]
  ------------------
 8474|   145k|            SCN_VISIT(long double);
  ------------------
  |  | 8429|   145k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   145k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   145k|    }                                                           \
  |  | 8432|   145k|    else {                                                      \
  |  | 8433|   145k|        return vis(monostate_val);                              \
  |  | 8434|   145k|    }
  ------------------
 8475|   145k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 145k]
  ------------------
 8476|   145k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|   145k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   145k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   145k|    }                                                           \
  |  | 8432|   145k|    else {                                                      \
  |  | 8433|   145k|        return vis(monostate_val);                              \
  |  | 8434|   145k|    }
  ------------------
 8477|   145k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 145k]
  ------------------
 8478|   145k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|   145k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   145k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   145k|    }                                                           \
  |  | 8432|   145k|    else {                                                      \
  |  | 8433|   145k|        return vis(monostate_val);                              \
  |  | 8434|   145k|    }
  ------------------
 8479|   145k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 145k]
  ------------------
 8480|   145k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|   145k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   145k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   145k|    }                                                           \
  |  | 8432|   145k|    else {                                                      \
  |  | 8433|   145k|        return vis(monostate_val);                              \
  |  | 8434|   145k|    }
  ------------------
 8481|   145k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 145k]
  ------------------
 8482|   145k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|   145k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   145k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   145k|    }                                                           \
  |  | 8432|   145k|    else {                                                      \
  |  | 8433|   145k|        return vis(monostate_val);                              \
  |  | 8434|   145k|    }
  ------------------
 8483|   145k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 145k]
  ------------------
 8484|   145k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|   145k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   145k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   145k|    }                                                           \
  |  | 8432|   145k|    else {                                                      \
  |  | 8433|   145k|        return vis(monostate_val);                              \
  |  | 8434|   145k|    }
  ------------------
 8485|   145k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 145k]
  ------------------
 8486|   145k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|   145k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   145k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   145k|    }                                                           \
  |  | 8432|   145k|    else {                                                      \
  |  | 8433|   145k|        return vis(monostate_val);                              \
  |  | 8434|   145k|    }
  ------------------
 8487|       |
 8488|   145k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 145k]
  ------------------
 8489|   145k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|   145k|            return vis(
 8491|   145k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 145k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 145k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|   145k|            SCN_CLANG_POP
 8506|   145k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7054|   404k|{
 7055|   404k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7056|   404k|    handler.check_args_exhausted();
 7057|   404k|    return handler.get_error();
 7058|   404k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7020|   404k|{
 7021|       |    // TODO: memchr fast path with a larger (> 32) format string
 7022|       |
 7023|   404k|    auto begin = format.data();
 7024|   404k|    auto it = begin;
 7025|   404k|    const auto end = format.data() + format.size();
 7026|       |
 7027|   676k|    while (it != end) {
  ------------------
  |  Branch (7027:12): [True: 404k, False: 271k]
  ------------------
 7028|   404k|        const auto ch = *it++;
 7029|   404k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7029:13): [True: 404k, False: 0]
  ------------------
 7030|   404k|            handler.on_literal_text(begin, it - 1);
 7031|       |
 7032|   404k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7033|   404k|            if (!handler) {
  ------------------
  |  Branch (7033:17): [True: 133k, False: 271k]
  ------------------
 7034|   133k|                return;
 7035|   133k|            }
 7036|   404k|        }
 7037|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7037:18): [True: 0, False: 0]
  ------------------
 7038|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7039|      0|                handler.on_error("Unmatched '}' in format string");
 7040|      0|                return;
 7041|      0|            }
 7042|       |
 7043|      0|            handler.on_literal_text(begin, it);
 7044|      0|            begin = ++it;
 7045|      0|        }
 7046|   404k|    }
 7047|       |
 7048|   271k|    handler.on_literal_text(begin, end);
 7049|   271k|}
_ZN3scn2v318basic_scan_contextIwE10advance_toENS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
 8185|   271k|    {
 8186|   271k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   271k|    static_cast<    \
  |  |  929|   271k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8187|   271k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 6952|   404k|{
 6953|   404k|    struct id_adapter {
 6954|   404k|        constexpr void operator()()
 6955|   404k|        {
 6956|   404k|            arg_id = handler.on_arg_id();
 6957|   404k|        }
 6958|   404k|        constexpr void operator()(std::size_t id)
 6959|   404k|        {
 6960|   404k|            arg_id = handler.on_arg_id(id);
 6961|   404k|        }
 6962|       |
 6963|   404k|        constexpr void on_error(const char* msg)
 6964|   404k|        {
 6965|   404k|            SCN_UNLIKELY_ATTR
 6966|   404k|            handler.on_error(msg);
 6967|   404k|        }
 6968|       |
 6969|   404k|        Handler& handler;
 6970|   404k|        std::size_t arg_id;
 6971|   404k|    };
 6972|       |
 6973|   404k|    ++begin;
 6974|   404k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   404k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 404k]
  |  |  ------------------
  ------------------
 6975|      0|        handler.on_error("Unexpected end of replacement field");
 6976|      0|        return begin;
 6977|      0|    }
 6978|       |
 6979|   404k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:9): [True: 0, False: 404k]
  ------------------
 6980|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6981|      0|    }
 6982|   404k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6982:14): [True: 0, False: 404k]
  ------------------
 6983|      0|        handler.on_literal_text(begin, begin + 1);
 6984|      0|    }
 6985|   404k|    else {
 6986|   404k|        auto adapter = id_adapter{handler, 0};
 6987|   404k|        begin = parse_arg_id(begin, end, adapter);
 6988|       |
 6989|   404k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   404k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 404k]
  |  |  ------------------
  ------------------
 6990|      0|            handler.on_error("Missing '}' in format string");
 6991|      0|            return begin;
 6992|      0|        }
 6993|       |
 6994|   404k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6994:13): [True: 0, False: 404k]
  ------------------
 6995|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6996|      0|        }
 6997|   404k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6997:18): [True: 404k, False: 0]
  ------------------
 6998|   404k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   404k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 404k]
  |  |  ------------------
  ------------------
 6999|      0|                handler.on_error("Unexpected end of replacement field");
 7000|      0|                return begin;
 7001|      0|            }
 7002|   404k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7003|   404k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   809k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 404k]
  |  |  |  Branch (859:45): [True: 0, False: 404k]
  |  |  |  Branch (859:45): [True: 0, False: 404k]
  |  |  ------------------
  ------------------
 7004|      0|                handler.on_error("Unknown format specifier");
 7005|      0|                return begin;
 7006|      0|            }
 7007|   404k|        }
 7008|      0|        else {
 7009|      0|            SCN_UNLIKELY_ATTR
 7010|      0|            handler.on_error("Missing '}' in format string");
 7011|      0|            return begin;
 7012|      0|        }
 7013|   404k|    }
 7014|   404k|    return begin + 1;
 7015|   404k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6453|   404k|{
 6454|   404k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   404k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   404k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6455|   404k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6455:9): [True: 404k, False: 0]
  |  Branch (6455:26): [True: 0, False: 404k]
  ------------------
 6456|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6457|      0|    }
 6458|       |
 6459|   404k|    handler();
 6460|   404k|    return begin;
 6461|   404k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6955|   404k|        {
 6956|   404k|            arg_id = handler.on_arg_id();
 6957|   404k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7131|   404k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|   404k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7132|   404k|    {
 7133|   404k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   404k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   404k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7134|   404k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6868|   404k|{
 6869|   404k|    auto do_presentation = [&]() -> const CharT* {
 6870|   404k|        if (*begin == CharT{'['}) {
 6871|   404k|            auto set = parse_presentation_set(begin, end, handler);
 6872|   404k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6873|       |                // clang-format off
 6874|   404k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|   404k|                return begin;
 6877|   404k|            }
 6878|   404k|            handler.on_character_set_string(set);
 6879|   404k|            return begin;
 6880|   404k|        }
 6881|   404k|        if (*begin == CharT{'/'}) {
 6882|   404k|            return parse_presentation_regex(begin, end, handler);
 6883|   404k|        }
 6884|   404k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   404k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6886|   404k|            handler.on_error("Invalid type specifier in format string");
 6887|   404k|            return begin;
 6888|   404k|        }
 6889|   404k|        handler.on_type(type);
 6890|   404k|        return begin;
 6891|   404k|    };
 6892|       |
 6893|   404k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6893:9): [True: 404k, False: 0]
  |  Branch (6893:28): [True: 404k, False: 0]
  ------------------
 6894|   404k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6894:9): [True: 404k, False: 0]
  |  Branch (6894:36): [True: 307k, False: 97.2k]
  ------------------
 6895|   307k|        return do_presentation();
 6896|   307k|    }
 6897|       |
 6898|  97.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  97.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 97.2k]
  |  |  ------------------
  ------------------
 6899|      0|        handler.on_error("Unexpected end of format string");
 6900|      0|        return begin;
 6901|      0|    }
 6902|       |
 6903|  97.2k|    begin = parse_align(begin, end, handler);
 6904|  97.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  97.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 97.2k]
  |  |  ------------------
  ------------------
 6905|      0|        handler.on_error("Unexpected end of format string");
 6906|      0|        return begin;
 6907|      0|    }
 6908|       |
 6909|  97.2k|    begin = parse_width(begin, end, handler);
 6910|  97.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  97.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 97.2k]
  |  |  ------------------
  ------------------
 6911|      0|        handler.on_error("Unexpected end of format string");
 6912|      0|        return begin;
 6913|      0|    }
 6914|       |
 6915|  97.2k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6915:9): [True: 0, False: 97.2k]
  ------------------
 6916|      0|        ++begin;
 6917|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6918|      0|            handler.on_error("Unexpected end of format string");
 6919|      0|            return begin;
 6920|      0|        }
 6921|      0|        begin = parse_precision(begin, end, handler);
 6922|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6923|      0|            handler.on_error("Unexpected end of format string");
 6924|      0|            return begin;
 6925|      0|        }
 6926|      0|    }
 6927|       |
 6928|  97.2k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6928:9): [True: 97.2k, False: 0]
  ------------------
 6929|  97.2k|        handler.on_localized();
 6930|  97.2k|        ++begin;
 6931|  97.2k|    }
 6932|  97.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  97.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 97.2k]
  |  |  ------------------
  ------------------
 6933|      0|        handler.on_error("Unexpected end of format string");
 6934|      0|        return begin;
 6935|      0|    }
 6936|       |
 6937|  97.2k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6937:9): [True: 97.2k, False: 0]
  |  Branch (6937:25): [True: 0, False: 97.2k]
  ------------------
 6938|      0|        do_presentation();
 6939|      0|    }
 6940|  97.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  97.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 97.2k]
  |  |  ------------------
  ------------------
 6941|      0|        handler.on_error("Unexpected end of format string");
 6942|      0|        return begin;
 6943|      0|    }
 6944|       |
 6945|  97.2k|    return begin;
 6946|  97.2k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6869|   307k|    auto do_presentation = [&]() -> const CharT* {
 6870|   307k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 307k]
  ------------------
 6871|      0|            auto set = parse_presentation_set(begin, end, handler);
 6872|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6873|       |                // clang-format off
 6874|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|      0|                return begin;
 6877|      0|            }
 6878|      0|            handler.on_character_set_string(set);
 6879|      0|            return begin;
 6880|      0|        }
 6881|   307k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6881:13): [True: 0, False: 307k]
  ------------------
 6882|      0|            return parse_presentation_regex(begin, end, handler);
 6883|      0|        }
 6884|   307k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   307k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   307k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 307k]
  |  |  ------------------
  ------------------
 6886|      0|            handler.on_error("Invalid type specifier in format string");
 6887|      0|            return begin;
 6888|      0|        }
 6889|   307k|        handler.on_type(type);
 6890|   307k|        return begin;
 6891|   307k|    };
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6542|  97.2k|{
 6543|  97.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  97.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  97.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6544|       |
 6545|  97.2k|    auto check_align = [](wchar_t ch) {
 6546|  97.2k|        switch (ch) {
 6547|  97.2k|            case L'<':
 6548|  97.2k|                return align_type::left;
 6549|  97.2k|            case L'>':
 6550|  97.2k|                return align_type::right;
 6551|  97.2k|            case L'^':
 6552|  97.2k|                return align_type::center;
 6553|  97.2k|            default:
 6554|  97.2k|                return align_type::none;
 6555|  97.2k|        }
 6556|  97.2k|    };
 6557|       |
 6558|  97.2k|    auto potential_fill_len = code_point_length(begin, end);
 6559|  97.2k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   194k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 97.2k]
  |  |  |  Branch (859:45): [True: 0, False: 97.2k]
  |  |  |  Branch (859:45): [True: 0, False: 97.2k]
  |  |  ------------------
  ------------------
 6560|  97.2k|                     std::distance(begin, end) < potential_fill_len)) {
 6561|      0|        handler.on_error("Invalid encoding in fill character");
 6562|      0|        return begin;
 6563|      0|    }
 6564|       |
 6565|  97.2k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6566|       |
 6567|  97.2k|    auto potential_fill = std::basic_string_view<CharT>{
 6568|  97.2k|        begin, static_cast<size_t>(potential_fill_len)};
 6569|  97.2k|    const auto begin_before_fill = begin;
 6570|  97.2k|    begin += potential_fill_len;
 6571|       |
 6572|  97.2k|    if (begin == end) {
  ------------------
  |  Branch (6572:9): [True: 0, False: 97.2k]
  ------------------
 6573|      0|        return begin_before_fill;
 6574|      0|    }
 6575|       |
 6576|  97.2k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6577|  97.2k|    const auto begin_after_fill = begin;
 6578|  97.2k|    ++begin;
 6579|       |
 6580|  97.2k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6580:9): [True: 97.2k, False: 0]
  ------------------
 6581|  97.2k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  97.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 97.2k]
  |  |  ------------------
  ------------------
 6582|      0|            handler.on_error("Invalid fill character '{' in format string");
 6583|      0|            return begin;
 6584|      0|        }
 6585|  97.2k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6585:13): [True: 0, False: 97.2k]
  ------------------
 6586|      0|            return begin_before_fill;
 6587|      0|        }
 6588|  97.2k|    }
 6589|       |
 6590|  97.2k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6590:9): [True: 97.2k, False: 0]
  ------------------
 6591|  97.2k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6591:13): [True: 0, False: 97.2k]
  ------------------
 6592|      0|            handler.on_align(potential_align_on_fill);
 6593|      0|            return begin_after_fill;
 6594|      0|        }
 6595|  97.2k|        return begin_before_fill;
 6596|  97.2k|    }
 6597|       |
 6598|      0|    handler.on_fill(potential_fill);
 6599|      0|    handler.on_align(potential_align_after_fill);
 6600|      0|    return begin;
 6601|  97.2k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6545|   194k|    auto check_align = [](wchar_t ch) {
 6546|   194k|        switch (ch) {
 6547|      0|            case L'<':
  ------------------
  |  Branch (6547:13): [True: 0, False: 194k]
  ------------------
 6548|      0|                return align_type::left;
 6549|      0|            case L'>':
  ------------------
  |  Branch (6549:13): [True: 0, False: 194k]
  ------------------
 6550|      0|                return align_type::right;
 6551|      0|            case L'^':
  ------------------
  |  Branch (6551:13): [True: 0, False: 194k]
  ------------------
 6552|      0|                return align_type::center;
 6553|   194k|            default:
  ------------------
  |  Branch (6553:13): [True: 194k, False: 0]
  ------------------
 6554|   194k|                return align_type::none;
 6555|   194k|        }
 6556|   194k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6607|  97.2k|{
 6608|  97.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  97.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  97.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6609|       |
 6610|  97.2k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6610:9): [True: 97.2k, False: 0]
  |  Branch (6610:33): [True: 0, False: 97.2k]
  ------------------
 6611|      0|        int width = parse_simple_int(begin, end);
 6612|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6613|      0|            handler.on_width(width);
 6614|      0|        }
 6615|      0|        else {
 6616|      0|            handler.on_error("Invalid field width");
 6617|      0|            return begin;
 6618|      0|        }
 6619|      0|    }
 6620|  97.2k|    return begin;
 6621|  97.2k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 7137|  97.2k|    {
 7138|  97.2k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7139|  97.2k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7139:13): [True: 97.2k, False: 0]
  ------------------
 7140|  97.2k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7140:13): [True: 97.2k, False: 0]
  ------------------
 7141|  97.2k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7141:13): [True: 0, False: 97.2k]
  ------------------
 7142|  97.2k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7142:13): [True: 0, False: 0]
  ------------------
 7143|      0|            SCN_UNLIKELY_ATTR
 7144|       |            // clang-format off
 7145|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7146|       |            // clang-format on
 7147|      0|        }
 7148|       |
 7149|  97.2k|        Handler::on_localized();
 7150|  97.2k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|   404k|{
 8428|   404k|#define SCN_VISIT(Type)                                         \
 8429|   404k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|   404k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|   404k|    }                                                           \
 8432|   404k|    else {                                                      \
 8433|   404k|        return vis(monostate_val);                              \
 8434|   404k|    }
 8435|       |
 8436|   404k|    monostate monostate_val{};
 8437|       |
 8438|   404k|    switch (arg.m_type) {
 8439|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 0, False: 404k]
  ------------------
 8440|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8441|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 404k]
  ------------------
 8442|      0|            SCN_VISIT(short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8443|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 0, False: 404k]
  ------------------
 8444|      0|            SCN_VISIT(int);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8445|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 404k]
  ------------------
 8446|      0|            SCN_VISIT(long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8447|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 0, False: 404k]
  ------------------
 8448|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8449|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 0, False: 404k]
  ------------------
 8450|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8451|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 404k]
  ------------------
 8452|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8453|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 0, False: 404k]
  ------------------
 8454|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8455|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 404k]
  ------------------
 8456|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8457|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 0, False: 404k]
  ------------------
 8458|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8459|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 404k]
  ------------------
 8460|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8461|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 404k]
  ------------------
 8462|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8463|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 404k]
  ------------------
 8464|      0|            SCN_VISIT(char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8465|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 404k]
  ------------------
 8466|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8467|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 404k]
  ------------------
 8468|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8469|   127k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 127k, False: 277k]
  ------------------
 8470|   127k|            SCN_VISIT(float);
  ------------------
  |  | 8429|   127k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   127k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   127k|    }                                                           \
  |  | 8432|   127k|    else {                                                      \
  |  | 8433|   127k|        return vis(monostate_val);                              \
  |  | 8434|   127k|    }
  ------------------
 8471|   265k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 137k, False: 266k]
  ------------------
 8472|   265k|            SCN_VISIT(double);
  ------------------
  |  | 8429|   265k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   265k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   265k|    }                                                           \
  |  | 8432|   265k|    else {                                                      \
  |  | 8433|   265k|        return vis(monostate_val);                              \
  |  | 8434|   265k|    }
  ------------------
 8473|   404k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 139k, False: 265k]
  ------------------
 8474|   404k|            SCN_VISIT(long double);
  ------------------
  |  | 8429|   404k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   404k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   404k|    }                                                           \
  |  | 8432|   404k|    else {                                                      \
  |  | 8433|   404k|        return vis(monostate_val);                              \
  |  | 8434|   404k|    }
  ------------------
 8475|   404k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 404k]
  ------------------
 8476|   404k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|   404k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   404k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   404k|    }                                                           \
  |  | 8432|   404k|    else {                                                      \
  |  | 8433|   404k|        return vis(monostate_val);                              \
  |  | 8434|   404k|    }
  ------------------
 8477|   404k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 404k]
  ------------------
 8478|   404k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|   404k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   404k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   404k|    }                                                           \
  |  | 8432|   404k|    else {                                                      \
  |  | 8433|   404k|        return vis(monostate_val);                              \
  |  | 8434|   404k|    }
  ------------------
 8479|   404k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 404k]
  ------------------
 8480|   404k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|   404k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   404k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   404k|    }                                                           \
  |  | 8432|   404k|    else {                                                      \
  |  | 8433|   404k|        return vis(monostate_val);                              \
  |  | 8434|   404k|    }
  ------------------
 8481|   404k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 404k]
  ------------------
 8482|   404k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|   404k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   404k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   404k|    }                                                           \
  |  | 8432|   404k|    else {                                                      \
  |  | 8433|   404k|        return vis(monostate_val);                              \
  |  | 8434|   404k|    }
  ------------------
 8483|   404k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 404k]
  ------------------
 8484|   404k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|   404k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   404k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   404k|    }                                                           \
  |  | 8432|   404k|    else {                                                      \
  |  | 8433|   404k|        return vis(monostate_val);                              \
  |  | 8434|   404k|    }
  ------------------
 8485|   404k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 404k]
  ------------------
 8486|   404k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|   404k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   404k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   404k|    }                                                           \
  |  | 8432|   404k|    else {                                                      \
  |  | 8433|   404k|        return vis(monostate_val);                              \
  |  | 8434|   404k|    }
  ------------------
 8487|       |
 8488|   404k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 404k]
  ------------------
 8489|   404k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|   404k|            return vis(
 8491|   404k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 404k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 404k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|   404k|            SCN_CLANG_POP
 8506|   404k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
_ZN3scn2v36detail17basic_scan_bufferIwE8sync_allEv:
 4083|   173k|    {
 4084|   173k|        sync(0);
 4085|   173k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
 5429|   203k|    constexpr basic_scan_args() = default;
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
 5429|  97.3k|    constexpr basic_scan_args() = default;

_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  77.8k|{
   89|  77.8k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  77.8k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  77.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  77.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  77.8k|    static_cast<    \
  |  |  929|  77.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  77.8k|    static_cast<    \
  |  |  929|  77.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  77.8k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   251k|{
   44|   251k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   251k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   251k|}
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  77.8k|{
  127|  77.8k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  77.8k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  77.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  77.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  77.8k|    static_cast<    \
  |  |  929|  77.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  77.8k|    static_cast<    \
  |  |  929|  77.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  77.8k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeETnPvLPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT0_OSF_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   251k|{
   60|   251k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   251k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   251k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  162|  14.2k|{
  163|  14.2k|    T value;
  164|  14.2k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  14.2k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  14.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.45k, False: 9.82k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.45k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.45k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.45k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.45k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.45k|    }                                                  \
  |  |  |  | 3667|  14.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  9.82k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  9.82k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  9.82k|    static_cast<    \
  |  |  929|  9.82k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  9.82k|    static_cast<    \
  |  |  929|  9.82k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  14.2k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  48.6k|{
   72|  48.6k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  48.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  48.6k|}
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  85.9k|{
   89|  85.9k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  85.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  85.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  85.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  85.9k|    static_cast<    \
  |  |  929|  85.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  85.9k|    static_cast<    \
  |  |  929|  85.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  85.9k|}
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  85.9k|{
  127|  85.9k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  85.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  85.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  85.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  85.9k|    static_cast<    \
  |  |  929|  85.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  85.9k|    static_cast<    \
  |  |  929|  85.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  85.9k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  162|  16.9k|{
  163|  16.9k|    T value;
  164|  16.9k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  16.9k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  16.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  16.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  16.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  16.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.45k, False: 12.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.45k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.45k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.45k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.45k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.45k|    }                                                  \
  |  |  |  | 3667|  16.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  12.5k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  12.5k|    static_cast<    \
  |  |  929|  12.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  12.5k|    static_cast<    \
  |  |  929|  12.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  16.9k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  87.3k|{
   89|  87.3k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  87.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  87.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  87.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  87.3k|    static_cast<    \
  |  |  929|  87.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  87.3k|    static_cast<    \
  |  |  929|  87.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  87.3k|}
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  87.3k|{
  127|  87.3k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  87.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  87.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  87.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  87.3k|    static_cast<    \
  |  |  929|  87.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  87.3k|    static_cast<    \
  |  |  929|  87.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  87.3k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  162|  17.4k|{
  163|  17.4k|    T value;
  164|  17.4k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  17.4k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  17.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.45k, False: 12.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.45k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.45k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.45k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.45k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.45k|    }                                                  \
  |  |  |  | 3667|  17.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  12.9k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  12.9k|    static_cast<    \
  |  |  929|  12.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  12.9k|    static_cast<    \
  |  |  929|  12.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  17.4k|}
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  77.8k|{
   89|  77.8k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  77.8k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  77.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  77.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  77.8k|    static_cast<    \
  |  |  929|  77.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  77.8k|    static_cast<    \
  |  |  929|  77.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  77.8k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   251k|{
   44|   251k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   251k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   251k|}
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  126|  77.8k|{
  127|  77.8k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  77.8k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  77.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  77.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  77.8k|    static_cast<    \
  |  |  929|  77.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  77.8k|    static_cast<    \
  |  |  929|  77.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  77.8k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeETnPvLPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT0_OSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   251k|{
   60|   251k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   251k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   251k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  162|  14.2k|{
  163|  14.2k|    T value;
  164|  14.2k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  14.2k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  14.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.45k, False: 9.80k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.45k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.45k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.45k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.45k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.45k|    }                                                  \
  |  |  |  | 3667|  14.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  9.80k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  9.80k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  9.80k|    static_cast<    \
  |  |  929|  9.80k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  9.80k|    static_cast<    \
  |  |  929|  9.80k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  14.2k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  48.6k|{
   72|  48.6k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  48.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  48.6k|}
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  85.9k|{
   89|  85.9k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  85.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  85.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  85.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  85.9k|    static_cast<    \
  |  |  929|  85.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  85.9k|    static_cast<    \
  |  |  929|  85.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  85.9k|}
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  126|  85.9k|{
  127|  85.9k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  85.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  85.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  85.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  85.9k|    static_cast<    \
  |  |  929|  85.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  85.9k|    static_cast<    \
  |  |  929|  85.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  85.9k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  162|  16.9k|{
  163|  16.9k|    T value;
  164|  16.9k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  16.9k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  16.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  16.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  16.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  16.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.45k, False: 12.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.45k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.45k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.45k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.45k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.45k|    }                                                  \
  |  |  |  | 3667|  16.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  12.4k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  12.4k|    static_cast<    \
  |  |  929|  12.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  12.4k|    static_cast<    \
  |  |  929|  12.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  16.9k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  87.3k|{
   89|  87.3k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  87.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  87.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  87.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  87.3k|    static_cast<    \
  |  |  929|  87.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  87.3k|    static_cast<    \
  |  |  929|  87.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  87.3k|}
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  126|  87.3k|{
  127|  87.3k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  87.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  87.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  87.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  87.3k|    static_cast<    \
  |  |  929|  87.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  87.3k|    static_cast<    \
  |  |  929|  87.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  87.3k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  162|  17.4k|{
  163|  17.4k|    T value;
  164|  17.4k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  17.4k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  17.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.45k, False: 12.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.45k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.45k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.45k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.45k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.45k|    }                                                  \
  |  |  |  | 3667|  17.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  12.9k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  12.9k|    static_cast<    \
  |  |  929|  12.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  12.9k|    static_cast<    \
  |  |  929|  12.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  17.4k|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  651|  1.46M|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  652|  1.46M|{
  653|  1.46M|    static_assert(std::is_same_v<Locale, std::locale>);
  654|  1.46M|}
_ZNK3scn2v36detail10locale_ref3getINSt3__16localeEEET_v:
  658|   613k|{
  659|   613k|    static_assert(std::is_same_v<Locale, std::locale>);
  660|   613k|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (660:12): [True: 306k, False: 306k]
  ------------------
  661|   613k|                    : std::locale{};
  662|   613k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1220|   644k|{
 1221|   644k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   644k|                                  m_nan_payload_buffer, value);
 1223|   644k|    value = this->setsign(value);
 1224|   644k|    return n;
 1225|   644k|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1220|   256k|{
 1221|   256k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   256k|                                  m_nan_payload_buffer, value);
 1223|   256k|    value = this->setsign(value);
 1224|   256k|    return n;
 1225|   256k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|   667k|{
 1221|   667k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   667k|                                  m_nan_payload_buffer, value);
 1223|   667k|    value = this->setsign(value);
 1224|   667k|    return n;
 1225|   667k|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|   293k|{
 1221|   293k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   293k|                                  m_nan_payload_buffer, value);
 1223|   293k|    value = this->setsign(value);
 1224|   293k|    return n;
 1225|   293k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1220|   673k|{
 1221|   673k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   673k|                                  m_nan_payload_buffer, value);
 1223|   673k|    value = this->setsign(value);
 1224|   673k|    return n;
 1225|   673k|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1220|   298k|{
 1221|   298k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   298k|                                  m_nan_payload_buffer, value);
 1223|   298k|    value = this->setsign(value);
 1224|   298k|    return n;
 1225|   298k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2183|   445k|{
 2184|   445k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2185|   445k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2191|   512k|{
 2192|   512k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2193|   512k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   512k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 472k, False: 40.0k]
  |  |  ------------------
  ------------------
 2194|   472k|        source.sync(*n);
 2195|   472k|    }
 2196|  40.0k|    else {
 2197|  40.0k|        source.sync_all();
 2198|  40.0k|    }
 2199|   512k|    return n;
 2200|   512k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2207|   251k|{
 2208|   251k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2209|   251k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2215|   251k|{
 2216|   251k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2217|   251k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   251k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 170k, False: 80.1k]
  |  |  ------------------
  ------------------
 2218|   170k|        source.sync(*n);
 2219|   170k|    }
 2220|  80.1k|    else {
 2221|  80.1k|        source.sync_all();
 2222|  80.1k|    }
 2223|   251k|    return n;
 2224|   251k|}
_ZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  193|   881k|{
  194|   881k|    return find_classic_impl(
  195|   881k|        source, [](char ch) { return is_ascii_space(ch); },
  196|   881k|        [](char32_t cp) { return detail::is_cp_space(cp); });
  197|   881k|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  201|  2.11M|{
  202|  2.11M|    return find_classic_impl(
  203|  2.11M|        source, [](char ch) { return !is_ascii_space(ch); },
  204|  2.11M|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  205|  2.11M|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2140|   445k|{
 2141|   445k|    return vscan_internal(source, format, args);
 2142|   445k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2146|   512k|{
 2147|   512k|    auto n = vscan_internal(source, format, args);
 2148|   512k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   512k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 472k, False: 40.0k]
  |  |  ------------------
  ------------------
 2149|   472k|        source.sync(*n);
 2150|   472k|    }
 2151|  40.0k|    else {
 2152|  40.0k|        source.sync_all();
 2153|  40.0k|    }
 2154|   512k|    return n;
 2155|   512k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2160|   251k|{
 2161|   251k|    return vscan_internal(source, format, args);
 2162|   251k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2166|   251k|{
 2167|   251k|    auto n = vscan_internal(source, format, args);
 2168|   251k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   251k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 170k, False: 80.1k]
  |  |  ------------------
  ------------------
 2169|   170k|        source.sync(*n);
 2170|   170k|    }
 2171|  80.1k|    else {
 2172|  80.1k|        source.sync_all();
 2173|  80.1k|    }
 2174|   251k|    return n;
 2175|   251k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2250|  97.4k|{
 2251|  97.4k|    return vscan_value_internal(source, arg);
 2252|  97.4k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2255|   105k|{
 2256|   105k|    auto n = vscan_value_internal(source, arg);
 2257|   105k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   105k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 98.9k, False: 6.68k]
  |  |  ------------------
  ------------------
 2258|  98.9k|        source.sync(*n);
 2259|  98.9k|    }
 2260|  6.68k|    else {
 2261|  6.68k|        source.sync_all();
 2262|  6.68k|    }
 2263|   105k|    return n;
 2264|   105k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2269|  48.6k|{
 2270|  48.6k|    return vscan_value_internal(source, arg);
 2271|  48.6k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2275|  48.6k|{
 2276|  48.6k|    auto n = vscan_value_internal(source, arg);
 2277|  48.6k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  48.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 35.2k, False: 13.3k]
  |  |  ------------------
  ------------------
 2278|  35.2k|        source.sync(*n);
 2279|  35.2k|    }
 2280|  13.3k|    else {
 2281|  13.3k|        source.sync_all();
 2282|  13.3k|    }
 2283|  48.6k|    return n;
 2284|  48.6k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|   881k|{
  118|   881k|    auto it = source.begin();
  119|       |
  120|  2.91M|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 2.34M, False: 567k]
  ------------------
  121|  2.34M|        auto sv =
  122|  2.34M|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  2.34M|                .substr(0, 8);
  124|       |
  125|  2.34M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 2.29M, False: 55.5k]
  ------------------
  126|  2.29M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  2.29M|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  2.29M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 291k, False: 1.99M]
  ------------------
  129|   291k|                break;
  130|   291k|            }
  131|  1.99M|            continue;
  132|  2.29M|        }
  133|       |
  134|   182k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 149k, False: 33.0k]
  ------------------
  135|   149k|            auto tmp =
  136|   149k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   149k|            auto res = get_next_code_point(tmp);
  138|   149k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 22.5k, False: 127k]
  ------------------
  139|  22.5k|                return it;
  140|  22.5k|            }
  141|   127k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|   127k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|   127k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|   127k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|   127k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|   127k|        }
  145|  55.5k|    }
  146|       |
  147|   858k|    return detail::make_string_view_iterator(source, it);
  148|   881k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  104|  3.64M|{
  105|  3.64M|    static_assert(sizeof(*source.data()) == 1);
  106|  3.64M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|  3.64M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.64M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  107|  3.64M|    uint64_t word{};
  108|  3.64M|    std::memcpy(&word, source.data(), source.size());
  109|       |
  110|  3.64M|    return has_byte_greater(word, 127) != 0;
  111|  3.64M|}
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  195|  14.0M|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  196|   149k|        [](char32_t cp) { return detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  2.11M|{
  118|  2.11M|    auto it = source.begin();
  119|       |
  120|  2.30M|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 1.29M, False: 1.00M]
  ------------------
  121|  1.29M|        auto sv =
  122|  1.29M|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  1.29M|                .substr(0, 8);
  124|       |
  125|  1.29M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 1.21M, False: 77.4k]
  ------------------
  126|  1.21M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  1.21M|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  1.21M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 1.03M, False: 183k]
  ------------------
  129|  1.03M|                break;
  130|  1.03M|            }
  131|   183k|            continue;
  132|  1.21M|        }
  133|       |
  134|   147k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 139k, False: 7.61k]
  ------------------
  135|   139k|            auto tmp =
  136|   139k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   139k|            auto res = get_next_code_point(tmp);
  138|   139k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 69.8k, False: 69.5k]
  ------------------
  139|  69.8k|                return it;
  140|  69.8k|            }
  141|  69.5k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  69.5k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  69.5k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  69.5k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  69.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  69.5k|        }
  145|  77.4k|    }
  146|       |
  147|  2.04M|    return detail::make_string_view_iterator(source, it);
  148|  2.11M|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  203|  1.86M|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  204|   139k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   644k|{
 1138|   644k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 3.51k, False: 641k]
  ------------------
 1139|  3.51k|        value = std::numeric_limits<T>::infinity();
 1140|  3.51k|        return 3;
 1141|  3.51k|    }
 1142|   641k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 3.19k, False: 638k]
  ------------------
 1143|  3.19k|        value = std::numeric_limits<T>::infinity();
 1144|  3.19k|        return 8;
 1145|  3.19k|    }
 1146|   638k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 28.8k, False: 609k]
  ------------------
 1147|  28.8k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  28.8k|        return 3;
 1149|  28.8k|    }
 1150|   609k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 1.09k, False: 608k]
  ------------------
 1151|  1.09k|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|  1.09k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|  1.09k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|  1.09k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|  1.09k|    }
 1182|       |
 1183|   608k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   608k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   608k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   608k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 130k, False: 477k]
  ------------------
 1185|   130k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   130k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.71k, False: 128k]
  |  |  ------------------
  ------------------
 1186|  2.71k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  2.71k|                                         "Invalid floating-point digit");
 1188|  2.71k|        }
 1189|   130k|    }
 1190|   605k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   605k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.27k, False: 598k]
  |  |  ------------------
  ------------------
 1191|  7.27k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  7.27k|                                     "Invalid floating-point digit");
 1193|  7.27k|    }
 1194|       |
 1195|       |    if constexpr (std::is_same_v<T, long double>) {
 1196|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|       |            double tmp{};
 1200|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|       |            value = tmp;
 1202|       |            return ret;
 1203|       |        }
 1204|       |        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|       |            return fast_float_fallback(data, value);
 1208|       |        }
 1209|       |    }
 1210|   598k|    else {
 1211|       |        // Default to fast_float
 1212|   598k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   598k|    }
 1214|   598k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIcfEC2ENS2_14impl_init_dataIcEE:
 1076|   598k|        : fast_float_impl_base{data.base()}, m_input(data.input)
 1077|   598k|    {
 1078|   598k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_114impl_init_dataIcE4baseEv:
  711|  2.15M|    {
  712|  2.15M|        return {kind, options};
  713|  2.15M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcfEclERf:
 1081|   598k|    {
 1082|   598k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 128k, False: 470k]
  ------------------
 1083|   598k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 22.8k, False: 447k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|   150k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|   150k|                                              value);
 1087|   150k|        }
 1088|       |
 1089|   447k|        const auto flags = get_flags();
 1090|   447k|        const auto view = get_view();
 1091|   447k|        const auto result = fast_float::from_chars(
 1092|   447k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|   447k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|   447k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 447k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|   447k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|   447k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.75k, False: 442k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  4.75k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  4.75k|                                              value);
 1102|  4.75k|        }
 1103|       |
 1104|   442k|        return result.ptr - view.data();
 1105|   447k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   155k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   155k|    {
 1048|   155k|#if !SCN_DISABLE_STRTOD
 1049|   155k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   155k|    }
 1056|   155k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfEC2ENS2_14impl_init_dataIcEE:
  892|   155k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  893|   155k|    {
  894|   155k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfEC2ENS2_9impl_baseE:
  725|   212k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfEclERf:
  897|   155k|    {
  898|   155k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   155k|                           generic_strtod);
  900|   155k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIcPFfPKcPPcEEENS0_13scan_expectedIlEERfPKT_T0_:
  731|   155k|    {
  732|   155k|        CharT* end{};
  733|   155k|        errno = 0;
  734|   155k|        value = strtod_cb(src, &end);
  735|   155k|        const auto saved_errno = errno;
  736|   155k|        auto chars_read = end - src;
  737|       |
  738|   155k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   155k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.56k, False: 150k]
  |  |  ------------------
  ------------------
  740|  5.56k|            return unexpected(e);
  741|  5.56k|        }
  742|       |
  743|   150k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 127k, False: 22.7k]
  ------------------
  744|   150k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 127k, False: 0]
  ------------------
  745|   127k|            chars_read -= 2;
  746|   127k|        }
  747|       |
  748|   150k|        return chars_read;
  749|   155k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE11check_errorElif:
  777|   212k|    {
  778|   212k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 83.2k, False: 128k]
  |  Branch (778:37): [True: 0, False: 83.2k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|   212k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 23.2k, False: 188k]
  ------------------
  785|   212k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 23.2k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|   212k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 8.93k, False: 203k]
  |  Branch (791:34): [True: 1.65k, False: 7.27k]
  ------------------
  792|  1.65k|            SCN_UNLIKELY_ATTR
  793|  1.65k|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|  1.65k|        }
  795|       |
  796|   210k|        SCN_GCC_COMPAT_PUSH
  797|   210k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|   210k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 210k, False: 0]
  ------------------
  800|   210k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 210k, False: 0]
  ------------------
  801|   210k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 7.25k, False: 203k]
  ------------------
  802|  7.25k|            SCN_UNLIKELY_ATTR
  803|  7.25k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|  7.25k|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|   203k|            return {};
  809|   210k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEf:
  686|   221k|{
  687|   221k|    return f == 0.0f || f == -0.0f;
  ------------------
  |  Branch (687:12): [True: 84.9k, False: 136k]
  |  Branch (687:25): [True: 0, False: 136k]
  ------------------
  688|   221k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   155k|    {
  755|   155k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 151k, False: 4.01k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   151k|            auto first_space = read_until_classic_space(input.view());
  758|   151k|            input.assign(
  759|   151k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   151k|        }
  761|       |
  762|   155k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 128k, False: 27.6k]
  ------------------
  763|   128k|            if constexpr (std::is_same_v<CharT, char>) {
  764|   128k|                input.get_allocated_string().insert(0, "0x");
  765|       |            }
  766|       |            else {
  767|       |                input.get_allocated_string().insert(0, L"0x");
  768|       |            }
  769|   128k|        }
  770|       |
  771|   155k|        return input.get_allocated_string().c_str();
  772|   155k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfE14generic_strtodEPKcPPc:
  904|   155k|    {
  905|   155k|        if constexpr (std::is_same_v<CharT, char>) {
  906|   155k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|       |        }
  908|       |        else {
  909|       |            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|       |        }
  911|   155k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE21generic_narrow_strtodEPKcPPc:
  812|   155k|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|   155k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|   155k|        if constexpr (std::is_same_v<T, float>) {
  838|   155k|            return std::strtof(str, str_end);
  839|       |        }
  840|       |        else if constexpr (std::is_same_v<T, double>) {
  841|       |            return std::strtod(str, str_end);
  842|       |        }
  843|       |        else if constexpr (std::is_same_v<T, long double>) {
  844|       |            return std::strtold(str, str_end);
  845|       |        }
  846|   155k|#endif
  847|   155k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_120fast_float_impl_base9get_flagsEv:
 1060|  1.29M|    {
 1061|  1.29M|        unsigned format_flags{};
 1062|  1.29M|        if ((m_options & float_reader_base::allow_fixed) != 0) {
  ------------------
  |  Branch (1062:13): [True: 1.28M, False: 10.3k]
  ------------------
 1063|  1.28M|            format_flags |= fast_float::fixed;
 1064|  1.28M|        }
 1065|  1.29M|        if ((m_options & float_reader_base::allow_scientific) != 0) {
  ------------------
  |  Branch (1065:13): [True: 1.09M, False: 196k]
  ------------------
 1066|  1.09M|            format_flags |= fast_float::scientific;
 1067|  1.09M|        }
 1068|       |
 1069|  1.29M|        return static_cast<fast_float::chars_format>(format_flags);
 1070|  1.29M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcfE8get_viewEv:
 1109|   447k|    {
 1110|   447k|        if constexpr (sizeof(CharT) == 1) {
 1111|   447k|            return m_input.view();
 1112|       |        }
 1113|       |        else if constexpr (sizeof(CharT) == 2) {
 1114|       |            return std::u16string_view{
 1115|       |                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|       |                m_input.view().size()};
 1117|       |        }
 1118|       |        else {
 1119|       |            return std::u32string_view{
 1120|       |                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|       |                m_input.view().size()};
 1122|       |        }
 1123|   447k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   256k|{
 1138|   256k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 256k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|   256k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 256k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|   256k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 256k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|   256k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 256k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|   256k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   256k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   256k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   256k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 61.4k, False: 195k]
  ------------------
 1185|  61.4k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  61.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.54k, False: 52.9k]
  |  |  ------------------
  ------------------
 1186|  8.54k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  8.54k|                                         "Invalid floating-point digit");
 1188|  8.54k|        }
 1189|  61.4k|    }
 1190|   248k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   248k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.7k, False: 227k]
  |  |  ------------------
  ------------------
 1191|  20.7k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  20.7k|                                     "Invalid floating-point digit");
 1193|  20.7k|    }
 1194|       |
 1195|       |    if constexpr (std::is_same_v<T, long double>) {
 1196|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|       |            double tmp{};
 1200|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|       |            value = tmp;
 1202|       |            return ret;
 1203|       |        }
 1204|       |        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|       |            return fast_float_fallback(data, value);
 1208|       |        }
 1209|       |    }
 1210|   227k|    else {
 1211|       |        // Default to fast_float
 1212|   227k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   227k|    }
 1214|   227k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIwfEC2ENS2_14impl_init_dataIwEE:
 1076|   227k|        : fast_float_impl_base{data.base()}, m_input(data.input)
 1077|   227k|    {
 1078|   227k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_114impl_init_dataIwE4baseEv:
  711|   871k|    {
  712|   871k|        return {kind, options};
  713|   871k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwfEclERf:
 1081|   227k|    {
 1082|   227k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 52.8k, False: 174k]
  ------------------
 1083|   227k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 363, False: 174k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|  53.2k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|  53.2k|                                              value);
 1087|  53.2k|        }
 1088|       |
 1089|   174k|        const auto flags = get_flags();
 1090|   174k|        const auto view = get_view();
 1091|   174k|        const auto result = fast_float::from_chars(
 1092|   174k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|   174k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|   174k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 174k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|   174k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|   174k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.29k, False: 170k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  3.29k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  3.29k|                                              value);
 1102|  3.29k|        }
 1103|       |
 1104|   170k|        return result.ptr - view.data();
 1105|   174k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  56.5k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  56.5k|    {
 1048|  56.5k|#if !SCN_DISABLE_STRTOD
 1049|  56.5k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  56.5k|    }
 1056|  56.5k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfEC2ENS2_14impl_init_dataIwEE:
  892|  56.5k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  893|  56.5k|    {
  894|  56.5k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfEclERf:
  897|  56.5k|    {
  898|  56.5k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  56.5k|                           generic_strtod);
  900|  56.5k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIwPFfPKwPPwEEENS0_13scan_expectedIlEERfPKT_T0_:
  731|  56.5k|    {
  732|  56.5k|        CharT* end{};
  733|  56.5k|        errno = 0;
  734|  56.5k|        value = strtod_cb(src, &end);
  735|  56.5k|        const auto saved_errno = errno;
  736|  56.5k|        auto chars_read = end - src;
  737|       |
  738|  56.5k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  56.5k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  56.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.35k, False: 53.1k]
  |  |  ------------------
  ------------------
  740|  3.35k|            return unexpected(e);
  741|  3.35k|        }
  742|       |
  743|  53.1k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 52.8k, False: 363]
  ------------------
  744|  53.1k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 52.8k, False: 0]
  ------------------
  745|  52.8k|            chars_read -= 2;
  746|  52.8k|        }
  747|       |
  748|  53.1k|        return chars_read;
  749|  56.5k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  56.5k|    {
  755|  56.5k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 54.5k, False: 2.05k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  54.5k|            auto first_space = read_until_classic_space(input.view());
  758|  54.5k|            input.assign(
  759|  54.5k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  54.5k|        }
  761|       |
  762|  56.5k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 52.8k, False: 3.65k]
  ------------------
  763|       |            if constexpr (std::is_same_v<CharT, char>) {
  764|       |                input.get_allocated_string().insert(0, "0x");
  765|       |            }
  766|  52.8k|            else {
  767|  52.8k|                input.get_allocated_string().insert(0, L"0x");
  768|  52.8k|            }
  769|  52.8k|        }
  770|       |
  771|  56.5k|        return input.get_allocated_string().c_str();
  772|  56.5k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfE14generic_strtodEPKwPPw:
  904|  56.5k|    {
  905|       |        if constexpr (std::is_same_v<CharT, char>) {
  906|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|       |        }
  908|  56.5k|        else {
  909|  56.5k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  56.5k|        }
  911|  56.5k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE19generic_wide_strtodEPKwPPw:
  850|  56.5k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|  56.5k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|  56.5k|        if constexpr (std::is_same_v<T, float>) {
  876|  56.5k|            return std::wcstof(str, str_end);
  877|       |        }
  878|       |        else if constexpr (std::is_same_v<T, double>) {
  879|       |            return std::wcstod(str, str_end);
  880|       |        }
  881|       |        else if constexpr (std::is_same_v<T, long double>) {
  882|       |            return std::wcstold(str, str_end);
  883|       |        }
  884|  56.5k|#endif
  885|  56.5k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwfE8get_viewEv:
 1109|   174k|    {
 1110|       |        if constexpr (sizeof(CharT) == 1) {
 1111|       |            return m_input.view();
 1112|       |        }
 1113|       |        else if constexpr (sizeof(CharT) == 2) {
 1114|       |            return std::u16string_view{
 1115|       |                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|       |                m_input.view().size()};
 1117|       |        }
 1118|   174k|        else {
 1119|   174k|            return std::u32string_view{
 1120|   174k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|   174k|                m_input.view().size()};
 1122|   174k|        }
 1123|   174k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   667k|{
 1138|   667k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 3.87k, False: 663k]
  ------------------
 1139|  3.87k|        value = std::numeric_limits<T>::infinity();
 1140|  3.87k|        return 3;
 1141|  3.87k|    }
 1142|   663k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 3.41k, False: 659k]
  ------------------
 1143|  3.41k|        value = std::numeric_limits<T>::infinity();
 1144|  3.41k|        return 8;
 1145|  3.41k|    }
 1146|   659k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 29.3k, False: 630k]
  ------------------
 1147|  29.3k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  29.3k|        return 3;
 1149|  29.3k|    }
 1150|   630k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 1.19k, False: 629k]
  ------------------
 1151|  1.19k|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|  1.19k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|  1.19k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|  1.19k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|  1.19k|    }
 1182|       |
 1183|   629k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   629k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   629k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   629k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 133k, False: 495k]
  ------------------
 1185|   133k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.77k, False: 130k]
  |  |  ------------------
  ------------------
 1186|  2.77k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  2.77k|                                         "Invalid floating-point digit");
 1188|  2.77k|        }
 1189|   133k|    }
 1190|   626k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   626k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.72k, False: 618k]
  |  |  ------------------
  ------------------
 1191|  7.72k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  7.72k|                                     "Invalid floating-point digit");
 1193|  7.72k|    }
 1194|       |
 1195|       |    if constexpr (std::is_same_v<T, long double>) {
 1196|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|       |            double tmp{};
 1200|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|       |            value = tmp;
 1202|       |            return ret;
 1203|       |        }
 1204|       |        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|       |            return fast_float_fallback(data, value);
 1208|       |        }
 1209|       |    }
 1210|   618k|    else {
 1211|       |        // Default to fast_float
 1212|   618k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   618k|    }
 1214|   618k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIcdEC2ENS2_14impl_init_dataIcEE:
 1076|   618k|        : fast_float_impl_base{data.base()}, m_input(data.input)
 1077|   618k|    {
 1078|   618k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcdEclERd:
 1081|   618k|    {
 1082|   618k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 130k, False: 487k]
  ------------------
 1083|   618k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 24.7k, False: 463k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|   155k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|   155k|                                              value);
 1087|   155k|        }
 1088|       |
 1089|   463k|        const auto flags = get_flags();
 1090|   463k|        const auto view = get_view();
 1091|   463k|        const auto result = fast_float::from_chars(
 1092|   463k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|   463k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|   463k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 463k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|   463k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|   463k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.24k, False: 460k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  2.24k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  2.24k|                                              value);
 1102|  2.24k|        }
 1103|       |
 1104|   460k|        return result.ptr - view.data();
 1105|   463k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   157k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   157k|    {
 1048|   157k|#if !SCN_DISABLE_STRTOD
 1049|   157k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   157k|    }
 1056|   157k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdEC2ENS2_14impl_init_dataIcEE:
  892|   157k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  893|   157k|    {
  894|   157k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdEC2ENS2_9impl_baseE:
  725|   212k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdEclERd:
  897|   157k|    {
  898|   157k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   157k|                           generic_strtod);
  900|   157k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIcPFdPKcPPcEEENS0_13scan_expectedIlEERdPKT_T0_:
  731|   157k|    {
  732|   157k|        CharT* end{};
  733|   157k|        errno = 0;
  734|   157k|        value = strtod_cb(src, &end);
  735|   157k|        const auto saved_errno = errno;
  736|   157k|        auto chars_read = end - src;
  737|       |
  738|   157k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   157k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.67k, False: 155k]
  |  |  ------------------
  ------------------
  740|  2.67k|            return unexpected(e);
  741|  2.67k|        }
  742|       |
  743|   155k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 130k, False: 24.7k]
  ------------------
  744|   155k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 130k, False: 0]
  ------------------
  745|   130k|            chars_read -= 2;
  746|   130k|        }
  747|       |
  748|   155k|        return chars_read;
  749|   157k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE11check_errorElid:
  777|   212k|    {
  778|   212k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 82.5k, False: 130k]
  |  Branch (778:37): [True: 0, False: 82.5k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|   212k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 25.1k, False: 187k]
  ------------------
  785|   212k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 25.1k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|   212k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 4.32k, False: 208k]
  |  Branch (791:34): [True: 447, False: 3.88k]
  ------------------
  792|    447|            SCN_UNLIKELY_ATTR
  793|    447|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|    447|        }
  795|       |
  796|   212k|        SCN_GCC_COMPAT_PUSH
  797|   212k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|   212k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 212k, False: 0]
  ------------------
  800|   212k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 212k, False: 0]
  ------------------
  801|   212k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 3.88k, False: 208k]
  ------------------
  802|  3.88k|            SCN_UNLIKELY_ATTR
  803|  3.88k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|  3.88k|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|   208k|            return {};
  809|   212k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEd:
  690|   217k|{
  691|   217k|    return d == 0.0 || d == -0.0;
  ------------------
  |  Branch (691:12): [True: 82.9k, False: 134k]
  |  Branch (691:24): [True: 0, False: 134k]
  ------------------
  692|   217k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   157k|    {
  755|   157k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 154k, False: 2.93k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   154k|            auto first_space = read_until_classic_space(input.view());
  758|   154k|            input.assign(
  759|   154k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   154k|        }
  761|       |
  762|   157k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 130k, False: 27.0k]
  ------------------
  763|   130k|            if constexpr (std::is_same_v<CharT, char>) {
  764|   130k|                input.get_allocated_string().insert(0, "0x");
  765|       |            }
  766|       |            else {
  767|       |                input.get_allocated_string().insert(0, L"0x");
  768|       |            }
  769|   130k|        }
  770|       |
  771|   157k|        return input.get_allocated_string().c_str();
  772|   157k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdE14generic_strtodEPKcPPc:
  904|   157k|    {
  905|   157k|        if constexpr (std::is_same_v<CharT, char>) {
  906|   157k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|       |        }
  908|       |        else {
  909|       |            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|       |        }
  911|   157k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE21generic_narrow_strtodEPKcPPc:
  812|   157k|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|   157k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|       |        if constexpr (std::is_same_v<T, float>) {
  838|       |            return std::strtof(str, str_end);
  839|       |        }
  840|   157k|        else if constexpr (std::is_same_v<T, double>) {
  841|   157k|            return std::strtod(str, str_end);
  842|       |        }
  843|       |        else if constexpr (std::is_same_v<T, long double>) {
  844|       |            return std::strtold(str, str_end);
  845|       |        }
  846|   157k|#endif
  847|   157k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcdE8get_viewEv:
 1109|   463k|    {
 1110|   463k|        if constexpr (sizeof(CharT) == 1) {
 1111|   463k|            return m_input.view();
 1112|       |        }
 1113|       |        else if constexpr (sizeof(CharT) == 2) {
 1114|       |            return std::u16string_view{
 1115|       |                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|       |                m_input.view().size()};
 1117|       |        }
 1118|       |        else {
 1119|       |            return std::u32string_view{
 1120|       |                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|       |                m_input.view().size()};
 1122|       |        }
 1123|   463k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   293k|{
 1138|   293k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 293k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|   293k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 293k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|   293k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 293k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|   293k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 293k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|   293k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   293k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   293k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   293k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 61.4k, False: 231k]
  ------------------
 1185|  61.4k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  61.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.54k, False: 52.9k]
  |  |  ------------------
  ------------------
 1186|  8.54k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  8.54k|                                         "Invalid floating-point digit");
 1188|  8.54k|        }
 1189|  61.4k|    }
 1190|   284k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   284k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 21.2k, False: 263k]
  |  |  ------------------
  ------------------
 1191|  21.2k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  21.2k|                                     "Invalid floating-point digit");
 1193|  21.2k|    }
 1194|       |
 1195|       |    if constexpr (std::is_same_v<T, long double>) {
 1196|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|       |            double tmp{};
 1200|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|       |            value = tmp;
 1202|       |            return ret;
 1203|       |        }
 1204|       |        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|       |            return fast_float_fallback(data, value);
 1208|       |        }
 1209|       |    }
 1210|   263k|    else {
 1211|       |        // Default to fast_float
 1212|   263k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   263k|    }
 1214|   263k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIwdEC2ENS2_14impl_init_dataIwEE:
 1076|   263k|        : fast_float_impl_base{data.base()}, m_input(data.input)
 1077|   263k|    {
 1078|   263k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwdEclERd:
 1081|   263k|    {
 1082|   263k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 52.8k, False: 210k]
  ------------------
 1083|   263k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 363, False: 210k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|  53.2k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|  53.2k|                                              value);
 1087|  53.2k|        }
 1088|       |
 1089|   210k|        const auto flags = get_flags();
 1090|   210k|        const auto view = get_view();
 1091|   210k|        const auto result = fast_float::from_chars(
 1092|   210k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|   210k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|   210k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 210k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|   210k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|   210k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.60k, False: 208k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  1.60k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  1.60k|                                              value);
 1102|  1.60k|        }
 1103|       |
 1104|   208k|        return result.ptr - view.data();
 1105|   210k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  54.8k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  54.8k|    {
 1048|  54.8k|#if !SCN_DISABLE_STRTOD
 1049|  54.8k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  54.8k|    }
 1056|  54.8k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdEC2ENS2_14impl_init_dataIwEE:
  892|  54.8k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  893|  54.8k|    {
  894|  54.8k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdEclERd:
  897|  54.8k|    {
  898|  54.8k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  54.8k|                           generic_strtod);
  900|  54.8k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIwPFdPKwPPwEEENS0_13scan_expectedIlEERdPKT_T0_:
  731|  54.8k|    {
  732|  54.8k|        CharT* end{};
  733|  54.8k|        errno = 0;
  734|  54.8k|        value = strtod_cb(src, &end);
  735|  54.8k|        const auto saved_errno = errno;
  736|  54.8k|        auto chars_read = end - src;
  737|       |
  738|  54.8k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  54.8k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  54.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.65k, False: 53.2k]
  |  |  ------------------
  ------------------
  740|  1.65k|            return unexpected(e);
  741|  1.65k|        }
  742|       |
  743|  53.2k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 52.8k, False: 363]
  ------------------
  744|  53.2k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 52.8k, False: 0]
  ------------------
  745|  52.8k|            chars_read -= 2;
  746|  52.8k|        }
  747|       |
  748|  53.2k|        return chars_read;
  749|  54.8k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  54.8k|    {
  755|  54.8k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 53.6k, False: 1.21k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  53.6k|            auto first_space = read_until_classic_space(input.view());
  758|  53.6k|            input.assign(
  759|  53.6k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  53.6k|        }
  761|       |
  762|  54.8k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 52.8k, False: 1.96k]
  ------------------
  763|       |            if constexpr (std::is_same_v<CharT, char>) {
  764|       |                input.get_allocated_string().insert(0, "0x");
  765|       |            }
  766|  52.8k|            else {
  767|  52.8k|                input.get_allocated_string().insert(0, L"0x");
  768|  52.8k|            }
  769|  52.8k|        }
  770|       |
  771|  54.8k|        return input.get_allocated_string().c_str();
  772|  54.8k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdE14generic_strtodEPKwPPw:
  904|  54.8k|    {
  905|       |        if constexpr (std::is_same_v<CharT, char>) {
  906|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|       |        }
  908|  54.8k|        else {
  909|  54.8k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  54.8k|        }
  911|  54.8k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE19generic_wide_strtodEPKwPPw:
  850|  54.8k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|  54.8k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|       |        if constexpr (std::is_same_v<T, float>) {
  876|       |            return std::wcstof(str, str_end);
  877|       |        }
  878|  54.8k|        else if constexpr (std::is_same_v<T, double>) {
  879|  54.8k|            return std::wcstod(str, str_end);
  880|       |        }
  881|       |        else if constexpr (std::is_same_v<T, long double>) {
  882|       |            return std::wcstold(str, str_end);
  883|       |        }
  884|  54.8k|#endif
  885|  54.8k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwdE8get_viewEv:
 1109|   210k|    {
 1110|       |        if constexpr (sizeof(CharT) == 1) {
 1111|       |            return m_input.view();
 1112|       |        }
 1113|       |        else if constexpr (sizeof(CharT) == 2) {
 1114|       |            return std::u16string_view{
 1115|       |                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|       |                m_input.view().size()};
 1117|       |        }
 1118|   210k|        else {
 1119|   210k|            return std::u32string_view{
 1120|   210k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|   210k|                m_input.view().size()};
 1122|   210k|        }
 1123|   210k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   673k|{
 1138|   673k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 4.00k, False: 669k]
  ------------------
 1139|  4.00k|        value = std::numeric_limits<T>::infinity();
 1140|  4.00k|        return 3;
 1141|  4.00k|    }
 1142|   669k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 3.51k, False: 665k]
  ------------------
 1143|  3.51k|        value = std::numeric_limits<T>::infinity();
 1144|  3.51k|        return 8;
 1145|  3.51k|    }
 1146|   665k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 29.6k, False: 636k]
  ------------------
 1147|  29.6k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  29.6k|        return 3;
 1149|  29.6k|    }
 1150|   636k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 1.22k, False: 634k]
  ------------------
 1151|  1.22k|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|  1.22k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|  1.22k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|  1.22k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|  1.22k|    }
 1182|       |
 1183|   634k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   634k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   634k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   634k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 134k, False: 500k]
  ------------------
 1185|   134k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.85k, False: 131k]
  |  |  ------------------
  ------------------
 1186|  2.85k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  2.85k|                                         "Invalid floating-point digit");
 1188|  2.85k|        }
 1189|   134k|    }
 1190|   632k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   632k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.99k, False: 624k]
  |  |  ------------------
  ------------------
 1191|  7.99k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  7.99k|                                     "Invalid floating-point digit");
 1193|  7.99k|    }
 1194|       |
 1195|   624k|    if constexpr (std::is_same_v<T, long double>) {
 1196|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|       |            double tmp{};
 1200|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|       |            value = tmp;
 1202|       |            return ret;
 1203|       |        }
 1204|   624k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|   624k|            return fast_float_fallback(data, value);
 1208|   624k|        }
 1209|       |    }
 1210|       |    else {
 1211|       |        // Default to fast_float
 1212|       |        return fast_float_impl<CharT, T>{data}(value);
 1213|       |    }
 1214|   624k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   624k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   624k|    {
 1048|   624k|#if !SCN_DISABLE_STRTOD
 1049|   624k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   624k|    }
 1056|   624k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceEC2ENS2_14impl_init_dataIcEE:
  892|   624k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  893|   624k|    {
  894|   624k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeEC2ENS2_9impl_baseE:
  725|   892k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceEclERe:
  897|   624k|    {
  898|   624k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   624k|                           generic_strtod);
  900|   624k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIcPFePKcPPcEEENS0_13scan_expectedIlEERePKT_T0_:
  731|   624k|    {
  732|   624k|        CharT* end{};
  733|   624k|        errno = 0;
  734|   624k|        value = strtod_cb(src, &end);
  735|   624k|        const auto saved_errno = errno;
  736|   624k|        auto chars_read = end - src;
  737|       |
  738|   624k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   624k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   624k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 604, False: 623k]
  |  |  ------------------
  ------------------
  740|    604|            return unexpected(e);
  741|    604|        }
  742|       |
  743|   623k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 131k, False: 492k]
  ------------------
  744|   623k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 131k, False: 0]
  ------------------
  745|   131k|            chars_read -= 2;
  746|   131k|        }
  747|       |
  748|   623k|        return chars_read;
  749|   624k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE11check_errorElie:
  777|   892k|    {
  778|   892k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 388k, False: 503k]
  |  Branch (778:37): [True: 0, False: 388k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|   892k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 25.1k, False: 867k]
  ------------------
  785|   892k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 25.1k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|   892k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 858, False: 891k]
  |  Branch (791:34): [True: 121, False: 737]
  ------------------
  792|    121|            SCN_UNLIKELY_ATTR
  793|    121|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|    121|        }
  795|       |
  796|   892k|        SCN_GCC_COMPAT_PUSH
  797|   892k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|   892k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 892k, False: 0]
  ------------------
  800|   892k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 892k, False: 0]
  ------------------
  801|   892k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 737, False: 891k]
  ------------------
  802|    737|            SCN_UNLIKELY_ATTR
  803|    737|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|    737|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|   891k|            return {};
  809|   892k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEe:
  694|   893k|{
  695|   893k|    return ld == 0.0L || ld == -0.0L;
  ------------------
  |  Branch (695:12): [True: 388k, False: 504k]
  |  Branch (695:26): [True: 0, False: 504k]
  ------------------
  696|   893k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   624k|    {
  755|   624k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 574k, False: 49.1k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   574k|            auto first_space = read_until_classic_space(input.view());
  758|   574k|            input.assign(
  759|   574k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   574k|        }
  761|       |
  762|   624k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 131k, False: 492k]
  ------------------
  763|   131k|            if constexpr (std::is_same_v<CharT, char>) {
  764|   131k|                input.get_allocated_string().insert(0, "0x");
  765|       |            }
  766|       |            else {
  767|       |                input.get_allocated_string().insert(0, L"0x");
  768|       |            }
  769|   131k|        }
  770|       |
  771|   624k|        return input.get_allocated_string().c_str();
  772|   624k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceE14generic_strtodEPKcPPc:
  904|   624k|    {
  905|   624k|        if constexpr (std::is_same_v<CharT, char>) {
  906|   624k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|       |        }
  908|       |        else {
  909|       |            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|       |        }
  911|   624k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE21generic_narrow_strtodEPKcPPc:
  812|   624k|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|   624k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|       |        if constexpr (std::is_same_v<T, float>) {
  838|       |            return std::strtof(str, str_end);
  839|       |        }
  840|       |        else if constexpr (std::is_same_v<T, double>) {
  841|       |            return std::strtod(str, str_end);
  842|       |        }
  843|   624k|        else if constexpr (std::is_same_v<T, long double>) {
  844|   624k|            return std::strtold(str, str_end);
  845|   624k|        }
  846|   624k|#endif
  847|   624k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   298k|{
 1138|   298k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 298k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|   298k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 298k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|   298k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 298k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|   298k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 298k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|   298k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   298k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   298k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   298k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 61.5k, False: 237k]
  ------------------
 1185|  61.5k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  61.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.55k, False: 52.9k]
  |  |  ------------------
  ------------------
 1186|  8.55k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  8.55k|                                         "Invalid floating-point digit");
 1188|  8.55k|        }
 1189|  61.5k|    }
 1190|   290k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   290k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 21.6k, False: 268k]
  |  |  ------------------
  ------------------
 1191|  21.6k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  21.6k|                                     "Invalid floating-point digit");
 1193|  21.6k|    }
 1194|       |
 1195|   268k|    if constexpr (std::is_same_v<T, long double>) {
 1196|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|       |            double tmp{};
 1200|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|       |            value = tmp;
 1202|       |            return ret;
 1203|       |        }
 1204|   268k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|   268k|            return fast_float_fallback(data, value);
 1208|   268k|        }
 1209|       |    }
 1210|       |    else {
 1211|       |        // Default to fast_float
 1212|       |        return fast_float_impl<CharT, T>{data}(value);
 1213|       |    }
 1214|   268k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   268k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   268k|    {
 1048|   268k|#if !SCN_DISABLE_STRTOD
 1049|   268k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   268k|    }
 1056|   268k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweEC2ENS2_14impl_init_dataIwEE:
  892|   268k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  893|   268k|    {
  894|   268k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweEclERe:
  897|   268k|    {
  898|   268k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   268k|                           generic_strtod);
  900|   268k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIwPFePKwPPwEEENS0_13scan_expectedIlEERePKT_T0_:
  731|   268k|    {
  732|   268k|        CharT* end{};
  733|   268k|        errno = 0;
  734|   268k|        value = strtod_cb(src, &end);
  735|   268k|        const auto saved_errno = errno;
  736|   268k|        auto chars_read = end - src;
  737|       |
  738|   268k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   268k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   268k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 254, False: 268k]
  |  |  ------------------
  ------------------
  740|    254|            return unexpected(e);
  741|    254|        }
  742|       |
  743|   268k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 52.9k, False: 215k]
  ------------------
  744|   268k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 52.9k, False: 0]
  ------------------
  745|  52.9k|            chars_read -= 2;
  746|  52.9k|        }
  747|       |
  748|   268k|        return chars_read;
  749|   268k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   268k|    {
  755|   268k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 263k, False: 4.83k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   263k|            auto first_space = read_until_classic_space(input.view());
  758|   263k|            input.assign(
  759|   263k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   263k|        }
  761|       |
  762|   268k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 52.9k, False: 215k]
  ------------------
  763|       |            if constexpr (std::is_same_v<CharT, char>) {
  764|       |                input.get_allocated_string().insert(0, "0x");
  765|       |            }
  766|  52.9k|            else {
  767|  52.9k|                input.get_allocated_string().insert(0, L"0x");
  768|  52.9k|            }
  769|  52.9k|        }
  770|       |
  771|   268k|        return input.get_allocated_string().c_str();
  772|   268k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweE14generic_strtodEPKwPPw:
  904|   268k|    {
  905|       |        if constexpr (std::is_same_v<CharT, char>) {
  906|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|       |        }
  908|   268k|        else {
  909|   268k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|   268k|        }
  911|   268k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE19generic_wide_strtodEPKwPPw:
  850|   268k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|   268k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|       |        if constexpr (std::is_same_v<T, float>) {
  876|       |            return std::wcstof(str, str_end);
  877|       |        }
  878|       |        else if constexpr (std::is_same_v<T, double>) {
  879|       |            return std::wcstod(str, str_end);
  880|       |        }
  881|   268k|        else if constexpr (std::is_same_v<T, long double>) {
  882|   268k|            return std::wcstold(str, str_end);
  883|   268k|        }
  884|   268k|#endif
  885|   268k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2072|  1.02M|{
 2073|  1.02M|    const auto argcount = args.size();
 2074|  1.02M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2074:9): [True: 211k, False: 813k]
  |  Branch (2074:60): [True: 211k, False: 0]
  ------------------
 2075|   211k|        auto arg = args.get(0);
 2076|   211k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   211k|    static_cast<    \
  |  |  929|   211k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2077|   211k|    }
 2078|       |
 2079|   813k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2079:9): [True: 0, False: 813k]
  ------------------
 2080|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2081|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|        return vscan_parse_format_string(format, handler);
 2084|      0|    }
 2085|       |
 2086|   813k|    SCN_UNLIKELY_ATTR
 2087|   813k|    {
 2088|   813k|        auto handler = format_handler<false, CharT>{
 2089|   813k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   813k|    static_cast<    \
  |  |  929|   813k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   813k|    static_cast<    \
  |  |  929|   813k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2090|   813k|        return vscan_parse_format_string(format, handler);
 2091|   813k|    }
 2092|   813k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|  1.91M|{
 1625|  1.91M|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 1.50M, False: 406k]
  ------------------
 1626|  1.50M|        return false;
 1627|  1.50M|    }
 1628|   406k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 406k, False: 0]
  |  Branch (1628:39): [True: 406k, False: 0]
  ------------------
 1629|  1.91M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|   316k|{
 1658|   316k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   316k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 316k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|   316k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|   316k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 316k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|   316k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|   316k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|   316k|    static_cast<    \
  |  |  929|   316k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|   316k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|   316k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   316k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   316k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   316k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20.0k, False: 296k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  20.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  20.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  20.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  20.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  20.0k|    }                                                  \
  |  |  |  | 3667|   316k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   296k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|   296k|    return it.position();
 1675|   316k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1899|   695k|        : format_handler_base{argcount},
 1900|   695k|          parse_ctx{format},
 1901|   695k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   695k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   695k|    static_cast<    \
  |  |  929|   695k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   695k|    static_cast<    \
  |  |  929|   695k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|   695k|    {
 1903|   695k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1720|  2.31M|    format_handler_base(size_t argcount) : args_count(argcount)
 1721|  2.31M|    {
 1722|  2.31M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|  2.31M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.31M]
  |  |  ------------------
  ------------------
 1723|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1724|      0|        }
 1725|  2.31M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1851|   695k|        : contiguous_ctx(source, args, loc)
 1852|   695k|    {
 1853|   695k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   695k|{
 2038|   695k|    const auto beg = handler.get_ctx().begin();
 2039|   695k|    detail::parse_format_string<false>(format, handler);
 2040|   695k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   695k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 66.8k, False: 629k]
  |  |  ------------------
  ------------------
 2041|  66.8k|        return unexpected(handler.error);
 2042|  66.8k|    }
 2043|   629k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   695k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2021|  4.73M|    {
 2022|  4.73M|        return ctx.get();
 2023|  4.73M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1856|  4.73M|    {
 1857|  4.73M|        return contiguous_ctx;
 1858|  4.73M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1906|  1.32M|    {
 1907|  1.32M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 1.32M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|  1.32M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   695k|{
 1681|   695k|    auto arg = ctx.arg(id);
 1682|   695k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   695k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 695k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   695k|    return arg;
 1686|   695k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1796|  2.31M|    {
 1797|  2.31M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  2.31M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.31M]
  |  |  ------------------
  ------------------
 1798|      0|            on_error("Invalid out-of-range argument ID");
 1799|      0|            return;
 1800|      0|        }
 1801|       |
 1802|  2.31M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|  2.31M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.31M]
  |  |  ------------------
  ------------------
 1803|      0|            return on_error("Argument with this ID has already been scanned");
 1804|      0|        }
 1805|       |
 1806|  2.31M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  2.31M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.31M, False: 0]
  |  |  ------------------
  ------------------
 1807|  2.31M|            visited_args_lower64 |= (1ull << id);
 1808|  2.31M|            return;
 1809|  2.31M|        }
 1810|       |
 1811|      0|        id -= 64;
 1812|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1813|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1781|  2.31M|    {
 1782|  2.31M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  2.31M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.31M]
  |  |  ------------------
  ------------------
 1783|      0|            on_error("Invalid out-of-range argument ID");
 1784|      0|            return false;
 1785|      0|        }
 1786|       |
 1787|  2.31M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  2.31M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.31M, False: 0]
  |  |  ------------------
  ------------------
 1788|  2.31M|            return (visited_args_lower64 >> id) & 1ull;
 1789|  2.31M|        }
 1790|       |
 1791|      0|        id -= 64;
 1792|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1793|  2.31M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1765|   400k|    {
 1766|   400k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|   400k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 400k, False: 0]
  |  |  ------------------
  ------------------
 1767|   400k|            error = err;
 1768|   400k|        }
 1769|   400k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1943|   695k|    {
 1944|   695k|        return parse_ctx.next_arg_id();
 1945|   695k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1984|   695k|    {
 1985|   695k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   695k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   695k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 695k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   695k|        auto specs = detail::format_specs{};
 1998|   695k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   695k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   695k|            arg.type()};
 2001|       |
 2002|   695k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   695k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 695k]
  |  Branch (2003:29): [True: 0, False: 695k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   695k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   695k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 695k]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|   695k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   695k|        on_visit_scan_arg(
 2014|   695k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   695k|                                           get_ctx().locale()},
 2016|   695k|            arg);
 2017|   695k|        return parse_ctx.begin();
 2018|   695k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1699|   695k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|   695k|    {
 1701|   695k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1955|   695k|    {
 1956|   695k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 695k]
  |  Branch (1956:23): [True: 0, False: 695k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   695k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   695k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   695k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   695k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 66.8k, False: 629k]
  |  |  ------------------
  ------------------
 1963|  66.8k|            on_error(r.error());
 1964|  66.8k|        }
 1965|   629k|        else {
 1966|   629k|            get_ctx().advance_to(*r);
 1967|   629k|        }
 1968|   695k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1728|  2.31M|    {
 1729|  2.31M|        {
 1730|  2.31M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1730:45): [True: 0, False: 2.31M]
  ------------------
 1731|  2.31M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1731:35): [True: 0, False: 2.31M]
  ------------------
 1732|  2.31M|                                      ? std::numeric_limits<uint64_t>::max()
 1733|  2.31M|                                      : (1ull << args_count_lower64) - 1;
 1734|       |
 1735|  2.31M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1735:17): [True: 0, False: 2.31M]
  ------------------
 1736|      0|                return on_error("Argument list not exhausted");
 1737|      0|            }
 1738|  2.31M|        }
 1739|       |
 1740|  2.31M|        if (args_count < 64) {
  ------------------
  |  Branch (1740:13): [True: 2.31M, False: 0]
  ------------------
 1741|  2.31M|            return;
 1742|  2.31M|        }
 1743|       |
 1744|      0|        auto last_args_count = args_count - 64;
 1745|      0|        for (auto it = visited_args_upper.begin();
 1746|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1746:14): [True: 0, False: 0]
  ------------------
 1747|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1747:17): [True: 0, False: 0]
  ------------------
 1748|      0|                return on_error("Argument list not exhausted");
 1749|      0|            }
 1750|      0|            last_args_count -= 8;
 1751|      0|        }
 1752|       |
 1753|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1754|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1754:13): [True: 0, False: 0]
  ------------------
 1755|      0|            return on_error("Argument list not exhausted");
 1756|      0|        }
 1757|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1776|  2.31M|    {
 1777|  2.31M|        return error;
 1778|  2.31M|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1772|  6.95M|    {
 1773|  6.95M|        return static_cast<bool>(error);
 1774|  6.95M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
 1899|   813k|        : format_handler_base{argcount},
 1900|   813k|          parse_ctx{format},
 1901|   813k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   813k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   813k|    static_cast<    \
  |  |  929|   813k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   813k|    static_cast<    \
  |  |  929|   813k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|   813k|    {
 1903|   813k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
 1828|   813k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  928|   813k|    static_cast<    \
  |  |  929|   813k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1829|   813k|    {
 1830|   813k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   813k|{
 2038|   813k|    const auto beg = handler.get_ctx().begin();
 2039|   813k|    detail::parse_format_string<false>(format, handler);
 2040|   813k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   813k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 66.8k, False: 746k]
  |  |  ------------------
  ------------------
 2041|  66.8k|        return unexpected(handler.error);
 2042|  66.8k|    }
 2043|   746k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   813k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 2021|  5.56M|    {
 2022|  5.56M|        return ctx.get();
 2023|  5.56M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1833|  5.56M|    {
 1834|  5.56M|        return ctx;
 1835|  5.56M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1906|  1.56M|    {
 1907|  1.56M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 1.56M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|  1.56M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
 1680|   813k|{
 1681|   813k|    auto arg = ctx.arg(id);
 1682|   813k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   813k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 813k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   813k|    return arg;
 1686|   813k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1943|   813k|    {
 1944|   813k|        return parse_ctx.next_arg_id();
 1945|   813k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1984|   813k|    {
 1985|   813k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   813k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   813k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 813k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   813k|        auto specs = detail::format_specs{};
 1998|   813k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   813k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   813k|            arg.type()};
 2001|       |
 2002|   813k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   813k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 813k]
  |  Branch (2003:29): [True: 0, False: 813k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   813k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   813k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 813k]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|   813k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   813k|        on_visit_scan_arg(
 2014|   813k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   813k|                                           get_ctx().locale()},
 2016|   813k|            arg);
 2017|   813k|        return parse_ctx.begin();
 2018|   813k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
 1699|   813k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|   813k|    {
 1701|   813k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1955|   813k|    {
 1956|   813k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 813k]
  |  Branch (1956:23): [True: 0, False: 813k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   813k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   813k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   813k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   813k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 66.8k, False: 746k]
  |  |  ------------------
  ------------------
 1963|  66.8k|            on_error(r.error());
 1964|  66.8k|        }
 1965|   746k|        else {
 1966|   746k|            get_ctx().advance_to(*r);
 1967|   746k|        }
 1968|   813k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|   890k|{
 2053|   890k|    const auto argcount = args.size();
 2054|   890k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 194k, False: 695k]
  |  Branch (2054:60): [True: 194k, False: 0]
  ------------------
 2055|   194k|        auto arg = args.get(0);
 2056|   194k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   194k|    static_cast<    \
  |  |  929|   194k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|   194k|    }
 2058|       |
 2059|   695k|    auto handler = format_handler<true, CharT>{
 2060|   695k|        ranges::subrange<const CharT*>{source.data(),
 2061|   695k|                                       source.data() + source.size()},
 2062|   695k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   695k|    static_cast<    \
  |  |  929|   695k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   695k|    static_cast<    \
  |  |  929|   695k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   695k|    return vscan_parse_format_string(format, handler);
 2064|   890k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|   292k|{
 1638|   292k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   292k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 292k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|   292k|    auto reader =
 1644|   292k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|   292k|            ranges::subrange<const CharT*>{source.data(),
 1646|   292k|                                           source.data() + source.size()},
 1647|   292k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|   292k|    static_cast<    \
  |  |  929|   292k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|   292k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|   292k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   292k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   292k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   292k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20.0k, False: 272k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  20.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  20.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  20.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  20.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  20.0k|    }                                                  \
  |  |  |  | 3667|   292k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   272k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|   272k|    return ranges::distance(source.data(), it);
 1650|   292k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|   502k|{
 2053|   502k|    const auto argcount = args.size();
 2054|   502k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 97.3k, False: 405k]
  |  Branch (2054:60): [True: 97.3k, False: 0]
  ------------------
 2055|  97.3k|        auto arg = args.get(0);
 2056|  97.3k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  97.3k|    static_cast<    \
  |  |  929|  97.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|  97.3k|    }
 2058|       |
 2059|   405k|    auto handler = format_handler<true, CharT>{
 2060|   405k|        ranges::subrange<const CharT*>{source.data(),
 2061|   405k|                                       source.data() + source.size()},
 2062|   405k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   405k|    static_cast<    \
  |  |  929|   405k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   405k|    static_cast<    \
  |  |  929|   405k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   405k|    return vscan_parse_format_string(format, handler);
 2064|   502k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|  1.00M|{
 1625|  1.00M|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 809k, False: 194k]
  ------------------
 1626|   809k|        return false;
 1627|   809k|    }
 1628|   194k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 194k, False: 0]
  |  Branch (1628:39): [True: 194k, False: 0]
  ------------------
 1629|  1.00M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|   146k|{
 1638|   146k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   146k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 146k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|   146k|    auto reader =
 1644|   146k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|   146k|            ranges::subrange<const CharT*>{source.data(),
 1646|   146k|                                           source.data() + source.size()},
 1647|   146k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|   146k|    static_cast<    \
  |  |  929|   146k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|   146k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|   146k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   146k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   146k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   146k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 40.0k, False: 105k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  40.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  40.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  40.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  40.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  40.0k|    }                                                  \
  |  |  |  | 3667|   146k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   105k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|   105k|    return ranges::distance(source.data(), it);
 1650|   146k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1899|   405k|        : format_handler_base{argcount},
 1900|   405k|          parse_ctx{format},
 1901|   405k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   405k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   405k|    static_cast<    \
  |  |  929|   405k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   405k|    static_cast<    \
  |  |  929|   405k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|   405k|    {
 1903|   405k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1851|   405k|        : contiguous_ctx(source, args, loc)
 1852|   405k|    {
 1853|   405k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   405k|{
 2038|   405k|    const auto beg = handler.get_ctx().begin();
 2039|   405k|    detail::parse_format_string<false>(format, handler);
 2040|   405k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   405k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 133k, False: 271k]
  |  |  ------------------
  ------------------
 2041|   133k|        return unexpected(handler.error);
 2042|   133k|    }
 2043|   271k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   405k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2021|  2.56M|    {
 2022|  2.56M|        return ctx.get();
 2023|  2.56M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1856|  2.56M|    {
 1857|  2.56M|        return contiguous_ctx;
 1858|  2.56M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1906|   676k|    {
 1907|   676k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 676k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|   676k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   405k|{
 1681|   405k|    auto arg = ctx.arg(id);
 1682|   405k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   405k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 405k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   405k|    return arg;
 1686|   405k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1943|   405k|    {
 1944|   405k|        return parse_ctx.next_arg_id();
 1945|   405k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1984|   405k|    {
 1985|   405k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   405k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   405k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 405k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   405k|        auto specs = detail::format_specs{};
 1998|   405k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   405k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   405k|            arg.type()};
 2001|       |
 2002|   405k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   405k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 405k]
  |  Branch (2003:29): [True: 0, False: 405k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   405k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   405k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 405k]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|   405k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   405k|        on_visit_scan_arg(
 2014|   405k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   405k|                                           get_ctx().locale()},
 2016|   405k|            arg);
 2017|   405k|        return parse_ctx.begin();
 2018|   405k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1699|   405k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|   405k|    {
 1701|   405k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1955|   405k|    {
 1956|   405k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 405k]
  |  Branch (1956:23): [True: 0, False: 405k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   405k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   405k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   405k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   405k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 133k, False: 271k]
  |  |  ------------------
  ------------------
 1963|   133k|            on_error(r.error());
 1964|   133k|        }
 1965|   271k|        else {
 1966|   271k|            get_ctx().advance_to(*r);
 1967|   271k|        }
 1968|   405k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2072|   502k|{
 2073|   502k|    const auto argcount = args.size();
 2074|   502k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2074:9): [True: 97.2k, False: 404k]
  |  Branch (2074:60): [True: 97.2k, False: 0]
  ------------------
 2075|  97.2k|        auto arg = args.get(0);
 2076|  97.2k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  97.2k|    static_cast<    \
  |  |  929|  97.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2077|  97.2k|    }
 2078|       |
 2079|   404k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2079:9): [True: 0, False: 404k]
  ------------------
 2080|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2081|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|        return vscan_parse_format_string(format, handler);
 2084|      0|    }
 2085|       |
 2086|   404k|    SCN_UNLIKELY_ATTR
 2087|   404k|    {
 2088|   404k|        auto handler = format_handler<false, CharT>{
 2089|   404k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   404k|    static_cast<    \
  |  |  929|   404k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   404k|    static_cast<    \
  |  |  929|   404k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2090|   404k|        return vscan_parse_format_string(format, handler);
 2091|   404k|    }
 2092|   404k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|   145k|{
 1658|   145k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   145k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 145k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|   145k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|   145k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 145k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|   145k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|   145k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|   145k|    static_cast<    \
  |  |  929|   145k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|   145k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|   145k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   145k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   145k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   145k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 40.0k, False: 105k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  40.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  40.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  40.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  40.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  40.0k|    }                                                  \
  |  |  |  | 3667|   145k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   105k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|   105k|    return it.position();
 1675|   145k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
 1899|   404k|        : format_handler_base{argcount},
 1900|   404k|          parse_ctx{format},
 1901|   404k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   404k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   404k|    static_cast<    \
  |  |  929|   404k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   404k|    static_cast<    \
  |  |  929|   404k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|   404k|    {
 1903|   404k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
 1828|   404k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  928|   404k|    static_cast<    \
  |  |  929|   404k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1829|   404k|    {
 1830|   404k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   404k|{
 2038|   404k|    const auto beg = handler.get_ctx().begin();
 2039|   404k|    detail::parse_format_string<false>(format, handler);
 2040|   404k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   404k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 133k, False: 271k]
  |  |  ------------------
  ------------------
 2041|   133k|        return unexpected(handler.error);
 2042|   133k|    }
 2043|   271k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   404k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 2021|  2.56M|    {
 2022|  2.56M|        return ctx.get();
 2023|  2.56M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1833|  2.56M|    {
 1834|  2.56M|        return ctx;
 1835|  2.56M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1906|   676k|    {
 1907|   676k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 676k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|   676k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
 1680|   404k|{
 1681|   404k|    auto arg = ctx.arg(id);
 1682|   404k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   404k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 404k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   404k|    return arg;
 1686|   404k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1943|   404k|    {
 1944|   404k|        return parse_ctx.next_arg_id();
 1945|   404k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1984|   404k|    {
 1985|   404k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   404k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   404k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 404k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   404k|        auto specs = detail::format_specs{};
 1998|   404k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   404k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   404k|            arg.type()};
 2001|       |
 2002|   404k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   404k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 404k]
  |  Branch (2003:29): [True: 0, False: 404k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   404k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   404k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 404k]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|   404k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   404k|        on_visit_scan_arg(
 2014|   404k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   404k|                                           get_ctx().locale()},
 2016|   404k|            arg);
 2017|   404k|        return parse_ctx.begin();
 2018|   404k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
 1699|   404k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|   404k|    {
 1701|   404k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1955|   404k|    {
 1956|   404k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 404k]
  |  Branch (1956:23): [True: 0, False: 404k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   404k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   404k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   404k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   404k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 133k, False: 271k]
  |  |  ------------------
  ------------------
 1963|   133k|            on_error(r.error());
 1964|   133k|        }
 1965|   271k|        else {
 1966|   271k|            get_ctx().advance_to(*r);
 1967|   271k|        }
 1968|   404k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  97.4k|{
 2099|  97.4k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  97.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  97.4k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|   105k|{
 2099|   105k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   105k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|   105k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  48.6k|{
 2099|  48.6k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  48.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  48.6k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  48.6k|{
 2099|  48.6k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  48.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  48.6k|}

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1350|  2.22k|{
 1351|  2.22k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1352|       |
 1353|  2.22k|    if constexpr (sizeof(SourceCharT) == 1) {
 1354|       |        if constexpr (sizeof(DestCharT) == 2) {
 1355|       |            std::u32string tmp;
 1356|       |            transcode_to_string_impl_to32(src, tmp);
 1357|       |            return transcode_to_string_impl_32to16<false>(
 1358|       |                std::u32string_view{tmp}, dest);
 1359|       |        }
 1360|  2.22k|        else if constexpr (sizeof(DestCharT) == 4) {
 1361|  2.22k|            return transcode_to_string_impl_to32(src, dest);
 1362|  2.22k|        }
 1363|       |    }
 1364|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1365|       |        if constexpr (sizeof(DestCharT) == 1) {
 1366|       |            std::u32string tmp;
 1367|       |            transcode_to_string_impl_to32(src, tmp);
 1368|       |            return transcode_to_string_impl_32to8<false>(
 1369|       |                std::u32string_view{tmp}, dest);
 1370|       |        }
 1371|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1372|       |            return trasncode_to_string_impl_to32(src, dest);
 1373|       |        }
 1374|       |    }
 1375|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1376|       |        if constexpr (sizeof(DestCharT) == 1) {
 1377|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1378|       |        }
 1379|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1380|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1381|       |        }
 1382|       |    }
 1383|       |
 1384|  2.22k|    SCN_EXPECT(false);
  ------------------
  |  |  924|  2.22k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.22k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1385|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1386|  2.22k|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1243|  2.22k|{
 1244|  2.22k|    static_assert(sizeof(DestCharT) == 4);
 1245|       |
 1246|  2.22k|    auto it = src.begin();
 1247|   603k|    while (it != src.end()) {
  ------------------
  |  Branch (1247:12): [True: 601k, False: 2.22k]
  ------------------
 1248|   601k|        auto res = get_next_code_point(
 1249|   601k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1250|   601k|                                                                 src.end()));
 1251|   601k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|   601k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.97k, False: 599k]
  |  |  ------------------
  ------------------
 1252|  1.97k|            dest.push_back(DestCharT{0xfffd});
 1253|  1.97k|        }
 1254|   599k|        else {
 1255|   599k|            dest.push_back(res.value);
 1256|   599k|        }
 1257|   601k|        it = detail::make_string_view_iterator(src, res.iterator);
 1258|   601k|    }
 1259|  2.22k|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|   890k|{
 1169|   890k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   890k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   890k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|   890k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|   890k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   890k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24.6k, False: 865k]
  |  |  ------------------
  ------------------
 1173|  24.6k|        return {get_start_for_next_code_point(input),
 1174|  24.6k|                detail::invalid_code_point};
 1175|  24.6k|    }
 1176|   865k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|   865k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.66k, False: 862k]
  |  |  ------------------
  ------------------
 1177|  3.66k|        return {input.end(), detail::invalid_code_point};
 1178|  3.66k|    }
 1179|       |
 1180|   862k|    return {input.begin() + len,
 1181|   862k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|   865k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  24.6k|{
 1155|  24.6k|    auto it = input.begin();
 1156|   153k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 146k, False: 6.92k]
  ------------------
 1157|   146k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 17.7k, False: 128k]
  ------------------
 1158|  17.7k|            break;
 1159|  17.7k|        }
 1160|   146k|    }
 1161|  24.6k|    return it;
 1162|  24.6k|}
_ZN3scn2v34impl11parse_errorC2ENS2_4codeE:
  807|  25.3M|    constexpr parse_error(code c) : m_code(c)
  808|  25.3M|    {
  809|  25.3M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  25.3M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  25.3M|    }
_ZN3scn2v34impleqENS1_11parse_errorES2_:
  822|  9.53M|    {
  823|  9.53M|        return a.m_code == b.m_code;
  824|  9.53M|    }
_ZN3scn2v34impl16clocale_restorerC2Ei:
 1714|  1.31M|    clocale_restorer(int cat) : m_category(cat)
 1715|  1.31M|    {
 1716|  1.31M|        const auto loc = std::setlocale(cat, nullptr);
 1717|  1.31M|        std::strcpy(m_locbuf, loc);
 1718|  1.31M|    }
_ZN3scn2v34impl16clocale_restorerD2Ev:
 1720|  1.31M|    {
 1721|       |        // Restore locale to what it was before
 1722|  1.31M|        std::setlocale(m_category, m_locbuf);
 1723|  1.31M|    }
_ZN3scn2v34impl25set_clocale_classic_guardC2Ei:
 1743|  1.31M|    set_clocale_classic_guard(int cat) : m_restorer(cat)
 1744|  1.31M|    {
 1745|  1.31M|        std::setlocale(cat, "C");
 1746|  1.31M|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2924|  2.31M|    {
 2925|  2.31M|        return m_msg == nullptr;
 2926|  2.31M|    }
_ZN3scn2v34impl17float_reader_baseC2Ej:
 3633|  2.28M|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|  15.8M|{
  458|  15.8M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  15.8M|        static_cast<unsigned char>(ch))];
  460|  15.8M|}
_ZN3scn2v34impl13is_ascii_charEc:
  468|  73.1k|{
  469|  73.1k|    return static_cast<unsigned char>(ch) <= 127;
  470|  73.1k|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|  3.64M|{
  539|  3.64M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  3.64M|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|  10.7M|{
  784|  10.7M|    return e != eof_error::good;
  785|  10.7M|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  42.2k|{
  798|  42.2k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|  42.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  42.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  42.2k|    return scan_error{scan_error::end_of_range, "EOF"};
  800|  42.2k|}
_ZN3scn2v34impl20make_eof_parse_errorENS1_9eof_errorE:
  844|   206k|{
  845|   206k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|   206k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   206k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|   206k|    return parse_error::eof;
  847|   206k|}
_ZN3scn2v34impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|  3.37M|{
  854|  3.37M|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 3.37M]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|  3.37M|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 76.3k, False: 3.29M]
  ------------------
  859|  76.3k|        return scan_error{scan_error::end_of_range, "EOF"};
  860|  76.3k|    }
  861|       |
  862|  3.29M|    return scan_error{code, msg};
  863|  3.37M|}
_ZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  3.37M|{
  868|  3.37M|    return [code, msg](parse_error err) {
  869|  3.37M|        return make_scan_error_from_parse_error(err, code, msg);
  870|  3.37M|    };
  871|  3.37M|}
_ZN3scn2v34impl17fast_streq_nocaseEPKcS3_m:
 2208|  2.55M|{
 2209|  2.55M|    unsigned char running_diff{0};
 2210|  9.59M|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2210:24): [True: 7.04M, False: 2.55M]
  ------------------
 2211|  7.04M|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2212|  7.04M|    }
 2213|  2.55M|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2213:12): [True: 81.9k, False: 2.47M]
  |  Branch (2213:33): [True: 16.0k, False: 2.45M]
  ------------------
 2214|  2.55M|}
_ZN3scn2v34impl11char_to_intEc:
 3111|  18.2M|{
 3112|  18.2M|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3113|  18.2M|}
_ZN3scn2v34impl11char_to_intEw:
 3115|  2.92M|{
 3116|  2.92M|#if WCHAR_MIN < 0
 3117|  2.92M|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3117:9): [True: 2.90M, False: 13.1k]
  |  Branch (3117:20): [True: 1.81M, False: 1.09M]
  ------------------
 3118|       |#else
 3119|       |    if (ch <= 255) {
 3120|       |#endif
 3121|  1.81M|        return char_to_int(static_cast<char>(ch));
 3122|  1.81M|    }
 3123|  1.11M|    return 255;
 3124|  2.92M|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 5996|  1.91M|{
 5997|  1.91M|    if (specs.width != 0) {
  ------------------
  |  Branch (5997:9): [True: 0, False: 1.91M]
  ------------------
 5998|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (5998:13): [True: 0, False: 0]
  ------------------
 5999|      0|            return {scan_error::invalid_scanned_value,
 6000|      0|                    "Scanned value too narrow, width did not exceed what "
 6001|      0|                    "was specified in the format string"};
 6002|      0|        }
 6003|      0|    }
 6004|  1.91M|    if (specs.precision != 0) {
  ------------------
  |  Branch (6004:9): [True: 0, False: 1.91M]
  ------------------
 6005|      0|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6005:13): [True: 0, False: 0]
  ------------------
 6006|      0|            return {scan_error::invalid_scanned_value,
 6007|      0|                    "Scanned value too wide, width exceeded the specified "
 6008|      0|                    "precision"};
 6009|      0|        }
 6010|      0|    }
 6011|  1.91M|    return {};
 6012|  1.91M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  2.86M|    {
  304|  2.86M|        ranges::advance(x, n);
  305|  2.86M|        return x;
  306|  2.86M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  2.86M|    {
  268|  2.86M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  2.86M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  2.86M|    {
  151|  2.86M|        i += n;
  152|  2.86M|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  3.38M|    {
  108|  3.38M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  3.38M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  3.38M|    {
   87|  3.38M|        return s - i;
   88|  3.38M|    }
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  1.76M|    {
  304|  1.76M|        ranges::advance(x, n);
  305|  1.76M|        return x;
  306|  1.76M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  1.76M|    {
  268|  1.76M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.76M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  1.76M|    {
  151|  1.76M|        i += n;
  152|  1.76M|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   503k|    {
  108|   503k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   503k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   503k|    {
   87|   503k|        return s - i;
   88|   503k|    }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|  1.13M|{
  981|       |    if constexpr (ranges::contiguous_range<Range> &&
  982|       |                  ranges::sized_range<Range>) {
  983|       |        return true;
  984|       |    }
  985|       |    else if constexpr (std::is_same_v<
  986|       |                           ranges::const_iterator_t<Range>,
  987|       |                           typename detail::basic_scan_buffer<
  988|  1.13M|                               detail::char_t<Range>>::forward_iterator>) {
  989|  1.13M|        auto beg = r.begin();
  990|  1.13M|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 1.13M, False: 0]
  ------------------
  991|  1.13M|            return false;
  992|  1.13M|        }
  993|       |        if constexpr (ranges::common_range<Range>) {
  994|       |            return beg.contiguous_segment().end() ==
  995|       |                   ranges::end(r).contiguous_segment().end();
  996|       |        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|       |    }
 1005|       |    else {
 1006|       |        return false;
 1007|       |    }
 1008|  1.13M|}
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  28.5M|    {
  763|  28.5M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  28.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  28.5M|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1844|  2.96M|{
 1845|  2.96M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  2.96M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.96M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1846|       |
 1847|       |    if constexpr (ranges::sized_range<Range>) {
 1848|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1849|       |        if (sz < count) {
 1850|       |            return unexpected(eof_error::eof);
 1851|       |        }
 1852|       |
 1853|       |        return ranges::next(range.begin(), count);
 1854|       |    }
 1855|  2.96M|    else {
 1856|  2.96M|        auto it = range.begin();
 1857|  2.96M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1857:13): [True: 1.82M, False: 1.14M]
  ------------------
 1858|  1.82M|            return ranges::next(it, count);
 1859|  1.82M|        }
 1860|       |
 1861|  4.52M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1861:36): [True: 3.41M, False: 1.10M]
  ------------------
 1862|  3.41M|            if (it == range.end()) {
  ------------------
  |  Branch (1862:17): [True: 35.5k, False: 3.38M]
  ------------------
 1863|  35.5k|                return unexpected(eof_error::eof);
 1864|  35.5k|            }
 1865|  3.41M|        }
 1866|       |
 1867|  1.10M|        return it;
 1868|  1.14M|    }
 1869|  2.96M|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1094|  2.96M|{
 1095|       |    if constexpr (ranges::sized_range<Range>) {
 1096|       |        return r.size();
 1097|       |    }
 1098|       |    else if constexpr (std::is_same_v<
 1099|       |                           ranges::const_iterator_t<Range>,
 1100|       |                           typename detail::basic_scan_buffer<
 1101|  2.96M|                               detail::char_t<Range>>::forward_iterator>) {
 1102|       |        if constexpr (ranges::common_range<Range>) {
 1103|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|       |        }
 1105|  2.96M|        else {
 1106|  2.96M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1106:17): [True: 2.96M, False: 0]
  ------------------
 1107|  2.96M|                return static_cast<size_t>(
 1108|  2.96M|                    r.begin().parent()->chars_available() -
 1109|  2.96M|                    r.begin().position());
 1110|  2.96M|            }
 1111|      0|            return r.begin().contiguous_segment().size();
 1112|  2.96M|        }
 1113|       |    }
 1114|       |    else {
 1115|       |        return 0;
 1116|       |    }
 1117|  2.96M|}
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  2.71M|        : m_fptr([](storage fn,
  743|  2.71M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.71M|              cvref<T> obj = *get<T>(fn);
  745|  2.71M|              if constexpr (std::is_void_v<R>) {
  746|  2.71M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.71M|              }
  748|  2.71M|              else {
  749|  2.71M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.71M|              }
  751|  2.71M|          }),
  752|  2.71M|          m_storage(std::addressof(f))
  753|  2.71M|    {
  754|  2.71M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEcE_clESK_c:
  743|  14.2M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  14.2M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  14.2M|              else {
  749|  14.2M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  14.2M|              }
  751|  14.2M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  14.2M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  14.2M|        else if constexpr (std::is_object_v<T>) {
  688|  14.2M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  14.2M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  2.71M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.71M|        {
  662|  2.71M|        }
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|  8.10M|    {
  763|  8.10M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  8.10M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  8.10M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  2.09M|        : m_fptr([](storage fn,
  743|  2.09M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.09M|              cvref<T> obj = *get<T>(fn);
  745|  2.09M|              if constexpr (std::is_void_v<R>) {
  746|  2.09M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.09M|              }
  748|  2.09M|              else {
  749|  2.09M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.09M|              }
  751|  2.09M|          }),
  752|  2.09M|          m_storage(std::addressof(f))
  753|  2.09M|    {
  754|  2.09M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|  3.70M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.70M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  3.70M|              else {
  749|  3.70M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.70M|              }
  751|  3.70M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  3.70M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  3.70M|        else if constexpr (std::is_object_v<T>) {
  688|  3.70M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  3.70M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  2.09M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.09M|        {
  662|  2.09M|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6025|   813k|    {
 6026|   813k|        const bool need_skipped_width =
 6027|   813k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 0, False: 813k]
  |  Branch (6027:33): [True: 0, False: 813k]
  ------------------
 6028|   813k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|   813k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 0, False: 813k]
  ------------------
 6032|   813k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 0, False: 813k]
  ------------------
 6033|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6034|      0|                             need_skipped_width);
 6035|      0|        }
 6036|   813k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 813k, False: 0]
  |  Branch (6036:56): [True: 813k, False: 0]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|   813k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 0, False: 813k]
  ------------------
 6040|      0|                auto max_width_view = take_width(rng, specs.precision);
 6041|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|      0|                                  .transform_error(make_eof_scan_error));
 6043|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|      0|            }
 6045|  1.61M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|   813k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   813k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   813k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   813k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14.4k, False: 799k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  14.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  14.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  14.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  14.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  14.4k|    }                                                  \
  |  |  |  | 3667|   813k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   799k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|  1.61M|                            make_eof_scan_error));
 6047|       |
 6048|  1.61M|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 0, False: 799k]
  ------------------
 6049|      0|                return result_type{
 6050|      0|                    it,
 6051|      0|                    calculate_text_width(make_contiguous_buffer(
 6052|      0|                                             ranges::subrange{rng.begin(), it})
 6053|      0|                                             .view())};
 6054|      0|            }
 6055|   799k|            return result_type{it, 0};
 6056|  1.61M|        }
 6057|       |
 6058|      0|        return result_type{rng.begin(), 0};
 6059|   813k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1963|  2.17M|{
 1964|  2.17M|    return read_until_code_unit(range, std::not_fn(pred));
 1965|  2.17M|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1944|  2.17M|{
 1945|       |    if constexpr (ranges::common_range<Range>) {
 1946|       |        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|  2.17M|    else {
 1949|  2.17M|        auto first = range.begin();
 1950|  11.5M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1950:16): [True: 11.4M, False: 26.3k]
  ------------------
 1951|  11.4M|            if (pred(*first)) {
  ------------------
  |  Branch (1951:17): [True: 2.14M, False: 9.34M]
  ------------------
 1952|  2.14M|                return first;
 1953|  2.14M|            }
 1954|  11.4M|        }
 1955|  26.3k|        return first;
 1956|  2.17M|    }
 1957|  2.17M|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  1.91M|    {
  108|  1.91M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  1.91M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  1.91M|    {
   94|  1.91M|        iter_difference_t<I> counter{0};
   95|  18.5M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 16.6M, False: 1.91M]
  ------------------
   96|  16.6M|            ++i;
   97|  16.6M|            ++counter;
   98|  16.6M|        }
   99|  1.91M|        return counter;
  100|  1.91M|    }
_ZZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|  3.37M|    return [code, msg](parse_error err) {
  869|  3.37M|        return make_scan_error_from_parse_error(err, code, msg);
  870|  3.37M|    };
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1767|   420k|    {
 1768|   420k|        auto stdloc = loc.get<std::locale>();
 1769|   420k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1770|   420k|        grouping = numpunct.grouping();
 1771|   420k|        thousands_sep =
 1772|   420k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1772:13): [True: 0, False: 420k]
  ------------------
 1773|   420k|        decimal_point = numpunct.decimal_point();
 1774|   420k|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1704|   420k|{
 1705|   420k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1705:9): [True: 420k, False: 0]
  ------------------
 1706|   420k|        return std::use_facet<Facet>(stdloc);
 1707|   420k|    }
 1708|      0|    stdloc = std::locale(stdloc, new Facet{});
 1709|      0|    return std::use_facet<Facet>(stdloc);
 1710|   420k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1833|  3.18M|{
 1834|  3.18M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.1k, False: 3.16M]
  |  |  ------------------
  ------------------
 1835|  19.1k|        return unexpected(e);
 1836|  19.1k|    }
 1837|       |
 1838|  3.16M|    return ranges::next(range.begin());
 1839|  3.18M|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  4.62M|{
  950|  4.62M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  4.62M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38.1k, False: 4.58M]
  |  |  ------------------
  ------------------
  951|  38.1k|        return eof_error::eof;
  952|  38.1k|    }
  953|  4.58M|    return eof_error::good;
  954|  4.62M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  6.46M|{
  944|  6.46M|    return is_range_eof(r.begin(), r.end());
  945|  6.46M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  6.46M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  6.46M|    {
  937|  6.46M|        return begin == end;
  938|  6.46M|    }
  939|  6.46M|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|  3.16M|    {
  296|  3.16M|        ++x;
  297|  3.16M|        return x;
  298|  3.16M|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3129|  1.22M|{
 3130|  1.22M|    auto r = read_one_of_code_unit(range, "+-");
 3131|  1.22M|    if (!r) {
  ------------------
  |  Branch (3131:9): [True: 927k, False: 296k]
  ------------------
 3132|   927k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3132:13): [True: 927k, False: 288]
  ------------------
 3133|   927k|            return std::pair{range.begin(), sign_type::default_sign};
 3134|   927k|        }
 3135|    288|        return unexpected(eof_error::eof);
 3136|   927k|    }
 3137|       |
 3138|   296k|    auto& it = *r;
 3139|   296k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3139:9): [True: 124k, False: 171k]
  ------------------
 3140|   124k|        return std::pair{it, sign_type::minus_sign};
 3141|   124k|    }
 3142|   171k|    return std::pair{it, sign_type::plus_sign};
 3143|   296k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2260|  2.12M|{
 2261|  2.12M|    auto it = read_code_unit(range);
 2262|  2.12M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.1k, False: 2.11M]
  |  |  ------------------
  ------------------
 2263|  11.1k|        return unexpected(make_eof_parse_error(it.error()));
 2264|  11.1k|    }
 2265|       |
 2266|  3.99M|    for (auto ch : str) {
  ------------------
  |  Branch (2266:18): [True: 3.99M, False: 1.70M]
  ------------------
 2267|  3.99M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2267:13): [True: 409k, False: 3.58M]
  ------------------
 2268|   409k|            return *it;
 2269|   409k|        }
 2270|  3.99M|    }
 2271|       |
 2272|  1.70M|    return unexpected(parse_error::error);
 2273|  2.11M|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2219|  2.96M|{
 2220|  2.96M|    using char_type = detail::char_t<Range>;
 2221|       |
 2222|       |    if constexpr (ranges::contiguous_range<Range> &&
 2223|       |                  std::is_same_v<char_type, char>) {
 2224|       |        if (range.size() < str.size()) {
 2225|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2226|       |        }
 2227|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2228|       |            return unexpected(parse_error::error);
 2229|       |        }
 2230|       |        return ranges::next(range.begin(), str.size());
 2231|       |    }
 2232|  2.96M|    else {
 2233|  2.96M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|  2.96M|            if (ch < 'A' || ch > 'Z') {
 2235|  2.96M|                return ch;
 2236|  2.96M|            }
 2237|  2.96M|            return static_cast<char_type>(ch +
 2238|  2.96M|                                          static_cast<char_type>('a' - 'A'));
 2239|  2.96M|        };
 2240|       |
 2241|  2.96M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|  2.96M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.96M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.96M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.96M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 35.5k, False: 2.93M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  35.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  35.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  35.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  35.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  35.5k|    }                                                  \
  |  |  |  | 3667|  2.96M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.93M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2242|  2.93M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2243|  2.93M|                        .transform_error(make_eof_parse_error));
 2244|       |
 2245|  2.93M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  2.93M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.83M, False: 100k]
  |  |  ------------------
  ------------------
 2246|  2.93M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2247|  2.93M|                    return ascii_tolower(a) ==
 2248|  2.93M|                           static_cast<detail::char_t<Range>>(b);
 2249|  2.93M|                }))) {
 2250|  2.83M|            return unexpected(parse_error::error);
 2251|  2.83M|        }
 2252|       |
 2253|   100k|        return it;
 2254|  2.93M|    }
 2255|  2.96M|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlcE_clEc:
 2233|  3.37M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|  3.37M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2234:17): [True: 3.04M, False: 332k]
  |  Branch (2234:29): [True: 276k, False: 55.7k]
  ------------------
 2235|  3.32M|                return ch;
 2236|  3.32M|            }
 2237|  55.7k|            return static_cast<char_type>(ch +
 2238|  55.7k|                                          static_cast<char_type>('a' - 'A'));
 2239|  3.37M|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2134|  1.05M|{
 2135|  1.05M|    auto it = read_code_unit(range);
 2136|  1.05M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.05M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.99k, False: 1.04M]
  |  |  ------------------
  ------------------
 2137|  7.99k|        return unexpected(make_eof_parse_error(it.error()));
 2138|  7.99k|    }
 2139|       |
 2140|  1.04M|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 856k, False: 188k]
  |  |  ------------------
  ------------------
 2141|  1.04M|                     static_cast<detail::char_t<Range>>(ch))) {
 2142|   856k|        return unexpected(parse_error::error);
 2143|   856k|    }
 2144|       |
 2145|   188k|    return *it;
 2146|  1.04M|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1983|  2.16M|{
 1984|  2.16M|    auto it = read_while_code_unit(range, pred);
 1985|  2.16M|    if (it == range.begin()) {
  ------------------
  |  Branch (1985:9): [True: 885k, False: 1.28M]
  ------------------
 1986|   885k|        return unexpected(parse_error::error);
 1987|   885k|    }
 1988|  1.28M|    return it;
 1989|  2.16M|}
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1608|   994k|    {
 1609|   994k|        using value_t = ranges::range_value_t<Range>;
 1610|       |
 1611|       |        if constexpr (ranges::borrowed_range<Range> &&
 1612|       |                      ranges::contiguous_range<Range> &&
 1613|       |                      ranges::sized_range<Range>) {
 1614|       |            m_storage.reset();
 1615|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1616|       |        }
 1617|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1618|       |                                          std::basic_string<CharT>>) {
 1619|       |            m_storage.emplace(SCN_FWD(range));
 1620|       |            m_view = string_view_type{*m_storage};
 1621|       |        }
 1622|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1623|       |                                          typename detail::basic_scan_buffer<
 1624|       |                                              value_t>::forward_iterator> &&
 1625|   994k|                           ranges::common_range<Range>) {
 1626|   994k|            auto beg_seg = range.begin().contiguous_segment();
 1627|   994k|            auto end_seg = range.end().contiguous_segment();
 1628|   994k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|   994k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 145k, False: 848k]
  |  |  ------------------
  ------------------
 1629|   994k|                             detail::to_address(end_seg.end()))) {
 1630|   145k|                auto& str = m_storage.emplace();
 1631|   145k|                str.reserve(range.end().position() - range.begin().position());
 1632|   145k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1633|   145k|                m_view = string_view_type{str};
 1634|   145k|                return;
 1635|   145k|            }
 1636|       |
 1637|   848k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1638|   848k|                                                            end_seg.data());
 1639|   848k|            m_storage.reset();
 1640|       |        }
 1641|       |        else {
 1642|       |            auto& str = m_storage.emplace();
 1643|       |            if constexpr (ranges::sized_range<Range>) {
 1644|       |                str.reserve(range.size());
 1645|       |            }
 1646|       |            if constexpr (ranges::common_range<Range>) {
 1647|       |                std::copy(ranges::begin(range), ranges::end(range),
 1648|       |                          std::back_inserter(str));
 1649|       |            }
 1650|       |            else {
 1651|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1652|       |                     ++it) {
 1653|       |                    str.push_back(*it);
 1654|       |                }
 1655|       |            }
 1656|       |            m_view = string_view_type{str};
 1657|       |        }
 1658|   994k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1569|  6.81M|    {
 1570|  6.81M|        return m_view;
 1571|  6.81M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1559|  4.16M|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6067|   735k|    {
 6068|   735k|        const bool need_skipped_width =
 6069|   735k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6069:13): [True: 0, False: 735k]
  |  Branch (6069:33): [True: 0, False: 735k]
  ------------------
 6070|   735k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6071|       |
 6072|   735k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6072:13): [True: 0, False: 735k]
  ------------------
 6073|   735k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6073:13): [True: 0, False: 735k]
  ------------------
 6074|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6074:17): [True: 0, False: 0]
  ------------------
 6075|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6075:17): [True: 0, False: 0]
  ------------------
 6076|      0|                return result_type{rng.begin(), 0};
 6077|      0|            }
 6078|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6079|      0|                             specs.fill, need_skipped_width);
 6080|      0|        }
 6081|   735k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6081:13): [True: 735k, False: 0]
  ------------------
 6082|   735k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6082:13): [True: 0, False: 735k]
  ------------------
 6083|   735k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6083:15): [True: 0, False: 0]
  |  Branch (6083:35): [True: 0, False: 0]
  ------------------
 6084|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6084:15): [True: 0, False: 0]
  ------------------
 6085|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6085:15): [True: 0, False: 0]
  ------------------
 6086|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                const auto initial_width =
 6088|      0|                    specs.precision - prefix_width - value_width;
 6089|      0|                auto max_width_view = take_width(rng, initial_width);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6093|      0|            }
 6094|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|      0|                            make_eof_scan_error));
 6096|       |
 6097|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|      0|            return result_type{it, 0};
 6105|      0|        }
 6106|   735k|        return result_type{rng.begin(), 0};
 6107|   735k|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1833|  1.45M|{
 1834|  1.45M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.45M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.77k, False: 1.45M]
  |  |  ------------------
  ------------------
 1835|  4.77k|        return unexpected(e);
 1836|  4.77k|    }
 1837|       |
 1838|  1.45M|    return ranges::next(range.begin());
 1839|  1.45M|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|  2.73M|{
  950|  2.73M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  2.73M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.6k, False: 2.71M]
  |  |  ------------------
  ------------------
  951|  20.6k|        return eof_error::eof;
  952|  20.6k|    }
  953|  2.71M|    return eof_error::good;
  954|  2.73M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|  2.73M|{
  944|  2.73M|    return is_range_eof(r.begin(), r.end());
  945|  2.73M|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|  2.73M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  2.73M|    {
  937|  2.73M|        return begin == end;
  938|  2.73M|    }
  939|  2.73M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  1.45M|    {
  296|  1.45M|        ++x;
  297|  1.45M|        return x;
  298|  1.45M|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3129|   999k|{
 3130|   999k|    auto r = read_one_of_code_unit(range, "+-");
 3131|   999k|    if (!r) {
  ------------------
  |  Branch (3131:9): [True: 755k, False: 243k]
  ------------------
 3132|   755k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3132:13): [True: 755k, False: 96]
  ------------------
 3133|   755k|            return std::pair{range.begin(), sign_type::default_sign};
 3134|   755k|        }
 3135|     96|        return unexpected(eof_error::eof);
 3136|   755k|    }
 3137|       |
 3138|   243k|    auto& it = *r;
 3139|   243k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3139:9): [True: 113k, False: 130k]
  ------------------
 3140|   113k|        return std::pair{it, sign_type::minus_sign};
 3141|   113k|    }
 3142|   130k|    return std::pair{it, sign_type::plus_sign};
 3143|   243k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2260|  1.15M|{
 2261|  1.15M|    auto it = read_code_unit(range);
 2262|  1.15M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.15M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.04k, False: 1.15M]
  |  |  ------------------
  ------------------
 2263|  2.04k|        return unexpected(make_eof_parse_error(it.error()));
 2264|  2.04k|    }
 2265|       |
 2266|  2.16M|    for (auto ch : str) {
  ------------------
  |  Branch (2266:18): [True: 2.16M, False: 885k]
  ------------------
 2267|  2.16M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2267:13): [True: 270k, False: 1.89M]
  ------------------
 2268|   270k|            return *it;
 2269|   270k|        }
 2270|  2.16M|    }
 2271|       |
 2272|   885k|    return unexpected(parse_error::error);
 2273|  1.15M|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2219|  2.59M|{
 2220|  2.59M|    using char_type = detail::char_t<Range>;
 2221|       |
 2222|       |    if constexpr (ranges::contiguous_range<Range> &&
 2223|  2.59M|                  std::is_same_v<char_type, char>) {
 2224|  2.59M|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2224:13): [True: 35.6k, False: 2.55M]
  ------------------
 2225|  35.6k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2226|  35.6k|        }
 2227|  2.55M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2227:13): [True: 2.45M, False: 98.0k]
  ------------------
 2228|  2.45M|            return unexpected(parse_error::error);
 2229|  2.45M|        }
 2230|  98.0k|        return ranges::next(range.begin(), str.size());
 2231|       |    }
 2232|       |    else {
 2233|       |        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|       |            if (ch < 'A' || ch > 'Z') {
 2235|       |                return ch;
 2236|       |            }
 2237|       |            return static_cast<char_type>(ch +
 2238|       |                                          static_cast<char_type>('a' - 'A'));
 2239|       |        };
 2240|       |
 2241|       |        SCN_TRY(it, read_exactly_n_code_units(
 2242|       |                        range, static_cast<std::ptrdiff_t>(str.size()))
 2243|       |                        .transform_error(make_eof_parse_error));
 2244|       |
 2245|       |        if (SCN_UNLIKELY(!std::equal(
 2246|       |                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2247|       |                    return ascii_tolower(a) ==
 2248|       |                           static_cast<detail::char_t<Range>>(b);
 2249|       |                }))) {
 2250|       |            return unexpected(parse_error::error);
 2251|       |        }
 2252|       |
 2253|       |        return it;
 2254|       |    }
 2255|  2.59M|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2134|   297k|{
 2135|   297k|    auto it = read_code_unit(range);
 2136|   297k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   297k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.73k, False: 294k]
  |  |  ------------------
  ------------------
 2137|  2.73k|        return unexpected(make_eof_parse_error(it.error()));
 2138|  2.73k|    }
 2139|       |
 2140|   294k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   294k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 245k, False: 48.7k]
  |  |  ------------------
  ------------------
 2141|   294k|                     static_cast<detail::char_t<Range>>(ch))) {
 2142|   245k|        return unexpected(parse_error::error);
 2143|   245k|    }
 2144|       |
 2145|  48.7k|    return *it;
 2146|   294k|}
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1490|  3.73M|    {
 1491|  3.73M|        return sv;
 1492|  3.73M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1963|   547k|{
 1964|   547k|    return read_until_code_unit(range, std::not_fn(pred));
 1965|   547k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1944|   547k|{
 1945|   547k|    if constexpr (ranges::common_range<Range>) {
 1946|   547k|        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|       |    else {
 1949|       |        auto first = range.begin();
 1950|       |        for (; first != range.end(); ++first) {
 1951|       |            if (pred(*first)) {
 1952|       |                return first;
 1953|       |            }
 1954|       |        }
 1955|       |        return first;
 1956|       |    }
 1957|   547k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2939|   984k|{
 2940|   984k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 984k, False: 0]
  ------------------
 2941|   984k|        auto it = read_while_classic_space(range);
 2942|   984k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|   984k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   984k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.8k, False: 972k]
  |  |  ------------------
  ------------------
 2944|  11.8k|            return unexpected(e);
 2945|  11.8k|        }
 2946|       |
 2947|   972k|        return it;
 2948|   984k|    }
 2949|       |
 2950|      0|    return read_while_classic_space(range);
 2951|   984k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2104|   984k|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|   984k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|   984k|        auto buf = make_contiguous_buffer(range);
 2109|   984k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|   984k|        return ranges::next(range.begin(),
 2111|   984k|                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|       |    else {
 2114|       |        auto it = range.begin();
 2115|       |
 2116|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|       |            auto seg = get_contiguous_beginning(range);
 2118|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|       |                seg_it != seg.end()) {
 2120|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|       |            }
 2122|       |            ranges::advance(it, seg.size());
 2123|       |        }
 2124|       |
 2125|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|       |            return detail::is_cp_space(cp);
 2127|       |        });
 2128|       |    }
 2129|   984k|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1670|   984k|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|   984k|                  ranges::sized_range<Range>) {
 1674|   984k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|   984k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1675|       |    }
 1676|       |    else {
 1677|       |        return contiguous_range_factory{SCN_FWD(range)};
 1678|       |    }
 1679|   984k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1476|   984k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1477|   984k|    {
 1478|   984k|    }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  3.00M|    {
  304|  3.00M|        ranges::advance(x, n);
  305|  3.00M|        return x;
  306|  3.00M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  3.99M|    {
  268|  3.99M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  3.99M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  3.99M|    {
  181|  18.5M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 14.5M, False: 3.99M]
  ------------------
  182|  14.5M|            ++i;
  183|  14.5M|        }
  184|  3.99M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6181|   263k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|   263k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|   263k|            auto rd = make_reader<T, char_type>();
 6195|   263k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   263k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 263k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|   263k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 263k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|   263k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|   263k|                return impl(rd, range, value);
 6202|   263k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   263k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3028|  1.50M|    {
 3029|  1.50M|        reader_error_handler eh{};
 3030|  1.50M|        get_derived().check_specs_impl(specs, eh);
 3031|  1.50M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  1.50M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.50M]
  |  |  ------------------
  ------------------
 3032|      0|            return {scan_error::invalid_format_string, eh.m_msg};
 3033|      0|        }
 3034|  1.50M|        return {};
 3035|  1.50M|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3039|  1.50M|    {
 3040|  1.50M|        return static_cast<Derived&>(*this);
 3041|  1.50M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4133|  1.50M|    {
 4134|  1.50M|        detail::check_float_type_specs(specs, eh);
 4135|  1.50M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|   263k|    {
 6113|   263k|        const bool need_skipped_width =
 6114|   263k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 263k]
  |  Branch (6114:33): [True: 0, False: 263k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   263k|        auto it = rng.begin();
 6118|   263k|        std::ptrdiff_t prefix_width = 0;
 6119|   263k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 263k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   263k|        else {
 6127|   263k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   263k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   263k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   263k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   263k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.37k, False: 259k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.37k|    }                                                  \
  |  |  |  | 3667|   263k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   259k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   259k|            std::tie(it, prefix_width) = prefix_result;
 6129|   259k|        }
 6130|   259k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   259k|        std::ptrdiff_t value_width = 0;
 6134|   259k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 259k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   259k|        else {
 6150|   259k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   259k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   259k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   259k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 17.8k, False: 241k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  17.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  17.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  17.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  17.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  17.8k|    }                                                  \
  |  | 3667|   259k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   259k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|   241k|                                             specs, value, loc));
 6152|       |
 6153|   241k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 241k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|   241k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|   241k|        std::ptrdiff_t postfix_width = 0;
 6162|   241k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 237k, False: 3.50k]
  ------------------
 6163|   237k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   237k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   237k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   237k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   237k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 237k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   237k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   237k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   237k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|   237k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|   237k|                                 value_width));
 6167|   237k|            std::tie(it, postfix_width) = postfix_result;
 6168|   237k|        }
 6169|       |
 6170|   241k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|   241k|                                                 value_width, postfix_width);
 6172|   241k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 241k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|   241k|        return it;
 6177|   241k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3023|  3.47M|    {
 3024|  3.47M|        return true;
 3025|  3.47M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4205|  1.48M|    {
 4206|  1.48M|        unsigned options{};
 4207|  1.48M|        if (specs.localized) {
  ------------------
  |  Branch (4207:13): [True: 420k, False: 1.06M]
  ------------------
 4208|   420k|            options |= float_reader_base::allow_thsep;
 4209|   420k|        }
 4210|       |
 4211|  1.48M|        SCN_GCC_COMPAT_PUSH
 4212|  1.48M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4213|       |
 4214|  1.48M|        switch (specs.type) {
 4215|   216k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4215:13): [True: 216k, False: 1.26M]
  ------------------
 4216|   216k|                return options | float_reader_base::allow_fixed;
 4217|       |
 4218|  40.1k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4218:13): [True: 40.1k, False: 1.44M]
  ------------------
 4219|  40.1k|                return options | float_reader_base::allow_scientific;
 4220|       |
 4221|   453k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4221:13): [True: 453k, False: 1.03M]
  ------------------
 4222|   453k|                return options | float_reader_base::allow_hex;
 4223|       |
 4224|   353k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4224:13): [True: 353k, False: 1.13M]
  ------------------
 4225|   353k|                return options | float_reader_base::allow_scientific |
 4226|   353k|                       float_reader_base::allow_fixed;
 4227|       |
 4228|   420k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4228:13): [True: 420k, False: 1.06M]
  ------------------
 4229|   420k|                return options | float_reader_base::allow_scientific |
 4230|   420k|                       float_reader_base::allow_fixed |
 4231|   420k|                       float_reader_base::allow_hex;
 4232|       |
 4233|      0|            default:
  ------------------
  |  Branch (4233:13): [True: 0, False: 1.48M]
  ------------------
 4234|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4235|  1.48M|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4236|  1.48M|        }
 4237|       |
 4238|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4239|  1.48M|    }
_ZN3scn2v34impl12float_readerIcEC2Ej:
 3648|  1.48M|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2Ev:
 1758|  2.08M|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIcEC2Ev:
 1519|  4.16M|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIcE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3679|   644k|    {
 3680|   644k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   644k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   644k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3681|       |
 3682|   644k|        const std::ptrdiff_t sign_len =
 3683|   644k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3683:13): [True: 159k, False: 484k]
  ------------------
 3684|       |
 3685|   644k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3668|   644k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   644k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   644k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   644k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 15.5k, False: 629k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  15.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  15.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  15.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  15.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  15.5k|    }                                                  \
  |  |  |  | 3667|   644k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   629k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3686|   629k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3687|   644k|    }
_ZN3scn2v34impl12float_readerIcE17handle_separatorsEv:
 4045|  1.98M|    {
 4046|  1.98M|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4046:13): [True: 1.98M, False: 0]
  ------------------
 4047|  1.98M|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4047:13): [True: 1.98M, False: 0]
  ------------------
 4048|  1.98M|            return;
 4049|  1.98M|        }
 4050|       |
 4051|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4052|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4052:13): [True: 0, False: 0]
  ------------------
 4053|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4053:27): [True: 0, False: 0]
  ------------------
 4054|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4054:21): [True: 0, False: 0]
  ------------------
 4055|      0|                    ch = CharT{'.'};
 4056|      0|                }
 4057|      0|            }
 4058|      0|        }
 4059|       |
 4060|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4060:13): [True: 0, False: 0]
  ------------------
 4061|      0|            return;
 4062|      0|        }
 4063|       |
 4064|      0|        auto first =
 4065|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4066|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4066:13): [True: 0, False: 0]
  ------------------
 4067|      0|            return;
 4068|      0|        }
 4069|       |
 4070|      0|        m_thsep_indices.push_back(
 4071|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4072|       |
 4073|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4073:31): [True: 0, False: 0]
  ------------------
 4074|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4074:17): [True: 0, False: 0]
  ------------------
 4075|      0|                *first++ = std::move(*it);
 4076|      0|            }
 4077|      0|            else {
 4078|      0|                m_thsep_indices.push_back(
 4079|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4080|      0|            }
 4081|      0|        }
 4082|       |
 4083|      0|        str.erase(first, str.end());
 4084|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1574|  2.26M|    {
 1575|  2.26M|        return m_storage.has_value();
 1576|  2.26M|    }
_ZNR3scn2v34impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1579|  1.32M|    {
 1580|  1.32M|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|  1.32M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.32M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1581|  1.32M|        return *m_storage;
 1582|  1.32M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4158|   259k|    {
 4159|   259k|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|   259k|#if !SCN_DISABLE_LOCALE
 4162|   259k|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 73.1k, False: 185k]
  ------------------
 4163|  73.1k|            return read_impl<Range>(
 4164|  73.1k|                range, rd,
 4165|  73.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  73.1k|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|  73.1k|                },
 4168|  73.1k|                value, loc);
 4169|  73.1k|        }
 4170|   185k|#endif
 4171|       |
 4172|   185k|        return read_impl<Range>(
 4173|   185k|            range, rd,
 4174|   185k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   185k|                return r.read_source(SCN_FWD(args)...);
 4176|   185k|            },
 4177|   185k|            value);
 4178|   259k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4194|   359k|    {
 4195|   359k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|   359k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   359k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.1k, False: 339k]
  |  |  ------------------
  ------------------
 4197|  20.1k|            return unexpected(r.error());
 4198|  20.1k|        }
 4199|       |
 4200|   339k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   339k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   339k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   339k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   339k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.01k, False: 336k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.01k|    }                                                  \
  |  |  |  | 3667|   339k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   336k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|   336k|        return ranges::next(range.begin(), n);
 4202|   339k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|  1.11M|    {
  763|  1.11M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  1.11M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.11M|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  73.1k|        : m_fptr([](storage fn,
  743|  73.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  73.1k|              cvref<T> obj = *get<T>(fn);
  745|  73.1k|              if constexpr (std::is_void_v<R>) {
  746|  73.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  73.1k|              }
  748|  73.1k|              else {
  749|  73.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  73.1k|              }
  751|  73.1k|          }),
  752|  73.1k|          m_storage(std::addressof(f))
  753|  73.1k|    {
  754|  73.1k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  73.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  73.1k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  73.1k|              else {
  749|  73.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  73.1k|              }
  751|  73.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  73.1k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  73.1k|        else if constexpr (std::is_object_v<T>) {
  688|  73.1k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  73.1k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4165|  73.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  73.1k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  73.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|  73.1k|                },
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3667|   228k|    {
 3668|   228k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3669|   228k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|   228k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 228k]
  |  |  ------------------
  ------------------
 3670|      0|            m_locale_options.thousands_sep = CharT{0};
 3671|      0|        }
 3672|       |
 3673|   228k|        return read_source_impl(range);
 3674|   228k|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3693|  1.11M|    {
 3694|  1.11M|        SCN_TRY(sign_result,
  ------------------
  |  | 3668|  1.11M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.11M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.11M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.11M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  1.11M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.11M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3695|  1.11M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3696|  1.11M|        auto it = sign_result.first;
 3697|  1.11M|        m_sign = sign_result.second;
 3698|       |
 3699|  1.11M|        auto digits_begin = it;
 3700|  1.11M|        auto r = ranges::subrange{it, range.end()};
 3701|       |        if constexpr (ranges::contiguous_range<Range> &&
 3702|       |                      ranges::sized_range<Range>) {
 3703|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3704|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3705|       |                SCN_TRY_ASSIGN(
 3706|       |                    it,
 3707|       |                    do_read_source_impl(
 3708|       |                        r,
 3709|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3710|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3711|       |            }
 3712|       |            else {
 3713|       |                auto cb = [&](const auto& rr)
 3714|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3715|       |                    auto res = read_all(rr);
 3716|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3717|       |                        return unexpected_scan_error(
 3718|       |                            scan_error::invalid_scanned_value,
 3719|       |                            "Invalid float value");
 3720|       |                    }
 3721|       |                    return res;
 3722|       |                };
 3723|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3724|       |            }
 3725|       |        }
 3726|  1.11M|        else {
 3727|  1.11M|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3663|  1.11M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  1.11M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  1.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 62.8k, False: 1.04M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  62.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  62.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  62.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  62.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  62.8k|    }                                                  \
  |  | 3667|  1.11M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  1.11M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3728|  1.04M|                it,
 3729|  1.04M|                do_read_source_impl(
 3730|  1.04M|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3731|  1.04M|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3732|  1.04M|        }
 3733|       |
 3734|  1.11M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.11M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.11M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3735|       |
 3736|  1.04M|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3736:13): [True: 1.04M, False: 5.78k]
  |  Branch (3736:48): [True: 1.03M, False: 5.21k]
  ------------------
 3737|  1.04M|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3737:13): [True: 992k, False: 44.3k]
  ------------------
 3738|  1.04M|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3738:13): [True: 991k, False: 1.79k]
  ------------------
 3739|   991k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3740|   991k|        }
 3741|       |
 3742|  1.04M|        handle_separators();
 3743|       |
 3744|  1.04M|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3744:13): [True: 0, False: 1.04M]
  ------------------
 3745|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|      0|            if (auto e = check_thsep_grouping(
 3747|      0|                    ranges::subrange{
 3748|      0|                        digits_begin,
 3749|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3750|      0|                    m_thsep_indices, m_locale_options.grouping);
 3751|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3752|      0|                return unexpected(e);
 3753|      0|            }
 3754|      0|        }
 3755|       |
 3756|  1.04M|        return it;
 3757|  1.04M|    }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 3988|  1.11M|    {
 3989|  1.11M|        const bool allowed_hex = (m_options & allow_hex) != 0;
 3990|  1.11M|        const bool allowed_nonhex =
 3991|  1.11M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 3992|  1.11M|             ~static_cast<unsigned>(allow_hex)) != 0;
 3993|       |
 3994|  1.11M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (3994:39): [True: 1.10M, False: 10.9k]
  |  Branch (3994:45): [True: 0, False: 1.10M]
  ------------------
 3995|      0|            return r.transform_error(map_parse_error_to_scan_error(
 3996|      0|                scan_error::invalid_scanned_value,
 3997|      0|                "Invalid infinite floating-point value"));
 3998|      0|        }
 3999|  1.11M|        else if (r) {
  ------------------
  |  Branch (3999:18): [True: 10.9k, False: 1.10M]
  ------------------
 4000|  10.9k|            return *r;
 4001|  10.9k|        }
 4002|       |
 4003|  1.10M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4003:39): [True: 1.05M, False: 46.1k]
  |  Branch (4003:45): [True: 1.27k, False: 1.05M]
  ------------------
 4004|  1.27k|            return unexpected(r.error());
 4005|  1.27k|        }
 4006|  1.09M|        else if (r) {
  ------------------
  |  Branch (4006:18): [True: 46.1k, False: 1.05M]
  ------------------
 4007|  46.1k|            return *r;
 4008|  46.1k|        }
 4009|       |
 4010|  1.05M|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4010:13): [True: 744k, False: 308k]
  |  Branch (4010:28): [True: 233k, False: 510k]
  ------------------
 4011|       |            // only hex allowed:
 4012|       |            // prefix "0x" allowed, not required
 4013|   233k|            auto it = range.begin();
 4014|       |
 4015|   233k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4015:22): [True: 11.3k, False: 222k]
  ------------------
 4016|  11.3k|                m_kind = float_kind::hex_with_prefix;
 4017|  11.3k|                it = *r;
 4018|  11.3k|            }
 4019|   222k|            else {
 4020|   222k|                m_kind = float_kind::hex_without_prefix;
 4021|   222k|            }
 4022|       |
 4023|   233k|            return read_hex(ranges::subrange{it, range.end()});
 4024|   233k|        }
 4025|   819k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4025:13): [True: 308k, False: 510k]
  |  Branch (4025:29): [True: 308k, False: 0]
  ------------------
 4026|       |            // only nonhex allowed:
 4027|       |            // no prefix allowed
 4028|   308k|            m_kind = float_kind::generic;
 4029|   308k|            return read_regular_float(range);
 4030|   308k|        }
 4031|       |        // both hex and nonhex allowed:
 4032|       |        // check for "0x" prefix -> hex,
 4033|       |        // regular otherwise
 4034|       |
 4035|   510k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   510k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 25.7k, False: 484k]
  |  |  ------------------
  ------------------
 4036|  25.7k|            m_kind = float_kind::hex_with_prefix;
 4037|  25.7k|            return read_hex(ranges::subrange{*r, range.end()});
 4038|  25.7k|        }
 4039|       |
 4040|   484k|        m_kind = float_kind::generic;
 4041|   484k|        return read_regular(range);
 4042|   510k|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3799|  1.11M|    {
 3800|  1.11M|        auto it = range.begin();
 3801|  1.11M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3801:73): [True: 1.10M, False: 10.9k]
  ------------------
 3802|  1.10M|            return unexpected(r.error());
 3803|  1.10M|        }
 3804|  10.9k|        else {
 3805|  10.9k|            it = *r;
 3806|  10.9k|        }
 3807|       |
 3808|  10.9k|        if (auto r = read_matching_string_classic_nocase(
 3809|  10.9k|                ranges::subrange{it, range.end()}, "inity");
 3810|  10.9k|            !r) {
  ------------------
  |  Branch (3810:13): [True: 5.78k, False: 5.21k]
  ------------------
 3811|  5.78k|            m_kind = float_kind::inf_short;
 3812|  5.78k|            return it;
 3813|  5.78k|        }
 3814|  5.21k|        else {
 3815|  5.21k|            m_kind = float_kind::inf_long;
 3816|  5.21k|            return *r;
 3817|  5.21k|        }
 3818|  10.9k|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3822|  1.10M|    {
 3823|  1.10M|        auto it = range.begin();
 3824|  1.10M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3824:73): [True: 1.05M, False: 47.3k]
  ------------------
 3825|  1.05M|            return r.transform_error(map_parse_error_to_scan_error(
 3826|  1.05M|                scan_error::invalid_scanned_value,
 3827|  1.05M|                "Invalid floating-point NaN value"));
 3828|  1.05M|        }
 3829|  47.3k|        else {
 3830|  47.3k|            it = *r;
 3831|  47.3k|        }
 3832|       |
 3833|  47.3k|        if (auto r =
 3834|  47.3k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3835|  47.3k|            !r) {
  ------------------
  |  Branch (3835:13): [True: 44.3k, False: 3.06k]
  ------------------
 3836|  44.3k|            m_kind = float_kind::nan_simple;
 3837|  44.3k|            return it;
 3838|  44.3k|        }
 3839|  3.06k|        else {
 3840|  3.06k|            it = *r;
 3841|  3.06k|        }
 3842|       |
 3843|  3.06k|        auto payload_beg_it = it;
 3844|  3.06k|        it = read_while_code_unit(
 3845|  3.06k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3846|  3.06k|                return is_ascii_char(ch) &&
 3847|  3.06k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3848|  3.06k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3849|  3.06k|            });
 3850|  3.06k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3851|       |
 3852|  3.06k|        m_kind = float_kind::nan_with_payload;
 3853|  3.06k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3853:18): [True: 1.79k, False: 1.27k]
  ------------------
 3854|  3.06k|                                             ')')) {
 3855|  1.79k|            return *r;
 3856|  1.79k|        }
 3857|  1.27k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3858|  1.27k|                                     "Invalid floating-point NaN payload");
 3859|  3.06k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|  3.06k|        : m_fptr([](storage fn,
  743|  3.06k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.06k|              cvref<T> obj = *get<T>(fn);
  745|  3.06k|              if constexpr (std::is_void_v<R>) {
  746|  3.06k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.06k|              }
  748|  3.06k|              else {
  749|  3.06k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.06k|              }
  751|  3.06k|          }),
  752|  3.06k|          m_storage(std::addressof(f))
  753|  3.06k|    {
  754|  3.06k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  39.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  39.8k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  39.8k|              else {
  749|  39.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  39.8k|              }
  751|  39.8k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_EUlcE_EEDaNS3_7storageE:
  683|  39.8k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  39.8k|        else if constexpr (std::is_object_v<T>) {
  688|  39.8k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  39.8k|    }
_ZZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlcE_clEc:
 3845|  39.8k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3846|  39.8k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3846:24): [True: 39.7k, False: 91]
  ------------------
 3847|  39.8k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3847:26): [True: 37.7k, False: 1.99k]
  |  Branch (3847:39): [True: 29.8k, False: 7.82k]
  |  Branch (3847:54): [True: 2.58k, False: 7.24k]
  |  Branch (3847:67): [True: 2.49k, False: 83]
  ------------------
 3848|  39.7k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3848:26): [True: 5.32k, False: 1.99k]
  |  Branch (3848:39): [True: 2.52k, False: 2.80k]
  |  Branch (3848:53): [True: 2.72k, False: 2.08k]
  ------------------
 3849|  39.8k|            });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  3.06k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  3.06k|        {
  662|  3.06k|        }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3792|   744k|    {
 3793|   744k|        return read_matching_string_classic_nocase(range, "0x");
 3794|   744k|    }
_ZN3scn2v34impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3892|   259k|    {
 3893|   259k|        auto it = range.begin();
 3894|       |
 3895|   259k|        std::ptrdiff_t digits_count = 0;
 3896|   259k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3897|   259k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   259k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.74k, False: 251k]
  |  |  ------------------
  ------------------
 3898|  7.74k|            return r.transform_error(map_parse_error_to_scan_error(
 3899|  7.74k|                scan_error::invalid_scanned_value,
 3900|  7.74k|                "Invalid hexadecimal floating-point value"));
 3901|  7.74k|        }
 3902|   251k|        else {
 3903|   251k|            digits_count += ranges::distance(it, *r);
 3904|   251k|            it = *r;
 3905|   251k|        }
 3906|       |
 3907|   251k|        m_integral_part_length = digits_count;
 3908|   251k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3908:18): [True: 38.9k, False: 212k]
  ------------------
 3909|   251k|                                             m_locale_options.decimal_point)) {
 3910|  38.9k|            it = *r;
 3911|  38.9k|        }
 3912|       |
 3913|   251k|        if (auto r =
  ------------------
  |  Branch (3913:18): [True: 35.3k, False: 216k]
  ------------------
 3914|   251k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3915|  35.3k|            digits_count += ranges::distance(it, *r);
 3916|  35.3k|            it = *r;
 3917|  35.3k|        }
 3918|       |
 3919|   251k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   251k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 251k]
  |  |  ------------------
  ------------------
 3920|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3921|      0|                                         "No significand digits in hexfloat");
 3922|      0|        }
 3923|       |
 3924|   251k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3925|       |
 3926|   251k|        return it;
 3927|   251k|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3777|   510k|    {
 3778|   510k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   510k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 510k]
  |  |  |  Branch (859:45): [True: 0, False: 510k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3779|   510k|                         thsep_allowed)) {
 3780|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3781|      0|                return char_to_int(ch) < 16 ||
 3782|      0|                       ch == m_locale_options.thousands_sep;
 3783|      0|            });
 3784|      0|        }
 3785|       |
 3786|   510k|        return read_while1_code_unit(
 3787|   510k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3788|   510k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|   510k|        : m_fptr([](storage fn,
  743|   510k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   510k|              cvref<T> obj = *get<T>(fn);
  745|   510k|              if constexpr (std::is_void_v<R>) {
  746|   510k|                  obj(static_cast<decltype(args)>(args)...);
  747|   510k|              }
  748|   510k|              else {
  749|   510k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   510k|              }
  751|   510k|          }),
  752|   510k|          m_storage(std::addressof(f))
  753|   510k|    {
  754|   510k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  2.64M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.64M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.64M|              else {
  749|  2.64M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.64M|              }
  751|  2.64M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  2.64M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  2.64M|        else if constexpr (std::is_object_v<T>) {
  688|  2.64M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.64M|    }
_ZZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3787|  2.64M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   510k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   510k|        {
  662|   510k|        }
_ZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3864|   904k|    {
 3865|   904k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3865:18): [True: 113k, False: 791k]
  ------------------
 3866|   113k|            auto beg_exp_it = range.begin();
 3867|   113k|            auto it = *r;
 3868|       |
 3869|   113k|            if (auto r_sign =
  ------------------
  |  Branch (3869:22): [True: 112k, False: 288]
  ------------------
 3870|   113k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3871|   112k|                it = r_sign->first;
 3872|   112k|            }
 3873|       |
 3874|   113k|            if (auto r_exp = read_while1_code_unit(
 3875|   113k|                    ranges::subrange{it, range.end()},
 3876|   113k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3877|   113k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.79k, False: 111k]
  |  |  ------------------
  ------------------
 3878|  1.79k|                it = beg_exp_it;
 3879|  1.79k|            }
 3880|   111k|            else {
 3881|   111k|                it = *r_exp;
 3882|   111k|            }
 3883|       |
 3884|   113k|            return it;
 3885|   113k|        }
 3886|   791k|        return range.begin();
 3887|   904k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|   113k|        : m_fptr([](storage fn,
  743|   113k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   113k|              cvref<T> obj = *get<T>(fn);
  745|   113k|              if constexpr (std::is_void_v<R>) {
  746|   113k|                  obj(static_cast<decltype(args)>(args)...);
  747|   113k|              }
  748|   113k|              else {
  749|   113k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   113k|              }
  751|   113k|          }),
  752|   113k|          m_storage(std::addressof(f))
  753|   113k|    {
  754|   113k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES15_c:
  743|   355k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   355k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   355k|              else {
  749|   355k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   355k|              }
  751|   355k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|   355k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   355k|        else if constexpr (std::is_object_v<T>) {
  688|   355k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   355k|    }
_ZZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlcE_clEc:
 3876|   355k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|   113k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   113k|        {
  662|   113k|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3932|   793k|    {
 3933|   793k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3934|   793k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3934:35): [True: 683k, False: 109k]
  |  Branch (3934:50): [True: 19.8k, False: 664k]
  ------------------
 3935|       |
 3936|   793k|        auto it = ranges::begin(range);
 3937|   793k|        std::ptrdiff_t digits_count = 0;
 3938|       |
 3939|   793k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3940|   793k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   793k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42.6k, False: 750k]
  |  |  ------------------
  ------------------
 3941|  42.6k|            return r.transform_error(
 3942|  42.6k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3943|  42.6k|                                              "Invalid floating-point value"));
 3944|  42.6k|        }
 3945|   750k|        else {
 3946|   750k|            digits_count += ranges::distance(it, *r);
 3947|   750k|            it = *r;
 3948|   750k|        }
 3949|       |
 3950|   750k|        m_integral_part_length = digits_count;
 3951|   750k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3951:18): [True: 144k, False: 605k]
  ------------------
 3952|   750k|                                             m_locale_options.decimal_point)) {
 3953|   144k|            it = *r;
 3954|   144k|        }
 3955|       |
 3956|   750k|        if (auto r =
  ------------------
  |  Branch (3956:18): [True: 133k, False: 616k]
  ------------------
 3957|   750k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3958|   133k|            digits_count += ranges::distance(it, *r);
 3959|   133k|            it = *r;
 3960|   133k|        }
 3961|       |
 3962|   750k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   750k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 750k]
  |  |  ------------------
  ------------------
 3963|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3964|      0|                                         "No significand digits in float");
 3965|      0|        }
 3966|       |
 3967|   750k|        auto beg_exp_it = it;
 3968|   750k|        if (allowed_exp) {
  ------------------
  |  Branch (3968:13): [True: 652k, False: 98.1k]
  ------------------
 3969|   652k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3970|   652k|        }
 3971|   750k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3971:13): [True: 19.0k, False: 731k]
  |  Branch (3971:29): [True: 11.2k, False: 7.86k]
  ------------------
 3972|  11.2k|            return unexpected_scan_error(
 3973|  11.2k|                scan_error::invalid_scanned_value,
 3974|  11.2k|                "No exponent given to scientific float");
 3975|  11.2k|        }
 3976|       |
 3977|   739k|        m_kind =
 3978|   739k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3978:13): [True: 629k, False: 110k]
  ------------------
 3979|       |
 3980|   739k|        return it;
 3981|   750k|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3762|  1.54M|    {
 3763|  1.54M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|  1.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.54M]
  |  |  |  Branch (859:45): [True: 0, False: 1.54M]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3764|  1.54M|                         thsep_allowed)) {
 3765|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3766|      0|                return char_to_int(ch) < 10 ||
 3767|      0|                       ch == m_locale_options.thousands_sep;
 3768|      0|            });
 3769|      0|        }
 3770|       |
 3771|  1.54M|        return read_while1_code_unit(
 3772|  1.54M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3773|  1.54M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|  1.54M|        : m_fptr([](storage fn,
  743|  1.54M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.54M|              cvref<T> obj = *get<T>(fn);
  745|  1.54M|              if constexpr (std::is_void_v<R>) {
  746|  1.54M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.54M|              }
  748|  1.54M|              else {
  749|  1.54M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.54M|              }
  751|  1.54M|          }),
  752|  1.54M|          m_storage(std::addressof(f))
  753|  1.54M|    {
  754|  1.54M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  8.45M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  8.45M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  8.45M|              else {
  749|  8.45M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  8.45M|              }
  751|  8.45M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  8.45M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  8.45M|        else if constexpr (std::is_object_v<T>) {
  688|  8.45M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  8.45M|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3772|  8.45M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  1.54M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.54M|        {
  662|  1.54M|        }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSG_:
 1564|   994k|    {
 1565|   994k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   994k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1566|   994k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  73.1k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  73.1k|        {
  662|  73.1k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   185k|        : m_fptr([](storage fn,
  743|   185k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   185k|              cvref<T> obj = *get<T>(fn);
  745|   185k|              if constexpr (std::is_void_v<R>) {
  746|   185k|                  obj(static_cast<decltype(args)>(args)...);
  747|   185k|              }
  748|   185k|              else {
  749|   185k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   185k|              }
  751|   185k|          }),
  752|   185k|          m_storage(std::addressof(f))
  753|   185k|    {
  754|   185k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   185k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   185k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   185k|              else {
  749|   185k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   185k|              }
  751|   185k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   185k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   185k|        else if constexpr (std::is_object_v<T>) {
  688|   185k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   185k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4174|   185k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   185k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   185k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|   185k|            },
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3653|   882k|    {
 3654|   882k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   882k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 882k]
  |  |  ------------------
  ------------------
 3655|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3656|      0|                classic_with_thsep_tag{}};
 3657|      0|        }
 3658|       |
 3659|   882k|        return read_source_impl(range);
 3660|   882k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   185k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   185k|        {
  662|   185k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4158|   223k|    {
 4159|   223k|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|   223k|#if !SCN_DISABLE_LOCALE
 4162|   223k|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 62.1k, False: 161k]
  ------------------
 4163|  62.1k|            return read_impl<Range>(
 4164|  62.1k|                range, rd,
 4165|  62.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  62.1k|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|  62.1k|                },
 4168|  62.1k|                value, loc);
 4169|  62.1k|        }
 4170|   161k|#endif
 4171|       |
 4172|   161k|        return read_impl<Range>(
 4173|   161k|            range, rd,
 4174|   161k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   161k|                return r.read_source(SCN_FWD(args)...);
 4176|   161k|            },
 4177|   161k|            value);
 4178|   223k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4194|   316k|    {
 4195|   316k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|   316k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   316k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.6k, False: 305k]
  |  |  ------------------
  ------------------
 4197|  11.6k|            return unexpected(r.error());
 4198|  11.6k|        }
 4199|       |
 4200|   305k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   305k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   305k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   305k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   305k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12.5k, False: 292k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  12.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  12.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  12.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  12.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  12.5k|    }                                                  \
  |  |  |  | 3667|   305k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   292k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|   292k|        return ranges::next(range.begin(), n);
 4202|   305k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|   972k|    {
  763|   972k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   972k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   972k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  62.1k|        : m_fptr([](storage fn,
  743|  62.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  62.1k|              cvref<T> obj = *get<T>(fn);
  745|  62.1k|              if constexpr (std::is_void_v<R>) {
  746|  62.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  62.1k|              }
  748|  62.1k|              else {
  749|  62.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  62.1k|              }
  751|  62.1k|          }),
  752|  62.1k|          m_storage(std::addressof(f))
  753|  62.1k|    {
  754|  62.1k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  62.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  62.1k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  62.1k|              else {
  749|  62.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  62.1k|              }
  751|  62.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  62.1k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  62.1k|        else if constexpr (std::is_object_v<T>) {
  688|  62.1k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  62.1k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4165|  62.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  62.1k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  62.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|  62.1k|                },
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3667|   191k|    {
 3668|   191k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3669|   191k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|   191k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 191k]
  |  |  ------------------
  ------------------
 3670|      0|            m_locale_options.thousands_sep = CharT{0};
 3671|      0|        }
 3672|       |
 3673|   191k|        return read_source_impl(range);
 3674|   191k|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3693|   972k|    {
 3694|   972k|        SCN_TRY(sign_result,
  ------------------
  |  | 3668|   972k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   972k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   972k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   972k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 972k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   972k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   972k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3695|   972k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3696|   972k|        auto it = sign_result.first;
 3697|   972k|        m_sign = sign_result.second;
 3698|       |
 3699|   972k|        auto digits_begin = it;
 3700|   972k|        auto r = ranges::subrange{it, range.end()};
 3701|       |        if constexpr (ranges::contiguous_range<Range> &&
 3702|   972k|                      ranges::sized_range<Range>) {
 3703|   972k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  1.94M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 972k]
  |  |  |  Branch (859:45): [True: 0, False: 972k]
  |  |  |  Branch (859:45): [True: 0, False: 972k]
  |  |  ------------------
  ------------------
 3704|   972k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3705|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|      0|    }                                                  \
  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3706|      0|                    it,
 3707|      0|                    do_read_source_impl(
 3708|      0|                        r,
 3709|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3710|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3711|      0|            }
 3712|   972k|            else {
 3713|   972k|                auto cb = [&](const auto& rr)
 3714|   972k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3715|   972k|                    auto res = read_all(rr);
 3716|   972k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3717|   972k|                        return unexpected_scan_error(
 3718|   972k|                            scan_error::invalid_scanned_value,
 3719|   972k|                            "Invalid float value");
 3720|   972k|                    }
 3721|   972k|                    return res;
 3722|   972k|                };
 3723|   972k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3663|   972k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   972k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   972k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 35.6k, False: 936k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  35.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  35.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  35.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  35.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  35.6k|    }                                                  \
  |  | 3667|   972k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   972k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3724|   936k|            }
 3725|       |        }
 3726|       |        else {
 3727|       |            SCN_TRY_ASSIGN(
 3728|       |                it,
 3729|       |                do_read_source_impl(
 3730|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3731|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3732|       |        }
 3733|       |
 3734|   972k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   972k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   972k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3735|       |
 3736|   936k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3736:13): [True: 931k, False: 5.60k]
  |  Branch (3736:48): [True: 926k, False: 4.90k]
  ------------------
 3737|   936k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3737:13): [True: 882k, False: 43.5k]
  ------------------
 3738|   936k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3738:13): [True: 880k, False: 1.71k]
  ------------------
 3739|   880k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3740|   880k|        }
 3741|       |
 3742|   936k|        handle_separators();
 3743|       |
 3744|   936k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3744:13): [True: 0, False: 936k]
  ------------------
 3745|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|      0|            if (auto e = check_thsep_grouping(
 3747|      0|                    ranges::subrange{
 3748|      0|                        digits_begin,
 3749|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3750|      0|                    m_thsep_indices, m_locale_options.grouping);
 3751|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3752|      0|                return unexpected(e);
 3753|      0|            }
 3754|      0|        }
 3755|       |
 3756|   936k|        return it;
 3757|   936k|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3799|   972k|    {
 3800|   972k|        auto it = range.begin();
 3801|   972k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3801:73): [True: 961k, False: 10.5k]
  ------------------
 3802|   961k|            return unexpected(r.error());
 3803|   961k|        }
 3804|  10.5k|        else {
 3805|  10.5k|            it = *r;
 3806|  10.5k|        }
 3807|       |
 3808|  10.5k|        if (auto r = read_matching_string_classic_nocase(
 3809|  10.5k|                ranges::subrange{it, range.end()}, "inity");
 3810|  10.5k|            !r) {
  ------------------
  |  Branch (3810:13): [True: 5.60k, False: 4.90k]
  ------------------
 3811|  5.60k|            m_kind = float_kind::inf_short;
 3812|  5.60k|            return it;
 3813|  5.60k|        }
 3814|  4.90k|        else {
 3815|  4.90k|            m_kind = float_kind::inf_long;
 3816|  4.90k|            return *r;
 3817|  4.90k|        }
 3818|  10.5k|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3822|   961k|    {
 3823|   961k|        auto it = range.begin();
 3824|   961k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3824:73): [True: 915k, False: 46.5k]
  ------------------
 3825|   915k|            return r.transform_error(map_parse_error_to_scan_error(
 3826|   915k|                scan_error::invalid_scanned_value,
 3827|   915k|                "Invalid floating-point NaN value"));
 3828|   915k|        }
 3829|  46.5k|        else {
 3830|  46.5k|            it = *r;
 3831|  46.5k|        }
 3832|       |
 3833|  46.5k|        if (auto r =
 3834|  46.5k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3835|  46.5k|            !r) {
  ------------------
  |  Branch (3835:13): [True: 43.5k, False: 2.93k]
  ------------------
 3836|  43.5k|            m_kind = float_kind::nan_simple;
 3837|  43.5k|            return it;
 3838|  43.5k|        }
 3839|  2.93k|        else {
 3840|  2.93k|            it = *r;
 3841|  2.93k|        }
 3842|       |
 3843|  2.93k|        auto payload_beg_it = it;
 3844|  2.93k|        it = read_while_code_unit(
 3845|  2.93k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3846|  2.93k|                return is_ascii_char(ch) &&
 3847|  2.93k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3848|  2.93k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3849|  2.93k|            });
 3850|  2.93k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3851|       |
 3852|  2.93k|        m_kind = float_kind::nan_with_payload;
 3853|  2.93k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3853:18): [True: 1.71k, False: 1.21k]
  ------------------
 3854|  2.93k|                                             ')')) {
 3855|  1.71k|            return *r;
 3856|  1.71k|        }
 3857|  1.21k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3858|  1.21k|                                     "Invalid floating-point NaN payload");
 3859|  2.93k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|  2.93k|        : m_fptr([](storage fn,
  743|  2.93k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.93k|              cvref<T> obj = *get<T>(fn);
  745|  2.93k|              if constexpr (std::is_void_v<R>) {
  746|  2.93k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.93k|              }
  748|  2.93k|              else {
  749|  2.93k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.93k|              }
  751|  2.93k|          }),
  752|  2.93k|          m_storage(std::addressof(f))
  753|  2.93k|    {
  754|  2.93k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|  33.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  33.2k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  33.2k|              else {
  749|  33.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  33.2k|              }
  751|  33.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_EUlcE_EEDaNS3_7storageE:
  683|  33.2k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  33.2k|        else if constexpr (std::is_object_v<T>) {
  688|  33.2k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  33.2k|    }
_ZZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlcE_clEc:
 3845|  33.2k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3846|  33.2k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3846:24): [True: 33.2k, False: 85]
  ------------------
 3847|  33.2k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3847:26): [True: 31.3k, False: 1.88k]
  |  Branch (3847:39): [True: 23.5k, False: 7.80k]
  |  Branch (3847:54): [True: 2.55k, False: 7.12k]
  |  Branch (3847:67): [True: 2.47k, False: 83]
  ------------------
 3848|  33.2k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3848:26): [True: 5.32k, False: 1.88k]
  |  Branch (3848:39): [True: 2.52k, False: 2.80k]
  |  Branch (3848:53): [True: 2.72k, False: 1.96k]
  ------------------
 3849|  33.2k|            });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  2.93k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.93k|        {
  662|  2.93k|        }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3792|   645k|    {
 3793|   645k|        return read_matching_string_classic_nocase(range, "0x");
 3794|   645k|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1983|   544k|{
 1984|   544k|    auto it = read_while_code_unit(range, pred);
 1985|   544k|    if (it == range.begin()) {
  ------------------
  |  Branch (1985:9): [True: 230k, False: 314k]
  ------------------
 1986|   230k|        return unexpected(parse_error::error);
 1987|   230k|    }
 1988|   314k|    return it;
 1989|   544k|}
_ZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3864|   158k|    {
 3865|   158k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3865:18): [True: 27.1k, False: 131k]
  ------------------
 3866|  27.1k|            auto beg_exp_it = range.begin();
 3867|  27.1k|            auto it = *r;
 3868|       |
 3869|  27.1k|            if (auto r_sign =
  ------------------
  |  Branch (3869:22): [True: 27.0k, False: 96]
  ------------------
 3870|  27.1k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3871|  27.0k|                it = r_sign->first;
 3872|  27.0k|            }
 3873|       |
 3874|  27.1k|            if (auto r_exp = read_while1_code_unit(
 3875|  27.1k|                    ranges::subrange{it, range.end()},
 3876|  27.1k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3877|  27.1k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  27.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 652, False: 26.4k]
  |  |  ------------------
  ------------------
 3878|    652|                it = beg_exp_it;
 3879|    652|            }
 3880|  26.4k|            else {
 3881|  26.4k|                it = *r_exp;
 3882|  26.4k|            }
 3883|       |
 3884|  27.1k|            return it;
 3885|  27.1k|        }
 3886|   131k|        return range.begin();
 3887|   158k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_:
  742|  27.1k|        : m_fptr([](storage fn,
  743|  27.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  27.1k|              cvref<T> obj = *get<T>(fn);
  745|  27.1k|              if constexpr (std::is_void_v<R>) {
  746|  27.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  27.1k|              }
  748|  27.1k|              else {
  749|  27.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  27.1k|              }
  751|  27.1k|          }),
  752|  27.1k|          m_storage(std::addressof(f))
  753|  27.1k|    {
  754|  27.1k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEcE_clES12_c:
  743|  77.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  77.8k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  77.8k|              else {
  749|  77.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  77.8k|              }
  751|  77.8k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|  77.8k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  77.8k|        else if constexpr (std::is_object_v<T>) {
  688|  77.8k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  77.8k|    }
_ZZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlcE_clEc:
 3876|  77.8k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|  27.1k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  27.1k|        {
  662|  27.1k|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3932|   270k|    {
 3933|   270k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3934|   270k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3934:35): [True: 169k, False: 100k]
  |  Branch (3934:50): [True: 18.2k, False: 151k]
  ------------------
 3935|       |
 3936|   270k|        auto it = ranges::begin(range);
 3937|   270k|        std::ptrdiff_t digits_count = 0;
 3938|       |
 3939|   270k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3940|   270k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   270k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 22.6k, False: 247k]
  |  |  ------------------
  ------------------
 3941|  22.6k|            return r.transform_error(
 3942|  22.6k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3943|  22.6k|                                              "Invalid floating-point value"));
 3944|  22.6k|        }
 3945|   247k|        else {
 3946|   247k|            digits_count += ranges::distance(it, *r);
 3947|   247k|            it = *r;
 3948|   247k|        }
 3949|       |
 3950|   247k|        m_integral_part_length = digits_count;
 3951|   247k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3951:18): [True: 44.0k, False: 203k]
  ------------------
 3952|   247k|                                             m_locale_options.decimal_point)) {
 3953|  44.0k|            it = *r;
 3954|  44.0k|        }
 3955|       |
 3956|   247k|        if (auto r =
  ------------------
  |  Branch (3956:18): [True: 40.1k, False: 207k]
  ------------------
 3957|   247k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3958|  40.1k|            digits_count += ranges::distance(it, *r);
 3959|  40.1k|            it = *r;
 3960|  40.1k|        }
 3961|       |
 3962|   247k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   247k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 247k]
  |  |  ------------------
  ------------------
 3963|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3964|      0|                                         "No significand digits in float");
 3965|      0|        }
 3966|       |
 3967|   247k|        auto beg_exp_it = it;
 3968|   247k|        if (allowed_exp) {
  ------------------
  |  Branch (3968:13): [True: 158k, False: 88.9k]
  ------------------
 3969|   158k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3970|   158k|        }
 3971|   247k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3971:13): [True: 17.0k, False: 230k]
  |  Branch (3971:29): [True: 10.9k, False: 6.07k]
  ------------------
 3972|  10.9k|            return unexpected_scan_error(
 3973|  10.9k|                scan_error::invalid_scanned_value,
 3974|  10.9k|                "No exponent given to scientific float");
 3975|  10.9k|        }
 3976|       |
 3977|   236k|        m_kind =
 3978|   236k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3978:13): [True: 210k, False: 26.4k]
  ------------------
 3979|       |
 3980|   236k|        return it;
 3981|   247k|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3762|   517k|    {
 3763|   517k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   517k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 517k]
  |  |  |  Branch (859:45): [True: 0, False: 517k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3764|   517k|                         thsep_allowed)) {
 3765|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3766|      0|                return char_to_int(ch) < 10 ||
 3767|      0|                       ch == m_locale_options.thousands_sep;
 3768|      0|            });
 3769|      0|        }
 3770|       |
 3771|   517k|        return read_while1_code_unit(
 3772|   517k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3773|   517k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|   517k|        : m_fptr([](storage fn,
  743|   517k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   517k|              cvref<T> obj = *get<T>(fn);
  745|   517k|              if constexpr (std::is_void_v<R>) {
  746|   517k|                  obj(static_cast<decltype(args)>(args)...);
  747|   517k|              }
  748|   517k|              else {
  749|   517k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   517k|              }
  751|   517k|          }),
  752|   517k|          m_storage(std::addressof(f))
  753|   517k|    {
  754|   517k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|  2.67M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.67M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.67M|              else {
  749|  2.67M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.67M|              }
  751|  2.67M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  683|  2.67M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  2.67M|        else if constexpr (std::is_object_v<T>) {
  688|  2.67M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.67M|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3772|  2.67M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   517k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   517k|        {
  662|   517k|        }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3988|   972k|    {
 3989|   972k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 3990|   972k|        const bool allowed_nonhex =
 3991|   972k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 3992|   972k|             ~static_cast<unsigned>(allow_hex)) != 0;
 3993|       |
 3994|   972k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (3994:39): [True: 961k, False: 10.5k]
  |  Branch (3994:45): [True: 0, False: 961k]
  ------------------
 3995|      0|            return r.transform_error(map_parse_error_to_scan_error(
 3996|      0|                scan_error::invalid_scanned_value,
 3997|      0|                "Invalid infinite floating-point value"));
 3998|      0|        }
 3999|   972k|        else if (r) {
  ------------------
  |  Branch (3999:18): [True: 10.5k, False: 961k]
  ------------------
 4000|  10.5k|            return *r;
 4001|  10.5k|        }
 4002|       |
 4003|   961k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4003:39): [True: 916k, False: 45.2k]
  |  Branch (4003:45): [True: 1.21k, False: 915k]
  ------------------
 4004|  1.21k|            return unexpected(r.error());
 4005|  1.21k|        }
 4006|   960k|        else if (r) {
  ------------------
  |  Branch (4006:18): [True: 45.2k, False: 915k]
  ------------------
 4007|  45.2k|            return *r;
 4008|  45.2k|        }
 4009|       |
 4010|   915k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4010:13): [True: 645k, False: 270k]
  |  Branch (4010:28): [True: 194k, False: 450k]
  ------------------
 4011|       |            // only hex allowed:
 4012|       |            // prefix "0x" allowed, not required
 4013|   194k|            auto it = range.begin();
 4014|       |
 4015|   194k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4015:22): [True: 10.4k, False: 184k]
  ------------------
 4016|  10.4k|                m_kind = float_kind::hex_with_prefix;
 4017|  10.4k|                it = *r;
 4018|  10.4k|            }
 4019|   184k|            else {
 4020|   184k|                m_kind = float_kind::hex_without_prefix;
 4021|   184k|            }
 4022|       |
 4023|   194k|            return read_hex(ranges::subrange{it, range.end()});
 4024|   194k|        }
 4025|   720k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4025:13): [True: 270k, False: 450k]
  |  Branch (4025:29): [True: 270k, False: 0]
  ------------------
 4026|       |            // only nonhex allowed:
 4027|       |            // no prefix allowed
 4028|   270k|            m_kind = float_kind::generic;
 4029|   270k|            return read_regular_float(range);
 4030|   270k|        }
 4031|       |        // both hex and nonhex allowed:
 4032|       |        // check for "0x" prefix -> hex,
 4033|       |        // regular otherwise
 4034|       |
 4035|   450k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   450k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 25.6k, False: 425k]
  |  |  ------------------
  ------------------
 4036|  25.6k|            m_kind = float_kind::hex_with_prefix;
 4037|  25.6k|            return read_hex(ranges::subrange{*r, range.end()});
 4038|  25.6k|        }
 4039|       |
 4040|   425k|        m_kind = float_kind::generic;
 4041|   425k|        return read_regular(range);
 4042|   450k|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3714|   645k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3715|   645k|                    auto res = read_all(rr);
 3716|   645k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|   645k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 837, False: 644k]
  |  |  ------------------
  ------------------
 3717|    837|                        return unexpected_scan_error(
 3718|    837|                            scan_error::invalid_scanned_value,
 3719|    837|                            "Invalid float value");
 3720|    837|                    }
 3721|   644k|                    return res;
 3722|   645k|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1826|   645k|{
 1827|   645k|    return ranges::next(range.begin(), range.end());
 1828|   645k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|   645k|    {
  313|   645k|        ranges::advance(x, bound);
  314|   645k|        return x;
  315|   645k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|   645k|    {
  275|   645k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|   645k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|   645k|    {
  190|   645k|        i = std::move(bound);
  191|   645k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1564|   883k|    {
 1565|   883k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   883k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1566|   883k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1608|   883k|    {
 1609|   883k|        using value_t = ranges::range_value_t<Range>;
 1610|       |
 1611|       |        if constexpr (ranges::borrowed_range<Range> &&
 1612|       |                      ranges::contiguous_range<Range> &&
 1613|   883k|                      ranges::sized_range<Range>) {
 1614|   883k|            m_storage.reset();
 1615|   883k|            m_view = string_view_type{ranges::data(range), range.size()};
 1616|       |        }
 1617|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1618|       |                                          std::basic_string<CharT>>) {
 1619|       |            m_storage.emplace(SCN_FWD(range));
 1620|       |            m_view = string_view_type{*m_storage};
 1621|       |        }
 1622|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1623|       |                                          typename detail::basic_scan_buffer<
 1624|       |                                              value_t>::forward_iterator> &&
 1625|       |                           ranges::common_range<Range>) {
 1626|       |            auto beg_seg = range.begin().contiguous_segment();
 1627|       |            auto end_seg = range.end().contiguous_segment();
 1628|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1629|       |                             detail::to_address(end_seg.end()))) {
 1630|       |                auto& str = m_storage.emplace();
 1631|       |                str.reserve(range.end().position() - range.begin().position());
 1632|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1633|       |                m_view = string_view_type{str};
 1634|       |                return;
 1635|       |            }
 1636|       |
 1637|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1638|       |                                                            end_seg.data());
 1639|       |            m_storage.reset();
 1640|       |        }
 1641|       |        else {
 1642|       |            auto& str = m_storage.emplace();
 1643|       |            if constexpr (ranges::sized_range<Range>) {
 1644|       |                str.reserve(range.size());
 1645|       |            }
 1646|       |            if constexpr (ranges::common_range<Range>) {
 1647|       |                std::copy(ranges::begin(range), ranges::end(range),
 1648|       |                          std::back_inserter(str));
 1649|       |            }
 1650|       |            else {
 1651|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1652|       |                     ++it) {
 1653|       |                    str.push_back(*it);
 1654|       |                }
 1655|       |            }
 1656|       |            m_view = string_view_type{str};
 1657|       |        }
 1658|   883k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  62.1k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  62.1k|        {
  662|  62.1k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   161k|        : m_fptr([](storage fn,
  743|   161k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   161k|              cvref<T> obj = *get<T>(fn);
  745|   161k|              if constexpr (std::is_void_v<R>) {
  746|   161k|                  obj(static_cast<decltype(args)>(args)...);
  747|   161k|              }
  748|   161k|              else {
  749|   161k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   161k|              }
  751|   161k|          }),
  752|   161k|          m_storage(std::addressof(f))
  753|   161k|    {
  754|   161k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   161k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   161k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   161k|              else {
  749|   161k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   161k|              }
  751|   161k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   161k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   161k|        else if constexpr (std::is_object_v<T>) {
  688|   161k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   161k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4174|   161k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   161k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   161k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|   161k|            },
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3653|   780k|    {
 3654|   780k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   780k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 780k]
  |  |  ------------------
  ------------------
 3655|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3656|      0|                classic_with_thsep_tag{}};
 3657|      0|        }
 3658|       |
 3659|   780k|        return read_source_impl(range);
 3660|   780k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   161k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   161k|        {
  662|   161k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6181|   273k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|   273k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|   273k|            auto rd = make_reader<T, char_type>();
 6195|   273k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   273k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 273k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|   273k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 273k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|   273k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|   273k|                return impl(rd, range, value);
 6202|   273k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   273k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|   273k|    {
 6113|   273k|        const bool need_skipped_width =
 6114|   273k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 273k]
  |  Branch (6114:33): [True: 0, False: 273k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   273k|        auto it = rng.begin();
 6118|   273k|        std::ptrdiff_t prefix_width = 0;
 6119|   273k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 273k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   273k|        else {
 6127|   273k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   273k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   273k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   273k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   273k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.88k, False: 268k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.88k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.88k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.88k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.88k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.88k|    }                                                  \
  |  |  |  | 3667|   273k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   268k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   268k|            std::tie(it, prefix_width) = prefix_result;
 6129|   268k|        }
 6130|   268k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   268k|        std::ptrdiff_t value_width = 0;
 6134|   268k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 268k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   268k|        else {
 6150|   268k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   268k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   268k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   268k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 17.3k, False: 251k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  17.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  17.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  17.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  17.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  17.3k|    }                                                  \
  |  | 3667|   268k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   268k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|   251k|                                             specs, value, loc));
 6152|       |
 6153|   251k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 251k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|   251k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|   251k|        std::ptrdiff_t postfix_width = 0;
 6162|   251k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 247k, False: 3.91k]
  ------------------
 6163|   247k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   247k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   247k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   247k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   247k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 247k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   247k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   247k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   247k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|   247k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|   247k|                                 value_width));
 6167|   247k|            std::tie(it, postfix_width) = postfix_result;
 6168|   247k|        }
 6169|       |
 6170|   251k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|   251k|                                                 value_width, postfix_width);
 6172|   251k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 251k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|   251k|        return it;
 6177|   251k|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3679|   667k|    {
 3680|   667k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   667k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   667k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3681|       |
 3682|   667k|        const std::ptrdiff_t sign_len =
 3683|   667k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3683:13): [True: 166k, False: 500k]
  ------------------
 3684|       |
 3685|   667k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3668|   667k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   667k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   667k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   667k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 13.1k, False: 653k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  13.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  13.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  13.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  13.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  13.1k|    }                                                  \
  |  |  |  | 3667|   667k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   653k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3686|   653k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3687|   667k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4158|   268k|    {
 4159|   268k|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|   268k|#if !SCN_DISABLE_LOCALE
 4162|   268k|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 77.0k, False: 191k]
  ------------------
 4163|  77.0k|            return read_impl<Range>(
 4164|  77.0k|                range, rd,
 4165|  77.0k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  77.0k|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|  77.0k|                },
 4168|  77.0k|                value, loc);
 4169|  77.0k|        }
 4170|   191k|#endif
 4171|       |
 4172|   191k|        return read_impl<Range>(
 4173|   191k|            range, rd,
 4174|   191k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   191k|                return r.read_source(SCN_FWD(args)...);
 4176|   191k|            },
 4177|   191k|            value);
 4178|   268k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4194|   373k|    {
 4195|   373k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|   373k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   373k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 21.0k, False: 352k]
  |  |  ------------------
  ------------------
 4197|  21.0k|            return unexpected(r.error());
 4198|  21.0k|        }
 4199|       |
 4200|   352k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   352k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   352k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   352k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   352k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.46k, False: 351k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.46k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.46k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.46k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.46k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.46k|    }                                                  \
  |  |  |  | 3667|   352k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   351k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|   351k|        return ranges::next(range.begin(), n);
 4202|   352k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  77.0k|        : m_fptr([](storage fn,
  743|  77.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  77.0k|              cvref<T> obj = *get<T>(fn);
  745|  77.0k|              if constexpr (std::is_void_v<R>) {
  746|  77.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  77.0k|              }
  748|  77.0k|              else {
  749|  77.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  77.0k|              }
  751|  77.0k|          }),
  752|  77.0k|          m_storage(std::addressof(f))
  753|  77.0k|    {
  754|  77.0k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  77.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  77.0k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  77.0k|              else {
  749|  77.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  77.0k|              }
  751|  77.0k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  77.0k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  77.0k|        else if constexpr (std::is_object_v<T>) {
  688|  77.0k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  77.0k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4165|  77.0k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  77.0k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  77.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|  77.0k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  77.0k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  77.0k|        {
  662|  77.0k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   191k|        : m_fptr([](storage fn,
  743|   191k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   191k|              cvref<T> obj = *get<T>(fn);
  745|   191k|              if constexpr (std::is_void_v<R>) {
  746|   191k|                  obj(static_cast<decltype(args)>(args)...);
  747|   191k|              }
  748|   191k|              else {
  749|   191k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   191k|              }
  751|   191k|          }),
  752|   191k|          m_storage(std::addressof(f))
  753|   191k|    {
  754|   191k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   191k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   191k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   191k|              else {
  749|   191k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   191k|              }
  751|   191k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   191k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   191k|        else if constexpr (std::is_object_v<T>) {
  688|   191k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   191k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4174|   191k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   191k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   191k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|   191k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   191k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   191k|        {
  662|   191k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4158|   229k|    {
 4159|   229k|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|   229k|#if !SCN_DISABLE_LOCALE
 4162|   229k|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 64.4k, False: 164k]
  ------------------
 4163|  64.4k|            return read_impl<Range>(
 4164|  64.4k|                range, rd,
 4165|  64.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  64.4k|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|  64.4k|                },
 4168|  64.4k|                value, loc);
 4169|  64.4k|        }
 4170|   164k|#endif
 4171|       |
 4172|   164k|        return read_impl<Range>(
 4173|   164k|            range, rd,
 4174|   164k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   164k|                return r.read_source(SCN_FWD(args)...);
 4176|   164k|            },
 4177|   164k|            value);
 4178|   229k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4194|   326k|    {
 4195|   326k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|   326k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   326k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.8k, False: 314k]
  |  |  ------------------
  ------------------
 4197|  11.8k|            return unexpected(r.error());
 4198|  11.8k|        }
 4199|       |
 4200|   314k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   314k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   314k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   314k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   314k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 11.7k, False: 302k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  11.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  11.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  11.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  11.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  11.7k|    }                                                  \
  |  |  |  | 3667|   314k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   302k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|   302k|        return ranges::next(range.begin(), n);
 4202|   314k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  64.4k|        : m_fptr([](storage fn,
  743|  64.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  64.4k|              cvref<T> obj = *get<T>(fn);
  745|  64.4k|              if constexpr (std::is_void_v<R>) {
  746|  64.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  64.4k|              }
  748|  64.4k|              else {
  749|  64.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  64.4k|              }
  751|  64.4k|          }),
  752|  64.4k|          m_storage(std::addressof(f))
  753|  64.4k|    {
  754|  64.4k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  64.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  64.4k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  64.4k|              else {
  749|  64.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  64.4k|              }
  751|  64.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  64.4k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  64.4k|        else if constexpr (std::is_object_v<T>) {
  688|  64.4k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  64.4k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4165|  64.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  64.4k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  64.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|  64.4k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  64.4k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  64.4k|        {
  662|  64.4k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   164k|        : m_fptr([](storage fn,
  743|   164k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   164k|              cvref<T> obj = *get<T>(fn);
  745|   164k|              if constexpr (std::is_void_v<R>) {
  746|   164k|                  obj(static_cast<decltype(args)>(args)...);
  747|   164k|              }
  748|   164k|              else {
  749|   164k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   164k|              }
  751|   164k|          }),
  752|   164k|          m_storage(std::addressof(f))
  753|   164k|    {
  754|   164k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   164k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   164k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   164k|              else {
  749|   164k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   164k|              }
  751|   164k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   164k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   164k|        else if constexpr (std::is_object_v<T>) {
  688|   164k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   164k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4174|   164k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   164k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   164k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|   164k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   164k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   164k|        {
  662|   164k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6181|   276k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|   276k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|   276k|            auto rd = make_reader<T, char_type>();
 6195|   276k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   276k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 276k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|   276k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 276k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|   276k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|   276k|                return impl(rd, range, value);
 6202|   276k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   276k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|   276k|    {
 6113|   276k|        const bool need_skipped_width =
 6114|   276k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 276k]
  |  Branch (6114:33): [True: 0, False: 276k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   276k|        auto it = rng.begin();
 6118|   276k|        std::ptrdiff_t prefix_width = 0;
 6119|   276k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 276k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   276k|        else {
 6127|   276k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   276k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   276k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   276k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   276k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.18k, False: 271k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  5.18k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  5.18k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  5.18k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  5.18k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  5.18k|    }                                                  \
  |  |  |  | 3667|   276k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   271k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   271k|            std::tie(it, prefix_width) = prefix_result;
 6129|   271k|        }
 6130|   271k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   271k|        std::ptrdiff_t value_width = 0;
 6134|   271k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 271k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   271k|        else {
 6150|   271k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   271k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   271k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   271k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 17.0k, False: 254k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  17.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  17.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  17.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  17.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  17.0k|    }                                                  \
  |  | 3667|   271k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   271k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|   254k|                                             specs, value, loc));
 6152|       |
 6153|   254k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 254k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|   254k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|   254k|        std::ptrdiff_t postfix_width = 0;
 6162|   254k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 249k, False: 4.16k]
  ------------------
 6163|   249k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   249k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   249k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   249k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   249k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 249k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   249k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   249k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   249k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|   249k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|   249k|                                 value_width));
 6167|   249k|            std::tie(it, postfix_width) = postfix_result;
 6168|   249k|        }
 6169|       |
 6170|   254k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|   254k|                                                 value_width, postfix_width);
 6172|   254k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 254k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|   254k|        return it;
 6177|   254k|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3679|   673k|    {
 3680|   673k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   673k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   673k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3681|       |
 3682|   673k|        const std::ptrdiff_t sign_len =
 3683|   673k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3683:13): [True: 169k, False: 503k]
  ------------------
 3684|       |
 3685|   673k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3668|   673k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   673k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   673k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   673k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 11.4k, False: 661k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  11.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  11.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  11.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  11.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  11.4k|    }                                                  \
  |  |  |  | 3667|   673k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   661k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3686|   661k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3687|   673k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4158|   271k|    {
 4159|   271k|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|   271k|#if !SCN_DISABLE_LOCALE
 4162|   271k|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 78.1k, False: 193k]
  ------------------
 4163|  78.1k|            return read_impl<Range>(
 4164|  78.1k|                range, rd,
 4165|  78.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  78.1k|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|  78.1k|                },
 4168|  78.1k|                value, loc);
 4169|  78.1k|        }
 4170|   193k|#endif
 4171|       |
 4172|   193k|        return read_impl<Range>(
 4173|   193k|            range, rd,
 4174|   193k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   193k|                return r.read_source(SCN_FWD(args)...);
 4176|   193k|            },
 4177|   193k|            value);
 4178|   271k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4194|   377k|    {
 4195|   377k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|   377k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   377k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 21.6k, False: 355k]
  |  |  ------------------
  ------------------
 4197|  21.6k|            return unexpected(r.error());
 4198|  21.6k|        }
 4199|       |
 4200|   355k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   355k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   355k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   355k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   355k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 407, False: 355k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    407|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    407|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    407|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    407|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    407|    }                                                  \
  |  |  |  | 3667|   355k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   355k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|   355k|        return ranges::next(range.begin(), n);
 4202|   355k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  78.1k|        : m_fptr([](storage fn,
  743|  78.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  78.1k|              cvref<T> obj = *get<T>(fn);
  745|  78.1k|              if constexpr (std::is_void_v<R>) {
  746|  78.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  78.1k|              }
  748|  78.1k|              else {
  749|  78.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  78.1k|              }
  751|  78.1k|          }),
  752|  78.1k|          m_storage(std::addressof(f))
  753|  78.1k|    {
  754|  78.1k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  78.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  78.1k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  78.1k|              else {
  749|  78.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  78.1k|              }
  751|  78.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  78.1k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  78.1k|        else if constexpr (std::is_object_v<T>) {
  688|  78.1k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  78.1k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4165|  78.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  78.1k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  78.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|  78.1k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  78.1k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  78.1k|        {
  662|  78.1k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   193k|        : m_fptr([](storage fn,
  743|   193k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   193k|              cvref<T> obj = *get<T>(fn);
  745|   193k|              if constexpr (std::is_void_v<R>) {
  746|   193k|                  obj(static_cast<decltype(args)>(args)...);
  747|   193k|              }
  748|   193k|              else {
  749|   193k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   193k|              }
  751|   193k|          }),
  752|   193k|          m_storage(std::addressof(f))
  753|   193k|    {
  754|   193k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   193k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   193k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   193k|              else {
  749|   193k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   193k|              }
  751|   193k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   193k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   193k|        else if constexpr (std::is_object_v<T>) {
  688|   193k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   193k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4174|   193k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   193k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   193k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|   193k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   193k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   193k|        {
  662|   193k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4158|   231k|    {
 4159|   231k|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|   231k|#if !SCN_DISABLE_LOCALE
 4162|   231k|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 65.4k, False: 166k]
  ------------------
 4163|  65.4k|            return read_impl<Range>(
 4164|  65.4k|                range, rd,
 4165|  65.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  65.4k|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|  65.4k|                },
 4168|  65.4k|                value, loc);
 4169|  65.4k|        }
 4170|   166k|#endif
 4171|       |
 4172|   166k|        return read_impl<Range>(
 4173|   166k|            range, rd,
 4174|   166k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   166k|                return r.read_source(SCN_FWD(args)...);
 4176|   166k|            },
 4177|   166k|            value);
 4178|   231k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4194|   329k|    {
 4195|   329k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|   329k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   329k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.1k, False: 317k]
  |  |  ------------------
  ------------------
 4197|  12.1k|            return unexpected(r.error());
 4198|  12.1k|        }
 4199|       |
 4200|   317k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   317k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   317k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   317k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   317k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 11.0k, False: 306k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  11.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  11.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  11.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  11.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  11.0k|    }                                                  \
  |  |  |  | 3667|   317k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   306k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|   306k|        return ranges::next(range.begin(), n);
 4202|   317k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  65.4k|        : m_fptr([](storage fn,
  743|  65.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  65.4k|              cvref<T> obj = *get<T>(fn);
  745|  65.4k|              if constexpr (std::is_void_v<R>) {
  746|  65.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  65.4k|              }
  748|  65.4k|              else {
  749|  65.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  65.4k|              }
  751|  65.4k|          }),
  752|  65.4k|          m_storage(std::addressof(f))
  753|  65.4k|    {
  754|  65.4k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  65.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  65.4k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  65.4k|              else {
  749|  65.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  65.4k|              }
  751|  65.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  65.4k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  65.4k|        else if constexpr (std::is_object_v<T>) {
  688|  65.4k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  65.4k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4165|  65.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  65.4k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  65.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|  65.4k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  65.4k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  65.4k|        {
  662|  65.4k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   166k|        : m_fptr([](storage fn,
  743|   166k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   166k|              cvref<T> obj = *get<T>(fn);
  745|   166k|              if constexpr (std::is_void_v<R>) {
  746|   166k|                  obj(static_cast<decltype(args)>(args)...);
  747|   166k|              }
  748|   166k|              else {
  749|   166k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   166k|              }
  751|   166k|          }),
  752|   166k|          m_storage(std::addressof(f))
  753|   166k|    {
  754|   166k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   166k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   166k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   166k|              else {
  749|   166k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   166k|              }
  751|   166k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   166k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   166k|        else if constexpr (std::is_object_v<T>) {
  688|   166k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   166k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4174|   166k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   166k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   166k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|   166k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   166k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   166k|        {
  662|   166k|        }
_ZN3scn2v34impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1038|  1.12M|{
 1039|       |    if constexpr (ranges::contiguous_range<Range> &&
 1040|       |                  ranges::sized_range<Range>) {
 1041|       |        return r;
 1042|       |    }
 1043|       |    else if constexpr (std::is_same_v<
 1044|       |                           ranges::const_iterator_t<Range>,
 1045|       |                           typename detail::basic_scan_buffer<
 1046|  1.12M|                               detail::char_t<Range>>::forward_iterator>) {
 1047|       |        if constexpr (ranges::common_range<Range>) {
 1048|       |            auto seg = r.begin().contiguous_segment();
 1049|       |            auto dist =
 1050|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|       |            return seg.substr(0, std::min(seg.size(), dist));
 1052|       |        }
 1053|  1.12M|        else {
 1054|  1.12M|            return r.begin().contiguous_segment();
 1055|  1.12M|        }
 1056|       |    }
 1057|       |    else {
 1058|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1059|       |    }
 1060|  1.12M|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2048|   993k|{
 2049|   993k|    auto it = range.begin();
 2050|  1.85M|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 1.84M, False: 14.9k]
  ------------------
 2051|  1.84M|        const auto val =
 2052|  1.84M|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|  1.84M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  1.84M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.83M, False: 11.5k]
  |  |  ------------------
  ------------------
 2054|  1.83M|            const auto cp = detail::decode_code_point_exhaustive(
 2055|  1.83M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|  1.83M|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 978k, False: 853k]
  ------------------
 2057|   978k|                return it;
 2058|   978k|            }
 2059|  1.83M|        }
 2060|   865k|        it = val.iterator;
 2061|   865k|    }
 2062|       |
 2063|  14.9k|    return it;
 2064|   993k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1886|  1.84M|{
 1887|  1.84M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  1.84M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.84M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1888|  1.84M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1889|       |
 1890|  1.84M|    auto it = range.begin();
 1891|  1.84M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1892|       |
 1893|  1.84M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  1.84M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.5k, False: 1.83M]
  |  |  ------------------
  ------------------
 1894|  11.5k|        ++it;
 1895|  11.5k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1896|  11.5k|        return {it, {}};
 1897|  11.5k|    }
 1898|       |
 1899|  1.83M|    if (len == 1) {
  ------------------
  |  Branch (1899:9): [True: 1.81M, False: 18.5k]
  ------------------
 1900|  1.81M|        ++it;
 1901|  1.81M|        return {it, string_type(1, *range.begin())};
 1902|  1.81M|    }
 1903|       |
 1904|  18.5k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1905|  18.5k|    return {it, string_type{range.begin(), it}};
 1906|  1.83M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1154|  11.5k|{
 1155|  11.5k|    auto it = input.begin();
 1156|  96.6k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 95.3k, False: 1.36k]
  ------------------
 1157|  95.3k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 10.1k, False: 85.1k]
  ------------------
 1158|  10.1k|            break;
 1159|  10.1k|        }
 1160|  95.3k|    }
 1161|  11.5k|    return it;
 1162|  11.5k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  18.5k|    {
  283|  18.5k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  18.5k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  18.5k|    {
  252|  18.5k|        constexpr iter_difference_t<I> zero{0};
  253|  18.5k|        iter_difference_t<I> counter{0};
  254|       |
  255|  56.1k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 38.5k, False: 17.6k]
  |  Branch (255:30): [True: 37.5k, False: 965]
  ------------------
  256|  37.5k|            ++i;
  257|  37.5k|            ++counter;
  258|  37.5k|        }
  259|       |
  260|  18.5k|        return counter;
  261|  18.5k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1877|  1.84M|    {
 1878|  1.84M|        return !codepoint.empty();
 1879|  1.84M|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2069|   993k|{
 2070|   993k|    return read_until_code_point(range, std::not_fn(pred));
 2071|   993k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2939|  1.12M|{
 2940|  1.12M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 1.12M, False: 0]
  ------------------
 2941|  1.12M|        auto it = read_while_classic_space(range);
 2942|  1.12M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|  1.12M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.9k, False: 1.11M]
  |  |  ------------------
  ------------------
 2944|  14.9k|            return unexpected(e);
 2945|  14.9k|        }
 2946|       |
 2947|  1.11M|        return it;
 2948|  1.12M|    }
 2949|       |
 2950|      0|    return read_while_classic_space(range);
 2951|  1.12M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2104|  1.12M|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|       |        auto buf = make_contiguous_buffer(range);
 2109|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|       |        return ranges::next(range.begin(),
 2111|       |                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|  1.12M|    else {
 2114|  1.12M|        auto it = range.begin();
 2115|       |
 2116|  1.12M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|  1.12M|            auto seg = get_contiguous_beginning(range);
 2118|  1.12M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|  1.12M|                seg_it != seg.end()) {
  ------------------
  |  Branch (2119:17): [True: 133k, False: 993k]
  ------------------
 2120|   133k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|   133k|            }
 2122|   993k|            ranges::advance(it, seg.size());
 2123|   993k|        }
 2124|       |
 2125|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  1.12M|            return detail::is_cp_space(cp);
 2127|  1.12M|        });
 2128|  1.12M|    }
 2129|  1.12M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   993k|        : m_fptr([](storage fn,
  743|   993k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   993k|              cvref<T> obj = *get<T>(fn);
  745|   993k|              if constexpr (std::is_void_v<R>) {
  746|   993k|                  obj(static_cast<decltype(args)>(args)...);
  747|   993k|              }
  748|   993k|              else {
  749|   993k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   993k|              }
  751|   993k|          }),
  752|   993k|          m_storage(std::addressof(f))
  753|   993k|    {
  754|   993k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  1.83M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.83M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.83M|              else {
  749|  1.83M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.83M|              }
  751|  1.83M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  1.83M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.83M|        else if constexpr (std::is_object_v<T>) {
  688|  1.83M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.83M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2125|  1.83M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  1.83M|            return detail::is_cp_space(cp);
 2127|  1.83M|        });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   993k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   993k|        {
  662|   993k|        }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|   550k|{
  981|       |    if constexpr (ranges::contiguous_range<Range> &&
  982|       |                  ranges::sized_range<Range>) {
  983|       |        return true;
  984|       |    }
  985|       |    else if constexpr (std::is_same_v<
  986|       |                           ranges::const_iterator_t<Range>,
  987|       |                           typename detail::basic_scan_buffer<
  988|   550k|                               detail::char_t<Range>>::forward_iterator>) {
  989|   550k|        auto beg = r.begin();
  990|   550k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 550k, False: 0]
  ------------------
  991|   550k|            return false;
  992|   550k|        }
  993|       |        if constexpr (ranges::common_range<Range>) {
  994|       |            return beg.contiguous_segment().end() ==
  995|       |                   ranges::end(r).contiguous_segment().end();
  996|       |        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|       |    }
 1005|       |    else {
 1006|       |        return false;
 1007|       |    }
 1008|   550k|}
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|  3.83M|    {
  763|  3.83M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  3.83M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  3.83M|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1844|  1.44M|{
 1845|  1.44M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  1.44M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.44M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1846|       |
 1847|       |    if constexpr (ranges::sized_range<Range>) {
 1848|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1849|       |        if (sz < count) {
 1850|       |            return unexpected(eof_error::eof);
 1851|       |        }
 1852|       |
 1853|       |        return ranges::next(range.begin(), count);
 1854|       |    }
 1855|  1.44M|    else {
 1856|  1.44M|        auto it = range.begin();
 1857|  1.44M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1857:13): [True: 862k, False: 578k]
  ------------------
 1858|   862k|            return ranges::next(it, count);
 1859|   862k|        }
 1860|       |
 1861|  2.22M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1861:36): [True: 1.69M, False: 523k]
  ------------------
 1862|  1.69M|            if (it == range.end()) {
  ------------------
  |  Branch (1862:17): [True: 54.3k, False: 1.64M]
  ------------------
 1863|  54.3k|                return unexpected(eof_error::eof);
 1864|  54.3k|            }
 1865|  1.69M|        }
 1866|       |
 1867|   523k|        return it;
 1868|   578k|    }
 1869|  1.44M|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1094|  1.44M|{
 1095|       |    if constexpr (ranges::sized_range<Range>) {
 1096|       |        return r.size();
 1097|       |    }
 1098|       |    else if constexpr (std::is_same_v<
 1099|       |                           ranges::const_iterator_t<Range>,
 1100|       |                           typename detail::basic_scan_buffer<
 1101|  1.44M|                               detail::char_t<Range>>::forward_iterator>) {
 1102|       |        if constexpr (ranges::common_range<Range>) {
 1103|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|       |        }
 1105|  1.44M|        else {
 1106|  1.44M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1106:17): [True: 1.44M, False: 0]
  ------------------
 1107|  1.44M|                return static_cast<size_t>(
 1108|  1.44M|                    r.begin().parent()->chars_available() -
 1109|  1.44M|                    r.begin().position());
 1110|  1.44M|            }
 1111|      0|            return r.begin().contiguous_segment().size();
 1112|  1.44M|        }
 1113|       |    }
 1114|       |    else {
 1115|       |        return 0;
 1116|       |    }
 1117|  1.44M|}
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  1.27M|        : m_fptr([](storage fn,
  743|  1.27M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.27M|              cvref<T> obj = *get<T>(fn);
  745|  1.27M|              if constexpr (std::is_void_v<R>) {
  746|  1.27M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.27M|              }
  748|  1.27M|              else {
  749|  1.27M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.27M|              }
  751|  1.27M|          }),
  752|  1.27M|          m_storage(std::addressof(f))
  753|  1.27M|    {
  754|  1.27M|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEwE_clESK_w:
  743|  1.91M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.91M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.91M|              else {
  749|  1.91M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.91M|              }
  751|  1.91M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  1.91M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.91M|        else if constexpr (std::is_object_v<T>) {
  688|  1.91M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.91M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  1.27M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.27M|        {
  662|  1.27M|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6025|   404k|    {
 6026|   404k|        const bool need_skipped_width =
 6027|   404k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 0, False: 404k]
  |  Branch (6027:33): [True: 0, False: 404k]
  ------------------
 6028|   404k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|   404k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 0, False: 404k]
  ------------------
 6032|   404k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 0, False: 404k]
  ------------------
 6033|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6034|      0|                             need_skipped_width);
 6035|      0|        }
 6036|   404k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 404k, False: 0]
  |  Branch (6036:56): [True: 404k, False: 0]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|   404k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 0, False: 404k]
  ------------------
 6040|      0|                auto max_width_view = take_width(rng, specs.precision);
 6041|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|      0|                                  .transform_error(make_eof_scan_error));
 6043|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|      0|            }
 6045|   806k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|   404k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   404k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   404k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   404k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.71k, False: 402k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.71k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.71k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.71k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.71k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.71k|    }                                                  \
  |  |  |  | 3667|   404k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   402k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|   806k|                            make_eof_scan_error));
 6047|       |
 6048|   806k|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 0, False: 402k]
  ------------------
 6049|      0|                return result_type{
 6050|      0|                    it,
 6051|      0|                    calculate_text_width(make_contiguous_buffer(
 6052|      0|                                             ranges::subrange{rng.begin(), it})
 6053|      0|                                             .view())};
 6054|      0|            }
 6055|   402k|            return result_type{it, 0};
 6056|   806k|        }
 6057|       |
 6058|      0|        return result_type{rng.begin(), 0};
 6059|   404k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1963|   941k|{
 1964|   941k|    return read_until_code_unit(range, std::not_fn(pred));
 1965|   941k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1944|   941k|{
 1945|       |    if constexpr (ranges::common_range<Range>) {
 1946|       |        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|   941k|    else {
 1949|   941k|        auto first = range.begin();
 1950|  1.42M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1950:16): [True: 1.42M, False: 3.11k]
  ------------------
 1951|  1.42M|            if (pred(*first)) {
  ------------------
  |  Branch (1951:17): [True: 938k, False: 488k]
  ------------------
 1952|   938k|                return first;
 1953|   938k|            }
 1954|  1.42M|        }
 1955|  3.11k|        return first;
 1956|   941k|    }
 1957|   941k|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   655k|    {
  108|   655k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   655k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   655k|    {
   94|   655k|        iter_difference_t<I> counter{0};
   95|  1.73M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 1.08M, False: 655k]
  ------------------
   96|  1.08M|            ++i;
   97|  1.08M|            ++counter;
   98|  1.08M|        }
   99|   655k|        return counter;
  100|   655k|    }
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1767|   193k|    {
 1768|   193k|        auto stdloc = loc.get<std::locale>();
 1769|   193k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1770|   193k|        grouping = numpunct.grouping();
 1771|   193k|        thousands_sep =
 1772|   193k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1772:13): [True: 0, False: 193k]
  ------------------
 1773|   193k|        decimal_point = numpunct.decimal_point();
 1774|   193k|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1704|   193k|{
 1705|   193k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1705:9): [True: 193k, False: 0]
  ------------------
 1706|   193k|        return std::use_facet<Facet>(stdloc);
 1707|   193k|    }
 1708|      0|    stdloc = std::locale(stdloc, new Facet{});
 1709|      0|    return std::use_facet<Facet>(stdloc);
 1710|   193k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1833|  1.27M|{
 1834|  1.27M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.27M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.01k, False: 1.26M]
  |  |  ------------------
  ------------------
 1835|  2.01k|        return unexpected(e);
 1836|  2.01k|    }
 1837|       |
 1838|  1.26M|    return ranges::next(range.begin());
 1839|  1.27M|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  1.96M|{
  950|  1.96M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.96M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.66k, False: 1.96M]
  |  |  ------------------
  ------------------
  951|  5.66k|        return eof_error::eof;
  952|  5.66k|    }
  953|  1.96M|    return eof_error::good;
  954|  1.96M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  2.90M|{
  944|  2.90M|    return is_range_eof(r.begin(), r.end());
  945|  2.90M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  2.90M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  2.90M|    {
  937|  2.90M|        return begin == end;
  938|  2.90M|    }
  939|  2.90M|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|  1.26M|    {
  296|  1.26M|        ++x;
  297|  1.26M|        return x;
  298|  1.26M|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3129|   558k|{
 3130|   558k|    auto r = read_one_of_code_unit(range, "+-");
 3131|   558k|    if (!r) {
  ------------------
  |  Branch (3131:9): [True: 553k, False: 4.86k]
  ------------------
 3132|   553k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3132:13): [True: 553k, False: 70]
  ------------------
 3133|   553k|            return std::pair{range.begin(), sign_type::default_sign};
 3134|   553k|        }
 3135|     70|        return unexpected(eof_error::eof);
 3136|   553k|    }
 3137|       |
 3138|  4.86k|    auto& it = *r;
 3139|  4.86k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3139:9): [True: 3.91k, False: 949]
  ------------------
 3140|  3.91k|        return std::pair{it, sign_type::minus_sign};
 3141|  3.91k|    }
 3142|    949|    return std::pair{it, sign_type::plus_sign};
 3143|  4.86k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2260|   887k|{
 2261|   887k|    auto it = read_code_unit(range);
 2262|   887k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   887k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.09k, False: 886k]
  |  |  ------------------
  ------------------
 2263|  1.09k|        return unexpected(make_eof_parse_error(it.error()));
 2264|  1.09k|    }
 2265|       |
 2266|  1.77M|    for (auto ch : str) {
  ------------------
  |  Branch (2266:18): [True: 1.77M, False: 870k]
  ------------------
 2267|  1.77M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2267:13): [True: 15.9k, False: 1.75M]
  ------------------
 2268|  15.9k|            return *it;
 2269|  15.9k|        }
 2270|  1.77M|    }
 2271|       |
 2272|   870k|    return unexpected(parse_error::error);
 2273|   886k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2219|  1.44M|{
 2220|  1.44M|    using char_type = detail::char_t<Range>;
 2221|       |
 2222|       |    if constexpr (ranges::contiguous_range<Range> &&
 2223|       |                  std::is_same_v<char_type, char>) {
 2224|       |        if (range.size() < str.size()) {
 2225|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2226|       |        }
 2227|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2228|       |            return unexpected(parse_error::error);
 2229|       |        }
 2230|       |        return ranges::next(range.begin(), str.size());
 2231|       |    }
 2232|  1.44M|    else {
 2233|  1.44M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|  1.44M|            if (ch < 'A' || ch > 'Z') {
 2235|  1.44M|                return ch;
 2236|  1.44M|            }
 2237|  1.44M|            return static_cast<char_type>(ch +
 2238|  1.44M|                                          static_cast<char_type>('a' - 'A'));
 2239|  1.44M|        };
 2240|       |
 2241|  1.44M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|  1.44M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.44M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.44M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.44M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 54.3k, False: 1.38M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  54.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  54.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  54.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  54.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  54.3k|    }                                                  \
  |  |  |  | 3667|  1.44M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.38M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2242|  1.38M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2243|  1.38M|                        .transform_error(make_eof_parse_error));
 2244|       |
 2245|  1.38M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  1.38M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.38M, False: 758]
  |  |  ------------------
  ------------------
 2246|  1.38M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2247|  1.38M|                    return ascii_tolower(a) ==
 2248|  1.38M|                           static_cast<detail::char_t<Range>>(b);
 2249|  1.38M|                }))) {
 2250|  1.38M|            return unexpected(parse_error::error);
 2251|  1.38M|        }
 2252|       |
 2253|    758|        return it;
 2254|  1.38M|    }
 2255|  1.44M|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlwE_clEw:
 2233|  1.61M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|  1.61M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2234:17): [True: 1.26M, False: 348k]
  |  Branch (2234:29): [True: 337k, False: 10.9k]
  ------------------
 2235|  1.60M|                return ch;
 2236|  1.60M|            }
 2237|  10.9k|            return static_cast<char_type>(ch +
 2238|  10.9k|                                          static_cast<char_type>('a' - 'A'));
 2239|  1.61M|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2134|   382k|{
 2135|   382k|    auto it = read_code_unit(range);
 2136|   382k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   382k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 919, False: 382k]
  |  |  ------------------
  ------------------
 2137|    919|        return unexpected(make_eof_parse_error(it.error()));
 2138|    919|    }
 2139|       |
 2140|   382k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   382k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 379k, False: 2.18k]
  |  |  ------------------
  ------------------
 2141|   382k|                     static_cast<detail::char_t<Range>>(ch))) {
 2142|   379k|        return unexpected(parse_error::error);
 2143|   379k|    }
 2144|       |
 2145|  2.18k|    return *it;
 2146|   382k|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1983|   941k|{
 1984|   941k|    auto it = read_while_code_unit(range, pred);
 1985|   941k|    if (it == range.begin()) {
  ------------------
  |  Branch (1985:9): [True: 546k, False: 394k]
  ------------------
 1986|   546k|        return unexpected(parse_error::error);
 1987|   546k|    }
 1988|   394k|    return it;
 1989|   941k|}
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1608|   379k|    {
 1609|   379k|        using value_t = ranges::range_value_t<Range>;
 1610|       |
 1611|       |        if constexpr (ranges::borrowed_range<Range> &&
 1612|       |                      ranges::contiguous_range<Range> &&
 1613|       |                      ranges::sized_range<Range>) {
 1614|       |            m_storage.reset();
 1615|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1616|       |        }
 1617|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1618|       |                                          std::basic_string<CharT>>) {
 1619|       |            m_storage.emplace(SCN_FWD(range));
 1620|       |            m_view = string_view_type{*m_storage};
 1621|       |        }
 1622|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1623|       |                                          typename detail::basic_scan_buffer<
 1624|       |                                              value_t>::forward_iterator> &&
 1625|   379k|                           ranges::common_range<Range>) {
 1626|   379k|            auto beg_seg = range.begin().contiguous_segment();
 1627|   379k|            auto end_seg = range.end().contiguous_segment();
 1628|   379k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|   379k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.4k, False: 366k]
  |  |  ------------------
  ------------------
 1629|   379k|                             detail::to_address(end_seg.end()))) {
 1630|  13.4k|                auto& str = m_storage.emplace();
 1631|  13.4k|                str.reserve(range.end().position() - range.begin().position());
 1632|  13.4k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1633|  13.4k|                m_view = string_view_type{str};
 1634|  13.4k|                return;
 1635|  13.4k|            }
 1636|       |
 1637|   366k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1638|   366k|                                                            end_seg.data());
 1639|   366k|            m_storage.reset();
 1640|       |        }
 1641|       |        else {
 1642|       |            auto& str = m_storage.emplace();
 1643|       |            if constexpr (ranges::sized_range<Range>) {
 1644|       |                str.reserve(range.size());
 1645|       |            }
 1646|       |            if constexpr (ranges::common_range<Range>) {
 1647|       |                std::copy(ranges::begin(range), ranges::end(range),
 1648|       |                          std::back_inserter(str));
 1649|       |            }
 1650|       |            else {
 1651|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1652|       |                     ++it) {
 1653|       |                    str.push_back(*it);
 1654|       |                }
 1655|       |            }
 1656|       |            m_view = string_view_type{str};
 1657|       |        }
 1658|   379k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1569|  3.36M|    {
 1570|  3.36M|        return m_view;
 1571|  3.36M|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1559|  2.18M|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6067|   270k|    {
 6068|   270k|        const bool need_skipped_width =
 6069|   270k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6069:13): [True: 0, False: 270k]
  |  Branch (6069:33): [True: 0, False: 270k]
  ------------------
 6070|   270k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6071|       |
 6072|   270k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6072:13): [True: 0, False: 270k]
  ------------------
 6073|   270k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6073:13): [True: 0, False: 270k]
  ------------------
 6074|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6074:17): [True: 0, False: 0]
  ------------------
 6075|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6075:17): [True: 0, False: 0]
  ------------------
 6076|      0|                return result_type{rng.begin(), 0};
 6077|      0|            }
 6078|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6079|      0|                             specs.fill, need_skipped_width);
 6080|      0|        }
 6081|   270k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6081:13): [True: 270k, False: 0]
  ------------------
 6082|   270k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6082:13): [True: 0, False: 270k]
  ------------------
 6083|   270k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6083:15): [True: 0, False: 0]
  |  Branch (6083:35): [True: 0, False: 0]
  ------------------
 6084|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6084:15): [True: 0, False: 0]
  ------------------
 6085|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6085:15): [True: 0, False: 0]
  ------------------
 6086|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                const auto initial_width =
 6088|      0|                    specs.precision - prefix_width - value_width;
 6089|      0|                auto max_width_view = take_width(rng, initial_width);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6093|      0|            }
 6094|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|      0|                            make_eof_scan_error));
 6096|       |
 6097|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|      0|            return result_type{it, 0};
 6105|      0|        }
 6106|   270k|        return result_type{rng.begin(), 0};
 6107|   270k|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1844|  1.44M|{
 1845|  1.44M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  1.44M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.44M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1846|       |
 1847|  1.44M|    if constexpr (ranges::sized_range<Range>) {
 1848|  1.44M|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1849|  1.44M|        if (sz < count) {
  ------------------
  |  Branch (1849:13): [True: 54.5k, False: 1.38M]
  ------------------
 1850|  54.5k|            return unexpected(eof_error::eof);
 1851|  54.5k|        }
 1852|       |
 1853|  1.38M|        return ranges::next(range.begin(), count);
 1854|       |    }
 1855|       |    else {
 1856|       |        auto it = range.begin();
 1857|       |        if (guaranteed_minimum_size(range) >= count) {
 1858|       |            return ranges::next(it, count);
 1859|       |        }
 1860|       |
 1861|       |        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1862|       |            if (it == range.end()) {
 1863|       |                return unexpected(eof_error::eof);
 1864|       |            }
 1865|       |        }
 1866|       |
 1867|       |        return it;
 1868|       |    }
 1869|  1.44M|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1886|  1.62M|{
 1887|  1.62M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  1.62M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.62M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1888|  1.62M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1889|       |
 1890|  1.62M|    auto it = range.begin();
 1891|  1.62M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1892|       |
 1893|  1.62M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  1.62M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.62M]
  |  |  ------------------
  ------------------
 1894|      0|        ++it;
 1895|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1896|      0|        return {it, {}};
 1897|      0|    }
 1898|       |
 1899|  1.62M|    if (len == 1) {
  ------------------
  |  Branch (1899:9): [True: 1.62M, False: 0]
  ------------------
 1900|  1.62M|        ++it;
 1901|  1.62M|        return {it, string_type(1, *range.begin())};
 1902|  1.62M|    }
 1903|       |
 1904|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1905|      0|    return {it, string_type{range.begin(), it}};
 1906|  1.62M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|  3.06M|{
  944|  3.06M|    return is_range_eof(r.begin(), r.end());
  945|  3.06M|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|  3.06M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  3.06M|    {
  937|  3.06M|        return begin == end;
  938|  3.06M|    }
  939|  3.06M|}
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|   347k|    {
  190|   347k|        i = std::move(bound);
  191|   347k|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1877|  1.62M|    {
 1878|  1.62M|        return !codepoint.empty();
 1879|  1.62M|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|  1.44M|{
  950|  1.44M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.44M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.16k, False: 1.44M]
  |  |  ------------------
  ------------------
  951|  4.16k|        return eof_error::eof;
  952|  4.16k|    }
  953|  1.44M|    return eof_error::good;
  954|  1.44M|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1833|   748k|{
 1834|   748k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   748k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 516, False: 748k]
  |  |  ------------------
  ------------------
 1835|    516|        return unexpected(e);
 1836|    516|    }
 1837|       |
 1838|   748k|    return ranges::next(range.begin());
 1839|   748k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   748k|    {
  296|   748k|        ++x;
  297|   748k|        return x;
  298|   748k|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3129|   551k|{
 3130|   551k|    auto r = read_one_of_code_unit(range, "+-");
 3131|   551k|    if (!r) {
  ------------------
  |  Branch (3131:9): [True: 548k, False: 2.97k]
  ------------------
 3132|   548k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3132:13): [True: 548k, False: 24]
  ------------------
 3133|   548k|            return std::pair{range.begin(), sign_type::default_sign};
 3134|   548k|        }
 3135|     24|        return unexpected(eof_error::eof);
 3136|   548k|    }
 3137|       |
 3138|  2.97k|    auto& it = *r;
 3139|  2.97k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3139:9): [True: 2.19k, False: 783]
  ------------------
 3140|  2.19k|        return std::pair{it, sign_type::minus_sign};
 3141|  2.19k|    }
 3142|    783|    return std::pair{it, sign_type::plus_sign};
 3143|  2.97k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2260|   623k|{
 2261|   623k|    auto it = read_code_unit(range);
 2262|   623k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   623k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 250, False: 622k]
  |  |  ------------------
  ------------------
 2263|    250|        return unexpected(make_eof_parse_error(it.error()));
 2264|    250|    }
 2265|       |
 2266|  1.24M|    for (auto ch : str) {
  ------------------
  |  Branch (2266:18): [True: 1.24M, False: 616k]
  ------------------
 2267|  1.24M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2267:13): [True: 6.79k, False: 1.23M]
  ------------------
 2268|  6.79k|            return *it;
 2269|  6.79k|        }
 2270|  1.24M|    }
 2271|       |
 2272|   616k|    return unexpected(parse_error::error);
 2273|   622k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2219|  1.44M|{
 2220|  1.44M|    using char_type = detail::char_t<Range>;
 2221|       |
 2222|       |    if constexpr (ranges::contiguous_range<Range> &&
 2223|       |                  std::is_same_v<char_type, char>) {
 2224|       |        if (range.size() < str.size()) {
 2225|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2226|       |        }
 2227|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2228|       |            return unexpected(parse_error::error);
 2229|       |        }
 2230|       |        return ranges::next(range.begin(), str.size());
 2231|       |    }
 2232|  1.44M|    else {
 2233|  1.44M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|  1.44M|            if (ch < 'A' || ch > 'Z') {
 2235|  1.44M|                return ch;
 2236|  1.44M|            }
 2237|  1.44M|            return static_cast<char_type>(ch +
 2238|  1.44M|                                          static_cast<char_type>('a' - 'A'));
 2239|  1.44M|        };
 2240|       |
 2241|  1.44M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|  1.44M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.44M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.44M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.44M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 54.5k, False: 1.38M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  54.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  54.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  54.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  54.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  54.5k|    }                                                  \
  |  |  |  | 3667|  1.44M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.38M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2242|  1.38M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2243|  1.38M|                        .transform_error(make_eof_parse_error));
 2244|       |
 2245|  1.38M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  1.38M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.38M, False: 758]
  |  |  ------------------
  ------------------
 2246|  1.38M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2247|  1.38M|                    return ascii_tolower(a) ==
 2248|  1.38M|                           static_cast<detail::char_t<Range>>(b);
 2249|  1.38M|                }))) {
 2250|  1.38M|            return unexpected(parse_error::error);
 2251|  1.38M|        }
 2252|       |
 2253|    758|        return it;
 2254|  1.38M|    }
 2255|  1.44M|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2233|  1.61M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|  1.61M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2234:17): [True: 1.26M, False: 349k]
  |  Branch (2234:29): [True: 338k, False: 11.0k]
  ------------------
 2235|  1.60M|                return ch;
 2236|  1.60M|            }
 2237|  11.0k|            return static_cast<char_type>(ch +
 2238|  11.0k|                                          static_cast<char_type>('a' - 'A'));
 2239|  1.61M|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2134|   125k|{
 2135|   125k|    auto it = read_code_unit(range);
 2136|   125k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   125k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 266, False: 125k]
  |  |  ------------------
  ------------------
 2137|    266|        return unexpected(make_eof_parse_error(it.error()));
 2138|    266|    }
 2139|       |
 2140|   125k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   125k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 124k, False: 874]
  |  |  ------------------
  ------------------
 2141|   125k|                     static_cast<detail::char_t<Range>>(ch))) {
 2142|   124k|        return unexpected(parse_error::error);
 2143|   124k|    }
 2144|       |
 2145|    874|    return *it;
 2146|   125k|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1963|   329k|{
 1964|   329k|    return read_until_code_unit(range, std::not_fn(pred));
 1965|   329k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1944|   329k|{
 1945|   329k|    if constexpr (ranges::common_range<Range>) {
 1946|   329k|        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|       |    else {
 1949|       |        auto first = range.begin();
 1950|       |        for (; first != range.end(); ++first) {
 1951|       |            if (pred(*first)) {
 1952|       |                return first;
 1953|       |            }
 1954|       |        }
 1955|       |        return first;
 1956|       |    }
 1957|   329k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2939|   550k|{
 2940|   550k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 550k, False: 0]
  ------------------
 2941|   550k|        auto it = read_while_classic_space(range);
 2942|   550k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|   550k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   550k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.21k, False: 547k]
  |  |  ------------------
  ------------------
 2944|  3.21k|            return unexpected(e);
 2945|  3.21k|        }
 2946|       |
 2947|   547k|        return it;
 2948|   550k|    }
 2949|       |
 2950|      0|    return read_while_classic_space(range);
 2951|   550k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2104|   550k|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|       |        auto buf = make_contiguous_buffer(range);
 2109|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|       |        return ranges::next(range.begin(),
 2111|       |                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|   550k|    else {
 2114|   550k|        auto it = range.begin();
 2115|       |
 2116|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|       |            auto seg = get_contiguous_beginning(range);
 2118|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|       |                seg_it != seg.end()) {
 2120|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|       |            }
 2122|       |            ranges::advance(it, seg.size());
 2123|       |        }
 2124|       |
 2125|   550k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|   550k|            return detail::is_cp_space(cp);
 2127|   550k|        });
 2128|   550k|    }
 2129|   550k|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2069|   550k|{
 2070|   550k|    return read_until_code_point(range, std::not_fn(pred));
 2071|   550k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2048|   922k|{
 2049|   922k|    auto it = range.begin();
 2050|  1.85M|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 1.62M, False: 233k]
  ------------------
 2051|  1.62M|        const auto val =
 2052|  1.62M|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|  1.62M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  1.62M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.62M, False: 0]
  |  |  ------------------
  ------------------
 2054|  1.62M|            const auto cp = detail::decode_code_point_exhaustive(
 2055|  1.62M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|  1.62M|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 689k, False: 934k]
  ------------------
 2057|   689k|                return it;
 2058|   689k|            }
 2059|  1.62M|        }
 2060|   934k|        it = val.iterator;
 2061|   934k|    }
 2062|       |
 2063|   233k|    return it;
 2064|   922k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|   550k|        : m_fptr([](storage fn,
  743|   550k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   550k|              cvref<T> obj = *get<T>(fn);
  745|   550k|              if constexpr (std::is_void_v<R>) {
  746|   550k|                  obj(static_cast<decltype(args)>(args)...);
  747|   550k|              }
  748|   550k|              else {
  749|   550k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   550k|              }
  751|   550k|          }),
  752|   550k|          m_storage(std::addressof(f))
  753|   550k|    {
  754|   550k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|   939k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   939k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   939k|              else {
  749|   939k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   939k|              }
  751|   939k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   939k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   939k|        else if constexpr (std::is_object_v<T>) {
  688|   939k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   939k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2125|   939k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|   939k|            return detail::is_cp_space(cp);
 2127|   939k|        });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|   550k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   550k|        {
  662|   550k|        }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  1.24M|    {
  304|  1.24M|        ranges::advance(x, n);
  305|  1.24M|        return x;
  306|  1.24M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  1.24M|    {
  268|  1.24M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.24M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  1.24M|    {
  181|  3.96M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 2.72M, False: 1.24M]
  ------------------
  182|  2.72M|            ++i;
  183|  2.72M|        }
  184|  1.24M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6181|   127k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|   127k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|   127k|            auto rd = make_reader<T, char_type>();
 6195|   127k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 127k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|   127k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 127k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|   127k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|   127k|                return impl(rd, range, value);
 6202|   127k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   127k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3028|   809k|    {
 3029|   809k|        reader_error_handler eh{};
 3030|   809k|        get_derived().check_specs_impl(specs, eh);
 3031|   809k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|   809k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 809k]
  |  |  ------------------
  ------------------
 3032|      0|            return {scan_error::invalid_format_string, eh.m_msg};
 3033|      0|        }
 3034|   809k|        return {};
 3035|   809k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3039|   809k|    {
 3040|   809k|        return static_cast<Derived&>(*this);
 3041|   809k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4133|   809k|    {
 4134|   809k|        detail::check_float_type_specs(specs, eh);
 4135|   809k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|   127k|    {
 6113|   127k|        const bool need_skipped_width =
 6114|   127k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 127k]
  |  Branch (6114:33): [True: 0, False: 127k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   127k|        auto it = rng.begin();
 6118|   127k|        std::ptrdiff_t prefix_width = 0;
 6119|   127k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 127k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   127k|        else {
 6127|   127k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   127k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   127k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   127k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 850, False: 126k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    850|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    850|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    850|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    850|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    850|    }                                                  \
  |  |  |  | 3667|   127k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   126k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   126k|            std::tie(it, prefix_width) = prefix_result;
 6129|   126k|        }
 6130|   126k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   126k|        std::ptrdiff_t value_width = 0;
 6134|   126k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 126k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   126k|        else {
 6150|   126k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   126k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   126k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 43.6k, False: 82.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  43.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  43.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  43.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  43.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  43.6k|    }                                                  \
  |  | 3667|   126k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   126k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  82.5k|                                             specs, value, loc));
 6152|       |
 6153|  82.5k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 82.5k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  82.5k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  82.5k|        std::ptrdiff_t postfix_width = 0;
 6162|  82.5k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 82.2k, False: 368]
  ------------------
 6163|  82.2k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  82.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  82.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  82.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  82.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 82.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  82.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  82.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  82.2k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  82.2k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  82.2k|                                 value_width));
 6167|  82.2k|            std::tie(it, postfix_width) = postfix_result;
 6168|  82.2k|        }
 6169|       |
 6170|  82.5k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  82.5k|                                                 value_width, postfix_width);
 6172|  82.5k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 82.5k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  82.5k|        return it;
 6177|  82.5k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3023|  1.64M|    {
 3024|  1.64M|        return true;
 3025|  1.64M|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4205|   804k|    {
 4206|   804k|        unsigned options{};
 4207|   804k|        if (specs.localized) {
  ------------------
  |  Branch (4207:13): [True: 193k, False: 611k]
  ------------------
 4208|   193k|            options |= float_reader_base::allow_thsep;
 4209|   193k|        }
 4210|       |
 4211|   804k|        SCN_GCC_COMPAT_PUSH
 4212|   804k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4213|       |
 4214|   804k|        switch (specs.type) {
 4215|   159k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4215:13): [True: 159k, False: 644k]
  ------------------
 4216|   159k|                return options | float_reader_base::allow_fixed;
 4217|       |
 4218|  54.3k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4218:13): [True: 54.3k, False: 750k]
  ------------------
 4219|  54.3k|                return options | float_reader_base::allow_scientific;
 4220|       |
 4221|   210k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4221:13): [True: 210k, False: 593k]
  ------------------
 4222|   210k|                return options | float_reader_base::allow_hex;
 4223|       |
 4224|   186k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4224:13): [True: 186k, False: 618k]
  ------------------
 4225|   186k|                return options | float_reader_base::allow_scientific |
 4226|   186k|                       float_reader_base::allow_fixed;
 4227|       |
 4228|   193k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4228:13): [True: 193k, False: 611k]
  ------------------
 4229|   193k|                return options | float_reader_base::allow_scientific |
 4230|   193k|                       float_reader_base::allow_fixed |
 4231|   193k|                       float_reader_base::allow_hex;
 4232|       |
 4233|      0|            default:
  ------------------
  |  Branch (4233:13): [True: 0, False: 804k]
  ------------------
 4234|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4235|   804k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4236|   804k|        }
 4237|       |
 4238|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4239|   804k|    }
_ZN3scn2v34impl12float_readerIwEC2Ej:
 3648|   804k|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2Ev:
 1758|  1.09M|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIwEC2Ev:
 1519|  2.18M|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIwE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3679|   256k|    {
 3680|   256k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   256k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   256k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3681|       |
 3682|   256k|        const std::ptrdiff_t sign_len =
 3683|   256k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3683:13): [True: 1.15k, False: 255k]
  ------------------
 3684|       |
 3685|   256k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3668|   256k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   256k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   256k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   256k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 32.6k, False: 224k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  32.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  32.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  32.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  32.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  32.6k|    }                                                  \
  |  |  |  | 3667|   256k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   224k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3686|   224k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3687|   256k|    }
_ZN3scn2v34impl12float_readerIwE17handle_separatorsEv:
 4045|   848k|    {
 4046|   848k|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4046:13): [True: 848k, False: 0]
  ------------------
 4047|   848k|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4047:13): [True: 848k, False: 0]
  ------------------
 4048|   848k|            return;
 4049|   848k|        }
 4050|       |
 4051|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4052|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4052:13): [True: 0, False: 0]
  ------------------
 4053|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4053:27): [True: 0, False: 0]
  ------------------
 4054|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4054:21): [True: 0, False: 0]
  ------------------
 4055|      0|                    ch = CharT{'.'};
 4056|      0|                }
 4057|      0|            }
 4058|      0|        }
 4059|       |
 4060|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4060:13): [True: 0, False: 0]
  ------------------
 4061|      0|            return;
 4062|      0|        }
 4063|       |
 4064|      0|        auto first =
 4065|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4066|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4066:13): [True: 0, False: 0]
  ------------------
 4067|      0|            return;
 4068|      0|        }
 4069|       |
 4070|      0|        m_thsep_indices.push_back(
 4071|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4072|       |
 4073|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4073:31): [True: 0, False: 0]
  ------------------
 4074|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4074:17): [True: 0, False: 0]
  ------------------
 4075|      0|                *first++ = std::move(*it);
 4076|      0|            }
 4077|      0|            else {
 4078|      0|                m_thsep_indices.push_back(
 4079|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4080|      0|            }
 4081|      0|        }
 4082|       |
 4083|      0|        str.erase(first, str.end());
 4084|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1574|   919k|    {
 1575|   919k|        return m_storage.has_value();
 1576|   919k|    }
_ZNR3scn2v34impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1579|   538k|    {
 1580|   538k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|   538k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   538k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1581|   538k|        return *m_storage;
 1582|   538k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4158|   126k|    {
 4159|   126k|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|   126k|#if !SCN_DISABLE_LOCALE
 4162|   126k|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 28.3k, False: 97.9k]
  ------------------
 4163|  28.3k|            return read_impl<Range>(
 4164|  28.3k|                range, rd,
 4165|  28.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  28.3k|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|  28.3k|                },
 4168|  28.3k|                value, loc);
 4169|  28.3k|        }
 4170|  97.9k|#endif
 4171|       |
 4172|  97.9k|        return read_impl<Range>(
 4173|  97.9k|            range, rd,
 4174|  97.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|  97.9k|                return r.read_source(SCN_FWD(args)...);
 4176|  97.9k|            },
 4177|  97.9k|            value);
 4178|   126k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4194|   168k|    {
 4195|   168k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|   168k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   168k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 55.0k, False: 113k]
  |  |  ------------------
  ------------------
 4197|  55.0k|            return unexpected(r.error());
 4198|  55.0k|        }
 4199|       |
 4200|   113k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   113k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   113k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   113k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.69k, False: 111k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.69k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.69k|    }                                                  \
  |  |  |  | 3667|   113k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   111k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|   111k|        return ranges::next(range.begin(), n);
 4202|   113k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|   547k|    {
  763|   547k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   547k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   547k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  28.3k|        : m_fptr([](storage fn,
  743|  28.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  28.3k|              cvref<T> obj = *get<T>(fn);
  745|  28.3k|              if constexpr (std::is_void_v<R>) {
  746|  28.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  28.3k|              }
  748|  28.3k|              else {
  749|  28.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  28.3k|              }
  751|  28.3k|          }),
  752|  28.3k|          m_storage(std::addressof(f))
  753|  28.3k|    {
  754|  28.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  28.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  28.3k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  28.3k|              else {
  749|  28.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  28.3k|              }
  751|  28.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  28.3k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  28.3k|        else if constexpr (std::is_object_v<T>) {
  688|  28.3k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  28.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4165|  28.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  28.3k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  28.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|  28.3k|                },
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3667|  96.6k|    {
 3668|  96.6k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3669|  96.6k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|  96.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 96.6k]
  |  |  ------------------
  ------------------
 3670|      0|            m_locale_options.thousands_sep = CharT{0};
 3671|      0|        }
 3672|       |
 3673|  96.6k|        return read_source_impl(range);
 3674|  96.6k|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3693|   547k|    {
 3694|   547k|        SCN_TRY(sign_result,
  ------------------
  |  | 3668|   547k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   547k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   547k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   547k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 547k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   547k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   547k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3695|   547k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3696|   547k|        auto it = sign_result.first;
 3697|   547k|        m_sign = sign_result.second;
 3698|       |
 3699|   547k|        auto digits_begin = it;
 3700|   547k|        auto r = ranges::subrange{it, range.end()};
 3701|       |        if constexpr (ranges::contiguous_range<Range> &&
 3702|       |                      ranges::sized_range<Range>) {
 3703|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3704|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3705|       |                SCN_TRY_ASSIGN(
 3706|       |                    it,
 3707|       |                    do_read_source_impl(
 3708|       |                        r,
 3709|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3710|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3711|       |            }
 3712|       |            else {
 3713|       |                auto cb = [&](const auto& rr)
 3714|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3715|       |                    auto res = read_all(rr);
 3716|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3717|       |                        return unexpected_scan_error(
 3718|       |                            scan_error::invalid_scanned_value,
 3719|       |                            "Invalid float value");
 3720|       |                    }
 3721|       |                    return res;
 3722|       |                };
 3723|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3724|       |            }
 3725|       |        }
 3726|   547k|        else {
 3727|   547k|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3663|   547k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   547k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   547k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 167k, False: 379k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|   167k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|   167k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|   167k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|   167k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|   167k|    }                                                  \
  |  | 3667|   547k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   547k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3728|   379k|                it,
 3729|   379k|                do_read_source_impl(
 3730|   379k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3731|   379k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3732|   379k|        }
 3733|       |
 3734|   547k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   547k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   547k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3735|       |
 3736|   379k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3736:13): [True: 379k, False: 0]
  |  Branch (3736:48): [True: 379k, False: 0]
  ------------------
 3737|   379k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3737:13): [True: 379k, False: 0]
  ------------------
 3738|   379k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3738:13): [True: 379k, False: 0]
  ------------------
 3739|   379k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3740|   379k|        }
 3741|       |
 3742|   379k|        handle_separators();
 3743|       |
 3744|   379k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3744:13): [True: 0, False: 379k]
  ------------------
 3745|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|      0|            if (auto e = check_thsep_grouping(
 3747|      0|                    ranges::subrange{
 3748|      0|                        digits_begin,
 3749|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3750|      0|                    m_thsep_indices, m_locale_options.grouping);
 3751|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3752|      0|                return unexpected(e);
 3753|      0|            }
 3754|      0|        }
 3755|       |
 3756|   379k|        return it;
 3757|   379k|    }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 3988|   547k|    {
 3989|   547k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 3990|   547k|        const bool allowed_nonhex =
 3991|   547k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 3992|   547k|             ~static_cast<unsigned>(allow_hex)) != 0;
 3993|       |
 3994|   547k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (3994:39): [True: 547k, False: 0]
  |  Branch (3994:45): [True: 0, False: 547k]
  ------------------
 3995|      0|            return r.transform_error(map_parse_error_to_scan_error(
 3996|      0|                scan_error::invalid_scanned_value,
 3997|      0|                "Invalid infinite floating-point value"));
 3998|      0|        }
 3999|   547k|        else if (r) {
  ------------------
  |  Branch (3999:18): [True: 0, False: 547k]
  ------------------
 4000|      0|            return *r;
 4001|      0|        }
 4002|       |
 4003|   547k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4003:39): [True: 547k, False: 0]
  |  Branch (4003:45): [True: 0, False: 547k]
  ------------------
 4004|      0|            return unexpected(r.error());
 4005|      0|        }
 4006|   547k|        else if (r) {
  ------------------
  |  Branch (4006:18): [True: 0, False: 547k]
  ------------------
 4007|      0|            return *r;
 4008|      0|        }
 4009|       |
 4010|   547k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4010:13): [True: 346k, False: 200k]
  |  Branch (4010:28): [True: 105k, False: 241k]
  ------------------
 4011|       |            // only hex allowed:
 4012|       |            // prefix "0x" allowed, not required
 4013|   105k|            auto it = range.begin();
 4014|       |
 4015|   105k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4015:22): [True: 228, False: 104k]
  ------------------
 4016|    228|                m_kind = float_kind::hex_with_prefix;
 4017|    228|                it = *r;
 4018|    228|            }
 4019|   104k|            else {
 4020|   104k|                m_kind = float_kind::hex_without_prefix;
 4021|   104k|            }
 4022|       |
 4023|   105k|            return read_hex(ranges::subrange{it, range.end()});
 4024|   105k|        }
 4025|   441k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4025:13): [True: 200k, False: 241k]
  |  Branch (4025:29): [True: 200k, False: 0]
  ------------------
 4026|       |            // only nonhex allowed:
 4027|       |            // no prefix allowed
 4028|   200k|            m_kind = float_kind::generic;
 4029|   200k|            return read_regular_float(range);
 4030|   200k|        }
 4031|       |        // both hex and nonhex allowed:
 4032|       |        // check for "0x" prefix -> hex,
 4033|       |        // regular otherwise
 4034|       |
 4035|   241k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   241k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 530, False: 241k]
  |  |  ------------------
  ------------------
 4036|    530|            m_kind = float_kind::hex_with_prefix;
 4037|    530|            return read_hex(ranges::subrange{*r, range.end()});
 4038|    530|        }
 4039|       |
 4040|   241k|        m_kind = float_kind::generic;
 4041|   241k|        return read_regular(range);
 4042|   241k|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3799|   547k|    {
 3800|   547k|        auto it = range.begin();
 3801|   547k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3801:73): [True: 547k, False: 0]
  ------------------
 3802|   547k|            return unexpected(r.error());
 3803|   547k|        }
 3804|      0|        else {
 3805|      0|            it = *r;
 3806|      0|        }
 3807|       |
 3808|      0|        if (auto r = read_matching_string_classic_nocase(
 3809|      0|                ranges::subrange{it, range.end()}, "inity");
 3810|      0|            !r) {
  ------------------
  |  Branch (3810:13): [True: 0, False: 0]
  ------------------
 3811|      0|            m_kind = float_kind::inf_short;
 3812|      0|            return it;
 3813|      0|        }
 3814|      0|        else {
 3815|      0|            m_kind = float_kind::inf_long;
 3816|      0|            return *r;
 3817|      0|        }
 3818|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3822|   547k|    {
 3823|   547k|        auto it = range.begin();
 3824|   547k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3824:73): [True: 547k, False: 0]
  ------------------
 3825|   547k|            return r.transform_error(map_parse_error_to_scan_error(
 3826|   547k|                scan_error::invalid_scanned_value,
 3827|   547k|                "Invalid floating-point NaN value"));
 3828|   547k|        }
 3829|      0|        else {
 3830|      0|            it = *r;
 3831|      0|        }
 3832|       |
 3833|      0|        if (auto r =
 3834|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3835|      0|            !r) {
  ------------------
  |  Branch (3835:13): [True: 0, False: 0]
  ------------------
 3836|      0|            m_kind = float_kind::nan_simple;
 3837|      0|            return it;
 3838|      0|        }
 3839|      0|        else {
 3840|      0|            it = *r;
 3841|      0|        }
 3842|       |
 3843|      0|        auto payload_beg_it = it;
 3844|      0|        it = read_while_code_unit(
 3845|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3846|      0|                return is_ascii_char(ch) &&
 3847|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3848|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3849|      0|            });
 3850|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3851|       |
 3852|      0|        m_kind = float_kind::nan_with_payload;
 3853|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3853:18): [True: 0, False: 0]
  ------------------
 3854|      0|                                             ')')) {
 3855|      0|            return *r;
 3856|      0|        }
 3857|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3858|      0|                                     "Invalid floating-point NaN payload");
 3859|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3792|   346k|    {
 3793|   346k|        return read_matching_string_classic_nocase(range, "0x");
 3794|   346k|    }
_ZN3scn2v34impl12float_readerIwE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3892|   105k|    {
 3893|   105k|        auto it = range.begin();
 3894|       |
 3895|   105k|        std::ptrdiff_t digits_count = 0;
 3896|   105k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3897|   105k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 25.9k, False: 79.7k]
  |  |  ------------------
  ------------------
 3898|  25.9k|            return r.transform_error(map_parse_error_to_scan_error(
 3899|  25.9k|                scan_error::invalid_scanned_value,
 3900|  25.9k|                "Invalid hexadecimal floating-point value"));
 3901|  25.9k|        }
 3902|  79.7k|        else {
 3903|  79.7k|            digits_count += ranges::distance(it, *r);
 3904|  79.7k|            it = *r;
 3905|  79.7k|        }
 3906|       |
 3907|  79.7k|        m_integral_part_length = digits_count;
 3908|  79.7k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3908:18): [True: 396, False: 79.3k]
  ------------------
 3909|  79.7k|                                             m_locale_options.decimal_point)) {
 3910|    396|            it = *r;
 3911|    396|        }
 3912|       |
 3913|  79.7k|        if (auto r =
  ------------------
  |  Branch (3913:18): [True: 318, False: 79.4k]
  ------------------
 3914|  79.7k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3915|    318|            digits_count += ranges::distance(it, *r);
 3916|    318|            it = *r;
 3917|    318|        }
 3918|       |
 3919|  79.7k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|  79.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 79.7k]
  |  |  ------------------
  ------------------
 3920|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3921|      0|                                         "No significand digits in hexfloat");
 3922|      0|        }
 3923|       |
 3924|  79.7k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3925|       |
 3926|  79.7k|        return it;
 3927|  79.7k|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3777|   185k|    {
 3778|   185k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   185k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 185k]
  |  |  |  Branch (859:45): [True: 0, False: 185k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3779|   185k|                         thsep_allowed)) {
 3780|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3781|      0|                return char_to_int(ch) < 16 ||
 3782|      0|                       ch == m_locale_options.thousands_sep;
 3783|      0|            });
 3784|      0|        }
 3785|       |
 3786|   185k|        return read_while1_code_unit(
 3787|   185k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3788|   185k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|   185k|        : m_fptr([](storage fn,
  743|   185k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   185k|              cvref<T> obj = *get<T>(fn);
  745|   185k|              if constexpr (std::is_void_v<R>) {
  746|   185k|                  obj(static_cast<decltype(args)>(args)...);
  747|   185k|              }
  748|   185k|              else {
  749|   185k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   185k|              }
  751|   185k|          }),
  752|   185k|          m_storage(std::addressof(f))
  753|   185k|    {
  754|   185k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|   287k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   287k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   287k|              else {
  749|   287k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   287k|              }
  751|   287k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|   287k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   287k|        else if constexpr (std::is_object_v<T>) {
  688|   287k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   287k|    }
_ZZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3787|   287k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   185k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   185k|        {
  662|   185k|        }
_ZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3864|   329k|    {
 3865|   329k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3865:18): [True: 11.0k, False: 318k]
  ------------------
 3866|  11.0k|            auto beg_exp_it = range.begin();
 3867|  11.0k|            auto it = *r;
 3868|       |
 3869|  11.0k|            if (auto r_sign =
  ------------------
  |  Branch (3869:22): [True: 11.0k, False: 70]
  ------------------
 3870|  11.0k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3871|  11.0k|                it = r_sign->first;
 3872|  11.0k|            }
 3873|       |
 3874|  11.0k|            if (auto r_exp = read_while1_code_unit(
 3875|  11.0k|                    ranges::subrange{it, range.end()},
 3876|  11.0k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3877|  11.0k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  11.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.11k, False: 9.96k]
  |  |  ------------------
  ------------------
 3878|  1.11k|                it = beg_exp_it;
 3879|  1.11k|            }
 3880|  9.96k|            else {
 3881|  9.96k|                it = *r_exp;
 3882|  9.96k|            }
 3883|       |
 3884|  11.0k|            return it;
 3885|  11.0k|        }
 3886|   318k|        return range.begin();
 3887|   329k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|  11.0k|        : m_fptr([](storage fn,
  743|  11.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  11.0k|              cvref<T> obj = *get<T>(fn);
  745|  11.0k|              if constexpr (std::is_void_v<R>) {
  746|  11.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  11.0k|              }
  748|  11.0k|              else {
  749|  11.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  11.0k|              }
  751|  11.0k|          }),
  752|  11.0k|          m_storage(std::addressof(f))
  753|  11.0k|    {
  754|  11.0k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES15_w:
  743|  37.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  37.3k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  37.3k|              else {
  749|  37.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  37.3k|              }
  751|  37.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  37.3k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  37.3k|        else if constexpr (std::is_object_v<T>) {
  688|  37.3k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  37.3k|    }
_ZZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlwE_clEw:
 3876|  37.3k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|  11.0k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  11.0k|        {
  662|  11.0k|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3932|   441k|    {
 3933|   441k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3934|   441k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3934:35): [True: 361k, False: 79.9k]
  |  Branch (3934:50): [True: 27.1k, False: 334k]
  ------------------
 3935|       |
 3936|   441k|        auto it = ranges::begin(range);
 3937|   441k|        std::ptrdiff_t digits_count = 0;
 3938|       |
 3939|   441k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3940|   441k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   441k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 138k, False: 303k]
  |  |  ------------------
  ------------------
 3941|   138k|            return r.transform_error(
 3942|   138k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3943|   138k|                                              "Invalid floating-point value"));
 3944|   138k|        }
 3945|   303k|        else {
 3946|   303k|            digits_count += ranges::distance(it, *r);
 3947|   303k|            it = *r;
 3948|   303k|        }
 3949|       |
 3950|   303k|        m_integral_part_length = digits_count;
 3951|   303k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3951:18): [True: 1.78k, False: 301k]
  ------------------
 3952|   303k|                                             m_locale_options.decimal_point)) {
 3953|  1.78k|            it = *r;
 3954|  1.78k|        }
 3955|       |
 3956|   303k|        if (auto r =
  ------------------
  |  Branch (3956:18): [True: 1.41k, False: 301k]
  ------------------
 3957|   303k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3958|  1.41k|            digits_count += ranges::distance(it, *r);
 3959|  1.41k|            it = *r;
 3960|  1.41k|        }
 3961|       |
 3962|   303k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   303k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 303k]
  |  |  ------------------
  ------------------
 3963|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3964|      0|                                         "No significand digits in float");
 3965|      0|        }
 3966|       |
 3967|   303k|        auto beg_exp_it = it;
 3968|   303k|        if (allowed_exp) {
  ------------------
  |  Branch (3968:13): [True: 249k, False: 53.6k]
  ------------------
 3969|   249k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3970|   249k|        }
 3971|   303k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3971:13): [True: 4.06k, False: 299k]
  |  Branch (3971:29): [True: 3.26k, False: 804]
  ------------------
 3972|  3.26k|            return unexpected_scan_error(
 3973|  3.26k|                scan_error::invalid_scanned_value,
 3974|  3.26k|                "No exponent given to scientific float");
 3975|  3.26k|        }
 3976|       |
 3977|   299k|        m_kind =
 3978|   299k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3978:13): [True: 290k, False: 9.84k]
  ------------------
 3979|       |
 3980|   299k|        return it;
 3981|   303k|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3762|   744k|    {
 3763|   744k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   744k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 744k]
  |  |  |  Branch (859:45): [True: 0, False: 744k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3764|   744k|                         thsep_allowed)) {
 3765|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3766|      0|                return char_to_int(ch) < 10 ||
 3767|      0|                       ch == m_locale_options.thousands_sep;
 3768|      0|            });
 3769|      0|        }
 3770|       |
 3771|   744k|        return read_while1_code_unit(
 3772|   744k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3773|   744k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|   744k|        : m_fptr([](storage fn,
  743|   744k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   744k|              cvref<T> obj = *get<T>(fn);
  745|   744k|              if constexpr (std::is_void_v<R>) {
  746|   744k|                  obj(static_cast<decltype(args)>(args)...);
  747|   744k|              }
  748|   744k|              else {
  749|   744k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   744k|              }
  751|   744k|          }),
  752|   744k|          m_storage(std::addressof(f))
  753|   744k|    {
  754|   744k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|  1.10M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.10M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.10M|              else {
  749|  1.10M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.10M|              }
  751|  1.10M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|  1.10M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.10M|        else if constexpr (std::is_object_v<T>) {
  688|  1.10M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.10M|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3772|  1.10M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   744k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   744k|        {
  662|   744k|        }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSG_:
 1564|   379k|    {
 1565|   379k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   379k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1566|   379k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  28.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  28.3k|        {
  662|  28.3k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  97.9k|        : m_fptr([](storage fn,
  743|  97.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  97.9k|              cvref<T> obj = *get<T>(fn);
  745|  97.9k|              if constexpr (std::is_void_v<R>) {
  746|  97.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  97.9k|              }
  748|  97.9k|              else {
  749|  97.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  97.9k|              }
  751|  97.9k|          }),
  752|  97.9k|          m_storage(std::addressof(f))
  753|  97.9k|    {
  754|  97.9k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  97.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  97.9k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  97.9k|              else {
  749|  97.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  97.9k|              }
  751|  97.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  97.9k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  97.9k|        else if constexpr (std::is_object_v<T>) {
  688|  97.9k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  97.9k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4174|  97.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|  97.9k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  97.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|  97.9k|            },
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3653|   450k|    {
 3654|   450k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   450k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 450k]
  |  |  ------------------
  ------------------
 3655|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3656|      0|                classic_with_thsep_tag{}};
 3657|      0|        }
 3658|       |
 3659|   450k|        return read_source_impl(range);
 3660|   450k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  97.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  97.9k|        {
  662|  97.9k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4158|   126k|    {
 4159|   126k|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|   126k|#if !SCN_DISABLE_LOCALE
 4162|   126k|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 28.3k, False: 97.9k]
  ------------------
 4163|  28.3k|            return read_impl<Range>(
 4164|  28.3k|                range, rd,
 4165|  28.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  28.3k|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|  28.3k|                },
 4168|  28.3k|                value, loc);
 4169|  28.3k|        }
 4170|  97.9k|#endif
 4171|       |
 4172|  97.9k|        return read_impl<Range>(
 4173|  97.9k|            range, rd,
 4174|  97.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|  97.9k|                return r.read_source(SCN_FWD(args)...);
 4176|  97.9k|            },
 4177|  97.9k|            value);
 4178|   126k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4194|   168k|    {
 4195|   168k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|   168k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   168k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 25.8k, False: 143k]
  |  |  ------------------
  ------------------
 4197|  25.8k|            return unexpected(r.error());
 4198|  25.8k|        }
 4199|       |
 4200|   143k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   143k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   143k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   143k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   143k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 30.9k, False: 112k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  30.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  30.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  30.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  30.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  30.9k|    }                                                  \
  |  |  |  | 3667|   143k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   112k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|   112k|        return ranges::next(range.begin(), n);
 4202|   143k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|   547k|    {
  763|   547k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   547k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   547k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  28.3k|        : m_fptr([](storage fn,
  743|  28.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  28.3k|              cvref<T> obj = *get<T>(fn);
  745|  28.3k|              if constexpr (std::is_void_v<R>) {
  746|  28.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  28.3k|              }
  748|  28.3k|              else {
  749|  28.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  28.3k|              }
  751|  28.3k|          }),
  752|  28.3k|          m_storage(std::addressof(f))
  753|  28.3k|    {
  754|  28.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  28.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  28.3k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  28.3k|              else {
  749|  28.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  28.3k|              }
  751|  28.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  28.3k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  28.3k|        else if constexpr (std::is_object_v<T>) {
  688|  28.3k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  28.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4165|  28.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  28.3k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  28.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|  28.3k|                },
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3667|  96.7k|    {
 3668|  96.7k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3669|  96.7k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|  96.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 96.7k]
  |  |  ------------------
  ------------------
 3670|      0|            m_locale_options.thousands_sep = CharT{0};
 3671|      0|        }
 3672|       |
 3673|  96.7k|        return read_source_impl(range);
 3674|  96.7k|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3693|   547k|    {
 3694|   547k|        SCN_TRY(sign_result,
  ------------------
  |  | 3668|   547k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   547k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   547k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   547k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 547k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   547k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   547k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3695|   547k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3696|   547k|        auto it = sign_result.first;
 3697|   547k|        m_sign = sign_result.second;
 3698|       |
 3699|   547k|        auto digits_begin = it;
 3700|   547k|        auto r = ranges::subrange{it, range.end()};
 3701|       |        if constexpr (ranges::contiguous_range<Range> &&
 3702|   547k|                      ranges::sized_range<Range>) {
 3703|   547k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  1.09M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 547k]
  |  |  |  Branch (859:45): [True: 0, False: 547k]
  |  |  |  Branch (859:45): [True: 0, False: 547k]
  |  |  ------------------
  ------------------
 3704|   547k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3705|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|      0|    }                                                  \
  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3706|      0|                    it,
 3707|      0|                    do_read_source_impl(
 3708|      0|                        r,
 3709|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3710|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3711|      0|            }
 3712|   547k|            else {
 3713|   547k|                auto cb = [&](const auto& rr)
 3714|   547k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3715|   547k|                    auto res = read_all(rr);
 3716|   547k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3717|   547k|                        return unexpected_scan_error(
 3718|   547k|                            scan_error::invalid_scanned_value,
 3719|   547k|                            "Invalid float value");
 3720|   547k|                    }
 3721|   547k|                    return res;
 3722|   547k|                };
 3723|   547k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3663|   547k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   547k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   547k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 78.2k, False: 469k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  78.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  78.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  78.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  78.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  78.2k|    }                                                  \
  |  | 3667|   547k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   547k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3724|   469k|            }
 3725|       |        }
 3726|       |        else {
 3727|       |            SCN_TRY_ASSIGN(
 3728|       |                it,
 3729|       |                do_read_source_impl(
 3730|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3731|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3732|       |        }
 3733|       |
 3734|   547k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   547k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   547k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3735|       |
 3736|   469k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3736:13): [True: 469k, False: 0]
  |  Branch (3736:48): [True: 469k, False: 0]
  ------------------
 3737|   469k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3737:13): [True: 469k, False: 0]
  ------------------
 3738|   469k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3738:13): [True: 469k, False: 0]
  ------------------
 3739|   469k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3740|   469k|        }
 3741|       |
 3742|   469k|        handle_separators();
 3743|       |
 3744|   469k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3744:13): [True: 0, False: 469k]
  ------------------
 3745|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|      0|            if (auto e = check_thsep_grouping(
 3747|      0|                    ranges::subrange{
 3748|      0|                        digits_begin,
 3749|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3750|      0|                    m_thsep_indices, m_locale_options.grouping);
 3751|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3752|      0|                return unexpected(e);
 3753|      0|            }
 3754|      0|        }
 3755|       |
 3756|   469k|        return it;
 3757|   469k|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3799|   547k|    {
 3800|   547k|        auto it = range.begin();
 3801|   547k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3801:73): [True: 547k, False: 0]
  ------------------
 3802|   547k|            return unexpected(r.error());
 3803|   547k|        }
 3804|      0|        else {
 3805|      0|            it = *r;
 3806|      0|        }
 3807|       |
 3808|      0|        if (auto r = read_matching_string_classic_nocase(
 3809|      0|                ranges::subrange{it, range.end()}, "inity");
 3810|      0|            !r) {
  ------------------
  |  Branch (3810:13): [True: 0, False: 0]
  ------------------
 3811|      0|            m_kind = float_kind::inf_short;
 3812|      0|            return it;
 3813|      0|        }
 3814|      0|        else {
 3815|      0|            m_kind = float_kind::inf_long;
 3816|      0|            return *r;
 3817|      0|        }
 3818|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3822|   547k|    {
 3823|   547k|        auto it = range.begin();
 3824|   547k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3824:73): [True: 547k, False: 0]
  ------------------
 3825|   547k|            return r.transform_error(map_parse_error_to_scan_error(
 3826|   547k|                scan_error::invalid_scanned_value,
 3827|   547k|                "Invalid floating-point NaN value"));
 3828|   547k|        }
 3829|      0|        else {
 3830|      0|            it = *r;
 3831|      0|        }
 3832|       |
 3833|      0|        if (auto r =
 3834|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3835|      0|            !r) {
  ------------------
  |  Branch (3835:13): [True: 0, False: 0]
  ------------------
 3836|      0|            m_kind = float_kind::nan_simple;
 3837|      0|            return it;
 3838|      0|        }
 3839|      0|        else {
 3840|      0|            it = *r;
 3841|      0|        }
 3842|       |
 3843|      0|        auto payload_beg_it = it;
 3844|      0|        it = read_while_code_unit(
 3845|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3846|      0|                return is_ascii_char(ch) &&
 3847|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3848|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3849|      0|            });
 3850|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3851|       |
 3852|      0|        m_kind = float_kind::nan_with_payload;
 3853|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3853:18): [True: 0, False: 0]
  ------------------
 3854|      0|                                             ')')) {
 3855|      0|            return *r;
 3856|      0|        }
 3857|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3858|      0|                                     "Invalid floating-point NaN payload");
 3859|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3792|   347k|    {
 3793|   347k|        return read_matching_string_classic_nocase(range, "0x");
 3794|   347k|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1983|   329k|{
 1984|   329k|    auto it = read_while_code_unit(range, pred);
 1985|   329k|    if (it == range.begin()) {
  ------------------
  |  Branch (1985:9): [True: 200k, False: 129k]
  ------------------
 1986|   200k|        return unexpected(parse_error::error);
 1987|   200k|    }
 1988|   129k|    return it;
 1989|   329k|}
_ZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3864|  71.7k|    {
 3865|  71.7k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3865:18): [True: 3.82k, False: 67.9k]
  ------------------
 3866|  3.82k|            auto beg_exp_it = range.begin();
 3867|  3.82k|            auto it = *r;
 3868|       |
 3869|  3.82k|            if (auto r_sign =
  ------------------
  |  Branch (3869:22): [True: 3.79k, False: 24]
  ------------------
 3870|  3.82k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3871|  3.79k|                it = r_sign->first;
 3872|  3.79k|            }
 3873|       |
 3874|  3.82k|            if (auto r_exp = read_while1_code_unit(
 3875|  3.82k|                    ranges::subrange{it, range.end()},
 3876|  3.82k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3877|  3.82k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  3.82k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 436, False: 3.38k]
  |  |  ------------------
  ------------------
 3878|    436|                it = beg_exp_it;
 3879|    436|            }
 3880|  3.38k|            else {
 3881|  3.38k|                it = *r_exp;
 3882|  3.38k|            }
 3883|       |
 3884|  3.82k|            return it;
 3885|  3.82k|        }
 3886|  67.9k|        return range.begin();
 3887|  71.7k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_:
  742|  3.82k|        : m_fptr([](storage fn,
  743|  3.82k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.82k|              cvref<T> obj = *get<T>(fn);
  745|  3.82k|              if constexpr (std::is_void_v<R>) {
  746|  3.82k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.82k|              }
  748|  3.82k|              else {
  749|  3.82k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.82k|              }
  751|  3.82k|          }),
  752|  3.82k|          m_storage(std::addressof(f))
  753|  3.82k|    {
  754|  3.82k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEwE_clES12_w:
  743|  12.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  12.7k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  12.7k|              else {
  749|  12.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  12.7k|              }
  751|  12.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  12.7k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  12.7k|        else if constexpr (std::is_object_v<T>) {
  688|  12.7k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  12.7k|    }
_ZZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlwE_clEw:
 3876|  12.7k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|  3.82k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  3.82k|        {
  662|  3.82k|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3932|   200k|    {
 3933|   200k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3934|   200k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3934:35): [True: 120k, False: 79.9k]
  |  Branch (3934:50): [True: 27.1k, False: 93.1k]
  ------------------
 3935|       |
 3936|   200k|        auto it = ranges::begin(range);
 3937|   200k|        std::ptrdiff_t digits_count = 0;
 3938|       |
 3939|   200k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3940|   200k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   200k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 74.8k, False: 125k]
  |  |  ------------------
  ------------------
 3941|  74.8k|            return r.transform_error(
 3942|  74.8k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3943|  74.8k|                                              "Invalid floating-point value"));
 3944|  74.8k|        }
 3945|   125k|        else {
 3946|   125k|            digits_count += ranges::distance(it, *r);
 3947|   125k|            it = *r;
 3948|   125k|        }
 3949|       |
 3950|   125k|        m_integral_part_length = digits_count;
 3951|   125k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3951:18): [True: 874, False: 124k]
  ------------------
 3952|   125k|                                             m_locale_options.decimal_point)) {
 3953|    874|            it = *r;
 3954|    874|        }
 3955|       |
 3956|   125k|        if (auto r =
  ------------------
  |  Branch (3956:18): [True: 688, False: 124k]
  ------------------
 3957|   125k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3958|    688|            digits_count += ranges::distance(it, *r);
 3959|    688|            it = *r;
 3960|    688|        }
 3961|       |
 3962|   125k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   125k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 125k]
  |  |  ------------------
  ------------------
 3963|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3964|      0|                                         "No significand digits in float");
 3965|      0|        }
 3966|       |
 3967|   125k|        auto beg_exp_it = it;
 3968|   125k|        if (allowed_exp) {
  ------------------
  |  Branch (3968:13): [True: 71.7k, False: 53.6k]
  ------------------
 3969|  71.7k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3970|  71.7k|        }
 3971|   125k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3971:13): [True: 4.06k, False: 121k]
  |  Branch (3971:29): [True: 3.26k, False: 804]
  ------------------
 3972|  3.26k|            return unexpected_scan_error(
 3973|  3.26k|                scan_error::invalid_scanned_value,
 3974|  3.26k|                "No exponent given to scientific float");
 3975|  3.26k|        }
 3976|       |
 3977|   122k|        m_kind =
 3978|   122k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3978:13): [True: 118k, False: 3.38k]
  ------------------
 3979|       |
 3980|   122k|        return it;
 3981|   125k|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3762|   325k|    {
 3763|   325k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   325k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 325k]
  |  |  |  Branch (859:45): [True: 0, False: 325k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3764|   325k|                         thsep_allowed)) {
 3765|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3766|      0|                return char_to_int(ch) < 10 ||
 3767|      0|                       ch == m_locale_options.thousands_sep;
 3768|      0|            });
 3769|      0|        }
 3770|       |
 3771|   325k|        return read_while1_code_unit(
 3772|   325k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3773|   325k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|   325k|        : m_fptr([](storage fn,
  743|   325k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   325k|              cvref<T> obj = *get<T>(fn);
  745|   325k|              if constexpr (std::is_void_v<R>) {
  746|   325k|                  obj(static_cast<decltype(args)>(args)...);
  747|   325k|              }
  748|   325k|              else {
  749|   325k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   325k|              }
  751|   325k|          }),
  752|   325k|          m_storage(std::addressof(f))
  753|   325k|    {
  754|   325k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES10_w:
  743|   476k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   476k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   476k|              else {
  749|   476k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   476k|              }
  751|   476k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  683|   476k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   476k|        else if constexpr (std::is_object_v<T>) {
  688|   476k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   476k|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3772|   476k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   325k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   325k|        {
  662|   325k|        }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3988|   547k|    {
 3989|   547k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 3990|   547k|        const bool allowed_nonhex =
 3991|   547k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 3992|   547k|             ~static_cast<unsigned>(allow_hex)) != 0;
 3993|       |
 3994|   547k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (3994:39): [True: 547k, False: 0]
  |  Branch (3994:45): [True: 0, False: 547k]
  ------------------
 3995|      0|            return r.transform_error(map_parse_error_to_scan_error(
 3996|      0|                scan_error::invalid_scanned_value,
 3997|      0|                "Invalid infinite floating-point value"));
 3998|      0|        }
 3999|   547k|        else if (r) {
  ------------------
  |  Branch (3999:18): [True: 0, False: 547k]
  ------------------
 4000|      0|            return *r;
 4001|      0|        }
 4002|       |
 4003|   547k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4003:39): [True: 547k, False: 0]
  |  Branch (4003:45): [True: 0, False: 547k]
  ------------------
 4004|      0|            return unexpected(r.error());
 4005|      0|        }
 4006|   547k|        else if (r) {
  ------------------
  |  Branch (4006:18): [True: 0, False: 547k]
  ------------------
 4007|      0|            return *r;
 4008|      0|        }
 4009|       |
 4010|   547k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4010:13): [True: 347k, False: 200k]
  |  Branch (4010:28): [True: 105k, False: 241k]
  ------------------
 4011|       |            // only hex allowed:
 4012|       |            // prefix "0x" allowed, not required
 4013|   105k|            auto it = range.begin();
 4014|       |
 4015|   105k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4015:22): [True: 228, False: 105k]
  ------------------
 4016|    228|                m_kind = float_kind::hex_with_prefix;
 4017|    228|                it = *r;
 4018|    228|            }
 4019|   105k|            else {
 4020|   105k|                m_kind = float_kind::hex_without_prefix;
 4021|   105k|            }
 4022|       |
 4023|   105k|            return read_hex(ranges::subrange{it, range.end()});
 4024|   105k|        }
 4025|   442k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4025:13): [True: 200k, False: 241k]
  |  Branch (4025:29): [True: 200k, False: 0]
  ------------------
 4026|       |            // only nonhex allowed:
 4027|       |            // no prefix allowed
 4028|   200k|            m_kind = float_kind::generic;
 4029|   200k|            return read_regular_float(range);
 4030|   200k|        }
 4031|       |        // both hex and nonhex allowed:
 4032|       |        // check for "0x" prefix -> hex,
 4033|       |        // regular otherwise
 4034|       |
 4035|   241k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   241k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 530, False: 241k]
  |  |  ------------------
  ------------------
 4036|    530|            m_kind = float_kind::hex_with_prefix;
 4037|    530|            return read_hex(ranges::subrange{*r, range.end()});
 4038|    530|        }
 4039|       |
 4040|   241k|        m_kind = float_kind::generic;
 4041|   241k|        return read_regular(range);
 4042|   241k|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3714|   347k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3715|   347k|                    auto res = read_all(rr);
 3716|   347k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|   347k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 157, False: 347k]
  |  |  ------------------
  ------------------
 3717|    157|                        return unexpected_scan_error(
 3718|    157|                            scan_error::invalid_scanned_value,
 3719|    157|                            "Invalid float value");
 3720|    157|                    }
 3721|   347k|                    return res;
 3722|   347k|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1826|   347k|{
 1827|   347k|    return ranges::next(range.begin(), range.end());
 1828|   347k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|   347k|    {
  313|   347k|        ranges::advance(x, bound);
  314|   347k|        return x;
  315|   347k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|   347k|    {
  275|   347k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|   347k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1564|   469k|    {
 1565|   469k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   469k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1566|   469k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1608|   469k|    {
 1609|   469k|        using value_t = ranges::range_value_t<Range>;
 1610|       |
 1611|       |        if constexpr (ranges::borrowed_range<Range> &&
 1612|       |                      ranges::contiguous_range<Range> &&
 1613|   469k|                      ranges::sized_range<Range>) {
 1614|   469k|            m_storage.reset();
 1615|   469k|            m_view = string_view_type{ranges::data(range), range.size()};
 1616|       |        }
 1617|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1618|       |                                          std::basic_string<CharT>>) {
 1619|       |            m_storage.emplace(SCN_FWD(range));
 1620|       |            m_view = string_view_type{*m_storage};
 1621|       |        }
 1622|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1623|       |                                          typename detail::basic_scan_buffer<
 1624|       |                                              value_t>::forward_iterator> &&
 1625|       |                           ranges::common_range<Range>) {
 1626|       |            auto beg_seg = range.begin().contiguous_segment();
 1627|       |            auto end_seg = range.end().contiguous_segment();
 1628|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1629|       |                             detail::to_address(end_seg.end()))) {
 1630|       |                auto& str = m_storage.emplace();
 1631|       |                str.reserve(range.end().position() - range.begin().position());
 1632|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1633|       |                m_view = string_view_type{str};
 1634|       |                return;
 1635|       |            }
 1636|       |
 1637|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1638|       |                                                            end_seg.data());
 1639|       |            m_storage.reset();
 1640|       |        }
 1641|       |        else {
 1642|       |            auto& str = m_storage.emplace();
 1643|       |            if constexpr (ranges::sized_range<Range>) {
 1644|       |                str.reserve(range.size());
 1645|       |            }
 1646|       |            if constexpr (ranges::common_range<Range>) {
 1647|       |                std::copy(ranges::begin(range), ranges::end(range),
 1648|       |                          std::back_inserter(str));
 1649|       |            }
 1650|       |            else {
 1651|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1652|       |                     ++it) {
 1653|       |                    str.push_back(*it);
 1654|       |                }
 1655|       |            }
 1656|       |            m_view = string_view_type{str};
 1657|       |        }
 1658|   469k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  28.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  28.3k|        {
  662|  28.3k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  97.9k|        : m_fptr([](storage fn,
  743|  97.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  97.9k|              cvref<T> obj = *get<T>(fn);
  745|  97.9k|              if constexpr (std::is_void_v<R>) {
  746|  97.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  97.9k|              }
  748|  97.9k|              else {
  749|  97.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  97.9k|              }
  751|  97.9k|          }),
  752|  97.9k|          m_storage(std::addressof(f))
  753|  97.9k|    {
  754|  97.9k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  97.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  97.9k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  97.9k|              else {
  749|  97.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  97.9k|              }
  751|  97.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  97.9k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  97.9k|        else if constexpr (std::is_object_v<T>) {
  688|  97.9k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  97.9k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4174|  97.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|  97.9k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  97.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|  97.9k|            },
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3653|   450k|    {
 3654|   450k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   450k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 450k]
  |  |  ------------------
  ------------------
 3655|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3656|      0|                classic_with_thsep_tag{}};
 3657|      0|        }
 3658|       |
 3659|   450k|        return read_source_impl(range);
 3660|   450k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  97.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  97.9k|        {
  662|  97.9k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6181|   137k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|   137k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|   137k|            auto rd = make_reader<T, char_type>();
 6195|   137k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 137k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|   137k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 137k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|   137k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|   137k|                return impl(rd, range, value);
 6202|   137k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   137k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|   137k|    {
 6113|   137k|        const bool need_skipped_width =
 6114|   137k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 137k]
  |  Branch (6114:33): [True: 0, False: 137k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   137k|        auto it = rng.begin();
 6118|   137k|        std::ptrdiff_t prefix_width = 0;
 6119|   137k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 137k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   137k|        else {
 6127|   137k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   137k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   137k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   137k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 914, False: 136k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    914|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    914|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    914|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    914|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    914|    }                                                  \
  |  |  |  | 3667|   137k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   136k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   136k|            std::tie(it, prefix_width) = prefix_result;
 6129|   136k|        }
 6130|   136k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   136k|        std::ptrdiff_t value_width = 0;
 6134|   136k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 136k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   136k|        else {
 6150|   136k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   136k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   136k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 43.6k, False: 93.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  43.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  43.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  43.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  43.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  43.6k|    }                                                  \
  |  | 3667|   136k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   136k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  93.3k|                                             specs, value, loc));
 6152|       |
 6153|  93.3k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 93.3k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  93.3k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  93.3k|        std::ptrdiff_t postfix_width = 0;
 6162|  93.3k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 92.9k, False: 400]
  ------------------
 6163|  92.9k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  92.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  92.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  92.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  92.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 92.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  92.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  92.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  92.9k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  92.9k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  92.9k|                                 value_width));
 6167|  92.9k|            std::tie(it, postfix_width) = postfix_result;
 6168|  92.9k|        }
 6169|       |
 6170|  93.3k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  93.3k|                                                 value_width, postfix_width);
 6172|  93.3k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 93.3k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  93.3k|        return it;
 6177|  93.3k|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3679|   293k|    {
 3680|   293k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   293k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   293k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3681|       |
 3682|   293k|        const std::ptrdiff_t sign_len =
 3683|   293k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3683:13): [True: 1.20k, False: 292k]
  ------------------
 3684|       |
 3685|   293k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3668|   293k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   293k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   293k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   293k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 31.4k, False: 261k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  31.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  31.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  31.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  31.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  31.4k|    }                                                  \
  |  |  |  | 3667|   293k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   261k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3686|   261k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3687|   293k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4158|   136k|    {
 4159|   136k|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|   136k|#if !SCN_DISABLE_LOCALE
 4162|   136k|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 33.6k, False: 103k]
  ------------------
 4163|  33.6k|            return read_impl<Range>(
 4164|  33.6k|                range, rd,
 4165|  33.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  33.6k|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|  33.6k|                },
 4168|  33.6k|                value, loc);
 4169|  33.6k|        }
 4170|   103k|#endif
 4171|       |
 4172|   103k|        return read_impl<Range>(
 4173|   103k|            range, rd,
 4174|   103k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   103k|                return r.read_source(SCN_FWD(args)...);
 4176|   103k|            },
 4177|   103k|            value);
 4178|   136k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4194|   187k|    {
 4195|   187k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|   187k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 55.8k, False: 131k]
  |  |  ------------------
  ------------------
 4197|  55.8k|            return unexpected(r.error());
 4198|  55.8k|        }
 4199|       |
 4200|   131k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   131k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   131k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   131k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   131k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 844, False: 130k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    844|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    844|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    844|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    844|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    844|    }                                                  \
  |  |  |  | 3667|   131k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   130k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|   130k|        return ranges::next(range.begin(), n);
 4202|   131k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  33.6k|        : m_fptr([](storage fn,
  743|  33.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  33.6k|              cvref<T> obj = *get<T>(fn);
  745|  33.6k|              if constexpr (std::is_void_v<R>) {
  746|  33.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  33.6k|              }
  748|  33.6k|              else {
  749|  33.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  33.6k|              }
  751|  33.6k|          }),
  752|  33.6k|          m_storage(std::addressof(f))
  753|  33.6k|    {
  754|  33.6k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  33.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  33.6k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  33.6k|              else {
  749|  33.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  33.6k|              }
  751|  33.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  33.6k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  33.6k|        else if constexpr (std::is_object_v<T>) {
  688|  33.6k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  33.6k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4165|  33.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  33.6k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  33.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|  33.6k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  33.6k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  33.6k|        {
  662|  33.6k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   103k|        : m_fptr([](storage fn,
  743|   103k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   103k|              cvref<T> obj = *get<T>(fn);
  745|   103k|              if constexpr (std::is_void_v<R>) {
  746|   103k|                  obj(static_cast<decltype(args)>(args)...);
  747|   103k|              }
  748|   103k|              else {
  749|   103k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   103k|              }
  751|   103k|          }),
  752|   103k|          m_storage(std::addressof(f))
  753|   103k|    {
  754|   103k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   103k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   103k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   103k|              else {
  749|   103k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   103k|              }
  751|   103k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   103k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   103k|        else if constexpr (std::is_object_v<T>) {
  688|   103k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   103k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4174|   103k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   103k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|   103k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   103k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   103k|        {
  662|   103k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4158|   137k|    {
 4159|   137k|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|   137k|#if !SCN_DISABLE_LOCALE
 4162|   137k|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 33.7k, False: 103k]
  ------------------
 4163|  33.7k|            return read_impl<Range>(
 4164|  33.7k|                range, rd,
 4165|  33.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  33.7k|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|  33.7k|                },
 4168|  33.7k|                value, loc);
 4169|  33.7k|        }
 4170|   103k|#endif
 4171|       |
 4172|   103k|        return read_impl<Range>(
 4173|   103k|            range, rd,
 4174|   103k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   103k|                return r.read_source(SCN_FWD(args)...);
 4176|   103k|            },
 4177|   103k|            value);
 4178|   137k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4194|   187k|    {
 4195|   187k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|   187k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.0k, False: 161k]
  |  |  ------------------
  ------------------
 4197|  26.0k|            return unexpected(r.error());
 4198|  26.0k|        }
 4199|       |
 4200|   161k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   161k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   161k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   161k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   161k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 30.5k, False: 131k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  30.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  30.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  30.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  30.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  30.5k|    }                                                  \
  |  |  |  | 3667|   161k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   131k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|   131k|        return ranges::next(range.begin(), n);
 4202|   161k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  33.7k|        : m_fptr([](storage fn,
  743|  33.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  33.7k|              cvref<T> obj = *get<T>(fn);
  745|  33.7k|              if constexpr (std::is_void_v<R>) {
  746|  33.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  33.7k|              }
  748|  33.7k|              else {
  749|  33.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  33.7k|              }
  751|  33.7k|          }),
  752|  33.7k|          m_storage(std::addressof(f))
  753|  33.7k|    {
  754|  33.7k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  33.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  33.7k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  33.7k|              else {
  749|  33.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  33.7k|              }
  751|  33.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  33.7k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  33.7k|        else if constexpr (std::is_object_v<T>) {
  688|  33.7k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  33.7k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4165|  33.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  33.7k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  33.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|  33.7k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  33.7k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  33.7k|        {
  662|  33.7k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   103k|        : m_fptr([](storage fn,
  743|   103k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   103k|              cvref<T> obj = *get<T>(fn);
  745|   103k|              if constexpr (std::is_void_v<R>) {
  746|   103k|                  obj(static_cast<decltype(args)>(args)...);
  747|   103k|              }
  748|   103k|              else {
  749|   103k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   103k|              }
  751|   103k|          }),
  752|   103k|          m_storage(std::addressof(f))
  753|   103k|    {
  754|   103k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   103k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   103k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   103k|              else {
  749|   103k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   103k|              }
  751|   103k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   103k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   103k|        else if constexpr (std::is_object_v<T>) {
  688|   103k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   103k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4174|   103k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   103k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|   103k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   103k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   103k|        {
  662|   103k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6181|   139k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|   139k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|   139k|            auto rd = make_reader<T, char_type>();
 6195|   139k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   139k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 139k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|   139k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 139k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|   139k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|   139k|                return impl(rd, range, value);
 6202|   139k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   139k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|   139k|    {
 6113|   139k|        const bool need_skipped_width =
 6114|   139k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 139k]
  |  Branch (6114:33): [True: 0, False: 139k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   139k|        auto it = rng.begin();
 6118|   139k|        std::ptrdiff_t prefix_width = 0;
 6119|   139k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 139k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   139k|        else {
 6127|   139k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   139k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   139k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   139k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   139k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 954, False: 138k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    954|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    954|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    954|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    954|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    954|    }                                                  \
  |  |  |  | 3667|   139k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   138k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   138k|            std::tie(it, prefix_width) = prefix_result;
 6129|   138k|        }
 6130|   138k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   138k|        std::ptrdiff_t value_width = 0;
 6134|   138k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 138k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   138k|        else {
 6150|   138k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   138k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   138k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   138k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 43.5k, False: 95.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  43.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  43.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  43.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  43.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  43.5k|    }                                                  \
  |  | 3667|   138k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   138k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  95.2k|                                             specs, value, loc));
 6152|       |
 6153|  95.2k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 95.2k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  95.2k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  95.2k|        std::ptrdiff_t postfix_width = 0;
 6162|  95.2k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 94.8k, False: 418]
  ------------------
 6163|  94.8k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  94.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  94.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  94.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  94.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 94.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  94.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  94.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  94.8k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  94.8k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  94.8k|                                 value_width));
 6167|  94.8k|            std::tie(it, postfix_width) = postfix_result;
 6168|  94.8k|        }
 6169|       |
 6170|  95.2k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  95.2k|                                                 value_width, postfix_width);
 6172|  95.2k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 95.2k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  95.2k|        return it;
 6177|  95.2k|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3679|   298k|    {
 3680|   298k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   298k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   298k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3681|       |
 3682|   298k|        const std::ptrdiff_t sign_len =
 3683|   298k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3683:13): [True: 1.21k, False: 297k]
  ------------------
 3684|       |
 3685|   298k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3668|   298k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   298k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   298k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   298k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 30.4k, False: 268k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  30.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  30.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  30.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  30.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  30.4k|    }                                                  \
  |  |  |  | 3667|   298k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   268k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3686|   268k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3687|   298k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4158|   138k|    {
 4159|   138k|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|   138k|#if !SCN_DISABLE_LOCALE
 4162|   138k|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 34.6k, False: 104k]
  ------------------
 4163|  34.6k|            return read_impl<Range>(
 4164|  34.6k|                range, rd,
 4165|  34.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  34.6k|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|  34.6k|                },
 4168|  34.6k|                value, loc);
 4169|  34.6k|        }
 4170|   104k|#endif
 4171|       |
 4172|   104k|        return read_impl<Range>(
 4173|   104k|            range, rd,
 4174|   104k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   104k|                return r.read_source(SCN_FWD(args)...);
 4176|   104k|            },
 4177|   104k|            value);
 4178|   138k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4194|   190k|    {
 4195|   190k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|   190k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   190k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 56.4k, False: 134k]
  |  |  ------------------
  ------------------
 4197|  56.4k|            return unexpected(r.error());
 4198|  56.4k|        }
 4199|       |
 4200|   134k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   134k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   134k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   134k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 147, False: 134k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    147|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    147|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    147|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    147|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    147|    }                                                  \
  |  |  |  | 3667|   134k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   134k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|   134k|        return ranges::next(range.begin(), n);
 4202|   134k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  34.6k|        : m_fptr([](storage fn,
  743|  34.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  34.6k|              cvref<T> obj = *get<T>(fn);
  745|  34.6k|              if constexpr (std::is_void_v<R>) {
  746|  34.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  34.6k|              }
  748|  34.6k|              else {
  749|  34.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  34.6k|              }
  751|  34.6k|          }),
  752|  34.6k|          m_storage(std::addressof(f))
  753|  34.6k|    {
  754|  34.6k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  34.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  34.6k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  34.6k|              else {
  749|  34.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  34.6k|              }
  751|  34.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  34.6k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  34.6k|        else if constexpr (std::is_object_v<T>) {
  688|  34.6k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  34.6k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4165|  34.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  34.6k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  34.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|  34.6k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  34.6k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  34.6k|        {
  662|  34.6k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   104k|        : m_fptr([](storage fn,
  743|   104k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   104k|              cvref<T> obj = *get<T>(fn);
  745|   104k|              if constexpr (std::is_void_v<R>) {
  746|   104k|                  obj(static_cast<decltype(args)>(args)...);
  747|   104k|              }
  748|   104k|              else {
  749|   104k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   104k|              }
  751|   104k|          }),
  752|   104k|          m_storage(std::addressof(f))
  753|   104k|    {
  754|   104k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   104k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   104k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   104k|              else {
  749|   104k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   104k|              }
  751|   104k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   104k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   104k|        else if constexpr (std::is_object_v<T>) {
  688|   104k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   104k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4174|   104k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   104k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   104k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|   104k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   104k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   104k|        {
  662|   104k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4158|   138k|    {
 4159|   138k|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|   138k|#if !SCN_DISABLE_LOCALE
 4162|   138k|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 34.6k, False: 104k]
  ------------------
 4163|  34.6k|            return read_impl<Range>(
 4164|  34.6k|                range, rd,
 4165|  34.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  34.6k|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|  34.6k|                },
 4168|  34.6k|                value, loc);
 4169|  34.6k|        }
 4170|   104k|#endif
 4171|       |
 4172|   104k|        return read_impl<Range>(
 4173|   104k|            range, rd,
 4174|   104k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   104k|                return r.read_source(SCN_FWD(args)...);
 4176|   104k|            },
 4177|   104k|            value);
 4178|   138k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4194|   190k|    {
 4195|   190k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|   190k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   190k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.3k, False: 164k]
  |  |  ------------------
  ------------------
 4197|  26.3k|            return unexpected(r.error());
 4198|  26.3k|        }
 4199|       |
 4200|   164k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   164k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   164k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   164k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   164k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 30.3k, False: 134k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  30.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  30.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  30.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  30.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  30.3k|    }                                                  \
  |  |  |  | 3667|   164k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   134k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|   134k|        return ranges::next(range.begin(), n);
 4202|   164k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  34.6k|        : m_fptr([](storage fn,
  743|  34.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  34.6k|              cvref<T> obj = *get<T>(fn);
  745|  34.6k|              if constexpr (std::is_void_v<R>) {
  746|  34.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  34.6k|              }
  748|  34.6k|              else {
  749|  34.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  34.6k|              }
  751|  34.6k|          }),
  752|  34.6k|          m_storage(std::addressof(f))
  753|  34.6k|    {
  754|  34.6k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  34.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  34.6k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  34.6k|              else {
  749|  34.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  34.6k|              }
  751|  34.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  34.6k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  34.6k|        else if constexpr (std::is_object_v<T>) {
  688|  34.6k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  34.6k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4165|  34.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  34.6k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  34.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|  34.6k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  34.6k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  34.6k|        {
  662|  34.6k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   104k|        : m_fptr([](storage fn,
  743|   104k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   104k|              cvref<T> obj = *get<T>(fn);
  745|   104k|              if constexpr (std::is_void_v<R>) {
  746|   104k|                  obj(static_cast<decltype(args)>(args)...);
  747|   104k|              }
  748|   104k|              else {
  749|   104k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   104k|              }
  751|   104k|          }),
  752|   104k|          m_storage(std::addressof(f))
  753|   104k|    {
  754|   104k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   104k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   104k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   104k|              else {
  749|   104k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   104k|              }
  751|   104k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   104k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   104k|        else if constexpr (std::is_object_v<T>) {
  688|   104k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   104k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4174|   104k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   104k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   104k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|   104k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   104k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   104k|        {
  662|   104k|        }
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2048|   550k|{
 2049|   550k|    auto it = range.begin();
 2050|   941k|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 938k, False: 3.21k]
  ------------------
 2051|   938k|        const auto val =
 2052|   938k|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|   938k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   938k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 938k, False: 0]
  |  |  ------------------
  ------------------
 2054|   938k|            const auto cp = detail::decode_code_point_exhaustive(
 2055|   938k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|   938k|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 547k, False: 391k]
  ------------------
 2057|   547k|                return it;
 2058|   547k|            }
 2059|   938k|        }
 2060|   391k|        it = val.iterator;
 2061|   391k|    }
 2062|       |
 2063|  3.21k|    return it;
 2064|   550k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1886|   938k|{
 1887|   938k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   938k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   938k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1888|   938k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1889|       |
 1890|   938k|    auto it = range.begin();
 1891|   938k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1892|       |
 1893|   938k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   938k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 938k]
  |  |  ------------------
  ------------------
 1894|      0|        ++it;
 1895|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1896|      0|        return {it, {}};
 1897|      0|    }
 1898|       |
 1899|   938k|    if (len == 1) {
  ------------------
  |  Branch (1899:9): [True: 938k, False: 0]
  ------------------
 1900|   938k|        ++it;
 1901|   938k|        return {it, string_type(1, *range.begin())};
 1902|   938k|    }
 1903|       |
 1904|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1905|      0|    return {it, string_type{range.begin(), it}};
 1906|   938k|}
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1877|   938k|    {
 1878|   938k|        return !codepoint.empty();
 1879|   938k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2069|   550k|{
 2070|   550k|    return read_until_code_point(range, std::not_fn(pred));
 2071|   550k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2939|   550k|{
 2940|   550k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 550k, False: 0]
  ------------------
 2941|   550k|        auto it = read_while_classic_space(range);
 2942|   550k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|   550k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   550k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.21k, False: 547k]
  |  |  ------------------
  ------------------
 2944|  3.21k|            return unexpected(e);
 2945|  3.21k|        }
 2946|       |
 2947|   547k|        return it;
 2948|   550k|    }
 2949|       |
 2950|      0|    return read_while_classic_space(range);
 2951|   550k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2104|   550k|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|       |        auto buf = make_contiguous_buffer(range);
 2109|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|       |        return ranges::next(range.begin(),
 2111|       |                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|   550k|    else {
 2114|   550k|        auto it = range.begin();
 2115|       |
 2116|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|       |            auto seg = get_contiguous_beginning(range);
 2118|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|       |                seg_it != seg.end()) {
 2120|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|       |            }
 2122|       |            ranges::advance(it, seg.size());
 2123|       |        }
 2124|       |
 2125|   550k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|   550k|            return detail::is_cp_space(cp);
 2127|   550k|        });
 2128|   550k|    }
 2129|   550k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   550k|        : m_fptr([](storage fn,
  743|   550k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   550k|              cvref<T> obj = *get<T>(fn);
  745|   550k|              if constexpr (std::is_void_v<R>) {
  746|   550k|                  obj(static_cast<decltype(args)>(args)...);
  747|   550k|              }
  748|   550k|              else {
  749|   550k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   550k|              }
  751|   550k|          }),
  752|   550k|          m_storage(std::addressof(f))
  753|   550k|    {
  754|   550k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   938k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   938k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   938k|              else {
  749|   938k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   938k|              }
  751|   938k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   938k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   938k|        else if constexpr (std::is_object_v<T>) {
  688|   938k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   938k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2125|   938k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|   938k|            return detail::is_cp_space(cp);
 2127|   938k|        });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   550k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   550k|        {
  662|   550k|        }
_ZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2075|   881k|{
 2076|       |    if constexpr (ranges::contiguous_range<Range> &&
 2077|       |                  ranges::sized_range<Range> &&
 2078|   881k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2079|   881k|        auto buf = make_contiguous_buffer(range);
 2080|   881k|        auto it = find_classic_space_narrow_fast(buf.view());
 2081|   881k|        return ranges::next(range.begin(),
 2082|   881k|                            ranges::distance(buf.view().begin(), it));
 2083|       |    }
 2084|       |    else {
 2085|       |        auto it = range.begin();
 2086|       |
 2087|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2088|       |            auto seg = get_contiguous_beginning(range);
 2089|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2090|       |                seg_it != seg.end()) {
 2091|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2092|       |            }
 2093|       |            ranges::advance(it, seg.size());
 2094|       |        }
 2095|       |
 2096|       |        return read_until_code_point(
 2097|       |            ranges::subrange{it, range.end()},
 2098|       |            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2099|       |    }
 2100|   881k|}
_ZN3scn2v34impl22make_contiguous_bufferIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 1670|   881k|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|   881k|                  ranges::sized_range<Range>) {
 1674|   881k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|   881k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1675|       |    }
 1676|       |    else {
 1677|       |        return contiguous_range_factory{SCN_FWD(range)};
 1678|       |    }
 1679|   881k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEETnPNS5_9enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISC_Esr6rangesE11sized_rangeISC_EEvE4typeELPv0EEEOSC_:
 1476|   881k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1477|   881k|    {
 1478|   881k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEETnPNS5_9enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSD_:
 1564|   881k|    {
 1565|   881k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   881k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1566|   881k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEvOT_:
 1608|   881k|    {
 1609|   881k|        using value_t = ranges::range_value_t<Range>;
 1610|       |
 1611|       |        if constexpr (ranges::borrowed_range<Range> &&
 1612|       |                      ranges::contiguous_range<Range> &&
 1613|       |                      ranges::sized_range<Range>) {
 1614|       |            m_storage.reset();
 1615|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1616|       |        }
 1617|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1618|   881k|                                          std::basic_string<CharT>>) {
 1619|   881k|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  930|   881k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1620|   881k|            m_view = string_view_type{*m_storage};
 1621|       |        }
 1622|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1623|       |                                          typename detail::basic_scan_buffer<
 1624|       |                                              value_t>::forward_iterator> &&
 1625|       |                           ranges::common_range<Range>) {
 1626|       |            auto beg_seg = range.begin().contiguous_segment();
 1627|       |            auto end_seg = range.end().contiguous_segment();
 1628|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1629|       |                             detail::to_address(end_seg.end()))) {
 1630|       |                auto& str = m_storage.emplace();
 1631|       |                str.reserve(range.end().position() - range.begin().position());
 1632|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1633|       |                m_view = string_view_type{str};
 1634|       |                return;
 1635|       |            }
 1636|       |
 1637|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1638|       |                                                            end_seg.data());
 1639|       |            m_storage.reset();
 1640|       |        }
 1641|       |        else {
 1642|       |            auto& str = m_storage.emplace();
 1643|       |            if constexpr (ranges::sized_range<Range>) {
 1644|       |                str.reserve(range.size());
 1645|       |            }
 1646|       |            if constexpr (ranges::common_range<Range>) {
 1647|       |                std::copy(ranges::begin(range), ranges::end(range),
 1648|       |                          std::back_inserter(str));
 1649|       |            }
 1650|       |            else {
 1651|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1652|       |                     ++it) {
 1653|       |                    str.push_back(*it);
 1654|       |                }
 1655|       |            }
 1656|       |            m_view = string_view_type{str};
 1657|       |        }
 1658|   881k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIfEET_S5_:
 4088|   644k|    {
 4089|   644k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4089:13): [True: 73.5k, False: 571k]
  ------------------
 4090|  73.5k|            return std::copysign(value, T{-1.0});
 4091|  73.5k|        }
 4092|   571k|        return std::copysign(value, T{1.0});
 4093|   644k|    }
_ZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2075|   372k|{
 2076|       |    if constexpr (ranges::contiguous_range<Range> &&
 2077|       |                  ranges::sized_range<Range> &&
 2078|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2079|       |        auto buf = make_contiguous_buffer(range);
 2080|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2081|       |        return ranges::next(range.begin(),
 2082|       |                            ranges::distance(buf.view().begin(), it));
 2083|       |    }
 2084|   372k|    else {
 2085|   372k|        auto it = range.begin();
 2086|       |
 2087|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2088|       |            auto seg = get_contiguous_beginning(range);
 2089|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2090|       |                seg_it != seg.end()) {
 2091|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2092|       |            }
 2093|       |            ranges::advance(it, seg.size());
 2094|       |        }
 2095|       |
 2096|   372k|        return read_until_code_point(
 2097|   372k|            ranges::subrange{it, range.end()},
 2098|   372k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2099|   372k|    }
 2100|   372k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_:
  742|   372k|        : m_fptr([](storage fn,
  743|   372k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   372k|              cvref<T> obj = *get<T>(fn);
  745|   372k|              if constexpr (std::is_void_v<R>) {
  746|   372k|                  obj(static_cast<decltype(args)>(args)...);
  747|   372k|              }
  748|   372k|              else {
  749|   372k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   372k|              }
  751|   372k|          }),
  752|   372k|          m_storage(std::addressof(f))
  753|   372k|    {
  754|   372k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESU_Di:
  743|   684k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   684k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   684k|              else {
  749|   684k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   684k|              }
  751|   684k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  683|   684k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   684k|        else if constexpr (std::is_object_v<T>) {
  688|   684k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   684k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2098|   684k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vISE_EEvE4typeELPv0EEEPSE_:
  660|   372k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   372k|        {
  662|   372k|        }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEETnPNS5_9enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSD_:
 1564|   372k|    {
 1565|   372k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   372k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1566|   372k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEvOT_:
 1608|   372k|    {
 1609|   372k|        using value_t = ranges::range_value_t<Range>;
 1610|       |
 1611|       |        if constexpr (ranges::borrowed_range<Range> &&
 1612|       |                      ranges::contiguous_range<Range> &&
 1613|       |                      ranges::sized_range<Range>) {
 1614|       |            m_storage.reset();
 1615|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1616|       |        }
 1617|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1618|   372k|                                          std::basic_string<CharT>>) {
 1619|   372k|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  930|   372k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1620|   372k|            m_view = string_view_type{*m_storage};
 1621|       |        }
 1622|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1623|       |                                          typename detail::basic_scan_buffer<
 1624|       |                                              value_t>::forward_iterator> &&
 1625|       |                           ranges::common_range<Range>) {
 1626|       |            auto beg_seg = range.begin().contiguous_segment();
 1627|       |            auto end_seg = range.end().contiguous_segment();
 1628|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1629|       |                             detail::to_address(end_seg.end()))) {
 1630|       |                auto& str = m_storage.emplace();
 1631|       |                str.reserve(range.end().position() - range.begin().position());
 1632|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1633|       |                m_view = string_view_type{str};
 1634|       |                return;
 1635|       |            }
 1636|       |
 1637|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1638|       |                                                            end_seg.data());
 1639|       |            m_storage.reset();
 1640|       |        }
 1641|       |        else {
 1642|       |            auto& str = m_storage.emplace();
 1643|       |            if constexpr (ranges::sized_range<Range>) {
 1644|       |                str.reserve(range.size());
 1645|       |            }
 1646|       |            if constexpr (ranges::common_range<Range>) {
 1647|       |                std::copy(ranges::begin(range), ranges::end(range),
 1648|       |                          std::back_inserter(str));
 1649|       |            }
 1650|       |            else {
 1651|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1652|       |                     ++it) {
 1653|       |                    str.push_back(*it);
 1654|       |                }
 1655|       |            }
 1656|       |            m_view = string_view_type{str};
 1657|       |        }
 1658|   372k|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIfEET_S5_:
 4088|   256k|    {
 4089|   256k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4089:13): [True: 819, False: 255k]
  ------------------
 4090|    819|            return std::copysign(value, T{-1.0});
 4091|    819|        }
 4092|   255k|        return std::copysign(value, T{1.0});
 4093|   256k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIdEET_S5_:
 4088|   667k|    {
 4089|   667k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4089:13): [True: 75.9k, False: 591k]
  ------------------
 4090|  75.9k|            return std::copysign(value, T{-1.0});
 4091|  75.9k|        }
 4092|   591k|        return std::copysign(value, T{1.0});
 4093|   667k|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIdEET_S5_:
 4088|   293k|    {
 4089|   293k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4089:13): [True: 833, False: 292k]
  ------------------
 4090|    833|            return std::copysign(value, T{-1.0});
 4091|    833|        }
 4092|   292k|        return std::copysign(value, T{1.0});
 4093|   293k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIeEET_S5_:
 4088|   673k|    {
 4089|   673k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4089:13): [True: 78.0k, False: 595k]
  ------------------
 4090|  78.0k|            return std::copysign(value, T{-1.0});
 4091|  78.0k|        }
 4092|   595k|        return std::copysign(value, T{1.0});
 4093|   673k|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIeEET_S5_:
 4088|   298k|    {
 4089|   298k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4089:13): [True: 847, False: 298k]
  ------------------
 4090|    847|            return std::copysign(value, T{-1.0});
 4091|    847|        }
 4092|   298k|        return std::copysign(value, T{1.0});
 4093|   298k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5783|   292k|{
 5784|   292k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   292k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.97k, False: 288k]
  |  |  ------------------
  ------------------
 5785|  3.97k|        return unexpected(e);
 5786|  3.97k|    }
 5787|       |
 5788|   288k|    if (!is_required) {
  ------------------
  |  Branch (5788:9): [True: 0, False: 288k]
  ------------------
 5789|      0|        return range.begin();
 5790|      0|    }
 5791|       |
 5792|   288k|    return skip_classic_whitespace(range);
 5793|   288k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIfEENS0_13scan_expectedIPKcEERT_:
 5859|  94.5k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  94.5k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  94.5k|            auto rd = make_reader<T, char_type>();
 5865|  94.5k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  94.5k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|  94.5k|    {
 5852|  94.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  94.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  94.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  94.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  94.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.31k, False: 93.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.31k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.31k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.31k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.31k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.31k|    }                                                  \
  |  |  |  | 3667|  94.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  93.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  93.1k|                        .transform_error(make_eof_scan_error));
 5854|  93.1k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  94.5k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4140|  93.1k|    {
 4141|  93.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  93.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4142|       |
 4143|  93.1k|        float_reader<CharT> rd{};
 4144|  93.1k|        return read_impl<Range>(
 4145|  93.1k|            range, rd,
 4146|  93.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  93.1k|                return r.read_source(SCN_FWD(args)...);
 4148|  93.1k|            },
 4149|  93.1k|            value);
 4150|  93.1k|    }
_ZN3scn2v34impl12float_readerIcEC2Ev:
 3646|   600k|    constexpr float_reader() = default;
_ZN3scn2v34impl17float_reader_baseC2Ev:
 3632|   890k|    constexpr float_reader_base() = default;
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  93.1k|        : m_fptr([](storage fn,
  743|  93.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  93.1k|              cvref<T> obj = *get<T>(fn);
  745|  93.1k|              if constexpr (std::is_void_v<R>) {
  746|  93.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  93.1k|              }
  748|  93.1k|              else {
  749|  93.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  93.1k|              }
  751|  93.1k|          }),
  752|  93.1k|          m_storage(std::addressof(f))
  753|  93.1k|    {
  754|  93.1k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  93.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  93.1k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  93.1k|              else {
  749|  93.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  93.1k|              }
  751|  93.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  93.1k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  93.1k|        else if constexpr (std::is_object_v<T>) {
  688|  93.1k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  93.1k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4146|  93.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  93.1k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  93.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4148|  93.1k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  93.1k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  93.1k|        {
  662|  93.1k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 5859|  98.1k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  98.1k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  98.1k|            auto rd = make_reader<T, char_type>();
 5865|  98.1k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  98.1k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|  98.1k|    {
 5852|  98.1k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  98.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  98.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  98.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  98.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.50k, False: 96.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.50k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.50k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.50k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.50k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.50k|    }                                                  \
  |  |  |  | 3667|  98.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  96.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  96.6k|                        .transform_error(make_eof_scan_error));
 5854|  96.6k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  98.1k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4140|  96.6k|    {
 4141|  96.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  96.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4142|       |
 4143|  96.6k|        float_reader<CharT> rd{};
 4144|  96.6k|        return read_impl<Range>(
 4145|  96.6k|            range, rd,
 4146|  96.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  96.6k|                return r.read_source(SCN_FWD(args)...);
 4148|  96.6k|            },
 4149|  96.6k|            value);
 4150|  96.6k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  96.6k|        : m_fptr([](storage fn,
  743|  96.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  96.6k|              cvref<T> obj = *get<T>(fn);
  745|  96.6k|              if constexpr (std::is_void_v<R>) {
  746|  96.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  96.6k|              }
  748|  96.6k|              else {
  749|  96.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  96.6k|              }
  751|  96.6k|          }),
  752|  96.6k|          m_storage(std::addressof(f))
  753|  96.6k|    {
  754|  96.6k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  96.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  96.6k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  96.6k|              else {
  749|  96.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  96.6k|              }
  751|  96.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  96.6k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  96.6k|        else if constexpr (std::is_object_v<T>) {
  688|  96.6k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  96.6k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4146|  96.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  96.6k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  96.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4148|  96.6k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  96.6k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  96.6k|        {
  662|  96.6k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIeEENS0_13scan_expectedIPKcEERT_:
 5859|  99.7k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  99.7k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  99.7k|            auto rd = make_reader<T, char_type>();
 5865|  99.7k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  99.7k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|  99.7k|    {
 5852|  99.7k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  99.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  99.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  99.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  99.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.62k, False: 98.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.62k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.62k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.62k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.62k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.62k|    }                                                  \
  |  |  |  | 3667|  99.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  98.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  98.1k|                        .transform_error(make_eof_scan_error));
 5854|  98.1k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  99.7k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4140|  98.1k|    {
 4141|  98.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  98.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4142|       |
 4143|  98.1k|        float_reader<CharT> rd{};
 4144|  98.1k|        return read_impl<Range>(
 4145|  98.1k|            range, rd,
 4146|  98.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  98.1k|                return r.read_source(SCN_FWD(args)...);
 4148|  98.1k|            },
 4149|  98.1k|            value);
 4150|  98.1k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  98.1k|        : m_fptr([](storage fn,
  743|  98.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  98.1k|              cvref<T> obj = *get<T>(fn);
  745|  98.1k|              if constexpr (std::is_void_v<R>) {
  746|  98.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  98.1k|              }
  748|  98.1k|              else {
  749|  98.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  98.1k|              }
  751|  98.1k|          }),
  752|  98.1k|          m_storage(std::addressof(f))
  753|  98.1k|    {
  754|  98.1k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  98.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  98.1k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  98.1k|              else {
  749|  98.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  98.1k|              }
  751|  98.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  98.1k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  98.1k|        else if constexpr (std::is_object_v<T>) {
  688|  98.1k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  98.1k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4146|  98.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  98.1k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  98.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4148|  98.1k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  98.1k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  98.1k|        {
  662|  98.1k|        }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5783|   316k|{
 5784|   316k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   316k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.12k, False: 312k]
  |  |  ------------------
  ------------------
 5785|  4.12k|        return unexpected(e);
 5786|  4.12k|    }
 5787|       |
 5788|   312k|    if (!is_required) {
  ------------------
  |  Branch (5788:9): [True: 0, False: 312k]
  ------------------
 5789|      0|        return range.begin();
 5790|      0|    }
 5791|       |
 5792|   312k|    return skip_classic_whitespace(range);
 5793|   312k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5859|   102k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|   102k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|   102k|            auto rd = make_reader<T, char_type>();
 5869|   102k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 102k, False: 0]
  ------------------
 5870|   102k|                return impl(rd, range, value);
 5871|   102k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|   102k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|   102k|    {
 5852|   102k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|   102k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   102k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   102k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.38k, False: 100k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.38k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.38k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.38k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.38k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.38k|    }                                                  \
  |  |  |  | 3667|   102k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|   100k|                        .transform_error(make_eof_scan_error));
 5854|   100k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|   102k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4140|   100k|    {
 4141|   100k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   100k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4142|       |
 4143|   100k|        float_reader<CharT> rd{};
 4144|   100k|        return read_impl<Range>(
 4145|   100k|            range, rd,
 4146|   100k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|   100k|                return r.read_source(SCN_FWD(args)...);
 4148|   100k|            },
 4149|   100k|            value);
 4150|   100k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|   100k|        : m_fptr([](storage fn,
  743|   100k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   100k|              cvref<T> obj = *get<T>(fn);
  745|   100k|              if constexpr (std::is_void_v<R>) {
  746|   100k|                  obj(static_cast<decltype(args)>(args)...);
  747|   100k|              }
  748|   100k|              else {
  749|   100k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   100k|              }
  751|   100k|          }),
  752|   100k|          m_storage(std::addressof(f))
  753|   100k|    {
  754|   100k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|   100k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   100k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   100k|              else {
  749|   100k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   100k|              }
  751|   100k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   100k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   100k|        else if constexpr (std::is_object_v<T>) {
  688|   100k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   100k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4146|   100k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|   100k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4148|   100k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   100k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   100k|        {
  662|   100k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5859|   106k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|   106k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|   106k|            auto rd = make_reader<T, char_type>();
 5869|   106k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 106k, False: 0]
  ------------------
 5870|   106k|                return impl(rd, range, value);
 5871|   106k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|   106k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|   106k|    {
 5852|   106k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|   106k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   106k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   106k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   106k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.57k, False: 105k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.57k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.57k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.57k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.57k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.57k|    }                                                  \
  |  |  |  | 3667|   106k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   105k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|   105k|                        .transform_error(make_eof_scan_error));
 5854|   105k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|   106k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4140|   105k|    {
 4141|   105k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   105k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4142|       |
 4143|   105k|        float_reader<CharT> rd{};
 4144|   105k|        return read_impl<Range>(
 4145|   105k|            range, rd,
 4146|   105k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|   105k|                return r.read_source(SCN_FWD(args)...);
 4148|   105k|            },
 4149|   105k|            value);
 4150|   105k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|   105k|        : m_fptr([](storage fn,
  743|   105k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   105k|              cvref<T> obj = *get<T>(fn);
  745|   105k|              if constexpr (std::is_void_v<R>) {
  746|   105k|                  obj(static_cast<decltype(args)>(args)...);
  747|   105k|              }
  748|   105k|              else {
  749|   105k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   105k|              }
  751|   105k|          }),
  752|   105k|          m_storage(std::addressof(f))
  753|   105k|    {
  754|   105k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|   105k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   105k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   105k|              else {
  749|   105k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   105k|              }
  751|   105k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   105k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   105k|        else if constexpr (std::is_object_v<T>) {
  688|   105k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   105k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4146|   105k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|   105k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   105k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4148|   105k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   105k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   105k|        {
  662|   105k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5859|   107k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|   107k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|   107k|            auto rd = make_reader<T, char_type>();
 5869|   107k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 107k, False: 0]
  ------------------
 5870|   107k|                return impl(rd, range, value);
 5871|   107k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|   107k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|   107k|    {
 5852|   107k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|   107k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   107k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   107k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.69k, False: 106k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.69k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.69k|    }                                                  \
  |  |  |  | 3667|   107k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   106k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|   106k|                        .transform_error(make_eof_scan_error));
 5854|   106k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|   107k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4140|   106k|    {
 4141|   106k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   106k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4142|       |
 4143|   106k|        float_reader<CharT> rd{};
 4144|   106k|        return read_impl<Range>(
 4145|   106k|            range, rd,
 4146|   106k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|   106k|                return r.read_source(SCN_FWD(args)...);
 4148|   106k|            },
 4149|   106k|            value);
 4150|   106k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|   106k|        : m_fptr([](storage fn,
  743|   106k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   106k|              cvref<T> obj = *get<T>(fn);
  745|   106k|              if constexpr (std::is_void_v<R>) {
  746|   106k|                  obj(static_cast<decltype(args)>(args)...);
  747|   106k|              }
  748|   106k|              else {
  749|   106k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   106k|              }
  751|   106k|          }),
  752|   106k|          m_storage(std::addressof(f))
  753|   106k|    {
  754|   106k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|   106k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   106k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   106k|              else {
  749|   106k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   106k|              }
  751|   106k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   106k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   106k|        else if constexpr (std::is_object_v<T>) {
  688|   106k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   106k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4146|   106k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|   106k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   106k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4148|   106k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   106k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   106k|        {
  662|   106k|        }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISF_EEvE4typeELPv0EEEOSF_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2864|   695k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  928|   695k|    static_cast<    \
  |  |  929|   695k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2865|   695k|          m_range(SCN_FWD(r)),
  ------------------
  |  |  930|   695k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2866|   695k|          m_current(m_range.begin())
 2867|   695k|    {
 2868|   695k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2871|  2.02M|    {
 2872|  2.02M|        return m_current;
 2873|  2.02M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2876|  1.32M|    {
 2877|  1.32M|        return m_range.end();
 2878|  1.32M|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2891|   629k|    {
 2892|   629k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   629k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   629k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2893|   629k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 2894|   629k|            if (it == nullptr) {
  ------------------
  |  Branch (2894:17): [True: 0, False: 629k]
  ------------------
 2895|      0|                it = end();
 2896|      0|            }
 2897|   629k|        }
 2898|   629k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   629k|    static_cast<    \
  |  |  929|   629k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2899|   629k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2881|   695k|    {
 2882|   695k|        return ranges::subrange{begin(), end()};
 2883|   695k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6025|   695k|    {
 6026|   695k|        const bool need_skipped_width =
 6027|   695k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 0, False: 695k]
  |  Branch (6027:33): [True: 0, False: 695k]
  ------------------
 6028|   695k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|   695k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 0, False: 695k]
  ------------------
 6032|   695k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 0, False: 695k]
  ------------------
 6033|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6034|      0|                             need_skipped_width);
 6035|      0|        }
 6036|   695k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 695k, False: 0]
  |  Branch (6036:56): [True: 695k, False: 0]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|   695k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 0, False: 695k]
  ------------------
 6040|      0|                auto max_width_view = take_width(rng, specs.precision);
 6041|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|      0|                                  .transform_error(make_eof_scan_error));
 6043|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|      0|            }
 6045|  1.38M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|   695k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   695k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   695k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   695k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 11.4k, False: 684k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  11.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  11.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  11.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  11.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  11.4k|    }                                                  \
  |  |  |  | 3667|   695k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   684k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|  1.38M|                            make_eof_scan_error));
 6047|       |
 6048|  1.38M|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 0, False: 684k]
  ------------------
 6049|      0|                return result_type{
 6050|      0|                    it,
 6051|      0|                    calculate_text_width(make_contiguous_buffer(
 6052|      0|                                             ranges::subrange{rng.begin(), it})
 6053|      0|                                             .view())};
 6054|      0|            }
 6055|   684k|            return result_type{it, 0};
 6056|  1.38M|        }
 6057|       |
 6058|      0|        return result_type{rng.begin(), 0};
 6059|   695k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6067|   619k|    {
 6068|   619k|        const bool need_skipped_width =
 6069|   619k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6069:13): [True: 0, False: 619k]
  |  Branch (6069:33): [True: 0, False: 619k]
  ------------------
 6070|   619k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6071|       |
 6072|   619k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6072:13): [True: 0, False: 619k]
  ------------------
 6073|   619k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6073:13): [True: 0, False: 619k]
  ------------------
 6074|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6074:17): [True: 0, False: 0]
  ------------------
 6075|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6075:17): [True: 0, False: 0]
  ------------------
 6076|      0|                return result_type{rng.begin(), 0};
 6077|      0|            }
 6078|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6079|      0|                             specs.fill, need_skipped_width);
 6080|      0|        }
 6081|   619k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6081:13): [True: 619k, False: 0]
  ------------------
 6082|   619k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6082:13): [True: 0, False: 619k]
  ------------------
 6083|   619k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6083:15): [True: 0, False: 0]
  |  Branch (6083:35): [True: 0, False: 0]
  ------------------
 6084|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6084:15): [True: 0, False: 0]
  ------------------
 6085|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6085:15): [True: 0, False: 0]
  ------------------
 6086|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                const auto initial_width =
 6088|      0|                    specs.precision - prefix_width - value_width;
 6089|      0|                auto max_width_view = take_width(rng, initial_width);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6093|      0|            }
 6094|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|      0|                            make_eof_scan_error));
 6096|       |
 6097|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|      0|            return result_type{it, 0};
 6105|      0|        }
 6106|   619k|        return result_type{rng.begin(), 0};
 6107|   619k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIfEENS0_13scan_expectedIPKcEERT_:
 6181|   227k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|   227k|                          basic_contiguous_scan_context<char_type>>) {
 6186|   227k|            auto rd = make_reader<T, char_type>();
 6187|   227k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   227k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 227k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|   227k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   227k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|   227k|    {
 6113|   227k|        const bool need_skipped_width =
 6114|   227k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 227k]
  |  Branch (6114:33): [True: 0, False: 227k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   227k|        auto it = rng.begin();
 6118|   227k|        std::ptrdiff_t prefix_width = 0;
 6119|   227k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 227k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   227k|        else {
 6127|   227k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   227k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   227k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   227k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   227k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.48k, False: 223k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.48k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.48k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.48k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.48k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.48k|    }                                                  \
  |  |  |  | 3667|   227k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   223k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   223k|            std::tie(it, prefix_width) = prefix_result;
 6129|   223k|        }
 6130|   223k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   223k|        std::ptrdiff_t value_width = 0;
 6134|   223k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 223k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   223k|        else {
 6150|   223k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   223k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   223k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   223k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 18.7k, False: 204k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  18.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  18.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  18.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  18.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  18.7k|    }                                                  \
  |  | 3667|   223k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   223k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|   204k|                                             specs, value, loc));
 6152|       |
 6153|   204k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 204k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|   204k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|   204k|        std::ptrdiff_t postfix_width = 0;
 6162|   204k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 201k, False: 3.07k]
  ------------------
 6163|   201k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   201k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   201k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   201k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   201k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 201k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   201k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   201k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   201k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|   201k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|   201k|                                 value_width));
 6167|   201k|            std::tie(it, postfix_width) = postfix_result;
 6168|   201k|        }
 6169|       |
 6170|   204k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|   204k|                                                 value_width, postfix_width);
 6172|   204k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 204k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|   204k|        return it;
 6177|   204k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 6181|   233k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|   233k|                          basic_contiguous_scan_context<char_type>>) {
 6186|   233k|            auto rd = make_reader<T, char_type>();
 6187|   233k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   233k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 233k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|   233k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   233k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|   233k|    {
 6113|   233k|        const bool need_skipped_width =
 6114|   233k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 233k]
  |  Branch (6114:33): [True: 0, False: 233k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   233k|        auto it = rng.begin();
 6118|   233k|        std::ptrdiff_t prefix_width = 0;
 6119|   233k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 233k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   233k|        else {
 6127|   233k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   233k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   233k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   233k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   233k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.84k, False: 229k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.84k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.84k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.84k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.84k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.84k|    }                                                  \
  |  |  |  | 3667|   233k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   229k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   229k|            std::tie(it, prefix_width) = prefix_result;
 6129|   229k|        }
 6130|   229k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   229k|        std::ptrdiff_t value_width = 0;
 6134|   229k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 229k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   229k|        else {
 6150|   229k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   229k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   229k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   229k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 18.4k, False: 210k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  18.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  18.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  18.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  18.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  18.4k|    }                                                  \
  |  | 3667|   229k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   229k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|   210k|                                             specs, value, loc));
 6152|       |
 6153|   210k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 210k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|   210k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|   210k|        std::ptrdiff_t postfix_width = 0;
 6162|   210k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 207k, False: 3.39k]
  ------------------
 6163|   207k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   207k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   207k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   207k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   207k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 207k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   207k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   207k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   207k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|   207k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|   207k|                                 value_width));
 6167|   207k|            std::tie(it, postfix_width) = postfix_result;
 6168|   207k|        }
 6169|       |
 6170|   210k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|   210k|                                                 value_width, postfix_width);
 6172|   210k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 210k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|   210k|        return it;
 6177|   210k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIeEENS0_13scan_expectedIPKcEERT_:
 6181|   235k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|   235k|                          basic_contiguous_scan_context<char_type>>) {
 6186|   235k|            auto rd = make_reader<T, char_type>();
 6187|   235k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   235k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 235k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|   235k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   235k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|   235k|    {
 6113|   235k|        const bool need_skipped_width =
 6114|   235k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 235k]
  |  Branch (6114:33): [True: 0, False: 235k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   235k|        auto it = rng.begin();
 6118|   235k|        std::ptrdiff_t prefix_width = 0;
 6119|   235k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 235k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   235k|        else {
 6127|   235k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   235k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   235k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   235k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   235k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.09k, False: 231k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.09k|    }                                                  \
  |  |  |  | 3667|   235k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   231k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   231k|            std::tie(it, prefix_width) = prefix_result;
 6129|   231k|        }
 6130|   231k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   231k|        std::ptrdiff_t value_width = 0;
 6134|   231k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 231k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   231k|        else {
 6150|   231k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   231k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   231k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   231k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 18.1k, False: 213k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  18.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  18.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  18.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  18.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  18.1k|    }                                                  \
  |  | 3667|   231k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   231k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|   213k|                                             specs, value, loc));
 6152|       |
 6153|   213k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 213k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|   213k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|   213k|        std::ptrdiff_t postfix_width = 0;
 6162|   213k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 209k, False: 3.62k]
  ------------------
 6163|   209k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   209k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   209k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   209k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   209k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 209k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   209k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   209k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   209k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|   209k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|   209k|                                 value_width));
 6167|   209k|            std::tie(it, postfix_width) = postfix_result;
 6168|   209k|        }
 6169|       |
 6170|   213k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|   213k|                                                 value_width, postfix_width);
 6172|   213k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 213k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|   213k|        return it;
 6177|   213k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5783|   146k|{
 5784|   146k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   146k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 435, False: 145k]
  |  |  ------------------
  ------------------
 5785|    435|        return unexpected(e);
 5786|    435|    }
 5787|       |
 5788|   145k|    if (!is_required) {
  ------------------
  |  Branch (5788:9): [True: 0, False: 145k]
  ------------------
 5789|      0|        return range.begin();
 5790|      0|    }
 5791|       |
 5792|   145k|    return skip_classic_whitespace(range);
 5793|   145k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIfEENS0_13scan_expectedIPKwEERT_:
 5859|  42.8k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  42.8k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  42.8k|            auto rd = make_reader<T, char_type>();
 5865|  42.8k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  42.8k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|  42.8k|    {
 5852|  42.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  42.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  42.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  42.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  42.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 276, False: 42.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    276|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    276|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    276|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    276|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    276|    }                                                  \
  |  |  |  | 3667|  42.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  42.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  42.5k|                        .transform_error(make_eof_scan_error));
 5854|  42.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  42.8k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4140|  42.5k|    {
 4141|  42.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  42.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4142|       |
 4143|  42.5k|        float_reader<CharT> rd{};
 4144|  42.5k|        return read_impl<Range>(
 4145|  42.5k|            range, rd,
 4146|  42.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  42.5k|                return r.read_source(SCN_FWD(args)...);
 4148|  42.5k|            },
 4149|  42.5k|            value);
 4150|  42.5k|    }
_ZN3scn2v34impl12float_readerIwEC2Ev:
 3646|   290k|    constexpr float_reader() = default;
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  42.5k|        : m_fptr([](storage fn,
  743|  42.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  42.5k|              cvref<T> obj = *get<T>(fn);
  745|  42.5k|              if constexpr (std::is_void_v<R>) {
  746|  42.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  42.5k|              }
  748|  42.5k|              else {
  749|  42.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  42.5k|              }
  751|  42.5k|          }),
  752|  42.5k|          m_storage(std::addressof(f))
  753|  42.5k|    {
  754|  42.5k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  42.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  42.5k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  42.5k|              else {
  749|  42.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  42.5k|              }
  751|  42.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  42.5k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  42.5k|        else if constexpr (std::is_object_v<T>) {
  688|  42.5k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  42.5k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4146|  42.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  42.5k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  42.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4148|  42.5k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  42.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  42.5k|        {
  662|  42.5k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 5859|  50.9k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  50.9k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  50.9k|            auto rd = make_reader<T, char_type>();
 5865|  50.9k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  50.9k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|  50.9k|    {
 5852|  50.9k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  50.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  50.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  50.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  50.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 312, False: 50.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    312|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    312|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    312|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    312|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    312|    }                                                  \
  |  |  |  | 3667|  50.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  50.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  50.5k|                        .transform_error(make_eof_scan_error));
 5854|  50.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  50.9k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4140|  50.5k|    {
 4141|  50.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  50.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4142|       |
 4143|  50.5k|        float_reader<CharT> rd{};
 4144|  50.5k|        return read_impl<Range>(
 4145|  50.5k|            range, rd,
 4146|  50.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  50.5k|                return r.read_source(SCN_FWD(args)...);
 4148|  50.5k|            },
 4149|  50.5k|            value);
 4150|  50.5k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  50.5k|        : m_fptr([](storage fn,
  743|  50.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  50.5k|              cvref<T> obj = *get<T>(fn);
  745|  50.5k|              if constexpr (std::is_void_v<R>) {
  746|  50.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  50.5k|              }
  748|  50.5k|              else {
  749|  50.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  50.5k|              }
  751|  50.5k|          }),
  752|  50.5k|          m_storage(std::addressof(f))
  753|  50.5k|    {
  754|  50.5k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  50.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  50.5k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  50.5k|              else {
  749|  50.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  50.5k|              }
  751|  50.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  50.5k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  50.5k|        else if constexpr (std::is_object_v<T>) {
  688|  50.5k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  50.5k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4146|  50.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  50.5k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  50.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4148|  50.5k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  50.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  50.5k|        {
  662|  50.5k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIeEENS0_13scan_expectedIPKwEERT_:
 5859|  52.3k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  52.3k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  52.3k|            auto rd = make_reader<T, char_type>();
 5865|  52.3k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  52.3k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|  52.3k|    {
 5852|  52.3k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  52.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  52.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  52.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  52.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 339, False: 51.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    339|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    339|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    339|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    339|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    339|    }                                                  \
  |  |  |  | 3667|  52.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  51.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  51.9k|                        .transform_error(make_eof_scan_error));
 5854|  51.9k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  52.3k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4140|  51.9k|    {
 4141|  51.9k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  51.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4142|       |
 4143|  51.9k|        float_reader<CharT> rd{};
 4144|  51.9k|        return read_impl<Range>(
 4145|  51.9k|            range, rd,
 4146|  51.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  51.9k|                return r.read_source(SCN_FWD(args)...);
 4148|  51.9k|            },
 4149|  51.9k|            value);
 4150|  51.9k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  51.9k|        : m_fptr([](storage fn,
  743|  51.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  51.9k|              cvref<T> obj = *get<T>(fn);
  745|  51.9k|              if constexpr (std::is_void_v<R>) {
  746|  51.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  51.9k|              }
  748|  51.9k|              else {
  749|  51.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  51.9k|              }
  751|  51.9k|          }),
  752|  51.9k|          m_storage(std::addressof(f))
  753|  51.9k|    {
  754|  51.9k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  51.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  51.9k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  51.9k|              else {
  749|  51.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  51.9k|              }
  751|  51.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  51.9k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  51.9k|        else if constexpr (std::is_object_v<T>) {
  688|  51.9k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  51.9k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4146|  51.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  51.9k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  51.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4148|  51.9k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  51.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  51.9k|        {
  662|  51.9k|        }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISF_EEvE4typeELPv0EEEOSF_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2864|   405k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  928|   405k|    static_cast<    \
  |  |  929|   405k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2865|   405k|          m_range(SCN_FWD(r)),
  ------------------
  |  |  930|   405k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2866|   405k|          m_current(m_range.begin())
 2867|   405k|    {
 2868|   405k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2871|  1.08M|    {
 2872|  1.08M|        return m_current;
 2873|  1.08M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2876|   676k|    {
 2877|   676k|        return m_range.end();
 2878|   676k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2891|   271k|    {
 2892|   271k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   271k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   271k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2893|   271k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 2894|   271k|            if (it == nullptr) {
  ------------------
  |  Branch (2894:17): [True: 0, False: 271k]
  ------------------
 2895|      0|                it = end();
 2896|      0|            }
 2897|   271k|        }
 2898|   271k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   271k|    static_cast<    \
  |  |  929|   271k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2899|   271k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2881|   405k|    {
 2882|   405k|        return ranges::subrange{begin(), end()};
 2883|   405k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6025|   405k|    {
 6026|   405k|        const bool need_skipped_width =
 6027|   405k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 0, False: 405k]
  |  Branch (6027:33): [True: 0, False: 405k]
  ------------------
 6028|   405k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|   405k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 0, False: 405k]
  ------------------
 6032|   405k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 0, False: 405k]
  ------------------
 6033|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6034|      0|                             need_skipped_width);
 6035|      0|        }
 6036|   405k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 405k, False: 0]
  |  Branch (6036:56): [True: 405k, False: 0]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|   405k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 0, False: 405k]
  ------------------
 6040|      0|                auto max_width_view = take_width(rng, specs.precision);
 6041|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|      0|                                  .transform_error(make_eof_scan_error));
 6043|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|      0|            }
 6045|   807k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|   405k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   405k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   405k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   405k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.71k, False: 402k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.71k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.71k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.71k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.71k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.71k|    }                                                  \
  |  |  |  | 3667|   405k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   402k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|   807k|                            make_eof_scan_error));
 6047|       |
 6048|   807k|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 0, False: 402k]
  ------------------
 6049|      0|                return result_type{
 6050|      0|                    it,
 6051|      0|                    calculate_text_width(make_contiguous_buffer(
 6052|      0|                                             ranges::subrange{rng.begin(), it})
 6053|      0|                                             .view())};
 6054|      0|            }
 6055|   402k|            return result_type{it, 0};
 6056|   807k|        }
 6057|       |
 6058|      0|        return result_type{rng.begin(), 0};
 6059|   405k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6067|   270k|    {
 6068|   270k|        const bool need_skipped_width =
 6069|   270k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6069:13): [True: 0, False: 270k]
  |  Branch (6069:33): [True: 0, False: 270k]
  ------------------
 6070|   270k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6071|       |
 6072|   270k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6072:13): [True: 0, False: 270k]
  ------------------
 6073|   270k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6073:13): [True: 0, False: 270k]
  ------------------
 6074|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6074:17): [True: 0, False: 0]
  ------------------
 6075|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6075:17): [True: 0, False: 0]
  ------------------
 6076|      0|                return result_type{rng.begin(), 0};
 6077|      0|            }
 6078|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6079|      0|                             specs.fill, need_skipped_width);
 6080|      0|        }
 6081|   270k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6081:13): [True: 270k, False: 0]
  ------------------
 6082|   270k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6082:13): [True: 0, False: 270k]
  ------------------
 6083|   270k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6083:15): [True: 0, False: 0]
  |  Branch (6083:35): [True: 0, False: 0]
  ------------------
 6084|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6084:15): [True: 0, False: 0]
  ------------------
 6085|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6085:15): [True: 0, False: 0]
  ------------------
 6086|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                const auto initial_width =
 6088|      0|                    specs.precision - prefix_width - value_width;
 6089|      0|                auto max_width_view = take_width(rng, initial_width);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6093|      0|            }
 6094|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|      0|                            make_eof_scan_error));
 6096|       |
 6097|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|      0|            return result_type{it, 0};
 6105|      0|        }
 6106|   270k|        return result_type{rng.begin(), 0};
 6107|   270k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIfEENS0_13scan_expectedIPKwEERT_:
 6181|   127k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|   127k|                          basic_contiguous_scan_context<char_type>>) {
 6186|   127k|            auto rd = make_reader<T, char_type>();
 6187|   127k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 127k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|   127k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   127k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|   127k|    {
 6113|   127k|        const bool need_skipped_width =
 6114|   127k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 127k]
  |  Branch (6114:33): [True: 0, False: 127k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   127k|        auto it = rng.begin();
 6118|   127k|        std::ptrdiff_t prefix_width = 0;
 6119|   127k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 127k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   127k|        else {
 6127|   127k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   127k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   127k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   127k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 850, False: 126k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    850|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    850|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    850|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    850|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    850|    }                                                  \
  |  |  |  | 3667|   127k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   126k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   126k|            std::tie(it, prefix_width) = prefix_result;
 6129|   126k|        }
 6130|   126k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   126k|        std::ptrdiff_t value_width = 0;
 6134|   126k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 126k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   126k|        else {
 6150|   126k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   126k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   126k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 43.6k, False: 82.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  43.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  43.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  43.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  43.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  43.6k|    }                                                  \
  |  | 3667|   126k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   126k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  82.6k|                                             specs, value, loc));
 6152|       |
 6153|  82.6k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 82.6k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  82.6k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  82.6k|        std::ptrdiff_t postfix_width = 0;
 6162|  82.6k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 82.2k, False: 368]
  ------------------
 6163|  82.2k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  82.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  82.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  82.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  82.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 82.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  82.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  82.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  82.2k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  82.2k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  82.2k|                                 value_width));
 6167|  82.2k|            std::tie(it, postfix_width) = postfix_result;
 6168|  82.2k|        }
 6169|       |
 6170|  82.6k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  82.6k|                                                 value_width, postfix_width);
 6172|  82.6k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 82.6k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  82.6k|        return it;
 6177|  82.6k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 6181|   137k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|   137k|                          basic_contiguous_scan_context<char_type>>) {
 6186|   137k|            auto rd = make_reader<T, char_type>();
 6187|   137k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 137k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|   137k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   137k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|   137k|    {
 6113|   137k|        const bool need_skipped_width =
 6114|   137k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 137k]
  |  Branch (6114:33): [True: 0, False: 137k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   137k|        auto it = rng.begin();
 6118|   137k|        std::ptrdiff_t prefix_width = 0;
 6119|   137k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 137k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   137k|        else {
 6127|   137k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   137k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   137k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   137k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 914, False: 137k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    914|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    914|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    914|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    914|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    914|    }                                                  \
  |  |  |  | 3667|   137k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   137k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   137k|            std::tie(it, prefix_width) = prefix_result;
 6129|   137k|        }
 6130|   137k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   137k|        std::ptrdiff_t value_width = 0;
 6134|   137k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 137k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   137k|        else {
 6150|   137k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   137k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   137k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 43.6k, False: 93.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  43.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  43.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  43.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  43.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  43.6k|    }                                                  \
  |  | 3667|   137k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   137k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  93.4k|                                             specs, value, loc));
 6152|       |
 6153|  93.4k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 93.4k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  93.4k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  93.4k|        std::ptrdiff_t postfix_width = 0;
 6162|  93.4k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 93.0k, False: 400]
  ------------------
 6163|  93.0k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  93.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  93.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  93.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  93.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 93.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  93.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  93.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  93.0k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  93.0k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  93.0k|                                 value_width));
 6167|  93.0k|            std::tie(it, postfix_width) = postfix_result;
 6168|  93.0k|        }
 6169|       |
 6170|  93.4k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  93.4k|                                                 value_width, postfix_width);
 6172|  93.4k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 93.4k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  93.4k|        return it;
 6177|  93.4k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIeEENS0_13scan_expectedIPKwEERT_:
 6181|   139k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|   139k|                          basic_contiguous_scan_context<char_type>>) {
 6186|   139k|            auto rd = make_reader<T, char_type>();
 6187|   139k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   139k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 139k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|   139k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   139k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|   139k|    {
 6113|   139k|        const bool need_skipped_width =
 6114|   139k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 139k]
  |  Branch (6114:33): [True: 0, False: 139k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   139k|        auto it = rng.begin();
 6118|   139k|        std::ptrdiff_t prefix_width = 0;
 6119|   139k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 139k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   139k|        else {
 6127|   139k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   139k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   139k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   139k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   139k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 954, False: 138k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    954|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    954|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    954|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    954|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    954|    }                                                  \
  |  |  |  | 3667|   139k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   138k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   138k|            std::tie(it, prefix_width) = prefix_result;
 6129|   138k|        }
 6130|   138k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   138k|        std::ptrdiff_t value_width = 0;
 6134|   138k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 138k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   138k|        else {
 6150|   138k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   138k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   138k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   138k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 43.5k, False: 95.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  43.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  43.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  43.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  43.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  43.5k|    }                                                  \
  |  | 3667|   138k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   138k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  95.3k|                                             specs, value, loc));
 6152|       |
 6153|  95.3k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 95.3k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  95.3k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  95.3k|        std::ptrdiff_t postfix_width = 0;
 6162|  95.3k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 94.9k, False: 418]
  ------------------
 6163|  94.9k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  94.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  94.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  94.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  94.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 94.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  94.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  94.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  94.9k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  94.9k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  94.9k|                                 value_width));
 6167|  94.9k|            std::tie(it, postfix_width) = postfix_result;
 6168|  94.9k|        }
 6169|       |
 6170|  95.3k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  95.3k|                                                 value_width, postfix_width);
 6172|  95.3k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 95.3k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  95.3k|        return it;
 6177|  95.3k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5783|   145k|{
 5784|   145k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   145k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 435, False: 145k]
  |  |  ------------------
  ------------------
 5785|    435|        return unexpected(e);
 5786|    435|    }
 5787|       |
 5788|   145k|    if (!is_required) {
  ------------------
  |  Branch (5788:9): [True: 0, False: 145k]
  ------------------
 5789|      0|        return range.begin();
 5790|      0|    }
 5791|       |
 5792|   145k|    return skip_classic_whitespace(range);
 5793|   145k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5859|  42.7k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|  42.7k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|  42.7k|            auto rd = make_reader<T, char_type>();
 5869|  42.7k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 42.7k, False: 0]
  ------------------
 5870|  42.7k|                return impl(rd, range, value);
 5871|  42.7k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  42.7k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|  42.7k|    {
 5852|  42.7k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  42.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  42.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  42.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  42.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 276, False: 42.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    276|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    276|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    276|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    276|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    276|    }                                                  \
  |  |  |  | 3667|  42.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  42.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  42.5k|                        .transform_error(make_eof_scan_error));
 5854|  42.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  42.7k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4140|  42.5k|    {
 4141|  42.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  42.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4142|       |
 4143|  42.5k|        float_reader<CharT> rd{};
 4144|  42.5k|        return read_impl<Range>(
 4145|  42.5k|            range, rd,
 4146|  42.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  42.5k|                return r.read_source(SCN_FWD(args)...);
 4148|  42.5k|            },
 4149|  42.5k|            value);
 4150|  42.5k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  42.5k|        : m_fptr([](storage fn,
  743|  42.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  42.5k|              cvref<T> obj = *get<T>(fn);
  745|  42.5k|              if constexpr (std::is_void_v<R>) {
  746|  42.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  42.5k|              }
  748|  42.5k|              else {
  749|  42.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  42.5k|              }
  751|  42.5k|          }),
  752|  42.5k|          m_storage(std::addressof(f))
  753|  42.5k|    {
  754|  42.5k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  42.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  42.5k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  42.5k|              else {
  749|  42.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  42.5k|              }
  751|  42.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  42.5k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  42.5k|        else if constexpr (std::is_object_v<T>) {
  688|  42.5k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  42.5k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4146|  42.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  42.5k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  42.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4148|  42.5k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  42.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  42.5k|        {
  662|  42.5k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5859|  50.8k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|  50.8k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|  50.8k|            auto rd = make_reader<T, char_type>();
 5869|  50.8k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 50.8k, False: 0]
  ------------------
 5870|  50.8k|                return impl(rd, range, value);
 5871|  50.8k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  50.8k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|  50.8k|    {
 5852|  50.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  50.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  50.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  50.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  50.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 312, False: 50.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    312|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    312|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    312|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    312|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    312|    }                                                  \
  |  |  |  | 3667|  50.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  50.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  50.5k|                        .transform_error(make_eof_scan_error));
 5854|  50.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  50.8k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4140|  50.5k|    {
 4141|  50.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  50.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4142|       |
 4143|  50.5k|        float_reader<CharT> rd{};
 4144|  50.5k|        return read_impl<Range>(
 4145|  50.5k|            range, rd,
 4146|  50.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  50.5k|                return r.read_source(SCN_FWD(args)...);
 4148|  50.5k|            },
 4149|  50.5k|            value);
 4150|  50.5k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  50.5k|        : m_fptr([](storage fn,
  743|  50.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  50.5k|              cvref<T> obj = *get<T>(fn);
  745|  50.5k|              if constexpr (std::is_void_v<R>) {
  746|  50.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  50.5k|              }
  748|  50.5k|              else {
  749|  50.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  50.5k|              }
  751|  50.5k|          }),
  752|  50.5k|          m_storage(std::addressof(f))
  753|  50.5k|    {
  754|  50.5k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  50.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  50.5k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  50.5k|              else {
  749|  50.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  50.5k|              }
  751|  50.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  50.5k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  50.5k|        else if constexpr (std::is_object_v<T>) {
  688|  50.5k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  50.5k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4146|  50.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  50.5k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  50.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4148|  50.5k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  50.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  50.5k|        {
  662|  50.5k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5859|  52.2k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|  52.2k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|  52.2k|            auto rd = make_reader<T, char_type>();
 5869|  52.2k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 52.2k, False: 0]
  ------------------
 5870|  52.2k|                return impl(rd, range, value);
 5871|  52.2k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  52.2k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|  52.2k|    {
 5852|  52.2k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  52.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  52.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  52.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  52.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 339, False: 51.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    339|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    339|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    339|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    339|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    339|    }                                                  \
  |  |  |  | 3667|  52.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  51.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  51.9k|                        .transform_error(make_eof_scan_error));
 5854|  51.9k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  52.2k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4140|  51.9k|    {
 4141|  51.9k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  51.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4142|       |
 4143|  51.9k|        float_reader<CharT> rd{};
 4144|  51.9k|        return read_impl<Range>(
 4145|  51.9k|            range, rd,
 4146|  51.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  51.9k|                return r.read_source(SCN_FWD(args)...);
 4148|  51.9k|            },
 4149|  51.9k|            value);
 4150|  51.9k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  51.9k|        : m_fptr([](storage fn,
  743|  51.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  51.9k|              cvref<T> obj = *get<T>(fn);
  745|  51.9k|              if constexpr (std::is_void_v<R>) {
  746|  51.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  51.9k|              }
  748|  51.9k|              else {
  749|  51.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  51.9k|              }
  751|  51.9k|          }),
  752|  51.9k|          m_storage(std::addressof(f))
  753|  51.9k|    {
  754|  51.9k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  51.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  51.9k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  51.9k|              else {
  749|  51.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  51.9k|              }
  751|  51.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  51.9k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  51.9k|        else if constexpr (std::is_object_v<T>) {
  688|  51.9k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  51.9k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4146|  51.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  51.9k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  51.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4148|  51.9k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  51.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  51.9k|        {
  662|  51.9k|        }

LLVMFuzzerTestOneInput:
   54|  2.22k|{
   55|  2.22k|    scn::fuzz::run(data, size);
   56|  2.22k|    return 0;
   57|  2.22k|}
float_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   32|  2.22k|{
   33|  2.22k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (33:9): [True: 0, False: 2.22k]
  |  Branch (33:35): [True: 0, False: 2.22k]
  ------------------
   34|      0|        return;
   35|      0|    }
   36|       |
   37|  2.22k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   38|       |
   39|  2.22k|    const auto& f =
   40|  2.22k|        get_format_strings<char>("{}", "{:a}", "{:e}", "{:f}", "{:g}", "{:L}");
   41|  2.22k|    do_basic_run(sv, f);
   42|       |
   43|  2.22k|    const auto& wf = get_format_strings<wchar_t>(L"{}", L"{:a}", L"{:e}",
   44|  2.22k|                                                 L"{:f}", L"{:g}", L"{:L}");
   45|  2.22k|    do_basic_run(wsv_reinterpret, wf);
   46|  2.22k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (46:9): [True: 2.22k, False: 0]
  ------------------
   47|  2.22k|        do_basic_run(wsv_transcode, wf);
   48|  2.22k|    }
   49|  2.22k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  2.22k|{
   25|  2.22k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  2.22k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  2.22k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  2.22k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  2.22k|{
   25|  2.22k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  2.22k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  2.22k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  2.22k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  4.45k|{
   25|  4.45k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  4.45k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  4.45k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  4.45k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  4.45k|{
   25|  4.45k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  4.45k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  4.45k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  4.45k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|  2.22k|{
   52|  2.22k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|  2.22k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.22k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  2.22k|    string_buffer.resize(size);
   56|  2.22k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|  2.22k|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|  2.22k|    const auto wsv_reinterpret_size =
   61|  2.22k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 73, False: 2.15k]
  ------------------
   62|  2.22k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|  2.22k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|  2.22k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|  2.22k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|  2.22k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|  2.22k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|  2.22k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  2.22k|{
  122|  2.22k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  2.22k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  2.22k|    buf.resize(sizeof...(Args));
  125|  2.22k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  2.22k|    return buf;
  127|  2.22k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  107|  2.22k|{
  108|  2.22k|    if constexpr (std::is_same_v<CharT, char>) {
  109|  2.22k|        return format_string_view_buffer;
  110|       |    }
  111|       |    else {
  112|       |        return wformat_string_view_buffer;
  113|       |    }
  114|  2.22k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  2.22k|{
  185|  2.22k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  2.22k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  2.22k|                                   format_strings);
  188|  2.22k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  2.22k|{
  133|       |    // Regular scan
  134|  13.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 13.3k, False: 2.22k]
  ------------------
  135|  13.3k|        auto it = scn::ranges::begin(source);
  136|   145k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   145k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   145k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   145k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   145k|            auto result = scn::scan<T>(
  139|   145k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   145k|                scn::runtime_format(f));
  141|   145k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 13.3k, False: 131k]
  ------------------
  142|  13.3k|                break;
  143|  13.3k|            }
  144|   131k|            it = result->begin();
  145|   131k|        }
  146|  13.3k|    }
  147|       |
  148|       |    // scan localized
  149|  13.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 13.3k, False: 2.22k]
  ------------------
  150|  13.3k|        auto it = scn::ranges::begin(source);
  151|   145k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   145k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   145k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   145k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   145k|            auto result = scn::scan<T>(
  154|   145k|                global_locale,
  155|   145k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   145k|                scn::runtime_format(f));
  157|   145k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 13.3k, False: 131k]
  ------------------
  158|  13.3k|                break;
  159|  13.3k|            }
  160|   131k|            it = result->begin();
  161|   131k|        }
  162|  13.3k|    }
  163|       |
  164|       |    // scan_value
  165|  2.22k|    {
  166|  2.22k|        auto it = scn::ranges::begin(source);
  167|  31.5k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  31.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  31.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  31.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  31.5k|            auto result = scn::scan_value<T>(
  170|  31.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  31.5k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.22k, False: 29.2k]
  ------------------
  172|  2.22k|                break;
  173|  2.22k|            }
  174|  29.2k|            it = result->begin();
  175|  29.2k|        }
  176|  2.22k|    }
  177|  2.22k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  2.22k|{
  133|       |    // Regular scan
  134|  13.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 13.3k, False: 2.22k]
  ------------------
  135|  13.3k|        auto it = scn::ranges::begin(source);
  136|   149k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   149k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   149k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   149k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   149k|            auto result = scn::scan<T>(
  139|   149k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   149k|                scn::runtime_format(f));
  141|   149k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 13.3k, False: 135k]
  ------------------
  142|  13.3k|                break;
  143|  13.3k|            }
  144|   135k|            it = result->begin();
  145|   135k|        }
  146|  13.3k|    }
  147|       |
  148|       |    // scan localized
  149|  13.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 13.3k, False: 2.22k]
  ------------------
  150|  13.3k|        auto it = scn::ranges::begin(source);
  151|   149k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   149k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   149k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   149k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   149k|            auto result = scn::scan<T>(
  154|   149k|                global_locale,
  155|   149k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   149k|                scn::runtime_format(f));
  157|   149k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 13.3k, False: 135k]
  ------------------
  158|  13.3k|                break;
  159|  13.3k|            }
  160|   135k|            it = result->begin();
  161|   135k|        }
  162|  13.3k|    }
  163|       |
  164|       |    // scan_value
  165|  2.22k|    {
  166|  2.22k|        auto it = scn::ranges::begin(source);
  167|  32.7k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  32.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  32.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  32.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  32.7k|            auto result = scn::scan_value<T>(
  170|  32.7k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  32.7k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.22k, False: 30.4k]
  ------------------
  172|  2.22k|                break;
  173|  2.22k|            }
  174|  30.4k|            it = result->begin();
  175|  30.4k|        }
  176|  2.22k|    }
  177|  2.22k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  2.22k|{
  133|       |    // Regular scan
  134|  13.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 13.3k, False: 2.22k]
  ------------------
  135|  13.3k|        auto it = scn::ranges::begin(source);
  136|   151k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   151k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   151k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   151k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   151k|            auto result = scn::scan<T>(
  139|   151k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   151k|                scn::runtime_format(f));
  141|   151k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 13.3k, False: 137k]
  ------------------
  142|  13.3k|                break;
  143|  13.3k|            }
  144|   137k|            it = result->begin();
  145|   137k|        }
  146|  13.3k|    }
  147|       |
  148|       |    // scan localized
  149|  13.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 13.3k, False: 2.22k]
  ------------------
  150|  13.3k|        auto it = scn::ranges::begin(source);
  151|   151k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   151k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   151k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   151k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   151k|            auto result = scn::scan<T>(
  154|   151k|                global_locale,
  155|   151k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   151k|                scn::runtime_format(f));
  157|   151k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 13.3k, False: 137k]
  ------------------
  158|  13.3k|                break;
  159|  13.3k|            }
  160|   137k|            it = result->begin();
  161|   137k|        }
  162|  13.3k|    }
  163|       |
  164|       |    // scan_value
  165|  2.22k|    {
  166|  2.22k|        auto it = scn::ranges::begin(source);
  167|  33.2k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  33.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  33.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  33.2k|            auto result = scn::scan_value<T>(
  170|  33.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  33.2k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.22k, False: 31.0k]
  ------------------
  172|  2.22k|                break;
  173|  2.22k|            }
  174|  31.0k|            it = result->begin();
  175|  31.0k|        }
  176|  2.22k|    }
  177|  2.22k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  2.22k|{
  133|       |    // Regular scan
  134|  13.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 13.3k, False: 2.22k]
  ------------------
  135|  13.3k|        auto it = scn::ranges::begin(source);
  136|   165k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   165k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   165k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   165k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   165k|            auto result = scn::scan<T>(
  139|   165k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   165k|                scn::runtime_format(f));
  141|   165k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 13.3k, False: 152k]
  ------------------
  142|  13.3k|                break;
  143|  13.3k|            }
  144|   152k|            it = result->begin();
  145|   152k|        }
  146|  13.3k|    }
  147|       |
  148|       |    // scan localized
  149|  13.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 13.3k, False: 2.22k]
  ------------------
  150|  13.3k|        auto it = scn::ranges::begin(source);
  151|   165k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   165k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   165k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   165k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   165k|            auto result = scn::scan<T>(
  154|   165k|                global_locale,
  155|   165k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   165k|                scn::runtime_format(f));
  157|   165k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 13.3k, False: 152k]
  ------------------
  158|  13.3k|                break;
  159|  13.3k|            }
  160|   152k|            it = result->begin();
  161|   152k|        }
  162|  13.3k|    }
  163|       |
  164|       |    // scan_value
  165|  2.22k|    {
  166|  2.22k|        auto it = scn::ranges::begin(source);
  167|  34.0k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  34.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  34.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  34.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  34.0k|            auto result = scn::scan_value<T>(
  170|  34.0k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  34.0k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.22k, False: 31.7k]
  ------------------
  172|  2.22k|                break;
  173|  2.22k|            }
  174|  31.7k|            it = result->begin();
  175|  31.7k|        }
  176|  2.22k|    }
  177|  2.22k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  2.22k|{
  133|       |    // Regular scan
  134|  13.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 13.3k, False: 2.22k]
  ------------------
  135|  13.3k|        auto it = scn::ranges::begin(source);
  136|   172k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   172k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   172k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   172k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   172k|            auto result = scn::scan<T>(
  139|   172k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   172k|                scn::runtime_format(f));
  141|   172k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 13.3k, False: 159k]
  ------------------
  142|  13.3k|                break;
  143|  13.3k|            }
  144|   159k|            it = result->begin();
  145|   159k|        }
  146|  13.3k|    }
  147|       |
  148|       |    // scan localized
  149|  13.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 13.3k, False: 2.22k]
  ------------------
  150|  13.3k|        auto it = scn::ranges::begin(source);
  151|   172k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   172k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   172k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   172k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   172k|            auto result = scn::scan<T>(
  154|   172k|                global_locale,
  155|   172k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   172k|                scn::runtime_format(f));
  157|   172k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 13.3k, False: 159k]
  ------------------
  158|  13.3k|                break;
  159|  13.3k|            }
  160|   159k|            it = result->begin();
  161|   159k|        }
  162|  13.3k|    }
  163|       |
  164|       |    // scan_value
  165|  2.22k|    {
  166|  2.22k|        auto it = scn::ranges::begin(source);
  167|  35.6k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  35.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  35.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  35.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  35.6k|            auto result = scn::scan_value<T>(
  170|  35.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  35.6k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.22k, False: 33.3k]
  ------------------
  172|  2.22k|                break;
  173|  2.22k|            }
  174|  33.3k|            it = result->begin();
  175|  33.3k|        }
  176|  2.22k|    }
  177|  2.22k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  2.22k|{
  133|       |    // Regular scan
  134|  13.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 13.3k, False: 2.22k]
  ------------------
  135|  13.3k|        auto it = scn::ranges::begin(source);
  136|   174k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   174k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   174k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   174k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   174k|            auto result = scn::scan<T>(
  139|   174k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   174k|                scn::runtime_format(f));
  141|   174k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 13.3k, False: 160k]
  ------------------
  142|  13.3k|                break;
  143|  13.3k|            }
  144|   160k|            it = result->begin();
  145|   160k|        }
  146|  13.3k|    }
  147|       |
  148|       |    // scan localized
  149|  13.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 13.3k, False: 2.22k]
  ------------------
  150|  13.3k|        auto it = scn::ranges::begin(source);
  151|   174k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   174k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   174k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   174k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   174k|            auto result = scn::scan<T>(
  154|   174k|                global_locale,
  155|   174k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   174k|                scn::runtime_format(f));
  157|   174k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 13.3k, False: 160k]
  ------------------
  158|  13.3k|                break;
  159|  13.3k|            }
  160|   160k|            it = result->begin();
  161|   160k|        }
  162|  13.3k|    }
  163|       |
  164|       |    // scan_value
  165|  2.22k|    {
  166|  2.22k|        auto it = scn::ranges::begin(source);
  167|  35.9k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  35.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  35.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  35.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  35.9k|            auto result = scn::scan_value<T>(
  170|  35.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  35.9k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.22k, False: 33.7k]
  ------------------
  172|  2.22k|                break;
  173|  2.22k|            }
  174|  33.7k|            it = result->begin();
  175|  33.7k|        }
  176|  2.22k|    }
  177|  2.22k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   89|  2.22k|{
   90|  2.22k|    using char_type = ranges::range_value_t<Source>;
   91|  2.22k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  2.22k|    deque.clear();
   93|  2.22k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  2.22k|              std::back_inserter(deque));
   95|  2.22k|    return deque;
   96|  2.22k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   78|  2.22k|{
   79|  2.22k|    if constexpr (std::is_same_v<CharT, char>) {
   80|  2.22k|        return noncontiguous_buffer;
   81|       |    }
   82|       |    else {
   83|       |        return wnoncontiguous_buffer;
   84|       |    }
   85|  2.22k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  2.22k|{
  122|  2.22k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  2.22k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  2.22k|    buf.resize(sizeof...(Args));
  125|  2.22k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  2.22k|    return buf;
  127|  2.22k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  107|  2.22k|{
  108|       |    if constexpr (std::is_same_v<CharT, char>) {
  109|       |        return format_string_view_buffer;
  110|       |    }
  111|  2.22k|    else {
  112|  2.22k|        return wformat_string_view_buffer;
  113|  2.22k|    }
  114|  2.22k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  4.45k|{
  185|  4.45k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  4.45k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  4.45k|                                   format_strings);
  188|  4.45k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  4.45k|{
  133|       |    // Regular scan
  134|  26.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 26.7k, False: 4.45k]
  ------------------
  135|  26.7k|        auto it = scn::ranges::begin(source);
  136|  77.8k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  77.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  77.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  77.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  77.8k|            auto result = scn::scan<T>(
  139|  77.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  77.8k|                scn::runtime_format(f));
  141|  77.8k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 26.7k, False: 51.1k]
  ------------------
  142|  26.7k|                break;
  143|  26.7k|            }
  144|  51.1k|            it = result->begin();
  145|  51.1k|        }
  146|  26.7k|    }
  147|       |
  148|       |    // scan localized
  149|  26.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 26.7k, False: 4.45k]
  ------------------
  150|  26.7k|        auto it = scn::ranges::begin(source);
  151|  77.8k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  77.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  77.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  77.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  77.8k|            auto result = scn::scan<T>(
  154|  77.8k|                global_locale,
  155|  77.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  77.8k|                scn::runtime_format(f));
  157|  77.8k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 26.7k, False: 51.1k]
  ------------------
  158|  26.7k|                break;
  159|  26.7k|            }
  160|  51.1k|            it = result->begin();
  161|  51.1k|        }
  162|  26.7k|    }
  163|       |
  164|       |    // scan_value
  165|  4.45k|    {
  166|  4.45k|        auto it = scn::ranges::begin(source);
  167|  14.2k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  14.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  14.2k|            auto result = scn::scan_value<T>(
  170|  14.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  14.2k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.45k, False: 9.82k]
  ------------------
  172|  4.45k|                break;
  173|  4.45k|            }
  174|  9.82k|            it = result->begin();
  175|  9.82k|        }
  176|  4.45k|    }
  177|  4.45k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  4.45k|{
  133|       |    // Regular scan
  134|  26.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 26.7k, False: 4.45k]
  ------------------
  135|  26.7k|        auto it = scn::ranges::begin(source);
  136|  85.9k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  85.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  85.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  85.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  85.9k|            auto result = scn::scan<T>(
  139|  85.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  85.9k|                scn::runtime_format(f));
  141|  85.9k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 26.7k, False: 59.2k]
  ------------------
  142|  26.7k|                break;
  143|  26.7k|            }
  144|  59.2k|            it = result->begin();
  145|  59.2k|        }
  146|  26.7k|    }
  147|       |
  148|       |    // scan localized
  149|  26.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 26.7k, False: 4.45k]
  ------------------
  150|  26.7k|        auto it = scn::ranges::begin(source);
  151|  85.9k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  85.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  85.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  85.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  85.9k|            auto result = scn::scan<T>(
  154|  85.9k|                global_locale,
  155|  85.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  85.9k|                scn::runtime_format(f));
  157|  85.9k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 26.7k, False: 59.2k]
  ------------------
  158|  26.7k|                break;
  159|  26.7k|            }
  160|  59.2k|            it = result->begin();
  161|  59.2k|        }
  162|  26.7k|    }
  163|       |
  164|       |    // scan_value
  165|  4.45k|    {
  166|  4.45k|        auto it = scn::ranges::begin(source);
  167|  16.9k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  16.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  16.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  16.9k|            auto result = scn::scan_value<T>(
  170|  16.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  16.9k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.45k, False: 12.5k]
  ------------------
  172|  4.45k|                break;
  173|  4.45k|            }
  174|  12.5k|            it = result->begin();
  175|  12.5k|        }
  176|  4.45k|    }
  177|  4.45k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  4.45k|{
  133|       |    // Regular scan
  134|  26.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 26.7k, False: 4.45k]
  ------------------
  135|  26.7k|        auto it = scn::ranges::begin(source);
  136|  87.3k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  87.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  87.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  87.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  87.3k|            auto result = scn::scan<T>(
  139|  87.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  87.3k|                scn::runtime_format(f));
  141|  87.3k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 26.7k, False: 60.6k]
  ------------------
  142|  26.7k|                break;
  143|  26.7k|            }
  144|  60.6k|            it = result->begin();
  145|  60.6k|        }
  146|  26.7k|    }
  147|       |
  148|       |    // scan localized
  149|  26.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 26.7k, False: 4.45k]
  ------------------
  150|  26.7k|        auto it = scn::ranges::begin(source);
  151|  87.3k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  87.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  87.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  87.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  87.3k|            auto result = scn::scan<T>(
  154|  87.3k|                global_locale,
  155|  87.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  87.3k|                scn::runtime_format(f));
  157|  87.3k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 26.7k, False: 60.6k]
  ------------------
  158|  26.7k|                break;
  159|  26.7k|            }
  160|  60.6k|            it = result->begin();
  161|  60.6k|        }
  162|  26.7k|    }
  163|       |
  164|       |    // scan_value
  165|  4.45k|    {
  166|  4.45k|        auto it = scn::ranges::begin(source);
  167|  17.4k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  17.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  17.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  17.4k|            auto result = scn::scan_value<T>(
  170|  17.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  17.4k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.45k, False: 12.9k]
  ------------------
  172|  4.45k|                break;
  173|  4.45k|            }
  174|  12.9k|            it = result->begin();
  175|  12.9k|        }
  176|  4.45k|    }
  177|  4.45k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  4.45k|{
  133|       |    // Regular scan
  134|  26.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 26.7k, False: 4.45k]
  ------------------
  135|  26.7k|        auto it = scn::ranges::begin(source);
  136|  77.8k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  77.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  77.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  77.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  77.8k|            auto result = scn::scan<T>(
  139|  77.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  77.8k|                scn::runtime_format(f));
  141|  77.8k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 26.7k, False: 51.0k]
  ------------------
  142|  26.7k|                break;
  143|  26.7k|            }
  144|  51.0k|            it = result->begin();
  145|  51.0k|        }
  146|  26.7k|    }
  147|       |
  148|       |    // scan localized
  149|  26.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 26.7k, False: 4.45k]
  ------------------
  150|  26.7k|        auto it = scn::ranges::begin(source);
  151|  77.8k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  77.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  77.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  77.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  77.8k|            auto result = scn::scan<T>(
  154|  77.8k|                global_locale,
  155|  77.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  77.8k|                scn::runtime_format(f));
  157|  77.8k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 26.7k, False: 51.0k]
  ------------------
  158|  26.7k|                break;
  159|  26.7k|            }
  160|  51.0k|            it = result->begin();
  161|  51.0k|        }
  162|  26.7k|    }
  163|       |
  164|       |    // scan_value
  165|  4.45k|    {
  166|  4.45k|        auto it = scn::ranges::begin(source);
  167|  14.2k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  14.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  14.2k|            auto result = scn::scan_value<T>(
  170|  14.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  14.2k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.45k, False: 9.80k]
  ------------------
  172|  4.45k|                break;
  173|  4.45k|            }
  174|  9.80k|            it = result->begin();
  175|  9.80k|        }
  176|  4.45k|    }
  177|  4.45k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  4.45k|{
  133|       |    // Regular scan
  134|  26.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 26.7k, False: 4.45k]
  ------------------
  135|  26.7k|        auto it = scn::ranges::begin(source);
  136|  85.9k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  85.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  85.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  85.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  85.9k|            auto result = scn::scan<T>(
  139|  85.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  85.9k|                scn::runtime_format(f));
  141|  85.9k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 26.7k, False: 59.1k]
  ------------------
  142|  26.7k|                break;
  143|  26.7k|            }
  144|  59.1k|            it = result->begin();
  145|  59.1k|        }
  146|  26.7k|    }
  147|       |
  148|       |    // scan localized
  149|  26.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 26.7k, False: 4.45k]
  ------------------
  150|  26.7k|        auto it = scn::ranges::begin(source);
  151|  85.9k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  85.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  85.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  85.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  85.9k|            auto result = scn::scan<T>(
  154|  85.9k|                global_locale,
  155|  85.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  85.9k|                scn::runtime_format(f));
  157|  85.9k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 26.7k, False: 59.1k]
  ------------------
  158|  26.7k|                break;
  159|  26.7k|            }
  160|  59.1k|            it = result->begin();
  161|  59.1k|        }
  162|  26.7k|    }
  163|       |
  164|       |    // scan_value
  165|  4.45k|    {
  166|  4.45k|        auto it = scn::ranges::begin(source);
  167|  16.9k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  16.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  16.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  16.9k|            auto result = scn::scan_value<T>(
  170|  16.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  16.9k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.45k, False: 12.4k]
  ------------------
  172|  4.45k|                break;
  173|  4.45k|            }
  174|  12.4k|            it = result->begin();
  175|  12.4k|        }
  176|  4.45k|    }
  177|  4.45k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  4.45k|{
  133|       |    // Regular scan
  134|  26.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 26.7k, False: 4.45k]
  ------------------
  135|  26.7k|        auto it = scn::ranges::begin(source);
  136|  87.3k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  87.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  87.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  87.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  87.3k|            auto result = scn::scan<T>(
  139|  87.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  87.3k|                scn::runtime_format(f));
  141|  87.3k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 26.7k, False: 60.6k]
  ------------------
  142|  26.7k|                break;
  143|  26.7k|            }
  144|  60.6k|            it = result->begin();
  145|  60.6k|        }
  146|  26.7k|    }
  147|       |
  148|       |    // scan localized
  149|  26.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 26.7k, False: 4.45k]
  ------------------
  150|  26.7k|        auto it = scn::ranges::begin(source);
  151|  87.3k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  87.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  87.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  87.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  87.3k|            auto result = scn::scan<T>(
  154|  87.3k|                global_locale,
  155|  87.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  87.3k|                scn::runtime_format(f));
  157|  87.3k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 26.7k, False: 60.6k]
  ------------------
  158|  26.7k|                break;
  159|  26.7k|            }
  160|  60.6k|            it = result->begin();
  161|  60.6k|        }
  162|  26.7k|    }
  163|       |
  164|       |    // scan_value
  165|  4.45k|    {
  166|  4.45k|        auto it = scn::ranges::begin(source);
  167|  17.4k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  17.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  17.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  17.4k|            auto result = scn::scan_value<T>(
  170|  17.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  17.4k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.45k, False: 12.9k]
  ------------------
  172|  4.45k|                break;
  173|  4.45k|            }
  174|  12.9k|            it = result->begin();
  175|  12.9k|        }
  176|  4.45k|    }
  177|  4.45k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   89|  4.45k|{
   90|  4.45k|    using char_type = ranges::range_value_t<Source>;
   91|  4.45k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  4.45k|    deque.clear();
   93|  4.45k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  4.45k|              std::back_inserter(deque));
   95|  4.45k|    return deque;
   96|  4.45k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   78|  4.45k|{
   79|       |    if constexpr (std::is_same_v<CharT, char>) {
   80|       |        return noncontiguous_buffer;
   81|       |    }
   82|  4.45k|    else {
   83|  4.45k|        return wnoncontiguous_buffer;
   84|  4.45k|    }
   85|  4.45k|}

