_ZN10fast_float19parse_number_stringIcEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  275|  1.02M|parsed_number_string_t<UC> parse_number_string(UC const *p, UC const * pend, parse_options_t<UC> options) noexcept {
  276|  1.02M|  chars_format const fmt = options.format;
  277|  1.02M|  UC const decimal_point = options.decimal_point;
  278|       |
  279|  1.02M|  parsed_number_string_t<UC> answer;
  280|  1.02M|  answer.valid = false;
  281|  1.02M|  answer.too_many_digits = false;
  282|  1.02M|  answer.negative = (*p == UC('-'));
  283|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  284|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  285|       |#else
  286|  1.02M|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (286:7): [True: 0, False: 1.02M]
  ------------------
  287|      0|#endif
  288|      0|    ++p;
  289|      0|    if (p == pend) {
  ------------------
  |  Branch (289:9): [True: 0, False: 0]
  ------------------
  290|      0|      return answer;
  291|      0|    }
  292|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (292:9): [True: 0, False: 0]
  ------------------
  293|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        return answer;
  295|      0|      }    
  296|      0|    } else {
  297|      0|      if (!is_integer(*p) && (*p != decimal_point)) { // a sign must be followed by an integer or the dot
  ------------------
  |  Branch (297:11): [True: 0, False: 0]
  |  Branch (297:30): [True: 0, False: 0]
  ------------------
  298|      0|        return answer;
  299|      0|      }
  300|      0|    }
  301|      0|  }
  302|  1.02M|  UC const * const start_digits = p;
  303|       |
  304|  1.02M|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  305|       |
  306|  5.42M|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (306:10): [True: 4.91M, False: 512k]
  |  Branch (306:25): [True: 4.40M, False: 509k]
  ------------------
  307|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  308|       |    // multiplication
  309|  4.40M|    i = 10 * i +
  310|  4.40M|        uint64_t(*p - UC('0')); // might overflow, we will handle the overflow later
  311|  4.40M|    ++p;
  312|  4.40M|  }
  313|  1.02M|  UC const * const end_of_integer_part = p;
  314|  1.02M|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  315|  1.02M|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  316|  1.02M|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|  1.02M|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (316:7): [True: 0, False: 1.02M]
  ------------------
  317|       |    // at least 1 digit in integer part, without leading zeros
  318|      0|    if (digit_count == 0 || (start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (318:9): [True: 0, False: 0]
  |  Branch (318:30): [True: 0, False: 0]
  |  Branch (318:60): [True: 0, False: 0]
  ------------------
  319|      0|      return answer;
  320|      0|    }
  321|      0|  }
  322|       |
  323|  1.02M|  int64_t exponent = 0;
  324|  1.02M|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (324:34): [True: 509k, False: 512k]
  |  Branch (324:49): [True: 190k, False: 318k]
  ------------------
  325|  1.02M|  if (has_decimal_point) {
  ------------------
  |  Branch (325:7): [True: 190k, False: 831k]
  ------------------
  326|   190k|    ++p;
  327|   190k|    UC const * before = p;
  328|       |    // can occur at most twice without overflowing, but let it occur more, since
  329|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  330|   190k|    loop_parse_if_eight_digits(p, pend, i);
  331|       |
  332|   785k|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (332:12): [True: 665k, False: 119k]
  |  Branch (332:27): [True: 594k, False: 70.9k]
  ------------------
  333|   594k|      uint8_t digit = uint8_t(*p - UC('0'));
  334|   594k|      ++p;
  335|   594k|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  336|   594k|    }
  337|   190k|    exponent = before - p;
  338|   190k|    answer.fraction = span<const UC>(before, size_t(p - before));
  339|   190k|    digit_count -= exponent;
  340|   190k|  }
  341|  1.02M|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|  1.02M|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (341:7): [True: 0, False: 1.02M]
  ------------------
  342|       |    // at least 1 digit in fractional part
  343|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (343:9): [True: 0, False: 0]
  |  Branch (343:30): [True: 0, False: 0]
  ------------------
  344|      0|      return answer;
  345|      0|    }
  346|      0|  } 
  347|  1.02M|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (347:12): [True: 0, False: 1.02M]
  ------------------
  348|      0|    return answer;
  349|      0|  }
  350|  1.02M|  int64_t exp_number = 0;            // explicit exponential part
  351|  1.02M|  if ( ((fmt & chars_format::scientific) &&
  ------------------
  |  Branch (351:9): [True: 881k, False: 139k]
  ------------------
  352|  1.02M|        (p != pend) &&
  ------------------
  |  Branch (352:9): [True: 389k, False: 492k]
  ------------------
  353|  1.02M|        ((UC('e') == *p) || (UC('E') == *p)))
  ------------------
  |  Branch (353:10): [True: 79.6k, False: 310k]
  |  Branch (353:29): [True: 51.7k, False: 258k]
  ------------------
  354|  1.02M|       ||
  355|  1.02M|       ((fmt & FASTFLOAT_FORTRANFMT) &&
  ------------------
  |  |   20|   890k|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (355:9): [True: 0, False: 890k]
  ------------------
  356|   890k|        (p != pend) &&
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|   890k|        ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) || (UC('D') == *p)))) {
  ------------------
  |  Branch (357:10): [True: 0, False: 0]
  |  Branch (357:29): [True: 0, False: 0]
  |  Branch (357:48): [True: 0, False: 0]
  |  Branch (357:67): [True: 0, False: 0]
  ------------------
  358|   131k|    UC const * location_of_e = p;
  359|   131k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) || (UC('D') == *p)) {
  ------------------
  |  Branch (359:9): [True: 79.6k, False: 51.7k]
  |  Branch (359:28): [True: 51.7k, False: 0]
  |  Branch (359:47): [True: 0, False: 0]
  |  Branch (359:66): [True: 0, False: 0]
  ------------------
  360|   131k|      ++p;
  361|   131k|    }
  362|   131k|    bool neg_exp = false;
  363|   131k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (363:9): [True: 131k, False: 135]
  |  Branch (363:24): [True: 6.69k, False: 124k]
  ------------------
  364|  6.69k|      neg_exp = true;
  365|  6.69k|      ++p;
  366|   124k|    } else if ((p != pend) && (UC('+') == *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  ------------------
  |  Branch (366:16): [True: 124k, False: 135]
  |  Branch (366:31): [True: 32.8k, False: 91.6k]
  ------------------
  367|  32.8k|      ++p;
  368|  32.8k|    }
  369|   131k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (369:9): [True: 185, False: 131k]
  |  Branch (369:24): [True: 490, False: 130k]
  ------------------
  370|    675|      if(!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (370:10): [True: 0, False: 675]
  ------------------
  371|       |        // We are in error.
  372|      0|        return answer;
  373|      0|      }
  374|       |      // Otherwise, we will be ignoring the 'e'.
  375|    675|      p = location_of_e;
  376|   130k|    } else {
  377|   415k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (377:14): [True: 320k, False: 94.2k]
  |  Branch (377:29): [True: 284k, False: 36.4k]
  ------------------
  378|   284k|        uint8_t digit = uint8_t(*p - UC('0'));
  379|   284k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (379:13): [True: 260k, False: 24.0k]
  ------------------
  380|   260k|          exp_number = 10 * exp_number + digit;
  381|   260k|        }
  382|   284k|        ++p;
  383|   284k|      }
  384|   130k|      if(neg_exp) { exp_number = - exp_number; }
  ------------------
  |  Branch (384:10): [True: 6.66k, False: 124k]
  ------------------
  385|   130k|      exponent += exp_number;
  386|   130k|    }
  387|   890k|  } else {
  388|       |    // If it scientific and not fixed, we have to bail out.
  389|   890k|    if((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) { return answer; }
  ------------------
  |  Branch (389:8): [True: 750k, False: 139k]
  |  Branch (389:44): [True: 0, False: 750k]
  ------------------
  390|   890k|  }
  391|  1.02M|  answer.lastmatch = p;
  392|  1.02M|  answer.valid = true;
  393|       |
  394|       |  // If we frequently had to deal with long strings of digits,
  395|       |  // we could extend our code by using a 128-bit integer instead
  396|       |  // of a 64-bit integer. However, this is uncommon.
  397|       |  //
  398|       |  // We can deal with up to 19 digits.
  399|  1.02M|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (399:7): [True: 170k, False: 851k]
  ------------------
  400|       |    // It is possible that the integer had an overflow.
  401|       |    // We have to handle the case where we have 0.0000somenumber.
  402|       |    // We need to be mindful of the case where we only have zeroes...
  403|       |    // E.g., 0.000000000...000.
  404|   170k|    UC const * start = start_digits;
  405|   708k|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (405:12): [True: 706k, False: 1.30k]
  |  Branch (405:32): [True: 529k, False: 177k]
  |  Branch (405:53): [True: 8.10k, False: 169k]
  ------------------
  406|   537k|      if(*start == UC('0')) { digit_count --; }
  ------------------
  |  Branch (406:10): [True: 529k, False: 8.10k]
  ------------------
  407|   537k|      start++;
  408|   537k|    }
  409|       |
  410|   170k|    if (digit_count > 19) {
  ------------------
  |  Branch (410:9): [True: 164k, False: 6.41k]
  ------------------
  411|   164k|      answer.too_many_digits = true;
  412|       |      // Let us start again, this time, avoiding overflows.
  413|       |      // We don't need to check if is_integer, since we use the
  414|       |      // pre-tokenized spans from above.
  415|   164k|      i = 0;
  416|   164k|      p = answer.integer.ptr;
  417|   164k|      UC const* int_end = p + answer.integer.len();
  418|   164k|      const uint64_t minimal_nineteen_digit_integer{ 1000000000000000000 };
  419|  1.70M|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (419:14): [True: 1.65M, False: 43.6k]
  |  Branch (419:54): [True: 1.53M, False: 120k]
  ------------------
  420|  1.53M|        i = i * 10 + uint64_t(*p - UC('0'));
  421|  1.53M|        ++p;
  422|  1.53M|      }
  423|   164k|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (423:11): [True: 43.6k, False: 120k]
  ------------------
  424|  43.6k|        exponent = end_of_integer_part - p + exp_number;
  425|  43.6k|      }
  426|   120k|      else { // We have a value with a fractional component.
  427|   120k|        p = answer.fraction.ptr;
  428|   120k|        UC const* frac_end = p + answer.fraction.len();
  429|  2.12M|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (429:16): [True: 2.00M, False: 120k]
  |  Branch (429:56): [True: 2.00M, False: 0]
  ------------------
  430|  2.00M|          i = i * 10 + uint64_t(*p - UC('0'));
  431|  2.00M|          ++p;
  432|  2.00M|        }
  433|   120k|        exponent = answer.fraction.ptr - p + exp_number;
  434|   120k|      }
  435|       |      // We have now corrected both exponent and i, to a truncated value
  436|   164k|    }
  437|   170k|  }
  438|  1.02M|  answer.exponent = exponent;
  439|  1.02M|  answer.mantissa = i;
  440|  1.02M|  return answer;
  441|  1.02M|}
_ZN10fast_float10is_integerIcEEbT_:
   35|  6.03M|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   36|  6.03M|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (36:12): [True: 151k, False: 5.87M]
  |  Branch (36:27): [True: 466k, False: 5.41M]
  ------------------
   37|  6.03M|}
_ZN10fast_float26loop_parse_if_eight_digitsERPKcS1_Rm:
  247|   190k|void loop_parse_if_eight_digits(const char*& p, const char* const pend, uint64_t& i) {
  248|       |  // optimizes better than parse_if_eight_digits_unrolled() for UC = char.
  249|   685k|  while ((std::distance(p, pend) >= 8) && is_made_of_eight_digits_fast(read8_to_u64(p))) {
  ------------------
  |  Branch (249:10): [True: 552k, False: 133k]
  |  Branch (249:43): [True: 495k, False: 57.3k]
  ------------------
  250|   495k|    i = i * 100000000 + parse_eight_digits_unrolled(read8_to_u64(p)); // in rare cases, this will overflow, but that's ok
  251|   495k|    p += 8;
  252|   495k|  }
  253|   190k|}
_ZN10fast_float28is_made_of_eight_digits_fastEm:
  169|   552k|fastfloat_really_inline constexpr bool is_made_of_eight_digits_fast(uint64_t val)  noexcept {
  170|   552k|  return !((((val + 0x4646464646464646) | (val - 0x3030303030303030)) &
  171|   552k|     0x8080808080808080));
  172|   552k|}
_ZN10fast_float12read8_to_u64IcEEmPKT_:
   53|  1.26M|uint64_t read8_to_u64(const UC *chars) {
   54|  1.26M|  if (cpp20_and_in_constexpr() || !std::is_same<UC, char>::value) {
  ------------------
  |  Branch (54:7): [Folded - Ignored]
  |  Branch (54:35): [Folded - Ignored]
  ------------------
   55|      0|    uint64_t val = 0;
   56|      0|    for(int i = 0; i < 8; ++i) {
  ------------------
  |  Branch (56:20): [True: 0, False: 0]
  ------------------
   57|      0|      val |= uint64_t(uint8_t(*chars)) << (i*8);
   58|      0|      ++chars;
   59|      0|    }
   60|      0|    return val;
   61|      0|  }
   62|  1.26M|  uint64_t val;
   63|  1.26M|  ::memcpy(&val, chars, sizeof(uint64_t));
   64|       |#if FASTFLOAT_IS_BIG_ENDIAN == 1
   65|       |  // Need to read as-if the number was in little-endian order.
   66|       |  val = byteswap(val);
   67|       |#endif
   68|  1.26M|  return val;
   69|  1.26M|}
_ZN10fast_float27parse_eight_digits_unrolledEm:
  146|   709k|uint32_t parse_eight_digits_unrolled(uint64_t val) {
  147|   709k|  const uint64_t mask = 0x000000FF000000FF;
  148|   709k|  const uint64_t mul1 = 0x000F424000000064; // 100 + (1000000ULL << 32)
  149|   709k|  const uint64_t mul2 = 0x0000271000000001; // 1 + (10000ULL << 32)
  150|   709k|  val -= 0x3030303030303030;
  151|   709k|  val = (val * 10) + (val >> 8); // val = (val * 2561) >> 8;
  152|   709k|  val = (((val & mask) * mul1) + (((val >> 16) & mask) * mul2)) >> 32;
  153|   709k|  return uint32_t(val);
  154|   709k|}
_ZN10fast_float27parse_eight_digits_unrolledIcEEjPKT_:
  160|   214k|uint32_t parse_eight_digits_unrolled(UC const * chars)  noexcept {
  161|   214k|  if (cpp20_and_in_constexpr() || !has_simd_opt<UC>()) {
  ------------------
  |  Branch (161:7): [Folded - Ignored]
  |  Branch (161:35): [Folded - Ignored]
  ------------------
  162|   214k|    return parse_eight_digits_unrolled(read8_to_u64(chars)); // truncation okay
  163|   214k|  }
  164|      0|  return parse_eight_digits_unrolled(simd_read8_to_u64(chars));
  165|   214k|}
_ZN10fast_float19parse_number_stringIDiEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  275|   227k|parsed_number_string_t<UC> parse_number_string(UC const *p, UC const * pend, parse_options_t<UC> options) noexcept {
  276|   227k|  chars_format const fmt = options.format;
  277|   227k|  UC const decimal_point = options.decimal_point;
  278|       |
  279|   227k|  parsed_number_string_t<UC> answer;
  280|   227k|  answer.valid = false;
  281|   227k|  answer.too_many_digits = false;
  282|   227k|  answer.negative = (*p == UC('-'));
  283|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  284|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  285|       |#else
  286|   227k|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (286:7): [True: 0, False: 227k]
  ------------------
  287|      0|#endif
  288|      0|    ++p;
  289|      0|    if (p == pend) {
  ------------------
  |  Branch (289:9): [True: 0, False: 0]
  ------------------
  290|      0|      return answer;
  291|      0|    }
  292|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (292:9): [True: 0, False: 0]
  ------------------
  293|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        return answer;
  295|      0|      }    
  296|      0|    } else {
  297|      0|      if (!is_integer(*p) && (*p != decimal_point)) { // a sign must be followed by an integer or the dot
  ------------------
  |  Branch (297:11): [True: 0, False: 0]
  |  Branch (297:30): [True: 0, False: 0]
  ------------------
  298|      0|        return answer;
  299|      0|      }
  300|      0|    }
  301|      0|  }
  302|   227k|  UC const * const start_digits = p;
  303|       |
  304|   227k|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  305|       |
  306|   476k|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (306:10): [True: 317k, False: 159k]
  |  Branch (306:25): [True: 248k, False: 68.4k]
  ------------------
  307|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  308|       |    // multiplication
  309|   248k|    i = 10 * i +
  310|   248k|        uint64_t(*p - UC('0')); // might overflow, we will handle the overflow later
  311|   248k|    ++p;
  312|   248k|  }
  313|   227k|  UC const * const end_of_integer_part = p;
  314|   227k|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  315|   227k|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  316|   227k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   227k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (316:7): [True: 0, False: 227k]
  ------------------
  317|       |    // at least 1 digit in integer part, without leading zeros
  318|      0|    if (digit_count == 0 || (start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (318:9): [True: 0, False: 0]
  |  Branch (318:30): [True: 0, False: 0]
  |  Branch (318:60): [True: 0, False: 0]
  ------------------
  319|      0|      return answer;
  320|      0|    }
  321|      0|  }
  322|       |
  323|   227k|  int64_t exponent = 0;
  324|   227k|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (324:34): [True: 68.4k, False: 159k]
  |  Branch (324:49): [True: 612, False: 67.8k]
  ------------------
  325|   227k|  if (has_decimal_point) {
  ------------------
  |  Branch (325:7): [True: 612, False: 226k]
  ------------------
  326|    612|    ++p;
  327|    612|    UC const * before = p;
  328|       |    // can occur at most twice without overflowing, but let it occur more, since
  329|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  330|    612|    loop_parse_if_eight_digits(p, pend, i);
  331|       |
  332|  2.98k|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (332:12): [True: 2.50k, False: 482]
  |  Branch (332:27): [True: 2.37k, False: 130]
  ------------------
  333|  2.37k|      uint8_t digit = uint8_t(*p - UC('0'));
  334|  2.37k|      ++p;
  335|  2.37k|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  336|  2.37k|    }
  337|    612|    exponent = before - p;
  338|    612|    answer.fraction = span<const UC>(before, size_t(p - before));
  339|    612|    digit_count -= exponent;
  340|    612|  }
  341|   227k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   227k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (341:7): [True: 0, False: 227k]
  ------------------
  342|       |    // at least 1 digit in fractional part
  343|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (343:9): [True: 0, False: 0]
  |  Branch (343:30): [True: 0, False: 0]
  ------------------
  344|      0|      return answer;
  345|      0|    }
  346|      0|  } 
  347|   227k|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (347:12): [True: 0, False: 227k]
  ------------------
  348|      0|    return answer;
  349|      0|  }
  350|   227k|  int64_t exp_number = 0;            // explicit exponential part
  351|   227k|  if ( ((fmt & chars_format::scientific) &&
  ------------------
  |  Branch (351:9): [True: 178k, False: 48.8k]
  ------------------
  352|   227k|        (p != pend) &&
  ------------------
  |  Branch (352:9): [True: 67.9k, False: 110k]
  ------------------
  353|   227k|        ((UC('e') == *p) || (UC('E') == *p)))
  ------------------
  |  Branch (353:10): [True: 140, False: 67.7k]
  |  Branch (353:29): [True: 6.97k, False: 60.8k]
  ------------------
  354|   227k|       ||
  355|   227k|       ((fmt & FASTFLOAT_FORTRANFMT) &&
  ------------------
  |  |   20|   220k|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (355:9): [True: 0, False: 220k]
  ------------------
  356|   220k|        (p != pend) &&
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|   220k|        ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) || (UC('D') == *p)))) {
  ------------------
  |  Branch (357:10): [True: 0, False: 0]
  |  Branch (357:29): [True: 0, False: 0]
  |  Branch (357:48): [True: 0, False: 0]
  |  Branch (357:67): [True: 0, False: 0]
  ------------------
  358|  7.11k|    UC const * location_of_e = p;
  359|  7.11k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) || (UC('D') == *p)) {
  ------------------
  |  Branch (359:9): [True: 140, False: 6.97k]
  |  Branch (359:28): [True: 6.97k, False: 0]
  |  Branch (359:47): [True: 0, False: 0]
  |  Branch (359:66): [True: 0, False: 0]
  ------------------
  360|  7.11k|      ++p;
  361|  7.11k|    }
  362|  7.11k|    bool neg_exp = false;
  363|  7.11k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (363:9): [True: 7.09k, False: 20]
  |  Branch (363:24): [True: 1.50k, False: 5.59k]
  ------------------
  364|  1.50k|      neg_exp = true;
  365|  1.50k|      ++p;
  366|  5.61k|    } else if ((p != pend) && (UC('+') == *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  ------------------
  |  Branch (366:16): [True: 5.59k, False: 20]
  |  Branch (366:31): [True: 150, False: 5.44k]
  ------------------
  367|    150|      ++p;
  368|    150|    }
  369|  7.11k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (369:9): [True: 30, False: 7.08k]
  |  Branch (369:24): [True: 345, False: 6.74k]
  ------------------
  370|    375|      if(!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (370:10): [True: 0, False: 375]
  ------------------
  371|       |        // We are in error.
  372|      0|        return answer;
  373|      0|      }
  374|       |      // Otherwise, we will be ignoring the 'e'.
  375|    375|      p = location_of_e;
  376|  6.74k|    } else {
  377|  24.3k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (377:14): [True: 19.6k, False: 4.74k]
  |  Branch (377:29): [True: 17.6k, False: 2.00k]
  ------------------
  378|  17.6k|        uint8_t digit = uint8_t(*p - UC('0'));
  379|  17.6k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (379:13): [True: 17.1k, False: 488]
  ------------------
  380|  17.1k|          exp_number = 10 * exp_number + digit;
  381|  17.1k|        }
  382|  17.6k|        ++p;
  383|  17.6k|      }
  384|  6.74k|      if(neg_exp) { exp_number = - exp_number; }
  ------------------
  |  Branch (384:10): [True: 1.48k, False: 5.26k]
  ------------------
  385|  6.74k|      exponent += exp_number;
  386|  6.74k|    }
  387|   220k|  } else {
  388|       |    // If it scientific and not fixed, we have to bail out.
  389|   220k|    if((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) { return answer; }
  ------------------
  |  Branch (389:8): [True: 171k, False: 48.8k]
  |  Branch (389:44): [True: 0, False: 171k]
  ------------------
  390|   220k|  }
  391|   227k|  answer.lastmatch = p;
  392|   227k|  answer.valid = true;
  393|       |
  394|       |  // If we frequently had to deal with long strings of digits,
  395|       |  // we could extend our code by using a 128-bit integer instead
  396|       |  // of a 64-bit integer. However, this is uncommon.
  397|       |  //
  398|       |  // We can deal with up to 19 digits.
  399|   227k|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (399:7): [True: 216, False: 227k]
  ------------------
  400|       |    // It is possible that the integer had an overflow.
  401|       |    // We have to handle the case where we have 0.0000somenumber.
  402|       |    // We need to be mindful of the case where we only have zeroes...
  403|       |    // E.g., 0.000000000...000.
  404|    216|    UC const * start = start_digits;
  405|    216|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (405:12): [True: 216, False: 0]
  |  Branch (405:32): [True: 0, False: 216]
  |  Branch (405:53): [True: 0, False: 216]
  ------------------
  406|      0|      if(*start == UC('0')) { digit_count --; }
  ------------------
  |  Branch (406:10): [True: 0, False: 0]
  ------------------
  407|      0|      start++;
  408|      0|    }
  409|       |
  410|    216|    if (digit_count > 19) {
  ------------------
  |  Branch (410:9): [True: 216, False: 0]
  ------------------
  411|    216|      answer.too_many_digits = true;
  412|       |      // Let us start again, this time, avoiding overflows.
  413|       |      // We don't need to check if is_integer, since we use the
  414|       |      // pre-tokenized spans from above.
  415|    216|      i = 0;
  416|    216|      p = answer.integer.ptr;
  417|    216|      UC const* int_end = p + answer.integer.len();
  418|    216|      const uint64_t minimal_nineteen_digit_integer{ 1000000000000000000 };
  419|  3.81k|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (419:14): [True: 3.67k, False: 144]
  |  Branch (419:54): [True: 3.60k, False: 72]
  ------------------
  420|  3.60k|        i = i * 10 + uint64_t(*p - UC('0'));
  421|  3.60k|        ++p;
  422|  3.60k|      }
  423|    216|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (423:11): [True: 144, False: 72]
  ------------------
  424|    144|        exponent = end_of_integer_part - p + exp_number;
  425|    144|      }
  426|     72|      else { // We have a value with a fractional component.
  427|     72|        p = answer.fraction.ptr;
  428|     72|        UC const* frac_end = p + answer.fraction.len();
  429|    576|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (429:16): [True: 504, False: 72]
  |  Branch (429:56): [True: 504, False: 0]
  ------------------
  430|    504|          i = i * 10 + uint64_t(*p - UC('0'));
  431|    504|          ++p;
  432|    504|        }
  433|     72|        exponent = answer.fraction.ptr - p + exp_number;
  434|     72|      }
  435|       |      // We have now corrected both exponent and i, to a truncated value
  436|    216|    }
  437|    216|  }
  438|   227k|  answer.exponent = exponent;
  439|   227k|  answer.mantissa = i;
  440|   227k|  return answer;
  441|   227k|}
_ZN10fast_float10is_integerIDiEEbT_:
   35|   346k|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   36|   346k|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (36:12): [True: 69.8k, False: 276k]
  |  Branch (36:27): [True: 1.00k, False: 275k]
  ------------------
   37|   346k|}
_ZN10fast_float26loop_parse_if_eight_digitsIDiLi0EEEvRPKT_S3_Rm:
  237|    612|void loop_parse_if_eight_digits(const UC*& p, const UC* const pend, uint64_t& i) {
  238|    612|  if (!has_simd_opt<UC>()) {
  ------------------
  |  Branch (238:7): [Folded - Ignored]
  ------------------
  239|    612|    return;
  240|    612|  }
  241|      0|  while ((std::distance(p, pend) >= 8) && simd_parse_if_eight_digits_unrolled(p, i)) { // in rare cases, this will overflow, but that's ok
  ------------------
  |  Branch (241:10): [True: 0, False: 0]
  |  Branch (241:43): [True: 0, False: 0]
  ------------------
  242|      0|    p += 8;
  243|      0|  }
  244|      0|}

_ZN10fast_float6bigintC2Ev:
  412|  57.9k|  FASTFLOAT_CONSTEXPR20 bigint(): vec() {}
_ZN10fast_float8stackvecILt62EEC2Ev:
   46|   123k|  stackvec() = default;
_ZN10fast_float6bigint3mulEm:
  563|   192k|  FASTFLOAT_CONSTEXPR20 bool mul(limb y) noexcept {
  564|   192k|    return small_mul(vec, y);
  565|   192k|  }
_ZN10fast_float9small_mulILt62EEEbRNS_8stackvecIXT_EEEm:
  282|   282k|bool small_mul(stackvec<size>& vec, limb y) noexcept {
  283|   282k|  limb carry = 0;
  284|  1.10M|  for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (284:26): [True: 823k, False: 282k]
  ------------------
  285|   823k|    vec[index] = scalar_mul(vec[index], y, carry);
  286|   823k|  }
  287|   282k|  if (carry != 0) {
  ------------------
  |  Branch (287:7): [True: 161k, False: 121k]
  ------------------
  288|   161k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|   161k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 161k]
  |  |  ------------------
  ------------------
  289|   161k|  }
  290|   282k|  return true;
  291|   282k|}
_ZNK10fast_float8stackvecILt62EE3lenEv:
   76|  2.14M|  constexpr size_t len() const noexcept {
   77|  2.14M|    return length;
   78|  2.14M|  }
_ZN10fast_float10scalar_mulEmmRm:
  229|   823k|limb scalar_mul(limb x, limb y, limb& carry) noexcept {
  230|   823k|#ifdef FASTFLOAT_64BIT_LIMB
  231|   823k|  #if defined(__SIZEOF_INT128__)
  232|       |  // GCC and clang both define it as an extension.
  233|   823k|  __uint128_t z = __uint128_t(x) * __uint128_t(y) + __uint128_t(carry);
  234|   823k|  carry = limb(z >> limb_bits);
  235|   823k|  return limb(z);
  236|       |  #else
  237|       |  // fallback, no native 128-bit integer multiplication with carry.
  238|       |  // on msvc, this optimizes identically, somehow.
  239|       |  value128 z = full_multiplication(x, y);
  240|       |  bool overflow;
  241|       |  z.low = scalar_add(z.low, carry, overflow);
  242|       |  z.high += uint64_t(overflow);  // cannot overflow
  243|       |  carry = z.high;
  244|       |  return z.low;
  245|       |  #endif
  246|       |#else
  247|       |  uint64_t z = uint64_t(x) * uint64_t(y) + uint64_t(carry);
  248|       |  carry = limb(z >> limb_bits);
  249|       |  return limb(z);
  250|       |#endif
  251|   823k|}
_ZN10fast_float8stackvecILt62EEixEm:
   57|  2.27M|  FASTFLOAT_CONSTEXPR14 limb& operator[](size_t index) noexcept {
   58|  2.27M|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|  2.27M|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   59|  2.27M|    return data[index];
   60|  2.27M|  }
_ZN10fast_float8stackvecILt62EE8try_pushEm:
   91|   231k|  FASTFLOAT_CONSTEXPR14 bool try_push(limb value) noexcept {
   92|   231k|    if (len() < capacity()) {
  ------------------
  |  Branch (92:9): [True: 231k, False: 0]
  ------------------
   93|   231k|      push_unchecked(value);
   94|   231k|      return true;
   95|   231k|    } else {
   96|      0|      return false;
   97|      0|    }
   98|   231k|  }
_ZNK10fast_float8stackvecILt62EE8capacityEv:
   82|   266k|  constexpr size_t capacity() const noexcept {
   83|   266k|    return size;
   84|   266k|  }
_ZN10fast_float8stackvecILt62EE14push_uncheckedEm:
   86|   284k|  FASTFLOAT_CONSTEXPR14 void push_unchecked(limb value) noexcept {
   87|   284k|    data[length] = value;
   88|   284k|    length++;
   89|   284k|  }
_ZN10fast_float6bigint3addEm:
  567|   192k|  FASTFLOAT_CONSTEXPR20 bool add(limb y) noexcept {
  568|   192k|    return small_add(vec, y);
  569|   192k|  }
_ZN10fast_float9small_addILt62EEEbRNS_8stackvecIXT_EEEm:
  275|   192k|bool small_add(stackvec<size>& vec, limb y) noexcept {
  276|   192k|  return small_add_from(vec, y, 0);
  277|   192k|}
_ZN10fast_float14small_add_fromILt62EEEbRNS_8stackvecIXT_EEEmm:
  257|   192k|bool small_add_from(stackvec<size>& vec, limb y, size_t start) noexcept {
  258|   192k|  size_t index = start;
  259|   192k|  limb carry = y;
  260|   192k|  bool overflow;
  261|   294k|  while (carry != 0 && index < vec.len()) {
  ------------------
  |  Branch (261:10): [True: 159k, False: 135k]
  |  Branch (261:24): [True: 101k, False: 57.9k]
  ------------------
  262|   101k|    vec[index] = scalar_add(vec[index], carry, overflow);
  263|   101k|    carry = limb(overflow);
  264|   101k|    index += 1;
  265|   101k|  }
  266|   192k|  if (carry != 0) {
  ------------------
  |  Branch (266:7): [True: 57.9k, False: 135k]
  ------------------
  267|  57.9k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|  57.9k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 57.9k]
  |  |  ------------------
  ------------------
  268|  57.9k|  }
  269|   192k|  return true;
  270|   192k|}
_ZN10fast_float10scalar_addEmmRb:
  209|   232k|limb scalar_add(limb x, limb y, bool& overflow) noexcept {
  210|   232k|  limb z;
  211|       |// gcc and clang
  212|   232k|#if defined(__has_builtin)
  213|   232k|  #if __has_builtin(__builtin_add_overflow)
  214|   232k|    if (!cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (214:9): [Folded - Ignored]
  ------------------
  215|   232k|      overflow = __builtin_add_overflow(x, y, &z);
  216|   232k|      return z;
  217|   232k|    }
  218|      0|  #endif
  219|      0|#endif
  220|       |
  221|       |  // generic, this still optimizes correctly on MSVC.
  222|      0|  z = x + y;
  223|      0|  overflow = z < x;
  224|      0|  return z;
  225|   232k|}
_ZN10fast_float6bigint5pow10Ej:
  609|  4.96k|  FASTFLOAT_CONSTEXPR20 bool pow10(uint32_t exp) noexcept {
  610|  4.96k|    FASTFLOAT_TRY(pow5(exp));
  ------------------
  |  |  178|  4.96k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 4.96k]
  |  |  ------------------
  ------------------
  611|  4.96k|    return pow2(exp);
  612|  4.96k|  }
_ZN10fast_float6bigint4pow5Ej:
  577|  57.9k|  FASTFLOAT_CONSTEXPR20 bool pow5(uint32_t exp) noexcept {
  578|       |    // multiply by a power of 5
  579|  57.9k|    size_t large_length = sizeof(large_power_of_5) / sizeof(limb);
  580|  57.9k|    limb_span large = limb_span(large_power_of_5, large_length);
  581|  61.1k|    while (exp >= large_step) {
  ------------------
  |  Branch (581:12): [True: 3.22k, False: 57.9k]
  ------------------
  582|  3.22k|      FASTFLOAT_TRY(large_mul(vec, large));
  ------------------
  |  |  178|  3.22k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 3.22k]
  |  |  ------------------
  ------------------
  583|  3.22k|      exp -= large_step;
  584|  3.22k|    }
  585|  57.9k|#ifdef FASTFLOAT_64BIT_LIMB
  586|  57.9k|    uint32_t small_step = 27;
  587|  57.9k|    limb max_native = 7450580596923828125UL;
  588|       |#else
  589|       |    uint32_t small_step = 13;
  590|       |    limb max_native = 1220703125U;
  591|       |#endif
  592|  81.8k|    while (exp >= small_step) {
  ------------------
  |  Branch (592:12): [True: 23.9k, False: 57.9k]
  ------------------
  593|  23.9k|      FASTFLOAT_TRY(small_mul(vec, max_native));
  ------------------
  |  |  178|  23.9k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 23.9k]
  |  |  ------------------
  ------------------
  594|  23.9k|      exp -= small_step;
  595|  23.9k|    }
  596|  57.9k|    if (exp != 0) {
  ------------------
  |  Branch (596:9): [True: 49.8k, False: 8.11k]
  ------------------
  597|       |      // Work around clang bug https://godbolt.org/z/zedh7rrhc
  598|       |      // This is similar to https://github.com/llvm/llvm-project/issues/47746,
  599|       |      // except the workaround described there don't work here
  600|  49.8k|      FASTFLOAT_TRY(
  ------------------
  |  |  178|  49.8k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 49.8k]
  |  |  ------------------
  ------------------
  601|  49.8k|        small_mul(vec, limb(((void)small_power_of_5[0], small_power_of_5[exp])))
  602|  49.8k|      );
  603|  49.8k|    }
  604|       |
  605|  57.9k|    return true;
  606|  57.9k|  }
_ZN10fast_float9large_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  364|  3.22k|bool large_mul(stackvec<size>& x, limb_span y) noexcept {
  365|  3.22k|  if (y.len() == 1) {
  ------------------
  |  Branch (365:7): [True: 0, False: 3.22k]
  ------------------
  366|      0|    FASTFLOAT_TRY(small_mul(x, y[0]));
  ------------------
  |  |  178|      0|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  367|  3.22k|  } else {
  368|  3.22k|    FASTFLOAT_TRY(long_mul(x, y));
  ------------------
  |  |  178|  3.22k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 3.22k]
  |  |  ------------------
  ------------------
  369|  3.22k|  }
  370|  3.22k|  return true;
  371|  3.22k|}
_ZN10fast_float8long_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  335|  3.22k|bool long_mul(stackvec<size>& x, limb_span y) noexcept {
  336|  3.22k|  limb_span xs = limb_span(x.data, x.len());
  337|  3.22k|  stackvec<size> z(xs);
  338|  3.22k|  limb_span zs = limb_span(z.data, z.len());
  339|       |
  340|  3.22k|  if (y.len() != 0) {
  ------------------
  |  Branch (340:7): [True: 3.22k, False: 0]
  ------------------
  341|  3.22k|    limb y0 = y[0];
  342|  3.22k|    FASTFLOAT_TRY(small_mul(x, y0));
  ------------------
  |  |  178|  3.22k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 3.22k]
  |  |  ------------------
  ------------------
  343|  16.1k|    for (size_t index = 1; index < y.len(); index++) {
  ------------------
  |  Branch (343:28): [True: 12.8k, False: 3.22k]
  ------------------
  344|  12.8k|      limb yi = y[index];
  345|  12.8k|      stackvec<size> zi;
  346|  12.8k|      if (yi != 0) {
  ------------------
  |  Branch (346:11): [True: 12.8k, False: 0]
  ------------------
  347|       |        // re-use the same buffer throughout
  348|  12.8k|        zi.set_len(0);
  349|  12.8k|        FASTFLOAT_TRY(zi.try_extend(zs));
  ------------------
  |  |  178|  12.8k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 12.8k]
  |  |  ------------------
  ------------------
  350|  12.8k|        FASTFLOAT_TRY(small_mul(zi, yi));
  ------------------
  |  |  178|  12.8k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 12.8k]
  |  |  ------------------
  ------------------
  351|  12.8k|        limb_span zis = limb_span(zi.data, zi.len());
  352|  12.8k|        FASTFLOAT_TRY(large_add_from(x, zis, index));
  ------------------
  |  |  178|  12.8k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 12.8k]
  |  |  ------------------
  ------------------
  353|  12.8k|      }
  354|  12.8k|    }
  355|  3.22k|  }
  356|       |
  357|  3.22k|  x.normalize();
  358|  3.22k|  return true;
  359|  3.22k|}
_ZN10fast_float8stackvecILt62EEC2ENS_4spanImEE:
   53|  3.22k|  FASTFLOAT_CONSTEXPR20 stackvec(limb_span s) {
   54|  3.22k|    FASTFLOAT_ASSERT(try_extend(s));
  ------------------
  |  |  170|  3.22k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
   55|  3.22k|  }
_ZN10fast_float8stackvecILt62EE7set_lenEm:
   73|  47.8k|  FASTFLOAT_CONSTEXPR14 void set_len(size_t len) noexcept {
   74|  47.8k|    length = uint16_t(len);
   75|  47.8k|  }
_ZN10fast_float8stackvecILt62EE10try_extendENS_4spanImEE:
  106|  16.1k|  FASTFLOAT_CONSTEXPR20 bool try_extend(limb_span s) noexcept {
  107|  16.1k|    if (len() + s.len() <= capacity()) {
  ------------------
  |  Branch (107:9): [True: 16.1k, False: 0]
  ------------------
  108|  16.1k|      extend_unchecked(s);
  109|  16.1k|      return true;
  110|  16.1k|    } else {
  111|      0|      return false;
  112|      0|    }
  113|  16.1k|  }
_ZN10fast_float8stackvecILt62EE16extend_uncheckedENS_4spanImEE:
  100|  16.1k|  FASTFLOAT_CONSTEXPR20 void extend_unchecked(limb_span s) noexcept {
  101|  16.1k|    limb* ptr = data + length;
  102|  16.1k|    std::copy_n(s.ptr, s.len(), ptr);
  103|  16.1k|    set_len(len() + s.len());
  104|  16.1k|  }
_ZN10fast_float14large_add_fromILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEEm:
  297|  12.8k|bool large_add_from(stackvec<size>& x, limb_span y, size_t start) noexcept {
  298|       |  // the effective x buffer is from `xstart..x.len()`, so exit early
  299|       |  // if we can't get that current range.
  300|  12.8k|  if (x.len() < start || y.len() > x.len() - start) {
  ------------------
  |  Branch (300:7): [True: 0, False: 12.8k]
  |  Branch (300:26): [True: 12.7k, False: 182]
  ------------------
  301|  12.7k|      FASTFLOAT_TRY(x.try_resize(y.len() + start, 0));
  ------------------
  |  |  178|  12.7k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 12.7k]
  |  |  ------------------
  ------------------
  302|  12.7k|  }
  303|       |
  304|  12.8k|  bool carry = false;
  305|   108k|  for (size_t index = 0; index < y.len(); index++) {
  ------------------
  |  Branch (305:26): [True: 95.2k, False: 12.8k]
  ------------------
  306|  95.2k|    limb xi = x[index + start];
  307|  95.2k|    limb yi = y[index];
  308|  95.2k|    bool c1 = false;
  309|  95.2k|    bool c2 = false;
  310|  95.2k|    xi = scalar_add(xi, yi, c1);
  311|  95.2k|    if (carry) {
  ------------------
  |  Branch (311:9): [True: 36.1k, False: 59.1k]
  ------------------
  312|  36.1k|      xi = scalar_add(xi, 1, c2);
  313|  36.1k|    }
  314|  95.2k|    x[index + start] = xi;
  315|  95.2k|    carry = c1 | c2;
  316|  95.2k|  }
  317|       |
  318|       |  // handle overflow
  319|  12.8k|  if (carry) {
  ------------------
  |  Branch (319:7): [True: 0, False: 12.8k]
  ------------------
  320|      0|    FASTFLOAT_TRY(small_add_from(x, 1, y.len() + start));
  ------------------
  |  |  178|      0|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  321|      0|  }
  322|  12.8k|  return true;
  323|  12.8k|}
_ZN10fast_float8stackvecILt62EE10try_resizeEmm:
  130|  12.7k|  FASTFLOAT_CONSTEXPR20 bool try_resize(size_t new_len, limb value) noexcept {
  131|  12.7k|    if (new_len > capacity()) {
  ------------------
  |  Branch (131:9): [True: 0, False: 12.7k]
  ------------------
  132|      0|      return false;
  133|  12.7k|    } else {
  134|  12.7k|      resize_unchecked(new_len, value);
  135|  12.7k|      return true;
  136|  12.7k|    }
  137|  12.7k|  }
_ZN10fast_float8stackvecILt62EE16resize_uncheckedEmm:
  118|  12.7k|  void resize_unchecked(size_t new_len, limb value) noexcept {
  119|  12.7k|    if (new_len > len()) {
  ------------------
  |  Branch (119:9): [True: 12.7k, False: 0]
  ------------------
  120|  12.7k|      size_t count = new_len - len();
  121|  12.7k|      limb* first = data + len();
  122|  12.7k|      limb* last = first + count;
  123|  12.7k|      ::std::fill(first, last, value);
  124|  12.7k|      set_len(new_len);
  125|  12.7k|    } else {
  126|      0|      set_len(new_len);
  127|      0|    }
  128|  12.7k|  }
_ZN10fast_float8stackvecILt62EE9normalizeEv:
  151|  56.1k|  FASTFLOAT_CONSTEXPR14 void normalize() noexcept {
  152|  56.1k|    while (len() > 0 && rindex(0) == 0) {
  ------------------
  |  Branch (152:12): [True: 56.1k, False: 0]
  |  Branch (152:25): [True: 0, False: 56.1k]
  ------------------
  153|      0|      length--;
  154|      0|    }
  155|  56.1k|  }
_ZNK10fast_float8stackvecILt62EE6rindexEm:
   66|  70.1k|  FASTFLOAT_CONSTEXPR14 const limb& rindex(size_t index) const noexcept {
   67|  70.1k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|  70.1k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   68|  70.1k|    size_t rindex = length - index - 1;
   69|  70.1k|    return data[rindex];
   70|  70.1k|  }
_ZN10fast_float6bigint4pow2Ej:
  572|  57.8k|  FASTFLOAT_CONSTEXPR20 bool pow2(uint32_t exp) noexcept {
  573|  57.8k|    return shl(exp);
  574|  57.8k|  }
_ZN10fast_float6bigint3shlEm:
  530|  57.8k|  FASTFLOAT_CONSTEXPR20 bool shl(size_t n) noexcept {
  531|  57.8k|    size_t rem = n % limb_bits;
  532|  57.8k|    size_t div = n / limb_bits;
  533|  57.8k|    if (rem != 0) {
  ------------------
  |  Branch (533:9): [True: 52.9k, False: 4.87k]
  ------------------
  534|  52.9k|      FASTFLOAT_TRY(shl_bits(rem));
  ------------------
  |  |  178|  52.9k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 52.9k]
  |  |  ------------------
  ------------------
  535|  52.9k|    }
  536|  57.8k|    if (div != 0) {
  ------------------
  |  Branch (536:9): [True: 6.13k, False: 51.7k]
  ------------------
  537|  6.13k|      FASTFLOAT_TRY(shl_limbs(div));
  ------------------
  |  |  178|  6.13k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 6.13k]
  |  |  ------------------
  ------------------
  538|  6.13k|    }
  539|  57.8k|    return true;
  540|  57.8k|  }
_ZN10fast_float6bigint8shl_bitsEm:
  483|  52.9k|  FASTFLOAT_CONSTEXPR20 bool shl_bits(size_t n) noexcept {
  484|       |    // Internally, for each item, we shift left by n, and add the previous
  485|       |    // right shifted limb-bits.
  486|       |    // For example, we transform (for u8) shifted left 2, to:
  487|       |    //      b10100100 b01000010
  488|       |    //      b10 b10010001 b00001000
  489|  52.9k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  174|  52.9k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  490|  52.9k|    FASTFLOAT_DEBUG_ASSERT(n < sizeof(limb) * 8);
  ------------------
  |  |  174|  52.9k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  491|       |
  492|  52.9k|    size_t shl = n;
  493|  52.9k|    size_t shr = limb_bits - shl;
  494|  52.9k|    limb prev = 0;
  495|   172k|    for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (495:28): [True: 119k, False: 52.9k]
  ------------------
  496|   119k|      limb xi = vec[index];
  497|   119k|      vec[index] = (xi << shl) | (prev >> shr);
  498|   119k|      prev = xi;
  499|   119k|    }
  500|       |
  501|  52.9k|    limb carry = prev >> shr;
  502|  52.9k|    if (carry != 0) {
  ------------------
  |  Branch (502:9): [True: 12.1k, False: 40.7k]
  ------------------
  503|  12.1k|      return vec.try_push(carry);
  504|  12.1k|    }
  505|  40.7k|    return true;
  506|  52.9k|  }
_ZN10fast_float6bigint9shl_limbsEm:
  509|  6.13k|  FASTFLOAT_CONSTEXPR20 bool shl_limbs(size_t n) noexcept {
  510|  6.13k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  174|  6.13k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  511|  6.13k|    if (n + vec.len() > vec.capacity()) {
  ------------------
  |  Branch (511:9): [True: 0, False: 6.13k]
  ------------------
  512|      0|      return false;
  513|  6.13k|    } else if (!vec.is_empty()) {
  ------------------
  |  Branch (513:16): [True: 6.13k, False: 0]
  ------------------
  514|       |      // move limbs
  515|  6.13k|      limb* dst = vec.data + n;
  516|  6.13k|      const limb* src = vec.data;
  517|  6.13k|      std::copy_backward(src, src + vec.len(), dst + vec.len());
  518|       |      // fill in empty limbs
  519|  6.13k|      limb* first = vec.data;
  520|  6.13k|      limb* last = first + n;
  521|  6.13k|      ::std::fill(first, last, 0);
  522|  6.13k|      vec.set_len(n + vec.len());
  523|  6.13k|      return true;
  524|  6.13k|    } else {
  525|      0|      return true;
  526|      0|    }
  527|  6.13k|  }
_ZNK10fast_float8stackvecILt62EE8is_emptyEv:
   79|  11.0k|  constexpr bool is_empty() const noexcept {
   80|  11.0k|    return length == 0;
   81|  11.0k|  }
_ZNK10fast_float6bigint4hi64ERb:
  430|  4.96k|  FASTFLOAT_CONSTEXPR20 uint64_t hi64(bool& truncated) const noexcept {
  431|  4.96k|#ifdef FASTFLOAT_64BIT_LIMB
  432|  4.96k|    if (vec.len() == 0) {
  ------------------
  |  Branch (432:9): [True: 0, False: 4.96k]
  ------------------
  433|      0|      return empty_hi64(truncated);
  434|  4.96k|    } else if (vec.len() == 1) {
  ------------------
  |  Branch (434:16): [True: 1.37k, False: 3.59k]
  ------------------
  435|  1.37k|      return uint64_hi64(vec.rindex(0), truncated);
  436|  3.59k|    } else {
  437|  3.59k|      uint64_t result = uint64_hi64(vec.rindex(0), vec.rindex(1), truncated);
  438|  3.59k|      truncated |= vec.nonzero(2);
  439|  3.59k|      return result;
  440|  3.59k|    }
  441|       |#else
  442|       |    if (vec.len() == 0) {
  443|       |      return empty_hi64(truncated);
  444|       |    } else if (vec.len() == 1) {
  445|       |      return uint32_hi64(vec.rindex(0), truncated);
  446|       |    } else if (vec.len() == 2) {
  447|       |      return uint32_hi64(vec.rindex(0), vec.rindex(1), truncated);
  448|       |    } else {
  449|       |      uint64_t result = uint32_hi64(vec.rindex(0), vec.rindex(1), vec.rindex(2), truncated);
  450|       |      truncated |= vec.nonzero(3);
  451|       |      return result;
  452|       |    }
  453|       |#endif
  454|  4.96k|  }
_ZN10fast_float11uint64_hi64EmRb:
  165|  1.37k|uint64_t uint64_hi64(uint64_t r0, bool& truncated) noexcept {
  166|  1.37k|  truncated = false;
  167|  1.37k|  int shl = leading_zeroes(r0);
  168|  1.37k|  return r0 << shl;
  169|  1.37k|}
_ZN10fast_float11uint64_hi64EmmRb:
  172|  3.59k|uint64_t uint64_hi64(uint64_t r0, uint64_t r1, bool& truncated) noexcept {
  173|  3.59k|  int shl = leading_zeroes(r0);
  174|  3.59k|  if (shl == 0) {
  ------------------
  |  Branch (174:7): [True: 36, False: 3.55k]
  ------------------
  175|     36|    truncated = r1 != 0;
  176|     36|    return r0;
  177|  3.55k|  } else {
  178|  3.55k|    int shr = 64 - shl;
  179|  3.55k|    truncated = (r1 << shl) != 0;
  180|  3.55k|    return (r0 << shl) | (r1 >> shr);
  181|  3.55k|  }
  182|  3.59k|}
_ZNK10fast_float8stackvecILt62EE7nonzeroEm:
  141|  3.59k|  FASTFLOAT_CONSTEXPR14 bool nonzero(size_t index) const noexcept {
  142|  3.63k|    while (index < len()) {
  ------------------
  |  Branch (142:12): [True: 479, False: 3.15k]
  ------------------
  143|    479|      if (rindex(index) != 0) {
  ------------------
  |  Branch (143:11): [True: 441, False: 38]
  ------------------
  144|    441|        return true;
  145|    441|      }
  146|     38|      index++;
  147|     38|    }
  148|  3.15k|    return false;
  149|  3.59k|  }
_ZNK10fast_float6bigint10bit_lengthEv:
  558|  4.96k|  FASTFLOAT_CONSTEXPR20 int bit_length() const noexcept {
  559|  4.96k|    int lz = ctlz();
  560|  4.96k|    return int(limb_bits * vec.len()) - lz;
  561|  4.96k|  }
_ZNK10fast_float6bigint4ctlzEv:
  543|  4.96k|  FASTFLOAT_CONSTEXPR20 int ctlz() const noexcept {
  544|  4.96k|    if (vec.is_empty()) {
  ------------------
  |  Branch (544:9): [True: 0, False: 4.96k]
  ------------------
  545|      0|      return 0;
  546|  4.96k|    } else {
  547|  4.96k|#ifdef FASTFLOAT_64BIT_LIMB
  548|  4.96k|      return leading_zeroes(vec.rindex(0));
  549|       |#else
  550|       |      // no use defining a specialized leading_zeroes for a 32-bit type.
  551|       |      uint64_t r0 = vec.rindex(0);
  552|       |      return leading_zeroes(r0 << 32);
  553|       |#endif
  554|  4.96k|    }
  555|  4.96k|  }
_ZN10fast_float6bigintC2Em:
  418|  52.9k|  FASTFLOAT_CONSTEXPR20 bigint(uint64_t value): vec() {
  419|  52.9k|#ifdef FASTFLOAT_64BIT_LIMB
  420|  52.9k|    vec.push_unchecked(value);
  421|       |#else
  422|       |    vec.push_unchecked(uint32_t(value));
  423|       |    vec.push_unchecked(uint32_t(value >> 32));
  424|       |#endif
  425|  52.9k|    vec.normalize();
  426|  52.9k|  }
_ZNK10fast_float6bigint7compareERKS0_:
  462|  52.9k|  FASTFLOAT_CONSTEXPR20 int compare(const bigint& other) const noexcept {
  463|  52.9k|    if (vec.len() > other.vec.len()) {
  ------------------
  |  Branch (463:9): [True: 0, False: 52.9k]
  ------------------
  464|      0|      return 1;
  465|  52.9k|    } else if (vec.len() < other.vec.len()) {
  ------------------
  |  Branch (465:16): [True: 0, False: 52.9k]
  ------------------
  466|      0|      return -1;
  467|  52.9k|    } else {
  468|   103k|      for (size_t index = vec.len(); index > 0; index--) {
  ------------------
  |  Branch (468:38): [True: 99.5k, False: 3.68k]
  ------------------
  469|  99.5k|        limb xi = vec[index - 1];
  470|  99.5k|        limb yi = other.vec[index - 1];
  471|  99.5k|        if (xi > yi) {
  ------------------
  |  Branch (471:13): [True: 12.1k, False: 87.3k]
  ------------------
  472|  12.1k|          return 1;
  473|  87.3k|        } else if (xi < yi) {
  ------------------
  |  Branch (473:20): [True: 37.1k, False: 50.2k]
  ------------------
  474|  37.1k|          return -1;
  475|  37.1k|        }
  476|  99.5k|      }
  477|  3.68k|      return 0;
  478|  52.9k|    }
  479|  52.9k|  }
_ZNK10fast_float8stackvecILt62EEixEm:
   61|   199k|  FASTFLOAT_CONSTEXPR14 const limb& operator[](size_t index) const noexcept {
   62|   199k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   199k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   63|   199k|    return data[index];
   64|   199k|  }

_ZN10fast_float13compute_floatINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   94|   219k|adjusted_mantissa compute_float(int64_t q, uint64_t w)  noexcept  {
   95|   219k|  adjusted_mantissa answer;
   96|   219k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (96:7): [True: 4.05k, False: 215k]
  |  Branch (96:19): [True: 997, False: 214k]
  ------------------
   97|  5.05k|    answer.power2 = 0;
   98|  5.05k|    answer.mantissa = 0;
   99|       |    // result should be zero
  100|  5.05k|    return answer;
  101|  5.05k|  }
  102|   214k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (102:7): [True: 6.34k, False: 207k]
  ------------------
  103|       |    // we want to get infinity:
  104|  6.34k|    answer.power2 = binary::infinite_power();
  105|  6.34k|    answer.mantissa = 0;
  106|  6.34k|    return answer;
  107|  6.34k|  }
  108|       |  // At this point in time q is in [powers::smallest_power_of_five, powers::largest_power_of_five].
  109|       |
  110|       |  // We want the most significant bit of i to be 1. Shift if needed.
  111|   207k|  int lz = leading_zeroes(w);
  112|   207k|  w <<= lz;
  113|       |
  114|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  115|       |  // 1. We need the implicit bit
  116|       |  // 2. We need an extra bit for rounding purposes
  117|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small, requiring a shift)
  118|       |
  119|   207k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  120|       |  // The computed 'product' is always sufficient.
  121|       |  // Mathematical proof:
  122|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to appear)
  123|       |  // See script/mushtak_lemire.py
  124|       |
  125|       |  // The "compute_product_approximation" function can be slightly slower than a branchless approach:
  126|       |  // value128 product = compute_product(q, w);
  127|       |  // but in practice, we can win big with the compute_product_approximation if its additional branch
  128|       |  // is easily predicted. Which is best is data specific.
  129|   207k|  int upperbit = int(product.high >> 63);
  130|       |
  131|   207k|  answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  132|       |
  133|   207k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz - binary::minimum_exponent());
  134|   207k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (134:7): [True: 806, False: 207k]
  ------------------
  135|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  136|    806|    if(-answer.power2 + 1 >= 64) { // if we have more than 64 bits below the minimum exponent, you have a zero for sure.
  ------------------
  |  Branch (136:8): [True: 126, False: 680]
  ------------------
  137|    126|      answer.power2 = 0;
  138|    126|      answer.mantissa = 0;
  139|       |      // result should be zero
  140|    126|      return answer;
  141|    126|    }
  142|       |    // next line is safe because -answer.power2 + 1 < 64
  143|    680|    answer.mantissa >>= -answer.power2 + 1;
  144|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  145|       |    // "round-to-even" only occurs for powers close to 0.
  146|    680|    answer.mantissa += (answer.mantissa & 1); // round up
  147|    680|    answer.mantissa >>= 1;
  148|       |    // There is a weird scenario where we don't have a subnormal but just.
  149|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  150|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  151|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  152|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  153|       |    // subnormal, but we can only know this after rounding.
  154|       |    // So we only declare a subnormal if we are smaller than the threshold.
  155|    680|    answer.power2 = (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (155:21): [True: 680, False: 0]
  ------------------
  156|    680|    return answer;
  157|    806|  }
  158|       |
  159|       |  // usually, we round *up*, but if we fall right in between and and we have an
  160|       |  // even basis, we need to round down
  161|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  162|   207k|  if ((product.low <= 1) &&  (q >= binary::min_exponent_round_to_even()) && (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (162:7): [True: 72.3k, False: 134k]
  |  Branch (162:30): [True: 70.4k, False: 1.86k]
  |  Branch (162:77): [True: 64.6k, False: 5.80k]
  ------------------
  163|   207k|      ((answer.mantissa & 3) == 1) ) { // we may fall between two floats!
  ------------------
  |  Branch (163:7): [True: 8.06k, False: 56.5k]
  ------------------
  164|       |    // To be in-between two floats we need that in doing
  165|       |    //   answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  166|       |    // ... we dropped out only zeroes. But if this happened, then we can go back!!!
  167|  8.06k|    if((answer.mantissa  << (upperbit + 64 - binary::mantissa_explicit_bits() - 3)) ==  product.high) {
  ------------------
  |  Branch (167:8): [True: 3.94k, False: 4.11k]
  ------------------
  168|  3.94k|      answer.mantissa &= ~uint64_t(1);          // flip it so that we do not round up
  169|  3.94k|    }
  170|  8.06k|  }
  171|       |
  172|   207k|  answer.mantissa += (answer.mantissa & 1); // round up
  173|   207k|  answer.mantissa >>= 1;
  174|   207k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (174:7): [True: 14.4k, False: 192k]
  ------------------
  175|  14.4k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  176|  14.4k|    answer.power2++; // undo previous addition
  177|  14.4k|  }
  178|       |
  179|   207k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  180|   207k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (180:7): [True: 1.07k, False: 206k]
  ------------------
  181|  1.07k|    answer.power2 = binary::infinite_power();
  182|  1.07k|    answer.mantissa = 0;
  183|  1.07k|  }
  184|   207k|  return answer;
  185|   207k|}
_ZN10fast_float29compute_product_approximationILi26EEENS_8value128Elm:
   21|   232k|value128 compute_product_approximation(int64_t q, uint64_t w) {
   22|   232k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   23|       |  // For small values of q, e.g., q in [0,27], the answer is always exact because
   24|       |  // The line value128 firstproduct = full_multiplication(w, power_of_five_128[index]);
   25|       |  // gives the exact answer.
   26|   232k|  value128 firstproduct = full_multiplication(w, powers::power_of_five_128[index]);
   27|   232k|  static_assert((bit_precision >= 0) && (bit_precision <= 64), " precision should  be in (0,64]");
   28|   232k|  constexpr uint64_t precision_mask = (bit_precision < 64) ?
  ------------------
  |  Branch (28:39): [Folded - Ignored]
  ------------------
   29|      0|               (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
   30|   232k|               : uint64_t(0xFFFFFFFFFFFFFFFF);
   31|   232k|  if((firstproduct.high & precision_mask) == precision_mask) { // could further guard with  (lower + w < lower)
  ------------------
  |  Branch (31:6): [True: 46.1k, False: 186k]
  ------------------
   32|       |    // regarding the second product, we only need secondproduct.high, but our expectation is that the compiler will optimize this extra work away if needed.
   33|  46.1k|    value128 secondproduct = full_multiplication(w, powers::power_of_five_128[index + 1]);
   34|  46.1k|    firstproduct.low += secondproduct.high;
   35|  46.1k|    if(secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (35:8): [True: 32.9k, False: 13.2k]
  ------------------
   36|  32.9k|      firstproduct.high++;
   37|  32.9k|    }
   38|  46.1k|  }
   39|   232k|  return firstproduct;
   40|   232k|}
_ZN10fast_float6detail5powerEi:
   58|   458k|  constexpr fastfloat_really_inline int32_t power(int32_t q)  noexcept  {
   59|   458k|    return (((152170 + 65536) * q) >> 16) + 63;
   60|   458k|  }
_ZN10fast_float13compute_errorINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   80|  24.4k|adjusted_mantissa compute_error(int64_t q, uint64_t w)  noexcept  {
   81|  24.4k|  int lz = leading_zeroes(w);
   82|  24.4k|  w <<= lz;
   83|  24.4k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   84|  24.4k|  return compute_error_scaled<binary>(q, product.high, lz);
   85|  24.4k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIfEEEENS_17adjusted_mantissaElmi:
   67|  24.4k|adjusted_mantissa compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept  {
   68|  24.4k|  int hilz = int(w >> 63) ^ 1;
   69|  24.4k|  adjusted_mantissa answer;
   70|  24.4k|  answer.mantissa = w << hilz;
   71|  24.4k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   72|  24.4k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 + invalid_am_bias);
   73|  24.4k|  return answer;
   74|  24.4k|}
_ZN10fast_float13compute_floatINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   94|   200k|adjusted_mantissa compute_float(int64_t q, uint64_t w)  noexcept  {
   95|   200k|  adjusted_mantissa answer;
   96|   200k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (96:7): [True: 3.75k, False: 196k]
  |  Branch (96:19): [True: 240, False: 196k]
  ------------------
   97|  3.99k|    answer.power2 = 0;
   98|  3.99k|    answer.mantissa = 0;
   99|       |    // result should be zero
  100|  3.99k|    return answer;
  101|  3.99k|  }
  102|   196k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (102:7): [True: 3.18k, False: 193k]
  ------------------
  103|       |    // we want to get infinity:
  104|  3.18k|    answer.power2 = binary::infinite_power();
  105|  3.18k|    answer.mantissa = 0;
  106|  3.18k|    return answer;
  107|  3.18k|  }
  108|       |  // At this point in time q is in [powers::smallest_power_of_five, powers::largest_power_of_five].
  109|       |
  110|       |  // We want the most significant bit of i to be 1. Shift if needed.
  111|   193k|  int lz = leading_zeroes(w);
  112|   193k|  w <<= lz;
  113|       |
  114|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  115|       |  // 1. We need the implicit bit
  116|       |  // 2. We need an extra bit for rounding purposes
  117|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small, requiring a shift)
  118|       |
  119|   193k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  120|       |  // The computed 'product' is always sufficient.
  121|       |  // Mathematical proof:
  122|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to appear)
  123|       |  // See script/mushtak_lemire.py
  124|       |
  125|       |  // The "compute_product_approximation" function can be slightly slower than a branchless approach:
  126|       |  // value128 product = compute_product(q, w);
  127|       |  // but in practice, we can win big with the compute_product_approximation if its additional branch
  128|       |  // is easily predicted. Which is best is data specific.
  129|   193k|  int upperbit = int(product.high >> 63);
  130|       |
  131|   193k|  answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  132|       |
  133|   193k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz - binary::minimum_exponent());
  134|   193k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (134:7): [True: 2.73k, False: 190k]
  ------------------
  135|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  136|  2.73k|    if(-answer.power2 + 1 >= 64) { // if we have more than 64 bits below the minimum exponent, you have a zero for sure.
  ------------------
  |  Branch (136:8): [True: 52, False: 2.68k]
  ------------------
  137|     52|      answer.power2 = 0;
  138|     52|      answer.mantissa = 0;
  139|       |      // result should be zero
  140|     52|      return answer;
  141|     52|    }
  142|       |    // next line is safe because -answer.power2 + 1 < 64
  143|  2.68k|    answer.mantissa >>= -answer.power2 + 1;
  144|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  145|       |    // "round-to-even" only occurs for powers close to 0.
  146|  2.68k|    answer.mantissa += (answer.mantissa & 1); // round up
  147|  2.68k|    answer.mantissa >>= 1;
  148|       |    // There is a weird scenario where we don't have a subnormal but just.
  149|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  150|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  151|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  152|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  153|       |    // subnormal, but we can only know this after rounding.
  154|       |    // So we only declare a subnormal if we are smaller than the threshold.
  155|  2.68k|    answer.power2 = (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (155:21): [True: 2.68k, False: 0]
  ------------------
  156|  2.68k|    return answer;
  157|  2.73k|  }
  158|       |
  159|       |  // usually, we round *up*, but if we fall right in between and and we have an
  160|       |  // even basis, we need to round down
  161|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  162|   190k|  if ((product.low <= 1) &&  (q >= binary::min_exponent_round_to_even()) && (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (162:7): [True: 59.0k, False: 131k]
  |  Branch (162:30): [True: 31.7k, False: 27.2k]
  |  Branch (162:77): [True: 28.6k, False: 3.18k]
  ------------------
  163|   190k|      ((answer.mantissa & 3) == 1) ) { // we may fall between two floats!
  ------------------
  |  Branch (163:7): [True: 5.53k, False: 23.0k]
  ------------------
  164|       |    // To be in-between two floats we need that in doing
  165|       |    //   answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  166|       |    // ... we dropped out only zeroes. But if this happened, then we can go back!!!
  167|  5.53k|    if((answer.mantissa  << (upperbit + 64 - binary::mantissa_explicit_bits() - 3)) ==  product.high) {
  ------------------
  |  Branch (167:8): [True: 4.54k, False: 997]
  ------------------
  168|  4.54k|      answer.mantissa &= ~uint64_t(1);          // flip it so that we do not round up
  169|  4.54k|    }
  170|  5.53k|  }
  171|       |
  172|   190k|  answer.mantissa += (answer.mantissa & 1); // round up
  173|   190k|  answer.mantissa >>= 1;
  174|   190k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (174:7): [True: 13.8k, False: 176k]
  ------------------
  175|  13.8k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  176|  13.8k|    answer.power2++; // undo previous addition
  177|  13.8k|  }
  178|       |
  179|   190k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  180|   190k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (180:7): [True: 264, False: 190k]
  ------------------
  181|    264|    answer.power2 = binary::infinite_power();
  182|    264|    answer.mantissa = 0;
  183|    264|  }
  184|   190k|  return answer;
  185|   193k|}
_ZN10fast_float29compute_product_approximationILi55EEENS_8value128Elm:
   21|   226k|value128 compute_product_approximation(int64_t q, uint64_t w) {
   22|   226k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   23|       |  // For small values of q, e.g., q in [0,27], the answer is always exact because
   24|       |  // The line value128 firstproduct = full_multiplication(w, power_of_five_128[index]);
   25|       |  // gives the exact answer.
   26|   226k|  value128 firstproduct = full_multiplication(w, powers::power_of_five_128[index]);
   27|   226k|  static_assert((bit_precision >= 0) && (bit_precision <= 64), " precision should  be in (0,64]");
   28|   226k|  constexpr uint64_t precision_mask = (bit_precision < 64) ?
  ------------------
  |  Branch (28:39): [Folded - Ignored]
  ------------------
   29|      0|               (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
   30|   226k|               : uint64_t(0xFFFFFFFFFFFFFFFF);
   31|   226k|  if((firstproduct.high & precision_mask) == precision_mask) { // could further guard with  (lower + w < lower)
  ------------------
  |  Branch (31:6): [True: 91.7k, False: 134k]
  ------------------
   32|       |    // regarding the second product, we only need secondproduct.high, but our expectation is that the compiler will optimize this extra work away if needed.
   33|  91.7k|    value128 secondproduct = full_multiplication(w, powers::power_of_five_128[index + 1]);
   34|  91.7k|    firstproduct.low += secondproduct.high;
   35|  91.7k|    if(secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (35:8): [True: 30.0k, False: 61.6k]
  ------------------
   36|  30.0k|      firstproduct.high++;
   37|  30.0k|    }
   38|  91.7k|  }
   39|   226k|  return firstproduct;
   40|   226k|}
_ZN10fast_float13compute_errorINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   80|  33.4k|adjusted_mantissa compute_error(int64_t q, uint64_t w)  noexcept  {
   81|  33.4k|  int lz = leading_zeroes(w);
   82|  33.4k|  w <<= lz;
   83|  33.4k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   84|  33.4k|  return compute_error_scaled<binary>(q, product.high, lz);
   85|  33.4k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIdEEEENS_17adjusted_mantissaElmi:
   67|  33.4k|adjusted_mantissa compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept  {
   68|  33.4k|  int hilz = int(w >> 63) ^ 1;
   69|  33.4k|  adjusted_mantissa answer;
   70|  33.4k|  answer.mantissa = w << hilz;
   71|  33.4k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   72|  33.4k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 + invalid_am_bias);
   73|  33.4k|  return answer;
   74|  33.4k|}

_ZN10fast_float10digit_compIfcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  24.4k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  24.4k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  24.4k|  int32_t sci_exp = scientific_exponent(num);
  411|  24.4k|  size_t max_digits = binary_format<T>::max_digits();
  412|  24.4k|  size_t digits = 0;
  413|  24.4k|  bigint bigmant;
  414|  24.4k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  24.4k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  24.4k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 534, False: 23.9k]
  ------------------
  418|    534|    return positive_digit_comp<T>(bigmant, exponent);
  419|  23.9k|  } else {
  420|  23.9k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  23.9k|  }
  422|  24.4k|}
_ZN10fast_float19scientific_exponentIcEEiRNS_22parsed_number_string_tIT_EE:
   28|  57.9k|int32_t scientific_exponent(parsed_number_string_t<UC> & num) noexcept {
   29|  57.9k|  uint64_t mantissa = num.mantissa;
   30|  57.9k|  int32_t exponent = int32_t(num.exponent);
   31|   289k|  while (mantissa >= 10000) {
  ------------------
  |  Branch (31:10): [True: 231k, False: 57.9k]
  ------------------
   32|   231k|    mantissa /= 10000;
   33|   231k|    exponent += 4;
   34|   231k|  }
   35|   115k|  while (mantissa >= 100) {
  ------------------
  |  Branch (35:10): [True: 57.9k, False: 57.9k]
  ------------------
   36|  57.9k|    mantissa /= 100;
   37|  57.9k|    exponent += 2;
   38|  57.9k|  }
   39|  57.9k|  while (mantissa >= 10) {
  ------------------
  |  Branch (39:10): [True: 0, False: 57.9k]
  ------------------
   40|      0|    mantissa /= 10;
   41|      0|    exponent += 1;
   42|      0|  }
   43|  57.9k|  return exponent;
   44|  57.9k|}
_ZN10fast_float14parse_mantissaIcEEvRNS_6bigintERNS_22parsed_number_string_tIT_EEmRm:
  240|  57.9k|void parse_mantissa(bigint& result, parsed_number_string_t<UC>& num, size_t max_digits, size_t& digits) noexcept {
  241|       |  // try to minimize the number of big integer and scalar multiplication.
  242|       |  // therefore, try to parse 8 digits at a time, and multiply by the largest
  243|       |  // scalar value (9 or 19 digits) for each step.
  244|  57.9k|  size_t counter = 0;
  245|  57.9k|  digits = 0;
  246|  57.9k|  limb value = 0;
  247|  57.9k|#ifdef FASTFLOAT_64BIT_LIMB
  248|  57.9k|  size_t step = 19;
  249|       |#else
  250|       |  size_t step = 9;
  251|       |#endif
  252|       |
  253|       |  // process all integer digits.
  254|  57.9k|  UC const * p = num.integer.ptr;
  255|  57.9k|  UC const * pend = p + num.integer.len();
  256|  57.9k|  skip_zeros(p, pend);
  257|       |  // process all digits, in increments of step per loop
  258|   130k|  while (p != pend) {
  ------------------
  |  Branch (258:10): [True: 73.1k, False: 57.6k]
  ------------------
  259|   125k|    while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (259:12): [True: 67.3k, False: 58.1k]
  |  Branch (259:45): [True: 52.6k, False: 14.7k]
  |  Branch (259:70): [True: 52.3k, False: 295]
  ------------------
  260|  52.3k|      parse_eight_digits(p, value, counter, digits);
  261|  52.3k|    }
  262|   231k|    while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (262:12): [True: 213k, False: 17.6k]
  |  Branch (262:30): [True: 158k, False: 55.2k]
  |  Branch (262:43): [True: 157k, False: 295]
  ------------------
  263|   157k|      parse_one_digit(p, value, counter, digits);
  264|   157k|    }
  265|  73.1k|    if (digits == max_digits) {
  ------------------
  |  Branch (265:9): [True: 295, False: 72.8k]
  ------------------
  266|       |      // add the temporary value, then check if we've truncated any digits
  267|    295|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  268|    295|      bool truncated = is_truncated(p, pend);
  269|    295|      if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (269:11): [True: 263, False: 32]
  ------------------
  270|    263|        truncated |= is_truncated(num.fraction);
  271|    263|      }
  272|    295|      if (truncated) {
  ------------------
  |  Branch (272:11): [True: 179, False: 116]
  ------------------
  273|    179|        round_up_bigint(result, digits);
  274|    179|      }
  275|    295|      return;
  276|  72.8k|    } else {
  277|  72.8k|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  278|  72.8k|      counter = 0;
  279|  72.8k|      value = 0;
  280|  72.8k|    }
  281|  73.1k|  }
  282|       |
  283|       |  // add our fraction digits, if they're available.
  284|  57.6k|  if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (284:7): [True: 53.4k, False: 4.15k]
  ------------------
  285|  53.4k|    p = num.fraction.ptr;
  286|  53.4k|    pend = p + num.fraction.len();
  287|  53.4k|    if (digits == 0) {
  ------------------
  |  Branch (287:9): [True: 2.36k, False: 51.0k]
  ------------------
  288|  2.36k|      skip_zeros(p, pend);
  289|  2.36k|    }
  290|       |    // process all digits, in increments of step per loop
  291|   168k|    while (p != pend) {
  ------------------
  |  Branch (291:12): [True: 117k, False: 50.5k]
  ------------------
  292|   280k|      while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (292:14): [True: 216k, False: 63.9k]
  |  Branch (292:47): [True: 163k, False: 52.4k]
  |  Branch (292:72): [True: 162k, False: 1.31k]
  ------------------
  293|   162k|        parse_eight_digits(p, value, counter, digits);
  294|   162k|      }
  295|   489k|      while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (295:14): [True: 422k, False: 66.7k]
  |  Branch (295:32): [True: 373k, False: 48.7k]
  |  Branch (295:45): [True: 371k, False: 2.14k]
  ------------------
  296|   371k|        parse_one_digit(p, value, counter, digits);
  297|   371k|      }
  298|   117k|      if (digits == max_digits) {
  ------------------
  |  Branch (298:11): [True: 2.88k, False: 114k]
  ------------------
  299|       |        // add the temporary value, then check if we've truncated any digits
  300|  2.88k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  301|  2.88k|        bool truncated = is_truncated(p, pend);
  302|  2.88k|        if (truncated) {
  ------------------
  |  Branch (302:13): [True: 1.89k, False: 986]
  ------------------
  303|  1.89k|          round_up_bigint(result, digits);
  304|  1.89k|        }
  305|  2.88k|        return;
  306|   114k|      } else {
  307|   114k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  308|   114k|        counter = 0;
  309|   114k|        value = 0;
  310|   114k|      }
  311|   117k|    }
  312|  53.4k|  }
  313|       |
  314|  54.7k|  if (counter != 0) {
  ------------------
  |  Branch (314:7): [True: 0, False: 54.7k]
  ------------------
  315|      0|    add_native(result, limb(powers_of_ten_uint64[counter]), value);
  316|      0|  }
  317|  54.7k|}
_ZN10fast_float10skip_zerosIcEEvRPKT_S3_:
  159|  60.2k|void skip_zeros(UC const * & first, UC const * last) noexcept {
  160|  60.2k|  uint64_t val;
  161|  73.6k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (161:10): [Folded - Ignored]
  |  Branch (161:39): [True: 36.5k, False: 37.1k]
  ------------------
  162|  36.5k|    ::memcpy(&val, first, sizeof(uint64_t));
  163|  36.5k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (163:9): [True: 23.1k, False: 13.3k]
  ------------------
  164|  23.1k|      break;
  165|  23.1k|    }
  166|  13.3k|    first += int_cmp_len<UC>();
  167|  13.3k|  }
  168|   117k|  while (first != last) {
  ------------------
  |  Branch (168:10): [True: 115k, False: 2.36k]
  ------------------
  169|   115k|    if (*first != UC('0')) {
  ------------------
  |  Branch (169:9): [True: 57.9k, False: 57.6k]
  ------------------
  170|  57.9k|      break;
  171|  57.9k|    }
  172|  57.6k|    first++;
  173|  57.6k|  }
  174|  60.2k|}
_ZN10fast_float18parse_eight_digitsIcEEvRPKT_RmS5_S5_:
  207|   214k|void parse_eight_digits(const UC*& p, limb& value, size_t& counter, size_t& count) noexcept {
  208|   214k|  value = value * 100000000 + parse_eight_digits_unrolled(p);
  209|   214k|  p += 8;
  210|   214k|  counter += 8;
  211|   214k|  count += 8;
  212|   214k|}
_ZN10fast_float15parse_one_digitIcEEvRPKT_RmS5_S5_:
  216|   529k|void parse_one_digit(UC const *& p, limb& value, size_t& counter, size_t& count) noexcept {
  217|   529k|  value = value * 10 + limb(*p - UC('0'));
  218|   529k|  p++;
  219|   529k|  counter++;
  220|   529k|  count++;
  221|   529k|}
_ZN10fast_float10add_nativeERNS_6bigintEmm:
  224|   192k|void add_native(bigint& big, limb power, limb value) noexcept {
  225|   192k|  big.mul(power);
  226|   192k|  big.add(value);
  227|   192k|}
_ZN10fast_float12is_truncatedIcEEbPKT_S3_:
  180|  3.44k|bool is_truncated(UC const * first, UC const * last) noexcept {
  181|       |  // do 8-bit optimizations, can just compare to 8 literal 0s.
  182|  3.44k|  uint64_t val;
  183|  7.51k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (183:10): [Folded - Ignored]
  |  Branch (183:39): [True: 5.18k, False: 2.33k]
  ------------------
  184|  5.18k|    ::memcpy(&val, first, sizeof(uint64_t));
  185|  5.18k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (185:9): [True: 1.11k, False: 4.07k]
  ------------------
  186|  1.11k|      return true;
  187|  1.11k|    }
  188|  4.07k|    first += int_cmp_len<UC>();
  189|  4.07k|  }
  190|  3.90k|  while (first != last) {
  ------------------
  |  Branch (190:10): [True: 2.62k, False: 1.28k]
  ------------------
  191|  2.62k|    if (*first != UC('0')) {
  ------------------
  |  Branch (191:9): [True: 1.04k, False: 1.57k]
  ------------------
  192|  1.04k|      return true;
  193|  1.04k|    }
  194|  1.57k|    ++first;
  195|  1.57k|  }
  196|  1.28k|  return false;
  197|  2.33k|}
_ZN10fast_float12is_truncatedIcEEbNS_4spanIKT_EE:
  200|    263|bool is_truncated(span<const UC> s) noexcept {
  201|    263|  return is_truncated(s.ptr, s.ptr + s.len());
  202|    263|}
_ZN10fast_float15round_up_bigintERNS_6bigintERm:
  230|  2.07k|void round_up_bigint(bigint& big, size_t& count) noexcept {
  231|       |  // need to round-up the digits, but need to avoid rounding
  232|       |  // ....9999 to ...10000, which could cause a false halfway point.
  233|  2.07k|  add_native(big, 10, 1);
  234|  2.07k|  count++;
  235|  2.07k|}
_ZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEi:
  321|    534|adjusted_mantissa positive_digit_comp(bigint& bigmant, int32_t exponent) noexcept {
  322|    534|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  170|    534|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  323|    534|  adjusted_mantissa answer;
  324|    534|  bool truncated;
  325|    534|  answer.mantissa = bigmant.hi64(truncated);
  326|    534|  int bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
  327|    534|  answer.power2 = bigmant.bit_length() - 64 + bias;
  328|       |
  329|    534|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|    534|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    534|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|    534|    });
  333|    534|  });
  334|       |
  335|    534|  return answer;
  336|    534|}
_ZN10fast_float5roundIfZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
   93|    534|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|    534|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|    534|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 534]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|    534|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|    534|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 534]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|    534|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|    534|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 534]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|    534|}
_ZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  329|    534|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|    534|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    534|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|    534|    });
  333|    534|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  123|    534|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|    534|  const uint64_t mask
  125|    534|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 534]
  ------------------
  126|    534|    ? UINT64_MAX
  127|    534|    : (uint64_t(1) << shift) - 1;
  128|    534|  const uint64_t halfway
  129|    534|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 534]
  ------------------
  130|    534|    ? 0
  131|    534|    : uint64_t(1) << (shift - 1);
  132|    534|  uint64_t truncated_bits = am.mantissa & mask;
  133|    534|  bool is_above = truncated_bits > halfway;
  134|    534|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|    534|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 534]
  ------------------
  138|      0|    am.mantissa = 0;
  139|    534|  } else {
  140|    534|    am.mantissa >>= shift;
  141|    534|  }
  142|    534|  am.power2 += shift;
  143|       |
  144|    534|  bool is_odd = (am.mantissa & 1) == 1;
  145|    534|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|    534|}
_ZZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  330|    534|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    534|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  ------------------
  |  Branch (331:14): [True: 74, False: 460]
  |  Branch (331:27): [True: 368, False: 92]
  |  Branch (331:41): [True: 60, False: 308]
  |  Branch (331:56): [True: 56, False: 344]
  |  Branch (331:66): [True: 32, False: 24]
  ------------------
  332|    534|    });
_ZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_i:
  345|  23.9k|adjusted_mantissa negative_digit_comp(bigint& bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  346|  23.9k|  bigint& real_digits = bigmant;
  347|  23.9k|  int32_t real_exp = exponent;
  348|       |
  349|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  350|  23.9k|  adjusted_mantissa am_b = am;
  351|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with -Wnoexcept-type.
  352|  23.9k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
  353|  23.9k|  T b;
  354|  23.9k|  to_float(false, am_b, b);
  355|  23.9k|  adjusted_mantissa theor = to_extended_halfway(b);
  356|  23.9k|  bigint theor_digits(theor.mantissa);
  357|  23.9k|  int32_t theor_exp = theor.power2;
  358|       |
  359|       |  // scale real digits and theor digits to be same power.
  360|  23.9k|  int32_t pow2_exp = theor_exp - real_exp;
  361|  23.9k|  uint32_t pow5_exp = uint32_t(-real_exp);
  362|  23.9k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (362:7): [True: 23.9k, False: 0]
  ------------------
  363|  23.9k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  170|  23.9k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  364|  23.9k|  }
  365|  23.9k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (365:7): [True: 23.9k, False: 0]
  ------------------
  366|  23.9k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  170|  23.9k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  367|  23.9k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (367:14): [True: 0, False: 0]
  ------------------
  368|      0|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  170|      0|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  369|      0|  }
  370|       |
  371|       |  // compare digits, and use it to director rounding
  372|  23.9k|  int ord = real_digits.compare(theor_digits);
  373|  23.9k|  adjusted_mantissa answer = am;
  374|  23.9k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  23.9k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  23.9k|      (void)_;  // not needed, since we've done our comparison
  377|  23.9k|      (void)__; // not needed, since we've done our comparison
  378|  23.9k|      if (ord > 0) {
  379|  23.9k|        return true;
  380|  23.9k|      } else if (ord < 0) {
  381|  23.9k|        return false;
  382|  23.9k|      } else {
  383|  23.9k|        return is_odd;
  384|  23.9k|      }
  385|  23.9k|    });
  386|  23.9k|  });
  387|       |
  388|  23.9k|  return answer;
  389|  23.9k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
   93|  23.9k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  23.9k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  23.9k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 23.9k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  23.9k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  23.9k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 23.9k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  23.9k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  23.9k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 23.9k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  23.9k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  352|  23.9k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float10round_downERNS_17adjusted_mantissaEi:
  149|  52.9k|void round_down(adjusted_mantissa& am, int32_t shift) noexcept {
  150|  52.9k|  if (shift == 64) {
  ------------------
  |  Branch (150:7): [True: 0, False: 52.9k]
  ------------------
  151|      0|    am.mantissa = 0;
  152|  52.9k|  } else {
  153|  52.9k|    am.mantissa >>= shift;
  154|  52.9k|  }
  155|  52.9k|  am.power2 += shift;
  156|  52.9k|}
_ZN10fast_float19to_extended_halfwayIfEENS_17adjusted_mantissaET_:
   82|  23.9k|adjusted_mantissa to_extended_halfway(T value) noexcept {
   83|  23.9k|  adjusted_mantissa am = to_extended(value);
   84|  23.9k|  am.mantissa <<= 1;
   85|  23.9k|  am.mantissa += 1;
   86|  23.9k|  am.power2 -= 1;
   87|  23.9k|  return am;
   88|  23.9k|}
_ZN10fast_float11to_extendedIfEENS_17adjusted_mantissaET_:
   49|  23.9k|adjusted_mantissa to_extended(T value) noexcept {
   50|  23.9k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   51|  23.9k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   52|  23.9k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   53|  23.9k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   54|       |
   55|  23.9k|  adjusted_mantissa am;
   56|  23.9k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
   57|  23.9k|  equiv_uint bits;
   58|       |#if FASTFLOAT_HAS_BIT_CAST
   59|       |  bits = std::bit_cast<equiv_uint>(value);
   60|       |#else
   61|  23.9k|  ::memcpy(&bits, &value, sizeof(T));
   62|  23.9k|#endif
   63|  23.9k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (63:7): [True: 0, False: 23.9k]
  ------------------
   64|       |    // denormal
   65|      0|    am.power2 = 1 - bias;
   66|      0|    am.mantissa = bits & mantissa_mask;
   67|  23.9k|  } else {
   68|       |    // normal
   69|  23.9k|    am.power2 = int32_t((bits & exponent_mask) >> binary_format<T>::mantissa_explicit_bits());
   70|  23.9k|    am.power2 -= bias;
   71|  23.9k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   72|  23.9k|  }
   73|       |
   74|  23.9k|  return am;
   75|  23.9k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
   93|  23.9k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  23.9k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  23.9k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 23.9k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  23.9k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  23.9k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 23.9k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  23.9k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  23.9k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 23.9k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  23.9k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  374|  23.9k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  23.9k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  23.9k|      (void)_;  // not needed, since we've done our comparison
  377|  23.9k|      (void)__; // not needed, since we've done our comparison
  378|  23.9k|      if (ord > 0) {
  379|  23.9k|        return true;
  380|  23.9k|      } else if (ord < 0) {
  381|  23.9k|        return false;
  382|  23.9k|      } else {
  383|  23.9k|        return is_odd;
  384|  23.9k|      }
  385|  23.9k|    });
  386|  23.9k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  123|  23.9k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  23.9k|  const uint64_t mask
  125|  23.9k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 23.9k]
  ------------------
  126|  23.9k|    ? UINT64_MAX
  127|  23.9k|    : (uint64_t(1) << shift) - 1;
  128|  23.9k|  const uint64_t halfway
  129|  23.9k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 23.9k]
  ------------------
  130|  23.9k|    ? 0
  131|  23.9k|    : uint64_t(1) << (shift - 1);
  132|  23.9k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  23.9k|  bool is_above = truncated_bits > halfway;
  134|  23.9k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  23.9k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 23.9k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  23.9k|  } else {
  140|  23.9k|    am.mantissa >>= shift;
  141|  23.9k|  }
  142|  23.9k|  am.power2 += shift;
  143|       |
  144|  23.9k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  23.9k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  23.9k|}
_ZZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  375|  23.9k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  23.9k|      (void)_;  // not needed, since we've done our comparison
  377|  23.9k|      (void)__; // not needed, since we've done our comparison
  378|  23.9k|      if (ord > 0) {
  ------------------
  |  Branch (378:11): [True: 210, False: 23.6k]
  ------------------
  379|    210|        return true;
  380|  23.6k|      } else if (ord < 0) {
  ------------------
  |  Branch (380:18): [True: 20.5k, False: 3.17k]
  ------------------
  381|  20.5k|        return false;
  382|  20.5k|      } else {
  383|  3.17k|        return is_odd;
  384|  3.17k|      }
  385|  23.9k|    });
_ZN10fast_float10digit_compIdcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  33.4k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  33.4k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  33.4k|  int32_t sci_exp = scientific_exponent(num);
  411|  33.4k|  size_t max_digits = binary_format<T>::max_digits();
  412|  33.4k|  size_t digits = 0;
  413|  33.4k|  bigint bigmant;
  414|  33.4k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  33.4k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  33.4k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 4.43k, False: 29.0k]
  ------------------
  418|  4.43k|    return positive_digit_comp<T>(bigmant, exponent);
  419|  29.0k|  } else {
  420|  29.0k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  29.0k|  }
  422|  33.4k|}
_ZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEi:
  321|  4.43k|adjusted_mantissa positive_digit_comp(bigint& bigmant, int32_t exponent) noexcept {
  322|  4.43k|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  170|  4.43k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  323|  4.43k|  adjusted_mantissa answer;
  324|  4.43k|  bool truncated;
  325|  4.43k|  answer.mantissa = bigmant.hi64(truncated);
  326|  4.43k|  int bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
  327|  4.43k|  answer.power2 = bigmant.bit_length() - 64 + bias;
  328|       |
  329|  4.43k|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|  4.43k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  4.43k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|  4.43k|    });
  333|  4.43k|  });
  334|       |
  335|  4.43k|  return answer;
  336|  4.43k|}
_ZN10fast_float5roundIdZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
   93|  4.43k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  4.43k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  4.43k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 4.43k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  4.43k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  4.43k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 834, False: 3.59k]
  ------------------
  109|    834|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|    834|    am.power2++;
  111|    834|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  4.43k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  4.43k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 4.43k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  4.43k|}
_ZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  329|  4.43k|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|  4.43k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  4.43k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|  4.43k|    });
  333|  4.43k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  123|  4.43k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  4.43k|  const uint64_t mask
  125|  4.43k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 4.43k]
  ------------------
  126|  4.43k|    ? UINT64_MAX
  127|  4.43k|    : (uint64_t(1) << shift) - 1;
  128|  4.43k|  const uint64_t halfway
  129|  4.43k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 4.43k]
  ------------------
  130|  4.43k|    ? 0
  131|  4.43k|    : uint64_t(1) << (shift - 1);
  132|  4.43k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  4.43k|  bool is_above = truncated_bits > halfway;
  134|  4.43k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  4.43k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 4.43k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  4.43k|  } else {
  140|  4.43k|    am.mantissa >>= shift;
  141|  4.43k|  }
  142|  4.43k|  am.power2 += shift;
  143|       |
  144|  4.43k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  4.43k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  4.43k|}
_ZZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  330|  4.43k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  4.43k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  ------------------
  |  Branch (331:14): [True: 906, False: 3.52k]
  |  Branch (331:27): [True: 2.92k, False: 597]
  |  Branch (331:41): [True: 983, False: 1.94k]
  |  Branch (331:56): [True: 307, False: 2.23k]
  |  Branch (331:66): [True: 60, False: 247]
  ------------------
  332|  4.43k|    });
_ZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_i:
  345|  29.0k|adjusted_mantissa negative_digit_comp(bigint& bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  346|  29.0k|  bigint& real_digits = bigmant;
  347|  29.0k|  int32_t real_exp = exponent;
  348|       |
  349|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  350|  29.0k|  adjusted_mantissa am_b = am;
  351|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with -Wnoexcept-type.
  352|  29.0k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
  353|  29.0k|  T b;
  354|  29.0k|  to_float(false, am_b, b);
  355|  29.0k|  adjusted_mantissa theor = to_extended_halfway(b);
  356|  29.0k|  bigint theor_digits(theor.mantissa);
  357|  29.0k|  int32_t theor_exp = theor.power2;
  358|       |
  359|       |  // scale real digits and theor digits to be same power.
  360|  29.0k|  int32_t pow2_exp = theor_exp - real_exp;
  361|  29.0k|  uint32_t pow5_exp = uint32_t(-real_exp);
  362|  29.0k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (362:7): [True: 29.0k, False: 0]
  ------------------
  363|  29.0k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  170|  29.0k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  364|  29.0k|  }
  365|  29.0k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (365:7): [True: 2.66k, False: 26.3k]
  ------------------
  366|  2.66k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  170|  2.66k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  367|  26.3k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (367:14): [True: 26.3k, False: 72]
  ------------------
  368|  26.3k|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  170|  26.3k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  369|  26.3k|  }
  370|       |
  371|       |  // compare digits, and use it to director rounding
  372|  29.0k|  int ord = real_digits.compare(theor_digits);
  373|  29.0k|  adjusted_mantissa answer = am;
  374|  29.0k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  29.0k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  29.0k|      (void)_;  // not needed, since we've done our comparison
  377|  29.0k|      (void)__; // not needed, since we've done our comparison
  378|  29.0k|      if (ord > 0) {
  379|  29.0k|        return true;
  380|  29.0k|      } else if (ord < 0) {
  381|  29.0k|        return false;
  382|  29.0k|      } else {
  383|  29.0k|        return is_odd;
  384|  29.0k|      }
  385|  29.0k|    });
  386|  29.0k|  });
  387|       |
  388|  29.0k|  return answer;
  389|  29.0k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
   93|  29.0k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  29.0k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  29.0k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 118, False: 28.9k]
  ------------------
   96|       |    // have a denormal float
   97|    118|    int32_t shift = -am.power2 + 1;
   98|    118|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|    118|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 118, False: 0]
  ------------------
  101|    118|    return;
  102|    118|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  28.9k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  28.9k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 28.9k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  28.9k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  28.9k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 28.9k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  28.9k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  352|  29.0k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float19to_extended_halfwayIdEENS_17adjusted_mantissaET_:
   82|  29.0k|adjusted_mantissa to_extended_halfway(T value) noexcept {
   83|  29.0k|  adjusted_mantissa am = to_extended(value);
   84|  29.0k|  am.mantissa <<= 1;
   85|  29.0k|  am.mantissa += 1;
   86|  29.0k|  am.power2 -= 1;
   87|  29.0k|  return am;
   88|  29.0k|}
_ZN10fast_float11to_extendedIdEENS_17adjusted_mantissaET_:
   49|  29.0k|adjusted_mantissa to_extended(T value) noexcept {
   50|  29.0k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   51|  29.0k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   52|  29.0k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   53|  29.0k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   54|       |
   55|  29.0k|  adjusted_mantissa am;
   56|  29.0k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
   57|  29.0k|  equiv_uint bits;
   58|       |#if FASTFLOAT_HAS_BIT_CAST
   59|       |  bits = std::bit_cast<equiv_uint>(value);
   60|       |#else
   61|  29.0k|  ::memcpy(&bits, &value, sizeof(T));
   62|  29.0k|#endif
   63|  29.0k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (63:7): [True: 118, False: 28.9k]
  ------------------
   64|       |    // denormal
   65|    118|    am.power2 = 1 - bias;
   66|    118|    am.mantissa = bits & mantissa_mask;
   67|  28.9k|  } else {
   68|       |    // normal
   69|  28.9k|    am.power2 = int32_t((bits & exponent_mask) >> binary_format<T>::mantissa_explicit_bits());
   70|  28.9k|    am.power2 -= bias;
   71|  28.9k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   72|  28.9k|  }
   73|       |
   74|  29.0k|  return am;
   75|  29.0k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
   93|  29.0k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  29.0k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  29.0k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 118, False: 28.9k]
  ------------------
   96|       |    // have a denormal float
   97|    118|    int32_t shift = -am.power2 + 1;
   98|    118|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|    118|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 118, False: 0]
  ------------------
  101|    118|    return;
  102|    118|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  28.9k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  28.9k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 90, False: 28.8k]
  ------------------
  109|     90|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|     90|    am.power2++;
  111|     90|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  28.9k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  28.9k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 28.9k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  28.9k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  374|  29.0k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  29.0k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  29.0k|      (void)_;  // not needed, since we've done our comparison
  377|  29.0k|      (void)__; // not needed, since we've done our comparison
  378|  29.0k|      if (ord > 0) {
  379|  29.0k|        return true;
  380|  29.0k|      } else if (ord < 0) {
  381|  29.0k|        return false;
  382|  29.0k|      } else {
  383|  29.0k|        return is_odd;
  384|  29.0k|      }
  385|  29.0k|    });
  386|  29.0k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  123|  29.0k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  29.0k|  const uint64_t mask
  125|  29.0k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 29.0k]
  ------------------
  126|  29.0k|    ? UINT64_MAX
  127|  29.0k|    : (uint64_t(1) << shift) - 1;
  128|  29.0k|  const uint64_t halfway
  129|  29.0k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 29.0k]
  ------------------
  130|  29.0k|    ? 0
  131|  29.0k|    : uint64_t(1) << (shift - 1);
  132|  29.0k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  29.0k|  bool is_above = truncated_bits > halfway;
  134|  29.0k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  29.0k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 29.0k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  29.0k|  } else {
  140|  29.0k|    am.mantissa >>= shift;
  141|  29.0k|  }
  142|  29.0k|  am.power2 += shift;
  143|       |
  144|  29.0k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  29.0k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  29.0k|}
_ZZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  375|  29.0k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  29.0k|      (void)_;  // not needed, since we've done our comparison
  377|  29.0k|      (void)__; // not needed, since we've done our comparison
  378|  29.0k|      if (ord > 0) {
  ------------------
  |  Branch (378:11): [True: 11.9k, False: 17.1k]
  ------------------
  379|  11.9k|        return true;
  380|  17.1k|      } else if (ord < 0) {
  ------------------
  |  Branch (380:18): [True: 16.6k, False: 508]
  ------------------
  381|  16.6k|        return false;
  382|  16.6k|      } else {
  383|    508|        return is_odd;
  384|    508|      }
  385|  29.0k|    });

_ZN10fast_float4spanIKcEC2Ev:
  235|  2.04M|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKcEC2EPS1_m:
  234|  1.21M|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanIKcE3lenEv:
  237|   396k|  constexpr size_t len() const noexcept {
  238|   396k|    return length;
  239|   396k|  }
_ZN10fast_float13binary_formatIfE22min_exponent_fast_pathEv:
  464|   611k|template <> inline constexpr int binary_format<float>::min_exponent_fast_path() {
  465|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  466|       |  return 0;
  467|       |#else
  468|   611k|  return -10;
  469|   611k|#endif
  470|   611k|}
_ZN10fast_float13binary_formatIfE22max_exponent_fast_pathEv:
  515|   571k|template <> inline constexpr int binary_format<float>::max_exponent_fast_path() {
  516|   571k|  return 10;
  517|   571k|}
_ZN10fast_float13binary_formatIfE22max_mantissa_fast_pathEv:
  529|   498k|template <> inline constexpr uint64_t binary_format<float>::max_mantissa_fast_path() {
  530|   498k|  return uint64_t(2) << mantissa_explicit_bits();
  531|   498k|}
_ZN10fast_float13binary_formatIfE22mantissa_explicit_bitsEv:
  475|  1.52M|template <> inline constexpr int binary_format<float>::mantissa_explicit_bits() {
  476|  1.52M|  return 23;
  477|  1.52M|}
_ZN10fast_float13binary_formatIfE18exact_power_of_tenEl:
  546|   473k|inline constexpr float binary_format<float>::exact_power_of_ten(int64_t power) {
  547|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  548|   473k|  return (void)powers_of_ten[0], powers_of_ten[power];
  549|   473k|}
_ZN10fast_float17adjusted_mantissaC2Ev:
  347|   535k|  adjusted_mantissa() = default;
_ZN10fast_float13binary_formatIfE21smallest_power_of_tenEv:
  566|   215k|inline constexpr int binary_format<float>::smallest_power_of_ten() {
  567|   215k|  return -65;
  568|   215k|}
_ZN10fast_float13binary_formatIfE20largest_power_of_tenEv:
  557|   214k|inline constexpr int binary_format<float>::largest_power_of_ten() {
  558|   214k|  return 38;
  559|   214k|}
_ZN10fast_float14leading_zeroesEm:
  268|   468k|int leading_zeroes(uint64_t input_num) {
  269|   468k|  assert(input_num > 0);
  270|   468k|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (270:7): [Folded - Ignored]
  ------------------
  271|      0|    return leading_zeroes_generic(input_num);
  272|      0|  }
  273|       |#ifdef FASTFLOAT_VISUAL_STUDIO
  274|       |  #if defined(_M_X64) || defined(_M_ARM64)
  275|       |  unsigned long leading_zero = 0;
  276|       |  // Search the mask data from most significant bit (MSB)
  277|       |  // to least significant bit (LSB) for a set bit (1).
  278|       |  _BitScanReverse64(&leading_zero, input_num);
  279|       |  return (int)(63 - leading_zero);
  280|       |  #else
  281|       |  return leading_zeroes_generic(input_num);
  282|       |  #endif
  283|       |#else
  284|   468k|  return __builtin_clzll(input_num);
  285|   468k|#endif
  286|   468k|}
_ZN10fast_float19full_multiplicationEmm:
  320|   596k|value128 full_multiplication(uint64_t a, uint64_t b) {
  321|   596k|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (321:7): [Folded - Ignored]
  ------------------
  322|      0|    value128 answer;
  323|      0|    answer.low = umul128_generic(a, b, &answer.high);
  324|      0|    return answer;
  325|      0|  }
  326|   596k|  value128 answer;
  327|       |#if defined(_M_ARM64) && !defined(__MINGW32__)
  328|       |  // ARM64 has native support for 64-bit multiplications, no need to emulate
  329|       |  // But MinGW on ARM64 doesn't have native support for 64-bit multiplications
  330|       |  answer.high = __umulh(a, b);
  331|       |  answer.low = a * b;
  332|       |#elif defined(FASTFLOAT_32BIT) || (defined(_WIN64) && !defined(__clang__))
  333|       |  answer.low = _umul128(a, b, &answer.high); // _umul128 not available on ARM64
  334|       |#elif defined(FASTFLOAT_64BIT) && defined(__SIZEOF_INT128__)
  335|       |  __uint128_t r = ((__uint128_t)a) * b;
  336|   596k|  answer.low = uint64_t(r);
  337|   596k|  answer.high = uint64_t(r >> 64);
  338|       |#else
  339|       |  answer.low = umul128_generic(a, b, &answer.high);
  340|       |#endif
  341|   596k|  return answer;
  342|   596k|}
_ZN10fast_float8value128C2Ev:
  251|   596k|  constexpr value128() : low(0), high(0) {}
_ZN10fast_float13binary_formatIfE16minimum_exponentEv:
  498|   256k|template <> inline constexpr int binary_format<float>::minimum_exponent() {
  499|   256k|  return -127;
  500|   256k|}
_ZN10fast_float13binary_formatIfE26min_exponent_round_to_evenEv:
  491|  72.3k|template <> inline constexpr int binary_format<float>::min_exponent_round_to_even() {
  492|  72.3k|  return -17;
  493|  72.3k|}
_ZN10fast_float13binary_formatIfE26max_exponent_round_to_evenEv:
  483|  70.4k|template <> inline constexpr int binary_format<float>::max_exponent_round_to_even() {
  484|  70.4k|  return 10;
  485|  70.4k|}
_ZNK10fast_float17adjusted_mantissaneERKS0_:
  351|   164k|  constexpr bool operator!=(const adjusted_mantissa &o) const {
  352|   164k|    return mantissa != o.mantissa || power2 != o.power2;
  ------------------
  |  Branch (352:12): [True: 57.9k, False: 106k]
  |  Branch (352:38): [True: 0, False: 106k]
  ------------------
  353|   164k|  }
_ZN10fast_float13binary_formatIfE10max_digitsEv:
  573|  24.4k|template <> inline constexpr size_t binary_format<float>::max_digits() {
  574|  24.4k|  return 114;
  575|  24.4k|}
impl.cpp:_ZN10fast_floatL11int_cmp_lenIcEEiv:
  649|  98.5k|{
  650|  98.5k|    return sizeof(uint64_t) / sizeof(UC);
  651|  98.5k|}
impl.cpp:_ZN10fast_floatL13int_cmp_zerosIcEEmv:
  643|  41.6k|{
  644|  41.6k|    static_assert((sizeof(UC) == 1) || (sizeof(UC) == 2) || (sizeof(UC) == 4), "Unsupported character size");
  645|  41.6k|    return (sizeof(UC) == 1) ? 0x3030303030303030 : (sizeof(UC) == 2) ? (uint64_t(UC('0')) << 48 | uint64_t(UC('0')) << 32 | uint64_t(UC('0')) << 16 | UC('0')) : (uint64_t(UC('0')) << 32 | UC('0'));
  ------------------
  |  Branch (645:12): [Folded - Ignored]
  |  Branch (645:53): [Folded - Ignored]
  ------------------
  646|  41.6k|}
_ZN10fast_float4spanImEC2EPKmm:
  234|  77.2k|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanImE3lenEv:
  237|   204k|  constexpr size_t len() const noexcept {
  238|   204k|    return length;
  239|   204k|  }
_ZNK10fast_float4spanImEixEm:
  241|   111k|  FASTFLOAT_CONSTEXPR14 const T& operator[](size_t index) const noexcept {
  242|   111k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   111k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  243|   111k|    return ptr[index];
  244|   111k|  }
_ZN10fast_float8to_floatIfEEvbNS_17adjusted_mantissaERT_:
  606|   162k|void to_float(bool negative, adjusted_mantissa am, T &value) {
  607|   162k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  608|   162k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  609|   162k|  word |= fastfloat_uint(am.power2) << binary_format<T>::mantissa_explicit_bits();
  610|   162k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  611|       |#if FASTFLOAT_HAS_BIT_CAST
  612|       |  value = std::bit_cast<T>(word);
  613|       |#else
  614|   162k|  ::memcpy(&value, &word, sizeof(T));
  615|   162k|#endif
  616|   162k|}
_ZN10fast_float13binary_formatIfE10sign_indexEv:
  510|   162k|template <> inline constexpr int binary_format<float>::sign_index() { return 31; }
_ZN10fast_float13binary_formatIfE14infinite_powerEv:
  505|   400k|template <> inline constexpr int binary_format<float>::infinite_power() {
  506|   400k|  return 0xFF;
  507|   400k|}
_ZN10fast_float15parse_options_tIcEC2ENS_12chars_formatEc:
   46|  1.02M|    : format(fmt), decimal_point(dot) {}
_ZN10fast_float4spanIKDiEC2Ev:
  235|   455k|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKDiEC2EPS1_m:
  234|   228k|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanIKDiE3lenEv:
  237|    288|  constexpr size_t len() const noexcept {
  238|    288|    return length;
  239|    288|  }
_ZN10fast_float15parse_options_tIDiEC2ENS_12chars_formatEDi:
   46|   227k|    : format(fmt), decimal_point(dot) {}
_ZN10fast_float13binary_formatIdE22min_exponent_fast_pathEv:
  456|   637k|template <> inline constexpr int binary_format<double>::min_exponent_fast_path() {
  457|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  458|       |  return 0;
  459|       |#else
  460|   637k|  return -22;
  461|   637k|#endif
  462|   637k|}
_ZN10fast_float13binary_formatIdE22max_exponent_fast_pathEv:
  512|   630k|template <> inline constexpr int binary_format<double>::max_exponent_fast_path() {
  513|   630k|  return 22;
  514|   630k|}
_ZN10fast_float13binary_formatIdE22max_mantissa_fast_pathEv:
  519|   526k|template <> inline constexpr uint64_t binary_format<double>::max_mantissa_fast_path() {
  520|   526k|  return uint64_t(2) << mantissa_explicit_bits();
  521|   526k|}
_ZN10fast_float13binary_formatIdE22mantissa_explicit_bitsEv:
  472|  1.55M|template <> inline constexpr int binary_format<double>::mantissa_explicit_bits() {
  473|  1.55M|  return 52;
  474|  1.55M|}
_ZN10fast_float13binary_formatIdE18exact_power_of_tenEl:
  541|   521k|inline constexpr double binary_format<double>::exact_power_of_ten(int64_t power) {
  542|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  543|   521k|  return (void)powers_of_ten[0], powers_of_ten[power];
  544|   521k|}
_ZN10fast_float13binary_formatIdE21smallest_power_of_tenEv:
  562|   196k|inline constexpr int binary_format<double>::smallest_power_of_ten() {
  563|   196k|  return -342;
  564|   196k|}
_ZN10fast_float13binary_formatIdE20largest_power_of_tenEv:
  553|   196k|inline constexpr int binary_format<double>::largest_power_of_ten() {
  554|   196k|  return 308;
  555|   196k|}
_ZN10fast_float13binary_formatIdE16minimum_exponentEv:
  495|   259k|template <> inline constexpr int binary_format<double>::minimum_exponent() {
  496|   259k|  return -1023;
  497|   259k|}
_ZN10fast_float13binary_formatIdE26min_exponent_round_to_evenEv:
  487|  59.0k|template <> inline constexpr int binary_format<double>::min_exponent_round_to_even() {
  488|  59.0k|  return -4;
  489|  59.0k|}
_ZN10fast_float13binary_formatIdE26max_exponent_round_to_evenEv:
  479|  31.7k|template <> inline constexpr int binary_format<double>::max_exponent_round_to_even() {
  480|  31.7k|  return 23;
  481|  31.7k|}
_ZN10fast_float13binary_formatIdE10max_digitsEv:
  570|  33.4k|template <> inline constexpr size_t binary_format<double>::max_digits() {
  571|  33.4k|  return 769;
  572|  33.4k|}
_ZN10fast_float8to_floatIdEEvbNS_17adjusted_mantissaERT_:
  606|   145k|void to_float(bool negative, adjusted_mantissa am, T &value) {
  607|   145k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  608|   145k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  609|   145k|  word |= fastfloat_uint(am.power2) << binary_format<T>::mantissa_explicit_bits();
  610|   145k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  611|       |#if FASTFLOAT_HAS_BIT_CAST
  612|       |  value = std::bit_cast<T>(word);
  613|       |#else
  614|   145k|  ::memcpy(&value, &word, sizeof(T));
  615|   145k|#endif
  616|   145k|}
_ZN10fast_float13binary_formatIdE10sign_indexEv:
  509|   145k|template <> inline constexpr int binary_format<double>::sign_index() { return 63; }
_ZN10fast_float13binary_formatIdE14infinite_powerEv:
  502|   372k|template <> inline constexpr int binary_format<double>::infinite_power() {
  503|   372k|  return 0x7FF;
  504|   372k|}

_ZN10fast_float10from_charsIfciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   499k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   499k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   499k|}
_ZN10fast_float17from_chars_callerIfE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  141|   499k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   499k|    return from_chars_advanced(first, last, value, options);
  143|   499k|  }
_ZN10fast_float19from_chars_advancedIfcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   499k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   499k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   499k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   499k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   499k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 499k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   499k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   499k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 499k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   499k|  answer.ec = std::errc(); // be optimistic
  221|   499k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   499k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 459k, False: 40.0k]
  |  Branch (227:69): [True: 434k, False: 24.9k]
  |  Branch (227:131): [True: 389k, False: 45.9k]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   389k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 389k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   389k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 364k, False: 24.9k]
  ------------------
  239|   364k|        value = T(pns.mantissa);
  240|   364k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 8.34k, False: 355k]
  ------------------
  241|   355k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   364k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 364k]
  ------------------
  243|   364k|        return answer;
  244|   364k|      }
  245|   389k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   389k|  }
  262|   135k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|   135k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 80.6k, False: 55.2k]
  |  Branch (263:29): [True: 80.6k, False: 0]
  ------------------
  264|  80.6k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 24.4k, False: 56.1k]
  ------------------
  265|  24.4k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|  24.4k|    }
  267|  80.6k|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|   135k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 24.4k, False: 111k]
  ------------------
  271|   135k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|   135k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 132k, False: 3.77k]
  |  Branch (273:29): [True: 14.9k, False: 117k]
  |  Branch (273:49): [True: 751, False: 14.1k]
  |  Branch (273:68): [True: 4.27k, False: 130k]
  ------------------
  274|  5.02k|    answer.ec = std::errc::result_out_of_range;
  275|  5.02k|  }
  276|   135k|  return answer;
  277|   499k|}
_ZN10fast_float6detail17rounds_to_nearestEv:
   74|  1.02M|fastfloat_really_inline bool rounds_to_nearest() noexcept {
   75|       |  // https://lemire.me/blog/2020/06/26/gcc-not-nearest/
   76|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
   77|       |  return false;
   78|       |#endif
   79|       |  // See
   80|       |  // A fast function to check your floating-point rounding mode
   81|       |  // https://lemire.me/blog/2022/11/16/a-fast-function-to-check-your-floating-point-rounding-mode/
   82|       |  //
   83|       |  // This function is meant to be equivalent to :
   84|       |  // prior: #include <cfenv>
   85|       |  //  return fegetround() == FE_TONEAREST;
   86|       |  // However, it is expected to be much faster than the fegetround()
   87|       |  // function call.
   88|       |  //
   89|       |  // The volatile keywoard prevents the compiler from computing the function
   90|       |  // at compile-time.
   91|       |  // There might be other ways to prevent compile-time optimizations (e.g., asm).
   92|       |  // The value does not need to be std::numeric_limits<float>::min(), any small
   93|       |  // value so that 1 + x should round to 1 would do (after accounting for excess
   94|       |  // precision, as in 387 instructions).
   95|  1.02M|  static volatile float fmin = std::numeric_limits<float>::min();
   96|  1.02M|  float fmini = fmin; // we copy it so that it gets loaded at most once.
   97|       |  //
   98|       |  // Explanation:
   99|       |  // Only when fegetround() == FE_TONEAREST do we have that
  100|       |  // fmin + 1.0f == 1.0f - fmin.
  101|       |  //
  102|       |  // FE_UPWARD:
  103|       |  //  fmin + 1.0f > 1
  104|       |  //  1.0f - fmin == 1
  105|       |  //
  106|       |  // FE_DOWNWARD or  FE_TOWARDZERO:
  107|       |  //  fmin + 1.0f == 1
  108|       |  //  1.0f - fmin < 1
  109|       |  //
  110|       |  // Note: This may fail to be accurate if fast-math has been
  111|       |  // enabled, as rounding conventions may not apply.
  112|       |  #ifdef FASTFLOAT_VISUAL_STUDIO
  113|       |  #   pragma warning(push)
  114|       |  //  todo: is there a VS warning?
  115|       |  //  see https://stackoverflow.com/questions/46079446/is-there-a-warning-for-floating-point-equality-checking-in-visual-studio-2013
  116|       |  #elif defined(__clang__)
  117|       |  #   pragma clang diagnostic push
  118|  1.02M|  #   pragma clang diagnostic ignored "-Wfloat-equal"
  119|       |  #elif defined(__GNUC__)
  120|       |  #   pragma GCC diagnostic push
  121|       |  #   pragma GCC diagnostic ignored "-Wfloat-equal"
  122|       |  #endif
  123|  1.02M|  return (fmini + 1.0f == 1.0f - fmini);
  124|       |  #ifdef FASTFLOAT_VISUAL_STUDIO
  125|       |  #   pragma warning(pop)
  126|       |  #elif defined(__clang__)
  127|       |  #   pragma clang diagnostic pop
  128|       |  #elif defined(__GNUC__)
  129|       |  #   pragma GCC diagnostic pop
  130|       |  #endif
  131|  1.02M|}
_ZN10fast_float10from_charsIfDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   111k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   111k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   111k|}
_ZN10fast_float17from_chars_callerIfE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  141|   111k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   111k|    return from_chars_advanced(first, last, value, options);
  143|   111k|  }
_ZN10fast_float19from_chars_advancedIfDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   111k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   111k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   111k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   111k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   111k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 111k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   111k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   111k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 111k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   111k|  answer.ec = std::errc(); // be optimistic
  221|   111k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   111k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 111k, False: 654]
  |  Branch (227:69): [True: 109k, False: 1.82k]
  |  Branch (227:131): [True: 109k, False: 108]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   109k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 109k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   109k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 109k, False: 108]
  ------------------
  239|   109k|        value = T(pns.mantissa);
  240|   109k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 208, False: 109k]
  ------------------
  241|   109k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   109k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 109k]
  ------------------
  243|   109k|        return answer;
  244|   109k|      }
  245|   109k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   109k|  }
  262|  2.69k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|  2.69k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 108, False: 2.58k]
  |  Branch (263:29): [True: 108, False: 0]
  ------------------
  264|    108|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 0, False: 108]
  ------------------
  265|      0|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|      0|    }
  267|    108|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|  2.69k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 0, False: 2.69k]
  ------------------
  271|  2.69k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|  2.69k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 2.41k, False: 282]
  |  Branch (273:29): [True: 1.95k, False: 460]
  |  Branch (273:49): [True: 474, False: 1.47k]
  |  Branch (273:68): [True: 1.47k, False: 742]
  ------------------
  274|  1.95k|    answer.ec = std::errc::result_out_of_range;
  275|  1.95k|  }
  276|  2.69k|  return answer;
  277|   111k|}
_ZN10fast_float10from_charsIdciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   521k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   521k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   521k|}
_ZN10fast_float17from_chars_callerIdE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  141|   521k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   521k|    return from_chars_advanced(first, last, value, options);
  143|   521k|  }
_ZN10fast_float19from_chars_advancedIdcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   521k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   521k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   521k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   521k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   521k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 521k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   521k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   521k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 521k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   521k|  answer.ec = std::errc(); // be optimistic
  221|   521k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   521k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 515k, False: 5.88k]
  |  Branch (227:69): [True: 492k, False: 23.8k]
  |  Branch (227:131): [True: 413k, False: 78.7k]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   413k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 413k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   413k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 408k, False: 5.18k]
  ------------------
  239|   408k|        value = T(pns.mantissa);
  240|   408k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 23.1k, False: 385k]
  ------------------
  241|   385k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   408k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 408k]
  ------------------
  243|   408k|        return answer;
  244|   408k|      }
  245|   413k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   413k|  }
  262|   113k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|   113k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 83.7k, False: 29.9k]
  |  Branch (263:29): [True: 83.7k, False: 0]
  ------------------
  264|  83.7k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 33.4k, False: 50.2k]
  ------------------
  265|  33.4k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|  33.4k|    }
  267|  83.7k|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|   113k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 33.4k, False: 80.2k]
  ------------------
  271|   113k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|   113k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 110k, False: 3.48k]
  |  Branch (273:29): [True: 9.71k, False: 100k]
  |  Branch (273:49): [True: 186, False: 9.52k]
  |  Branch (273:68): [True: 2.09k, False: 111k]
  ------------------
  274|  2.27k|    answer.ec = std::errc::result_out_of_range;
  275|  2.27k|  }
  276|   113k|  return answer;
  277|   521k|}
_ZN10fast_float10from_charsIdDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   115k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   115k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   115k|}
_ZN10fast_float17from_chars_callerIdE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  141|   115k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   115k|    return from_chars_advanced(first, last, value, options);
  143|   115k|  }
_ZN10fast_float19from_chars_advancedIdDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   115k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   115k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   115k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   115k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   115k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 115k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   115k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   115k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 115k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   115k|  answer.ec = std::errc(); // be optimistic
  221|   115k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   115k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 114k, False: 650]
  |  Branch (227:69): [True: 113k, False: 1.83k]
  |  Branch (227:131): [True: 112k, False: 108]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   112k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 112k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   112k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 112k, False: 54]
  ------------------
  239|   112k|        value = T(pns.mantissa);
  240|   112k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 268, False: 112k]
  ------------------
  241|   112k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   112k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 112k]
  ------------------
  243|   112k|        return answer;
  244|   112k|      }
  245|   112k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   112k|  }
  262|  2.65k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|  2.65k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 108, False: 2.54k]
  |  Branch (263:29): [True: 108, False: 0]
  ------------------
  264|    108|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 0, False: 108]
  ------------------
  265|      0|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|      0|    }
  267|    108|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|  2.65k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 0, False: 2.65k]
  ------------------
  271|  2.65k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|  2.65k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 2.38k, False: 268]
  |  Branch (273:29): [True: 1.08k, False: 1.29k]
  |  Branch (273:49): [True: 50, False: 1.03k]
  |  Branch (273:68): [True: 1.03k, False: 1.56k]
  ------------------
  274|  1.08k|    answer.ec = std::errc::result_out_of_range;
  275|  1.08k|  }
  276|  2.65k|  return answer;
  277|   115k|}

_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIccEEDaSG_SQ_:
  859|  3.73M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIwcEEDaSG_SQ_:
  859|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  859|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3806|  3.34M|{
 3807|  3.34M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3807:19): [Folded - Ignored]
  ------------------
 3808|  3.34M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3809|  3.34M|    }
 3810|  3.34M|    else if constexpr (sizeof(U) == 2) {
 3811|  3.34M|        return utf16_code_point_length_by_starting_code_unit(ch);
 3812|  3.34M|    }
 3813|  3.34M|    else {
 3814|       |        // utf-32
 3815|  3.34M|        static_assert(sizeof(U) == 4);
 3816|  3.34M|        SCN_UNUSED(ch);
 3817|  3.34M|        return 1;
 3818|  3.34M|    }
 3819|  3.34M|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3770|  3.34M|{
 3771|  3.34M|    static_assert(sizeof(U8) == 1);
 3772|       |
 3773|  3.34M|    SCN_GCC_COMPAT_PUSH
 3774|  3.34M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3775|  3.34M|    constexpr char lengths[] =
 3776|  3.34M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3777|  3.34M|        "\1\1\1\1\1\1\1\1"
 3778|  3.34M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3779|       |                            // byte
 3780|  3.34M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3781|  3.34M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3782|  3.34M|        "\4";               // highest bits 11110 -> 4-byte cp
 3783|  3.34M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3784|  3.34M|    SCN_GCC_COMPAT_POP
 3785|  3.34M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4012|  2.97M|{
 4013|  2.97M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4013:19): [Folded - Ignored]
  ------------------
 4014|  2.97M|        return decode_utf8_code_point_exhaustive(input);
 4015|  2.97M|    }
 4016|  2.97M|    else if constexpr (sizeof(CharT) == 2) {
 4017|  2.97M|        return decode_utf16_code_point_exhaustive(input);
 4018|  2.97M|    }
 4019|  2.97M|    else {
 4020|  2.97M|        SCN_EXPECT(input.size() == 1);
 4021|  2.97M|        auto cp = static_cast<char32_t>(input.front());
 4022|  2.97M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4023|  2.97M|            return invalid_code_point;
 4024|  2.97M|        }
 4025|  2.97M|        return cp;
 4026|  2.97M|    }
 4027|  2.97M|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3825|  2.97M|{
 3826|  2.97M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  2.97M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.97M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3827|       |
 3828|  2.97M|    const auto is_trailing_code_unit = [](char ch) {
 3829|  2.97M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3830|  2.97M|    };
 3831|       |
 3832|  2.97M|    if (input.size() == 1) {
  ------------------
  |  Branch (3832:9): [True: 2.90M, False: 74.4k]
  ------------------
 3833|  2.90M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3833:13): [True: 633, False: 2.89M]
  ------------------
 3834|    633|            SCN_UNLIKELY_ATTR
 3835|    633|            return invalid_code_point;
 3836|    633|        }
 3837|  2.89M|        return static_cast<char32_t>(input[0]);
 3838|  2.90M|    }
 3839|       |
 3840|  74.4k|    if (input.size() == 2) {
  ------------------
  |  Branch (3840:9): [True: 68.3k, False: 6.14k]
  ------------------
 3841|  68.3k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3841:13): [True: 150, False: 68.1k]
  ------------------
 3842|    150|            SCN_UNLIKELY_ATTR
 3843|    150|            return invalid_code_point;
 3844|    150|        }
 3845|  68.1k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3845:13): [True: 4.94k, False: 63.2k]
  ------------------
 3846|  4.94k|            SCN_UNLIKELY_ATTR
 3847|  4.94k|            return invalid_code_point;
 3848|  4.94k|        }
 3849|       |
 3850|  63.2k|        char32_t cp{};
 3851|  63.2k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3852|  63.2k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3853|  63.2k|        return cp;
 3854|  68.1k|    }
 3855|       |
 3856|  6.14k|    if (input.size() == 3) {
  ------------------
  |  Branch (3856:9): [True: 3.64k, False: 2.50k]
  ------------------
 3857|  3.64k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3857:13): [True: 137, False: 3.50k]
  ------------------
 3858|    137|            SCN_UNLIKELY_ATTR
 3859|    137|            return invalid_code_point;
 3860|    137|        }
 3861|  3.50k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3861:13): [True: 1.76k, False: 1.74k]
  ------------------
 3862|  3.50k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3862:13): [True: 597, False: 1.14k]
  ------------------
 3863|  2.36k|            SCN_UNLIKELY_ATTR
 3864|  2.36k|            return invalid_code_point;
 3865|  2.36k|        }
 3866|       |
 3867|  1.14k|        char32_t cp{};
 3868|  1.14k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3869|  1.14k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3870|  1.14k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3871|  1.14k|        return cp;
 3872|  3.50k|    }
 3873|       |
 3874|  2.50k|    if (input.size() == 4) {
  ------------------
  |  Branch (3874:9): [True: 2.50k, False: 0]
  ------------------
 3875|  2.50k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3875:13): [True: 0, False: 2.50k]
  ------------------
 3876|      0|            SCN_UNLIKELY_ATTR
 3877|      0|            return invalid_code_point;
 3878|      0|        }
 3879|  2.50k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3879:13): [True: 511, False: 1.99k]
  ------------------
 3880|    511|            SCN_UNLIKELY_ATTR
 3881|    511|            return invalid_code_point;
 3882|    511|        }
 3883|  1.99k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3883:13): [True: 554, False: 1.43k]
  ------------------
 3884|  1.99k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3884:13): [True: 568, False: 870]
  ------------------
 3885|  1.99k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3885:13): [True: 543, False: 327]
  ------------------
 3886|  1.66k|            SCN_UNLIKELY_ATTR
 3887|  1.66k|            return invalid_code_point;
 3888|  1.66k|        }
 3889|       |
 3890|    327|        char32_t cp{};
 3891|    327|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3892|    327|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3893|    327|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3894|    327|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3895|    327|        return cp;
 3896|  1.99k|    }
 3897|       |
 3898|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3899|       |    // gcc 7 thinks we'll get here, even when we won't
 3900|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3901|      0|#endif
 3902|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3903|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3828|  77.7k|    const auto is_trailing_code_unit = [](char ch) {
 3829|  77.7k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3830|  77.7k|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3698|  4.96M|{
 3699|  4.96M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3699:19): [Folded - Ignored]
  |  Branch (3699:19): [Folded - Ignored]
  ------------------
 3700|  4.96M|                                          decltype(first), decltype(last)> &&
 3701|  4.96M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3701:19): [Folded - Ignored]
  ------------------
 3702|  4.96M|        return {first, last};
 3703|  4.96M|    }
 3704|  4.96M|    else {
 3705|  4.96M|        return {to_address(first), static_cast<size_t>(std::distance(
 3706|  4.96M|                                       to_address(first), to_address(last)))};
 3707|  4.96M|    }
 3708|  4.96M|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  15.1M|{
  326|  15.1M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  15.1M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  15.1M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  303|  17.3M|{
  304|  17.3M|    return p;
  305|  17.3M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3729|  7.93M|{
 3730|  7.93M|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (3730:19): [Folded - Ignored]
  |  Branch (3730:19): [Folded - Ignored]
  ------------------
 3731|  7.93M|                      typename std::basic_string_view<CharT>::iterator,
 3732|  7.93M|                      decltype(it)> &&
 3733|  7.93M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3733:19): [Folded - Ignored]
  ------------------
 3734|  7.93M|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  7.93M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3735|  7.93M|        return it;
 3736|  7.93M|    }
 3737|  7.93M|    else {
 3738|  7.93M|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3739|  7.93M|    }
 3740|  7.93M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  82.7k|    {
 2724|  82.7k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  82.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  82.7k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  82.7k|    {
 2705|  82.7k|        return decay_copy(t.begin());
 2706|  82.7k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1948|  11.6M|{
 1949|  11.6M|    return SCN_FWD(t);
  ------------------
  |  |  930|  11.6M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  11.6M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  2.19M|    {
 2781|  2.19M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.19M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  2.19M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  2.19M|    {
 2763|  2.19M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.19M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  2.19M|    }
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8866|   159k|{
 8867|   159k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   159k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   159k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   159k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   159k|    static_cast<    \
  |  |  929|   159k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   159k|    static_cast<    \
  |  |  929|   159k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   159k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJfEEEDav:
 5395|   682k|{
 5396|   682k|    detail::check_scan_arg_types<Args...>();
 5397|   682k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   682k|}
_ZN3scn2v36detail20check_scan_arg_typesIJfEEEvv:
 5134|   999k|{
 5135|   999k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|   999k|                  "Scan argument types must be default constructible");
 5137|   999k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|   999k|                  "Scan argument types must be Destructible");
 5139|   999k|    static_assert(
 5140|   999k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|   999k|        "Scan argument types must not be references");
 5142|   999k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEEC2Ev:
 5348|   682k|    {
 5349|   682k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   682k|    {
 5360|   682k|        return {detail::make_arg<
 5361|   682k|            kind, Context,
 5362|   682k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   682k|                                 typename Context::char_type>::value>(args)...};
 5364|   682k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE16EfvEEPvRT2_:
 5169|   682k|{
 5170|   682k|    return make_value<Context>(value).ref_value;
 5171|   682k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEfEEDaRT0_:
 5119|   753k|{
 5120|   753k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|   753k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|   753k|                                  needs_context_tag>) {
 5124|   753k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   753k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|   753k|    }
 5126|   753k|    else {
 5127|   753k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|   753k|            value, context_tag<Context>{}));
 5129|   753k|    }
 5130|   753k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERf:
 4958|   753k|    {                                                                        \
 4959|   753k|        return val;                                                          \
 4960|   753k|    }
_ZN3scn2v36detail15make_value_implIRfEEDaOT_:
 5088|   999k|{
 5089|   999k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|   999k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|   999k|    constexpr bool scannable_char =
 5093|   999k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|   999k|    static_assert(scannable_char,
 5095|   999k|                  "Cannot scan an argument of an unsupported character "
 5096|   999k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|   999k|    constexpr bool scannable_const =
 5099|   999k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|   999k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|   999k|    constexpr bool scannable_disabled =
 5103|   999k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|   999k|    static_assert(scannable_disabled,
 5105|   999k|                  "Cannot scan an argument that has been disabled by "
 5106|   999k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|   999k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|   999k|    static_assert(
 5110|   999k|        scannable,
 5111|   999k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|   999k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|   999k|    return arg_value{arg};
 5115|   999k|}
_ZN3scn2v36detail9arg_valueC2IfEERT_:
 4901|   999k|    {
 4902|   999k|    }
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8653|   494k|{
 8654|   494k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   494k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8655|   494k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8590|   494k|{
 8591|   494k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   494k|    auto result = vscan_impl(buffer, format, args);
 8594|   494k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   494k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 37.2k, False: 457k]
  |  |  ------------------
  ------------------
 8595|  37.2k|        return unexpected(result.error());
 8596|  37.2k|    }
 8597|   457k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   457k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   494k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 4719|  1.09M|{
 4720|  1.09M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|  1.09M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|  1.09M|                  "\n"
 4724|  1.09M|                  "Unsupported range type given as input to a scanning "
 4725|  1.09M|                  "function.\n"
 4726|  1.09M|                  "A range needs to have a character type (value type) "
 4727|  1.09M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|  1.09M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|  1.09M|                  "to be included.\n"
 4730|  1.09M|                  "See the scnlib documentation for more details.");
 4731|  1.09M|    static_assert(
 4732|  1.09M|        !std::is_same_v<T, custom_char_traits>,
 4733|  1.09M|        "\n"
 4734|  1.09M|        "Unsupported range type given as input to a scanning "
 4735|  1.09M|        "function.\n"
 4736|  1.09M|        "String types (std::basic_string, and std::basic_string_view) "
 4737|  1.09M|        "need to use std::char_traits. Strings with custom Traits are "
 4738|  1.09M|        "not supported.");
 4739|  1.09M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|  1.09M|                  "\n"
 4741|  1.09M|                  "Unsupported range type given as input to a scanning "
 4742|  1.09M|                  "function.\n"
 4743|  1.09M|                  "file_marker_found cannot be used as an "
 4744|  1.09M|                  "source range type to scn::scan.\n"
 4745|  1.09M|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|  1.09M|                  "and do not provide an explicit source range, "
 4747|  1.09M|                  "or use scn::scan with a FILE* directly.");
 4748|  1.09M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|  1.09M|                  "\n"
 4750|  1.09M|                  "Unsupported range type given as input to a scanning "
 4751|  1.09M|                  "function.\n"
 4752|  1.09M|                  "In order to be scannable, a range needs to satisfy "
 4753|  1.09M|                  "`forward_range`. `input_range` is not sufficient.");
 4754|  1.09M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|  1.09M|                  "\n"
 4756|  1.09M|                  "Unsupported range type given as input to a scanning "
 4757|  1.09M|                  "function.\n"
 4758|  1.09M|                  "A range needs to model forward_range and have a valid "
 4759|  1.09M|                  "character type (char or wchar_t) to be scannable.\n"
 4760|  1.09M|                  "Examples of scannable ranges are std::string, "
 4761|  1.09M|                  "std::string_view, "
 4762|  1.09M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|  1.09M|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|  1.09M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|  1.09M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
 4658|  1.09M|{
 4659|  1.09M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4659:19): [Folded - Ignored]
  ------------------
 4660|  1.09M|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4661|  1.09M|    }
 4662|  1.09M|    else {
 4663|  1.09M|        return invalid_char_type{};
 4664|  1.09M|    }
 4665|  1.09M|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  1.09M|    {
 2855|  1.09M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  1.09M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  1.09M|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  1.09M|    {
 2836|  1.09M|        return t.data();
 2837|  1.09M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3230|  1.09M|    {
 3231|  1.09M|        return ranges::empty(derived())
  ------------------
  |  Branch (3231:16): [True: 14.2k, False: 1.08M]
  ------------------
 3232|  1.09M|                   ? nullptr
 3233|  1.09M|                   : std::addressof(*ranges::begin(derived()));
 3234|  1.09M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|  1.09M|    {
 3005|  1.09M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  1.09M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|  1.09M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|  1.09M|    {
 2978|  1.09M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  1.09M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|  1.09M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5emptyEv:
 3338|  6.02M|    {
 3339|  6.02M|        return m_iterator == m_sentinel;
 3340|  6.02M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3184|  2.18M|    {
 3185|  2.18M|        return static_cast<const D&>(*this);
 3186|  2.18M|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  2.09M|    {
 2724|  2.09M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.09M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  2.09M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  2.09M|    {
 2705|  2.09M|        return decay_copy(t.begin());
 2706|  2.09M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3329|  26.4M|    {
 3330|  26.4M|        return m_iterator;
 3331|  26.4M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|  1.09M|    {
 2930|  1.09M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|  1.09M|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|  1.09M|    {
 2896|  1.09M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  1.09M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|  1.09M|    }
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1948|  4.07M|{
 1949|  4.07M|    return SCN_FWD(t);
  ------------------
  |  |  930|  4.07M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  4.07M|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_LPv0EEEmv:
 3345|  6.06M|    {
 3346|  6.06M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3347|  6.06M|    }
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1597|  10.1M|    {
 1598|  10.1M|        return has_value();
 1599|  10.1M|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  484|  20.0M|    {
  485|  20.0M|        return m_has_value;
  486|  20.0M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1603|   731k|    {
 1604|   731k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   731k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   731k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   731k|        return this->get_unexpected().error();
 1606|   731k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   731k|    {
  468|   731k|        return m_unexpected;
  469|   731k|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  360|  5.66M|    {
  361|  5.66M|        return m_unexpected;
  362|  5.66M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  346|  2.76M|    {
  347|  2.76M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  2.76M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  2.76M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  80.6k|    {
 1476|  80.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|  80.6k|    {
  447|  80.6k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  355|  6.16M|    {
  356|  6.16M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  6.16M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  6.16M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.09M|    {
 1177|  1.09M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5922|  1.01M|{
 5923|  1.01M|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|  1.01M|                      ranges::iterator_t<SourceRange>>) {
 5925|  1.01M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|  1.01M|    }
 5927|  1.01M|    else {
 5928|  1.01M|        auto it = ranges::begin(source);
 5929|  1.01M|        while (n > 0) {
 5930|  1.01M|            --n;
 5931|  1.01M|            ++it;
 5932|  1.01M|        }
 5933|  1.01M|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|  1.01M|    }
 5935|  1.01M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  6.23M|    {
 2724|  6.23M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  6.23M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  6.23M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  6.23M|    {
 2705|  6.23M|        return decay_copy(t.begin());
 2706|  6.23M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 5909|  1.01M|{
 5910|  1.01M|    return ranges::end(source);
 5911|  1.01M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.01M|    {
 2781|  1.01M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.01M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.01M|    {
 2763|  1.01M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.01M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3333|  12.9M|    {
 3334|  12.9M|        return m_sentinel;
 3335|  12.9M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1652|  3.97M|    {
 1653|  3.97M|        return value();
 1654|  3.97M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1626|  9.17M|    {
 1627|  9.17M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  9.17M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.17M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  9.17M|        return this->get_value();
 1629|  9.17M|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  450|  9.17M|    {
  451|  9.17M|        return m_value;
  452|  9.17M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|  1.01M|    {
 1430|  1.01M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  436|  1.01M|    {
  437|  1.01M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7974|   319k|    {
 7975|   319k|        return m_str;
 7976|   319k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJfEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|   682k|    {
 5426|   682k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE12arg_pointersEv:
 5378|   682k|    {
 5379|   682k|        return m_argptrs;
 5380|   682k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5477|  2.11M|    {
 5478|  2.11M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   319k|{
 8820|   319k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   319k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24.8k, False: 294k]
  |  |  ------------------
  ------------------
 8821|  24.8k|        return unexpected(result.error());
 8822|  24.8k|    }
 8823|   294k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   294k|    static_cast<    \
  |  |  929|   294k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   294k|    static_cast<    \
  |  |  929|   294k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   319k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1597|  1.09M|    {
 1598|  1.09M|        return has_value();
 1599|  1.09M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.19M|    {
  485|  2.19M|        return m_has_value;
  486|  2.19M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1603|  80.6k|    {
 1604|  80.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  80.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  80.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  80.6k|        return this->get_unexpected().error();
 1606|  80.6k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  80.6k|    {
  468|  80.6k|        return m_unexpected;
  469|  80.6k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  26.8k|    {
 1476|  26.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  26.8k|    {
  447|  26.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   354k|    {
 1177|   354k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1652|   914k|    {
 1653|   914k|        return value();
 1654|   914k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|  1.01M|    {
 1627|  1.01M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.01M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.01M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.01M|        return this->get_value();
 1629|  1.01M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.01M|    {
  451|  1.01M|        return m_value;
  452|  1.01M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2ES8_ONSt3__15tupleIJfEEE:
 5829|   327k|    {
 5830|   327k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5680|  1.01M|    {
 5681|  1.01M|    }
_ZN3scn2v36detail25scan_result_value_storageIJfEEC2EONSt3__15tupleIJfEEE:
 5615|   837k|    {
 5616|   837k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|   327k|    {
 1430|   327k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|   327k|    {
  437|   327k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE4argsEv:
 5373|   682k|    {
 5374|   682k|        return m_args;
 5375|   682k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_LPv0EEET_S6_:
 3315|  10.3M|    {
 3316|  10.3M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7690|  2.11M|{
 7691|  2.11M|    return s;
 7692|  2.11M|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7667|  2.11M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   319k|    {
 7971|   319k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   354k|    {
 1598|   354k|        return has_value();
 1599|   354k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   681k|    {
  485|   681k|        return m_has_value;
  486|   681k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEptEv:
 1672|   327k|    {
 1673|   327k|        return &value();
 1674|   327k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|   327k|    {
 1627|   327k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   327k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   327k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   327k|        return this->get_value();
 1629|   327k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   327k|    {
  451|   327k|        return m_value;
  452|   327k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 5697|  1.01M|    {
 5698|  1.01M|        return ranges::begin(m_range);
 5699|  1.01M|    }
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8933|   159k|{
 8934|   159k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   159k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   159k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   159k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   159k|    static_cast<    \
  |  |  929|   159k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   159k|    static_cast<    \
  |  |  929|   159k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   159k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8671|   494k|{
 8672|   494k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   494k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8673|   494k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8606|   494k|{
 8607|   494k|#if !SCN_DISABLE_LOCALE
 8608|   494k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   494k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   494k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   494k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   494k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   494k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 37.2k, False: 457k]
  |  |  ------------------
  ------------------
 8615|  37.2k|        return unexpected(result.error());
 8616|  37.2k|    }
 8617|   457k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   457k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   494k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8972|  34.7k|{
 8973|  34.7k|    T value;
 8974|  34.7k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  34.7k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  34.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  34.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  34.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  34.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.06k, False: 32.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.06k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.06k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.06k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.06k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.06k|    }                                                  \
  |  |  |  | 3671|  34.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  32.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  32.6k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  32.6k|    static_cast<    \
  |  |  929|  32.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  32.6k|    static_cast<    \
  |  |  929|  32.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  34.7k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEfEENS0_14basic_scan_argIT_EERT0_:
 5154|  71.7k|{
 5155|  71.7k|    check_scan_arg_types<T>();
 5156|       |
 5157|  71.7k|    basic_scan_arg<Context> arg;
 5158|  71.7k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  71.7k|    arg.m_value = make_value<Context>(value);
 5160|  71.7k|    return arg;
 5161|  71.7k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5240|  2.33M|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4897|  3.08M|    arg_value() = default;
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8684|   108k|{
 8685|   108k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|   108k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8686|   108k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|   108k|{
 8631|   108k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|   108k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|   108k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   108k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.20k, False: 102k]
  |  |  ------------------
  ------------------
 8635|  6.20k|        return unexpected(result.error());
 8636|  6.20k|    }
 8637|   102k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|   108k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|   102k|    {
 1663|   102k|        return std::move(value());
 1664|   102k|    }
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8866|   166k|{
 8867|   166k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   166k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   166k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   166k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   166k|    static_cast<    \
  |  |  929|   166k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   166k|    static_cast<    \
  |  |  929|   166k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   166k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJdEEEDav:
 5395|   712k|{
 5396|   712k|    detail::check_scan_arg_types<Args...>();
 5397|   712k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   712k|}
_ZN3scn2v36detail20check_scan_arg_typesIJdEEEvv:
 5134|  1.03M|{
 5135|  1.03M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  1.03M|                  "Scan argument types must be default constructible");
 5137|  1.03M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  1.03M|                  "Scan argument types must be Destructible");
 5139|  1.03M|    static_assert(
 5140|  1.03M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  1.03M|        "Scan argument types must not be references");
 5142|  1.03M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEEC2Ev:
 5348|   712k|    {
 5349|   712k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   712k|    {
 5360|   712k|        return {detail::make_arg<
 5361|   712k|            kind, Context,
 5362|   712k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   712k|                                 typename Context::char_type>::value>(args)...};
 5364|   712k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE17EdvEEPvRT2_:
 5169|   712k|{
 5170|   712k|    return make_value<Context>(value).ref_value;
 5171|   712k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEdEEDaRT0_:
 5119|   787k|{
 5120|   787k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|   787k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|   787k|                                  needs_context_tag>) {
 5124|   787k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   787k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|   787k|    }
 5126|   787k|    else {
 5127|   787k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|   787k|            value, context_tag<Context>{}));
 5129|   787k|    }
 5130|   787k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERd:
 4958|   787k|    {                                                                        \
 4959|   787k|        return val;                                                          \
 4960|   787k|    }
_ZN3scn2v36detail15make_value_implIRdEEDaOT_:
 5088|  1.03M|{
 5089|  1.03M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  1.03M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  1.03M|    constexpr bool scannable_char =
 5093|  1.03M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  1.03M|    static_assert(scannable_char,
 5095|  1.03M|                  "Cannot scan an argument of an unsupported character "
 5096|  1.03M|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  1.03M|    constexpr bool scannable_const =
 5099|  1.03M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  1.03M|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  1.03M|    constexpr bool scannable_disabled =
 5103|  1.03M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  1.03M|    static_assert(scannable_disabled,
 5105|  1.03M|                  "Cannot scan an argument that has been disabled by "
 5106|  1.03M|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  1.03M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  1.03M|    static_assert(
 5110|  1.03M|        scannable,
 5111|  1.03M|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  1.03M|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  1.03M|    return arg_value{arg};
 5115|  1.03M|}
_ZN3scn2v36detail9arg_valueC2IdEERT_:
 4901|  1.03M|    {
 4902|  1.03M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7974|   332k|    {
 7975|   332k|        return m_str;
 7976|   332k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|   712k|    {
 5426|   712k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12arg_pointersEv:
 5378|   712k|    {
 5379|   712k|        return m_argptrs;
 5380|   712k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   332k|{
 8820|   332k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   332k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24.8k, False: 307k]
  |  |  ------------------
  ------------------
 8821|  24.8k|        return unexpected(result.error());
 8822|  24.8k|    }
 8823|   307k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   307k|    static_cast<    \
  |  |  929|   307k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   307k|    static_cast<    \
  |  |  929|   307k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   332k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  26.8k|    {
 1476|  26.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  26.8k|    {
  447|  26.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   369k|    {
 1177|   369k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2ES8_ONSt3__15tupleIJdEEE:
 5829|   342k|    {
 5830|   342k|    }
_ZN3scn2v36detail25scan_result_value_storageIJdEEC2EONSt3__15tupleIJdEEE:
 5615|   875k|    {
 5616|   875k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|   342k|    {
 1430|   342k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|   342k|    {
  437|   342k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE4argsEv:
 5373|   712k|    {
 5374|   712k|        return m_args;
 5375|   712k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   332k|    {
 7971|   332k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   369k|    {
 1598|   369k|        return has_value();
 1599|   369k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   711k|    {
  485|   711k|        return m_has_value;
  486|   711k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEptEv:
 1672|   342k|    {
 1673|   342k|        return &value();
 1674|   342k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|   342k|    {
 1627|   342k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   342k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   342k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   342k|        return this->get_value();
 1629|   342k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   342k|    {
  451|   342k|        return m_value;
  452|   342k|    }
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8933|   166k|{
 8934|   166k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   166k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   166k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   166k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   166k|    static_cast<    \
  |  |  929|   166k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   166k|    static_cast<    \
  |  |  929|   166k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   166k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8972|  36.6k|{
 8973|  36.6k|    T value;
 8974|  36.6k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  36.6k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  36.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  36.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  36.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  36.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.06k, False: 34.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.06k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.06k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.06k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.06k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.06k|    }                                                  \
  |  |  |  | 3671|  36.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  34.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  34.5k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  34.5k|    static_cast<    \
  |  |  929|  34.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  34.5k|    static_cast<    \
  |  |  929|  34.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  36.6k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEdEENS0_14basic_scan_argIT_EERT0_:
 5154|  75.5k|{
 5155|  75.5k|    check_scan_arg_types<T>();
 5156|       |
 5157|  75.5k|    basic_scan_arg<Context> arg;
 5158|  75.5k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  75.5k|    arg.m_value = make_value<Context>(value);
 5160|  75.5k|    return arg;
 5161|  75.5k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8866|   168k|{
 8867|   168k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   168k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   168k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   168k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   168k|    static_cast<    \
  |  |  929|   168k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   168k|    static_cast<    \
  |  |  929|   168k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   168k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJeEEEDav:
 5395|   720k|{
 5396|   720k|    detail::check_scan_arg_types<Args...>();
 5397|   720k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   720k|}
_ZN3scn2v36detail20check_scan_arg_typesIJeEEEvv:
 5134|  1.04M|{
 5135|  1.04M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  1.04M|                  "Scan argument types must be default constructible");
 5137|  1.04M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  1.04M|                  "Scan argument types must be Destructible");
 5139|  1.04M|    static_assert(
 5140|  1.04M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  1.04M|        "Scan argument types must not be references");
 5142|  1.04M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEEC2Ev:
 5348|   720k|    {
 5349|   720k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   720k|    {
 5360|   720k|        return {detail::make_arg<
 5361|   720k|            kind, Context,
 5362|   720k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   720k|                                 typename Context::char_type>::value>(args)...};
 5364|   720k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE18EevEEPvRT2_:
 5169|   720k|{
 5170|   720k|    return make_value<Context>(value).ref_value;
 5171|   720k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEeEEDaRT0_:
 5119|   796k|{
 5120|   796k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|   796k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|   796k|                                  needs_context_tag>) {
 5124|   796k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   796k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|   796k|    }
 5126|   796k|    else {
 5127|   796k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|   796k|            value, context_tag<Context>{}));
 5129|   796k|    }
 5130|   796k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERe:
 4958|   796k|    {                                                                        \
 4959|   796k|        return val;                                                          \
 4960|   796k|    }
_ZN3scn2v36detail15make_value_implIReEEDaOT_:
 5088|  1.04M|{
 5089|  1.04M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  1.04M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  1.04M|    constexpr bool scannable_char =
 5093|  1.04M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  1.04M|    static_assert(scannable_char,
 5095|  1.04M|                  "Cannot scan an argument of an unsupported character "
 5096|  1.04M|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  1.04M|    constexpr bool scannable_const =
 5099|  1.04M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  1.04M|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  1.04M|    constexpr bool scannable_disabled =
 5103|  1.04M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  1.04M|    static_assert(scannable_disabled,
 5105|  1.04M|                  "Cannot scan an argument that has been disabled by "
 5106|  1.04M|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  1.04M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  1.04M|    static_assert(
 5110|  1.04M|        scannable,
 5111|  1.04M|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  1.04M|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  1.04M|    return arg_value{arg};
 5115|  1.04M|}
_ZN3scn2v36detail9arg_valueC2IeEERT_:
 4901|  1.04M|    {
 4902|  1.04M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7974|   336k|    {
 7975|   336k|        return m_str;
 7976|   336k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJeEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|   720k|    {
 5426|   720k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE12arg_pointersEv:
 5378|   720k|    {
 5379|   720k|        return m_argptrs;
 5380|   720k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   336k|{
 8820|   336k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   336k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24.8k, False: 311k]
  |  |  ------------------
  ------------------
 8821|  24.8k|        return unexpected(result.error());
 8822|  24.8k|    }
 8823|   311k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   311k|    static_cast<    \
  |  |  929|   311k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   311k|    static_cast<    \
  |  |  929|   311k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   336k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  26.8k|    {
 1476|  26.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  26.8k|    {
  447|  26.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   373k|    {
 1177|   373k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2ES8_ONSt3__15tupleIJeEEE:
 5829|   346k|    {
 5830|   346k|    }
_ZN3scn2v36detail25scan_result_value_storageIJeEEC2EONSt3__15tupleIJeEEE:
 5615|   887k|    {
 5616|   887k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|   346k|    {
 1430|   346k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|   346k|    {
  437|   346k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE4argsEv:
 5373|   720k|    {
 5374|   720k|        return m_args;
 5375|   720k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   336k|    {
 7971|   336k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   373k|    {
 1598|   373k|        return has_value();
 1599|   373k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   720k|    {
  485|   720k|        return m_has_value;
  486|   720k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEptEv:
 1672|   346k|    {
 1673|   346k|        return &value();
 1674|   346k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|   346k|    {
 1627|   346k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   346k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   346k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   346k|        return this->get_value();
 1629|   346k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   346k|    {
  451|   346k|        return m_value;
  452|   346k|    }
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8933|   168k|{
 8934|   168k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   168k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   168k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   168k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   168k|    static_cast<    \
  |  |  929|   168k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   168k|    static_cast<    \
  |  |  929|   168k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   168k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8972|  37.2k|{
 8973|  37.2k|    T value;
 8974|  37.2k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  37.2k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  37.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  37.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  37.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  37.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.06k, False: 35.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.06k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.06k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.06k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.06k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.06k|    }                                                  \
  |  |  |  | 3671|  37.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  35.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  35.1k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  35.1k|    static_cast<    \
  |  |  929|  35.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  35.1k|    static_cast<    \
  |  |  929|  35.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  37.2k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEeEENS0_14basic_scan_argIT_EERT0_:
 5154|  76.5k|{
 5155|  76.5k|    check_scan_arg_types<T>();
 5156|       |
 5157|  76.5k|    basic_scan_arg<Context> arg;
 5158|  76.5k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  76.5k|    arg.m_value = make_value<Context>(value);
 5160|  76.5k|    return arg;
 5161|  76.5k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  80.6k|    {
 2724|  80.6k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  80.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  80.6k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  80.6k|    {
 2705|  80.6k|        return decay_copy(t.begin());
 2706|  80.6k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 1948|  52.7M|{
 1949|  52.7M|    return SCN_FWD(t);
  ------------------
  |  |  930|  52.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  52.7M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  2.48M|    {
 2781|  2.48M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.48M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  2.48M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  2.48M|    {
 2763|  2.48M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.48M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  2.48M|    }
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8866|   181k|{
 8867|   181k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   181k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   181k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   181k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   181k|    static_cast<    \
  |  |  929|   181k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   181k|    static_cast<    \
  |  |  929|   181k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   181k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8653|   563k|{
 8654|   563k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   563k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8655|   563k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8590|   563k|{
 8591|   563k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   563k|    auto result = vscan_impl(buffer, format, args);
 8594|   563k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   563k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 37.2k, False: 525k]
  |  |  ------------------
  ------------------
 8595|  37.2k|        return unexpected(result.error());
 8596|  37.2k|    }
 8597|   525k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   525k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   563k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4719|  1.24M|{
 4720|  1.24M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|  1.24M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|  1.24M|                  "\n"
 4724|  1.24M|                  "Unsupported range type given as input to a scanning "
 4725|  1.24M|                  "function.\n"
 4726|  1.24M|                  "A range needs to have a character type (value type) "
 4727|  1.24M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|  1.24M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|  1.24M|                  "to be included.\n"
 4730|  1.24M|                  "See the scnlib documentation for more details.");
 4731|  1.24M|    static_assert(
 4732|  1.24M|        !std::is_same_v<T, custom_char_traits>,
 4733|  1.24M|        "\n"
 4734|  1.24M|        "Unsupported range type given as input to a scanning "
 4735|  1.24M|        "function.\n"
 4736|  1.24M|        "String types (std::basic_string, and std::basic_string_view) "
 4737|  1.24M|        "need to use std::char_traits. Strings with custom Traits are "
 4738|  1.24M|        "not supported.");
 4739|  1.24M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|  1.24M|                  "\n"
 4741|  1.24M|                  "Unsupported range type given as input to a scanning "
 4742|  1.24M|                  "function.\n"
 4743|  1.24M|                  "file_marker_found cannot be used as an "
 4744|  1.24M|                  "source range type to scn::scan.\n"
 4745|  1.24M|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|  1.24M|                  "and do not provide an explicit source range, "
 4747|  1.24M|                  "or use scn::scan with a FILE* directly.");
 4748|  1.24M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|  1.24M|                  "\n"
 4750|  1.24M|                  "Unsupported range type given as input to a scanning "
 4751|  1.24M|                  "function.\n"
 4752|  1.24M|                  "In order to be scannable, a range needs to satisfy "
 4753|  1.24M|                  "`forward_range`. `input_range` is not sufficient.");
 4754|  1.24M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|  1.24M|                  "\n"
 4756|  1.24M|                  "Unsupported range type given as input to a scanning "
 4757|  1.24M|                  "function.\n"
 4758|  1.24M|                  "A range needs to model forward_range and have a valid "
 4759|  1.24M|                  "character type (char or wchar_t) to be scannable.\n"
 4760|  1.24M|                  "Examples of scannable ranges are std::string, "
 4761|  1.24M|                  "std::string_view, "
 4762|  1.24M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|  1.24M|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|  1.24M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|  1.24M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4689|  1.24M|{
 4690|  1.24M|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (4690:19): [Folded - Ignored]
  ------------------
 4691|  1.24M|        return file_marker_found{};
 4692|  1.24M|    }
 4693|  1.24M|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (4693:24): [Folded - Ignored]
  ------------------
 4694|  1.24M|        if constexpr (ranges::range<Range>) {
 4695|  1.24M|            return insufficient_range{};
 4696|  1.24M|        }
 4697|  1.24M|        else {
 4698|  1.24M|            return invalid_input_range{};
 4699|  1.24M|        }
 4700|  1.24M|    }
 4701|  1.24M|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4701:24): [Folded - Ignored]
  ------------------
 4702|  1.24M|        return invalid_char_type{};
 4703|  1.24M|    }
 4704|  1.24M|    else {
 4705|  1.24M|        return make_forward_scan_buffer(r);
 4706|  1.24M|    }
 4707|  1.24M|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4523|  1.24M|{
 4524|  1.24M|    return basic_scan_forward_buffer_impl(range);
 4525|  1.24M|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_LPv0EEEOT_:
 4410|  1.24M|    {
 4411|  1.24M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4381|  1.24M|    {
 4382|  1.24M|    }
_ZN3scn2v36detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4150|  1.24M|    {
 4151|  1.24M|    }
_ZN3scn2v36detail17basic_scan_bufferIcED2Ev:
 4065|  1.24M|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  2.40M|    {
 2724|  2.40M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.40M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  2.40M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  2.40M|    {
 2705|  2.40M|        return decay_copy(t.begin());
 2706|  2.40M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3329|  3.56M|    {
 3330|  3.56M|        return m_iterator;
 3331|  3.56M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4414|  15.3M|    {
 4415|  15.3M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4415:13): [True: 276k, False: 15.0M]
  ------------------
 4416|   276k|            return false;
 4417|   276k|        }
 4418|  15.0M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4418:23): [Folded - Ignored]
  ------------------
 4419|  15.0M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  15.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  15.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4420|  15.0M|        }
 4421|  15.0M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4421:13): [True: 13.8M, False: 1.22M]
  ------------------
 4422|  13.8M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4423|  13.8M|                                          this->m_current_view.begin(),
 4424|  13.8M|                                          this->m_current_view.end());
 4425|  13.8M|        }
 4426|  15.0M|        m_latest = *m_cursor;
 4427|  15.0M|        ++m_cursor;
 4428|  15.0M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4429|  15.0M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4429:23): [Folded - Ignored]
  ------------------
 4430|  15.0M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  15.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  15.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4431|  15.0M|        }
 4432|  15.0M|        return true;
 4433|  15.0M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  45.5M|    {
 2781|  45.5M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  45.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  45.5M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  45.5M|    {
 2763|  45.5M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  45.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  45.5M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3333|  46.6M|    {
 3334|  46.6M|        return m_sentinel;
 3335|  46.6M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE4syncEl:
 4070|  1.24M|    {
 4071|  1.24M|        SCN_UNUSED(position);
  ------------------
  |  |  909|  1.24M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4072|  1.24M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1475|  80.6k|    {
 1476|  80.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  446|  80.6k|    {
  447|  80.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.24M|    {
 1177|  1.24M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5922|  1.16M|{
 5923|  1.16M|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|  1.16M|                      ranges::iterator_t<SourceRange>>) {
 5925|  1.16M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|  1.16M|    }
 5927|  1.16M|    else {
 5928|  1.16M|        auto it = ranges::begin(source);
 5929|  1.16M|        while (n > 0) {
 5930|  1.16M|            --n;
 5931|  1.16M|            ++it;
 5932|  1.16M|        }
 5933|  1.16M|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|  1.16M|    }
 5935|  1.16M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.16M|    {
 2724|  1.16M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.16M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.16M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.16M|    {
 2705|  1.16M|        return decay_copy(t.begin());
 2706|  1.16M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 5909|  1.16M|{
 5910|  1.16M|    return ranges::end(source);
 5911|  1.16M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.16M|    {
 2781|  1.16M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.16M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.16M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.16M|    {
 2763|  1.16M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.16M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.16M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1429|  1.16M|    {
 1430|  1.16M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  436|  1.16M|    {
  437|  1.16M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7974|   362k|    {
 7975|   362k|        return m_str;
 7976|   362k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   362k|{
 8820|   362k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   362k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24.8k, False: 338k]
  |  |  ------------------
  ------------------
 8821|  24.8k|        return unexpected(result.error());
 8822|  24.8k|    }
 8823|   338k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   338k|    static_cast<    \
  |  |  929|   338k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   338k|    static_cast<    \
  |  |  929|   338k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   362k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1597|  1.24M|    {
 1598|  1.24M|        return has_value();
 1599|  1.24M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.48M|    {
  485|  2.48M|        return m_has_value;
  486|  2.48M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1603|  80.6k|    {
 1604|  80.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  80.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  80.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  80.6k|        return this->get_unexpected().error();
 1606|  80.6k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  80.6k|    {
  468|  80.6k|        return m_unexpected;
  469|  80.6k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|  26.8k|    {
 1476|  26.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  446|  26.8k|    {
  447|  26.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   399k|    {
 1177|   399k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_LPv0EEERT_v:
 1652|  1.05M|    {
 1653|  1.05M|        return value();
 1654|  1.05M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_LPv0EEERT_v:
 1626|  1.16M|    {
 1627|  1.16M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.16M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.16M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.16M|        return this->get_value();
 1629|  1.16M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.16M|    {
  451|  1.16M|        return m_value;
  452|  1.16M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2ESE_ONS6_5tupleIJfEEE:
 5829|   373k|    {
 5830|   373k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2EOSF_:
 5680|  1.16M|    {
 5681|  1.16M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1429|   373k|    {
 1430|   373k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  436|   373k|    {
  437|   373k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_LPv0EEET_SC_:
 3315|  2.40M|    {
 3316|  2.40M|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   362k|    {
 7971|   362k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   399k|    {
 1598|   399k|        return has_value();
 1599|   399k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   773k|    {
  485|   773k|        return m_has_value;
  486|   773k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1672|   373k|    {
 1673|   373k|        return &value();
 1674|   373k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1626|   373k|    {
 1627|   373k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   373k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   373k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   373k|        return this->get_value();
 1629|   373k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   373k|    {
  451|   373k|        return m_value;
  452|   373k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 5697|  1.16M|    {
 5698|  1.16M|        return ranges::begin(m_range);
 5699|  1.16M|    }
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8933|   181k|{
 8934|   181k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   181k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   181k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   181k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   181k|    static_cast<    \
  |  |  929|   181k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   181k|    static_cast<    \
  |  |  929|   181k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   181k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8671|   563k|{
 8672|   563k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   563k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8673|   563k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8606|   563k|{
 8607|   563k|#if !SCN_DISABLE_LOCALE
 8608|   563k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   563k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   563k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   563k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   563k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   563k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 37.2k, False: 525k]
  |  |  ------------------
  ------------------
 8615|  37.2k|        return unexpected(result.error());
 8616|  37.2k|    }
 8617|   525k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   525k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   563k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8972|  37.0k|{
 8973|  37.0k|    T value;
 8974|  37.0k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  37.0k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  37.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  37.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  37.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  37.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.06k, False: 34.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.06k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.06k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.06k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.06k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.06k|    }                                                  \
  |  |  |  | 3671|  37.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  34.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  34.9k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  34.9k|    static_cast<    \
  |  |  929|  34.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  34.9k|    static_cast<    \
  |  |  929|  34.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  37.0k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8684|   115k|{
 8685|   115k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|   115k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8686|   115k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|   115k|{
 8631|   115k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|   115k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|   115k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   115k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.20k, False: 109k]
  |  |  ------------------
  ------------------
 8635|  6.20k|        return unexpected(result.error());
 8636|  6.20k|    }
 8637|   109k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   109k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|   115k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_LPv0EEEOT_v:
 1662|   109k|    {
 1663|   109k|        return std::move(value());
 1664|   109k|    }
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8866|   189k|{
 8867|   189k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   189k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   189k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   189k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   189k|    static_cast<    \
  |  |  929|   189k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   189k|    static_cast<    \
  |  |  929|   189k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   189k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7974|   379k|    {
 7975|   379k|        return m_str;
 7976|   379k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   379k|{
 8820|   379k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   379k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24.8k, False: 354k]
  |  |  ------------------
  ------------------
 8821|  24.8k|        return unexpected(result.error());
 8822|  24.8k|    }
 8823|   354k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   354k|    static_cast<    \
  |  |  929|   354k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   354k|    static_cast<    \
  |  |  929|   354k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   379k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|  26.8k|    {
 1476|  26.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  446|  26.8k|    {
  447|  26.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   418k|    {
 1177|   418k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2ESE_ONS6_5tupleIJdEEE:
 5829|   391k|    {
 5830|   391k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1429|   391k|    {
 1430|   391k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  436|   391k|    {
  437|   391k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   379k|    {
 7971|   379k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   418k|    {
 1598|   418k|        return has_value();
 1599|   418k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   809k|    {
  485|   809k|        return m_has_value;
  486|   809k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1672|   391k|    {
 1673|   391k|        return &value();
 1674|   391k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1626|   391k|    {
 1627|   391k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   391k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   391k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   391k|        return this->get_value();
 1629|   391k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   391k|    {
  451|   391k|        return m_value;
  452|   391k|    }
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8933|   189k|{
 8934|   189k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   189k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   189k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   189k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   189k|    static_cast<    \
  |  |  929|   189k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   189k|    static_cast<    \
  |  |  929|   189k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   189k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8972|  38.9k|{
 8973|  38.9k|    T value;
 8974|  38.9k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  38.9k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  38.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  38.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  38.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  38.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.06k, False: 36.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.06k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.06k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.06k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.06k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.06k|    }                                                  \
  |  |  |  | 3671|  38.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  36.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  36.8k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  36.8k|    static_cast<    \
  |  |  929|  36.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  36.8k|    static_cast<    \
  |  |  929|  36.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  38.9k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8866|   191k|{
 8867|   191k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   191k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   191k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   191k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   191k|    static_cast<    \
  |  |  929|   191k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   191k|    static_cast<    \
  |  |  929|   191k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   191k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7974|   383k|    {
 7975|   383k|        return m_str;
 7976|   383k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   383k|{
 8820|   383k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   383k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24.8k, False: 358k]
  |  |  ------------------
  ------------------
 8821|  24.8k|        return unexpected(result.error());
 8822|  24.8k|    }
 8823|   358k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   358k|    static_cast<    \
  |  |  929|   358k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   358k|    static_cast<    \
  |  |  929|   358k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   383k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|  26.8k|    {
 1476|  26.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  446|  26.8k|    {
  447|  26.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   422k|    {
 1177|   422k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2ESE_ONS6_5tupleIJeEEE:
 5829|   396k|    {
 5830|   396k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1429|   396k|    {
 1430|   396k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  436|   396k|    {
  437|   396k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   383k|    {
 7971|   383k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   422k|    {
 1598|   422k|        return has_value();
 1599|   422k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   818k|    {
  485|   818k|        return m_has_value;
  486|   818k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1672|   396k|    {
 1673|   396k|        return &value();
 1674|   396k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1626|   396k|    {
 1627|   396k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   396k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   396k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   396k|        return this->get_value();
 1629|   396k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   396k|    {
  451|   396k|        return m_value;
  452|   396k|    }
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8933|   191k|{
 8934|   191k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   191k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   191k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   191k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   191k|    static_cast<    \
  |  |  929|   191k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   191k|    static_cast<    \
  |  |  929|   191k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   191k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8972|  39.3k|{
 8973|  39.3k|    T value;
 8974|  39.3k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  39.3k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  39.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  39.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  39.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  39.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.06k, False: 37.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.06k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.06k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.06k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.06k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.06k|    }                                                  \
  |  |  |  | 3671|  39.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  37.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  37.2k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  37.2k|    static_cast<    \
  |  |  929|  37.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  37.2k|    static_cast<    \
  |  |  929|  37.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  39.3k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   165k|    {
 2724|   165k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   165k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   165k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   165k|    {
 2705|   165k|        return decay_copy(t.begin());
 2706|   165k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1948|  2.37M|{
 1949|  2.37M|    return SCN_FWD(t);
  ------------------
  |  |  930|  2.37M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  2.37M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   751k|    {
 2781|   751k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   751k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   751k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   751k|    {
 2763|   751k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   751k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   751k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJfEEEDav:
 5395|   224k|{
 5396|   224k|    detail::check_scan_arg_types<Args...>();
 5397|   224k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   224k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEEC2Ev:
 5348|   224k|    {
 5349|   224k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   224k|    {
 5360|   224k|        return {detail::make_arg<
 5361|   224k|            kind, Context,
 5362|   224k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   224k|                                 typename Context::char_type>::value>(args)...};
 5364|   224k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE16EfvEEPvRT2_:
 5169|   224k|{
 5170|   224k|    return make_value<Context>(value).ref_value;
 5171|   224k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEfEEDaRT0_:
 5119|   245k|{
 5120|   245k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|   245k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|   245k|                                  needs_context_tag>) {
 5124|   245k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   245k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|   245k|    }
 5126|   245k|    else {
 5127|   245k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|   245k|            value, context_tag<Context>{}));
 5129|   245k|    }
 5130|   245k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERf:
 4958|   245k|    {                                                                        \
 4959|   245k|        return val;                                                          \
 4960|   245k|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8590|   171k|{
 8591|   171k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   171k|    auto result = vscan_impl(buffer, format, args);
 8594|   171k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   171k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 74.4k, False: 96.5k]
  |  |  ------------------
  ------------------
 8595|  74.4k|        return unexpected(result.error());
 8596|  74.4k|    }
 8597|  96.5k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  96.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   171k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 4719|   373k|{
 4720|   373k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|   373k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|   373k|                  "\n"
 4724|   373k|                  "Unsupported range type given as input to a scanning "
 4725|   373k|                  "function.\n"
 4726|   373k|                  "A range needs to have a character type (value type) "
 4727|   373k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|   373k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|   373k|                  "to be included.\n"
 4730|   373k|                  "See the scnlib documentation for more details.");
 4731|   373k|    static_assert(
 4732|   373k|        !std::is_same_v<T, custom_char_traits>,
 4733|   373k|        "\n"
 4734|   373k|        "Unsupported range type given as input to a scanning "
 4735|   373k|        "function.\n"
 4736|   373k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|   373k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|   373k|        "not supported.");
 4739|   373k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|   373k|                  "\n"
 4741|   373k|                  "Unsupported range type given as input to a scanning "
 4742|   373k|                  "function.\n"
 4743|   373k|                  "file_marker_found cannot be used as an "
 4744|   373k|                  "source range type to scn::scan.\n"
 4745|   373k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|   373k|                  "and do not provide an explicit source range, "
 4747|   373k|                  "or use scn::scan with a FILE* directly.");
 4748|   373k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|   373k|                  "\n"
 4750|   373k|                  "Unsupported range type given as input to a scanning "
 4751|   373k|                  "function.\n"
 4752|   373k|                  "In order to be scannable, a range needs to satisfy "
 4753|   373k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|   373k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|   373k|                  "\n"
 4756|   373k|                  "Unsupported range type given as input to a scanning "
 4757|   373k|                  "function.\n"
 4758|   373k|                  "A range needs to model forward_range and have a valid "
 4759|   373k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|   373k|                  "Examples of scannable ranges are std::string, "
 4761|   373k|                  "std::string_view, "
 4762|   373k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|   373k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|   373k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|   373k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
 4658|   373k|{
 4659|   373k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4659:19): [Folded - Ignored]
  ------------------
 4660|   373k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4661|   373k|    }
 4662|   373k|    else {
 4663|   373k|        return invalid_char_type{};
 4664|   373k|    }
 4665|   373k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   373k|    {
 2855|   373k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   373k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   373k|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   373k|    {
 2836|   373k|        return t.data();
 2837|   373k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3230|   373k|    {
 3231|   373k|        return ranges::empty(derived())
  ------------------
  |  Branch (3231:16): [True: 1.14k, False: 372k]
  ------------------
 3232|   373k|                   ? nullptr
 3233|   373k|                   : std::addressof(*ranges::begin(derived()));
 3234|   373k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|   373k|    {
 3005|   373k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   373k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|   373k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|   373k|    {
 2978|   373k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   373k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|   373k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5emptyEv:
 3338|   671k|    {
 3339|   671k|        return m_iterator == m_sentinel;
 3340|   671k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3184|   746k|    {
 3185|   746k|        return static_cast<const D&>(*this);
 3186|   746k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   584k|    {
 2724|   584k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   584k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   584k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   584k|    {
 2705|   584k|        return decay_copy(t.begin());
 2706|   584k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3329|  12.2M|    {
 3330|  12.2M|        return m_iterator;
 3331|  12.2M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|   373k|    {
 2930|   373k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|   373k|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|   373k|    {
 2896|   373k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|   373k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|   373k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_LPv0EEEmv:
 3345|  1.63M|    {
 3346|  1.63M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3347|  1.63M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|   161k|    {
 1476|   161k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|   161k|    {
  447|   161k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   373k|    {
 1177|   373k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5922|   212k|{
 5923|   212k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|   212k|                      ranges::iterator_t<SourceRange>>) {
 5925|   212k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|   212k|    }
 5927|   212k|    else {
 5928|   212k|        auto it = ranges::begin(source);
 5929|   212k|        while (n > 0) {
 5930|   212k|            --n;
 5931|   212k|            ++it;
 5932|   212k|        }
 5933|   212k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|   212k|    }
 5935|   212k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   658k|    {
 2724|   658k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   658k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   658k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   658k|    {
 2705|   658k|        return decay_copy(t.begin());
 2706|   658k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 5909|   212k|{
 5910|   212k|    return ranges::end(source);
 5911|   212k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   212k|    {
 2781|   212k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   212k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   212k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   212k|    {
 2763|   212k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   212k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   212k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3333|  6.89M|    {
 3334|  6.89M|        return m_sentinel;
 3335|  6.89M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|   212k|    {
 1430|   212k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  436|   212k|    {
  437|   212k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7974|   112k|    {
 7975|   112k|        return m_str;
 7976|   112k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJfEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|   224k|    {
 5426|   224k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE12arg_pointersEv:
 5378|   224k|    {
 5379|   224k|        return m_argptrs;
 5380|   224k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5477|   683k|    {
 5478|   683k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   112k|{
 8820|   112k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 49.6k, False: 62.6k]
  |  |  ------------------
  ------------------
 8821|  49.6k|        return unexpected(result.error());
 8822|  49.6k|    }
 8823|  62.6k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  62.6k|    static_cast<    \
  |  |  929|  62.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  62.6k|    static_cast<    \
  |  |  929|  62.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   112k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1597|   373k|    {
 1598|   373k|        return has_value();
 1599|   373k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   747k|    {
  485|   747k|        return m_has_value;
  486|   747k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1603|   161k|    {
 1604|   161k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   161k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   161k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   161k|        return this->get_unexpected().error();
 1606|   161k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   161k|    {
  468|   161k|        return m_unexpected;
  469|   161k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  53.7k|    {
 1476|  53.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  53.7k|    {
  447|  53.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   122k|    {
 1177|   122k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1652|   193k|    {
 1653|   193k|        return value();
 1654|   193k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|   212k|    {
 1627|   212k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   212k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   212k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   212k|        return this->get_value();
 1629|   212k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   212k|    {
  451|   212k|        return m_value;
  452|   212k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2ES8_ONSt3__15tupleIJfEEE:
 5829|  68.7k|    {
 5830|  68.7k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5680|   212k|    {
 5681|   212k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|  68.7k|    {
 1430|  68.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|  68.7k|    {
  437|  68.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE4argsEv:
 5373|   224k|    {
 5374|   224k|        return m_args;
 5375|   224k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_LPv0EEET_S6_:
 3315|  4.37M|    {
 3316|  4.37M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7695|   683k|{
 7696|   683k|    return s;
 7697|   683k|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7667|   683k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   112k|    {
 7971|   112k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   122k|    {
 1598|   122k|        return has_value();
 1599|   122k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   191k|    {
  485|   191k|        return m_has_value;
  486|   191k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEptEv:
 1672|  68.7k|    {
 1673|  68.7k|        return &value();
 1674|  68.7k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|  68.7k|    {
 1627|  68.7k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  68.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  68.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  68.7k|        return this->get_value();
 1629|  68.7k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  68.7k|    {
  451|  68.7k|        return m_value;
  452|  68.7k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 5697|   212k|    {
 5698|   212k|        return ranges::begin(m_range);
 5699|   212k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8606|   171k|{
 8607|   171k|#if !SCN_DISABLE_LOCALE
 8608|   171k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   171k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   171k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   171k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   171k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   171k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 74.4k, False: 96.5k]
  |  |  ------------------
  ------------------
 8615|  74.4k|        return unexpected(result.error());
 8616|  74.4k|    }
 8617|  96.5k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  96.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   171k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEfEENS0_14basic_scan_argIT_EERT0_:
 5154|  20.4k|{
 5155|  20.4k|    check_scan_arg_types<T>();
 5156|       |
 5157|  20.4k|    basic_scan_arg<Context> arg;
 5158|  20.4k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  20.4k|    arg.m_value = make_value<Context>(value);
 5160|  20.4k|    return arg;
 5161|  20.4k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5240|   747k|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|  31.5k|{
 8631|  31.5k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|  31.5k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|  31.5k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  31.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.4k, False: 19.1k]
  |  |  ------------------
  ------------------
 8635|  12.4k|        return unexpected(result.error());
 8636|  12.4k|    }
 8637|  19.1k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  19.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|  31.5k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|  19.1k|    {
 1663|  19.1k|        return std::move(value());
 1664|  19.1k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJdEEEDav:
 5395|   228k|{
 5396|   228k|    detail::check_scan_arg_types<Args...>();
 5397|   228k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   228k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEEC2Ev:
 5348|   228k|    {
 5349|   228k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   228k|    {
 5360|   228k|        return {detail::make_arg<
 5361|   228k|            kind, Context,
 5362|   228k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   228k|                                 typename Context::char_type>::value>(args)...};
 5364|   228k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE17EdvEEPvRT2_:
 5169|   228k|{
 5170|   228k|    return make_value<Context>(value).ref_value;
 5171|   228k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEdEEDaRT0_:
 5119|   249k|{
 5120|   249k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|   249k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|   249k|                                  needs_context_tag>) {
 5124|   249k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   249k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|   249k|    }
 5126|   249k|    else {
 5127|   249k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|   249k|            value, context_tag<Context>{}));
 5129|   249k|    }
 5130|   249k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERd:
 4958|   249k|    {                                                                        \
 4959|   249k|        return val;                                                          \
 4960|   249k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7974|   114k|    {
 7975|   114k|        return m_str;
 7976|   114k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|   228k|    {
 5426|   228k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12arg_pointersEv:
 5378|   228k|    {
 5379|   228k|        return m_argptrs;
 5380|   228k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   114k|{
 8820|   114k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   114k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 49.6k, False: 64.5k]
  |  |  ------------------
  ------------------
 8821|  49.6k|        return unexpected(result.error());
 8822|  49.6k|    }
 8823|  64.5k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  64.5k|    static_cast<    \
  |  |  929|  64.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  64.5k|    static_cast<    \
  |  |  929|  64.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   114k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  53.7k|    {
 1476|  53.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  53.7k|    {
  447|  53.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   124k|    {
 1177|   124k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2ES8_ONSt3__15tupleIJdEEE:
 5829|  71.0k|    {
 5830|  71.0k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|  71.0k|    {
 1430|  71.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|  71.0k|    {
  437|  71.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE4argsEv:
 5373|   228k|    {
 5374|   228k|        return m_args;
 5375|   228k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   114k|    {
 7971|   114k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   124k|    {
 1598|   124k|        return has_value();
 1599|   124k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   195k|    {
  485|   195k|        return m_has_value;
  486|   195k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEptEv:
 1672|  71.0k|    {
 1673|  71.0k|        return &value();
 1674|  71.0k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|  71.0k|    {
 1627|  71.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  71.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  71.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  71.0k|        return this->get_value();
 1629|  71.0k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  71.0k|    {
  451|  71.0k|        return m_value;
  452|  71.0k|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEdEENS0_14basic_scan_argIT_EERT0_:
 5154|  21.1k|{
 5155|  21.1k|    check_scan_arg_types<T>();
 5156|       |
 5157|  21.1k|    basic_scan_arg<Context> arg;
 5158|  21.1k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  21.1k|    arg.m_value = make_value<Context>(value);
 5160|  21.1k|    return arg;
 5161|  21.1k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJeEEEDav:
 5395|   230k|{
 5396|   230k|    detail::check_scan_arg_types<Args...>();
 5397|   230k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   230k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEEC2Ev:
 5348|   230k|    {
 5349|   230k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   230k|    {
 5360|   230k|        return {detail::make_arg<
 5361|   230k|            kind, Context,
 5362|   230k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   230k|                                 typename Context::char_type>::value>(args)...};
 5364|   230k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE18EevEEPvRT2_:
 5169|   230k|{
 5170|   230k|    return make_value<Context>(value).ref_value;
 5171|   230k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEeEEDaRT0_:
 5119|   252k|{
 5120|   252k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|   252k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|   252k|                                  needs_context_tag>) {
 5124|   252k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   252k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|   252k|    }
 5126|   252k|    else {
 5127|   252k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|   252k|            value, context_tag<Context>{}));
 5129|   252k|    }
 5130|   252k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERe:
 4958|   252k|    {                                                                        \
 4959|   252k|        return val;                                                          \
 4960|   252k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7974|   115k|    {
 7975|   115k|        return m_str;
 7976|   115k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJeEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|   230k|    {
 5426|   230k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE12arg_pointersEv:
 5378|   230k|    {
 5379|   230k|        return m_argptrs;
 5380|   230k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   115k|{
 8820|   115k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   115k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 49.6k, False: 65.8k]
  |  |  ------------------
  ------------------
 8821|  49.6k|        return unexpected(result.error());
 8822|  49.6k|    }
 8823|  65.8k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  65.8k|    static_cast<    \
  |  |  929|  65.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  65.8k|    static_cast<    \
  |  |  929|  65.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   115k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  53.7k|    {
 1476|  53.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  53.7k|    {
  447|  53.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   126k|    {
 1177|   126k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2ES8_ONSt3__15tupleIJeEEE:
 5829|  72.4k|    {
 5830|  72.4k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|  72.4k|    {
 1430|  72.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|  72.4k|    {
  437|  72.4k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE4argsEv:
 5373|   230k|    {
 5374|   230k|        return m_args;
 5375|   230k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   115k|    {
 7971|   115k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   126k|    {
 1598|   126k|        return has_value();
 1599|   126k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   198k|    {
  485|   198k|        return m_has_value;
  486|   198k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEptEv:
 1672|  72.4k|    {
 1673|  72.4k|        return &value();
 1674|  72.4k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|  72.4k|    {
 1627|  72.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  72.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  72.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  72.4k|        return this->get_value();
 1629|  72.4k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  72.4k|    {
  451|  72.4k|        return m_value;
  452|  72.4k|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEeEENS0_14basic_scan_argIT_EERT0_:
 5154|  21.5k|{
 5155|  21.5k|    check_scan_arg_types<T>();
 5156|       |
 5157|  21.5k|    basic_scan_arg<Context> arg;
 5158|  21.5k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  21.5k|    arg.m_value = make_value<Context>(value);
 5160|  21.5k|    return arg;
 5161|  21.5k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   161k|    {
 2724|   161k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   161k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   161k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   161k|    {
 2705|   161k|        return decay_copy(t.begin());
 2706|   161k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 1948|  7.06M|{
 1949|  7.06M|    return SCN_FWD(t);
  ------------------
  |  |  930|  7.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  7.06M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   746k|    {
 2781|   746k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   746k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   746k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   746k|    {
 2763|   746k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   746k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   746k|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8590|   170k|{
 8591|   170k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   170k|    auto result = vscan_impl(buffer, format, args);
 8594|   170k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   170k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 74.4k, False: 96.4k]
  |  |  ------------------
  ------------------
 8595|  74.4k|        return unexpected(result.error());
 8596|  74.4k|    }
 8597|  96.4k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  96.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   170k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4719|   373k|{
 4720|   373k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|   373k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|   373k|                  "\n"
 4724|   373k|                  "Unsupported range type given as input to a scanning "
 4725|   373k|                  "function.\n"
 4726|   373k|                  "A range needs to have a character type (value type) "
 4727|   373k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|   373k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|   373k|                  "to be included.\n"
 4730|   373k|                  "See the scnlib documentation for more details.");
 4731|   373k|    static_assert(
 4732|   373k|        !std::is_same_v<T, custom_char_traits>,
 4733|   373k|        "\n"
 4734|   373k|        "Unsupported range type given as input to a scanning "
 4735|   373k|        "function.\n"
 4736|   373k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|   373k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|   373k|        "not supported.");
 4739|   373k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|   373k|                  "\n"
 4741|   373k|                  "Unsupported range type given as input to a scanning "
 4742|   373k|                  "function.\n"
 4743|   373k|                  "file_marker_found cannot be used as an "
 4744|   373k|                  "source range type to scn::scan.\n"
 4745|   373k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|   373k|                  "and do not provide an explicit source range, "
 4747|   373k|                  "or use scn::scan with a FILE* directly.");
 4748|   373k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|   373k|                  "\n"
 4750|   373k|                  "Unsupported range type given as input to a scanning "
 4751|   373k|                  "function.\n"
 4752|   373k|                  "In order to be scannable, a range needs to satisfy "
 4753|   373k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|   373k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|   373k|                  "\n"
 4756|   373k|                  "Unsupported range type given as input to a scanning "
 4757|   373k|                  "function.\n"
 4758|   373k|                  "A range needs to model forward_range and have a valid "
 4759|   373k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|   373k|                  "Examples of scannable ranges are std::string, "
 4761|   373k|                  "std::string_view, "
 4762|   373k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|   373k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|   373k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|   373k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4689|   373k|{
 4690|   373k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (4690:19): [Folded - Ignored]
  ------------------
 4691|   373k|        return file_marker_found{};
 4692|   373k|    }
 4693|   373k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (4693:24): [Folded - Ignored]
  ------------------
 4694|   373k|        if constexpr (ranges::range<Range>) {
 4695|   373k|            return insufficient_range{};
 4696|   373k|        }
 4697|   373k|        else {
 4698|   373k|            return invalid_input_range{};
 4699|   373k|        }
 4700|   373k|    }
 4701|   373k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4701:24): [Folded - Ignored]
  ------------------
 4702|   373k|        return invalid_char_type{};
 4703|   373k|    }
 4704|   373k|    else {
 4705|   373k|        return make_forward_scan_buffer(r);
 4706|   373k|    }
 4707|   373k|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4523|   373k|{
 4524|   373k|    return basic_scan_forward_buffer_impl(range);
 4525|   373k|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_LPv0EEEOT_:
 4410|   373k|    {
 4411|   373k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4381|   373k|    {
 4382|   373k|    }
_ZN3scn2v36detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4150|   373k|    {
 4151|   373k|    }
_ZN3scn2v36detail17basic_scan_bufferIwED2Ev:
 4065|   373k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   585k|    {
 2724|   585k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   585k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   585k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   585k|    {
 2705|   585k|        return decay_copy(t.begin());
 2706|   585k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3329|   797k|    {
 3330|   797k|        return m_iterator;
 3331|   797k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4414|  1.81M|    {
 4415|  1.81M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4415:13): [True: 148k, False: 1.66M]
  ------------------
 4416|   148k|            return false;
 4417|   148k|        }
 4418|  1.66M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4418:23): [Folded - Ignored]
  ------------------
 4419|  1.66M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  1.66M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.66M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4420|  1.66M|        }
 4421|  1.66M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4421:13): [True: 1.29M, False: 372k]
  ------------------
 4422|  1.29M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4423|  1.29M|                                          this->m_current_view.begin(),
 4424|  1.29M|                                          this->m_current_view.end());
 4425|  1.29M|        }
 4426|  1.66M|        m_latest = *m_cursor;
 4427|  1.66M|        ++m_cursor;
 4428|  1.66M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4429|  1.66M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4429:23): [Folded - Ignored]
  ------------------
 4430|  1.66M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  1.66M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.66M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4431|  1.66M|        }
 4432|  1.66M|        return true;
 4433|  1.66M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  5.15M|    {
 2781|  5.15M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  5.15M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  5.15M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  5.15M|    {
 2763|  5.15M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  5.15M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  5.15M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3333|  5.36M|    {
 3334|  5.36M|        return m_sentinel;
 3335|  5.36M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE4syncEl:
 4070|   373k|    {
 4071|   373k|        SCN_UNUSED(position);
  ------------------
  |  |  909|   373k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4072|   373k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1475|   161k|    {
 1476|   161k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  446|   161k|    {
  447|   161k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   373k|    {
 1177|   373k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5922|   211k|{
 5923|   211k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|   211k|                      ranges::iterator_t<SourceRange>>) {
 5925|   211k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|   211k|    }
 5927|   211k|    else {
 5928|   211k|        auto it = ranges::begin(source);
 5929|   211k|        while (n > 0) {
 5930|   211k|            --n;
 5931|   211k|            ++it;
 5932|   211k|        }
 5933|   211k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|   211k|    }
 5935|   211k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   211k|    {
 2724|   211k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   211k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   211k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   211k|    {
 2705|   211k|        return decay_copy(t.begin());
 2706|   211k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 5909|   211k|{
 5910|   211k|    return ranges::end(source);
 5911|   211k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   211k|    {
 2781|   211k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   211k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   211k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   211k|    {
 2763|   211k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   211k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   211k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1429|   211k|    {
 1430|   211k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  436|   211k|    {
  437|   211k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7974|   112k|    {
 7975|   112k|        return m_str;
 7976|   112k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   112k|{
 8820|   112k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 49.6k, False: 62.5k]
  |  |  ------------------
  ------------------
 8821|  49.6k|        return unexpected(result.error());
 8822|  49.6k|    }
 8823|  62.5k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  62.5k|    static_cast<    \
  |  |  929|  62.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  62.5k|    static_cast<    \
  |  |  929|  62.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   112k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1597|   373k|    {
 1598|   373k|        return has_value();
 1599|   373k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   746k|    {
  485|   746k|        return m_has_value;
  486|   746k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1603|   161k|    {
 1604|   161k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   161k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   161k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   161k|        return this->get_unexpected().error();
 1606|   161k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   161k|    {
  468|   161k|        return m_unexpected;
  469|   161k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|  53.7k|    {
 1476|  53.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  446|  53.7k|    {
  447|  53.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   122k|    {
 1177|   122k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_LPv0EEERT_v:
 1652|   192k|    {
 1653|   192k|        return value();
 1654|   192k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_LPv0EEERT_v:
 1626|   211k|    {
 1627|   211k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   211k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   211k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   211k|        return this->get_value();
 1629|   211k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   211k|    {
  451|   211k|        return m_value;
  452|   211k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2ESE_ONS6_5tupleIJfEEE:
 5829|  68.7k|    {
 5830|  68.7k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2EOSF_:
 5680|   211k|    {
 5681|   211k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1429|  68.7k|    {
 1430|  68.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  436|  68.7k|    {
  437|  68.7k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_LPv0EEET_SC_:
 3315|   585k|    {
 3316|   585k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   112k|    {
 7971|   112k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   122k|    {
 1598|   122k|        return has_value();
 1599|   122k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   191k|    {
  485|   191k|        return m_has_value;
  486|   191k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1672|  68.7k|    {
 1673|  68.7k|        return &value();
 1674|  68.7k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1626|  68.7k|    {
 1627|  68.7k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  68.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  68.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  68.7k|        return this->get_value();
 1629|  68.7k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  68.7k|    {
  451|  68.7k|        return m_value;
  452|  68.7k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 5697|   211k|    {
 5698|   211k|        return ranges::begin(m_range);
 5699|   211k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8606|   170k|{
 8607|   170k|#if !SCN_DISABLE_LOCALE
 8608|   170k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   170k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   170k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   170k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   170k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   170k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 74.4k, False: 96.4k]
  |  |  ------------------
  ------------------
 8615|  74.4k|        return unexpected(result.error());
 8616|  74.4k|    }
 8617|  96.4k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  96.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   170k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|  31.5k|{
 8631|  31.5k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|  31.5k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|  31.5k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  31.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.4k, False: 19.1k]
  |  |  ------------------
  ------------------
 8635|  12.4k|        return unexpected(result.error());
 8636|  12.4k|    }
 8637|  19.1k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  19.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|  31.5k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_LPv0EEEOT_v:
 1662|  19.1k|    {
 1663|  19.1k|        return std::move(value());
 1664|  19.1k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7974|   114k|    {
 7975|   114k|        return m_str;
 7976|   114k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   114k|{
 8820|   114k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   114k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 49.6k, False: 64.4k]
  |  |  ------------------
  ------------------
 8821|  49.6k|        return unexpected(result.error());
 8822|  49.6k|    }
 8823|  64.4k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  64.4k|    static_cast<    \
  |  |  929|  64.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  64.4k|    static_cast<    \
  |  |  929|  64.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   114k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|  53.7k|    {
 1476|  53.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  446|  53.7k|    {
  447|  53.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   124k|    {
 1177|   124k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2ESE_ONS6_5tupleIJdEEE:
 5829|  70.9k|    {
 5830|  70.9k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1429|  70.9k|    {
 1430|  70.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  436|  70.9k|    {
  437|  70.9k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   114k|    {
 7971|   114k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   124k|    {
 1598|   124k|        return has_value();
 1599|   124k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   195k|    {
  485|   195k|        return m_has_value;
  486|   195k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1672|  70.9k|    {
 1673|  70.9k|        return &value();
 1674|  70.9k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1626|  70.9k|    {
 1627|  70.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  70.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  70.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  70.9k|        return this->get_value();
 1629|  70.9k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  70.9k|    {
  451|  70.9k|        return m_value;
  452|  70.9k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7974|   115k|    {
 7975|   115k|        return m_str;
 7976|   115k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   115k|{
 8820|   115k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   115k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 49.6k, False: 65.7k]
  |  |  ------------------
  ------------------
 8821|  49.6k|        return unexpected(result.error());
 8822|  49.6k|    }
 8823|  65.7k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  65.7k|    static_cast<    \
  |  |  929|  65.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  65.7k|    static_cast<    \
  |  |  929|  65.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   115k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|  53.7k|    {
 1476|  53.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  446|  53.7k|    {
  447|  53.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   126k|    {
 1177|   126k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2ESE_ONS6_5tupleIJeEEE:
 5829|  72.3k|    {
 5830|  72.3k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1429|  72.3k|    {
 1430|  72.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  436|  72.3k|    {
  437|  72.3k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   115k|    {
 7971|   115k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   126k|    {
 1598|   126k|        return has_value();
 1599|   126k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   198k|    {
  485|   198k|        return m_has_value;
  486|   198k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1672|  72.3k|    {
 1673|  72.3k|        return &value();
 1674|  72.3k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1626|  72.3k|    {
 1627|  72.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  72.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  72.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  72.3k|        return this->get_value();
 1629|  72.3k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  72.3k|    {
  451|  72.3k|        return m_value;
  452|  72.3k|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3567|  3.40M|    {
 3568|  3.40M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  3.40M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|  3.40M|    }
_ZNK3scn2v310scan_errorcvbEv:
 3573|  14.2M|    {
 3574|  14.2M|        return m_code == good;
 3575|  14.2M|    }
_ZNK3scn2v310scan_error4codeEv:
 3584|   372k|    {
 3585|   372k|        return m_code;
 3586|   372k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3329|  56.2M|    {
 3330|  56.2M|        return m_iterator;
 3331|  56.2M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3329|  14.8M|    {
 3330|  14.8M|        return m_iterator;
 3331|  14.8M|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6259|  2.22M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter12on_localizedEv:
 6271|   600k|    {
 6272|   600k|        if constexpr (!SCN_DISABLE_LOCALE) {
  ------------------
  |  |  114|   600k|#define SCN_DISABLE_LOCALE 0
  ------------------
  |  Branch (6272:23): [Folded - Ignored]
  ------------------
 6273|   600k|            m_specs.localized = true;
 6274|   600k|        }
 6275|      0|        else {
 6276|      0|            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 6277|      0|        }
 6278|   600k|    }
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6302|  1.62M|    {
 6303|  1.62M|        m_specs.type = type;
 6304|  1.62M|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6375|  2.22M|    {
 6376|  2.22M|        return static_cast<bool>(m_error);
 6377|  2.22M|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3608|   372k|{
 3609|   372k|    return a.code() == b;
 3610|   372k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3612|   372k|{
 3613|   372k|    return !(a == b);
 3614|   372k|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7062|   600k|{
 7063|   600k|    switch (type) {
 7064|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7064:9): [True: 0, False: 600k]
  ------------------
 7065|      0|            return arg_type_category::none;
 7066|       |
 7067|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7067:9): [True: 0, False: 600k]
  ------------------
 7068|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7068:9): [True: 0, False: 600k]
  ------------------
 7069|      0|        case arg_type::int_type:
  ------------------
  |  Branch (7069:9): [True: 0, False: 600k]
  ------------------
 7070|      0|        case arg_type::long_type:
  ------------------
  |  Branch (7070:9): [True: 0, False: 600k]
  ------------------
 7071|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (7071:9): [True: 0, False: 600k]
  ------------------
 7072|      0|            return arg_type_category::integer;
 7073|       |
 7074|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7074:9): [True: 0, False: 600k]
  ------------------
 7075|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7075:9): [True: 0, False: 600k]
  ------------------
 7076|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (7076:9): [True: 0, False: 600k]
  ------------------
 7077|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (7077:9): [True: 0, False: 600k]
  ------------------
 7078|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (7078:9): [True: 0, False: 600k]
  ------------------
 7079|      0|            return arg_type_category::unsigned_integer;
 7080|       |
 7081|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7081:9): [True: 0, False: 600k]
  ------------------
 7082|      0|            return arg_type_category::pointer;
 7083|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7083:9): [True: 0, False: 600k]
  ------------------
 7084|      0|            return arg_type_category::boolean;
 7085|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7085:9): [True: 0, False: 600k]
  ------------------
 7086|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7086:9): [True: 0, False: 600k]
  ------------------
 7087|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7087:9): [True: 0, False: 600k]
  ------------------
 7088|      0|            return arg_type_category::character;
 7089|       |
 7090|   192k|        case arg_type::float_type:
  ------------------
  |  Branch (7090:9): [True: 192k, False: 407k]
  ------------------
 7091|   394k|        case arg_type::double_type:
  ------------------
  |  Branch (7091:9): [True: 202k, False: 397k]
  ------------------
 7092|   600k|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7092:9): [True: 205k, False: 394k]
  ------------------
 7093|   600k|            return arg_type_category::floating;
 7094|       |
 7095|      0|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7095:9): [True: 0, False: 600k]
  ------------------
 7096|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7096:9): [True: 0, False: 600k]
  ------------------
 7097|      0|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7097:9): [True: 0, False: 600k]
  ------------------
 7098|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7098:9): [True: 0, False: 600k]
  ------------------
 7099|      0|            return arg_type_category::string;
 7100|       |
 7101|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7101:9): [True: 0, False: 600k]
  ------------------
 7102|      0|            return arg_type_category::custom;
 7103|       |
 7104|      0|            SCN_CLANG_PUSH
 7105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7106|      0|        default:
  ------------------
  |  Branch (7106:9): [True: 0, False: 600k]
  ------------------
 7107|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7108|   600k|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7109|   600k|            SCN_CLANG_POP
 7110|   600k|    }
 7111|       |
 7112|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7113|   600k|}
_ZN3scn2v36ranges6detail5size_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|  2.60M|    {
 2896|  2.60M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  2.60M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|  2.60M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSE_:
 2929|  2.60M|    {
 2930|  2.60M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|  2.60M|    }
_ZN3scn2v36ranges6detail6ssize_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISE_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSE_:
 2952|  2.60M|    {
 2953|  2.60M|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 2954|  2.60M|    }
_ZNK3scn2v36ranges6detail6ssize_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSE_:
 2961|  2.60M|    {
 2962|  2.60M|        return fn::impl(std::forward<T>(t));
 2963|  2.60M|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA20_KcEEEDaDpOT_:
 3653|    967|{
 3654|    967|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|    967|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|    967|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
 3653|  2.14k|{
 3654|  2.14k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  2.14k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  2.14k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA38_KcEEEDaDpOT_:
 3653|  25.5k|{
 3654|  25.5k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  25.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  25.5k|}
_ZN3scn2v36detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7192|  2.22M|{
 7193|  2.22M|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7193:9): [True: 1.62M, False: 600k]
  ------------------
 7194|  2.22M|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (7194:10): [True: 0, False: 1.62M]
  ------------------
 7195|  1.62M|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (7195:10): [True: 0, False: 1.62M]
  ------------------
 7196|      0|        SCN_UNLIKELY_ATTR
 7197|      0|        return handler.on_error("Invalid type specifier for float type");
 7198|      0|    }
 7199|  2.22M|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4194|   349M|    {
 4195|   349M|        return m_end == nullptr;
 4196|   349M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3714|   956k|{
 3715|   956k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3715:19): [Folded - Ignored]
  ------------------
 3716|   956k|                                          const CharT*, const CharT*>) {
 3717|   956k|        return {first, last};
 3718|   956k|    }
 3719|   956k|    else {
 3720|   956k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3721|   956k|    }
 3722|   956k|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4210|  4.69M|    {
 4211|  4.69M|        if (!stores_parent()) {
  ------------------
  |  Branch (4211:13): [True: 0, False: 4.69M]
  ------------------
 4212|      0|            return make_string_view_from_pointers(
 4213|      0|                static_cast<const CharT*>(m_begin) + position(),
 4214|      0|                static_cast<const CharT*>(m_end));
 4215|      0|        }
 4216|  4.69M|        return parent()->get_segment_starting_at(position());
 4217|  4.69M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4204|   194M|    {
 4205|   194M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|   194M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   194M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4206|   194M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4207|   194M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4100|  4.69M|    {
 4101|  4.69M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  4.69M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.05M, False: 2.63M]
  |  |  ------------------
  ------------------
 4102|  4.69M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4103|  2.05M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4104|  2.05M|        }
 4105|  2.63M|        const auto start = pos - m_putback_buffer.size();
 4106|  2.63M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|  2.63M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.63M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4107|  2.63M|        return m_current_view.substr(start);
 4108|  2.63M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4199|  3.26M|    {
 4200|  3.26M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  3.26M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.26M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4201|  3.26M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4202|  3.26M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4189|  8.58M|    {
 4190|  8.58M|        return m_position;
 4191|  8.58M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE13is_contiguousEv:
 4122|  3.72M|    {
 4123|  3.72M|        return m_is_contiguous;
 4124|  3.72M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4194|  46.1M|    {
 4195|  46.1M|        return m_end == nullptr;
 4196|  46.1M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3714|   206k|{
 3715|   206k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3715:19): [Folded - Ignored]
  ------------------
 3716|   206k|                                          const CharT*, const CharT*>) {
 3717|   206k|        return {first, last};
 3718|   206k|    }
 3719|   206k|    else {
 3720|   206k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3721|   206k|    }
 3722|   206k|}
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4210|   800k|    {
 4211|   800k|        if (!stores_parent()) {
  ------------------
  |  Branch (4211:13): [True: 0, False: 800k]
  ------------------
 4212|      0|            return make_string_view_from_pointers(
 4213|      0|                static_cast<const CharT*>(m_begin) + position(),
 4214|      0|                static_cast<const CharT*>(m_end));
 4215|      0|        }
 4216|   800k|        return parent()->get_segment_starting_at(position());
 4217|   800k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4204|  24.7M|    {
 4205|  24.7M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  24.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  24.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4206|  24.7M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4207|  24.7M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4100|   800k|    {
 4101|   800k|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|   800k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 418k, False: 381k]
  |  |  ------------------
  ------------------
 4102|   800k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4103|   418k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4104|   418k|        }
 4105|   381k|        const auto start = pos - m_putback_buffer.size();
 4106|   381k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|   381k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   381k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4107|   381k|        return m_current_view.substr(start);
 4108|   381k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4199|   962k|    {
 4200|   962k|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|   962k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   962k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4201|   962k|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4202|   962k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4189|  1.83M|    {
 4190|  1.83M|        return m_position;
 4191|  1.83M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE13is_contiguousEv:
 4122|  1.12M|    {
 4123|  1.12M|        return m_is_contiguous;
 4124|  1.12M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3179|  9.85M|    {
 3180|  9.85M|        return static_cast<D&>(*this);
 3181|  9.85M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|  4.93M|    {
 2978|  4.93M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  4.93M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|  4.93M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|  4.93M|    {
 3005|  4.93M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  4.93M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|  4.93M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3220|  4.93M|    {
 3221|  4.93M|        return ranges::empty(derived())
  ------------------
  |  Branch (3221:16): [True: 11.3k, False: 4.92M]
  ------------------
 3222|  4.93M|                   ? nullptr
 3223|  4.93M|                   : std::addressof(*ranges::begin(derived()));
 3224|  4.93M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3179|   595k|    {
 3180|   595k|        return static_cast<D&>(*this);
 3181|   595k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|   297k|    {
 2978|   297k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   297k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|   297k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|   297k|    {
 3005|   297k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   297k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|   297k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3220|   297k|    {
 3221|   297k|        return ranges::empty(derived())
  ------------------
  |  Branch (3221:16): [True: 0, False: 297k]
  ------------------
 3222|   297k|                   ? nullptr
 3223|   297k|                   : std::addressof(*ranges::begin(derived()));
 3224|   297k|    }
_ZNK3scn2v318basic_scan_contextIcE5rangeEv:
 8168|   895k|    {
 8169|   895k|        return ranges::subrange{begin(), end()};
 8170|   895k|    }
_ZNK3scn2v318basic_scan_contextIcE5beginEv:
 8152|  2.62M|    {
 8153|  2.62M|        return m_current;
 8154|  2.62M|    }
_ZNK3scn2v318basic_scan_contextIcE3endEv:
 8160|   895k|    {
 8161|   895k|        return ranges::default_sentinel;
 8162|   895k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_LPv0EEET_S9_:
 3315|  13.7M|    {
 3316|  13.7M|    }
_ZN3scn2v36detail10locale_refC2Ev:
 7990|  4.71M|    constexpr locale_ref() = default;
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  1.24M|    {
 1837|  1.24M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.24M|                                            std::forward<F>(f));
 1839|  1.24M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1322|  1.24M|{
 1323|  1.24M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.24M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.24M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.24M|            return result(*std::forward<Exp>(exp));
 1327|  1.24M|        }
 1328|       |
 1329|  1.24M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.24M|        return result(unexpect, monostate{});
 1331|  1.24M|    }
 1332|  1.24M|    else {
 1333|  1.24M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.24M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.24M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.22M, False: 18.3k]
  |  |  ------------------
  ------------------
 1335|  1.24M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.24M|                   : result(unexpect,
 1337|  18.3k|                            trivial_invoke(std::forward<F>(f),
 1338|  18.3k|                                           std::forward<Exp>(exp).error()));
 1339|  1.24M|    }
 1340|  1.24M|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  13.1M|    {
  485|  13.1M|        return m_has_value;
  486|  13.1M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1662|  4.45M|    {
 1663|  4.45M|        return std::move(value());
 1664|  4.45M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1626|  5.08M|    {
 1627|  5.08M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  5.08M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.08M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  5.08M|        return this->get_value();
 1629|  5.08M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  5.08M|    {
  451|  5.08M|        return m_value;
  452|  5.08M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1429|  5.53M|    {
 1430|  5.53M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  5.53M|    {
  437|  5.53M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  7.02M|    {
 1177|  7.02M|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|  40.3k|{
 1211|  40.3k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  40.3k|}
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  53.4k|    {
 1614|  53.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  53.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  53.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  53.4k|        return std::move(this->get_unexpected().error());
 1616|  53.4k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  71.9k|    {
  468|  71.9k|        return m_unexpected;
  469|  71.9k|    }
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  360|   383k|    {
  361|   383k|        return m_unexpected;
  362|   383k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1485|  1.22M|    {
 1486|  1.22M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  1.42M|    {
  447|  1.42M|    }
_ZNK3scn2v318basic_scan_contextIwE5rangeEv:
 8168|   278k|    {
 8169|   278k|        return ranges::subrange{begin(), end()};
 8170|   278k|    }
_ZNK3scn2v318basic_scan_contextIwE5beginEv:
 8152|   712k|    {
 8153|   712k|        return m_current;
 8154|   712k|    }
_ZNK3scn2v318basic_scan_contextIwE3endEv:
 8160|   278k|    {
 8161|   278k|        return ranges::default_sentinel;
 8162|   278k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_LPv0EEET_S9_:
 3315|  3.56M|    {
 3316|  3.56M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|   373k|    {
 1837|   373k|        return detail::transform_error_impl(std::move(*this),
 1838|   373k|                                            std::forward<F>(f));
 1839|   373k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1322|   373k|{
 1323|   373k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   373k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   373k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   373k|            return result(*std::forward<Exp>(exp));
 1327|   373k|        }
 1328|       |
 1329|   373k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   373k|        return result(unexpect, monostate{});
 1331|   373k|    }
 1332|   373k|    else {
 1333|   373k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   373k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   373k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 370k, False: 2.94k]
  |  |  ------------------
  ------------------
 1335|   373k|                   ? result(*std::forward<Exp>(exp))
 1336|   373k|                   : result(unexpect,
 1337|  2.94k|                            trivial_invoke(std::forward<F>(f),
 1338|  2.94k|                                           std::forward<Exp>(exp).error()));
 1339|   373k|    }
 1340|   373k|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  3.45M|    {
  485|  3.45M|        return m_has_value;
  486|  3.45M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1662|  1.28M|    {
 1663|  1.28M|        return std::move(value());
 1664|  1.28M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1626|  1.29M|    {
 1627|  1.29M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.29M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.29M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.29M|        return this->get_value();
 1629|  1.29M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  1.29M|    {
  451|  1.29M|        return m_value;
  452|  1.29M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1429|  1.16M|    {
 1430|  1.16M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  1.16M|    {
  437|  1.16M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.13M|    {
 1177|  2.13M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  48.3k|    {
 1614|  48.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  48.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  48.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  48.3k|        return std::move(this->get_unexpected().error());
 1616|  48.3k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  49.8k|    {
  468|  49.8k|        return m_unexpected;
  469|  49.8k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1485|   527k|    {
 1486|   527k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|   970k|    {
  447|   970k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  346|   140k|    {
  347|   140k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   140k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   140k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1475|   177k|    {
 1476|   177k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  446|  1.23M|    {
  447|  1.23M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  6.18M|    {
 1177|  6.18M|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1429|  4.88M|    {
 1430|  4.88M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  4.88M|    {
  437|  4.88M|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1597|  7.25M|    {
 1598|  7.25M|        return has_value();
 1599|  7.25M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  484|  11.3M|    {
  485|  11.3M|        return m_has_value;
  486|  11.3M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1603|   213k|    {
 1604|   213k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   213k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   213k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   213k|        return this->get_unexpected().error();
 1606|   213k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   213k|    {
  468|   213k|        return m_unexpected;
  469|   213k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1662|  3.14M|    {
 1663|  3.14M|        return std::move(value());
 1664|  3.14M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1626|  3.90M|    {
 1627|  3.90M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.90M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.90M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.90M|        return this->get_value();
 1629|  3.90M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  450|  3.90M|    {
  451|  3.90M|        return m_value;
  452|  3.90M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1475|   358k|    {
 1476|   358k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  446|   803k|    {
  447|   803k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.13M|    {
 1177|  2.13M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1429|  1.33M|    {
 1430|  1.33M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  1.33M|    {
  437|  1.33M|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1597|  2.50M|    {
 1598|  2.50M|        return has_value();
 1599|  2.50M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  484|  3.97M|    {
  485|  3.97M|        return m_has_value;
  486|  3.97M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1603|   432k|    {
 1604|   432k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   432k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   432k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   432k|        return this->get_unexpected().error();
 1606|   432k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   432k|    {
  468|   432k|        return m_unexpected;
  469|   432k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1662|   880k|    {
 1663|   880k|        return std::move(value());
 1664|   880k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1626|  1.03M|    {
 1627|  1.03M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.03M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.03M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.03M|        return this->get_value();
 1629|  1.03M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  450|  1.03M|    {
  451|  1.03M|        return m_value;
  452|  1.03M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  1.09M|    {
 1837|  1.09M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.09M|                                            std::forward<F>(f));
 1839|  1.09M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|  1.09M|{
 1323|  1.09M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.09M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.09M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.09M|            return result(*std::forward<Exp>(exp));
 1327|  1.09M|        }
 1328|       |
 1329|  1.09M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.09M|        return result(unexpect, monostate{});
 1331|  1.09M|    }
 1332|  1.09M|    else {
 1333|  1.09M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.09M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.09M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.08M, False: 16.1k]
  |  |  ------------------
  ------------------
 1335|  1.09M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.09M|                   : result(unexpect,
 1337|  16.1k|                            trivial_invoke(std::forward<F>(f),
 1338|  16.1k|                                           std::forward<Exp>(exp).error()));
 1339|  1.09M|    }
 1340|  1.09M|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  4.16M|    {
  485|  4.16M|        return m_has_value;
  486|  4.16M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1662|  1.08M|    {
 1663|  1.08M|        return std::move(value());
 1664|  1.08M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1626|  1.43M|    {
 1627|  1.43M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.43M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.43M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.43M|        return this->get_value();
 1629|  1.43M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  1.43M|    {
  451|  1.43M|        return m_value;
  452|  1.43M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1613|  16.1k|    {
 1614|  16.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  16.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  16.1k|        return std::move(this->get_unexpected().error());
 1616|  16.1k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  20.8k|    {
  468|  20.8k|        return m_unexpected;
  469|  20.8k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1485|  1.05M|    {
 1486|  1.05M|    }
_ZN3scn2v310scan_errorC2Ev:
 3562|  9.76M|    constexpr scan_error() noexcept = default;
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|   198k|    {
 1476|   198k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4279|  10.9M|    {
 4280|  10.9M|        return x.is_at_end();
 4281|  10.9M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4323|  26.6M|    {
 4324|  26.6M|        if (m_end) {
  ------------------
  |  Branch (4324:13): [True: 0, False: 26.6M]
  ------------------
 4325|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4326|      0|        }
 4327|  26.6M|        if (!m_begin) {
  ------------------
  |  Branch (4327:13): [True: 0, False: 26.6M]
  ------------------
 4328|      0|            return true;
 4329|      0|        }
 4330|  26.6M|        return !read_at_position();
 4331|  26.6M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4303|   114M|    {
 4304|   114M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|   114M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   114M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4305|       |
 4306|   114M|        if (!stores_parent()) {
  ------------------
  |  Branch (4306:13): [True: 0, False: 114M]
  ------------------
 4307|      0|            return true;
 4308|      0|        }
 4309|       |
 4310|   114M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|   114M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 98.9M, False: 15.3M]
  |  |  ------------------
  ------------------
 4311|  98.9M|            return true;
 4312|  98.9M|        }
 4313|       |
 4314|  30.4M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4314:16): [True: 15.3M, False: 15.0M]
  ------------------
 4315|  15.3M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4315:17): [True: 276k, False: 15.0M]
  ------------------
 4316|   276k|                return false;
 4317|   276k|            }
 4318|  15.3M|        }
 4319|  15.0M|        return true;
 4320|  15.3M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE15chars_availableEv:
 4080|   148M|    {
 4081|   148M|        return m_putback_buffer.size() + m_current_view.size();
 4082|   148M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4238|  29.7M|    {
 4239|  29.7M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  29.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  29.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4240|       |
 4241|  29.7M|        if (!stores_parent()) {
  ------------------
  |  Branch (4241:13): [True: 0, False: 29.7M]
  ------------------
 4242|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4243|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4244|      0|            return *ptr;
 4245|      0|        }
 4246|       |
 4247|  29.7M|        auto res = read_at_position();
 4248|  29.7M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  29.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  29.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|  29.7M|        return parent()->get_character_at(m_position);
 4250|  29.7M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16get_character_atEl:
 4111|  29.7M|    {
 4112|  29.7M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  29.7M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.9M, False: 10.8M]
  |  |  ------------------
  ------------------
 4113|  29.7M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4114|  18.9M|            return m_putback_buffer[pos];
 4115|  18.9M|        }
 4116|  10.8M|        const auto start = pos - m_putback_buffer.size();
 4117|  10.8M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  10.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4118|  10.8M|        return m_current_view[start];
 4119|  10.8M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1429|  7.94M|    {
 1430|  7.94M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  7.94M|    {
  437|  7.94M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  8.01M|    {
 1177|  8.01M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  346|   126k|    {
  347|   126k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   126k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   126k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  71.9k|    {
 1476|  71.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  446|  71.9k|    {
  447|  71.9k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  355|   192k|    {
  356|   192k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   192k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|   192k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1597|  3.50M|    {
 1598|  3.50M|        return has_value();
 1599|  3.50M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEERT_v:
 1652|   634k|    {
 1653|   634k|        return value();
 1654|   634k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4273|  27.8M|    {
 4274|  27.8M|        return !(lhs == rhs);
 4275|  27.8M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4268|  31.0M|    {
 4269|  31.0M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4269:16): [True: 31.0M, False: 0]
  |  Branch (4269:46): [True: 4.14M, False: 26.9M]
  ------------------
 4270|  31.0M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4224|  57.8M|    {
 4225|  57.8M|        ++m_position;
 4226|  57.8M|        (void)read_at_position();
 4227|  57.8M|        return *this;
 4228|  57.8M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  346|  65.4k|    {
  347|  65.4k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  65.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  65.4k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  13.7k|    {
 1476|  13.7k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|  13.7k|    {
  447|  13.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.71M|    {
 1177|  1.71M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|  1.70M|    {
 1430|  1.70M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  436|  1.70M|    {
  437|  1.70M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|  1.71M|    {
 1598|  1.71M|        return has_value();
 1599|  1.71M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  3.43M|    {
  485|  3.43M|        return m_has_value;
  486|  3.43M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  13.7k|    {
 1604|  13.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  13.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  13.7k|        return this->get_unexpected().error();
 1606|  13.7k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  13.7k|    {
  468|  13.7k|        return m_unexpected;
  469|  13.7k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|  1.70M|    {
 1663|  1.70M|        return std::move(value());
 1664|  1.70M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|  1.70M|    {
 1627|  1.70M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.70M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.70M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.70M|        return this->get_value();
 1629|  1.70M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.70M|    {
  451|  1.70M|        return m_value;
  452|  1.70M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3333|  38.2M|    {
 3334|  38.2M|        return m_sentinel;
 3335|  38.2M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  346|  60.8k|    {
  347|  60.8k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  60.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  60.8k|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_errorEE5errorEv:
  360|  12.1M|    {
  361|  12.1M|        return m_unexpected;
  362|  12.1M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  355|  3.33M|    {
  356|  3.33M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  3.33M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  3.33M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  346|  14.8M|    {
  347|  14.8M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  14.8M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  14.8M|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  360|  14.8M|    {
  361|  14.8M|        return m_unexpected;
  362|  14.8M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  355|  14.8M|    {
  356|  14.8M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  14.8M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  14.8M|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|   126k|{
 1211|   126k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|   126k|}
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  346|  3.14M|    {
  347|  3.14M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  3.14M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  3.14M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1603|  18.4k|    {
 1604|  18.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  18.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  18.4k|        return this->get_unexpected().error();
 1606|  18.4k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  1.26M|    {
 1476|  1.26M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  446|  1.29M|    {
  447|  1.29M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  13.6M|    {
 1177|  13.6M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1429|   640k|    {
 1430|   640k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  436|   640k|    {
  437|   640k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|  6.94M|    {
 1476|  6.94M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  6.94M|    {
  447|  6.94M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1597|  14.8M|    {
 1598|  14.8M|        return has_value();
 1599|  14.8M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  26.2M|    {
  485|  26.2M|        return m_has_value;
  486|  26.2M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1603|  3.48M|    {
 1604|  3.48M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  3.48M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.48M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  3.48M|        return this->get_unexpected().error();
 1606|  3.48M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  3.48M|    {
  468|  3.48M|        return m_unexpected;
  469|  3.48M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1429|  1.33M|    {
 1430|  1.33M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  436|  1.33M|    {
  437|  1.33M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.33M|    {
 1177|  1.33M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|    336|    {
 1476|    336|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  446|    336|    {
  447|    336|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEERT_v:
 1652|  3.48M|    {
 1653|  3.48M|        return value();
 1654|  3.48M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1626|  6.71M|    {
 1627|  6.71M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  6.71M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.71M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  6.71M|        return this->get_value();
 1629|  6.71M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  6.71M|    {
  451|  6.71M|        return m_value;
  452|  6.71M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1597|   114k|    {
 1598|   114k|        return has_value();
 1599|   114k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  484|  2.67M|    {
  485|  2.67M|        return m_has_value;
  486|  2.67M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1662|  1.22M|    {
 1663|  1.22M|        return std::move(value());
 1664|  1.22M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1626|  1.33M|    {
 1627|  1.33M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.33M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.33M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.33M|        return this->get_value();
 1629|  1.33M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  450|  1.33M|    {
  451|  1.33M|        return m_value;
  452|  1.33M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  3.26M|    {
 1837|  3.26M|        return detail::transform_error_impl(std::move(*this),
 1838|  3.26M|                                            std::forward<F>(f));
 1839|  3.26M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1322|  3.26M|{
 1323|  3.26M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  3.26M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  3.26M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  3.26M|            return result(*std::forward<Exp>(exp));
 1327|  3.26M|        }
 1328|       |
 1329|  3.26M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  3.26M|        return result(unexpect, monostate{});
 1331|  3.26M|    }
 1332|  3.26M|    else {
 1333|  3.26M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  3.26M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  3.26M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.23M, False: 35.1k]
  |  |  ------------------
  ------------------
 1335|  3.26M|                   ? result(*std::forward<Exp>(exp))
 1336|  3.26M|                   : result(unexpect,
 1337|  35.1k|                            trivial_invoke(std::forward<F>(f),
 1338|  35.1k|                                           std::forward<Exp>(exp).error()));
 1339|  3.26M|    }
 1340|  3.26M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1429|  4.76M|    {
 1430|  4.76M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  4.76M|    {
  437|  4.76M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1485|  35.1k|    {
 1486|  35.1k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1662|  3.23M|    {
 1663|  3.23M|        return std::move(value());
 1664|  3.23M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3329|  1.40M|    {
 3330|  1.40M|        return m_iterator;
 3331|  1.40M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3333|  1.40M|    {
 3334|  1.40M|        return m_sentinel;
 3335|  1.40M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|  8.22M|    {
 1598|  8.22M|        return has_value();
 1599|  8.22M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|  12.9M|    {
  485|  12.9M|        return m_has_value;
  486|  12.9M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|   262k|    {
 1604|   262k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   262k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   262k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   262k|        return this->get_unexpected().error();
 1606|   262k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   262k|    {
  468|   262k|        return m_unexpected;
  469|   262k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1662|  3.54M|    {
 1663|  3.54M|        return std::move(value());
 1664|  3.54M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1626|  4.43M|    {
 1627|  4.43M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.43M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.43M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.43M|        return this->get_value();
 1629|  4.43M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|  4.43M|    {
  451|  4.43M|        return m_value;
  452|  4.43M|    }
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  2.21M|{
  326|  2.21M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  2.21M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  2.21M|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_LPv0EEET_S8_:
 3315|  1.10M|    {
 3316|  1.10M|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4290|  15.7M|    {
 4291|  15.7M|        return !x.is_at_end();
 4292|  15.7M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|  20.8k|    {
 1476|  20.8k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  20.8k|    {
  447|  20.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.71M|    {
 1177|  2.71M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1429|  2.69M|    {
 1430|  2.69M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  2.69M|    {
  437|  2.69M|    }
_ZNK3scn2v38expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1597|  1.61M|    {
 1598|  1.61M|        return has_value();
 1599|  1.61M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1652|   351k|    {
 1653|   351k|        return value();
 1654|   351k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  11.5k|    {
 1476|  11.5k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  446|  11.5k|    {
  447|  11.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.47M|    {
 1177|  1.47M|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|  1.45M|    {
 1430|  1.45M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  436|  1.45M|    {
  437|  1.45M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1597|  1.47M|    {
 1598|  1.47M|        return has_value();
 1599|  1.47M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.94M|    {
  485|  2.94M|        return m_has_value;
  486|  2.94M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1603|  11.5k|    {
 1604|  11.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  11.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  11.5k|        return this->get_unexpected().error();
 1606|  11.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  11.5k|    {
  468|  11.5k|        return m_unexpected;
  469|  11.5k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|  1.45M|    {
 1663|  1.45M|        return std::move(value());
 1664|  1.45M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|  1.45M|    {
 1627|  1.45M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.45M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.45M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.45M|        return this->get_value();
 1629|  1.45M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.45M|    {
  451|  1.45M|        return m_value;
  452|  1.45M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1603|  4.75k|    {
 1604|  4.75k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  4.75k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.75k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  4.75k|        return this->get_unexpected().error();
 1606|  4.75k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|  1.10M|    {
 1476|  1.10M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  1.10M|    {
  447|  1.10M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  6.18M|    {
 1177|  6.18M|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1429|   357k|    {
 1430|   357k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  436|   357k|    {
  437|   357k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|  4.25M|    {
 1476|  4.25M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  4.25M|    {
  447|  4.25M|    }
_ZNK3scn2v38expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1597|  7.26M|    {
 1598|  7.26M|        return has_value();
 1599|  7.26M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  12.4M|    {
  485|  12.4M|        return m_has_value;
  486|  12.4M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1603|  2.95M|    {
 1604|  2.95M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.95M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.95M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.95M|        return this->get_unexpected().error();
 1606|  2.95M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  2.95M|    {
  468|  2.95M|        return m_unexpected;
  469|  2.95M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1429|  1.11M|    {
 1430|  1.11M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|  1.11M|    {
  437|  1.11M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.11M|    {
 1177|  1.11M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|    108|    {
 1476|    108|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|    108|    {
  447|    108|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1652|  1.14M|    {
 1653|  1.14M|        return value();
 1654|  1.14M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1626|  1.14M|    {
 1627|  1.14M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.14M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.14M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.14M|        return this->get_value();
 1629|  1.14M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  1.14M|    {
  451|  1.14M|        return m_value;
  452|  1.14M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  29.5k|    {
 1598|  29.5k|        return has_value();
 1599|  29.5k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|  2.22M|    {
  485|  2.22M|        return m_has_value;
  486|  2.22M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1662|  1.08M|    {
 1663|  1.08M|        return std::move(value());
 1664|  1.08M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1626|  1.11M|    {
 1627|  1.11M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.11M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.11M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.11M|        return this->get_value();
 1629|  1.11M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|  1.11M|    {
  451|  1.11M|        return m_value;
  452|  1.11M|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1429|   466k|    {
 1430|   466k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|   466k|    {
  437|   466k|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  2.08M|    {
 2855|  2.08M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  2.08M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  2.08M|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  2.08M|    {
 2836|  2.08M|        return t.data();
 2837|  2.08M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1475|   731k|    {
 1476|   731k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  446|   731k|    {
  447|   731k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  8.53M|    {
 1177|  8.53M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1429|  7.68M|    {
 1430|  7.68M|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  436|  7.68M|    {
  437|  7.68M|    }
_ZNO3scn2v38expectedIlNS0_10scan_errorEEdeIlLPv0EEEOT_v:
 1662|  5.20M|    {
 1663|  5.20M|        return std::move(value());
 1664|  5.20M|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1210|  3.21M|{
 1211|  3.21M|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  3.21M|}
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1836|  1.22M|    {
 1837|  1.22M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.22M|                                            std::forward<F>(f));
 1839|  1.22M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
 1322|  1.22M|{
 1323|  1.22M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.22M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.22M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.22M|            return result(*std::forward<Exp>(exp));
 1327|  1.22M|        }
 1328|       |
 1329|  1.22M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.22M|        return result(unexpect, monostate{});
 1331|  1.22M|    }
 1332|  1.22M|    else {
 1333|  1.22M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.22M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.22M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.22M, False: 0]
  |  |  ------------------
  ------------------
 1335|  1.22M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.22M|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  1.22M|    }
 1340|  1.22M|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|  1.22M|    {
 1430|  1.22M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  436|  1.22M|    {
  437|  1.22M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.22M|    {
 1177|  1.22M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|  1.22M|    {
 1598|  1.22M|        return has_value();
 1599|  1.22M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.44M|    {
  485|  2.44M|        return m_has_value;
  486|  2.44M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1662|  1.22M|    {
 1663|  1.22M|        return std::move(value());
 1664|  1.22M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|  1.22M|    {
 1627|  1.22M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.22M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.22M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.22M|        return this->get_value();
 1629|  1.22M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.22M|    {
  451|  1.22M|        return m_value;
  452|  1.22M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1822|  1.20M|    {
 1823|  1.20M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|  1.20M|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESB_EEDaOT_OT0_:
 1322|  1.20M|{
 1323|  1.20M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.20M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.20M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.20M|            return result(*std::forward<Exp>(exp));
 1327|  1.20M|        }
 1328|       |
 1329|  1.20M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.20M|        return result(unexpect, monostate{});
 1331|  1.20M|    }
 1332|  1.20M|    else {
 1333|  1.20M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.20M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.20M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 1.20M]
  |  |  ------------------
  ------------------
 1335|  1.20M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.20M|                   : result(unexpect,
 1337|  1.20M|                            trivial_invoke(std::forward<F>(f),
 1338|  1.20M|                                           std::forward<Exp>(exp).error()));
 1339|  1.20M|    }
 1340|  1.20M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1429|  62.8k|    {
 1430|  62.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  436|  62.8k|    {
  437|  62.8k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1652|   881k|    {
 1653|   881k|        return value();
 1654|   881k|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3667|   285k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1672|   114k|    {
 1673|   114k|        return &value();
 1674|   114k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2723|   875k|    {
 2724|   875k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   875k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   875k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2704|   875k|    {
 2705|   875k|        return decay_copy(t.begin());
 2706|   875k|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEu7__decayIT_EOS8_:
 1948|   875k|{
 1949|   875k|    return SCN_FWD(t);
  ------------------
  |  |  930|   875k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|   875k|}
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3667|   534k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|  1.08M|    {
 1837|  1.08M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.08M|                                            std::forward<F>(f));
 1839|  1.08M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1322|  1.08M|{
 1323|  1.08M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.08M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.08M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.08M|            return result(*std::forward<Exp>(exp));
 1327|  1.08M|        }
 1328|       |
 1329|  1.08M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.08M|        return result(unexpect, monostate{});
 1331|  1.08M|    }
 1332|  1.08M|    else {
 1333|  1.08M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.08M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.08M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.08M, False: 0]
  |  |  ------------------
  ------------------
 1335|  1.08M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.08M|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  1.08M|    }
 1340|  1.08M|}
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|  1.08M|    {
 1430|  1.08M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|  1.08M|    {
  437|  1.08M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.08M|    {
 1177|  1.08M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|  1.08M|    {
 1598|  1.08M|        return has_value();
 1599|  1.08M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.16M|    {
  485|  2.16M|        return m_has_value;
  486|  2.16M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|  1.08M|    {
 1663|  1.08M|        return std::move(value());
 1664|  1.08M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|  1.08M|    {
 1627|  1.08M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.08M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.08M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.08M|        return this->get_value();
 1629|  1.08M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.08M|    {
  451|  1.08M|        return m_value;
  452|  1.08M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1822|  1.04M|    {
 1823|  1.04M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|  1.04M|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1322|  1.04M|{
 1323|  1.04M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.04M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.04M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.04M|            return result(*std::forward<Exp>(exp));
 1327|  1.04M|        }
 1328|       |
 1329|  1.04M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.04M|        return result(unexpect, monostate{});
 1331|  1.04M|    }
 1332|  1.04M|    else {
 1333|  1.04M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.04M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.04M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 1.04M]
  |  |  ------------------
  ------------------
 1335|  1.04M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.04M|                   : result(unexpect,
 1337|  1.04M|                            trivial_invoke(std::forward<F>(f),
 1338|  1.04M|                                           std::forward<Exp>(exp).error()));
 1339|  1.04M|    }
 1340|  1.04M|}
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRS3_vEEOT_:
 1429|  61.5k|    {
 1430|  61.5k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  436|  61.5k|    {
  437|  61.5k|    }
_ZN3scn2v313scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3647|  1.04M|    {
 3648|  1.04M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1652|   756k|    {
 1653|   756k|        return value();
 1654|   756k|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1672|  29.4k|    {
 1673|  29.4k|        return &value();
 1674|  29.4k|    }
_ZN3scn2v313scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3647|  1.20M|    {
 3648|  1.20M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|   442k|    {
 1476|   442k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4279|  2.98M|    {
 4280|  2.98M|        return x.is_at_end();
 4281|  2.98M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4323|  4.58M|    {
 4324|  4.58M|        if (m_end) {
  ------------------
  |  Branch (4324:13): [True: 0, False: 4.58M]
  ------------------
 4325|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4326|      0|        }
 4327|  4.58M|        if (!m_begin) {
  ------------------
  |  Branch (4327:13): [True: 0, False: 4.58M]
  ------------------
 4328|      0|            return true;
 4329|      0|        }
 4330|  4.58M|        return !read_at_position();
 4331|  4.58M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4303|  14.2M|    {
 4304|  14.2M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  14.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4305|       |
 4306|  14.2M|        if (!stores_parent()) {
  ------------------
  |  Branch (4306:13): [True: 0, False: 14.2M]
  ------------------
 4307|      0|            return true;
 4308|      0|        }
 4309|       |
 4310|  14.2M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|  14.2M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 12.4M, False: 1.81M]
  |  |  ------------------
  ------------------
 4311|  12.4M|            return true;
 4312|  12.4M|        }
 4313|       |
 4314|  3.48M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4314:16): [True: 1.81M, False: 1.66M]
  ------------------
 4315|  1.81M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4315:17): [True: 148k, False: 1.66M]
  ------------------
 4316|   148k|                return false;
 4317|   148k|            }
 4318|  1.81M|        }
 4319|  1.66M|        return true;
 4320|  1.81M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE15chars_availableEv:
 4080|  18.6M|    {
 4081|  18.6M|        return m_putback_buffer.size() + m_current_view.size();
 4082|  18.6M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4238|  4.42M|    {
 4239|  4.42M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  4.42M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.42M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4240|       |
 4241|  4.42M|        if (!stores_parent()) {
  ------------------
  |  Branch (4241:13): [True: 0, False: 4.42M]
  ------------------
 4242|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4243|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4244|      0|            return *ptr;
 4245|      0|        }
 4246|       |
 4247|  4.42M|        auto res = read_at_position();
 4248|  4.42M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  4.42M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.42M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|  4.42M|        return parent()->get_character_at(m_position);
 4250|  4.42M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16get_character_atEl:
 4111|  4.42M|    {
 4112|  4.42M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  4.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.75M, False: 673k]
  |  |  ------------------
  ------------------
 4113|  4.42M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4114|  3.75M|            return m_putback_buffer[pos];
 4115|  3.75M|        }
 4116|   673k|        const auto start = pos - m_putback_buffer.size();
 4117|   673k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|   673k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   673k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4118|   673k|        return m_current_view[start];
 4119|   673k|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3806|  1.54M|{
 3807|  1.54M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3807:19): [Folded - Ignored]
  ------------------
 3808|  1.54M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3809|  1.54M|    }
 3810|  1.54M|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (3810:24): [Folded - Ignored]
  ------------------
 3811|  1.54M|        return utf16_code_point_length_by_starting_code_unit(ch);
 3812|  1.54M|    }
 3813|  1.54M|    else {
 3814|       |        // utf-32
 3815|  1.54M|        static_assert(sizeof(U) == 4);
 3816|  1.54M|        SCN_UNUSED(ch);
  ------------------
  |  |  909|  1.54M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3817|  1.54M|        return 1;
 3818|  1.54M|    }
 3819|  1.54M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1429|  2.05M|    {
 1430|  2.05M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  2.05M|    {
  437|  2.05M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.10M|    {
 1177|  2.10M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  49.8k|    {
 1476|  49.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  446|  49.8k|    {
  447|  49.8k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1597|   772k|    {
 1598|   772k|        return has_value();
 1599|   772k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEERT_v:
 1652|  8.99k|    {
 1653|  8.99k|        return value();
 1654|  8.99k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4273|  2.03M|    {
 4274|  2.03M|        return !(lhs == rhs);
 4275|  2.03M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4268|  2.80M|    {
 4269|  2.80M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4269:16): [True: 2.80M, False: 0]
  |  Branch (4269:46): [True: 919k, False: 1.88M]
  ------------------
 4270|  2.80M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4224|  5.21M|    {
 4225|  5.21M|        ++m_position;
 4226|  5.21M|        (void)read_at_position();
 4227|  5.21M|        return *this;
 4228|  5.21M|    }
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4012|  1.54M|{
 4013|  1.54M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4013:19): [Folded - Ignored]
  ------------------
 4014|  1.54M|        return decode_utf8_code_point_exhaustive(input);
 4015|  1.54M|    }
 4016|  1.54M|    else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (4016:24): [Folded - Ignored]
  ------------------
 4017|  1.54M|        return decode_utf16_code_point_exhaustive(input);
 4018|  1.54M|    }
 4019|  1.54M|    else {
 4020|  1.54M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|  1.54M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.54M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4021|  1.54M|        auto cp = static_cast<char32_t>(input.front());
 4022|  1.54M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  1.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 167k, False: 1.37M]
  |  |  ------------------
  ------------------
 4023|   167k|            return invalid_code_point;
 4024|   167k|        }
 4025|  1.37M|        return cp;
 4026|  1.54M|    }
 4027|  1.54M|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  2.20k|    {
 1476|  2.20k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|  2.20k|    {
  447|  2.20k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   432k|    {
 1177|   432k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|   430k|    {
 1430|   430k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  436|   430k|    {
  437|   430k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|   432k|    {
 1598|   432k|        return has_value();
 1599|   432k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|   864k|    {
  485|   864k|        return m_has_value;
  486|   864k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  2.20k|    {
 1604|  2.20k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.20k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.20k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.20k|        return this->get_unexpected().error();
 1606|  2.20k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  2.20k|    {
  468|  2.20k|        return m_unexpected;
  469|  2.20k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|   430k|    {
 1663|   430k|        return std::move(value());
 1664|   430k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|   430k|    {
 1627|   430k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   430k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   430k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   430k|        return this->get_value();
 1629|   430k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|   430k|    {
  451|   430k|        return m_value;
  452|   430k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3333|  7.50M|    {
 3334|  7.50M|        return m_sentinel;
 3335|  7.50M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1603|  1.45k|    {
 1604|  1.45k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.45k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.45k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.45k|        return this->get_unexpected().error();
 1606|  1.45k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|   417k|    {
 1476|   417k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  446|   462k|    {
  447|   462k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.66M|    {
 1177|  3.66M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1429|  8.99k|    {
 1430|  8.99k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  436|  8.99k|    {
  437|  8.99k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|  2.04M|    {
 1476|  2.04M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  2.04M|    {
  447|  2.04M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1597|  4.03M|    {
 1598|  4.03M|        return has_value();
 1599|  4.03M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  7.23M|    {
  485|  7.23M|        return m_has_value;
  486|  7.23M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1603|  1.31M|    {
 1604|  1.31M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.31M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.31M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.31M|        return this->get_unexpected().error();
 1606|  1.31M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  1.31M|    {
  468|  1.31M|        return m_unexpected;
  469|  1.31M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1429|   376k|    {
 1430|   376k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  436|   376k|    {
  437|   376k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   376k|    {
 1177|   376k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|     70|    {
 1476|     70|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  446|     70|    {
  447|     70|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEERT_v:
 1652|   447k|    {
 1653|   447k|        return value();
 1654|   447k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1626|  1.36M|    {
 1627|  1.36M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.36M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.36M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.36M|        return this->get_value();
 1629|  1.36M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  1.36M|    {
  451|  1.36M|        return m_value;
  452|  1.36M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1597|  6.29k|    {
 1598|  6.29k|        return has_value();
 1599|  6.29k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  484|   753k|    {
  485|   753k|        return m_has_value;
  486|   753k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1662|   370k|    {
 1663|   370k|        return std::move(value());
 1664|   370k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1626|   376k|    {
 1627|   376k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   376k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   376k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   376k|        return this->get_value();
 1629|   376k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  450|   376k|    {
  451|   376k|        return m_value;
  452|   376k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|   962k|    {
 1837|   962k|        return detail::transform_error_impl(std::move(*this),
 1838|   962k|                                            std::forward<F>(f));
 1839|   962k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1322|   962k|{
 1323|   962k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   962k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   962k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   962k|            return result(*std::forward<Exp>(exp));
 1327|   962k|        }
 1328|       |
 1329|   962k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   962k|        return result(unexpect, monostate{});
 1331|   962k|    }
 1332|   962k|    else {
 1333|   962k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   962k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   962k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 916k, False: 45.4k]
  |  |  ------------------
  ------------------
 1335|   962k|                   ? result(*std::forward<Exp>(exp))
 1336|   962k|                   : result(unexpect,
 1337|  45.4k|                            trivial_invoke(std::forward<F>(f),
 1338|  45.4k|                                           std::forward<Exp>(exp).error()));
 1339|   962k|    }
 1340|   962k|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1429|  1.13M|    {
 1430|  1.13M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  1.13M|    {
  437|  1.13M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1485|  45.4k|    {
 1486|  45.4k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1662|   916k|    {
 1663|   916k|        return std::move(value());
 1664|   916k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3329|   228k|    {
 3330|   228k|        return m_iterator;
 3331|   228k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3333|   228k|    {
 3334|   228k|        return m_sentinel;
 3335|   228k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|  2.50M|    {
 1598|  2.50M|        return has_value();
 1599|  2.50M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|  4.05M|    {
  485|  4.05M|        return m_has_value;
  486|  4.05M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|   599k|    {
 1604|   599k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   599k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   599k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   599k|        return this->get_unexpected().error();
 1606|   599k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   599k|    {
  468|   599k|        return m_unexpected;
  469|   599k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1662|   795k|    {
 1663|   795k|        return std::move(value());
 1664|   795k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1626|   950k|    {
 1627|   950k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   950k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   950k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   950k|        return this->get_value();
 1629|   950k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|   950k|    {
  451|   950k|        return m_value;
  452|   950k|    }
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  303|   427k|{
  304|   427k|    return p;
  305|   427k|}
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|   427k|{
  326|   427k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|   427k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|   427k|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_LPv0EEET_S8_:
 3315|   213k|    {
 3316|   213k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4290|  1.59M|    {
 4291|  1.59M|        return !x.is_at_end();
 4292|  1.59M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|  48.8k|    {
 1476|  48.8k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  48.8k|    {
  447|  48.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.82M|    {
 1177|  1.82M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1429|  1.78M|    {
 1430|  1.78M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  1.78M|    {
  437|  1.78M|    }
_ZNK3scn2v38expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1597|   492k|    {
 1598|   492k|        return has_value();
 1599|   492k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  3.17M|    {
  485|  3.17M|        return m_has_value;
  486|  3.17M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1652|  3.64k|    {
 1653|  3.64k|        return value();
 1654|  3.64k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1626|  1.29M|    {
 1627|  1.29M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.29M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.29M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.29M|        return this->get_value();
 1629|  1.29M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  1.29M|    {
  451|  1.29M|        return m_value;
  452|  1.29M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  2.20k|    {
 1476|  2.20k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  446|  2.20k|    {
  447|  2.20k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   432k|    {
 1177|   432k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|   430k|    {
 1430|   430k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  436|   430k|    {
  437|   430k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|   373k|    {
 1837|   373k|        return detail::transform_error_impl(std::move(*this),
 1838|   373k|                                            std::forward<F>(f));
 1839|   373k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|   373k|{
 1323|   373k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   373k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   373k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   373k|            return result(*std::forward<Exp>(exp));
 1327|   373k|        }
 1328|       |
 1329|   373k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   373k|        return result(unexpect, monostate{});
 1331|   373k|    }
 1332|   373k|    else {
 1333|   373k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   373k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   373k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 370k, False: 2.94k]
  |  |  ------------------
  ------------------
 1335|   373k|                   ? result(*std::forward<Exp>(exp))
 1336|   373k|                   : result(unexpect,
 1337|  2.94k|                            trivial_invoke(std::forward<F>(f),
 1338|  2.94k|                                           std::forward<Exp>(exp).error()));
 1339|   373k|    }
 1340|   373k|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1662|  1.28M|    {
 1663|  1.28M|        return std::move(value());
 1664|  1.28M|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1613|  48.4k|    {
 1614|  48.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  48.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  48.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  48.4k|        return std::move(this->get_unexpected().error());
 1616|  48.4k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  48.8k|    {
  468|  48.8k|        return m_unexpected;
  469|  48.8k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1485|   444k|    {
 1486|   444k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1597|   432k|    {
 1598|   432k|        return has_value();
 1599|   432k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  484|   865k|    {
  485|   865k|        return m_has_value;
  486|   865k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1603|  2.20k|    {
 1604|  2.20k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.20k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.20k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.20k|        return this->get_unexpected().error();
 1606|  2.20k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  2.20k|    {
  468|  2.20k|        return m_unexpected;
  469|  2.20k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|   430k|    {
 1663|   430k|        return std::move(value());
 1664|   430k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|   430k|    {
 1627|   430k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   430k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   430k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   430k|        return this->get_value();
 1629|   430k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  450|   430k|    {
  451|   430k|        return m_value;
  452|   430k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1603|    372|    {
 1604|    372|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    372|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    372|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    372|        return this->get_unexpected().error();
 1606|    372|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|   416k|    {
 1476|   416k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|   462k|    {
  447|   462k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.01M|    {
 1177|  3.01M|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1429|  3.64k|    {
 1430|  3.64k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  436|  3.64k|    {
  437|  3.64k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|  1.55M|    {
 1476|  1.55M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  1.55M|    {
  447|  1.55M|    }
_ZNK3scn2v38expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1597|  3.39M|    {
 1598|  3.39M|        return has_value();
 1599|  3.39M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  6.14M|    {
  485|  6.14M|        return m_has_value;
  486|  6.14M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1603|  1.22M|    {
 1604|  1.22M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.22M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.22M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.22M|        return this->get_unexpected().error();
 1606|  1.22M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  1.22M|    {
  468|  1.22M|        return m_unexpected;
  469|  1.22M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1429|   372k|    {
 1430|   372k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|   372k|    {
  437|   372k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   372k|    {
 1177|   372k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|     24|    {
 1476|     24|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|     24|    {
  447|     24|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1652|   162k|    {
 1653|   162k|        return value();
 1654|   162k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1626|  1.08M|    {
 1627|  1.08M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.08M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.08M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.08M|        return this->get_value();
 1629|  1.08M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  1.08M|    {
  451|  1.08M|        return m_value;
  452|  1.08M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  2.23k|    {
 1598|  2.23k|        return has_value();
 1599|  2.23k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|   745k|    {
  485|   745k|        return m_has_value;
  486|   745k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1662|   370k|    {
 1663|   370k|        return std::move(value());
 1664|   370k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1626|   372k|    {
 1627|   372k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   372k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   372k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   372k|        return this->get_value();
 1629|   372k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|   372k|    {
  451|   372k|        return m_value;
  452|   372k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|   963k|    {
 1837|   963k|        return detail::transform_error_impl(std::move(*this),
 1838|   963k|                                            std::forward<F>(f));
 1839|   963k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|   963k|{
 1323|   963k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   963k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   963k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   963k|            return result(*std::forward<Exp>(exp));
 1327|   963k|        }
 1328|       |
 1329|   963k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   963k|        return result(unexpect, monostate{});
 1331|   963k|    }
 1332|   963k|    else {
 1333|   963k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   963k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   963k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 917k, False: 45.4k]
  |  |  ------------------
  ------------------
 1335|   963k|                   ? result(*std::forward<Exp>(exp))
 1336|   963k|                   : result(unexpect,
 1337|  45.4k|                            trivial_invoke(std::forward<F>(f),
 1338|  45.4k|                                           std::forward<Exp>(exp).error()));
 1339|   963k|    }
 1340|   963k|}
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1429|   998k|    {
 1430|   998k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|   998k|    {
  437|   998k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1485|  45.4k|    {
 1486|  45.4k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1662|   917k|    {
 1663|   917k|        return std::move(value());
 1664|   917k|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   297k|    {
 2855|   297k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   297k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   297k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   297k|    {
 2836|   297k|        return t.data();
 2837|   297k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1836|   370k|    {
 1837|   370k|        return detail::transform_error_impl(std::move(*this),
 1838|   370k|                                            std::forward<F>(f));
 1839|   370k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
 1322|   370k|{
 1323|   370k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   370k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   370k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   370k|            return result(*std::forward<Exp>(exp));
 1327|   370k|        }
 1328|       |
 1329|   370k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   370k|        return result(unexpect, monostate{});
 1331|   370k|    }
 1332|   370k|    else {
 1333|   370k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   370k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   370k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 370k, False: 0]
  |  |  ------------------
  ------------------
 1335|   370k|                   ? result(*std::forward<Exp>(exp))
 1336|   370k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|   370k|    }
 1340|   370k|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|   370k|    {
 1430|   370k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  436|   370k|    {
  437|   370k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   370k|    {
 1177|   370k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|   370k|    {
 1598|   370k|        return has_value();
 1599|   370k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   740k|    {
  485|   740k|        return m_has_value;
  486|   740k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1662|   370k|    {
 1663|   370k|        return std::move(value());
 1664|   370k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|   370k|    {
 1627|   370k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   370k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   370k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   370k|        return this->get_value();
 1629|   370k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   370k|    {
  451|   370k|        return m_value;
  452|   370k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1822|   524k|    {
 1823|   524k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|   524k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESB_EEDaOT_OT0_:
 1322|   524k|{
 1323|   524k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   524k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   524k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   524k|            return result(*std::forward<Exp>(exp));
 1327|   524k|        }
 1328|       |
 1329|   524k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   524k|        return result(unexpect, monostate{});
 1331|   524k|    }
 1332|   524k|    else {
 1333|   524k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   524k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   524k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 524k]
  |  |  ------------------
  ------------------
 1335|   524k|                   ? result(*std::forward<Exp>(exp))
 1336|   524k|                   : result(unexpect,
 1337|   524k|                            trivial_invoke(std::forward<F>(f),
 1338|   524k|                                           std::forward<Exp>(exp).error()));
 1339|   524k|    }
 1340|   524k|}
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1652|   154k|    {
 1653|   154k|        return value();
 1654|   154k|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3667|  65.3k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1672|  6.22k|    {
 1673|  6.22k|        return &value();
 1674|  6.22k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2723|   305k|    {
 2724|   305k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   305k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   305k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2704|   305k|    {
 2705|   305k|        return decay_copy(t.begin());
 2706|   305k|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEu7__decayIT_EOS8_:
 1948|   305k|{
 1949|   305k|    return SCN_FWD(t);
  ------------------
  |  |  930|   305k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|   305k|}
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3667|   156k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|   370k|    {
 1837|   370k|        return detail::transform_error_impl(std::move(*this),
 1838|   370k|                                            std::forward<F>(f));
 1839|   370k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1322|   370k|{
 1323|   370k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   370k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   370k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   370k|            return result(*std::forward<Exp>(exp));
 1327|   370k|        }
 1328|       |
 1329|   370k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   370k|        return result(unexpect, monostate{});
 1331|   370k|    }
 1332|   370k|    else {
 1333|   370k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   370k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   370k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 370k, False: 0]
  |  |  ------------------
  ------------------
 1335|   370k|                   ? result(*std::forward<Exp>(exp))
 1336|   370k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|   370k|    }
 1340|   370k|}
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|   370k|    {
 1430|   370k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|   370k|    {
  437|   370k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   370k|    {
 1177|   370k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|   370k|    {
 1598|   370k|        return has_value();
 1599|   370k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   741k|    {
  485|   741k|        return m_has_value;
  486|   741k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|   370k|    {
 1663|   370k|        return std::move(value());
 1664|   370k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|   370k|    {
 1627|   370k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   370k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   370k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   370k|        return this->get_value();
 1629|   370k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   370k|    {
  451|   370k|        return m_value;
  452|   370k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1822|   441k|    {
 1823|   441k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|   441k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1322|   441k|{
 1323|   441k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   441k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   441k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   441k|            return result(*std::forward<Exp>(exp));
 1327|   441k|        }
 1328|       |
 1329|   441k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   441k|        return result(unexpect, monostate{});
 1331|   441k|    }
 1332|   441k|    else {
 1333|   441k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   441k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   441k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 441k]
  |  |  ------------------
  ------------------
 1335|   441k|                   ? result(*std::forward<Exp>(exp))
 1336|   441k|                   : result(unexpect,
 1337|   441k|                            trivial_invoke(std::forward<F>(f),
 1338|   441k|                                           std::forward<Exp>(exp).error()));
 1339|   441k|    }
 1340|   441k|}
_ZN3scn2v313scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3647|   441k|    {
 3648|   441k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1652|   154k|    {
 1653|   154k|        return value();
 1654|   154k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1672|  2.20k|    {
 1673|  2.20k|        return &value();
 1674|  2.20k|    }
_ZN3scn2v313scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3647|   524k|    {
 3648|   524k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IivEEOT_:
 1429|   118k|    {
 1430|   118k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJiEvEENSt3__110in_place_tEDpOT_:
  436|   118k|    {
  437|   118k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA29_KcEEEDaDpOT_:
 3653|   111k|{
 3654|   111k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|   111k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|   111k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   992k|    {
 2855|   992k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   992k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   992k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   992k|    {
 2836|   992k|        return t.data();
 2837|   992k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5465|  2.11M|    {
 5466|  2.11M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  2.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.11M]
  |  |  ------------------
  ------------------
 5467|      0|            return max_size();
 5468|      0|        }
 5469|       |
 5470|  2.11M|        return static_cast<std::size_t>(m_desc &
 5471|  2.11M|                                        ((1 << detail::packed_arg_bits) - 1));
 5472|  2.11M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5490|  4.22M|    {
 5491|  4.22M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5492|  4.22M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5433|  2.11M|    {
 5434|  2.11M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  2.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.11M]
  |  |  ------------------
  ------------------
 5435|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5436|      0|                return m_args[id];
 5437|      0|            }
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|  2.11M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  2.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.11M]
  |  |  ------------------
  ------------------
 5442|      0|            return {};
 5443|      0|        }
 5444|       |
 5445|  2.11M|        const auto t = type(id);
 5446|  2.11M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  2.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.11M]
  |  |  ------------------
  ------------------
 5447|      0|            return {};
 5448|      0|        }
 5449|       |
 5450|  2.11M|        basic_scan_arg<Context> arg;
 5451|  2.11M|        arg.m_type = t;
 5452|  2.11M|        if (is_only_builtin()) {
  ------------------
  |  Branch (5452:13): [True: 2.11M, False: 0]
  ------------------
 5453|  2.11M|            arg.m_value.ref_value = m_builtin_values[id];
 5454|  2.11M|        }
 5455|      0|        else {
 5456|      0|            arg.m_value = m_values[id];
 5457|      0|        }
 5458|  2.11M|        return arg;
 5459|  2.11M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5499|  2.11M|    {
 5500|       |        // First (0th) index is size, types start after that
 5501|  2.11M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5502|  2.11M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5503|  2.11M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5504|  2.11M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5494|  2.11M|    {
 5495|  2.11M|        return (m_desc & detail::has_custom_types_bit) == 0;
 5496|  2.11M|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5246|  4.00M|    {
 5247|  4.00M|        return m_type != detail::arg_type::none_type;
 5248|  4.00M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   325k|{
 8417|   325k|#define SCN_VISIT(Type)                                         \
 8418|   325k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   325k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   325k|    }                                                           \
 8421|   325k|    else {                                                      \
 8422|   325k|        return vis(monostate_val);                              \
 8423|   325k|    }
 8424|       |
 8425|   325k|    monostate monostate_val{};
 8426|       |
 8427|   325k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 325k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 325k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 325k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 325k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 325k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 325k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 325k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 325k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 325k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 325k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 325k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 325k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 325k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 325k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 325k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   104k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 104k, False: 221k]
  ------------------
 8459|   104k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   104k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   104k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   104k|    }                                                           \
  |  | 8421|   104k|    else {                                                      \
  |  | 8422|   104k|        return vis(monostate_val);                              \
  |  | 8423|   104k|    }
  ------------------
 8460|   109k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 109k, False: 215k]
  ------------------
 8461|   109k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   109k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   109k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   109k|    }                                                           \
  |  | 8421|   109k|    else {                                                      \
  |  | 8422|   109k|        return vis(monostate_val);                              \
  |  | 8423|   109k|    }
  ------------------
 8462|   111k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 111k, False: 214k]
  ------------------
 8463|   111k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   111k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   111k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   111k|    }                                                           \
  |  | 8421|   111k|    else {                                                      \
  |  | 8422|   111k|        return vis(monostate_val);                              \
  |  | 8423|   111k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 325k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 325k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 325k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 325k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 325k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 325k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 325k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 325k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 325k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   325k|            SCN_CLANG_POP
 8495|   325k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5544|  1.66M|    {
 5545|  1.66M|    }
_ZN3scn2v318basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8137|   895k|    {
 8138|   895k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8055|  1.66M|    {
 8056|  1.66M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE3getEv:
 4343|  1.24M|{
 4344|  1.24M|    if (is_contiguous()) {
  ------------------
  |  Branch (4344:9): [True: 0, False: 1.24M]
  ------------------
 4345|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4346|      0|                                ranges::default_sentinel};
 4347|      0|    }
 4348|  1.24M|    return ranges::subrange{forward_iterator{this, 0},
 4349|  1.24M|                            ranges::default_sentinel};
 4350|  1.24M|}
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4176|  1.24M|    {
 4177|  1.24M|        SCN_EXPECT(parent);
  ------------------
  |  |  924|  1.24M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.24M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4178|  1.24M|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|  1.24M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.24M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4179|  1.24M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   345k|{
 8417|   345k|#define SCN_VISIT(Type)                                         \
 8418|   345k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   345k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   345k|    }                                                           \
 8421|   345k|    else {                                                      \
 8422|   345k|        return vis(monostate_val);                              \
 8423|   345k|    }
 8424|       |
 8425|   345k|    monostate monostate_val{};
 8426|       |
 8427|   345k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 345k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 345k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 345k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 345k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 345k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 345k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 345k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 345k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 345k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 345k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 345k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 345k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 345k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 345k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 345k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   111k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 111k, False: 234k]
  ------------------
 8459|   111k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   111k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   111k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   111k|    }                                                           \
  |  | 8421|   111k|    else {                                                      \
  |  | 8422|   111k|        return vis(monostate_val);                              \
  |  | 8423|   111k|    }
  ------------------
 8460|   116k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 116k, False: 229k]
  ------------------
 8461|   116k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   116k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   116k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   116k|    }                                                           \
  |  | 8421|   116k|    else {                                                      \
  |  | 8422|   116k|        return vis(monostate_val);                              \
  |  | 8423|   116k|    }
  ------------------
 8462|   118k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 118k, False: 227k]
  ------------------
 8463|   118k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   118k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   118k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   118k|    }                                                           \
  |  | 8421|   118k|    else {                                                      \
  |  | 8422|   118k|        return vis(monostate_val);                              \
  |  | 8423|   118k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 345k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 345k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 345k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 345k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 345k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 345k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 345k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 345k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 345k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   345k|            SCN_CLANG_POP
 8495|   345k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   771k|{
 7044|   771k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   771k|    handler.check_args_exhausted();
 7046|   771k|    return handler.get_error();
 7047|   771k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   771k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   771k|    auto begin = format.data();
 7013|   771k|    auto it = begin;
 7014|   771k|    const auto end = format.data() + format.size();
 7015|       |
 7016|  1.48M|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 771k, False: 709k]
  ------------------
 7017|   771k|        const auto ch = *it++;
 7018|   771k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 771k, False: 0]
  ------------------
 7019|   771k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   771k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   771k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 62.0k, False: 709k]
  ------------------
 7023|  62.0k|                return;
 7024|  62.0k|            }
 7025|   771k|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|   771k|    }
 7036|       |
 7037|   709k|    handler.on_literal_text(begin, end);
 7038|   709k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6941|   771k|{
 6942|   771k|    struct id_adapter {
 6943|   771k|        constexpr void operator()()
 6944|   771k|        {
 6945|   771k|            arg_id = handler.on_arg_id();
 6946|   771k|        }
 6947|   771k|        constexpr void operator()(std::size_t id)
 6948|   771k|        {
 6949|   771k|            arg_id = handler.on_arg_id(id);
 6950|   771k|        }
 6951|       |
 6952|   771k|        constexpr void on_error(const char* msg)
 6953|   771k|        {
 6954|   771k|            SCN_UNLIKELY_ATTR
 6955|   771k|            handler.on_error(msg);
 6956|   771k|        }
 6957|       |
 6958|   771k|        Handler& handler;
 6959|   771k|        std::size_t arg_id;
 6960|   771k|    };
 6961|       |
 6962|   771k|    ++begin;
 6963|   771k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   771k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 771k]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|   771k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 771k]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|   771k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 771k]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|   771k|    else {
 6975|   771k|        auto adapter = id_adapter{handler, 0};
 6976|   771k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|   771k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   771k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 771k]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|   771k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 771k]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|   771k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 771k, False: 0]
  ------------------
 6987|   771k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   771k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 771k]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|   771k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|   771k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  1.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 771k]
  |  |  |  Branch (859:45): [True: 0, False: 771k]
  |  |  |  Branch (859:45): [True: 0, False: 771k]
  |  |  ------------------
  ------------------
 6993|      0|                handler.on_error("Unknown format specifier");
 6994|      0|                return begin;
 6995|      0|            }
 6996|   771k|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|   771k|    }
 7003|   771k|    return begin + 1;
 7004|   771k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 8038|  1.66M|    {
 8039|  1.66M|        return m_args.get(id);
 8040|  1.66M|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8048|  1.66M|    {
 8049|  1.66M|        return m_locale;
 8050|  1.66M|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5565|  1.66M|    {
 5566|  1.66M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  1.66M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.66M]
  |  |  ------------------
  ------------------
 5567|      0|            on_error(
 5568|      0|                "Cannot switch from manual to automatic argument indexing");
 5569|      0|            return 0;
 5570|      0|        }
 5571|       |
 5572|  1.66M|        auto id = static_cast<size_t>(m_next_arg_id++);
 5573|  1.66M|        do_check_arg_id(id);
 5574|  1.66M|        return id;
 5575|  1.66M|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6053|  1.66M|{
 6054|  1.66M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6054:9): [Folded - Ignored]
  ------------------
 6055|  1.66M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6055:10): [Folded - Ignored]
  |  Branch (6055:22): [Folded - Ignored]
  ------------------
 6056|       |        // The cast below will cause an error on gcc pre-12
 6057|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6058|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6058:13): [True: 0, False: 0]
  ------------------
 6059|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6060|      0|            SCN_UNLIKELY_ATTR
 6061|      0|            on_error("Argument not found");
 6062|      0|        }
 6063|      0|    }
 6064|  1.66M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|   771k|{
 6443|   771k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   771k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   771k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|   771k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 771k, False: 0]
  |  Branch (6444:26): [True: 0, False: 771k]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|   771k|    handler();
 6449|   771k|    return begin;
 6450|   771k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|   771k|        {
 6945|   771k|            arg_id = handler.on_arg_id();
 6946|   771k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5251|  3.33M|    {
 5252|  3.33M|        return m_type;
 5253|  3.33M|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5560|  1.66M|    {
 5561|  1.66M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5562|  1.66M|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5549|  3.33M|    {
 5550|  3.33M|        return m_format.data();
 5551|  3.33M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7121|   771k|    {
 7122|   771k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   771k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   771k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|   771k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6857|   771k|{
 6858|   771k|    auto do_presentation = [&]() -> const CharT* {
 6859|   771k|        if (*begin == CharT{'['}) {
 6860|   771k|            auto set = parse_presentation_set(begin, end, handler);
 6861|   771k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|   771k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|   771k|                return begin;
 6866|   771k|            }
 6867|   771k|            handler.on_character_set_string(set);
 6868|   771k|            return begin;
 6869|   771k|        }
 6870|   771k|        if (*begin == CharT{'/'}) {
 6871|   771k|            return parse_presentation_regex(begin, end, handler);
 6872|   771k|        }
 6873|   771k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   771k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|   771k|            handler.on_error("Invalid type specifier in format string");
 6876|   771k|            return begin;
 6877|   771k|        }
 6878|   771k|        handler.on_type(type);
 6879|   771k|        return begin;
 6880|   771k|    };
 6881|       |
 6882|   771k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 771k, False: 0]
  |  Branch (6882:28): [True: 771k, False: 0]
  ------------------
 6883|   771k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 771k, False: 0]
  |  Branch (6883:36): [True: 554k, False: 217k]
  ------------------
 6884|   554k|        return do_presentation();
 6885|   554k|    }
 6886|       |
 6887|   217k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   217k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 217k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|   217k|    begin = parse_align(begin, end, handler);
 6893|   217k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   217k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 217k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|   217k|    begin = parse_width(begin, end, handler);
 6899|   217k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   217k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 217k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|   217k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 217k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|   217k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 217k, False: 0]
  ------------------
 6918|   217k|        handler.on_localized();
 6919|   217k|        ++begin;
 6920|   217k|    }
 6921|   217k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   217k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 217k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|   217k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 217k, False: 0]
  |  Branch (6926:25): [True: 0, False: 217k]
  ------------------
 6927|      0|        do_presentation();
 6928|      0|    }
 6929|   217k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   217k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 217k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|   217k|    return begin;
 6935|   217k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6506|  1.66M|{
 6507|  1.66M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6507:13): [True: 1.19M, False: 473k]
  |  Branch (6507:33): [True: 1.19M, False: 0]
  ------------------
 6508|  1.66M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6508:13): [True: 473k, False: 0]
  |  Branch (6508:33): [True: 473k, False: 0]
  ------------------
 6509|  1.66M|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6858|   554k|    auto do_presentation = [&]() -> const CharT* {
 6859|   554k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 0, False: 554k]
  ------------------
 6860|      0|            auto set = parse_presentation_set(begin, end, handler);
 6861|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|      0|            handler.on_character_set_string(set);
 6868|      0|            return begin;
 6869|      0|        }
 6870|   554k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 554k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|   554k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   554k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   554k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 554k]
  |  |  ------------------
  ------------------
 6875|      0|            handler.on_error("Invalid type specifier in format string");
 6876|      0|            return begin;
 6877|      0|        }
 6878|   554k|        handler.on_type(type);
 6879|   554k|        return begin;
 6880|   554k|    };
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6454|  1.19M|{
 6455|  1.19M|    switch (type) {
 6456|      0|        case 'b':
  ------------------
  |  Branch (6456:9): [True: 0, False: 1.19M]
  ------------------
 6457|      0|        case 'B':
  ------------------
  |  Branch (6457:9): [True: 0, False: 1.19M]
  ------------------
 6458|      0|            return presentation_type::int_binary;
 6459|      0|        case 'd':
  ------------------
  |  Branch (6459:9): [True: 0, False: 1.19M]
  ------------------
 6460|      0|            return presentation_type::int_decimal;
 6461|      0|        case 'i':
  ------------------
  |  Branch (6461:9): [True: 0, False: 1.19M]
  ------------------
 6462|      0|            return presentation_type::int_generic;
 6463|      0|        case 'u':
  ------------------
  |  Branch (6463:9): [True: 0, False: 1.19M]
  ------------------
 6464|      0|            return presentation_type::int_unsigned_decimal;
 6465|      0|        case 'o':
  ------------------
  |  Branch (6465:9): [True: 0, False: 1.19M]
  ------------------
 6466|      0|            return presentation_type::int_octal;
 6467|      0|        case 'x':
  ------------------
  |  Branch (6467:9): [True: 0, False: 1.19M]
  ------------------
 6468|      0|        case 'X':
  ------------------
  |  Branch (6468:9): [True: 0, False: 1.19M]
  ------------------
 6469|      0|            return presentation_type::int_hex;
 6470|      0|        case 'r':
  ------------------
  |  Branch (6470:9): [True: 0, False: 1.19M]
  ------------------
 6471|      0|        case 'R':
  ------------------
  |  Branch (6471:9): [True: 0, False: 1.19M]
  ------------------
 6472|      0|            return presentation_type::int_arbitrary_base;
 6473|   510k|        case 'a':
  ------------------
  |  Branch (6473:9): [True: 510k, False: 682k]
  ------------------
 6474|   510k|        case 'A':
  ------------------
  |  Branch (6474:9): [True: 0, False: 1.19M]
  ------------------
 6475|   510k|            return presentation_type::float_hex;
 6476|  40.7k|        case 'e':
  ------------------
  |  Branch (6476:9): [True: 40.7k, False: 1.15M]
  ------------------
 6477|  40.7k|        case 'E':
  ------------------
  |  Branch (6477:9): [True: 0, False: 1.19M]
  ------------------
 6478|  40.7k|            return presentation_type::float_scientific;
 6479|   241k|        case 'f':
  ------------------
  |  Branch (6479:9): [True: 241k, False: 951k]
  ------------------
 6480|   241k|        case 'F':
  ------------------
  |  Branch (6480:9): [True: 0, False: 1.19M]
  ------------------
 6481|   241k|            return presentation_type::float_fixed;
 6482|   400k|        case 'g':
  ------------------
  |  Branch (6482:9): [True: 400k, False: 792k]
  ------------------
 6483|   400k|        case 'G':
  ------------------
  |  Branch (6483:9): [True: 0, False: 1.19M]
  ------------------
 6484|   400k|            return presentation_type::float_general;
 6485|      0|        case 's':
  ------------------
  |  Branch (6485:9): [True: 0, False: 1.19M]
  ------------------
 6486|      0|            return presentation_type::string;
 6487|      0|        case 'c':
  ------------------
  |  Branch (6487:9): [True: 0, False: 1.19M]
  ------------------
 6488|      0|            return presentation_type::character;
 6489|      0|        case '?':
  ------------------
  |  Branch (6489:9): [True: 0, False: 1.19M]
  ------------------
 6490|      0|            return presentation_type::escaped_character;
 6491|      0|        case 'p':
  ------------------
  |  Branch (6491:9): [True: 0, False: 1.19M]
  ------------------
 6492|      0|            return presentation_type::pointer;
 6493|      0|        case '[':
  ------------------
  |  Branch (6493:9): [True: 0, False: 1.19M]
  ------------------
 6494|      0|        case '/':
  ------------------
  |  Branch (6494:9): [True: 0, False: 1.19M]
  ------------------
 6495|       |            // Should be handled by parse_presentation_set and
 6496|       |            // parse_presentation_regex
 6497|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6498|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6499|      0|        default:
  ------------------
  |  Branch (6499:9): [True: 0, False: 1.19M]
  ------------------
 6500|      0|            return presentation_type::none;
 6501|  1.19M|    }
 6502|  1.19M|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6531|   217k|{
 6532|   217k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   217k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   217k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|   217k|    auto check_align = [](wchar_t ch) {
 6535|   217k|        switch (ch) {
 6536|   217k|            case L'<':
 6537|   217k|                return align_type::left;
 6538|   217k|            case L'>':
 6539|   217k|                return align_type::right;
 6540|   217k|            case L'^':
 6541|   217k|                return align_type::center;
 6542|   217k|            default:
 6543|   217k|                return align_type::none;
 6544|   217k|        }
 6545|   217k|    };
 6546|       |
 6547|   217k|    auto potential_fill_len = code_point_length(begin, end);
 6548|   217k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   434k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 217k]
  |  |  |  Branch (859:45): [True: 0, False: 217k]
  |  |  |  Branch (859:45): [True: 0, False: 217k]
  |  |  ------------------
  ------------------
 6549|   217k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|   217k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|   217k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|   217k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|   217k|    const auto begin_before_fill = begin;
 6559|   217k|    begin += potential_fill_len;
 6560|       |
 6561|   217k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 217k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|   217k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|   217k|    const auto begin_after_fill = begin;
 6567|   217k|    ++begin;
 6568|       |
 6569|   217k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 217k, False: 0]
  ------------------
 6570|   217k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   217k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 217k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|   217k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 0, False: 217k]
  ------------------
 6575|      0|            return begin_before_fill;
 6576|      0|        }
 6577|   217k|    }
 6578|       |
 6579|   217k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 217k, False: 0]
  ------------------
 6580|   217k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 217k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|   217k|        return begin_before_fill;
 6585|   217k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|   217k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6513|   473k|{
 6514|   473k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   473k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   473k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6515|   473k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6515:19): [Folded - Ignored]
  ------------------
 6516|   473k|        return 1;
 6517|   473k|    }
 6518|   473k|    else {
 6519|   473k|        const auto lengths =
 6520|   473k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6521|   473k|            "\3\4";
 6522|   473k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6523|   473k|        return len;
 6524|   473k|    }
 6525|   473k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6534|   434k|    auto check_align = [](wchar_t ch) {
 6535|   434k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 434k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 434k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 434k]
  ------------------
 6541|      0|                return align_type::center;
 6542|   434k|            default:
  ------------------
  |  Branch (6542:13): [True: 434k, False: 0]
  ------------------
 6543|   434k|                return align_type::none;
 6544|   434k|        }
 6545|   434k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6596|   217k|{
 6597|   217k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   217k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   217k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|   217k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 217k, False: 0]
  |  Branch (6599:33): [True: 0, False: 217k]
  ------------------
 6600|      0|        int width = parse_simple_int(begin, end);
 6601|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6602|      0|            handler.on_width(width);
 6603|      0|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|      0|    }
 6609|   217k|    return begin;
 6610|   217k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7126|   217k|    {
 7127|   217k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|   217k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 217k, False: 0]
  ------------------
 7129|   217k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 217k, False: 0]
  ------------------
 7130|   217k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 0, False: 217k]
  ------------------
 7131|   217k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 0, False: 0]
  ------------------
 7132|      0|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|      0|        }
 7137|       |
 7138|   217k|        Handler::on_localized();
 7139|   217k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   771k|{
 8417|   771k|#define SCN_VISIT(Type)                                         \
 8418|   771k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   771k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   771k|    }                                                           \
 8421|   771k|    else {                                                      \
 8422|   771k|        return vis(monostate_val);                              \
 8423|   771k|    }
 8424|       |
 8425|   771k|    monostate monostate_val{};
 8426|       |
 8427|   771k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 771k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 771k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 771k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 771k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 771k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 771k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 771k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 771k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 771k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 771k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 771k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 771k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 771k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 771k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 771k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   249k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 249k, False: 521k]
  ------------------
 8459|   249k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   249k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   249k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   249k|    }                                                           \
  |  | 8421|   249k|    else {                                                      \
  |  | 8422|   249k|        return vis(monostate_val);                              \
  |  | 8423|   249k|    }
  ------------------
 8460|   259k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 259k, False: 511k]
  ------------------
 8461|   259k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   259k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   259k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   259k|    }                                                           \
  |  | 8421|   259k|    else {                                                      \
  |  | 8422|   259k|        return vis(monostate_val);                              \
  |  | 8423|   259k|    }
  ------------------
 8462|   262k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 262k, False: 509k]
  ------------------
 8463|   262k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   262k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   262k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   262k|    }                                                           \
  |  | 8421|   262k|    else {                                                      \
  |  | 8422|   262k|        return vis(monostate_val);                              \
  |  | 8423|   262k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 771k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 771k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 771k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 771k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 771k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 771k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 771k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 771k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 771k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   771k|            SCN_CLANG_POP
 8495|   771k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   895k|{
 7044|   895k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   895k|    handler.check_args_exhausted();
 7046|   895k|    return handler.get_error();
 7047|   895k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   895k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   895k|    auto begin = format.data();
 7013|   895k|    auto it = begin;
 7014|   895k|    const auto end = format.data() + format.size();
 7015|       |
 7016|  1.72M|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 895k, False: 833k]
  ------------------
 7017|   895k|        const auto ch = *it++;
 7018|   895k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 895k, False: 0]
  ------------------
 7019|   895k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   895k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   895k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 62.0k, False: 833k]
  ------------------
 7023|  62.0k|                return;
 7024|  62.0k|            }
 7025|   895k|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|   895k|    }
 7036|       |
 7037|   833k|    handler.on_literal_text(begin, end);
 7038|   833k|}
_ZN3scn2v318basic_scan_contextIcE10advance_toENS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
 8174|   833k|    {
 8175|   833k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   833k|    static_cast<    \
  |  |  929|   833k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8176|   833k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 6941|   895k|{
 6942|   895k|    struct id_adapter {
 6943|   895k|        constexpr void operator()()
 6944|   895k|        {
 6945|   895k|            arg_id = handler.on_arg_id();
 6946|   895k|        }
 6947|   895k|        constexpr void operator()(std::size_t id)
 6948|   895k|        {
 6949|   895k|            arg_id = handler.on_arg_id(id);
 6950|   895k|        }
 6951|       |
 6952|   895k|        constexpr void on_error(const char* msg)
 6953|   895k|        {
 6954|   895k|            SCN_UNLIKELY_ATTR
 6955|   895k|            handler.on_error(msg);
 6956|   895k|        }
 6957|       |
 6958|   895k|        Handler& handler;
 6959|   895k|        std::size_t arg_id;
 6960|   895k|    };
 6961|       |
 6962|   895k|    ++begin;
 6963|   895k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   895k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 895k]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|   895k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 895k]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|   895k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 895k]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|   895k|    else {
 6975|   895k|        auto adapter = id_adapter{handler, 0};
 6976|   895k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|   895k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   895k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 895k]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|   895k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 895k]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|   895k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 895k, False: 0]
  ------------------
 6987|   895k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   895k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 895k]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|   895k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|   895k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  1.79M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 895k]
  |  |  |  Branch (859:45): [True: 0, False: 895k]
  |  |  |  Branch (859:45): [True: 0, False: 895k]
  |  |  ------------------
  ------------------
 6993|      0|                handler.on_error("Unknown format specifier");
 6994|      0|                return begin;
 6995|      0|            }
 6996|   895k|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|   895k|    }
 7003|   895k|    return begin + 1;
 7004|   895k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|   895k|{
 6443|   895k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   895k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   895k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|   895k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 895k, False: 0]
  |  Branch (6444:26): [True: 0, False: 895k]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|   895k|    handler();
 6449|   895k|    return begin;
 6450|   895k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|   895k|        {
 6945|   895k|            arg_id = handler.on_arg_id();
 6946|   895k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7121|   895k|    {
 7122|   895k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   895k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   895k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|   895k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6857|   895k|{
 6858|   895k|    auto do_presentation = [&]() -> const CharT* {
 6859|   895k|        if (*begin == CharT{'['}) {
 6860|   895k|            auto set = parse_presentation_set(begin, end, handler);
 6861|   895k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|   895k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|   895k|                return begin;
 6866|   895k|            }
 6867|   895k|            handler.on_character_set_string(set);
 6868|   895k|            return begin;
 6869|   895k|        }
 6870|   895k|        if (*begin == CharT{'/'}) {
 6871|   895k|            return parse_presentation_regex(begin, end, handler);
 6872|   895k|        }
 6873|   895k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   895k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|   895k|            handler.on_error("Invalid type specifier in format string");
 6876|   895k|            return begin;
 6877|   895k|        }
 6878|   895k|        handler.on_type(type);
 6879|   895k|        return begin;
 6880|   895k|    };
 6881|       |
 6882|   895k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 895k, False: 0]
  |  Branch (6882:28): [True: 895k, False: 0]
  ------------------
 6883|   895k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 895k, False: 0]
  |  Branch (6883:36): [True: 638k, False: 256k]
  ------------------
 6884|   638k|        return do_presentation();
 6885|   638k|    }
 6886|       |
 6887|   256k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   256k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 256k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|   256k|    begin = parse_align(begin, end, handler);
 6893|   256k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   256k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 256k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|   256k|    begin = parse_width(begin, end, handler);
 6899|   256k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   256k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 256k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|   256k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 256k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|   256k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 256k, False: 0]
  ------------------
 6918|   256k|        handler.on_localized();
 6919|   256k|        ++begin;
 6920|   256k|    }
 6921|   256k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   256k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 256k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|   256k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 256k, False: 0]
  |  Branch (6926:25): [True: 0, False: 256k]
  ------------------
 6927|      0|        do_presentation();
 6928|      0|    }
 6929|   256k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   256k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 256k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|   256k|    return begin;
 6935|   256k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6858|   638k|    auto do_presentation = [&]() -> const CharT* {
 6859|   638k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 0, False: 638k]
  ------------------
 6860|      0|            auto set = parse_presentation_set(begin, end, handler);
 6861|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|      0|            handler.on_character_set_string(set);
 6868|      0|            return begin;
 6869|      0|        }
 6870|   638k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 638k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|   638k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   638k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   638k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 638k]
  |  |  ------------------
  ------------------
 6875|      0|            handler.on_error("Invalid type specifier in format string");
 6876|      0|            return begin;
 6877|      0|        }
 6878|   638k|        handler.on_type(type);
 6879|   638k|        return begin;
 6880|   638k|    };
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6531|   256k|{
 6532|   256k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   256k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   256k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|   256k|    auto check_align = [](wchar_t ch) {
 6535|   256k|        switch (ch) {
 6536|   256k|            case L'<':
 6537|   256k|                return align_type::left;
 6538|   256k|            case L'>':
 6539|   256k|                return align_type::right;
 6540|   256k|            case L'^':
 6541|   256k|                return align_type::center;
 6542|   256k|            default:
 6543|   256k|                return align_type::none;
 6544|   256k|        }
 6545|   256k|    };
 6546|       |
 6547|   256k|    auto potential_fill_len = code_point_length(begin, end);
 6548|   256k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   513k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 256k]
  |  |  |  Branch (859:45): [True: 0, False: 256k]
  |  |  |  Branch (859:45): [True: 0, False: 256k]
  |  |  ------------------
  ------------------
 6549|   256k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|   256k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|   256k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|   256k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|   256k|    const auto begin_before_fill = begin;
 6559|   256k|    begin += potential_fill_len;
 6560|       |
 6561|   256k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 256k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|   256k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|   256k|    const auto begin_after_fill = begin;
 6567|   256k|    ++begin;
 6568|       |
 6569|   256k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 256k, False: 0]
  ------------------
 6570|   256k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   256k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 256k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|   256k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 0, False: 256k]
  ------------------
 6575|      0|            return begin_before_fill;
 6576|      0|        }
 6577|   256k|    }
 6578|       |
 6579|   256k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 256k, False: 0]
  ------------------
 6580|   256k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 256k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|   256k|        return begin_before_fill;
 6585|   256k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|   256k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6534|   513k|    auto check_align = [](wchar_t ch) {
 6535|   513k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 513k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 513k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 513k]
  ------------------
 6541|      0|                return align_type::center;
 6542|   513k|            default:
  ------------------
  |  Branch (6542:13): [True: 513k, False: 0]
  ------------------
 6543|   513k|                return align_type::none;
 6544|   513k|        }
 6545|   513k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6596|   256k|{
 6597|   256k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   256k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   256k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|   256k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 256k, False: 0]
  |  Branch (6599:33): [True: 0, False: 256k]
  ------------------
 6600|      0|        int width = parse_simple_int(begin, end);
 6601|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6602|      0|            handler.on_width(width);
 6603|      0|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|      0|    }
 6609|   256k|    return begin;
 6610|   256k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 7126|   256k|    {
 7127|   256k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|   256k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 256k, False: 0]
  ------------------
 7129|   256k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 256k, False: 0]
  ------------------
 7130|   256k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 0, False: 256k]
  ------------------
 7131|   256k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 0, False: 0]
  ------------------
 7132|      0|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|      0|        }
 7137|       |
 7138|   256k|        Handler::on_localized();
 7139|   256k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   895k|{
 8417|   895k|#define SCN_VISIT(Type)                                         \
 8418|   895k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   895k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   895k|    }                                                           \
 8421|   895k|    else {                                                      \
 8422|   895k|        return vis(monostate_val);                              \
 8423|   895k|    }
 8424|       |
 8425|   895k|    monostate monostate_val{};
 8426|       |
 8427|   895k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 895k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 895k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 895k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 895k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 895k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 895k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 895k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 895k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 895k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 895k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 895k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 895k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 895k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 895k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 895k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   288k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 288k, False: 606k]
  ------------------
 8459|   288k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   288k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   288k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   288k|    }                                                           \
  |  | 8421|   288k|    else {                                                      \
  |  | 8422|   288k|        return vis(monostate_val);                              \
  |  | 8423|   288k|    }
  ------------------
 8460|   301k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 301k, False: 593k]
  ------------------
 8461|   301k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   301k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   301k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   301k|    }                                                           \
  |  | 8421|   301k|    else {                                                      \
  |  | 8422|   301k|        return vis(monostate_val);                              \
  |  | 8423|   301k|    }
  ------------------
 8462|   304k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 304k, False: 590k]
  ------------------
 8463|   304k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   304k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   304k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   304k|    }                                                           \
  |  | 8421|   304k|    else {                                                      \
  |  | 8422|   304k|        return vis(monostate_val);                              \
  |  | 8423|   304k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 895k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 895k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 895k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 895k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 895k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 895k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 895k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 895k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 895k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   895k|            SCN_CLANG_POP
 8495|   895k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v36detail17basic_scan_bufferIcE8sync_allEv:
 4075|  80.6k|    {
 4076|  80.6k|        sync(0);
 4077|  80.6k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5465|   683k|    {
 5466|   683k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   683k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 683k]
  |  |  ------------------
  ------------------
 5467|      0|            return max_size();
 5468|      0|        }
 5469|       |
 5470|   683k|        return static_cast<std::size_t>(m_desc &
 5471|   683k|                                        ((1 << detail::packed_arg_bits) - 1));
 5472|   683k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5490|  1.36M|    {
 5491|  1.36M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5492|  1.36M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5433|   683k|    {
 5434|   683k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   683k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 683k]
  |  |  ------------------
  ------------------
 5435|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5436|      0|                return m_args[id];
 5437|      0|            }
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|   683k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|   683k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 683k]
  |  |  ------------------
  ------------------
 5442|      0|            return {};
 5443|      0|        }
 5444|       |
 5445|   683k|        const auto t = type(id);
 5446|   683k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|   683k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 683k]
  |  |  ------------------
  ------------------
 5447|      0|            return {};
 5448|      0|        }
 5449|       |
 5450|   683k|        basic_scan_arg<Context> arg;
 5451|   683k|        arg.m_type = t;
 5452|   683k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5452:13): [True: 683k, False: 0]
  ------------------
 5453|   683k|            arg.m_value.ref_value = m_builtin_values[id];
 5454|   683k|        }
 5455|      0|        else {
 5456|      0|            arg.m_value = m_values[id];
 5457|      0|        }
 5458|   683k|        return arg;
 5459|   683k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5499|   683k|    {
 5500|       |        // First (0th) index is size, types start after that
 5501|   683k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5502|   683k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5503|   683k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5504|   683k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5494|   683k|    {
 5495|   683k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5496|   683k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5246|  1.30M|    {
 5247|  1.30M|        return m_type != detail::arg_type::none_type;
 5248|  1.30M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  94.7k|{
 8417|  94.7k|#define SCN_VISIT(Type)                                         \
 8418|  94.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  94.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  94.7k|    }                                                           \
 8421|  94.7k|    else {                                                      \
 8422|  94.7k|        return vis(monostate_val);                              \
 8423|  94.7k|    }
 8424|       |
 8425|  94.7k|    monostate monostate_val{};
 8426|       |
 8427|  94.7k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 94.7k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 94.7k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 94.7k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 94.7k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 94.7k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 94.7k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 94.7k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 94.7k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 94.7k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 94.7k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 94.7k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 94.7k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 94.7k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 94.7k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 94.7k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|  30.7k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 30.7k, False: 63.9k]
  ------------------
 8459|  30.7k|            SCN_VISIT(float);
  ------------------
  |  | 8418|  30.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  30.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  30.7k|    }                                                           \
  |  | 8421|  30.7k|    else {                                                      \
  |  | 8422|  30.7k|        return vis(monostate_val);                              \
  |  | 8423|  30.7k|    }
  ------------------
 8460|  31.7k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 31.7k, False: 63.0k]
  ------------------
 8461|  31.7k|            SCN_VISIT(double);
  ------------------
  |  | 8418|  31.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  31.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  31.7k|    }                                                           \
  |  | 8421|  31.7k|    else {                                                      \
  |  | 8422|  31.7k|        return vis(monostate_val);                              \
  |  | 8423|  31.7k|    }
  ------------------
 8462|  32.2k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 32.2k, False: 62.4k]
  ------------------
 8463|  32.2k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|  32.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  32.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  32.2k|    }                                                           \
  |  | 8421|  32.2k|    else {                                                      \
  |  | 8422|  32.2k|        return vis(monostate_val);                              \
  |  | 8423|  32.2k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 94.7k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 94.7k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 94.7k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 94.7k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 94.7k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 94.7k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 94.7k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 94.7k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 94.7k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  94.7k|            SCN_CLANG_POP
 8495|  94.7k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5544|   557k|    {
 5545|   557k|    }
_ZN3scn2v318basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8137|   278k|    {
 8138|   278k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8055|   557k|    {
 8056|   557k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   278k|{
 7044|   278k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   278k|    handler.check_args_exhausted();
 7046|   278k|    return handler.get_error();
 7047|   278k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   278k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   278k|    auto begin = format.data();
 7013|   278k|    auto it = begin;
 7014|   278k|    const auto end = format.data() + format.size();
 7015|       |
 7016|   433k|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 278k, False: 154k]
  ------------------
 7017|   278k|        const auto ch = *it++;
 7018|   278k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 278k, False: 0]
  ------------------
 7019|   278k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   278k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   278k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 124k, False: 154k]
  ------------------
 7023|   124k|                return;
 7024|   124k|            }
 7025|   278k|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|   278k|    }
 7036|       |
 7037|   154k|    handler.on_literal_text(begin, end);
 7038|   154k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6941|   278k|{
 6942|   278k|    struct id_adapter {
 6943|   278k|        constexpr void operator()()
 6944|   278k|        {
 6945|   278k|            arg_id = handler.on_arg_id();
 6946|   278k|        }
 6947|   278k|        constexpr void operator()(std::size_t id)
 6948|   278k|        {
 6949|   278k|            arg_id = handler.on_arg_id(id);
 6950|   278k|        }
 6951|       |
 6952|   278k|        constexpr void on_error(const char* msg)
 6953|   278k|        {
 6954|   278k|            SCN_UNLIKELY_ATTR
 6955|   278k|            handler.on_error(msg);
 6956|   278k|        }
 6957|       |
 6958|   278k|        Handler& handler;
 6959|   278k|        std::size_t arg_id;
 6960|   278k|    };
 6961|       |
 6962|   278k|    ++begin;
 6963|   278k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   278k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 278k]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|   278k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 278k]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|   278k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 278k]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|   278k|    else {
 6975|   278k|        auto adapter = id_adapter{handler, 0};
 6976|   278k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|   278k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   278k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 278k]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|   278k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 278k]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|   278k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 278k, False: 0]
  ------------------
 6987|   278k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   278k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 278k]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|   278k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|   278k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   557k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 278k]
  |  |  |  Branch (859:45): [True: 0, False: 278k]
  |  |  |  Branch (859:45): [True: 0, False: 278k]
  |  |  ------------------
  ------------------
 6993|      0|                handler.on_error("Unknown format specifier");
 6994|      0|                return begin;
 6995|      0|            }
 6996|   278k|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|   278k|    }
 7003|   278k|    return begin + 1;
 7004|   278k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 8038|   557k|    {
 8039|   557k|        return m_args.get(id);
 8040|   557k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8048|   557k|    {
 8049|   557k|        return m_locale;
 8050|   557k|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5565|   557k|    {
 5566|   557k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|   557k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 557k]
  |  |  ------------------
  ------------------
 5567|      0|            on_error(
 5568|      0|                "Cannot switch from manual to automatic argument indexing");
 5569|      0|            return 0;
 5570|      0|        }
 5571|       |
 5572|   557k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5573|   557k|        do_check_arg_id(id);
 5574|   557k|        return id;
 5575|   557k|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6053|   557k|{
 6054|   557k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6054:9): [Folded - Ignored]
  ------------------
 6055|   557k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6055:10): [Folded - Ignored]
  |  Branch (6055:22): [Folded - Ignored]
  ------------------
 6056|       |        // The cast below will cause an error on gcc pre-12
 6057|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6058|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6058:13): [True: 0, False: 0]
  ------------------
 6059|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6060|      0|            SCN_UNLIKELY_ATTR
 6061|      0|            on_error("Argument not found");
 6062|      0|        }
 6063|      0|    }
 6064|   557k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|   278k|{
 6443|   278k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   278k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   278k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|   278k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 278k, False: 0]
  |  Branch (6444:26): [True: 0, False: 278k]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|   278k|    handler();
 6449|   278k|    return begin;
 6450|   278k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|   278k|        {
 6945|   278k|            arg_id = handler.on_arg_id();
 6946|   278k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5251|  1.11M|    {
 5252|  1.11M|        return m_type;
 5253|  1.11M|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5560|   557k|    {
 5561|   557k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5562|   557k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE3getEv:
 4343|   373k|{
 4344|   373k|    if (is_contiguous()) {
  ------------------
  |  Branch (4344:9): [True: 0, False: 373k]
  ------------------
 4345|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4346|      0|                                ranges::default_sentinel};
 4347|      0|    }
 4348|   373k|    return ranges::subrange{forward_iterator{this, 0},
 4349|   373k|                            ranges::default_sentinel};
 4350|   373k|}
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4176|   373k|    {
 4177|   373k|        SCN_EXPECT(parent);
  ------------------
  |  |  924|   373k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   373k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4178|   373k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|   373k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   373k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4179|   373k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5549|  1.11M|    {
 5550|  1.11M|        return m_format.data();
 5551|  1.11M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7121|   278k|    {
 7122|   278k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   278k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   278k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|   278k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6857|   278k|{
 6858|   278k|    auto do_presentation = [&]() -> const CharT* {
 6859|   278k|        if (*begin == CharT{'['}) {
 6860|   278k|            auto set = parse_presentation_set(begin, end, handler);
 6861|   278k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|   278k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|   278k|                return begin;
 6866|   278k|            }
 6867|   278k|            handler.on_character_set_string(set);
 6868|   278k|            return begin;
 6869|   278k|        }
 6870|   278k|        if (*begin == CharT{'/'}) {
 6871|   278k|            return parse_presentation_regex(begin, end, handler);
 6872|   278k|        }
 6873|   278k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   278k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|   278k|            handler.on_error("Invalid type specifier in format string");
 6876|   278k|            return begin;
 6877|   278k|        }
 6878|   278k|        handler.on_type(type);
 6879|   278k|        return begin;
 6880|   278k|    };
 6881|       |
 6882|   278k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 278k, False: 0]
  |  Branch (6882:28): [True: 278k, False: 0]
  ------------------
 6883|   278k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 278k, False: 0]
  |  Branch (6883:36): [True: 215k, False: 63.1k]
  ------------------
 6884|   215k|        return do_presentation();
 6885|   215k|    }
 6886|       |
 6887|  63.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  63.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 63.1k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|  63.1k|    begin = parse_align(begin, end, handler);
 6893|  63.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  63.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 63.1k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|  63.1k|    begin = parse_width(begin, end, handler);
 6899|  63.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  63.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 63.1k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|  63.1k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 63.1k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|  63.1k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 63.1k, False: 0]
  ------------------
 6918|  63.1k|        handler.on_localized();
 6919|  63.1k|        ++begin;
 6920|  63.1k|    }
 6921|  63.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  63.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 63.1k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|  63.1k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 63.1k, False: 0]
  |  Branch (6926:25): [True: 0, False: 63.1k]
  ------------------
 6927|      0|        do_presentation();
 6928|      0|    }
 6929|  63.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  63.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 63.1k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|  63.1k|    return begin;
 6935|  63.1k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6506|   557k|{
 6507|   557k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6507:13): [True: 431k, False: 126k]
  |  Branch (6507:33): [True: 431k, False: 0]
  ------------------
 6508|   557k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6508:13): [True: 126k, False: 0]
  |  Branch (6508:33): [True: 126k, False: 0]
  ------------------
 6509|   557k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6858|   215k|    auto do_presentation = [&]() -> const CharT* {
 6859|   215k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 0, False: 215k]
  ------------------
 6860|      0|            auto set = parse_presentation_set(begin, end, handler);
 6861|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|      0|            handler.on_character_set_string(set);
 6868|      0|            return begin;
 6869|      0|        }
 6870|   215k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 215k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|   215k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   215k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   215k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 215k]
  |  |  ------------------
  ------------------
 6875|      0|            handler.on_error("Invalid type specifier in format string");
 6876|      0|            return begin;
 6877|      0|        }
 6878|   215k|        handler.on_type(type);
 6879|   215k|        return begin;
 6880|   215k|    };
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6454|   431k|{
 6455|   431k|    switch (type) {
 6456|      0|        case 'b':
  ------------------
  |  Branch (6456:9): [True: 0, False: 431k]
  ------------------
 6457|      0|        case 'B':
  ------------------
  |  Branch (6457:9): [True: 0, False: 431k]
  ------------------
 6458|      0|            return presentation_type::int_binary;
 6459|      0|        case 'd':
  ------------------
  |  Branch (6459:9): [True: 0, False: 431k]
  ------------------
 6460|      0|            return presentation_type::int_decimal;
 6461|      0|        case 'i':
  ------------------
  |  Branch (6461:9): [True: 0, False: 431k]
  ------------------
 6462|      0|            return presentation_type::int_generic;
 6463|      0|        case 'u':
  ------------------
  |  Branch (6463:9): [True: 0, False: 431k]
  ------------------
 6464|      0|            return presentation_type::int_unsigned_decimal;
 6465|      0|        case 'o':
  ------------------
  |  Branch (6465:9): [True: 0, False: 431k]
  ------------------
 6466|      0|            return presentation_type::int_octal;
 6467|      0|        case 'x':
  ------------------
  |  Branch (6467:9): [True: 0, False: 431k]
  ------------------
 6468|      0|        case 'X':
  ------------------
  |  Branch (6468:9): [True: 0, False: 431k]
  ------------------
 6469|      0|            return presentation_type::int_hex;
 6470|      0|        case 'r':
  ------------------
  |  Branch (6470:9): [True: 0, False: 431k]
  ------------------
 6471|      0|        case 'R':
  ------------------
  |  Branch (6471:9): [True: 0, False: 431k]
  ------------------
 6472|      0|            return presentation_type::int_arbitrary_base;
 6473|   131k|        case 'a':
  ------------------
  |  Branch (6473:9): [True: 131k, False: 299k]
  ------------------
 6474|   131k|        case 'A':
  ------------------
  |  Branch (6474:9): [True: 0, False: 431k]
  ------------------
 6475|   131k|            return presentation_type::float_hex;
 6476|  50.4k|        case 'e':
  ------------------
  |  Branch (6476:9): [True: 50.4k, False: 380k]
  ------------------
 6477|  50.4k|        case 'E':
  ------------------
  |  Branch (6477:9): [True: 0, False: 431k]
  ------------------
 6478|  50.4k|            return presentation_type::float_scientific;
 6479|   122k|        case 'f':
  ------------------
  |  Branch (6479:9): [True: 122k, False: 308k]
  ------------------
 6480|   122k|        case 'F':
  ------------------
  |  Branch (6480:9): [True: 0, False: 431k]
  ------------------
 6481|   122k|            return presentation_type::float_fixed;
 6482|   126k|        case 'g':
  ------------------
  |  Branch (6482:9): [True: 126k, False: 304k]
  ------------------
 6483|   126k|        case 'G':
  ------------------
  |  Branch (6483:9): [True: 0, False: 431k]
  ------------------
 6484|   126k|            return presentation_type::float_general;
 6485|      0|        case 's':
  ------------------
  |  Branch (6485:9): [True: 0, False: 431k]
  ------------------
 6486|      0|            return presentation_type::string;
 6487|      0|        case 'c':
  ------------------
  |  Branch (6487:9): [True: 0, False: 431k]
  ------------------
 6488|      0|            return presentation_type::character;
 6489|      0|        case '?':
  ------------------
  |  Branch (6489:9): [True: 0, False: 431k]
  ------------------
 6490|      0|            return presentation_type::escaped_character;
 6491|      0|        case 'p':
  ------------------
  |  Branch (6491:9): [True: 0, False: 431k]
  ------------------
 6492|      0|            return presentation_type::pointer;
 6493|      0|        case '[':
  ------------------
  |  Branch (6493:9): [True: 0, False: 431k]
  ------------------
 6494|      0|        case '/':
  ------------------
  |  Branch (6494:9): [True: 0, False: 431k]
  ------------------
 6495|       |            // Should be handled by parse_presentation_set and
 6496|       |            // parse_presentation_regex
 6497|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6498|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6499|      0|        default:
  ------------------
  |  Branch (6499:9): [True: 0, False: 431k]
  ------------------
 6500|      0|            return presentation_type::none;
 6501|   431k|    }
 6502|   431k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6531|  63.1k|{
 6532|  63.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  63.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  63.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|  63.1k|    auto check_align = [](wchar_t ch) {
 6535|  63.1k|        switch (ch) {
 6536|  63.1k|            case L'<':
 6537|  63.1k|                return align_type::left;
 6538|  63.1k|            case L'>':
 6539|  63.1k|                return align_type::right;
 6540|  63.1k|            case L'^':
 6541|  63.1k|                return align_type::center;
 6542|  63.1k|            default:
 6543|  63.1k|                return align_type::none;
 6544|  63.1k|        }
 6545|  63.1k|    };
 6546|       |
 6547|  63.1k|    auto potential_fill_len = code_point_length(begin, end);
 6548|  63.1k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 63.1k]
  |  |  |  Branch (859:45): [True: 0, False: 63.1k]
  |  |  |  Branch (859:45): [True: 0, False: 63.1k]
  |  |  ------------------
  ------------------
 6549|  63.1k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|  63.1k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|  63.1k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|  63.1k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|  63.1k|    const auto begin_before_fill = begin;
 6559|  63.1k|    begin += potential_fill_len;
 6560|       |
 6561|  63.1k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 63.1k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|  63.1k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|  63.1k|    const auto begin_after_fill = begin;
 6567|  63.1k|    ++begin;
 6568|       |
 6569|  63.1k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 63.1k, False: 0]
  ------------------
 6570|  63.1k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  63.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 63.1k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|  63.1k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 0, False: 63.1k]
  ------------------
 6575|      0|            return begin_before_fill;
 6576|      0|        }
 6577|  63.1k|    }
 6578|       |
 6579|  63.1k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 63.1k, False: 0]
  ------------------
 6580|  63.1k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 63.1k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|  63.1k|        return begin_before_fill;
 6585|  63.1k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|  63.1k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6513|   126k|{
 6514|   126k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   126k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   126k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6515|   126k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6515:19): [Folded - Ignored]
  ------------------
 6516|   126k|        return 1;
 6517|   126k|    }
 6518|   126k|    else {
 6519|   126k|        const auto lengths =
 6520|   126k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6521|   126k|            "\3\4";
 6522|   126k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6523|   126k|        return len;
 6524|   126k|    }
 6525|   126k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6534|   126k|    auto check_align = [](wchar_t ch) {
 6535|   126k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 126k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 126k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 126k]
  ------------------
 6541|      0|                return align_type::center;
 6542|   126k|            default:
  ------------------
  |  Branch (6542:13): [True: 126k, False: 0]
  ------------------
 6543|   126k|                return align_type::none;
 6544|   126k|        }
 6545|   126k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6596|  63.1k|{
 6597|  63.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  63.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  63.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|  63.1k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 63.1k, False: 0]
  |  Branch (6599:33): [True: 0, False: 63.1k]
  ------------------
 6600|      0|        int width = parse_simple_int(begin, end);
 6601|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6602|      0|            handler.on_width(width);
 6603|      0|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|      0|    }
 6609|  63.1k|    return begin;
 6610|  63.1k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7126|  63.1k|    {
 7127|  63.1k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|  63.1k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 63.1k, False: 0]
  ------------------
 7129|  63.1k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 63.1k, False: 0]
  ------------------
 7130|  63.1k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 0, False: 63.1k]
  ------------------
 7131|  63.1k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 0, False: 0]
  ------------------
 7132|      0|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|      0|        }
 7137|       |
 7138|  63.1k|        Handler::on_localized();
 7139|  63.1k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   278k|{
 8417|   278k|#define SCN_VISIT(Type)                                         \
 8418|   278k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   278k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   278k|    }                                                           \
 8421|   278k|    else {                                                      \
 8422|   278k|        return vis(monostate_val);                              \
 8423|   278k|    }
 8424|       |
 8425|   278k|    monostate monostate_val{};
 8426|       |
 8427|   278k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 278k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 278k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 278k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 278k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 278k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 278k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 278k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 278k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 278k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 278k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 278k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 278k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 278k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 278k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 278k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|  91.8k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 91.8k, False: 187k]
  ------------------
 8459|  91.8k|            SCN_VISIT(float);
  ------------------
  |  | 8418|  91.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  91.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  91.8k|    }                                                           \
  |  | 8421|  91.8k|    else {                                                      \
  |  | 8422|  91.8k|        return vis(monostate_val);                              \
  |  | 8423|  91.8k|    }
  ------------------
 8460|  93.1k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 93.1k, False: 185k]
  ------------------
 8461|  93.1k|            SCN_VISIT(double);
  ------------------
  |  | 8418|  93.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  93.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  93.1k|    }                                                           \
  |  | 8421|  93.1k|    else {                                                      \
  |  | 8422|  93.1k|        return vis(monostate_val);                              \
  |  | 8423|  93.1k|    }
  ------------------
 8462|  93.9k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 93.9k, False: 184k]
  ------------------
 8463|  93.9k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|  93.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  93.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  93.9k|    }                                                           \
  |  | 8421|  93.9k|    else {                                                      \
  |  | 8422|  93.9k|        return vis(monostate_val);                              \
  |  | 8423|  93.9k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 278k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 278k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 278k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 278k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 278k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 278k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 278k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 278k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 278k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   278k|            SCN_CLANG_POP
 8495|   278k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  94.6k|{
 8417|  94.6k|#define SCN_VISIT(Type)                                         \
 8418|  94.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  94.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  94.6k|    }                                                           \
 8421|  94.6k|    else {                                                      \
 8422|  94.6k|        return vis(monostate_val);                              \
 8423|  94.6k|    }
 8424|       |
 8425|  94.6k|    monostate monostate_val{};
 8426|       |
 8427|  94.6k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 94.6k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 94.6k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 94.6k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 94.6k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 94.6k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 94.6k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 94.6k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 94.6k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 94.6k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 94.6k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 94.6k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 94.6k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 94.6k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 94.6k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 94.6k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|  30.7k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 30.7k, False: 63.9k]
  ------------------
 8459|  30.7k|            SCN_VISIT(float);
  ------------------
  |  | 8418|  30.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  30.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  30.7k|    }                                                           \
  |  | 8421|  30.7k|    else {                                                      \
  |  | 8422|  30.7k|        return vis(monostate_val);                              \
  |  | 8423|  30.7k|    }
  ------------------
 8460|  31.6k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 31.6k, False: 62.9k]
  ------------------
 8461|  31.6k|            SCN_VISIT(double);
  ------------------
  |  | 8418|  31.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  31.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  31.6k|    }                                                           \
  |  | 8421|  31.6k|    else {                                                      \
  |  | 8422|  31.6k|        return vis(monostate_val);                              \
  |  | 8423|  31.6k|    }
  ------------------
 8462|  32.2k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 32.2k, False: 62.3k]
  ------------------
 8463|  32.2k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|  32.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  32.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  32.2k|    }                                                           \
  |  | 8421|  32.2k|    else {                                                      \
  |  | 8422|  32.2k|        return vis(monostate_val);                              \
  |  | 8423|  32.2k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 94.6k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 94.6k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 94.6k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 94.6k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 94.6k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 94.6k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 94.6k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 94.6k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 94.6k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  94.6k|            SCN_CLANG_POP
 8495|  94.6k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   278k|{
 7044|   278k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   278k|    handler.check_args_exhausted();
 7046|   278k|    return handler.get_error();
 7047|   278k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   278k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   278k|    auto begin = format.data();
 7013|   278k|    auto it = begin;
 7014|   278k|    const auto end = format.data() + format.size();
 7015|       |
 7016|   433k|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 278k, False: 154k]
  ------------------
 7017|   278k|        const auto ch = *it++;
 7018|   278k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 278k, False: 0]
  ------------------
 7019|   278k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   278k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   278k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 124k, False: 154k]
  ------------------
 7023|   124k|                return;
 7024|   124k|            }
 7025|   278k|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|   278k|    }
 7036|       |
 7037|   154k|    handler.on_literal_text(begin, end);
 7038|   154k|}
_ZN3scn2v318basic_scan_contextIwE10advance_toENS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
 8174|   154k|    {
 8175|   154k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   154k|    static_cast<    \
  |  |  929|   154k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8176|   154k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 6941|   278k|{
 6942|   278k|    struct id_adapter {
 6943|   278k|        constexpr void operator()()
 6944|   278k|        {
 6945|   278k|            arg_id = handler.on_arg_id();
 6946|   278k|        }
 6947|   278k|        constexpr void operator()(std::size_t id)
 6948|   278k|        {
 6949|   278k|            arg_id = handler.on_arg_id(id);
 6950|   278k|        }
 6951|       |
 6952|   278k|        constexpr void on_error(const char* msg)
 6953|   278k|        {
 6954|   278k|            SCN_UNLIKELY_ATTR
 6955|   278k|            handler.on_error(msg);
 6956|   278k|        }
 6957|       |
 6958|   278k|        Handler& handler;
 6959|   278k|        std::size_t arg_id;
 6960|   278k|    };
 6961|       |
 6962|   278k|    ++begin;
 6963|   278k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   278k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 278k]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|   278k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 278k]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|   278k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 278k]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|   278k|    else {
 6975|   278k|        auto adapter = id_adapter{handler, 0};
 6976|   278k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|   278k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   278k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 278k]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|   278k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 278k]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|   278k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 278k, False: 0]
  ------------------
 6987|   278k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   278k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 278k]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|   278k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|   278k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   557k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 278k]
  |  |  |  Branch (859:45): [True: 0, False: 278k]
  |  |  |  Branch (859:45): [True: 0, False: 278k]
  |  |  ------------------
  ------------------
 6993|      0|                handler.on_error("Unknown format specifier");
 6994|      0|                return begin;
 6995|      0|            }
 6996|   278k|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|   278k|    }
 7003|   278k|    return begin + 1;
 7004|   278k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|   278k|{
 6443|   278k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   278k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   278k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|   278k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 278k, False: 0]
  |  Branch (6444:26): [True: 0, False: 278k]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|   278k|    handler();
 6449|   278k|    return begin;
 6450|   278k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|   278k|        {
 6945|   278k|            arg_id = handler.on_arg_id();
 6946|   278k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7121|   278k|    {
 7122|   278k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   278k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   278k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|   278k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6857|   278k|{
 6858|   278k|    auto do_presentation = [&]() -> const CharT* {
 6859|   278k|        if (*begin == CharT{'['}) {
 6860|   278k|            auto set = parse_presentation_set(begin, end, handler);
 6861|   278k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|   278k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|   278k|                return begin;
 6866|   278k|            }
 6867|   278k|            handler.on_character_set_string(set);
 6868|   278k|            return begin;
 6869|   278k|        }
 6870|   278k|        if (*begin == CharT{'/'}) {
 6871|   278k|            return parse_presentation_regex(begin, end, handler);
 6872|   278k|        }
 6873|   278k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   278k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|   278k|            handler.on_error("Invalid type specifier in format string");
 6876|   278k|            return begin;
 6877|   278k|        }
 6878|   278k|        handler.on_type(type);
 6879|   278k|        return begin;
 6880|   278k|    };
 6881|       |
 6882|   278k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 278k, False: 0]
  |  Branch (6882:28): [True: 278k, False: 0]
  ------------------
 6883|   278k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 278k, False: 0]
  |  Branch (6883:36): [True: 215k, False: 63.0k]
  ------------------
 6884|   215k|        return do_presentation();
 6885|   215k|    }
 6886|       |
 6887|  63.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  63.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 63.0k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|  63.0k|    begin = parse_align(begin, end, handler);
 6893|  63.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  63.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 63.0k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|  63.0k|    begin = parse_width(begin, end, handler);
 6899|  63.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  63.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 63.0k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|  63.0k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 63.0k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|  63.0k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 63.0k, False: 0]
  ------------------
 6918|  63.0k|        handler.on_localized();
 6919|  63.0k|        ++begin;
 6920|  63.0k|    }
 6921|  63.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  63.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 63.0k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|  63.0k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 63.0k, False: 0]
  |  Branch (6926:25): [True: 0, False: 63.0k]
  ------------------
 6927|      0|        do_presentation();
 6928|      0|    }
 6929|  63.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  63.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 63.0k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|  63.0k|    return begin;
 6935|  63.0k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6858|   215k|    auto do_presentation = [&]() -> const CharT* {
 6859|   215k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 0, False: 215k]
  ------------------
 6860|      0|            auto set = parse_presentation_set(begin, end, handler);
 6861|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|      0|            handler.on_character_set_string(set);
 6868|      0|            return begin;
 6869|      0|        }
 6870|   215k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 215k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|   215k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   215k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   215k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 215k]
  |  |  ------------------
  ------------------
 6875|      0|            handler.on_error("Invalid type specifier in format string");
 6876|      0|            return begin;
 6877|      0|        }
 6878|   215k|        handler.on_type(type);
 6879|   215k|        return begin;
 6880|   215k|    };
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6531|  63.0k|{
 6532|  63.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  63.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  63.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|  63.0k|    auto check_align = [](wchar_t ch) {
 6535|  63.0k|        switch (ch) {
 6536|  63.0k|            case L'<':
 6537|  63.0k|                return align_type::left;
 6538|  63.0k|            case L'>':
 6539|  63.0k|                return align_type::right;
 6540|  63.0k|            case L'^':
 6541|  63.0k|                return align_type::center;
 6542|  63.0k|            default:
 6543|  63.0k|                return align_type::none;
 6544|  63.0k|        }
 6545|  63.0k|    };
 6546|       |
 6547|  63.0k|    auto potential_fill_len = code_point_length(begin, end);
 6548|  63.0k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 63.0k]
  |  |  |  Branch (859:45): [True: 0, False: 63.0k]
  |  |  |  Branch (859:45): [True: 0, False: 63.0k]
  |  |  ------------------
  ------------------
 6549|  63.0k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|  63.0k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|  63.0k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|  63.0k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|  63.0k|    const auto begin_before_fill = begin;
 6559|  63.0k|    begin += potential_fill_len;
 6560|       |
 6561|  63.0k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 63.0k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|  63.0k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|  63.0k|    const auto begin_after_fill = begin;
 6567|  63.0k|    ++begin;
 6568|       |
 6569|  63.0k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 63.0k, False: 0]
  ------------------
 6570|  63.0k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  63.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 63.0k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|  63.0k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 0, False: 63.0k]
  ------------------
 6575|      0|            return begin_before_fill;
 6576|      0|        }
 6577|  63.0k|    }
 6578|       |
 6579|  63.0k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 63.0k, False: 0]
  ------------------
 6580|  63.0k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 63.0k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|  63.0k|        return begin_before_fill;
 6585|  63.0k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|  63.0k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6534|   126k|    auto check_align = [](wchar_t ch) {
 6535|   126k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 126k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 126k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 126k]
  ------------------
 6541|      0|                return align_type::center;
 6542|   126k|            default:
  ------------------
  |  Branch (6542:13): [True: 126k, False: 0]
  ------------------
 6543|   126k|                return align_type::none;
 6544|   126k|        }
 6545|   126k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6596|  63.0k|{
 6597|  63.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  63.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  63.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|  63.0k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 63.0k, False: 0]
  |  Branch (6599:33): [True: 0, False: 63.0k]
  ------------------
 6600|      0|        int width = parse_simple_int(begin, end);
 6601|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6602|      0|            handler.on_width(width);
 6603|      0|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|      0|    }
 6609|  63.0k|    return begin;
 6610|  63.0k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 7126|  63.0k|    {
 7127|  63.0k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|  63.0k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 63.0k, False: 0]
  ------------------
 7129|  63.0k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 63.0k, False: 0]
  ------------------
 7130|  63.0k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 0, False: 63.0k]
  ------------------
 7131|  63.0k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 0, False: 0]
  ------------------
 7132|      0|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|      0|        }
 7137|       |
 7138|  63.0k|        Handler::on_localized();
 7139|  63.0k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   278k|{
 8417|   278k|#define SCN_VISIT(Type)                                         \
 8418|   278k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   278k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   278k|    }                                                           \
 8421|   278k|    else {                                                      \
 8422|   278k|        return vis(monostate_val);                              \
 8423|   278k|    }
 8424|       |
 8425|   278k|    monostate monostate_val{};
 8426|       |
 8427|   278k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 278k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 278k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 278k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 278k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 278k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 278k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 278k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 278k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 278k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 278k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 278k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 278k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 278k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 278k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 278k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|  91.7k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 91.7k, False: 186k]
  ------------------
 8459|  91.7k|            SCN_VISIT(float);
  ------------------
  |  | 8418|  91.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  91.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  91.7k|    }                                                           \
  |  | 8421|  91.7k|    else {                                                      \
  |  | 8422|  91.7k|        return vis(monostate_val);                              \
  |  | 8423|  91.7k|    }
  ------------------
 8460|  93.0k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 93.0k, False: 185k]
  ------------------
 8461|  93.0k|            SCN_VISIT(double);
  ------------------
  |  | 8418|  93.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  93.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  93.0k|    }                                                           \
  |  | 8421|  93.0k|    else {                                                      \
  |  | 8422|  93.0k|        return vis(monostate_val);                              \
  |  | 8423|  93.0k|    }
  ------------------
 8462|  93.9k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 93.9k, False: 184k]
  ------------------
 8463|  93.9k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|  93.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  93.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  93.9k|    }                                                           \
  |  | 8421|  93.9k|    else {                                                      \
  |  | 8422|  93.9k|        return vis(monostate_val);                              \
  |  | 8423|  93.9k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 278k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 278k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 278k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 278k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 278k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 278k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 278k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 278k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 278k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   278k|            SCN_CLANG_POP
 8495|   278k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v36detail17basic_scan_bufferIwE8sync_allEv:
 4075|   161k|    {
 4076|   161k|        sync(0);
 4077|   161k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
 5419|   223k|    constexpr basic_scan_args() = default;
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
 5419|  63.1k|    constexpr basic_scan_args() = default;

_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
   88|  56.1k|{
   89|  56.1k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  56.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  56.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  56.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  56.1k|    static_cast<    \
  |  |  929|  56.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  56.1k|    static_cast<    \
  |  |  929|  56.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  56.1k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   171k|{
   44|   171k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   171k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   171k|}
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0ELSB_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
  126|  56.1k|{
  127|  56.1k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  56.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  56.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  56.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  56.1k|    static_cast<    \
  |  |  929|  56.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  56.1k|    static_cast<    \
  |  |  929|  56.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  56.1k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeELPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT0_OSE_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   171k|{
   60|   171k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   171k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   171k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  162|  10.2k|{
  163|  10.2k|    T value;
  164|  10.2k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  10.2k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  10.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  10.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  10.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  10.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.13k, False: 6.11k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.13k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.13k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.13k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.13k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.13k|    }                                                  \
  |  |  |  | 3671|  10.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  6.11k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  6.11k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  6.11k|    static_cast<    \
  |  |  929|  6.11k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  6.11k|    static_cast<    \
  |  |  929|  6.11k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  10.2k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  31.5k|{
   72|  31.5k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  31.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  31.5k|}
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
   88|  57.1k|{
   89|  57.1k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  57.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  57.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  57.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  57.1k|    static_cast<    \
  |  |  929|  57.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  57.1k|    static_cast<    \
  |  |  929|  57.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  57.1k|}
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0ELSB_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
  126|  57.1k|{
  127|  57.1k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  57.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  57.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  57.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  57.1k|    static_cast<    \
  |  |  929|  57.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  57.1k|    static_cast<    \
  |  |  929|  57.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  57.1k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  162|  10.5k|{
  163|  10.5k|    T value;
  164|  10.5k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  10.5k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  10.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  10.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  10.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  10.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.13k, False: 6.42k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.13k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.13k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.13k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.13k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.13k|    }                                                  \
  |  |  |  | 3671|  10.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  6.42k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  6.42k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  6.42k|    static_cast<    \
  |  |  929|  6.42k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  6.42k|    static_cast<    \
  |  |  929|  6.42k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  10.5k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
   88|  57.7k|{
   89|  57.7k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  57.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  57.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  57.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  57.7k|    static_cast<    \
  |  |  929|  57.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  57.7k|    static_cast<    \
  |  |  929|  57.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  57.7k|}
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0ELSB_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
  126|  57.7k|{
  127|  57.7k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  57.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  57.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  57.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  57.7k|    static_cast<    \
  |  |  929|  57.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  57.7k|    static_cast<    \
  |  |  929|  57.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  57.7k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  162|  10.7k|{
  163|  10.7k|    T value;
  164|  10.7k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  10.7k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  10.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  10.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  10.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  10.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.13k, False: 6.62k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.13k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.13k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.13k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.13k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.13k|    }                                                  \
  |  |  |  | 3671|  10.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  6.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  6.62k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  6.62k|    static_cast<    \
  |  |  929|  6.62k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  6.62k|    static_cast<    \
  |  |  929|  6.62k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  10.7k|}
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  56.1k|{
   89|  56.1k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  56.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  56.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  56.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  56.1k|    static_cast<    \
  |  |  929|  56.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  56.1k|    static_cast<    \
  |  |  929|  56.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  56.1k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   170k|{
   44|   170k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   170k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   170k|}
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EELPv0ELSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  56.1k|{
  127|  56.1k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  56.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  56.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  56.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  56.1k|    static_cast<    \
  |  |  929|  56.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  56.1k|    static_cast<    \
  |  |  929|  56.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  56.1k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeELPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT0_OSJ_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   170k|{
   60|   170k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   170k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   170k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  162|  10.2k|{
  163|  10.2k|    T value;
  164|  10.2k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  10.2k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  10.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  10.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  10.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  10.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.13k, False: 6.10k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.13k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.13k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.13k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.13k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.13k|    }                                                  \
  |  |  |  | 3671|  10.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  6.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  6.10k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  6.10k|    static_cast<    \
  |  |  929|  6.10k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  6.10k|    static_cast<    \
  |  |  929|  6.10k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  10.2k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  31.5k|{
   72|  31.5k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  31.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  31.5k|}
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  57.0k|{
   89|  57.0k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  57.0k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  57.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  57.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  57.0k|    static_cast<    \
  |  |  929|  57.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  57.0k|    static_cast<    \
  |  |  929|  57.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  57.0k|}
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EELPv0ELSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  57.0k|{
  127|  57.0k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  57.0k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  57.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  57.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  57.0k|    static_cast<    \
  |  |  929|  57.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  57.0k|    static_cast<    \
  |  |  929|  57.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  57.0k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  162|  10.5k|{
  163|  10.5k|    T value;
  164|  10.5k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  10.5k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  10.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  10.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  10.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  10.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.13k, False: 6.41k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.13k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.13k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.13k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.13k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.13k|    }                                                  \
  |  |  |  | 3671|  10.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  6.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  6.41k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  6.41k|    static_cast<    \
  |  |  929|  6.41k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  6.41k|    static_cast<    \
  |  |  929|  6.41k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  10.5k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  57.7k|{
   89|  57.7k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  57.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  57.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  57.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  57.7k|    static_cast<    \
  |  |  929|  57.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  57.7k|    static_cast<    \
  |  |  929|  57.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  57.7k|}
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EELPv0ELSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  57.7k|{
  127|  57.7k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  57.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  57.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  57.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  57.7k|    static_cast<    \
  |  |  929|  57.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  57.7k|    static_cast<    \
  |  |  929|  57.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  57.7k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  162|  10.7k|{
  163|  10.7k|    T value;
  164|  10.7k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  10.7k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  10.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  10.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  10.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  10.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.13k, False: 6.61k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.13k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.13k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.13k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.13k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.13k|    }                                                  \
  |  |  |  | 3671|  10.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  6.61k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  6.61k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  6.61k|    static_cast<    \
  |  |  929|  6.61k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  6.61k|    static_cast<    \
  |  |  929|  6.61k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  10.7k|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  652|  1.39M|{
  653|  1.39M|    static_assert(std::is_same_v<Locale, std::locale>);
  654|  1.39M|}
_ZNK3scn2v36detail10locale_ref3getINSt3__16localeEEET_v:
  658|   592k|{
  659|   592k|    static_assert(std::is_same_v<Locale, std::locale>);
  660|   592k|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (660:12): [True: 296k, False: 296k]
  ------------------
  661|   592k|                    : std::locale{};
  662|   592k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1220|   714k|{
 1221|   714k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   714k|                                  m_nan_payload_buffer, value);
 1223|   714k|    value = this->setsign(value);
 1224|   714k|    return n;
 1225|   714k|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1220|   167k|{
 1221|   167k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   167k|                                  m_nan_payload_buffer, value);
 1223|   167k|    value = this->setsign(value);
 1224|   167k|    return n;
 1225|   167k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|   746k|{
 1221|   746k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   746k|                                  m_nan_payload_buffer, value);
 1223|   746k|    value = this->setsign(value);
 1224|   746k|    return n;
 1225|   746k|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|   170k|{
 1221|   170k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   170k|                                  m_nan_payload_buffer, value);
 1223|   170k|    value = this->setsign(value);
 1224|   170k|    return n;
 1225|   170k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1220|   753k|{
 1221|   753k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   753k|                                  m_nan_payload_buffer, value);
 1223|   753k|    value = this->setsign(value);
 1224|   753k|    return n;
 1225|   753k|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1220|   173k|{
 1221|   173k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   173k|                                  m_nan_payload_buffer, value);
 1223|   173k|    value = this->setsign(value);
 1224|   173k|    return n;
 1225|   173k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2183|   494k|{
 2184|   494k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2185|   494k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2191|   563k|{
 2192|   563k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2193|   563k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   563k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 525k, False: 37.2k]
  |  |  ------------------
  ------------------
 2194|   525k|        source.sync(*n);
 2195|   525k|    }
 2196|  37.2k|    else {
 2197|  37.2k|        source.sync_all();
 2198|  37.2k|    }
 2199|   563k|    return n;
 2200|   563k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2207|   171k|{
 2208|   171k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2209|   171k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2215|   170k|{
 2216|   170k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2217|   170k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   170k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 96.4k, False: 74.4k]
  |  |  ------------------
  ------------------
 2218|  96.4k|        source.sync(*n);
 2219|  96.4k|    }
 2220|  74.4k|    else {
 2221|  74.4k|        source.sync_all();
 2222|  74.4k|    }
 2223|   170k|    return n;
 2224|   170k|}
_ZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  193|   992k|{
  194|   992k|    return find_classic_impl(
  195|   992k|        source, [](char ch) { return is_ascii_space(ch); },
  196|   992k|        [](char32_t cp) { return is_cp_space(cp); });
  197|   992k|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  201|  2.33M|{
  202|  2.33M|    return find_classic_impl(
  203|  2.33M|        source, [](char ch) { return !is_ascii_space(ch); },
  204|  2.33M|        [](char32_t cp) { return !is_cp_space(cp); });
  205|  2.33M|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2140|   494k|{
 2141|   494k|    return vscan_internal(source, format, args);
 2142|   494k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2146|   563k|{
 2147|   563k|    auto n = vscan_internal(source, format, args);
 2148|   563k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   563k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 525k, False: 37.2k]
  |  |  ------------------
  ------------------
 2149|   525k|        source.sync(*n);
 2150|   525k|    }
 2151|  37.2k|    else {
 2152|  37.2k|        source.sync_all();
 2153|  37.2k|    }
 2154|   563k|    return n;
 2155|   563k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2160|   171k|{
 2161|   171k|    return vscan_internal(source, format, args);
 2162|   171k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2166|   170k|{
 2167|   170k|    auto n = vscan_internal(source, format, args);
 2168|   170k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   170k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 96.4k, False: 74.4k]
  |  |  ------------------
  ------------------
 2169|  96.4k|        source.sync(*n);
 2170|  96.4k|    }
 2171|  74.4k|    else {
 2172|  74.4k|        source.sync_all();
 2173|  74.4k|    }
 2174|   170k|    return n;
 2175|   170k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2250|   108k|{
 2251|   108k|    return vscan_value_internal(source, arg);
 2252|   108k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2255|   115k|{
 2256|   115k|    auto n = vscan_value_internal(source, arg);
 2257|   115k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   115k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 109k, False: 6.20k]
  |  |  ------------------
  ------------------
 2258|   109k|        source.sync(*n);
 2259|   109k|    }
 2260|  6.20k|    else {
 2261|  6.20k|        source.sync_all();
 2262|  6.20k|    }
 2263|   115k|    return n;
 2264|   115k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2269|  31.5k|{
 2270|  31.5k|    return vscan_value_internal(source, arg);
 2271|  31.5k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2275|  31.5k|{
 2276|  31.5k|    auto n = vscan_value_internal(source, arg);
 2277|  31.5k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  31.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 19.1k, False: 12.4k]
  |  |  ------------------
  ------------------
 2278|  19.1k|        source.sync(*n);
 2279|  19.1k|    }
 2280|  12.4k|    else {
 2281|  12.4k|        source.sync_all();
 2282|  12.4k|    }
 2283|  31.5k|    return n;
 2284|  31.5k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|   992k|{
  118|   992k|    auto it = source.begin();
  119|       |
  120|  3.24M|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 2.60M, False: 632k]
  ------------------
  121|  2.60M|        auto sv =
  122|  2.60M|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  2.60M|                .substr(0, 8);
  124|       |
  125|  2.60M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 2.54M, False: 62.0k]
  ------------------
  126|  2.54M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  2.54M|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  2.54M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 332k, False: 2.21M]
  ------------------
  129|   332k|                break;
  130|   332k|            }
  131|  2.21M|            continue;
  132|  2.54M|        }
  133|       |
  134|   206k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 171k, False: 34.4k]
  ------------------
  135|   171k|            auto tmp =
  136|   171k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   171k|            auto res = get_next_code_point(tmp);
  138|   171k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 27.6k, False: 144k]
  ------------------
  139|  27.6k|                return it;
  140|  27.6k|            }
  141|   144k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|   144k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|   144k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|   144k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|   144k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|   144k|        }
  145|  62.0k|    }
  146|       |
  147|   964k|    return detail::make_string_view_iterator(source, it);
  148|   992k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  104|  4.04M|{
  105|  4.04M|    static_assert(sizeof(*source.data()) == 1);
  106|  4.04M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|  4.04M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.04M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  107|  4.04M|    uint64_t word{};
  108|  4.04M|    std::memcpy(&word, source.data(), source.size());
  109|       |
  110|  4.04M|    return has_byte_greater(word, 127) != 0;
  111|  4.04M|}
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  195|  15.5M|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  196|   171k|        [](char32_t cp) { return is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  2.33M|{
  118|  2.33M|    auto it = source.begin();
  119|       |
  120|  2.54M|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 1.43M, False: 1.11M]
  ------------------
  121|  1.43M|        auto sv =
  122|  1.43M|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  1.43M|                .substr(0, 8);
  124|       |
  125|  1.43M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 1.35M, False: 85.4k]
  ------------------
  126|  1.35M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  1.35M|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  1.35M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 1.14M, False: 210k]
  ------------------
  129|  1.14M|                break;
  130|  1.14M|            }
  131|   210k|            continue;
  132|  1.35M|        }
  133|       |
  134|   166k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 157k, False: 9.09k]
  ------------------
  135|   157k|            auto tmp =
  136|   157k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   157k|            auto res = get_next_code_point(tmp);
  138|   157k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 76.3k, False: 81.3k]
  ------------------
  139|  76.3k|                return it;
  140|  76.3k|            }
  141|  81.3k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  81.3k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  81.3k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  81.3k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  81.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  81.3k|        }
  145|  85.4k|    }
  146|       |
  147|  2.25M|    return detail::make_string_view_iterator(source, it);
  148|  2.33M|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  203|  2.10M|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  204|   157k|        [](char32_t cp) { return !is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   714k|{
 1138|   714k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 4.46k, False: 710k]
  ------------------
 1139|  4.46k|        value = std::numeric_limits<T>::infinity();
 1140|  4.46k|        return 3;
 1141|  4.46k|    }
 1142|   710k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 3.64k, False: 706k]
  ------------------
 1143|  3.64k|        value = std::numeric_limits<T>::infinity();
 1144|  3.64k|        return 8;
 1145|  3.64k|    }
 1146|   706k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 30.1k, False: 676k]
  ------------------
 1147|  30.1k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  30.1k|        return 3;
 1149|  30.1k|    }
 1150|   676k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 870, False: 675k]
  ------------------
 1151|    870|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|    870|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|    870|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|    870|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|    870|    }
 1182|       |
 1183|   675k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   675k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   675k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   675k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 145k, False: 530k]
  ------------------
 1185|   145k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   145k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.33k, False: 142k]
  |  |  ------------------
  ------------------
 1186|  2.33k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  2.33k|                                         "Invalid floating-point digit");
 1188|  2.33k|        }
 1189|   145k|    }
 1190|   673k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   673k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.31k, False: 667k]
  |  |  ------------------
  ------------------
 1191|  6.31k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  6.31k|                                     "Invalid floating-point digit");
 1193|  6.31k|    }
 1194|       |
 1195|   667k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|   667k|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|   667k|            double tmp{};
 1200|   667k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|   667k|            value = tmp;
 1202|   667k|            return ret;
 1203|   667k|        }
 1204|   667k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|   667k|            return fast_float_fallback(data, value);
 1208|   667k|        }
 1209|   667k|    }
 1210|   667k|    else {
 1211|       |        // Default to fast_float
 1212|   667k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   667k|    }
 1214|   667k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIcfEC2ENS2_14impl_init_dataIcEE:
 1077|   667k|    {
 1078|   667k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_114impl_init_dataIcE4baseEv:
  711|  2.41M|    {
  712|  2.41M|        return {kind, options};
  713|  2.41M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcfEclERf:
 1081|   667k|    {
 1082|   667k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 142k, False: 524k]
  ------------------
 1083|   667k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 24.4k, False: 499k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|   167k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|   167k|                                              value);
 1087|   167k|        }
 1088|       |
 1089|   499k|        const auto flags = get_flags();
 1090|   499k|        const auto view = get_view();
 1091|   499k|        const auto result = fast_float::from_chars(
 1092|   499k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|   499k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|   499k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 499k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|   499k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|   499k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.02k, False: 494k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  5.02k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  5.02k|                                              value);
 1102|  5.02k|        }
 1103|       |
 1104|   494k|        return result.ptr - view.data();
 1105|   499k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   172k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   172k|    {
 1048|   172k|#if !SCN_DISABLE_STRTOD
 1049|   172k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   172k|    }
 1056|   172k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfEC2ENS2_14impl_init_dataIcEE:
  893|   172k|    {
  894|   172k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfEC2ENS2_9impl_baseE:
  725|   201k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfEclERf:
  897|   172k|    {
  898|   172k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   172k|                           generic_strtod);
  900|   172k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIcPFfPKcPPcEEENS0_13scan_expectedIlEERfPKT_T0_:
  731|   172k|    {
  732|   172k|        CharT* end{};
  733|   172k|        errno = 0;
  734|   172k|        value = strtod_cb(src, &end);
  735|   172k|        const auto saved_errno = errno;
  736|   172k|        auto chars_read = end - src;
  737|       |
  738|   172k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   172k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   172k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.98k, False: 166k]
  |  |  ------------------
  ------------------
  740|  5.98k|            return unexpected(e);
  741|  5.98k|        }
  742|       |
  743|   166k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 141k, False: 24.2k]
  ------------------
  744|   166k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 141k, False: 0]
  ------------------
  745|   141k|            chars_read -= 2;
  746|   141k|        }
  747|       |
  748|   166k|        return chars_read;
  749|   172k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE11check_errorElif:
  777|   201k|    {
  778|   201k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 67.1k, False: 134k]
  |  Branch (778:37): [True: 0, False: 67.1k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|   201k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 24.6k, False: 176k]
  ------------------
  785|   201k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 24.6k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|   201k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 8.00k, False: 193k]
  |  Branch (791:34): [True: 1.35k, False: 6.65k]
  ------------------
  792|  1.35k|            SCN_UNLIKELY_ATTR
  793|  1.35k|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|  1.35k|        }
  795|       |
  796|   200k|        SCN_GCC_COMPAT_PUSH
  797|   200k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|   200k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 200k, False: 0]
  ------------------
  800|   200k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 200k, False: 0]
  ------------------
  801|   200k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 6.62k, False: 193k]
  ------------------
  802|  6.62k|            SCN_UNLIKELY_ATTR
  803|  6.62k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|  6.62k|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|   193k|            return {};
  809|   200k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEf:
  686|   209k|{
  687|   209k|    return f == 0.0f || f == -0.0f;
  ------------------
  |  Branch (687:12): [True: 68.4k, False: 141k]
  |  Branch (687:25): [True: 0, False: 141k]
  ------------------
  688|   209k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   172k|    {
  755|   172k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 168k, False: 4.02k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   168k|            auto first_space = read_until_classic_space(input.view());
  758|   168k|            input.assign(
  759|   168k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   168k|        }
  761|       |
  762|   172k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 142k, False: 29.4k]
  ------------------
  763|   142k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|   142k|                input.get_allocated_string().insert(0, "0x");
  765|   142k|            }
  766|   142k|            else {
  767|   142k|                input.get_allocated_string().insert(0, L"0x");
  768|   142k|            }
  769|   142k|        }
  770|       |
  771|   172k|        return input.get_allocated_string().c_str();
  772|   172k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfE14generic_strtodEPKcPPc:
  904|   172k|    {
  905|   172k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|   172k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|   172k|        }
  908|   172k|        else {
  909|   172k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|   172k|        }
  911|   172k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE21generic_narrow_strtodEPKcPPc:
  812|   172k|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|   172k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|   172k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (837:23): [Folded - Ignored]
  ------------------
  838|   172k|            return std::strtof(str, str_end);
  839|   172k|        }
  840|   172k|        else if constexpr (std::is_same_v<T, double>) {
  841|   172k|            return std::strtod(str, str_end);
  842|   172k|        }
  843|   172k|        else if constexpr (std::is_same_v<T, long double>) {
  844|   172k|            return std::strtold(str, str_end);
  845|   172k|        }
  846|   172k|#endif
  847|   172k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_120fast_float_impl_base9get_flagsEv:
 1060|  1.24M|    {
 1061|  1.24M|        unsigned format_flags{};
 1062|  1.24M|        if ((m_options & float_reader_base::allow_fixed) != 0) {
  ------------------
  |  Branch (1062:13): [True: 1.23M, False: 10.3k]
  ------------------
 1063|  1.23M|            format_flags |= fast_float::fixed;
 1064|  1.23M|        }
 1065|  1.24M|        if ((m_options & float_reader_base::allow_scientific) != 0) {
  ------------------
  |  Branch (1065:13): [True: 1.06M, False: 188k]
  ------------------
 1066|  1.06M|            format_flags |= fast_float::scientific;
 1067|  1.06M|        }
 1068|       |
 1069|  1.24M|        return static_cast<fast_float::chars_format>(format_flags);
 1070|  1.24M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcfE8get_viewEv:
 1109|   499k|    {
 1110|   499k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|   499k|            return m_input.view();
 1112|   499k|        }
 1113|   499k|        else if constexpr (sizeof(CharT) == 2) {
 1114|   499k|            return std::u16string_view{
 1115|   499k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|   499k|                m_input.view().size()};
 1117|   499k|        }
 1118|   499k|        else {
 1119|   499k|            return std::u32string_view{
 1120|   499k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|   499k|                m_input.view().size()};
 1122|   499k|        }
 1123|   499k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   167k|{
 1138|   167k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 167k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|   167k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 167k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|   167k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 167k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|   167k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 167k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|   167k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   167k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   167k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   167k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 35.3k, False: 131k]
  ------------------
 1185|  35.3k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  35.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.99k, False: 27.3k]
  |  |  ------------------
  ------------------
 1186|  7.99k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  7.99k|                                         "Invalid floating-point digit");
 1188|  7.99k|        }
 1189|  35.3k|    }
 1190|   159k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   159k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.6k, False: 139k]
  |  |  ------------------
  ------------------
 1191|  19.6k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  19.6k|                                     "Invalid floating-point digit");
 1193|  19.6k|    }
 1194|       |
 1195|   139k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|   139k|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|   139k|            double tmp{};
 1200|   139k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|   139k|            value = tmp;
 1202|   139k|            return ret;
 1203|   139k|        }
 1204|   139k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|   139k|            return fast_float_fallback(data, value);
 1208|   139k|        }
 1209|   139k|    }
 1210|   139k|    else {
 1211|       |        // Default to fast_float
 1212|   139k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   139k|    }
 1214|   139k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIwfEC2ENS2_14impl_init_dataIwEE:
 1077|   139k|    {
 1078|   139k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_114impl_init_dataIwE4baseEv:
  711|   485k|    {
  712|   485k|        return {kind, options};
  713|   485k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwfEclERf:
 1081|   139k|    {
 1082|   139k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 27.3k, False: 112k]
  ------------------
 1083|   139k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 182, False: 111k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|  27.5k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|  27.5k|                                              value);
 1087|  27.5k|        }
 1088|       |
 1089|   111k|        const auto flags = get_flags();
 1090|   111k|        const auto view = get_view();
 1091|   111k|        const auto result = fast_float::from_chars(
 1092|   111k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|   111k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 111k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|   111k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.95k, False: 110k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  1.95k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  1.95k|                                              value);
 1102|  1.95k|        }
 1103|       |
 1104|   110k|        return result.ptr - view.data();
 1105|   111k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  29.4k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  29.4k|    {
 1048|  29.4k|#if !SCN_DISABLE_STRTOD
 1049|  29.4k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  29.4k|    }
 1056|  29.4k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfEC2ENS2_14impl_init_dataIwEE:
  893|  29.4k|    {
  894|  29.4k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfEclERf:
  897|  29.4k|    {
  898|  29.4k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  29.4k|                           generic_strtod);
  900|  29.4k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIwPFfPKwPPwEEENS0_13scan_expectedIlEERfPKT_T0_:
  731|  29.4k|    {
  732|  29.4k|        CharT* end{};
  733|  29.4k|        errno = 0;
  734|  29.4k|        value = strtod_cb(src, &end);
  735|  29.4k|        const auto saved_errno = errno;
  736|  29.4k|        auto chars_read = end - src;
  737|       |
  738|  29.4k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  29.4k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  29.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.99k, False: 27.4k]
  |  |  ------------------
  ------------------
  740|  1.99k|            return unexpected(e);
  741|  1.99k|        }
  742|       |
  743|  27.4k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 27.2k, False: 182]
  ------------------
  744|  27.4k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 27.2k, False: 0]
  ------------------
  745|  27.2k|            chars_read -= 2;
  746|  27.2k|        }
  747|       |
  748|  27.4k|        return chars_read;
  749|  29.4k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  29.4k|    {
  755|  29.4k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 28.2k, False: 1.26k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  28.2k|            auto first_space = read_until_classic_space(input.view());
  758|  28.2k|            input.assign(
  759|  28.2k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  28.2k|        }
  761|       |
  762|  29.4k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 27.3k, False: 2.13k]
  ------------------
  763|  27.3k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|  27.3k|                input.get_allocated_string().insert(0, "0x");
  765|  27.3k|            }
  766|  27.3k|            else {
  767|  27.3k|                input.get_allocated_string().insert(0, L"0x");
  768|  27.3k|            }
  769|  27.3k|        }
  770|       |
  771|  29.4k|        return input.get_allocated_string().c_str();
  772|  29.4k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfE14generic_strtodEPKwPPw:
  904|  29.4k|    {
  905|  29.4k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|  29.4k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|  29.4k|        }
  908|  29.4k|        else {
  909|  29.4k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  29.4k|        }
  911|  29.4k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE19generic_wide_strtodEPKwPPw:
  850|  29.4k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|  29.4k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|  29.4k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (875:23): [Folded - Ignored]
  ------------------
  876|  29.4k|            return std::wcstof(str, str_end);
  877|  29.4k|        }
  878|  29.4k|        else if constexpr (std::is_same_v<T, double>) {
  879|  29.4k|            return std::wcstod(str, str_end);
  880|  29.4k|        }
  881|  29.4k|        else if constexpr (std::is_same_v<T, long double>) {
  882|  29.4k|            return std::wcstold(str, str_end);
  883|  29.4k|        }
  884|  29.4k|#endif
  885|  29.4k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwfE8get_viewEv:
 1109|   111k|    {
 1110|   111k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|   111k|            return m_input.view();
 1112|   111k|        }
 1113|   111k|        else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (1113:28): [Folded - Ignored]
  ------------------
 1114|   111k|            return std::u16string_view{
 1115|   111k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|   111k|                m_input.view().size()};
 1117|   111k|        }
 1118|   111k|        else {
 1119|   111k|            return std::u32string_view{
 1120|   111k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|   111k|                m_input.view().size()};
 1122|   111k|        }
 1123|   111k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   746k|{
 1138|   746k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 5.05k, False: 740k]
  ------------------
 1139|  5.05k|        value = std::numeric_limits<T>::infinity();
 1140|  5.05k|        return 3;
 1141|  5.05k|    }
 1142|   740k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 3.99k, False: 736k]
  ------------------
 1143|  3.99k|        value = std::numeric_limits<T>::infinity();
 1144|  3.99k|        return 8;
 1145|  3.99k|    }
 1146|   736k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 30.9k, False: 706k]
  ------------------
 1147|  30.9k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  30.9k|        return 3;
 1149|  30.9k|    }
 1150|   706k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 940, False: 705k]
  ------------------
 1151|    940|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|    940|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|    940|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|    940|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|    940|    }
 1182|       |
 1183|   705k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   705k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   705k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   705k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 149k, False: 555k]
  ------------------
 1185|   149k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   149k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.42k, False: 147k]
  |  |  ------------------
  ------------------
 1186|  2.42k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  2.42k|                                         "Invalid floating-point digit");
 1188|  2.42k|        }
 1189|   149k|    }
 1190|   702k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   702k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.87k, False: 695k]
  |  |  ------------------
  ------------------
 1191|  6.87k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  6.87k|                                     "Invalid floating-point digit");
 1193|  6.87k|    }
 1194|       |
 1195|   695k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|   695k|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|   695k|            double tmp{};
 1200|   695k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|   695k|            value = tmp;
 1202|   695k|            return ret;
 1203|   695k|        }
 1204|   695k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|   695k|            return fast_float_fallback(data, value);
 1208|   695k|        }
 1209|   695k|    }
 1210|   695k|    else {
 1211|       |        // Default to fast_float
 1212|   695k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   695k|    }
 1214|   695k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIcdEC2ENS2_14impl_init_dataIcEE:
 1077|   695k|    {
 1078|   695k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcdEclERd:
 1081|   695k|    {
 1082|   695k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 146k, False: 548k]
  ------------------
 1083|   695k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 27.0k, False: 521k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|   173k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|   173k|                                              value);
 1087|   173k|        }
 1088|       |
 1089|   521k|        const auto flags = get_flags();
 1090|   521k|        const auto view = get_view();
 1091|   521k|        const auto result = fast_float::from_chars(
 1092|   521k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|   521k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|   521k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 521k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|   521k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|   521k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.27k, False: 519k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  2.27k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  2.27k|                                              value);
 1102|  2.27k|        }
 1103|       |
 1104|   519k|        return result.ptr - view.data();
 1105|   521k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   176k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   176k|    {
 1048|   176k|#if !SCN_DISABLE_STRTOD
 1049|   176k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   176k|    }
 1056|   176k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdEC2ENS2_14impl_init_dataIcEE:
  893|   176k|    {
  894|   176k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdEC2ENS2_9impl_baseE:
  725|   204k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdEclERd:
  897|   176k|    {
  898|   176k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   176k|                           generic_strtod);
  900|   176k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIcPFdPKcPPcEEENS0_13scan_expectedIlEERdPKT_T0_:
  731|   176k|    {
  732|   176k|        CharT* end{};
  733|   176k|        errno = 0;
  734|   176k|        value = strtod_cb(src, &end);
  735|   176k|        const auto saved_errno = errno;
  736|   176k|        auto chars_read = end - src;
  737|       |
  738|   176k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   176k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   176k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.73k, False: 173k]
  |  |  ------------------
  ------------------
  740|  2.73k|            return unexpected(e);
  741|  2.73k|        }
  742|       |
  743|   173k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 146k, False: 26.9k]
  ------------------
  744|   173k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 146k, False: 0]
  ------------------
  745|   146k|            chars_read -= 2;
  746|   146k|        }
  747|       |
  748|   173k|        return chars_read;
  749|   176k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE11check_errorElid:
  777|   204k|    {
  778|   204k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 66.7k, False: 138k]
  |  Branch (778:37): [True: 0, False: 66.7k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|   204k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 27.1k, False: 177k]
  ------------------
  785|   204k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 27.1k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|   204k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 3.86k, False: 200k]
  |  Branch (791:34): [True: 320, False: 3.54k]
  ------------------
  792|    320|            SCN_UNLIKELY_ATTR
  793|    320|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|    320|        }
  795|       |
  796|   204k|        SCN_GCC_COMPAT_PUSH
  797|   204k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|   204k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 204k, False: 0]
  ------------------
  800|   204k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 204k, False: 0]
  ------------------
  801|   204k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 3.54k, False: 200k]
  ------------------
  802|  3.54k|            SCN_UNLIKELY_ATTR
  803|  3.54k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|  3.54k|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|   200k|            return {};
  809|   204k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEd:
  690|   208k|{
  691|   208k|    return d == 0.0 || d == -0.0;
  ------------------
  |  Branch (691:12): [True: 67.1k, False: 141k]
  |  Branch (691:24): [True: 0, False: 141k]
  ------------------
  692|   208k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   176k|    {
  755|   176k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 173k, False: 2.93k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   173k|            auto first_space = read_until_classic_space(input.view());
  758|   173k|            input.assign(
  759|   173k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   173k|        }
  761|       |
  762|   176k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 146k, False: 29.2k]
  ------------------
  763|   146k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|   146k|                input.get_allocated_string().insert(0, "0x");
  765|   146k|            }
  766|   146k|            else {
  767|   146k|                input.get_allocated_string().insert(0, L"0x");
  768|   146k|            }
  769|   146k|        }
  770|       |
  771|   176k|        return input.get_allocated_string().c_str();
  772|   176k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdE14generic_strtodEPKcPPc:
  904|   176k|    {
  905|   176k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|   176k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|   176k|        }
  908|   176k|        else {
  909|   176k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|   176k|        }
  911|   176k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE21generic_narrow_strtodEPKcPPc:
  812|   176k|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|   176k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|   176k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (837:23): [Folded - Ignored]
  ------------------
  838|   176k|            return std::strtof(str, str_end);
  839|   176k|        }
  840|   176k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (840:28): [Folded - Ignored]
  ------------------
  841|   176k|            return std::strtod(str, str_end);
  842|   176k|        }
  843|   176k|        else if constexpr (std::is_same_v<T, long double>) {
  844|   176k|            return std::strtold(str, str_end);
  845|   176k|        }
  846|   176k|#endif
  847|   176k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcdE8get_viewEv:
 1109|   521k|    {
 1110|   521k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|   521k|            return m_input.view();
 1112|   521k|        }
 1113|   521k|        else if constexpr (sizeof(CharT) == 2) {
 1114|   521k|            return std::u16string_view{
 1115|   521k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|   521k|                m_input.view().size()};
 1117|   521k|        }
 1118|   521k|        else {
 1119|   521k|            return std::u32string_view{
 1120|   521k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|   521k|                m_input.view().size()};
 1122|   521k|        }
 1123|   521k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   170k|{
 1138|   170k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 170k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|   170k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 170k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|   170k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 170k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|   170k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 170k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|   170k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   170k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   170k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   170k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 35.3k, False: 135k]
  ------------------
 1185|  35.3k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  35.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.99k, False: 27.3k]
  |  |  ------------------
  ------------------
 1186|  7.99k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  7.99k|                                         "Invalid floating-point digit");
 1188|  7.99k|        }
 1189|  35.3k|    }
 1190|   162k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   162k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.9k, False: 143k]
  |  |  ------------------
  ------------------
 1191|  19.9k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  19.9k|                                     "Invalid floating-point digit");
 1193|  19.9k|    }
 1194|       |
 1195|   143k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|   143k|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|   143k|            double tmp{};
 1200|   143k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|   143k|            value = tmp;
 1202|   143k|            return ret;
 1203|   143k|        }
 1204|   143k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|   143k|            return fast_float_fallback(data, value);
 1208|   143k|        }
 1209|   143k|    }
 1210|   143k|    else {
 1211|       |        // Default to fast_float
 1212|   143k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   143k|    }
 1214|   143k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIwdEC2ENS2_14impl_init_dataIwEE:
 1077|   143k|    {
 1078|   143k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwdEclERd:
 1081|   143k|    {
 1082|   143k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 27.3k, False: 115k]
  ------------------
 1083|   143k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 182, False: 115k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|  27.5k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|  27.5k|                                              value);
 1087|  27.5k|        }
 1088|       |
 1089|   115k|        const auto flags = get_flags();
 1090|   115k|        const auto view = get_view();
 1091|   115k|        const auto result = fast_float::from_chars(
 1092|   115k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|   115k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|   115k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 115k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|   115k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|   115k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.08k, False: 114k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  1.08k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  1.08k|                                              value);
 1102|  1.08k|        }
 1103|       |
 1104|   114k|        return result.ptr - view.data();
 1105|   115k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  28.5k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  28.5k|    {
 1048|  28.5k|#if !SCN_DISABLE_STRTOD
 1049|  28.5k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  28.5k|    }
 1056|  28.5k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdEC2ENS2_14impl_init_dataIwEE:
  893|  28.5k|    {
  894|  28.5k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdEclERd:
  897|  28.5k|    {
  898|  28.5k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  28.5k|                           generic_strtod);
  900|  28.5k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIwPFdPKwPPwEEENS0_13scan_expectedIlEERdPKT_T0_:
  731|  28.5k|    {
  732|  28.5k|        CharT* end{};
  733|  28.5k|        errno = 0;
  734|  28.5k|        value = strtod_cb(src, &end);
  735|  28.5k|        const auto saved_errno = errno;
  736|  28.5k|        auto chars_read = end - src;
  737|       |
  738|  28.5k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  28.5k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  28.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.12k, False: 27.4k]
  |  |  ------------------
  ------------------
  740|  1.12k|            return unexpected(e);
  741|  1.12k|        }
  742|       |
  743|  27.4k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 27.2k, False: 182]
  ------------------
  744|  27.4k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 27.2k, False: 0]
  ------------------
  745|  27.2k|            chars_read -= 2;
  746|  27.2k|        }
  747|       |
  748|  27.4k|        return chars_read;
  749|  28.5k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  28.5k|    {
  755|  28.5k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 27.7k, False: 827]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  27.7k|            auto first_space = read_until_classic_space(input.view());
  758|  27.7k|            input.assign(
  759|  27.7k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  27.7k|        }
  761|       |
  762|  28.5k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 27.3k, False: 1.26k]
  ------------------
  763|  27.3k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|  27.3k|                input.get_allocated_string().insert(0, "0x");
  765|  27.3k|            }
  766|  27.3k|            else {
  767|  27.3k|                input.get_allocated_string().insert(0, L"0x");
  768|  27.3k|            }
  769|  27.3k|        }
  770|       |
  771|  28.5k|        return input.get_allocated_string().c_str();
  772|  28.5k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdE14generic_strtodEPKwPPw:
  904|  28.5k|    {
  905|  28.5k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|  28.5k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|  28.5k|        }
  908|  28.5k|        else {
  909|  28.5k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  28.5k|        }
  911|  28.5k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE19generic_wide_strtodEPKwPPw:
  850|  28.5k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|  28.5k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|  28.5k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (875:23): [Folded - Ignored]
  ------------------
  876|  28.5k|            return std::wcstof(str, str_end);
  877|  28.5k|        }
  878|  28.5k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (878:28): [Folded - Ignored]
  ------------------
  879|  28.5k|            return std::wcstod(str, str_end);
  880|  28.5k|        }
  881|  28.5k|        else if constexpr (std::is_same_v<T, long double>) {
  882|  28.5k|            return std::wcstold(str, str_end);
  883|  28.5k|        }
  884|  28.5k|#endif
  885|  28.5k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwdE8get_viewEv:
 1109|   115k|    {
 1110|   115k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|   115k|            return m_input.view();
 1112|   115k|        }
 1113|   115k|        else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (1113:28): [Folded - Ignored]
  ------------------
 1114|   115k|            return std::u16string_view{
 1115|   115k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|   115k|                m_input.view().size()};
 1117|   115k|        }
 1118|   115k|        else {
 1119|   115k|            return std::u32string_view{
 1120|   115k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|   115k|                m_input.view().size()};
 1122|   115k|        }
 1123|   115k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   753k|{
 1138|   753k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 5.21k, False: 748k]
  ------------------
 1139|  5.21k|        value = std::numeric_limits<T>::infinity();
 1140|  5.21k|        return 3;
 1141|  5.21k|    }
 1142|   748k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 4.09k, False: 743k]
  ------------------
 1143|  4.09k|        value = std::numeric_limits<T>::infinity();
 1144|  4.09k|        return 8;
 1145|  4.09k|    }
 1146|   743k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 31.2k, False: 712k]
  ------------------
 1147|  31.2k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  31.2k|        return 3;
 1149|  31.2k|    }
 1150|   712k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 972, False: 711k]
  ------------------
 1151|    972|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|    972|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|    972|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|    972|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|    972|    }
 1182|       |
 1183|   711k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   711k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   711k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   711k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 150k, False: 561k]
  ------------------
 1185|   150k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   150k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.51k, False: 147k]
  |  |  ------------------
  ------------------
 1186|  2.51k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  2.51k|                                         "Invalid floating-point digit");
 1188|  2.51k|        }
 1189|   150k|    }
 1190|   709k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   709k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.16k, False: 702k]
  |  |  ------------------
  ------------------
 1191|  7.16k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  7.16k|                                     "Invalid floating-point digit");
 1193|  7.16k|    }
 1194|       |
 1195|   702k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|   702k|        if constexpr (sizeof(double) == sizeof(long double)) {
  ------------------
  |  Branch (1196:23): [Folded - Ignored]
  ------------------
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|   702k|            double tmp{};
 1200|   702k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|   702k|            value = tmp;
 1202|   702k|            return ret;
 1203|   702k|        }
 1204|   702k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|   702k|            return fast_float_fallback(data, value);
 1208|   702k|        }
 1209|   702k|    }
 1210|   702k|    else {
 1211|       |        // Default to fast_float
 1212|   702k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   702k|    }
 1214|   702k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   702k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   702k|    {
 1048|   702k|#if !SCN_DISABLE_STRTOD
 1049|   702k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   702k|    }
 1056|   702k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceEC2ENS2_14impl_init_dataIcEE:
  893|   702k|    {
  894|   702k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeEC2ENS2_9impl_baseE:
  725|   846k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceEclERe:
  897|   702k|    {
  898|   702k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   702k|                           generic_strtod);
  900|   702k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIcPFePKcPPcEEENS0_13scan_expectedIlEERePKT_T0_:
  731|   702k|    {
  732|   702k|        CharT* end{};
  733|   702k|        errno = 0;
  734|   702k|        value = strtod_cb(src, &end);
  735|   702k|        const auto saved_errno = errno;
  736|   702k|        auto chars_read = end - src;
  737|       |
  738|   702k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   702k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   702k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 559, False: 701k]
  |  |  ------------------
  ------------------
  740|    559|            return unexpected(e);
  741|    559|        }
  742|       |
  743|   701k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 147k, False: 554k]
  ------------------
  744|   701k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 147k, False: 0]
  ------------------
  745|   147k|            chars_read -= 2;
  746|   147k|        }
  747|       |
  748|   701k|        return chars_read;
  749|   702k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE11check_errorElie:
  777|   846k|    {
  778|   846k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 310k, False: 536k]
  |  Branch (778:37): [True: 0, False: 310k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|   846k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 27.2k, False: 819k]
  ------------------
  785|   846k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 27.2k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|   846k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 641, False: 846k]
  |  Branch (791:34): [True: 46, False: 595]
  ------------------
  792|     46|            SCN_UNLIKELY_ATTR
  793|     46|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|     46|        }
  795|       |
  796|   846k|        SCN_GCC_COMPAT_PUSH
  797|   846k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|   846k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 846k, False: 0]
  ------------------
  800|   846k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 846k, False: 0]
  ------------------
  801|   846k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 595, False: 846k]
  ------------------
  802|    595|            SCN_UNLIKELY_ATTR
  803|    595|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|    595|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|   846k|            return {};
  809|   846k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEe:
  694|   847k|{
  695|   847k|    return ld == 0.0L || ld == -0.0L;
  ------------------
  |  Branch (695:12): [True: 310k, False: 536k]
  |  Branch (695:26): [True: 0, False: 536k]
  ------------------
  696|   847k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   702k|    {
  755|   702k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 650k, False: 51.0k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   650k|            auto first_space = read_until_classic_space(input.view());
  758|   650k|            input.assign(
  759|   650k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   650k|        }
  761|       |
  762|   702k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 147k, False: 554k]
  ------------------
  763|   147k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|   147k|                input.get_allocated_string().insert(0, "0x");
  765|   147k|            }
  766|   147k|            else {
  767|   147k|                input.get_allocated_string().insert(0, L"0x");
  768|   147k|            }
  769|   147k|        }
  770|       |
  771|   702k|        return input.get_allocated_string().c_str();
  772|   702k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceE14generic_strtodEPKcPPc:
  904|   702k|    {
  905|   702k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|   702k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|   702k|        }
  908|   702k|        else {
  909|   702k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|   702k|        }
  911|   702k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE21generic_narrow_strtodEPKcPPc:
  812|   702k|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|   702k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|   702k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (837:23): [Folded - Ignored]
  ------------------
  838|   702k|            return std::strtof(str, str_end);
  839|   702k|        }
  840|   702k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (840:28): [Folded - Ignored]
  ------------------
  841|   702k|            return std::strtod(str, str_end);
  842|   702k|        }
  843|   702k|        else if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (843:28): [Folded - Ignored]
  ------------------
  844|   702k|            return std::strtold(str, str_end);
  845|   702k|        }
  846|   702k|#endif
  847|   702k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   173k|{
 1138|   173k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 173k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|   173k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 173k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|   173k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 173k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|   173k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 173k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|   173k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   173k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   173k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   173k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 35.3k, False: 137k]
  ------------------
 1185|  35.3k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  35.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.00k, False: 27.3k]
  |  |  ------------------
  ------------------
 1186|  8.00k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  8.00k|                                         "Invalid floating-point digit");
 1188|  8.00k|        }
 1189|  35.3k|    }
 1190|   165k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   165k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.2k, False: 144k]
  |  |  ------------------
  ------------------
 1191|  20.2k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  20.2k|                                     "Invalid floating-point digit");
 1193|  20.2k|    }
 1194|       |
 1195|   144k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|   144k|        if constexpr (sizeof(double) == sizeof(long double)) {
  ------------------
  |  Branch (1196:23): [Folded - Ignored]
  ------------------
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|   144k|            double tmp{};
 1200|   144k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|   144k|            value = tmp;
 1202|   144k|            return ret;
 1203|   144k|        }
 1204|   144k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|   144k|            return fast_float_fallback(data, value);
 1208|   144k|        }
 1209|   144k|    }
 1210|   144k|    else {
 1211|       |        // Default to fast_float
 1212|   144k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   144k|    }
 1214|   144k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   144k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   144k|    {
 1048|   144k|#if !SCN_DISABLE_STRTOD
 1049|   144k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   144k|    }
 1056|   144k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweEC2ENS2_14impl_init_dataIwEE:
  893|   144k|    {
  894|   144k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweEclERe:
  897|   144k|    {
  898|   144k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   144k|                           generic_strtod);
  900|   144k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIwPFePKwPPwEEENS0_13scan_expectedIlEERePKT_T0_:
  731|   144k|    {
  732|   144k|        CharT* end{};
  733|   144k|        errno = 0;
  734|   144k|        value = strtod_cb(src, &end);
  735|   144k|        const auto saved_errno = errno;
  736|   144k|        auto chars_read = end - src;
  737|       |
  738|   144k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   144k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   144k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 82, False: 144k]
  |  |  ------------------
  ------------------
  740|     82|            return unexpected(e);
  741|     82|        }
  742|       |
  743|   144k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 27.3k, False: 117k]
  ------------------
  744|   144k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 27.3k, False: 0]
  ------------------
  745|  27.3k|            chars_read -= 2;
  746|  27.3k|        }
  747|       |
  748|   144k|        return chars_read;
  749|   144k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   144k|    {
  755|   144k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 142k, False: 2.58k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   142k|            auto first_space = read_until_classic_space(input.view());
  758|   142k|            input.assign(
  759|   142k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   142k|        }
  761|       |
  762|   144k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 27.3k, False: 117k]
  ------------------
  763|  27.3k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|  27.3k|                input.get_allocated_string().insert(0, "0x");
  765|  27.3k|            }
  766|  27.3k|            else {
  767|  27.3k|                input.get_allocated_string().insert(0, L"0x");
  768|  27.3k|            }
  769|  27.3k|        }
  770|       |
  771|   144k|        return input.get_allocated_string().c_str();
  772|   144k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweE14generic_strtodEPKwPPw:
  904|   144k|    {
  905|   144k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|   144k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|   144k|        }
  908|   144k|        else {
  909|   144k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|   144k|        }
  911|   144k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE19generic_wide_strtodEPKwPPw:
  850|   144k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|   144k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|   144k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (875:23): [Folded - Ignored]
  ------------------
  876|   144k|            return std::wcstof(str, str_end);
  877|   144k|        }
  878|   144k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (878:28): [Folded - Ignored]
  ------------------
  879|   144k|            return std::wcstod(str, str_end);
  880|   144k|        }
  881|   144k|        else if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (881:28): [Folded - Ignored]
  ------------------
  882|   144k|            return std::wcstold(str, str_end);
  883|   144k|        }
  884|   144k|#endif
  885|   144k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2072|  1.12M|{
 2073|  1.12M|    const auto argcount = args.size();
 2074|  1.12M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2074:9): [True: 230k, False: 895k]
  |  Branch (2074:60): [True: 230k, False: 0]
  ------------------
 2075|   230k|        auto arg = args.get(0);
 2076|   230k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   230k|    static_cast<    \
  |  |  929|   230k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2077|   230k|    }
 2078|       |
 2079|   895k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2079:9): [True: 0, False: 895k]
  ------------------
 2080|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2081|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|        return vscan_parse_format_string(format, handler);
 2084|      0|    }
 2085|       |
 2086|   895k|    SCN_UNLIKELY_ATTR
 2087|   895k|    {
 2088|   895k|        auto handler = format_handler<false, CharT>{
 2089|   895k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   895k|    static_cast<    \
  |  |  929|   895k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   895k|    static_cast<    \
  |  |  929|   895k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2090|   895k|        return vscan_parse_format_string(format, handler);
 2091|   895k|    }
 2092|   895k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|  2.11M|{
 1625|  2.11M|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 1.66M, False: 447k]
  ------------------
 1626|  1.66M|        return false;
 1627|  1.66M|    }
 1628|   447k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 447k, False: 0]
  |  Branch (1628:39): [True: 447k, False: 0]
  ------------------
 1629|  2.11M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|   345k|{
 1658|   345k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   345k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 345k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|   345k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|   345k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 345k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|   345k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|   345k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|   345k|    static_cast<    \
  |  |  929|   345k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|   345k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   345k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   345k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   345k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   345k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 18.6k, False: 327k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  18.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  18.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  18.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  18.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  18.6k|    }                                                  \
  |  |  |  | 3671|   345k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   327k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|   327k|    return it.position();
 1675|   345k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1902|   771k|    {
 1903|   771k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1721|  2.22M|    {
 1722|  2.22M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|  2.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.22M]
  |  |  ------------------
  ------------------
 1723|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1724|      0|        }
 1725|  2.22M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1852|   771k|    {
 1853|   771k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   771k|{
 2038|   771k|    const auto beg = handler.get_ctx().begin();
 2039|   771k|    detail::parse_format_string<false>(format, handler);
 2040|   771k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   771k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 62.0k, False: 709k]
  |  |  ------------------
  ------------------
 2041|  62.0k|        return unexpected(handler.error);
 2042|  62.0k|    }
 2043|   709k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   771k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2021|  5.27M|    {
 2022|  5.27M|        return ctx.get();
 2023|  5.27M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1856|  5.27M|    {
 1857|  5.27M|        return contiguous_ctx;
 1858|  5.27M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1906|  1.48M|    {
 1907|  1.48M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 1.48M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|  1.48M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   771k|{
 1681|   771k|    auto arg = ctx.arg(id);
 1682|   771k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   771k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 771k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   771k|    return arg;
 1686|   771k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1796|  2.22M|    {
 1797|  2.22M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  2.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.22M]
  |  |  ------------------
  ------------------
 1798|      0|            on_error("Invalid out-of-range argument ID");
 1799|      0|            return;
 1800|      0|        }
 1801|       |
 1802|  2.22M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|  2.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.22M]
  |  |  ------------------
  ------------------
 1803|      0|            return on_error("Argument with this ID has already been scanned");
 1804|      0|        }
 1805|       |
 1806|  2.22M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  2.22M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.22M, False: 0]
  |  |  ------------------
  ------------------
 1807|  2.22M|            visited_args_lower64 |= (1ull << id);
 1808|  2.22M|            return;
 1809|  2.22M|        }
 1810|       |
 1811|      0|        id -= 64;
 1812|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1813|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1781|  2.22M|    {
 1782|  2.22M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  2.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.22M]
  |  |  ------------------
  ------------------
 1783|      0|            on_error("Invalid out-of-range argument ID");
 1784|      0|            return false;
 1785|      0|        }
 1786|       |
 1787|  2.22M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  2.22M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.22M, False: 0]
  |  |  ------------------
  ------------------
 1788|  2.22M|            return (visited_args_lower64 >> id) & 1ull;
 1789|  2.22M|        }
 1790|       |
 1791|      0|        id -= 64;
 1792|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1793|  2.22M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1765|   372k|    {
 1766|   372k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|   372k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 372k, False: 0]
  |  |  ------------------
  ------------------
 1767|   372k|            error = err;
 1768|   372k|        }
 1769|   372k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1943|   771k|    {
 1944|   771k|        return parse_ctx.next_arg_id();
 1945|   771k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1984|   771k|    {
 1985|   771k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   771k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   771k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 771k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   771k|        auto specs = detail::format_specs{};
 1998|   771k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   771k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   771k|            arg.type()};
 2001|       |
 2002|   771k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   771k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 771k]
  |  Branch (2003:29): [True: 0, False: 771k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   771k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   771k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 771k]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|   771k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   771k|        on_visit_scan_arg(
 2014|   771k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   771k|                                           get_ctx().locale()},
 2016|   771k|            arg);
 2017|   771k|        return parse_ctx.begin();
 2018|   771k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1700|   771k|    {
 1701|   771k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1955|   771k|    {
 1956|   771k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 771k]
  |  Branch (1956:23): [True: 0, False: 771k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   771k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   771k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   771k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   771k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 62.0k, False: 709k]
  |  |  ------------------
  ------------------
 1963|  62.0k|            on_error(r.error());
 1964|  62.0k|        }
 1965|   709k|        else {
 1966|   709k|            get_ctx().advance_to(*r);
 1967|   709k|        }
 1968|   771k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1728|  2.22M|    {
 1729|  2.22M|        {
 1730|  2.22M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1730:45): [True: 0, False: 2.22M]
  ------------------
 1731|  2.22M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1731:35): [True: 0, False: 2.22M]
  ------------------
 1732|  2.22M|                                      ? std::numeric_limits<uint64_t>::max()
 1733|  2.22M|                                      : (1ull << args_count_lower64) - 1;
 1734|       |
 1735|  2.22M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1735:17): [True: 0, False: 2.22M]
  ------------------
 1736|      0|                return on_error("Argument list not exhausted");
 1737|      0|            }
 1738|  2.22M|        }
 1739|       |
 1740|  2.22M|        if (args_count < 64) {
  ------------------
  |  Branch (1740:13): [True: 2.22M, False: 0]
  ------------------
 1741|  2.22M|            return;
 1742|  2.22M|        }
 1743|       |
 1744|      0|        auto last_args_count = args_count - 64;
 1745|      0|        for (auto it = visited_args_upper.begin();
 1746|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1746:14): [True: 0, False: 0]
  ------------------
 1747|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1747:17): [True: 0, False: 0]
  ------------------
 1748|      0|                return on_error("Argument list not exhausted");
 1749|      0|            }
 1750|      0|            last_args_count -= 8;
 1751|      0|        }
 1752|       |
 1753|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1754|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1754:13): [True: 0, False: 0]
  ------------------
 1755|      0|            return on_error("Argument list not exhausted");
 1756|      0|        }
 1757|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1776|  2.22M|    {
 1777|  2.22M|        return error;
 1778|  2.22M|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1772|  6.67M|    {
 1773|  6.67M|        return static_cast<bool>(error);
 1774|  6.67M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
 1902|   895k|    {
 1903|   895k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
 1829|   895k|    {
 1830|   895k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   895k|{
 2038|   895k|    const auto beg = handler.get_ctx().begin();
 2039|   895k|    detail::parse_format_string<false>(format, handler);
 2040|   895k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   895k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 62.0k, False: 833k]
  |  |  ------------------
  ------------------
 2041|  62.0k|        return unexpected(handler.error);
 2042|  62.0k|    }
 2043|   833k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   895k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 2021|  6.14M|    {
 2022|  6.14M|        return ctx.get();
 2023|  6.14M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1833|  6.14M|    {
 1834|  6.14M|        return ctx;
 1835|  6.14M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1906|  1.72M|    {
 1907|  1.72M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 1.72M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|  1.72M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
 1680|   895k|{
 1681|   895k|    auto arg = ctx.arg(id);
 1682|   895k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   895k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 895k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   895k|    return arg;
 1686|   895k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1943|   895k|    {
 1944|   895k|        return parse_ctx.next_arg_id();
 1945|   895k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1984|   895k|    {
 1985|   895k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   895k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   895k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 895k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   895k|        auto specs = detail::format_specs{};
 1998|   895k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   895k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   895k|            arg.type()};
 2001|       |
 2002|   895k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   895k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 895k]
  |  Branch (2003:29): [True: 0, False: 895k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   895k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   895k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 895k]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|   895k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   895k|        on_visit_scan_arg(
 2014|   895k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   895k|                                           get_ctx().locale()},
 2016|   895k|            arg);
 2017|   895k|        return parse_ctx.begin();
 2018|   895k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
 1700|   895k|    {
 1701|   895k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1955|   895k|    {
 1956|   895k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 895k]
  |  Branch (1956:23): [True: 0, False: 895k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   895k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   895k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   895k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   895k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 62.0k, False: 833k]
  |  |  ------------------
  ------------------
 1963|  62.0k|            on_error(r.error());
 1964|  62.0k|        }
 1965|   833k|        else {
 1966|   833k|            get_ctx().advance_to(*r);
 1967|   833k|        }
 1968|   895k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|   988k|{
 2053|   988k|    const auto argcount = args.size();
 2054|   988k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 217k, False: 771k]
  |  Branch (2054:60): [True: 217k, False: 0]
  ------------------
 2055|   217k|        auto arg = args.get(0);
 2056|   217k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   217k|    static_cast<    \
  |  |  929|   217k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|   217k|    }
 2058|       |
 2059|   771k|    auto handler = format_handler<true, CharT>{
 2060|   771k|        ranges::subrange<const CharT*>{source.data(),
 2061|   771k|                                       source.data() + source.size()},
 2062|   771k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   771k|    static_cast<    \
  |  |  929|   771k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   771k|    static_cast<    \
  |  |  929|   771k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   771k|    return vscan_parse_format_string(format, handler);
 2064|   988k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|   325k|{
 1638|   325k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   325k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 325k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|   325k|    auto reader =
 1644|   325k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|   325k|            ranges::subrange<const CharT*>{source.data(),
 1646|   325k|                                           source.data() + source.size()},
 1647|   325k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|   325k|    static_cast<    \
  |  |  929|   325k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|   325k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   325k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   325k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   325k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   325k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 18.6k, False: 307k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  18.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  18.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  18.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  18.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  18.6k|    }                                                  \
  |  |  |  | 3671|   325k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   307k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|   307k|    return ranges::distance(source.data(), it);
 1650|   325k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|   342k|{
 2053|   342k|    const auto argcount = args.size();
 2054|   342k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 63.1k, False: 278k]
  |  Branch (2054:60): [True: 63.1k, False: 0]
  ------------------
 2055|  63.1k|        auto arg = args.get(0);
 2056|  63.1k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  63.1k|    static_cast<    \
  |  |  929|  63.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|  63.1k|    }
 2058|       |
 2059|   278k|    auto handler = format_handler<true, CharT>{
 2060|   278k|        ranges::subrange<const CharT*>{source.data(),
 2061|   278k|                                       source.data() + source.size()},
 2062|   278k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   278k|    static_cast<    \
  |  |  929|   278k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   278k|    static_cast<    \
  |  |  929|   278k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   278k|    return vscan_parse_format_string(format, handler);
 2064|   342k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   683k|{
 1625|   683k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 557k, False: 126k]
  ------------------
 1626|   557k|        return false;
 1627|   557k|    }
 1628|   126k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 126k, False: 0]
  |  Branch (1628:39): [True: 126k, False: 0]
  ------------------
 1629|   683k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|  94.7k|{
 1638|  94.7k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  94.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 94.7k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|  94.7k|    auto reader =
 1644|  94.7k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|  94.7k|            ranges::subrange<const CharT*>{source.data(),
 1646|  94.7k|                                           source.data() + source.size()},
 1647|  94.7k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|  94.7k|    static_cast<    \
  |  |  929|  94.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|  94.7k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|  94.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  94.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  94.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  94.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 37.2k, False: 57.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  37.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  37.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  37.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  37.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  37.2k|    }                                                  \
  |  |  |  | 3671|  94.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  57.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|  57.5k|    return ranges::distance(source.data(), it);
 1650|  94.7k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1902|   278k|    {
 1903|   278k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1852|   278k|    {
 1853|   278k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   278k|{
 2038|   278k|    const auto beg = handler.get_ctx().begin();
 2039|   278k|    detail::parse_format_string<false>(format, handler);
 2040|   278k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   278k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 124k, False: 154k]
  |  |  ------------------
  ------------------
 2041|   124k|        return unexpected(handler.error);
 2042|   124k|    }
 2043|   154k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   278k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2021|  1.70M|    {
 2022|  1.70M|        return ctx.get();
 2023|  1.70M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1856|  1.70M|    {
 1857|  1.70M|        return contiguous_ctx;
 1858|  1.70M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1906|   433k|    {
 1907|   433k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 433k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|   433k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   278k|{
 1681|   278k|    auto arg = ctx.arg(id);
 1682|   278k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   278k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 278k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   278k|    return arg;
 1686|   278k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1943|   278k|    {
 1944|   278k|        return parse_ctx.next_arg_id();
 1945|   278k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1984|   278k|    {
 1985|   278k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   278k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   278k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 278k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   278k|        auto specs = detail::format_specs{};
 1998|   278k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   278k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   278k|            arg.type()};
 2001|       |
 2002|   278k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   278k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 278k]
  |  Branch (2003:29): [True: 0, False: 278k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   278k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   278k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 278k]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|   278k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   278k|        on_visit_scan_arg(
 2014|   278k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   278k|                                           get_ctx().locale()},
 2016|   278k|            arg);
 2017|   278k|        return parse_ctx.begin();
 2018|   278k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1700|   278k|    {
 1701|   278k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1955|   278k|    {
 1956|   278k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 278k]
  |  Branch (1956:23): [True: 0, False: 278k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   278k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   278k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   278k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   278k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 124k, False: 154k]
  |  |  ------------------
  ------------------
 1963|   124k|            on_error(r.error());
 1964|   124k|        }
 1965|   154k|        else {
 1966|   154k|            get_ctx().advance_to(*r);
 1967|   154k|        }
 1968|   278k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2072|   341k|{
 2073|   341k|    const auto argcount = args.size();
 2074|   341k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2074:9): [True: 63.0k, False: 278k]
  |  Branch (2074:60): [True: 63.0k, False: 0]
  ------------------
 2075|  63.0k|        auto arg = args.get(0);
 2076|  63.0k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  63.0k|    static_cast<    \
  |  |  929|  63.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2077|  63.0k|    }
 2078|       |
 2079|   278k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2079:9): [True: 0, False: 278k]
  ------------------
 2080|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2081|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|        return vscan_parse_format_string(format, handler);
 2084|      0|    }
 2085|       |
 2086|   278k|    SCN_UNLIKELY_ATTR
 2087|   278k|    {
 2088|   278k|        auto handler = format_handler<false, CharT>{
 2089|   278k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   278k|    static_cast<    \
  |  |  929|   278k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   278k|    static_cast<    \
  |  |  929|   278k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2090|   278k|        return vscan_parse_format_string(format, handler);
 2091|   278k|    }
 2092|   278k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|  94.6k|{
 1658|  94.6k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  94.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 94.6k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|  94.6k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|  94.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 94.6k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|  94.6k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|  94.6k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|  94.6k|    static_cast<    \
  |  |  929|  94.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|  94.6k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|  94.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  94.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  94.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  94.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 37.2k, False: 57.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  37.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  37.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  37.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  37.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  37.2k|    }                                                  \
  |  |  |  | 3671|  94.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  57.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|  57.3k|    return it.position();
 1675|  94.6k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
 1902|   278k|    {
 1903|   278k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
 1829|   278k|    {
 1830|   278k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   278k|{
 2038|   278k|    const auto beg = handler.get_ctx().begin();
 2039|   278k|    detail::parse_format_string<false>(format, handler);
 2040|   278k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   278k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 124k, False: 154k]
  |  |  ------------------
  ------------------
 2041|   124k|        return unexpected(handler.error);
 2042|   124k|    }
 2043|   154k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   278k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 2021|  1.70M|    {
 2022|  1.70M|        return ctx.get();
 2023|  1.70M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1833|  1.70M|    {
 1834|  1.70M|        return ctx;
 1835|  1.70M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1906|   433k|    {
 1907|   433k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 433k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|   433k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
 1680|   278k|{
 1681|   278k|    auto arg = ctx.arg(id);
 1682|   278k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   278k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 278k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   278k|    return arg;
 1686|   278k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1943|   278k|    {
 1944|   278k|        return parse_ctx.next_arg_id();
 1945|   278k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1984|   278k|    {
 1985|   278k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   278k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   278k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 278k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   278k|        auto specs = detail::format_specs{};
 1998|   278k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   278k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   278k|            arg.type()};
 2001|       |
 2002|   278k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   278k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 278k]
  |  Branch (2003:29): [True: 0, False: 278k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   278k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   278k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 278k]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|   278k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   278k|        on_visit_scan_arg(
 2014|   278k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   278k|                                           get_ctx().locale()},
 2016|   278k|            arg);
 2017|   278k|        return parse_ctx.begin();
 2018|   278k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
 1700|   278k|    {
 1701|   278k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1955|   278k|    {
 1956|   278k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 278k]
  |  Branch (1956:23): [True: 0, False: 278k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   278k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   278k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   278k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   278k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 124k, False: 154k]
  |  |  ------------------
  ------------------
 1963|   124k|            on_error(r.error());
 1964|   124k|        }
 1965|   154k|        else {
 1966|   154k|            get_ctx().advance_to(*r);
 1967|   154k|        }
 1968|   278k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|   108k|{
 2099|   108k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   108k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|   108k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|   115k|{
 2099|   115k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   115k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|   115k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  31.5k|{
 2099|  31.5k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  31.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  31.5k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  31.5k|{
 2099|  31.5k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  31.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  31.5k|}

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1362|  2.06k|{
 1363|  2.06k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1364|       |
 1365|  2.06k|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1365:19): [Folded - Ignored]
  ------------------
 1366|  2.06k|        if constexpr (sizeof(DestCharT) == 2) {
  ------------------
  |  Branch (1366:23): [Folded - Ignored]
  ------------------
 1367|  2.06k|            std::u32string tmp;
 1368|  2.06k|            transcode_to_string_impl_to32(src, tmp);
 1369|  2.06k|            return transcode_to_string_impl_32to16<false>(
 1370|  2.06k|                std::u32string_view{tmp}, dest);
 1371|  2.06k|        }
 1372|  2.06k|        else if constexpr (sizeof(DestCharT) == 4) {
  ------------------
  |  Branch (1372:28): [Folded - Ignored]
  ------------------
 1373|  2.06k|            return transcode_to_string_impl_to32(src, dest);
 1374|  2.06k|        }
 1375|  2.06k|    }
 1376|      0|    else if constexpr (sizeof(SourceCharT) == 2) {
 1377|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1378|      0|            std::u32string tmp;
 1379|      0|            transcode_to_string_impl_to32(src, tmp);
 1380|      0|            return transcode_to_string_impl_32to8<false>(
 1381|      0|                std::u32string_view{tmp}, dest);
 1382|      0|        }
 1383|      0|        else if constexpr (sizeof(DestCharT) == 4) {
 1384|      0|            return trasncode_to_string_impl_to32(src, dest);
 1385|      0|        }
 1386|      0|    }
 1387|      0|    else if constexpr (sizeof(SourceCharT) == 4) {
 1388|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1389|      0|            return transcode_to_string_impl_32to8<false>(src, dest);
 1390|      0|        }
 1391|      0|        else if constexpr (sizeof(DestCharT) == 2) {
 1392|      0|            return transcode_to_string_impl_32to16<false>(src, dest);
 1393|      0|        }
 1394|      0|    }
 1395|       |
 1396|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1397|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1398|      0|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1255|  2.06k|{
 1256|  2.06k|    static_assert(sizeof(DestCharT) == 4);
 1257|       |
 1258|  2.06k|    auto it = src.begin();
 1259|   594k|    while (it != src.end()) {
  ------------------
  |  Branch (1259:12): [True: 592k, False: 2.06k]
  ------------------
 1260|   592k|        auto res = get_next_code_point(
 1261|   592k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1262|   592k|                                                                 src.end()));
 1263|   592k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|   592k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.90k, False: 590k]
  |  |  ------------------
  ------------------
 1264|  1.90k|            dest.push_back(DestCharT{0xfffd});
 1265|  1.90k|        }
 1266|   590k|        else {
 1267|   590k|            dest.push_back(res.value);
 1268|   590k|        }
 1269|   592k|        it = detail::make_string_view_iterator(src, res.iterator);
 1270|   592k|    }
 1271|  2.06k|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|   922k|{
 1169|   922k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   922k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   922k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|   922k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|   922k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   922k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 23.1k, False: 898k]
  |  |  ------------------
  ------------------
 1173|  23.1k|        return {get_start_for_next_code_point(input),
 1174|  23.1k|                detail::invalid_code_point};
 1175|  23.1k|    }
 1176|   898k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|   898k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.45k, False: 895k]
  |  |  ------------------
  ------------------
 1177|  3.45k|        return {input.end(), detail::invalid_code_point};
 1178|  3.45k|    }
 1179|       |
 1180|   895k|    return {input.begin() + len,
 1181|   895k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|   898k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  23.1k|{
 1155|  23.1k|    auto it = input.begin();
 1156|   202k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 196k, False: 6.13k]
  ------------------
 1157|   196k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 17.0k, False: 179k]
  ------------------
 1158|  17.0k|            break;
 1159|  17.0k|        }
 1160|   196k|    }
 1161|  23.1k|    return it;
 1162|  23.1k|}
_ZN3scn2v34impl11parse_errorC2ENS2_4codeE:
  808|  24.0M|    {
  809|  24.0M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  24.0M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  24.0M|    }
_ZN3scn2v34impleqENS1_11parse_errorES2_:
  822|  9.04M|    {
  823|  9.04M|        return a.m_code == b.m_code;
  824|  9.04M|    }
_ZN3scn2v34impl16clocale_restorerC2Ei:
 1727|  1.25M|    {
 1728|  1.25M|        const auto loc = std::setlocale(cat, nullptr);
 1729|  1.25M|        std::strcpy(m_locbuf, loc);
 1730|  1.25M|    }
_ZN3scn2v34impl16clocale_restorerD2Ev:
 1732|  1.25M|    {
 1733|       |        // Restore locale to what it was before
 1734|  1.25M|        std::setlocale(m_category, m_locbuf);
 1735|  1.25M|    }
_ZN3scn2v34impl25set_clocale_classic_guardC2Ei:
 1756|  1.25M|    {
 1757|  1.25M|        std::setlocale(cat, "C");
 1758|  1.25M|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2935|  2.22M|    {
 2936|  2.22M|        return m_msg == nullptr;
 2937|  2.22M|    }
_ZN3scn2v34impl17float_reader_baseC2Ej:
 3644|  2.19M|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|  17.6M|{
  458|  17.6M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  17.6M|        static_cast<unsigned char>(ch))];
  460|  17.6M|}
_ZN3scn2v34impl13is_ascii_charEc:
  468|  41.7k|{
  469|  41.7k|    return static_cast<unsigned char>(ch) <= 127;
  470|  41.7k|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|  4.04M|{
  539|  4.04M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  4.04M|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|  10.3M|{
  784|  10.3M|    return e != eof_error::good;
  785|  10.3M|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  40.3k|{
  798|  40.3k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|  40.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  40.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  40.3k|    return scan_error{scan_error::end_of_range, "EOF"};
  800|  40.3k|}
_ZN3scn2v34impl20make_eof_parse_errorENS1_9eof_errorE:
  844|   186k|{
  845|   186k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|   186k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   186k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|   186k|    return parse_error::eof;
  847|   186k|}
_ZN3scn2v34impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|  3.21M|{
  854|  3.21M|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 3.21M]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|  3.21M|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 68.6k, False: 3.14M]
  ------------------
  859|  68.6k|        return scan_error{scan_error::end_of_range, "EOF"};
  860|  68.6k|    }
  861|       |
  862|  3.14M|    return scan_error{code, msg};
  863|  3.21M|}
_ZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  3.21M|{
  868|  3.21M|    return [code, msg](parse_error err) {
  869|  3.21M|        return make_scan_error_from_parse_error(err, code, msg);
  870|  3.21M|    };
  871|  3.21M|}
_ZN3scn2v34impl11is_cp_spaceEDi:
 1199|  3.95M|{
 1200|       |    // Pattern_White_Space property
 1201|  3.95M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (1201:13): [True: 3.76M, False: 185k]
  |  Branch (1201:27): [True: 989k, False: 2.77M]
  ------------------
 1202|  3.95M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (1202:12): [True: 55.1k, False: 2.90M]
  ------------------
 1203|  3.95M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (1203:12): [True: 60.1k, False: 2.84M]
  ------------------
 1204|  3.95M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (1204:12): [True: 3.45k, False: 2.84M]
  ------------------
 1205|  3.95M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (1205:12): [True: 20.5k, False: 2.82M]
  ------------------
 1206|  3.95M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (1206:12): [True: 481k, False: 2.34M]
  ------------------
 1207|  3.95M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (1207:12): [True: 77, False: 2.34M]
  ------------------
 1208|  3.95M|}
_ZN3scn2v34impl17fast_streq_nocaseEPKcS3_m:
 2219|  2.84M|{
 2220|  2.84M|    unsigned char running_diff{0};
 2221|  10.7M|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2221:24): [True: 7.85M, False: 2.84M]
  ------------------
 2222|  7.85M|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2223|  7.85M|    }
 2224|  2.84M|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2224:12): [True: 90.1k, False: 2.75M]
  |  Branch (2224:33): [True: 15.6k, False: 2.74M]
  ------------------
 2225|  2.84M|}
_ZN3scn2v34impl11char_to_intEc:
 3122|  19.2M|{
 3123|  19.2M|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3124|  19.2M|}
_ZN3scn2v34impl11char_to_intEw:
 3126|  1.76M|{
 3127|  1.76M|#if WCHAR_MIN < 0
 3128|  1.76M|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3128:9): [True: 1.75M, False: 11.2k]
  |  Branch (3128:20): [True: 1.06M, False: 687k]
  ------------------
 3129|       |#else
 3130|       |    if (ch <= 255) {
 3131|       |#endif
 3132|  1.06M|        return char_to_int(static_cast<char>(ch));
 3133|  1.06M|    }
 3134|   698k|    return 255;
 3135|  1.76M|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6007|  1.85M|{
 6008|  1.85M|    if (specs.width != 0) {
  ------------------
  |  Branch (6008:9): [True: 0, False: 1.85M]
  ------------------
 6009|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6009:13): [True: 0, False: 0]
  ------------------
 6010|      0|            return {scan_error::invalid_scanned_value,
 6011|      0|                    "Scanned value too narrow, width did not exceed what "
 6012|      0|                    "was specified in the format string"};
 6013|      0|        }
 6014|      0|    }
 6015|  1.85M|    if (specs.precision != 0) {
  ------------------
  |  Branch (6015:9): [True: 0, False: 1.85M]
  ------------------
 6016|      0|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6016:13): [True: 0, False: 0]
  ------------------
 6017|      0|            return {scan_error::invalid_scanned_value,
 6018|      0|                    "Scanned value too wide, width exceeded the specified "
 6019|      0|                    "precision"};
 6020|      0|        }
 6021|      0|    }
 6022|  1.85M|    return {};
 6023|  1.85M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  3.20M|    {
  304|  3.20M|        ranges::advance(x, n);
  305|  3.20M|        return x;
  306|  3.20M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  3.20M|    {
  268|  3.20M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  3.20M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  3.20M|    {
  151|  3.20M|        i += n;
  152|  3.20M|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  3.78M|    {
  108|  3.78M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  3.78M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  3.78M|    {
   87|  3.78M|        return s - i;
   88|  3.78M|    }
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  1.13M|    {
  304|  1.13M|        ranges::advance(x, n);
  305|  1.13M|        return x;
  306|  1.13M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  1.13M|    {
  268|  1.13M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.13M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  1.13M|    {
  151|  1.13M|        i += n;
  152|  1.13M|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   290k|    {
  108|   290k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   290k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   290k|    {
   87|   290k|        return s - i;
   88|   290k|    }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|  1.24M|{
  981|  1.24M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|  1.24M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|  1.24M|        return true;
  984|  1.24M|    }
  985|  1.24M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (985:24): [Folded - Ignored]
  ------------------
  986|  1.24M|                           ranges::const_iterator_t<Range>,
  987|  1.24M|                           typename detail::basic_scan_buffer<
  988|  1.24M|                               detail::char_t<Range>>::forward_iterator>) {
  989|  1.24M|        auto beg = r.begin();
  990|  1.24M|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 1.24M, False: 0]
  ------------------
  991|  1.24M|            return false;
  992|  1.24M|        }
  993|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (993:23): [Folded - Ignored]
  ------------------
  994|      0|            return beg.contiguous_segment().end() ==
  995|      0|                   ranges::end(r).contiguous_segment().end();
  996|      0|        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|      0|    }
 1005|  1.24M|    else {
 1006|  1.24M|        return false;
 1007|  1.24M|    }
 1008|  1.24M|}
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  31.4M|    {
  763|  31.4M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  31.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  31.4M|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1856|  3.26M|{
 1857|  3.26M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  3.26M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.26M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  3.26M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  3.26M|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  3.26M|        if (sz < count) {
 1862|  3.26M|            return unexpected(eof_error::eof);
 1863|  3.26M|        }
 1864|       |
 1865|  3.26M|        return ranges::next(range.begin(), count);
 1866|  3.26M|    }
 1867|  3.26M|    else {
 1868|  3.26M|        auto it = range.begin();
 1869|  3.26M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 2.01M, False: 1.25M]
  ------------------
 1870|  2.01M|            return ranges::next(it, count);
 1871|  2.01M|        }
 1872|       |
 1873|  4.98M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 3.76M, False: 1.21M]
  ------------------
 1874|  3.76M|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 35.1k, False: 3.73M]
  ------------------
 1875|  35.1k|                return unexpected(eof_error::eof);
 1876|  35.1k|            }
 1877|  3.76M|        }
 1878|       |
 1879|  1.21M|        return it;
 1880|  1.25M|    }
 1881|  3.26M|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1094|  3.26M|{
 1095|  3.26M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|  3.26M|        return r.size();
 1097|  3.26M|    }
 1098|  3.26M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|  3.26M|                           ranges::const_iterator_t<Range>,
 1100|  3.26M|                           typename detail::basic_scan_buffer<
 1101|  3.26M|                               detail::char_t<Range>>::forward_iterator>) {
 1102|  3.26M|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1102:23): [Folded - Ignored]
  ------------------
 1103|  3.26M|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|  3.26M|        }
 1105|  3.26M|        else {
 1106|  3.26M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1106:17): [True: 3.26M, False: 0]
  ------------------
 1107|  3.26M|                return static_cast<size_t>(
 1108|  3.26M|                    r.begin().parent()->chars_available() -
 1109|  3.26M|                    r.begin().position());
 1110|  3.26M|            }
 1111|      0|            return r.begin().contiguous_segment().size();
 1112|  3.26M|        }
 1113|  3.26M|    }
 1114|  3.26M|    else {
 1115|  3.26M|        return 0;
 1116|  3.26M|    }
 1117|  3.26M|}
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  3.00M|    {
  754|  3.00M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  743|  15.7M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  15.7M|              cvref<T> obj = *get<T>(fn);
  745|  15.7M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  15.7M|                  obj(static_cast<decltype(args)>(args)...);
  747|  15.7M|              }
  748|  15.7M|              else {
  749|  15.7M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  15.7M|              }
  751|  15.7M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  15.7M|    {
  684|  15.7M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  15.7M|            return static_cast<T*>(s.m_cp);
  686|  15.7M|        }
  687|  15.7M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  15.7M|            return static_cast<T*>(s.m_p);
  689|  15.7M|        }
  690|  15.7M|        else {
  691|  15.7M|            return reinterpret_cast<T*>(s.m_fp);
  692|  15.7M|        }
  693|  15.7M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  661|  3.00M|        {
  662|  3.00M|        }
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|  6.88M|    {
  763|  6.88M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  6.88M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  6.88M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  1.84M|    {
  754|  1.84M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  743|  3.25M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.25M|              cvref<T> obj = *get<T>(fn);
  745|  3.25M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  3.25M|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.25M|              }
  748|  3.25M|              else {
  749|  3.25M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.25M|              }
  751|  3.25M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  3.25M|    {
  684|  3.25M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  3.25M|            return static_cast<T*>(s.m_cp);
  686|  3.25M|        }
  687|  3.25M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  3.25M|            return static_cast<T*>(s.m_p);
  689|  3.25M|        }
  690|  3.25M|        else {
  691|  3.25M|            return reinterpret_cast<T*>(s.m_fp);
  692|  3.25M|        }
  693|  3.25M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  661|  1.84M|        {
  662|  1.84M|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6036|   895k|    {
 6037|   895k|        const bool need_skipped_width =
 6038|   895k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 895k]
  |  Branch (6038:33): [True: 0, False: 895k]
  ------------------
 6039|   895k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|   895k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 895k]
  ------------------
 6043|   895k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 895k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|   895k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 895k, False: 0]
  |  Branch (6047:56): [True: 895k, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|   895k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 895k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  1.77M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|   895k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   895k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   895k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   895k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 13.7k, False: 881k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  13.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  13.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  13.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  13.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  13.7k|    }                                                  \
  |  |  |  | 3671|   895k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   881k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  1.77M|                            make_eof_scan_error));
 6058|       |
 6059|  1.77M|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 881k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|   881k|            return result_type{it, 0};
 6067|  1.77M|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|   895k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|  2.39M|{
 1976|  2.39M|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  2.39M|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|  2.39M|{
 1957|  2.39M|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  2.39M|        return std::find_if(range.begin(), range.end(), pred);
 1959|  2.39M|    }
 1960|  2.39M|    else {
 1961|  2.39M|        auto first = range.begin();
 1962|  12.5M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 12.5M, False: 25.5k]
  ------------------
 1963|  12.5M|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 2.36M, False: 10.1M]
  ------------------
 1964|  2.36M|                return first;
 1965|  2.36M|            }
 1966|  12.5M|        }
 1967|  25.5k|        return first;
 1968|  2.39M|    }
 1969|  2.39M|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  2.13M|    {
  108|  2.13M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  2.13M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  2.13M|    {
   94|  2.13M|        iter_difference_t<I> counter{0};
   95|  20.4M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 18.2M, False: 2.13M]
  ------------------
   96|  18.2M|            ++i;
   97|  18.2M|            ++counter;
   98|  18.2M|        }
   99|  2.13M|        return counter;
  100|  2.13M|    }
_ZZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|  3.21M|    return [code, msg](parse_error err) {
  869|  3.21M|        return make_scan_error_from_parse_error(err, code, msg);
  870|  3.21M|    };
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1779|   467k|    {
 1780|   467k|        auto stdloc = loc.get<std::locale>();
 1781|   467k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|   467k|        grouping = numpunct.grouping();
 1783|   467k|        thousands_sep =
 1784|   467k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 467k]
  ------------------
 1785|   467k|        decimal_point = numpunct.decimal_point();
 1786|   467k|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1716|   467k|{
 1717|   467k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 467k, False: 0]
  ------------------
 1718|   467k|        return std::use_facet<Facet>(stdloc);
 1719|   467k|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|   467k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1845|  3.50M|{
 1846|  3.50M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.50M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.4k, False: 3.48M]
  |  |  ------------------
  ------------------
 1847|  18.4k|        return unexpected(e);
 1848|  18.4k|    }
 1849|       |
 1850|  3.48M|    return ranges::next(range.begin());
 1851|  3.50M|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  5.09M|{
  950|  5.09M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  5.09M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 36.8k, False: 5.05M]
  |  |  ------------------
  ------------------
  951|  36.8k|        return eof_error::eof;
  952|  36.8k|    }
  953|  5.05M|    return eof_error::good;
  954|  5.09M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  7.18M|{
  944|  7.18M|    return is_range_eof(r.begin(), r.end());
  945|  7.18M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  7.18M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  7.18M|    {
  937|  7.18M|        return begin == end;
  938|  7.18M|    }
  939|  7.18M|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|  3.48M|    {
  296|  3.48M|        ++x;
  297|  3.48M|        return x;
  298|  3.48M|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3140|  1.33M|{
 3141|  1.33M|    auto r = read_one_of_code_unit(range, "+-");
 3142|  1.33M|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 1.02M, False: 307k]
  ------------------
 3143|  1.02M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 1.02M, False: 336]
  ------------------
 3144|  1.02M|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  1.02M|        }
 3146|    336|        return unexpected(eof_error::eof);
 3147|  1.02M|    }
 3148|       |
 3149|   307k|    auto& it = *r;
 3150|   307k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 129k, False: 178k]
  ------------------
 3151|   129k|        return std::pair{it, sign_type::minus_sign};
 3152|   129k|    }
 3153|   178k|    return std::pair{it, sign_type::plus_sign};
 3154|   307k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2271|  2.34M|{
 2272|  2.34M|    auto it = read_code_unit(range);
 2273|  2.34M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.34M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.7k, False: 2.33M]
  |  |  ------------------
  ------------------
 2274|  10.7k|        return unexpected(make_eof_parse_error(it.error()));
 2275|  10.7k|    }
 2276|       |
 2277|  4.41M|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 4.41M, False: 1.90M]
  ------------------
 2278|  4.41M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 422k, False: 3.99M]
  ------------------
 2279|   422k|            return *it;
 2280|   422k|        }
 2281|  4.41M|    }
 2282|       |
 2283|  1.90M|    return unexpected(parse_error::error);
 2284|  2.33M|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2230|  3.26M|{
 2231|  3.26M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  3.26M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  3.26M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  3.26M|        if (range.size() < str.size()) {
 2236|  3.26M|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  3.26M|        }
 2238|  3.26M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  3.26M|            return unexpected(parse_error::error);
 2240|  3.26M|        }
 2241|  3.26M|        return ranges::next(range.begin(), str.size());
 2242|  3.26M|    }
 2243|  3.26M|    else {
 2244|  3.26M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  3.26M|            if (ch < 'A' || ch > 'Z') {
 2246|  3.26M|                return ch;
 2247|  3.26M|            }
 2248|  3.26M|            return static_cast<char_type>(ch +
 2249|  3.26M|                                          static_cast<char_type>('a' - 'A'));
 2250|  3.26M|        };
 2251|       |
 2252|  3.26M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  3.26M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  3.26M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  3.26M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.26M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 35.1k, False: 3.23M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  35.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  35.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  35.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  35.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  35.1k|    }                                                  \
  |  |  |  | 3671|  3.26M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.23M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  3.23M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  3.23M|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  3.23M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  3.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.12M, False: 108k]
  |  |  ------------------
  ------------------
 2257|  3.23M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  3.23M|                    return ascii_tolower(a) ==
 2259|  3.23M|                           static_cast<detail::char_t<Range>>(b);
 2260|  3.23M|                }))) {
 2261|  3.12M|            return unexpected(parse_error::error);
 2262|  3.12M|        }
 2263|       |
 2264|   108k|        return it;
 2265|  3.23M|    }
 2266|  3.26M|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlcE_clEc:
 2244|  3.73M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  3.73M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 3.38M, False: 355k]
  |  Branch (2245:29): [True: 300k, False: 54.8k]
  ------------------
 2246|  3.68M|                return ch;
 2247|  3.68M|            }
 2248|  54.8k|            return static_cast<char_type>(ch +
 2249|  54.8k|                                          static_cast<char_type>('a' - 'A'));
 2250|  3.73M|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2145|  1.16M|{
 2146|  1.16M|    auto it = read_code_unit(range);
 2147|  1.16M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.16M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.73k, False: 1.15M]
  |  |  ------------------
  ------------------
 2148|  7.73k|        return unexpected(make_eof_parse_error(it.error()));
 2149|  7.73k|    }
 2150|       |
 2151|  1.15M|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  1.15M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 946k, False: 212k]
  |  |  ------------------
  ------------------
 2152|  1.15M|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|   946k|        return unexpected(parse_error::error);
 2154|   946k|    }
 2155|       |
 2156|   212k|    return *it;
 2157|  1.15M|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1995|  2.38M|{
 1996|  2.38M|    auto it = read_while_code_unit(range, pred);
 1997|  2.38M|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 970k, False: 1.41M]
  ------------------
 1998|   970k|        return unexpected(parse_error::error);
 1999|   970k|    }
 2000|  1.41M|    return it;
 2001|  2.38M|}
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1620|  1.10M|    {
 1621|  1.10M|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  1.10M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  1.10M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  1.10M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  1.10M|            m_storage.reset();
 1627|  1.10M|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  1.10M|        }
 1629|  1.10M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  1.10M|                                          std::basic_string<CharT>>) {
 1631|  1.10M|            m_storage.emplace(SCN_FWD(range));
 1632|  1.10M|            m_view = string_view_type{*m_storage};
 1633|  1.10M|        }
 1634|  1.10M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|  1.10M|                                          typename detail::basic_scan_buffer<
 1636|  1.10M|                                              value_t>::forward_iterator> &&
 1637|  1.10M|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|  1.10M|            auto beg_seg = range.begin().contiguous_segment();
 1639|  1.10M|            auto end_seg = range.end().contiguous_segment();
 1640|  1.10M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|  1.10M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 150k, False: 956k]
  |  |  ------------------
  ------------------
 1641|  1.10M|                             detail::to_address(end_seg.end()))) {
 1642|   150k|                auto& str = m_storage.emplace();
 1643|   150k|                str.reserve(range.end().position() - range.begin().position());
 1644|   150k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|   150k|                m_view = string_view_type{str};
 1646|   150k|                return;
 1647|   150k|            }
 1648|       |
 1649|   956k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   956k|                                                            end_seg.data());
 1651|   956k|            m_storage.reset();
 1652|   956k|        }
 1653|  1.10M|        else {
 1654|  1.10M|            auto& str = m_storage.emplace();
 1655|  1.10M|            if constexpr (ranges::sized_range<Range>) {
 1656|  1.10M|                str.reserve(range.size());
 1657|  1.10M|            }
 1658|  1.10M|            if constexpr (ranges::common_range<Range>) {
 1659|  1.10M|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  1.10M|                          std::back_inserter(str));
 1661|  1.10M|            }
 1662|  1.10M|            else {
 1663|  1.10M|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  1.10M|                     ++it) {
 1665|  1.10M|                    str.push_back(*it);
 1666|  1.10M|                }
 1667|  1.10M|            }
 1668|  1.10M|            m_view = string_view_type{str};
 1669|  1.10M|        }
 1670|  1.10M|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1581|  7.63M|    {
 1582|  7.63M|        return m_view;
 1583|  7.63M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1571|  4.60M|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6078|   822k|    {
 6079|   822k|        const bool need_skipped_width =
 6080|   822k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 822k]
  |  Branch (6080:33): [True: 0, False: 822k]
  ------------------
 6081|   822k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|   822k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 822k]
  ------------------
 6084|   822k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 822k]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|   822k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 822k, False: 0]
  ------------------
 6093|   822k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 0, False: 822k]
  ------------------
 6094|   822k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 0]
  ------------------
 6096|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|   822k|        return result_type{rng.begin(), 0};
 6118|   822k|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|  1.61M|{
 1846|  1.61M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.61M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.75k, False: 1.61M]
  |  |  ------------------
  ------------------
 1847|  4.75k|        return unexpected(e);
 1848|  4.75k|    }
 1849|       |
 1850|  1.61M|    return ranges::next(range.begin());
 1851|  1.61M|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|  3.03M|{
  950|  3.03M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  3.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.8k, False: 3.01M]
  |  |  ------------------
  ------------------
  951|  20.8k|        return eof_error::eof;
  952|  20.8k|    }
  953|  3.01M|    return eof_error::good;
  954|  3.03M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|  3.03M|{
  944|  3.03M|    return is_range_eof(r.begin(), r.end());
  945|  3.03M|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|  3.03M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  3.03M|    {
  937|  3.03M|        return begin == end;
  938|  3.03M|    }
  939|  3.03M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  1.61M|    {
  296|  1.61M|        ++x;
  297|  1.61M|        return x;
  298|  1.61M|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|  1.11M|{
 3141|  1.11M|    auto r = read_one_of_code_unit(range, "+-");
 3142|  1.11M|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 844k, False: 266k]
  ------------------
 3143|   844k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 844k, False: 108]
  ------------------
 3144|   844k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|   844k|        }
 3146|    108|        return unexpected(eof_error::eof);
 3147|   844k|    }
 3148|       |
 3149|   266k|    auto& it = *r;
 3150|   266k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 121k, False: 144k]
  ------------------
 3151|   121k|        return std::pair{it, sign_type::minus_sign};
 3152|   121k|    }
 3153|   144k|    return std::pair{it, sign_type::plus_sign};
 3154|   266k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|  1.28M|{
 2272|  1.28M|    auto it = read_code_unit(range);
 2273|  1.28M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.28M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.04k, False: 1.28M]
  |  |  ------------------
  ------------------
 2274|  2.04k|        return unexpected(make_eof_parse_error(it.error()));
 2275|  2.04k|    }
 2276|       |
 2277|  2.41M|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 2.41M, False: 991k]
  ------------------
 2278|  2.41M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 295k, False: 2.11M]
  ------------------
 2279|   295k|            return *it;
 2280|   295k|        }
 2281|  2.41M|    }
 2282|       |
 2283|   991k|    return unexpected(parse_error::error);
 2284|  1.28M|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  2.88M|{
 2231|  2.88M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  2.88M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  2.88M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  2.88M|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2235:13): [True: 35.7k, False: 2.84M]
  ------------------
 2236|  35.7k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  35.7k|        }
 2238|  2.84M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2238:13): [True: 2.74M, False: 105k]
  ------------------
 2239|  2.74M|            return unexpected(parse_error::error);
 2240|  2.74M|        }
 2241|   105k|        return ranges::next(range.begin(), str.size());
 2242|  2.84M|    }
 2243|  2.88M|    else {
 2244|  2.88M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  2.88M|            if (ch < 'A' || ch > 'Z') {
 2246|  2.88M|                return ch;
 2247|  2.88M|            }
 2248|  2.88M|            return static_cast<char_type>(ch +
 2249|  2.88M|                                          static_cast<char_type>('a' - 'A'));
 2250|  2.88M|        };
 2251|       |
 2252|  2.88M|        SCN_TRY(it, read_exactly_n_code_units(
 2253|  2.88M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  2.88M|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  2.88M|        if (SCN_UNLIKELY(!std::equal(
 2257|  2.88M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  2.88M|                    return ascii_tolower(a) ==
 2259|  2.88M|                           static_cast<detail::char_t<Range>>(b);
 2260|  2.88M|                }))) {
 2261|  2.88M|            return unexpected(parse_error::error);
 2262|  2.88M|        }
 2263|       |
 2264|  2.88M|        return it;
 2265|  2.88M|    }
 2266|  2.88M|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|   328k|{
 2146|   328k|    auto it = read_code_unit(range);
 2147|   328k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   328k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.70k, False: 325k]
  |  |  ------------------
  ------------------
 2148|  2.70k|        return unexpected(make_eof_parse_error(it.error()));
 2149|  2.70k|    }
 2150|       |
 2151|   325k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   325k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 270k, False: 55.6k]
  |  |  ------------------
  ------------------
 2152|   325k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|   270k|        return unexpected(parse_error::error);
 2154|   270k|    }
 2155|       |
 2156|  55.6k|    return *it;
 2157|   325k|}
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1502|  4.17M|    {
 1503|  4.17M|        return sv;
 1504|  4.17M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|   608k|{
 1976|   608k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|   608k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|   608k|{
 1957|   608k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|   608k|        return std::find_if(range.begin(), range.end(), pred);
 1959|   608k|    }
 1960|   608k|    else {
 1961|   608k|        auto first = range.begin();
 1962|   608k|        for (; first != range.end(); ++first) {
 1963|   608k|            if (pred(*first)) {
 1964|   608k|                return first;
 1965|   608k|            }
 1966|   608k|        }
 1967|   608k|        return first;
 1968|   608k|    }
 1969|   608k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|  1.09M|{
 2951|  1.09M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 1.09M, False: 0]
  ------------------
 2952|  1.09M|        auto it = read_while_classic_space(range);
 2953|  1.09M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  1.09M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.09M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.0k, False: 1.08M]
  |  |  ------------------
  ------------------
 2955|  12.0k|            return unexpected(e);
 2956|  12.0k|        }
 2957|       |
 2958|  1.08M|        return it;
 2959|  1.09M|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  1.09M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|  1.09M|{
 2117|  1.09M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  1.09M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  1.09M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  1.09M|        auto buf = make_contiguous_buffer(range);
 2121|  1.09M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  1.09M|        return ranges::next(range.begin(),
 2123|  1.09M|                            ranges::distance(buf.view().begin(), it));
 2124|  1.09M|    }
 2125|  1.09M|    else {
 2126|  1.09M|        auto it = range.begin();
 2127|       |
 2128|  1.09M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|  1.09M|            auto seg = get_contiguous_beginning(range);
 2130|  1.09M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  1.09M|                seg_it != seg.end()) {
 2132|  1.09M|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  1.09M|            }
 2134|  1.09M|            ranges::advance(it, seg.size());
 2135|  1.09M|        }
 2136|       |
 2137|  1.09M|        return read_while_code_point(
 2138|  1.09M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  1.09M|    }
 2140|  1.09M|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|  1.09M|{
 1683|  1.09M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  1.09M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  1.09M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  1.09M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  1.09M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  1.09M|    }
 1688|  1.09M|    else {
 1689|  1.09M|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  1.09M|    }
 1691|  1.09M|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|  1.09M|    {
 1490|  1.09M|    }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  3.30M|    {
  304|  3.30M|        ranges::advance(x, n);
  305|  3.30M|        return x;
  306|  3.30M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  4.40M|    {
  268|  4.40M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  4.40M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  4.40M|    {
  181|  20.3M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 15.9M, False: 4.40M]
  ------------------
  182|  15.9M|            ++i;
  183|  15.9M|        }
  184|  4.40M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6192|   288k|    {
 6193|   288k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   288k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|   288k|            auto rd = make_reader<T, char_type>();
 6198|   288k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|   288k|                return unexpected(e);
 6200|   288k|            }
 6201|       |
 6202|   288k|            return impl(rd, range, value);
 6203|   288k|        }
 6204|   288k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|   288k|            auto rd = make_reader<T, char_type>();
 6206|   288k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   288k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 288k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   288k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 288k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   288k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   288k|                return impl(rd, range, value);
 6213|   288k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|   288k|        else {
 6221|   288k|            SCN_EXPECT(false);
 6222|   288k|            SCN_UNREACHABLE;
 6223|   288k|        }
 6224|   288k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  1.66M|    {
 3040|  1.66M|        reader_error_handler eh{};
 3041|  1.66M|        get_derived().check_specs_impl(specs, eh);
 3042|  1.66M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  1.66M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.66M]
  |  |  ------------------
  ------------------
 3043|      0|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|      0|        }
 3045|  1.66M|        return {};
 3046|  1.66M|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3050|  1.66M|    {
 3051|  1.66M|        return static_cast<Derived&>(*this);
 3052|  1.66M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4144|  1.66M|    {
 4145|  1.66M|        detail::check_float_type_specs(specs, eh);
 4146|  1.66M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   288k|    {
 6124|   288k|        const bool need_skipped_width =
 6125|   288k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 288k]
  |  Branch (6125:33): [True: 0, False: 288k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   288k|        auto it = rng.begin();
 6129|   288k|        std::ptrdiff_t prefix_width = 0;
 6130|   288k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 288k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   288k|        else {
 6138|   288k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   288k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   288k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   288k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   288k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.14k, False: 284k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.14k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.14k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.14k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.14k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.14k|    }                                                  \
  |  |  |  | 3671|   288k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   284k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   284k|            std::tie(it, prefix_width) = prefix_result;
 6140|   284k|        }
 6141|   284k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   284k|        std::ptrdiff_t value_width = 0;
 6145|   284k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 284k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   284k|        else {
 6161|   284k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   284k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   284k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   284k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 16.5k, False: 268k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  16.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  16.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  16.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  16.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  16.5k|    }                                                  \
  |  | 3671|   284k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   284k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   268k|                                             specs, value, loc));
 6163|       |
 6164|   268k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 268k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   268k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   268k|        std::ptrdiff_t postfix_width = 0;
 6173|   268k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 264k, False: 3.34k]
  ------------------
 6174|   264k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   264k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   264k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   264k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   264k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 264k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   264k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   264k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   264k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   264k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   264k|                                 value_width));
 6178|   264k|            std::tie(it, postfix_width) = postfix_result;
 6179|   264k|        }
 6180|       |
 6181|   268k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   268k|                                                 value_width, postfix_width);
 6183|   268k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 268k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   268k|        return it;
 6188|   268k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3034|  3.85M|    {
 3035|  3.85M|        return true;
 3036|  3.85M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4216|  1.64M|    {
 4217|  1.64M|        unsigned options{};
 4218|  1.64M|        if (specs.localized) {
  ------------------
  |  Branch (4218:13): [True: 467k, False: 1.17M]
  ------------------
 4219|   467k|            options |= float_reader_base::allow_thsep;
 4220|   467k|        }
 4221|       |
 4222|  1.64M|        SCN_GCC_COMPAT_PUSH
 4223|  1.64M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4224|       |
 4225|  1.64M|        switch (specs.type) {
 4226|   238k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4226:13): [True: 238k, False: 1.40M]
  ------------------
 4227|   238k|                return options | float_reader_base::allow_fixed;
 4228|       |
 4229|  39.1k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4229:13): [True: 39.1k, False: 1.60M]
  ------------------
 4230|  39.1k|                return options | float_reader_base::allow_scientific;
 4231|       |
 4232|   502k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4232:13): [True: 502k, False: 1.13M]
  ------------------
 4233|   502k|                return options | float_reader_base::allow_hex;
 4234|       |
 4235|   394k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4235:13): [True: 394k, False: 1.24M]
  ------------------
 4236|   394k|                return options | float_reader_base::allow_scientific |
 4237|   394k|                       float_reader_base::allow_fixed;
 4238|       |
 4239|   467k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4239:13): [True: 467k, False: 1.17M]
  ------------------
 4240|   467k|                return options | float_reader_base::allow_scientific |
 4241|   467k|                       float_reader_base::allow_fixed |
 4242|   467k|                       float_reader_base::allow_hex;
 4243|       |
 4244|      0|            default:
  ------------------
  |  Branch (4244:13): [True: 0, False: 1.64M]
  ------------------
 4245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4246|  1.64M|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4247|  1.64M|        }
 4248|       |
 4249|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4250|  1.64M|    }
_ZN3scn2v34impl12float_readerIcEC2Ej:
 3659|  1.64M|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2Ev:
 1770|  2.30M|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIcEC2Ev:
 1531|  4.60M|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIcE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3690|   714k|    {
 3691|   714k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   714k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   714k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   714k|        const std::ptrdiff_t sign_len =
 3694|   714k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 169k, False: 545k]
  ------------------
 3695|       |
 3696|   714k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   714k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   714k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   714k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   714k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14.6k, False: 700k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  14.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  14.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  14.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  14.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  14.6k|    }                                                  \
  |  |  |  | 3671|   714k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   700k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|   700k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   714k|    }
_ZN3scn2v34impl12float_readerIcE17handle_separatorsEv:
 4056|  2.21M|    {
 4057|  2.21M|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4057:13): [True: 2.21M, False: 0]
  ------------------
 4058|  2.21M|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4058:13): [True: 2.21M, False: 0]
  ------------------
 4059|  2.21M|            return;
 4060|  2.21M|        }
 4061|       |
 4062|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4063|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4063:13): [True: 0, False: 0]
  ------------------
 4064|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4064:27): [True: 0, False: 0]
  ------------------
 4065|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4065:21): [True: 0, False: 0]
  ------------------
 4066|      0|                    ch = CharT{'.'};
 4067|      0|                }
 4068|      0|            }
 4069|      0|        }
 4070|       |
 4071|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4071:13): [True: 0, False: 0]
  ------------------
 4072|      0|            return;
 4073|      0|        }
 4074|       |
 4075|      0|        auto first =
 4076|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4077|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4077:13): [True: 0, False: 0]
  ------------------
 4078|      0|            return;
 4079|      0|        }
 4080|       |
 4081|      0|        m_thsep_indices.push_back(
 4082|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4083|       |
 4084|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4084:31): [True: 0, False: 0]
  ------------------
 4085|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4085:17): [True: 0, False: 0]
  ------------------
 4086|      0|                *first++ = std::move(*it);
 4087|      0|            }
 4088|      0|            else {
 4089|      0|                m_thsep_indices.push_back(
 4090|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4091|      0|            }
 4092|      0|        }
 4093|       |
 4094|      0|        str.erase(first, str.end());
 4095|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1586|  2.53M|    {
 1587|  2.53M|        return m_storage.has_value();
 1588|  2.53M|    }
_ZNR3scn2v34impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1591|  1.48M|    {
 1592|  1.48M|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|  1.48M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.48M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|  1.48M|        return *m_storage;
 1594|  1.48M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   284k|    {
 4170|   284k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   284k|#if !SCN_DISABLE_LOCALE
 4173|   284k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 80.8k, False: 203k]
  ------------------
 4174|  80.8k|            return read_impl<Range>(
 4175|  80.8k|                range, rd,
 4176|  80.8k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  80.8k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  80.8k|                },
 4179|  80.8k|                value, loc);
 4180|  80.8k|        }
 4181|   203k|#endif
 4182|       |
 4183|   203k|        return read_impl<Range>(
 4184|   203k|            range, rd,
 4185|   203k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   203k|                return r.read_source(SCN_FWD(args)...);
 4187|   203k|            },
 4188|   203k|            value);
 4189|   284k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   394k|    {
 4206|   394k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   394k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   394k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.1k, False: 376k]
  |  |  ------------------
  ------------------
 4208|  18.1k|            return unexpected(r.error());
 4209|  18.1k|        }
 4210|       |
 4211|   376k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   376k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   376k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   376k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   376k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.20k, False: 373k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.20k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.20k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.20k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.20k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.20k|    }                                                  \
  |  |  |  | 3671|   376k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   373k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   373k|        return ranges::next(range.begin(), n);
 4213|   376k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|  1.22M|    {
  763|  1.22M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  1.22M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.22M|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  80.8k|    {
  754|  80.8k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  80.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  80.8k|              cvref<T> obj = *get<T>(fn);
  745|  80.8k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  80.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  80.8k|              }
  748|  80.8k|              else {
  749|  80.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  80.8k|              }
  751|  80.8k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  80.8k|    {
  684|  80.8k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  80.8k|            return static_cast<T*>(s.m_cp);
  686|  80.8k|        }
  687|  80.8k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  80.8k|            return static_cast<T*>(s.m_p);
  689|  80.8k|        }
  690|  80.8k|        else {
  691|  80.8k|            return reinterpret_cast<T*>(s.m_fp);
  692|  80.8k|        }
  693|  80.8k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  80.8k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  80.8k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  80.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  80.8k|                },
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3678|   252k|    {
 3679|   252k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|   252k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|   252k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 252k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|   252k|        return read_source_impl(range);
 3685|   252k|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3704|  1.22M|    {
 3705|  1.22M|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|  1.22M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.22M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.22M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.22M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.22M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.22M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|  1.22M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|  1.22M|        auto it = sign_result.first;
 3708|  1.22M|        m_sign = sign_result.second;
 3709|       |
 3710|  1.22M|        auto digits_begin = it;
 3711|  1.22M|        auto r = ranges::subrange{it, range.end()};
 3712|  1.22M|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|  1.22M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|  1.22M|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3715|  1.22M|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|  1.22M|                SCN_TRY_ASSIGN(
 3717|  1.22M|                    it,
 3718|  1.22M|                    do_read_source_impl(
 3719|  1.22M|                        r,
 3720|  1.22M|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|  1.22M|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|  1.22M|            }
 3723|  1.22M|            else {
 3724|  1.22M|                auto cb = [&](const auto& rr)
 3725|  1.22M|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|  1.22M|                    auto res = read_all(rr);
 3727|  1.22M|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|  1.22M|                        return unexpected_scan_error(
 3729|  1.22M|                            scan_error::invalid_scanned_value,
 3730|  1.22M|                            "Invalid float value");
 3731|  1.22M|                    }
 3732|  1.22M|                    return res;
 3733|  1.22M|                };
 3734|  1.22M|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3735|  1.22M|            }
 3736|  1.22M|        }
 3737|  1.22M|        else {
 3738|  1.22M|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|  1.22M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  1.22M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  1.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 57.2k, False: 1.16M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  57.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  57.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  57.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  57.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  57.2k|    }                                                  \
  |  | 3671|  1.22M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  1.22M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3739|  1.16M|                it,
 3740|  1.16M|                do_read_source_impl(
 3741|  1.16M|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|  1.16M|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|  1.16M|        }
 3744|       |
 3745|  1.16M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.16M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.16M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|  1.16M|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 1.15M, False: 7.47k]
  |  Branch (3747:48): [True: 1.15M, False: 6.06k]
  ------------------
 3748|  1.16M|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 1.10M, False: 46.5k]
  ------------------
 3749|  1.16M|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 1.10M, False: 1.39k]
  ------------------
 3750|  1.10M|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|  1.10M|        }
 3752|       |
 3753|  1.16M|        handle_separators();
 3754|       |
 3755|  1.16M|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 1.16M]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|  1.16M|        return it;
 3768|  1.16M|    }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 3999|  1.22M|    {
 4000|  1.22M|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|  1.22M|        const bool allowed_nonhex =
 4002|  1.22M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|  1.22M|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|  1.22M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 1.20M, False: 13.5k]
  |  Branch (4005:45): [True: 0, False: 1.20M]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|  1.22M|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 13.5k, False: 1.20M]
  ------------------
 4011|  13.5k|            return *r;
 4012|  13.5k|        }
 4013|       |
 4014|  1.20M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 1.16M, False: 47.9k]
  |  Branch (4014:45): [True: 1.07k, False: 1.16M]
  ------------------
 4015|  1.07k|            return unexpected(r.error());
 4016|  1.07k|        }
 4017|  1.20M|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 47.9k, False: 1.16M]
  ------------------
 4018|  47.9k|            return *r;
 4019|  47.9k|        }
 4020|       |
 4021|  1.16M|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 819k, False: 340k]
  |  Branch (4021:28): [True: 257k, False: 562k]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|   257k|            auto it = range.begin();
 4025|       |
 4026|   257k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 12.4k, False: 245k]
  ------------------
 4027|  12.4k|                m_kind = float_kind::hex_with_prefix;
 4028|  12.4k|                it = *r;
 4029|  12.4k|            }
 4030|   245k|            else {
 4031|   245k|                m_kind = float_kind::hex_without_prefix;
 4032|   245k|            }
 4033|       |
 4034|   257k|            return read_hex(ranges::subrange{it, range.end()});
 4035|   257k|        }
 4036|   903k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 340k, False: 562k]
  |  Branch (4036:29): [True: 340k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   340k|            m_kind = float_kind::generic;
 4040|   340k|            return read_regular_float(range);
 4041|   340k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|   562k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   562k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 27.7k, False: 534k]
  |  |  ------------------
  ------------------
 4047|  27.7k|            m_kind = float_kind::hex_with_prefix;
 4048|  27.7k|            return read_hex(ranges::subrange{*r, range.end()});
 4049|  27.7k|        }
 4050|       |
 4051|   534k|        m_kind = float_kind::generic;
 4052|   534k|        return read_regular(range);
 4053|   562k|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3810|  1.22M|    {
 3811|  1.22M|        auto it = range.begin();
 3812|  1.22M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 1.20M, False: 13.5k]
  ------------------
 3813|  1.20M|            return unexpected(r.error());
 3814|  1.20M|        }
 3815|  13.5k|        else {
 3816|  13.5k|            it = *r;
 3817|  13.5k|        }
 3818|       |
 3819|  13.5k|        if (auto r = read_matching_string_classic_nocase(
 3820|  13.5k|                ranges::subrange{it, range.end()}, "inity");
 3821|  13.5k|            !r) {
  ------------------
  |  Branch (3821:13): [True: 7.47k, False: 6.06k]
  ------------------
 3822|  7.47k|            m_kind = float_kind::inf_short;
 3823|  7.47k|            return it;
 3824|  7.47k|        }
 3825|  6.06k|        else {
 3826|  6.06k|            m_kind = float_kind::inf_long;
 3827|  6.06k|            return *r;
 3828|  6.06k|        }
 3829|  13.5k|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3833|  1.20M|    {
 3834|  1.20M|        auto it = range.begin();
 3835|  1.20M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 1.16M, False: 48.9k]
  ------------------
 3836|  1.16M|            return r.transform_error(map_parse_error_to_scan_error(
 3837|  1.16M|                scan_error::invalid_scanned_value,
 3838|  1.16M|                "Invalid floating-point NaN value"));
 3839|  1.16M|        }
 3840|  48.9k|        else {
 3841|  48.9k|            it = *r;
 3842|  48.9k|        }
 3843|       |
 3844|  48.9k|        if (auto r =
 3845|  48.9k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|  48.9k|            !r) {
  ------------------
  |  Branch (3846:13): [True: 46.5k, False: 2.47k]
  ------------------
 3847|  46.5k|            m_kind = float_kind::nan_simple;
 3848|  46.5k|            return it;
 3849|  46.5k|        }
 3850|  2.47k|        else {
 3851|  2.47k|            it = *r;
 3852|  2.47k|        }
 3853|       |
 3854|  2.47k|        auto payload_beg_it = it;
 3855|  2.47k|        it = read_while_code_unit(
 3856|  2.47k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  2.47k|                return is_ascii_char(ch) &&
 3858|  2.47k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|  2.47k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|  2.47k|            });
 3861|  2.47k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|  2.47k|        m_kind = float_kind::nan_with_payload;
 3864|  2.47k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 1.39k, False: 1.07k]
  ------------------
 3865|  2.47k|                                             ')')) {
 3866|  1.39k|            return *r;
 3867|  1.39k|        }
 3868|  1.07k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|  1.07k|                                     "Invalid floating-point NaN payload");
 3870|  2.47k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_LPv0EEEOSM_:
  753|  2.47k|    {
  754|  2.47k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  20.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  20.9k|              cvref<T> obj = *get<T>(fn);
  745|  20.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  20.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  20.9k|              }
  748|  20.9k|              else {
  749|  20.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  20.9k|              }
  751|  20.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_EUlcE_EEDaNS3_7storageE:
  683|  20.9k|    {
  684|  20.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  20.9k|            return static_cast<T*>(s.m_cp);
  686|  20.9k|        }
  687|  20.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  20.9k|            return static_cast<T*>(s.m_p);
  689|  20.9k|        }
  690|  20.9k|        else {
  691|  20.9k|            return reinterpret_cast<T*>(s.m_fp);
  692|  20.9k|        }
  693|  20.9k|    }
_ZZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlcE_clEc:
 3856|  20.9k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  20.9k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3857:24): [True: 20.8k, False: 89]
  ------------------
 3858|  20.9k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3858:26): [True: 19.3k, False: 1.45k]
  |  Branch (3858:39): [True: 11.5k, False: 7.79k]
  |  Branch (3858:54): [True: 2.54k, False: 6.70k]
  |  Branch (3858:67): [True: 2.46k, False: 83]
  ------------------
 3859|  20.8k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3859:26): [True: 5.32k, False: 1.45k]
  |  Branch (3859:39): [True: 2.52k, False: 2.80k]
  |  Branch (3859:53): [True: 2.72k, False: 1.54k]
  ------------------
 3860|  20.9k|            });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_LPv0EEEPSM_:
  661|  2.47k|        {
  662|  2.47k|        }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3803|   819k|    {
 3804|   819k|        return read_matching_string_classic_nocase(range, "0x");
 3805|   819k|    }
_ZN3scn2v34impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3903|   285k|    {
 3904|   285k|        auto it = range.begin();
 3905|       |
 3906|   285k|        std::ptrdiff_t digits_count = 0;
 3907|   285k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3908|   285k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   285k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.96k, False: 278k]
  |  |  ------------------
  ------------------
 3909|  6.96k|            return r.transform_error(map_parse_error_to_scan_error(
 3910|  6.96k|                scan_error::invalid_scanned_value,
 3911|  6.96k|                "Invalid hexadecimal floating-point value"));
 3912|  6.96k|        }
 3913|   278k|        else {
 3914|   278k|            digits_count += ranges::distance(it, *r);
 3915|   278k|            it = *r;
 3916|   278k|        }
 3917|       |
 3918|   278k|        m_integral_part_length = digits_count;
 3919|   278k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3919:18): [True: 43.6k, False: 234k]
  ------------------
 3920|   278k|                                             m_locale_options.decimal_point)) {
 3921|  43.6k|            it = *r;
 3922|  43.6k|        }
 3923|       |
 3924|   278k|        if (auto r =
  ------------------
  |  Branch (3924:18): [True: 39.5k, False: 238k]
  ------------------
 3925|   278k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3926|  39.5k|            digits_count += ranges::distance(it, *r);
 3927|  39.5k|            it = *r;
 3928|  39.5k|        }
 3929|       |
 3930|   278k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   278k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 278k]
  |  |  ------------------
  ------------------
 3931|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3932|      0|                                         "No significand digits in hexfloat");
 3933|      0|        }
 3934|       |
 3935|   278k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3936|       |
 3937|   278k|        return it;
 3938|   278k|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3788|   563k|    {
 3789|   563k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   563k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 563k]
  |  |  |  Branch (859:45): [True: 0, False: 563k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3790|   563k|                         thsep_allowed)) {
 3791|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3792|      0|                return char_to_int(ch) < 16 ||
 3793|      0|                       ch == m_locale_options.thousands_sep;
 3794|      0|            });
 3795|      0|        }
 3796|       |
 3797|   563k|        return read_while1_code_unit(
 3798|   563k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3799|   563k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_:
  753|   563k|    {
  754|   563k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  2.85M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.85M|              cvref<T> obj = *get<T>(fn);
  745|  2.85M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  2.85M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.85M|              }
  748|  2.85M|              else {
  749|  2.85M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.85M|              }
  751|  2.85M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  2.85M|    {
  684|  2.85M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  2.85M|            return static_cast<T*>(s.m_cp);
  686|  2.85M|        }
  687|  2.85M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  2.85M|            return static_cast<T*>(s.m_p);
  689|  2.85M|        }
  690|  2.85M|        else {
  691|  2.85M|            return reinterpret_cast<T*>(s.m_fp);
  692|  2.85M|        }
  693|  2.85M|    }
_ZZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3798|  2.85M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_LPv0EEEPSM_:
  661|   563k|        {
  662|   563k|        }
_ZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3875|  1.00M|    {
 3876|  1.00M|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 114k, False: 888k]
  ------------------
 3877|   114k|            auto beg_exp_it = range.begin();
 3878|   114k|            auto it = *r;
 3879|       |
 3880|   114k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 114k, False: 336]
  ------------------
 3881|   114k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|   114k|                it = r_sign->first;
 3883|   114k|            }
 3884|       |
 3885|   114k|            if (auto r_exp = read_while1_code_unit(
 3886|   114k|                    ranges::subrange{it, range.end()},
 3887|   114k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|   114k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|   114k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.81k, False: 112k]
  |  |  ------------------
  ------------------
 3889|  1.81k|                it = beg_exp_it;
 3890|  1.81k|            }
 3891|   112k|            else {
 3892|   112k|                it = *r_exp;
 3893|   112k|            }
 3894|       |
 3895|   114k|            return it;
 3896|   114k|        }
 3897|   888k|        return range.begin();
 3898|  1.00M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_LPv0EEEOSL_:
  753|   114k|    {
  754|   114k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clESZ_c:
  743|   364k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   364k|              cvref<T> obj = *get<T>(fn);
  745|   364k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   364k|                  obj(static_cast<decltype(args)>(args)...);
  747|   364k|              }
  748|   364k|              else {
  749|   364k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   364k|              }
  751|   364k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|   364k|    {
  684|   364k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   364k|            return static_cast<T*>(s.m_cp);
  686|   364k|        }
  687|   364k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   364k|            return static_cast<T*>(s.m_p);
  689|   364k|        }
  690|   364k|        else {
  691|   364k|            return reinterpret_cast<T*>(s.m_fp);
  692|   364k|        }
  693|   364k|    }
_ZZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlcE_clEc:
 3887|   364k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_LPv0EEEPSL_:
  661|   114k|        {
  662|   114k|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3943|   875k|    {
 3944|   875k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|   875k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 753k, False: 121k]
  |  Branch (3945:50): [True: 19.4k, False: 733k]
  ------------------
 3946|       |
 3947|   875k|        auto it = ranges::begin(range);
 3948|   875k|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|   875k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|   875k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   875k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38.8k, False: 836k]
  |  |  ------------------
  ------------------
 3952|  38.8k|            return r.transform_error(
 3953|  38.8k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|  38.8k|                                              "Invalid floating-point value"));
 3955|  38.8k|        }
 3956|   836k|        else {
 3957|   836k|            digits_count += ranges::distance(it, *r);
 3958|   836k|            it = *r;
 3959|   836k|        }
 3960|       |
 3961|   836k|        m_integral_part_length = digits_count;
 3962|   836k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 164k, False: 671k]
  ------------------
 3963|   836k|                                             m_locale_options.decimal_point)) {
 3964|   164k|            it = *r;
 3965|   164k|        }
 3966|       |
 3967|   836k|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 152k, False: 684k]
  ------------------
 3968|   836k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|   152k|            digits_count += ranges::distance(it, *r);
 3970|   152k|            it = *r;
 3971|   152k|        }
 3972|       |
 3973|   836k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   836k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 836k]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|   836k|        auto beg_exp_it = it;
 3979|   836k|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 725k, False: 111k]
  ------------------
 3980|   725k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|   725k|        }
 3982|   836k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 18.7k, False: 817k]
  |  Branch (3982:29): [True: 10.4k, False: 8.36k]
  ------------------
 3983|  10.4k|            return unexpected_scan_error(
 3984|  10.4k|                scan_error::invalid_scanned_value,
 3985|  10.4k|                "No exponent given to scientific float");
 3986|  10.4k|        }
 3987|       |
 3988|   826k|        m_kind =
 3989|   826k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 714k, False: 111k]
  ------------------
 3990|       |
 3991|   826k|        return it;
 3992|   836k|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3773|  1.71M|    {
 3774|  1.71M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|  1.71M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.71M]
  |  |  |  Branch (859:45): [True: 0, False: 1.71M]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|  1.71M|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|  1.71M|        return read_while1_code_unit(
 3783|  1.71M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|  1.71M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_:
  753|  1.71M|    {
  754|  1.71M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  9.31M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  9.31M|              cvref<T> obj = *get<T>(fn);
  745|  9.31M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  9.31M|                  obj(static_cast<decltype(args)>(args)...);
  747|  9.31M|              }
  748|  9.31M|              else {
  749|  9.31M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  9.31M|              }
  751|  9.31M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  9.31M|    {
  684|  9.31M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  9.31M|            return static_cast<T*>(s.m_cp);
  686|  9.31M|        }
  687|  9.31M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  9.31M|            return static_cast<T*>(s.m_p);
  689|  9.31M|        }
  690|  9.31M|        else {
  691|  9.31M|            return reinterpret_cast<T*>(s.m_fp);
  692|  9.31M|        }
  693|  9.31M|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3783|  9.31M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_LPv0EEEPSM_:
  661|  1.71M|        {
  662|  1.71M|        }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EELPv0EEEvOT_:
 1576|  1.10M|    {
 1577|  1.10M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  1.10M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  1.10M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|  80.8k|        {
  662|  80.8k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|   203k|    {
  754|   203k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   203k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   203k|              cvref<T> obj = *get<T>(fn);
  745|   203k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   203k|                  obj(static_cast<decltype(args)>(args)...);
  747|   203k|              }
  748|   203k|              else {
  749|   203k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   203k|              }
  751|   203k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   203k|    {
  684|   203k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   203k|            return static_cast<T*>(s.m_cp);
  686|   203k|        }
  687|   203k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   203k|            return static_cast<T*>(s.m_p);
  689|   203k|        }
  690|   203k|        else {
  691|   203k|            return reinterpret_cast<T*>(s.m_fp);
  692|   203k|        }
  693|   203k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   203k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   203k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   203k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   203k|            },
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3664|   970k|    {
 3665|   970k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   970k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 970k]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|   970k|        return read_source_impl(range);
 3671|   970k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSM_:
  661|   203k|        {
  662|   203k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   246k|    {
 4170|   246k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   246k|#if !SCN_DISABLE_LOCALE
 4173|   246k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 68.5k, False: 177k]
  ------------------
 4174|  68.5k|            return read_impl<Range>(
 4175|  68.5k|                range, rd,
 4176|  68.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  68.5k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  68.5k|                },
 4179|  68.5k|                value, loc);
 4180|  68.5k|        }
 4181|   177k|#endif
 4182|       |
 4183|   177k|        return read_impl<Range>(
 4184|   177k|            range, rd,
 4185|   177k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   177k|                return r.read_source(SCN_FWD(args)...);
 4187|   177k|            },
 4188|   177k|            value);
 4189|   246k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   349k|    {
 4206|   349k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   349k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   349k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.5k, False: 338k]
  |  |  ------------------
  ------------------
 4208|  10.5k|            return unexpected(r.error());
 4209|  10.5k|        }
 4210|       |
 4211|   338k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   338k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   338k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   338k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   338k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 11.4k, False: 327k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  11.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  11.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  11.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  11.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  11.4k|    }                                                  \
  |  |  |  | 3671|   338k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   327k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   327k|        return ranges::next(range.begin(), n);
 4213|   338k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|  1.08M|    {
  763|  1.08M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  1.08M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.08M|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  68.5k|    {
  754|  68.5k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  68.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  68.5k|              cvref<T> obj = *get<T>(fn);
  745|  68.5k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  68.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  68.5k|              }
  748|  68.5k|              else {
  749|  68.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  68.5k|              }
  751|  68.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  68.5k|    {
  684|  68.5k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  68.5k|            return static_cast<T*>(s.m_cp);
  686|  68.5k|        }
  687|  68.5k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  68.5k|            return static_cast<T*>(s.m_p);
  689|  68.5k|        }
  690|  68.5k|        else {
  691|  68.5k|            return reinterpret_cast<T*>(s.m_fp);
  692|  68.5k|        }
  693|  68.5k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  68.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  68.5k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  68.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  68.5k|                },
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3678|   214k|    {
 3679|   214k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|   214k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|   214k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 214k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|   214k|        return read_source_impl(range);
 3685|   214k|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3704|  1.08M|    {
 3705|  1.08M|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|  1.08M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.08M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.08M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.08M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.08M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.08M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.08M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|  1.08M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|  1.08M|        auto it = sign_result.first;
 3708|  1.08M|        m_sign = sign_result.second;
 3709|       |
 3710|  1.08M|        auto digits_begin = it;
 3711|  1.08M|        auto r = ranges::subrange{it, range.end()};
 3712|  1.08M|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|  1.08M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|  1.08M|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  2.16M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.08M]
  |  |  |  Branch (859:45): [True: 0, False: 1.08M]
  |  |  |  Branch (859:45): [True: 0, False: 1.08M]
  |  |  ------------------
  ------------------
 3715|  1.08M|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|      0|    }                                                  \
  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3717|      0|                    it,
 3718|      0|                    do_read_source_impl(
 3719|      0|                        r,
 3720|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|      0|            }
 3723|  1.08M|            else {
 3724|  1.08M|                auto cb = [&](const auto& rr)
 3725|  1.08M|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|  1.08M|                    auto res = read_all(rr);
 3727|  1.08M|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|  1.08M|                        return unexpected_scan_error(
 3729|  1.08M|                            scan_error::invalid_scanned_value,
 3730|  1.08M|                            "Invalid float value");
 3731|  1.08M|                    }
 3732|  1.08M|                    return res;
 3733|  1.08M|                };
 3734|  1.08M|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3667|  1.08M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  1.08M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  1.08M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 32.7k, False: 1.04M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  32.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  32.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  32.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  32.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  32.7k|    }                                                  \
  |  | 3671|  1.08M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  1.08M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3735|  1.04M|            }
 3736|  1.08M|        }
 3737|  1.04M|        else {
 3738|  1.04M|            SCN_TRY_ASSIGN(
 3739|  1.04M|                it,
 3740|  1.04M|                do_read_source_impl(
 3741|  1.04M|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|  1.04M|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|  1.04M|        }
 3744|       |
 3745|  1.04M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.04M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.04M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|  1.04M|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 1.04M, False: 7.25k]
  |  Branch (3747:48): [True: 1.03M, False: 5.67k]
  ------------------
 3748|  1.04M|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 989k, False: 45.8k]
  ------------------
 3749|  1.04M|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 988k, False: 1.38k]
  ------------------
 3750|   988k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|   988k|        }
 3752|       |
 3753|  1.04M|        handle_separators();
 3754|       |
 3755|  1.04M|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 1.04M]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|  1.04M|        return it;
 3768|  1.04M|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3810|  1.08M|    {
 3811|  1.08M|        auto it = range.begin();
 3812|  1.08M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 1.06M, False: 12.9k]
  ------------------
 3813|  1.06M|            return unexpected(r.error());
 3814|  1.06M|        }
 3815|  12.9k|        else {
 3816|  12.9k|            it = *r;
 3817|  12.9k|        }
 3818|       |
 3819|  12.9k|        if (auto r = read_matching_string_classic_nocase(
 3820|  12.9k|                ranges::subrange{it, range.end()}, "inity");
 3821|  12.9k|            !r) {
  ------------------
  |  Branch (3821:13): [True: 7.25k, False: 5.67k]
  ------------------
 3822|  7.25k|            m_kind = float_kind::inf_short;
 3823|  7.25k|            return it;
 3824|  7.25k|        }
 3825|  5.67k|        else {
 3826|  5.67k|            m_kind = float_kind::inf_long;
 3827|  5.67k|            return *r;
 3828|  5.67k|        }
 3829|  12.9k|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|  1.06M|    {
 3834|  1.06M|        auto it = range.begin();
 3835|  1.06M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 1.01M, False: 48.2k]
  ------------------
 3836|  1.01M|            return r.transform_error(map_parse_error_to_scan_error(
 3837|  1.01M|                scan_error::invalid_scanned_value,
 3838|  1.01M|                "Invalid floating-point NaN value"));
 3839|  1.01M|        }
 3840|  48.2k|        else {
 3841|  48.2k|            it = *r;
 3842|  48.2k|        }
 3843|       |
 3844|  48.2k|        if (auto r =
 3845|  48.2k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|  48.2k|            !r) {
  ------------------
  |  Branch (3846:13): [True: 45.8k, False: 2.45k]
  ------------------
 3847|  45.8k|            m_kind = float_kind::nan_simple;
 3848|  45.8k|            return it;
 3849|  45.8k|        }
 3850|  2.45k|        else {
 3851|  2.45k|            it = *r;
 3852|  2.45k|        }
 3853|       |
 3854|  2.45k|        auto payload_beg_it = it;
 3855|  2.45k|        it = read_while_code_unit(
 3856|  2.45k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  2.45k|                return is_ascii_char(ch) &&
 3858|  2.45k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|  2.45k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|  2.45k|            });
 3861|  2.45k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|  2.45k|        m_kind = float_kind::nan_with_payload;
 3864|  2.45k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 1.38k, False: 1.07k]
  ------------------
 3865|  2.45k|                                             ')')) {
 3866|  1.38k|            return *r;
 3867|  1.38k|        }
 3868|  1.07k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|  1.07k|                                     "Invalid floating-point NaN payload");
 3870|  2.45k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_LPv0EEEOSJ_:
  753|  2.45k|    {
  754|  2.45k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESU_c:
  743|  20.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  20.8k|              cvref<T> obj = *get<T>(fn);
  745|  20.8k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  20.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  20.8k|              }
  748|  20.8k|              else {
  749|  20.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  20.8k|              }
  751|  20.8k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_EUlcE_EEDaNS3_7storageE:
  683|  20.8k|    {
  684|  20.8k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  20.8k|            return static_cast<T*>(s.m_cp);
  686|  20.8k|        }
  687|  20.8k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  20.8k|            return static_cast<T*>(s.m_p);
  689|  20.8k|        }
  690|  20.8k|        else {
  691|  20.8k|            return reinterpret_cast<T*>(s.m_fp);
  692|  20.8k|        }
  693|  20.8k|    }
_ZZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlcE_clEc:
 3856|  20.8k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  20.8k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3857:24): [True: 20.7k, False: 83]
  ------------------
 3858|  20.8k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3858:26): [True: 19.3k, False: 1.44k]
  |  Branch (3858:39): [True: 11.5k, False: 7.76k]
  |  Branch (3858:54): [True: 2.52k, False: 6.69k]
  |  Branch (3858:67): [True: 2.44k, False: 83]
  ------------------
 3859|  20.7k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3859:26): [True: 5.32k, False: 1.44k]
  |  Branch (3859:39): [True: 2.52k, False: 2.80k]
  |  Branch (3859:53): [True: 2.72k, False: 1.52k]
  ------------------
 3860|  20.8k|            });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_LPv0EEEPSJ_:
  661|  2.45k|        {
  662|  2.45k|        }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3803|   721k|    {
 3804|   721k|        return read_matching_string_classic_nocase(range, "0x");
 3805|   721k|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|   605k|{
 1996|   605k|    auto it = read_while_code_unit(range, pred);
 1997|   605k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 251k, False: 353k]
  ------------------
 1998|   251k|        return unexpected(parse_error::error);
 1999|   251k|    }
 2000|   353k|    return it;
 2001|   605k|}
_ZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3875|   178k|    {
 3876|   178k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 29.5k, False: 149k]
  ------------------
 3877|  29.5k|            auto beg_exp_it = range.begin();
 3878|  29.5k|            auto it = *r;
 3879|       |
 3880|  29.5k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 29.4k, False: 108]
  ------------------
 3881|  29.5k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|  29.4k|                it = r_sign->first;
 3883|  29.4k|            }
 3884|       |
 3885|  29.5k|            if (auto r_exp = read_while1_code_unit(
 3886|  29.5k|                    ranges::subrange{it, range.end()},
 3887|  29.5k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|  29.5k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  29.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 642, False: 28.9k]
  |  |  ------------------
  ------------------
 3889|    642|                it = beg_exp_it;
 3890|    642|            }
 3891|  28.9k|            else {
 3892|  28.9k|                it = *r_exp;
 3893|  28.9k|            }
 3894|       |
 3895|  29.5k|            return it;
 3896|  29.5k|        }
 3897|   149k|        return range.begin();
 3898|   178k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_LPv0EEEOSI_:
  753|  29.5k|    {
  754|  29.5k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEcE_clESW_c:
  743|  87.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  87.7k|              cvref<T> obj = *get<T>(fn);
  745|  87.7k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  87.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  87.7k|              }
  748|  87.7k|              else {
  749|  87.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  87.7k|              }
  751|  87.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|  87.7k|    {
  684|  87.7k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  87.7k|            return static_cast<T*>(s.m_cp);
  686|  87.7k|        }
  687|  87.7k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  87.7k|            return static_cast<T*>(s.m_p);
  689|  87.7k|        }
  690|  87.7k|        else {
  691|  87.7k|            return reinterpret_cast<T*>(s.m_fp);
  692|  87.7k|        }
  693|  87.7k|    }
_ZZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlcE_clEc:
 3887|  87.7k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_LPv0EEEPSI_:
  661|  29.5k|        {
  662|  29.5k|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3943|   298k|    {
 3944|   298k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|   298k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 188k, False: 109k]
  |  Branch (3945:50): [True: 17.5k, False: 170k]
  ------------------
 3946|       |
 3947|   298k|        auto it = ranges::begin(range);
 3948|   298k|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|   298k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|   298k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   298k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.5k, False: 277k]
  |  |  ------------------
  ------------------
 3952|  20.5k|            return r.transform_error(
 3953|  20.5k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|  20.5k|                                              "Invalid floating-point value"));
 3955|  20.5k|        }
 3956|   277k|        else {
 3957|   277k|            digits_count += ranges::distance(it, *r);
 3958|   277k|            it = *r;
 3959|   277k|        }
 3960|       |
 3961|   277k|        m_integral_part_length = digits_count;
 3962|   277k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 51.7k, False: 226k]
  ------------------
 3963|   277k|                                             m_locale_options.decimal_point)) {
 3964|  51.7k|            it = *r;
 3965|  51.7k|        }
 3966|       |
 3967|   277k|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 47.0k, False: 230k]
  ------------------
 3968|   277k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|  47.0k|            digits_count += ranges::distance(it, *r);
 3970|  47.0k|            it = *r;
 3971|  47.0k|        }
 3972|       |
 3973|   277k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   277k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 277k]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|   277k|        auto beg_exp_it = it;
 3979|   277k|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 178k, False: 99.1k]
  ------------------
 3980|   178k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|   178k|        }
 3982|   277k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 16.5k, False: 261k]
  |  Branch (3982:29): [True: 10.2k, False: 6.32k]
  ------------------
 3983|  10.2k|            return unexpected_scan_error(
 3984|  10.2k|                scan_error::invalid_scanned_value,
 3985|  10.2k|                "No exponent given to scientific float");
 3986|  10.2k|        }
 3987|       |
 3988|   267k|        m_kind =
 3989|   267k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 238k, False: 28.9k]
  ------------------
 3990|       |
 3991|   267k|        return it;
 3992|   277k|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3773|   576k|    {
 3774|   576k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   576k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 576k]
  |  |  |  Branch (859:45): [True: 0, False: 576k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|   576k|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|   576k|        return read_while1_code_unit(
 3783|   576k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|   576k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_:
  753|   576k|    {
  754|   576k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESU_c:
  743|  3.04M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.04M|              cvref<T> obj = *get<T>(fn);
  745|  3.04M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  3.04M|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.04M|              }
  748|  3.04M|              else {
  749|  3.04M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.04M|              }
  751|  3.04M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  683|  3.04M|    {
  684|  3.04M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  3.04M|            return static_cast<T*>(s.m_cp);
  686|  3.04M|        }
  687|  3.04M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  3.04M|            return static_cast<T*>(s.m_p);
  689|  3.04M|        }
  690|  3.04M|        else {
  691|  3.04M|            return reinterpret_cast<T*>(s.m_fp);
  692|  3.04M|        }
  693|  3.04M|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3783|  3.04M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_LPv0EEEPSJ_:
  661|   576k|        {
  662|   576k|        }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3999|  1.08M|    {
 4000|  1.08M|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|  1.08M|        const bool allowed_nonhex =
 4002|  1.08M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|  1.08M|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|  1.08M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 1.06M, False: 12.9k]
  |  Branch (4005:45): [True: 0, False: 1.06M]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|  1.08M|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 12.9k, False: 1.06M]
  ------------------
 4011|  12.9k|            return *r;
 4012|  12.9k|        }
 4013|       |
 4014|  1.06M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 1.02M, False: 47.1k]
  |  Branch (4014:45): [True: 1.07k, False: 1.01M]
  ------------------
 4015|  1.07k|            return unexpected(r.error());
 4016|  1.07k|        }
 4017|  1.06M|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 47.1k, False: 1.01M]
  ------------------
 4018|  47.1k|            return *r;
 4019|  47.1k|        }
 4020|       |
 4021|  1.01M|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 721k, False: 298k]
  |  Branch (4021:28): [True: 217k, False: 503k]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|   217k|            auto it = range.begin();
 4025|       |
 4026|   217k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 11.2k, False: 206k]
  ------------------
 4027|  11.2k|                m_kind = float_kind::hex_with_prefix;
 4028|  11.2k|                it = *r;
 4029|  11.2k|            }
 4030|   206k|            else {
 4031|   206k|                m_kind = float_kind::hex_without_prefix;
 4032|   206k|            }
 4033|       |
 4034|   217k|            return read_hex(ranges::subrange{it, range.end()});
 4035|   217k|        }
 4036|   802k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 298k, False: 503k]
  |  Branch (4036:29): [True: 298k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   298k|            m_kind = float_kind::generic;
 4040|   298k|            return read_regular_float(range);
 4041|   298k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|   503k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   503k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 27.6k, False: 476k]
  |  |  ------------------
  ------------------
 4047|  27.6k|            m_kind = float_kind::hex_with_prefix;
 4048|  27.6k|            return read_hex(ranges::subrange{*r, range.end()});
 4049|  27.6k|        }
 4050|       |
 4051|   476k|        m_kind = float_kind::generic;
 4052|   476k|        return read_regular(range);
 4053|   503k|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3725|   721k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|   721k|                    auto res = read_all(rr);
 3727|   721k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|   721k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 869, False: 720k]
  |  |  ------------------
  ------------------
 3728|    869|                        return unexpected_scan_error(
 3729|    869|                            scan_error::invalid_scanned_value,
 3730|    869|                            "Invalid float value");
 3731|    869|                    }
 3732|   720k|                    return res;
 3733|   721k|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|   721k|{
 1839|   721k|    return ranges::next(range.begin(), range.end());
 1840|   721k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|   721k|    {
  313|   721k|        ranges::advance(x, bound);
  314|   721k|        return x;
  315|   721k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|   721k|    {
  275|   721k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|   721k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|   721k|    {
  190|   721k|        i = std::move(bound);
  191|   721k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEvOT_:
 1576|   990k|    {
 1577|   990k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   990k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|   990k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1620|   990k|    {
 1621|   990k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|   990k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|   990k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|   990k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|   990k|            m_storage.reset();
 1627|   990k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|   990k|        }
 1629|   990k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|   990k|                                          std::basic_string<CharT>>) {
 1631|   990k|            m_storage.emplace(SCN_FWD(range));
 1632|   990k|            m_view = string_view_type{*m_storage};
 1633|   990k|        }
 1634|   990k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|   990k|                                          typename detail::basic_scan_buffer<
 1636|   990k|                                              value_t>::forward_iterator> &&
 1637|   990k|                           ranges::common_range<Range>) {
 1638|   990k|            auto beg_seg = range.begin().contiguous_segment();
 1639|   990k|            auto end_seg = range.end().contiguous_segment();
 1640|   990k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|   990k|                             detail::to_address(end_seg.end()))) {
 1642|   990k|                auto& str = m_storage.emplace();
 1643|   990k|                str.reserve(range.end().position() - range.begin().position());
 1644|   990k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|   990k|                m_view = string_view_type{str};
 1646|   990k|                return;
 1647|   990k|            }
 1648|       |
 1649|   990k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   990k|                                                            end_seg.data());
 1651|   990k|            m_storage.reset();
 1652|   990k|        }
 1653|   990k|        else {
 1654|   990k|            auto& str = m_storage.emplace();
 1655|   990k|            if constexpr (ranges::sized_range<Range>) {
 1656|   990k|                str.reserve(range.size());
 1657|   990k|            }
 1658|   990k|            if constexpr (ranges::common_range<Range>) {
 1659|   990k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|   990k|                          std::back_inserter(str));
 1661|   990k|            }
 1662|   990k|            else {
 1663|   990k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|   990k|                     ++it) {
 1665|   990k|                    str.push_back(*it);
 1666|   990k|                }
 1667|   990k|            }
 1668|   990k|            m_view = string_view_type{str};
 1669|   990k|        }
 1670|   990k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|  68.5k|        {
  662|  68.5k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|   177k|    {
  754|   177k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   177k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   177k|              cvref<T> obj = *get<T>(fn);
  745|   177k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   177k|                  obj(static_cast<decltype(args)>(args)...);
  747|   177k|              }
  748|   177k|              else {
  749|   177k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   177k|              }
  751|   177k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   177k|    {
  684|   177k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   177k|            return static_cast<T*>(s.m_cp);
  686|   177k|        }
  687|   177k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   177k|            return static_cast<T*>(s.m_p);
  689|   177k|        }
  690|   177k|        else {
  691|   177k|            return reinterpret_cast<T*>(s.m_fp);
  692|   177k|        }
  693|   177k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   177k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   177k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   177k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   177k|            },
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3664|   866k|    {
 3665|   866k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   866k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 866k]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|   866k|        return read_source_impl(range);
 3671|   866k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|   177k|        {
  662|   177k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6192|   301k|    {
 6193|   301k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   301k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|   301k|            auto rd = make_reader<T, char_type>();
 6198|   301k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|   301k|                return unexpected(e);
 6200|   301k|            }
 6201|       |
 6202|   301k|            return impl(rd, range, value);
 6203|   301k|        }
 6204|   301k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|   301k|            auto rd = make_reader<T, char_type>();
 6206|   301k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   301k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 301k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   301k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 301k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   301k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   301k|                return impl(rd, range, value);
 6213|   301k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|   301k|        else {
 6221|   301k|            SCN_EXPECT(false);
 6222|   301k|            SCN_UNREACHABLE;
 6223|   301k|        }
 6224|   301k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   301k|    {
 6124|   301k|        const bool need_skipped_width =
 6125|   301k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 301k]
  |  Branch (6125:33): [True: 0, False: 301k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   301k|        auto it = rng.begin();
 6129|   301k|        std::ptrdiff_t prefix_width = 0;
 6130|   301k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 301k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   301k|        else {
 6138|   301k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   301k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   301k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   301k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   301k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.65k, False: 296k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.65k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.65k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.65k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.65k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.65k|    }                                                  \
  |  |  |  | 3671|   301k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   296k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   296k|            std::tie(it, prefix_width) = prefix_result;
 6140|   296k|        }
 6141|   296k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   296k|        std::ptrdiff_t value_width = 0;
 6145|   296k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 296k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   296k|        else {
 6161|   296k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   296k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   296k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   296k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 16.0k, False: 280k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  16.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  16.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  16.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  16.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  16.0k|    }                                                  \
  |  | 3671|   296k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   296k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   280k|                                             specs, value, loc));
 6163|       |
 6164|   280k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 280k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   280k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   280k|        std::ptrdiff_t postfix_width = 0;
 6173|   280k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 277k, False: 3.76k]
  ------------------
 6174|   277k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   277k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   277k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   277k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   277k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 277k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   277k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   277k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   277k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   277k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   277k|                                 value_width));
 6178|   277k|            std::tie(it, postfix_width) = postfix_result;
 6179|   277k|        }
 6180|       |
 6181|   280k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   280k|                                                 value_width, postfix_width);
 6183|   280k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 280k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   280k|        return it;
 6188|   280k|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3690|   746k|    {
 3691|   746k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   746k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   746k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   746k|        const std::ptrdiff_t sign_len =
 3694|   746k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 177k, False: 568k]
  ------------------
 3695|       |
 3696|   746k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   746k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   746k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   746k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   746k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12.0k, False: 733k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  12.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  12.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  12.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  12.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  12.0k|    }                                                  \
  |  |  |  | 3671|   746k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   733k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|   733k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   746k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   296k|    {
 4170|   296k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   296k|#if !SCN_DISABLE_LOCALE
 4173|   296k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 85.4k, False: 211k]
  ------------------
 4174|  85.4k|            return read_impl<Range>(
 4175|  85.4k|                range, rd,
 4176|  85.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  85.4k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  85.4k|                },
 4179|  85.4k|                value, loc);
 4180|  85.4k|        }
 4181|   211k|#endif
 4182|       |
 4183|   211k|        return read_impl<Range>(
 4184|   211k|            range, rd,
 4185|   211k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   211k|                return r.read_source(SCN_FWD(args)...);
 4187|   211k|            },
 4188|   211k|            value);
 4189|   296k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   412k|    {
 4206|   412k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   412k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   412k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.2k, False: 393k]
  |  |  ------------------
  ------------------
 4208|  19.2k|            return unexpected(r.error());
 4209|  19.2k|        }
 4210|       |
 4211|   393k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   393k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   393k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   393k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   393k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.49k, False: 391k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.49k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.49k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.49k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.49k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.49k|    }                                                  \
  |  |  |  | 3671|   393k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   391k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   391k|        return ranges::next(range.begin(), n);
 4213|   393k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  85.4k|    {
  754|  85.4k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  85.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  85.4k|              cvref<T> obj = *get<T>(fn);
  745|  85.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  85.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  85.4k|              }
  748|  85.4k|              else {
  749|  85.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  85.4k|              }
  751|  85.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  85.4k|    {
  684|  85.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  85.4k|            return static_cast<T*>(s.m_cp);
  686|  85.4k|        }
  687|  85.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  85.4k|            return static_cast<T*>(s.m_p);
  689|  85.4k|        }
  690|  85.4k|        else {
  691|  85.4k|            return reinterpret_cast<T*>(s.m_fp);
  692|  85.4k|        }
  693|  85.4k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  85.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  85.4k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  85.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  85.4k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|  85.4k|        {
  662|  85.4k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|   211k|    {
  754|   211k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   211k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   211k|              cvref<T> obj = *get<T>(fn);
  745|   211k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   211k|                  obj(static_cast<decltype(args)>(args)...);
  747|   211k|              }
  748|   211k|              else {
  749|   211k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   211k|              }
  751|   211k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   211k|    {
  684|   211k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   211k|            return static_cast<T*>(s.m_cp);
  686|   211k|        }
  687|   211k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   211k|            return static_cast<T*>(s.m_p);
  689|   211k|        }
  690|   211k|        else {
  691|   211k|            return reinterpret_cast<T*>(s.m_fp);
  692|   211k|        }
  693|   211k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   211k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   211k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   211k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   211k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSM_:
  661|   211k|        {
  662|   211k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   255k|    {
 4170|   255k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   255k|#if !SCN_DISABLE_LOCALE
 4173|   255k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 72.2k, False: 183k]
  ------------------
 4174|  72.2k|            return read_impl<Range>(
 4175|  72.2k|                range, rd,
 4176|  72.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  72.2k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  72.2k|                },
 4179|  72.2k|                value, loc);
 4180|  72.2k|        }
 4181|   183k|#endif
 4182|       |
 4183|   183k|        return read_impl<Range>(
 4184|   183k|            range, rd,
 4185|   183k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   183k|                return r.read_source(SCN_FWD(args)...);
 4187|   183k|            },
 4188|   183k|            value);
 4189|   255k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   363k|    {
 4206|   363k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   363k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   363k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.9k, False: 352k]
  |  |  ------------------
  ------------------
 4208|  10.9k|            return unexpected(r.error());
 4209|  10.9k|        }
 4210|       |
 4211|   352k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   352k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   352k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   352k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   352k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10.5k, False: 342k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  10.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  10.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  10.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  10.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  10.5k|    }                                                  \
  |  |  |  | 3671|   352k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   342k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   342k|        return ranges::next(range.begin(), n);
 4213|   352k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  72.2k|    {
  754|  72.2k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  72.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  72.2k|              cvref<T> obj = *get<T>(fn);
  745|  72.2k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  72.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  72.2k|              }
  748|  72.2k|              else {
  749|  72.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  72.2k|              }
  751|  72.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  72.2k|    {
  684|  72.2k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  72.2k|            return static_cast<T*>(s.m_cp);
  686|  72.2k|        }
  687|  72.2k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  72.2k|            return static_cast<T*>(s.m_p);
  689|  72.2k|        }
  690|  72.2k|        else {
  691|  72.2k|            return reinterpret_cast<T*>(s.m_fp);
  692|  72.2k|        }
  693|  72.2k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  72.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  72.2k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  72.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  72.2k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|  72.2k|        {
  662|  72.2k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|   183k|    {
  754|   183k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   183k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   183k|              cvref<T> obj = *get<T>(fn);
  745|   183k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   183k|                  obj(static_cast<decltype(args)>(args)...);
  747|   183k|              }
  748|   183k|              else {
  749|   183k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   183k|              }
  751|   183k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   183k|    {
  684|   183k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   183k|            return static_cast<T*>(s.m_cp);
  686|   183k|        }
  687|   183k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   183k|            return static_cast<T*>(s.m_p);
  689|   183k|        }
  690|   183k|        else {
  691|   183k|            return reinterpret_cast<T*>(s.m_fp);
  692|   183k|        }
  693|   183k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   183k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   183k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   183k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   183k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|   183k|        {
  662|   183k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6192|   304k|    {
 6193|   304k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   304k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|   304k|            auto rd = make_reader<T, char_type>();
 6198|   304k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|   304k|                return unexpected(e);
 6200|   304k|            }
 6201|       |
 6202|   304k|            return impl(rd, range, value);
 6203|   304k|        }
 6204|   304k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|   304k|            auto rd = make_reader<T, char_type>();
 6206|   304k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   304k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 304k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   304k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 304k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   304k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   304k|                return impl(rd, range, value);
 6213|   304k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|   304k|        else {
 6221|   304k|            SCN_EXPECT(false);
 6222|   304k|            SCN_UNREACHABLE;
 6223|   304k|        }
 6224|   304k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   304k|    {
 6124|   304k|        const bool need_skipped_width =
 6125|   304k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 304k]
  |  Branch (6125:33): [True: 0, False: 304k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   304k|        auto it = rng.begin();
 6129|   304k|        std::ptrdiff_t prefix_width = 0;
 6130|   304k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 304k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   304k|        else {
 6138|   304k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   304k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   304k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   304k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   304k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.96k, False: 299k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.96k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.96k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.96k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.96k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.96k|    }                                                  \
  |  |  |  | 3671|   304k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   299k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   299k|            std::tie(it, prefix_width) = prefix_result;
 6140|   299k|        }
 6141|   299k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   299k|        std::ptrdiff_t value_width = 0;
 6145|   299k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 299k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   299k|        else {
 6161|   299k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   299k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   299k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   299k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 15.7k, False: 284k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  15.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  15.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  15.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  15.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  15.7k|    }                                                  \
  |  | 3671|   299k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   299k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   284k|                                             specs, value, loc));
 6163|       |
 6164|   284k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 284k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   284k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   284k|        std::ptrdiff_t postfix_width = 0;
 6173|   284k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 280k, False: 4.02k]
  ------------------
 6174|   280k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   280k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   280k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   280k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   280k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 280k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   280k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   280k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   280k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   280k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   280k|                                 value_width));
 6178|   280k|            std::tie(it, postfix_width) = postfix_result;
 6179|   280k|        }
 6180|       |
 6181|   284k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   284k|                                                 value_width, postfix_width);
 6183|   284k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 284k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   284k|        return it;
 6188|   284k|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3690|   753k|    {
 3691|   753k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   753k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   753k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   753k|        const std::ptrdiff_t sign_len =
 3694|   753k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 182k, False: 571k]
  ------------------
 3695|       |
 3696|   753k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   753k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   753k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   753k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   753k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10.2k, False: 743k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  10.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  10.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  10.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  10.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  10.2k|    }                                                  \
  |  |  |  | 3671|   753k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   743k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|   743k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   753k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   299k|    {
 4170|   299k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   299k|#if !SCN_DISABLE_LOCALE
 4173|   299k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 86.6k, False: 213k]
  ------------------
 4174|  86.6k|            return read_impl<Range>(
 4175|  86.6k|                range, rd,
 4176|  86.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  86.6k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  86.6k|                },
 4179|  86.6k|                value, loc);
 4180|  86.6k|        }
 4181|   213k|#endif
 4182|       |
 4183|   213k|        return read_impl<Range>(
 4184|   213k|            range, rd,
 4185|   213k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   213k|                return r.read_source(SCN_FWD(args)...);
 4187|   213k|            },
 4188|   213k|            value);
 4189|   299k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   416k|    {
 4206|   416k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   416k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   416k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.8k, False: 396k]
  |  |  ------------------
  ------------------
 4208|  19.8k|            return unexpected(r.error());
 4209|  19.8k|        }
 4210|       |
 4211|   396k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   396k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   396k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   396k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   396k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 376, False: 396k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    376|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    376|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    376|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    376|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    376|    }                                                  \
  |  |  |  | 3671|   396k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   396k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   396k|        return ranges::next(range.begin(), n);
 4213|   396k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  86.6k|    {
  754|  86.6k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  86.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  86.6k|              cvref<T> obj = *get<T>(fn);
  745|  86.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  86.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  86.6k|              }
  748|  86.6k|              else {
  749|  86.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  86.6k|              }
  751|  86.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  86.6k|    {
  684|  86.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  86.6k|            return static_cast<T*>(s.m_cp);
  686|  86.6k|        }
  687|  86.6k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  86.6k|            return static_cast<T*>(s.m_p);
  689|  86.6k|        }
  690|  86.6k|        else {
  691|  86.6k|            return reinterpret_cast<T*>(s.m_fp);
  692|  86.6k|        }
  693|  86.6k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  86.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  86.6k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  86.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  86.6k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|  86.6k|        {
  662|  86.6k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|   213k|    {
  754|   213k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   213k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   213k|              cvref<T> obj = *get<T>(fn);
  745|   213k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   213k|                  obj(static_cast<decltype(args)>(args)...);
  747|   213k|              }
  748|   213k|              else {
  749|   213k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   213k|              }
  751|   213k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   213k|    {
  684|   213k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   213k|            return static_cast<T*>(s.m_cp);
  686|   213k|        }
  687|   213k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   213k|            return static_cast<T*>(s.m_p);
  689|   213k|        }
  690|   213k|        else {
  691|   213k|            return reinterpret_cast<T*>(s.m_fp);
  692|   213k|        }
  693|   213k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   213k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   213k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   213k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   213k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSM_:
  661|   213k|        {
  662|   213k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   258k|    {
 4170|   258k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   258k|#if !SCN_DISABLE_LOCALE
 4173|   258k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 73.3k, False: 184k]
  ------------------
 4174|  73.3k|            return read_impl<Range>(
 4175|  73.3k|                range, rd,
 4176|  73.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  73.3k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  73.3k|                },
 4179|  73.3k|                value, loc);
 4180|  73.3k|        }
 4181|   184k|#endif
 4182|       |
 4183|   184k|        return read_impl<Range>(
 4184|   184k|            range, rd,
 4185|   184k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   184k|                return r.read_source(SCN_FWD(args)...);
 4187|   184k|            },
 4188|   184k|            value);
 4189|   258k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   368k|    {
 4206|   368k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   368k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   368k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.2k, False: 356k]
  |  |  ------------------
  ------------------
 4208|  11.2k|            return unexpected(r.error());
 4209|  11.2k|        }
 4210|       |
 4211|   356k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   356k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   356k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   356k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   356k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 9.85k, False: 346k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  9.85k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  9.85k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  9.85k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  9.85k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  9.85k|    }                                                  \
  |  |  |  | 3671|   356k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   346k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   346k|        return ranges::next(range.begin(), n);
 4213|   356k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  73.3k|    {
  754|  73.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  73.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  73.3k|              cvref<T> obj = *get<T>(fn);
  745|  73.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  73.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  73.3k|              }
  748|  73.3k|              else {
  749|  73.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  73.3k|              }
  751|  73.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  73.3k|    {
  684|  73.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  73.3k|            return static_cast<T*>(s.m_cp);
  686|  73.3k|        }
  687|  73.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  73.3k|            return static_cast<T*>(s.m_p);
  689|  73.3k|        }
  690|  73.3k|        else {
  691|  73.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  73.3k|        }
  693|  73.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  73.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  73.3k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  73.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  73.3k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|  73.3k|        {
  662|  73.3k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|   184k|    {
  754|   184k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   184k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   184k|              cvref<T> obj = *get<T>(fn);
  745|   184k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   184k|                  obj(static_cast<decltype(args)>(args)...);
  747|   184k|              }
  748|   184k|              else {
  749|   184k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   184k|              }
  751|   184k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   184k|    {
  684|   184k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   184k|            return static_cast<T*>(s.m_cp);
  686|   184k|        }
  687|   184k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   184k|            return static_cast<T*>(s.m_p);
  689|   184k|        }
  690|   184k|        else {
  691|   184k|            return reinterpret_cast<T*>(s.m_fp);
  692|   184k|        }
  693|   184k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   184k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   184k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   184k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   184k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|   184k|        {
  662|   184k|        }
_ZN3scn2v34impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1038|  1.23M|{
 1039|  1.23M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1039:19): [Folded - Ignored]
  |  Branch (1039:19): [Folded - Ignored]
  ------------------
 1040|  1.23M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1040:19): [Folded - Ignored]
  ------------------
 1041|  1.23M|        return r;
 1042|  1.23M|    }
 1043|  1.23M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1043:24): [Folded - Ignored]
  ------------------
 1044|  1.23M|                           ranges::const_iterator_t<Range>,
 1045|  1.23M|                           typename detail::basic_scan_buffer<
 1046|  1.23M|                               detail::char_t<Range>>::forward_iterator>) {
 1047|  1.23M|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1047:23): [Folded - Ignored]
  ------------------
 1048|  1.23M|            auto seg = r.begin().contiguous_segment();
 1049|  1.23M|            auto dist =
 1050|  1.23M|                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|  1.23M|            return seg.substr(0, std::min(seg.size(), dist));
 1052|  1.23M|        }
 1053|  1.23M|        else {
 1054|  1.23M|            return r.begin().contiguous_segment();
 1055|  1.23M|        }
 1056|  1.23M|    }
 1057|  1.23M|    else {
 1058|  1.23M|        return std::basic_string_view<detail::char_t<Range>>{};
 1059|  1.23M|    }
 1060|  1.23M|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|  1.10M|{
 2061|  1.10M|    auto it = range.begin();
 2062|  2.10M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 2.08M, False: 14.2k]
  ------------------
 2063|  2.08M|        const auto val =
 2064|  2.08M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  2.08M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  2.08M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.07M, False: 10.5k]
  |  |  ------------------
  ------------------
 2066|  2.07M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  2.07M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  2.07M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 1.08M, False: 992k]
  ------------------
 2069|  1.08M|                return it;
 2070|  1.08M|            }
 2071|  2.07M|        }
 2072|  1.00M|        it = val.iterator;
 2073|  1.00M|    }
 2074|       |
 2075|  14.2k|    return it;
 2076|  1.10M|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|  2.08M|{
 1899|  2.08M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  2.08M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.08M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  2.08M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  2.08M|    auto it = range.begin();
 1903|  2.08M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  2.08M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  2.08M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.5k, False: 2.07M]
  |  |  ------------------
  ------------------
 1906|  10.5k|        ++it;
 1907|  10.5k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|  10.5k|        return {it, {}};
 1909|  10.5k|    }
 1910|       |
 1911|  2.07M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 2.05M, False: 22.9k]
  ------------------
 1912|  2.05M|        ++it;
 1913|  2.05M|        return {it, string_type(1, *range.begin())};
 1914|  2.05M|    }
 1915|       |
 1916|  22.9k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|  22.9k|    return {it, string_type{range.begin(), it}};
 1918|  2.07M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1154|  10.5k|{
 1155|  10.5k|    auto it = input.begin();
 1156|   133k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 132k, False: 1.15k]
  ------------------
 1157|   132k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 9.37k, False: 123k]
  ------------------
 1158|  9.37k|            break;
 1159|  9.37k|        }
 1160|   132k|    }
 1161|  10.5k|    return it;
 1162|  10.5k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  22.9k|    {
  283|  22.9k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  22.9k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  22.9k|    {
  252|  22.9k|        constexpr iter_difference_t<I> zero{0};
  253|  22.9k|        iter_difference_t<I> counter{0};
  254|       |
  255|  69.4k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 47.4k, False: 22.0k]
  |  Branch (255:30): [True: 46.5k, False: 920]
  ------------------
  256|  46.5k|            ++i;
  257|  46.5k|            ++counter;
  258|  46.5k|        }
  259|       |
  260|  22.9k|        return counter;
  261|  22.9k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1889|  2.08M|    {
 1890|  2.08M|        return !codepoint.empty();
 1891|  2.08M|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|  1.10M|{
 2082|  1.10M|    return read_until_code_point(range, std::not_fn(pred));
 2083|  1.10M|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|  1.23M|{
 2951|  1.23M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 1.23M, False: 0]
  ------------------
 2952|  1.23M|        auto it = read_while_classic_space(range);
 2953|  1.23M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  1.23M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.2k, False: 1.22M]
  |  |  ------------------
  ------------------
 2955|  14.2k|            return unexpected(e);
 2956|  14.2k|        }
 2957|       |
 2958|  1.22M|        return it;
 2959|  1.23M|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  1.23M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|  1.23M|{
 2117|  1.23M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  1.23M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  1.23M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  1.23M|        auto buf = make_contiguous_buffer(range);
 2121|  1.23M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  1.23M|        return ranges::next(range.begin(),
 2123|  1.23M|                            ranges::distance(buf.view().begin(), it));
 2124|  1.23M|    }
 2125|  1.23M|    else {
 2126|  1.23M|        auto it = range.begin();
 2127|       |
 2128|  1.23M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  1.23M|            auto seg = get_contiguous_beginning(range);
 2130|  1.23M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  1.23M|                seg_it != seg.end()) {
  ------------------
  |  Branch (2131:17): [True: 136k, False: 1.10M]
  ------------------
 2132|   136k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   136k|            }
 2134|  1.10M|            ranges::advance(it, seg.size());
 2135|  1.10M|        }
 2136|       |
 2137|  1.10M|        return read_while_code_point(
 2138|  1.10M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  1.23M|    }
 2140|  1.23M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|  1.10M|    {
  754|  1.10M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|  2.07M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.07M|              cvref<T> obj = *get<T>(fn);
  745|  2.07M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  2.07M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.07M|              }
  748|  2.07M|              else {
  749|  2.07M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.07M|              }
  751|  2.07M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  2.07M|    {
  684|  2.07M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  2.07M|            return static_cast<T*>(s.m_cp);
  686|  2.07M|        }
  687|  2.07M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  2.07M|            return static_cast<T*>(s.m_p);
  689|  2.07M|        }
  690|  2.07M|        else {
  691|  2.07M|            return reinterpret_cast<T*>(s.m_fp);
  692|  2.07M|        }
  693|  2.07M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|  2.07M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|  1.10M|        {
  662|  1.10M|        }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|   373k|{
  981|   373k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|   373k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|   373k|        return true;
  984|   373k|    }
  985|   373k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (985:24): [Folded - Ignored]
  ------------------
  986|   373k|                           ranges::const_iterator_t<Range>,
  987|   373k|                           typename detail::basic_scan_buffer<
  988|   373k|                               detail::char_t<Range>>::forward_iterator>) {
  989|   373k|        auto beg = r.begin();
  990|   373k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 373k, False: 0]
  ------------------
  991|   373k|            return false;
  992|   373k|        }
  993|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (993:23): [Folded - Ignored]
  ------------------
  994|      0|            return beg.contiguous_segment().end() ==
  995|      0|                   ranges::end(r).contiguous_segment().end();
  996|      0|        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|      0|    }
 1005|   373k|    else {
 1006|   373k|        return false;
 1007|   373k|    }
 1008|   373k|}
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|  2.34M|    {
  763|  2.34M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  2.34M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  2.34M|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1856|   962k|{
 1857|   962k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|   962k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   962k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|   962k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|   962k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|   962k|        if (sz < count) {
 1862|   962k|            return unexpected(eof_error::eof);
 1863|   962k|        }
 1864|       |
 1865|   962k|        return ranges::next(range.begin(), count);
 1866|   962k|    }
 1867|   962k|    else {
 1868|   962k|        auto it = range.begin();
 1869|   962k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 566k, False: 396k]
  ------------------
 1870|   566k|            return ranges::next(it, count);
 1871|   566k|        }
 1872|       |
 1873|  1.51M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 1.16M, False: 350k]
  ------------------
 1874|  1.16M|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 45.4k, False: 1.11M]
  ------------------
 1875|  45.4k|                return unexpected(eof_error::eof);
 1876|  45.4k|            }
 1877|  1.16M|        }
 1878|       |
 1879|   350k|        return it;
 1880|   396k|    }
 1881|   962k|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1094|   962k|{
 1095|   962k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|   962k|        return r.size();
 1097|   962k|    }
 1098|   962k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|   962k|                           ranges::const_iterator_t<Range>,
 1100|   962k|                           typename detail::basic_scan_buffer<
 1101|   962k|                               detail::char_t<Range>>::forward_iterator>) {
 1102|   962k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1102:23): [Folded - Ignored]
  ------------------
 1103|   962k|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|   962k|        }
 1105|   962k|        else {
 1106|   962k|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1106:17): [True: 962k, False: 0]
  ------------------
 1107|   962k|                return static_cast<size_t>(
 1108|   962k|                    r.begin().parent()->chars_available() -
 1109|   962k|                    r.begin().position());
 1110|   962k|            }
 1111|      0|            return r.begin().contiguous_segment().size();
 1112|   962k|        }
 1113|   962k|    }
 1114|   962k|    else {
 1115|   962k|        return 0;
 1116|   962k|    }
 1117|   962k|}
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|   822k|    {
  754|   822k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEwE_clESE_w:
  743|  1.17M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.17M|              cvref<T> obj = *get<T>(fn);
  745|  1.17M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.17M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.17M|              }
  748|  1.17M|              else {
  749|  1.17M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.17M|              }
  751|  1.17M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  1.17M|    {
  684|  1.17M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.17M|            return static_cast<T*>(s.m_cp);
  686|  1.17M|        }
  687|  1.17M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.17M|            return static_cast<T*>(s.m_p);
  689|  1.17M|        }
  690|  1.17M|        else {
  691|  1.17M|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.17M|        }
  693|  1.17M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEELPv0EEEPT_:
  661|   822k|        {
  662|   822k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6036|   278k|    {
 6037|   278k|        const bool need_skipped_width =
 6038|   278k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 278k]
  |  Branch (6038:33): [True: 0, False: 278k]
  ------------------
 6039|   278k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|   278k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 278k]
  ------------------
 6043|   278k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 278k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|   278k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 278k, False: 0]
  |  Branch (6047:56): [True: 278k, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|   278k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 278k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|   555k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|   278k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   278k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   278k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   278k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.20k, False: 276k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.20k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.20k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.20k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.20k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.20k|    }                                                  \
  |  |  |  | 3671|   278k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   276k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|   555k|                            make_eof_scan_error));
 6058|       |
 6059|   555k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 276k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|   276k|            return result_type{it, 0};
 6067|   555k|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|   278k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|   592k|{
 1976|   592k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|   592k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|   592k|{
 1957|   592k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|   592k|        return std::find_if(range.begin(), range.end(), pred);
 1959|   592k|    }
 1960|   592k|    else {
 1961|   592k|        auto first = range.begin();
 1962|   851k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 849k, False: 2.23k]
  ------------------
 1963|   849k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 590k, False: 259k]
  ------------------
 1964|   590k|                return first;
 1965|   590k|            }
 1966|   849k|        }
 1967|  2.23k|        return first;
 1968|   592k|    }
 1969|   592k|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   371k|    {
  108|   371k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   371k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   371k|    {
   94|   371k|        iter_difference_t<I> counter{0};
   95|   955k|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 584k, False: 371k]
  ------------------
   96|   584k|            ++i;
   97|   584k|            ++counter;
   98|   584k|        }
   99|   371k|        return counter;
  100|   371k|    }
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1779|   125k|    {
 1780|   125k|        auto stdloc = loc.get<std::locale>();
 1781|   125k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|   125k|        grouping = numpunct.grouping();
 1783|   125k|        thousands_sep =
 1784|   125k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 125k]
  ------------------
 1785|   125k|        decimal_point = numpunct.decimal_point();
 1786|   125k|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1716|   125k|{
 1717|   125k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 125k, False: 0]
  ------------------
 1718|   125k|        return std::use_facet<Facet>(stdloc);
 1719|   125k|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|   125k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1845|   772k|{
 1846|   772k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   772k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.45k, False: 770k]
  |  |  ------------------
  ------------------
 1847|  1.45k|        return unexpected(e);
 1848|  1.45k|    }
 1849|       |
 1850|   770k|    return ranges::next(range.begin());
 1851|   772k|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  1.23M|{
  950|  1.23M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.40k, False: 1.23M]
  |  |  ------------------
  ------------------
  951|  4.40k|        return eof_error::eof;
  952|  4.40k|    }
  953|  1.23M|    return eof_error::good;
  954|  1.23M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  1.82M|{
  944|  1.82M|    return is_range_eof(r.begin(), r.end());
  945|  1.82M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  1.82M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  1.82M|    {
  937|  1.82M|        return begin == end;
  938|  1.82M|    }
  939|  1.82M|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|   770k|    {
  296|   770k|        ++x;
  297|   770k|        return x;
  298|   770k|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3140|   376k|{
 3141|   376k|    auto r = read_one_of_code_unit(range, "+-");
 3142|   376k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 374k, False: 2.04k]
  ------------------
 3143|   374k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 374k, False: 70]
  ------------------
 3144|   374k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|   374k|        }
 3146|     70|        return unexpected(eof_error::eof);
 3147|   374k|    }
 3148|       |
 3149|  2.04k|    auto& it = *r;
 3150|  2.04k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 1.77k, False: 273]
  ------------------
 3151|  1.77k|        return std::pair{it, sign_type::minus_sign};
 3152|  1.77k|    }
 3153|    273|    return std::pair{it, sign_type::plus_sign};
 3154|  2.04k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2271|   556k|{
 2272|   556k|    auto it = read_code_unit(range);
 2273|   556k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   556k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 790, False: 555k]
  |  |  ------------------
  ------------------
 2274|    790|        return unexpected(make_eof_parse_error(it.error()));
 2275|    790|    }
 2276|       |
 2277|  1.11M|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 1.11M, False: 546k]
  ------------------
 2278|  1.11M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 8.34k, False: 1.10M]
  ------------------
 2279|  8.34k|            return *it;
 2280|  8.34k|        }
 2281|  1.11M|    }
 2282|       |
 2283|   546k|    return unexpected(parse_error::error);
 2284|   555k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2230|   962k|{
 2231|   962k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|   962k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|   962k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|   962k|        if (range.size() < str.size()) {
 2236|   962k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|   962k|        }
 2238|   962k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|   962k|            return unexpected(parse_error::error);
 2240|   962k|        }
 2241|   962k|        return ranges::next(range.begin(), str.size());
 2242|   962k|    }
 2243|   962k|    else {
 2244|   962k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|   962k|            if (ch < 'A' || ch > 'Z') {
 2246|   962k|                return ch;
 2247|   962k|            }
 2248|   962k|            return static_cast<char_type>(ch +
 2249|   962k|                                          static_cast<char_type>('a' - 'A'));
 2250|   962k|        };
 2251|       |
 2252|   962k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|   962k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   962k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   962k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   962k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 45.4k, False: 916k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  45.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  45.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  45.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  45.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  45.4k|    }                                                  \
  |  |  |  | 3671|   962k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   916k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|   916k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|   916k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|   916k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|   916k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 916k, False: 420]
  |  |  ------------------
  ------------------
 2257|   916k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|   916k|                    return ascii_tolower(a) ==
 2259|   916k|                           static_cast<detail::char_t<Range>>(b);
 2260|   916k|                }))) {
 2261|   916k|            return unexpected(parse_error::error);
 2262|   916k|        }
 2263|       |
 2264|    420|        return it;
 2265|   916k|    }
 2266|   962k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlwE_clEw:
 2244|  1.04M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.04M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 788k, False: 252k]
  |  Branch (2245:29): [True: 245k, False: 7.70k]
  ------------------
 2246|  1.03M|                return ch;
 2247|  1.03M|            }
 2248|  7.70k|            return static_cast<char_type>(ch +
 2249|  7.70k|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.04M|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2145|   216k|{
 2146|   216k|    auto it = read_code_unit(range);
 2147|   216k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   216k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 666, False: 215k]
  |  |  ------------------
  ------------------
 2148|    666|        return unexpected(make_eof_parse_error(it.error()));
 2149|    666|    }
 2150|       |
 2151|   215k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   215k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 214k, False: 645]
  |  |  ------------------
  ------------------
 2152|   215k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|   214k|        return unexpected(parse_error::error);
 2154|   214k|    }
 2155|       |
 2156|    645|    return *it;
 2157|   215k|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1995|   592k|{
 1996|   592k|    auto it = read_while_code_unit(range, pred);
 1997|   592k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 370k, False: 221k]
  ------------------
 1998|   370k|        return unexpected(parse_error::error);
 1999|   370k|    }
 2000|   221k|    return it;
 2001|   592k|}
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1620|   213k|    {
 1621|   213k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|   213k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|   213k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|   213k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|   213k|            m_storage.reset();
 1627|   213k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|   213k|        }
 1629|   213k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|   213k|                                          std::basic_string<CharT>>) {
 1631|   213k|            m_storage.emplace(SCN_FWD(range));
 1632|   213k|            m_view = string_view_type{*m_storage};
 1633|   213k|        }
 1634|   213k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|   213k|                                          typename detail::basic_scan_buffer<
 1636|   213k|                                              value_t>::forward_iterator> &&
 1637|   213k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|   213k|            auto beg_seg = range.begin().contiguous_segment();
 1639|   213k|            auto end_seg = range.end().contiguous_segment();
 1640|   213k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|   213k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.46k, False: 206k]
  |  |  ------------------
  ------------------
 1641|   213k|                             detail::to_address(end_seg.end()))) {
 1642|  7.46k|                auto& str = m_storage.emplace();
 1643|  7.46k|                str.reserve(range.end().position() - range.begin().position());
 1644|  7.46k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  7.46k|                m_view = string_view_type{str};
 1646|  7.46k|                return;
 1647|  7.46k|            }
 1648|       |
 1649|   206k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   206k|                                                            end_seg.data());
 1651|   206k|            m_storage.reset();
 1652|   206k|        }
 1653|   213k|        else {
 1654|   213k|            auto& str = m_storage.emplace();
 1655|   213k|            if constexpr (ranges::sized_range<Range>) {
 1656|   213k|                str.reserve(range.size());
 1657|   213k|            }
 1658|   213k|            if constexpr (ranges::common_range<Range>) {
 1659|   213k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|   213k|                          std::back_inserter(str));
 1661|   213k|            }
 1662|   213k|            else {
 1663|   213k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|   213k|                     ++it) {
 1665|   213k|                    str.push_back(*it);
 1666|   213k|                }
 1667|   213k|            }
 1668|   213k|            m_view = string_view_type{str};
 1669|   213k|        }
 1670|   213k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1581|  1.95M|    {
 1582|  1.95M|        return m_view;
 1583|  1.95M|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1571|  1.48M|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6078|   153k|    {
 6079|   153k|        const bool need_skipped_width =
 6080|   153k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 153k]
  |  Branch (6080:33): [True: 0, False: 153k]
  ------------------
 6081|   153k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|   153k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 153k]
  ------------------
 6084|   153k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 153k]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|   153k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 153k, False: 0]
  ------------------
 6093|   153k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 0, False: 153k]
  ------------------
 6094|   153k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 0]
  ------------------
 6096|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|   153k|        return result_type{rng.begin(), 0};
 6118|   153k|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1856|   963k|{
 1857|   963k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|   963k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   963k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|   963k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|   963k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|   963k|        if (sz < count) {
  ------------------
  |  Branch (1861:13): [True: 45.4k, False: 917k]
  ------------------
 1862|  45.4k|            return unexpected(eof_error::eof);
 1863|  45.4k|        }
 1864|       |
 1865|   917k|        return ranges::next(range.begin(), count);
 1866|   963k|    }
 1867|   963k|    else {
 1868|   963k|        auto it = range.begin();
 1869|   963k|        if (guaranteed_minimum_size(range) >= count) {
 1870|   963k|            return ranges::next(it, count);
 1871|   963k|        }
 1872|       |
 1873|   963k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1874|   963k|            if (it == range.end()) {
 1875|   963k|                return unexpected(eof_error::eof);
 1876|   963k|            }
 1877|   963k|        }
 1878|       |
 1879|   963k|        return it;
 1880|   963k|    }
 1881|   963k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|   954k|{
 1899|   954k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   954k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   954k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   954k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   954k|    auto it = range.begin();
 1903|   954k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   954k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   954k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 954k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|   954k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 954k, False: 0]
  ------------------
 1912|   954k|        ++it;
 1913|   954k|        return {it, string_type(1, *range.begin())};
 1914|   954k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|   954k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|  1.91M|{
  944|  1.91M|    return is_range_eof(r.begin(), r.end());
  945|  1.91M|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|  1.91M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  1.91M|    {
  937|  1.91M|        return begin == end;
  938|  1.91M|    }
  939|  1.91M|}
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|   221k|    {
  190|   221k|        i = std::move(bound);
  191|   221k|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1889|   954k|    {
 1890|   954k|        return !codepoint.empty();
 1891|   954k|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|   960k|{
  950|   960k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|   960k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.31k, False: 957k]
  |  |  ------------------
  ------------------
  951|  3.31k|        return eof_error::eof;
  952|  3.31k|    }
  953|   957k|    return eof_error::good;
  954|   960k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|   492k|{
 1846|   492k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   492k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 372, False: 492k]
  |  |  ------------------
  ------------------
 1847|    372|        return unexpected(e);
 1848|    372|    }
 1849|       |
 1850|   492k|    return ranges::next(range.begin());
 1851|   492k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   492k|    {
  296|   492k|        ++x;
  297|   492k|        return x;
  298|   492k|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|   372k|{
 3141|   372k|    auto r = read_one_of_code_unit(range, "+-");
 3142|   372k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 371k, False: 1.14k]
  ------------------
 3143|   371k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 371k, False: 24]
  ------------------
 3144|   371k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|   371k|        }
 3146|     24|        return unexpected(eof_error::eof);
 3147|   371k|    }
 3148|       |
 3149|  1.14k|    auto& it = *r;
 3150|  1.14k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 968, False: 177]
  ------------------
 3151|    968|        return std::pair{it, sign_type::minus_sign};
 3152|    968|    }
 3153|    177|    return std::pair{it, sign_type::plus_sign};
 3154|  1.14k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|   414k|{
 2272|   414k|    auto it = read_code_unit(range);
 2273|   414k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   414k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 180, False: 414k]
  |  |  ------------------
  ------------------
 2274|    180|        return unexpected(make_eof_parse_error(it.error()));
 2275|    180|    }
 2276|       |
 2277|   828k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 828k, False: 411k]
  ------------------
 2278|   828k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 3.37k, False: 825k]
  ------------------
 2279|  3.37k|            return *it;
 2280|  3.37k|        }
 2281|   828k|    }
 2282|       |
 2283|   411k|    return unexpected(parse_error::error);
 2284|   414k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|   963k|{
 2231|   963k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|   963k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|   963k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|   963k|        if (range.size() < str.size()) {
 2236|   963k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|   963k|        }
 2238|   963k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|   963k|            return unexpected(parse_error::error);
 2240|   963k|        }
 2241|   963k|        return ranges::next(range.begin(), str.size());
 2242|   963k|    }
 2243|   963k|    else {
 2244|   963k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|   963k|            if (ch < 'A' || ch > 'Z') {
 2246|   963k|                return ch;
 2247|   963k|            }
 2248|   963k|            return static_cast<char_type>(ch +
 2249|   963k|                                          static_cast<char_type>('a' - 'A'));
 2250|   963k|        };
 2251|       |
 2252|   963k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|   963k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   963k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   963k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   963k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 45.4k, False: 917k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  45.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  45.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  45.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  45.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  45.4k|    }                                                  \
  |  |  |  | 3671|   963k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   917k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|   917k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|   917k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|   917k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|   917k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 917k, False: 420]
  |  |  ------------------
  ------------------
 2257|   917k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|   917k|                    return ascii_tolower(a) ==
 2259|   917k|                           static_cast<detail::char_t<Range>>(b);
 2260|   917k|                }))) {
 2261|   917k|            return unexpected(parse_error::error);
 2262|   917k|        }
 2263|       |
 2264|    420|        return it;
 2265|   917k|    }
 2266|   963k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2244|  1.04M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.04M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 788k, False: 253k]
  |  Branch (2245:29): [True: 245k, False: 7.95k]
  ------------------
 2246|  1.03M|                return ch;
 2247|  1.03M|            }
 2248|  7.95k|            return static_cast<char_type>(ch +
 2249|  7.95k|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.04M|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|  78.2k|{
 2146|  78.2k|    auto it = read_code_unit(range);
 2147|  78.2k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  78.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 192, False: 78.0k]
  |  |  ------------------
  ------------------
 2148|    192|        return unexpected(make_eof_parse_error(it.error()));
 2149|    192|    }
 2150|       |
 2151|  78.0k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  78.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 77.8k, False: 270]
  |  |  ------------------
  ------------------
 2152|  78.0k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  77.8k|        return unexpected(parse_error::error);
 2154|  77.8k|    }
 2155|       |
 2156|    270|    return *it;
 2157|  78.0k|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|   229k|{
 1976|   229k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|   229k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|   229k|{
 1957|   229k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|   229k|        return std::find_if(range.begin(), range.end(), pred);
 1959|   229k|    }
 1960|   229k|    else {
 1961|   229k|        auto first = range.begin();
 1962|   229k|        for (; first != range.end(); ++first) {
 1963|   229k|            if (pred(*first)) {
 1964|   229k|                return first;
 1965|   229k|            }
 1966|   229k|        }
 1967|   229k|        return first;
 1968|   229k|    }
 1969|   229k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|   373k|{
 2951|   373k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 373k, False: 0]
  ------------------
 2952|   373k|        auto it = read_while_classic_space(range);
 2953|   373k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   373k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   373k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.64k, False: 370k]
  |  |  ------------------
  ------------------
 2955|  2.64k|            return unexpected(e);
 2956|  2.64k|        }
 2957|       |
 2958|   370k|        return it;
 2959|   373k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   373k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|   373k|{
 2117|   373k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|   373k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|   373k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|   373k|        auto buf = make_contiguous_buffer(range);
 2121|   373k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|   373k|        return ranges::next(range.begin(),
 2123|   373k|                            ranges::distance(buf.view().begin(), it));
 2124|   373k|    }
 2125|   373k|    else {
 2126|   373k|        auto it = range.begin();
 2127|       |
 2128|   373k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|   373k|            auto seg = get_contiguous_beginning(range);
 2130|   373k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|   373k|                seg_it != seg.end()) {
 2132|   373k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   373k|            }
 2134|   373k|            ranges::advance(it, seg.size());
 2135|   373k|        }
 2136|       |
 2137|   373k|        return read_while_code_point(
 2138|   373k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   373k|    }
 2140|   373k|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|   373k|{
 2082|   373k|    return read_until_code_point(range, std::not_fn(pred));
 2083|   373k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|   571k|{
 2061|   571k|    auto it = range.begin();
 2062|  1.08M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 954k, False: 128k]
  ------------------
 2063|   954k|        const auto val =
 2064|   954k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   954k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   954k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 954k, False: 0]
  |  |  ------------------
  ------------------
 2066|   954k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   954k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   954k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 443k, False: 511k]
  ------------------
 2069|   443k|                return it;
 2070|   443k|            }
 2071|   954k|        }
 2072|   511k|        it = val.iterator;
 2073|   511k|    }
 2074|       |
 2075|   128k|    return it;
 2076|   571k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|   373k|    {
  754|   373k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|   588k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   588k|              cvref<T> obj = *get<T>(fn);
  745|   588k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   588k|                  obj(static_cast<decltype(args)>(args)...);
  747|   588k|              }
  748|   588k|              else {
  749|   588k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   588k|              }
  751|   588k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   588k|    {
  684|   588k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   588k|            return static_cast<T*>(s.m_cp);
  686|   588k|        }
  687|   588k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   588k|            return static_cast<T*>(s.m_p);
  689|   588k|        }
  690|   588k|        else {
  691|   588k|            return reinterpret_cast<T*>(s.m_fp);
  692|   588k|        }
  693|   588k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2138|   588k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|   373k|        {
  662|   373k|        }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|   778k|    {
  304|   778k|        ranges::advance(x, n);
  305|   778k|        return x;
  306|   778k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|   778k|    {
  268|   778k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   778k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|   778k|    {
  181|  2.51M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 1.73M, False: 778k]
  ------------------
  182|  1.73M|            ++i;
  183|  1.73M|        }
  184|   778k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6192|  91.7k|    {
 6193|  91.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  91.7k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|  91.7k|            auto rd = make_reader<T, char_type>();
 6198|  91.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|  91.7k|                return unexpected(e);
 6200|  91.7k|            }
 6201|       |
 6202|  91.7k|            return impl(rd, range, value);
 6203|  91.7k|        }
 6204|  91.7k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|  91.7k|            auto rd = make_reader<T, char_type>();
 6206|  91.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  91.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 91.7k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|  91.7k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 91.7k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|  91.7k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|  91.7k|                return impl(rd, range, value);
 6213|  91.7k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|  91.7k|        else {
 6221|  91.7k|            SCN_EXPECT(false);
 6222|  91.7k|            SCN_UNREACHABLE;
 6223|  91.7k|        }
 6224|  91.7k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|   557k|    {
 3040|   557k|        reader_error_handler eh{};
 3041|   557k|        get_derived().check_specs_impl(specs, eh);
 3042|   557k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|   557k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 557k]
  |  |  ------------------
  ------------------
 3043|      0|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|      0|        }
 3045|   557k|        return {};
 3046|   557k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3050|   557k|    {
 3051|   557k|        return static_cast<Derived&>(*this);
 3052|   557k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4144|   557k|    {
 4145|   557k|        detail::check_float_type_specs(specs, eh);
 4146|   557k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|  91.7k|    {
 6124|  91.7k|        const bool need_skipped_width =
 6125|  91.7k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 91.7k]
  |  Branch (6125:33): [True: 0, False: 91.7k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  91.7k|        auto it = rng.begin();
 6129|  91.7k|        std::ptrdiff_t prefix_width = 0;
 6130|  91.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 91.7k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  91.7k|        else {
 6138|  91.7k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  91.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  91.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  91.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  91.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 700, False: 91.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    700|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    700|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    700|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    700|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    700|    }                                                  \
  |  |  |  | 3671|  91.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  91.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  91.0k|            std::tie(it, prefix_width) = prefix_result;
 6140|  91.0k|        }
 6141|  91.0k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  91.0k|        std::ptrdiff_t value_width = 0;
 6145|  91.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 91.0k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  91.0k|        else {
 6161|  91.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  91.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  91.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  91.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 40.6k, False: 50.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  40.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  40.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  40.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  40.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  40.6k|    }                                                  \
  |  | 3671|  91.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  91.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  50.3k|                                             specs, value, loc));
 6163|       |
 6164|  50.3k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 50.3k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  50.3k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  50.3k|        std::ptrdiff_t postfix_width = 0;
 6173|  50.3k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 50.1k, False: 264]
  ------------------
 6174|  50.1k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  50.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  50.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  50.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  50.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 50.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  50.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  50.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  50.1k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  50.1k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  50.1k|                                 value_width));
 6178|  50.1k|            std::tie(it, postfix_width) = postfix_result;
 6179|  50.1k|        }
 6180|       |
 6181|  50.3k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  50.3k|                                                 value_width, postfix_width);
 6183|  50.3k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 50.3k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  50.3k|        return it;
 6188|  50.3k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3034|  1.05M|    {
 3035|  1.05M|        return true;
 3036|  1.05M|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4216|   553k|    {
 4217|   553k|        unsigned options{};
 4218|   553k|        if (specs.localized) {
  ------------------
  |  Branch (4218:13): [True: 125k, False: 427k]
  ------------------
 4219|   125k|            options |= float_reader_base::allow_thsep;
 4220|   125k|        }
 4221|       |
 4222|   553k|        SCN_GCC_COMPAT_PUSH
 4223|   553k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4224|       |
 4225|   553k|        switch (specs.type) {
 4226|   122k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4226:13): [True: 122k, False: 431k]
  ------------------
 4227|   122k|                return options | float_reader_base::allow_fixed;
 4228|       |
 4229|  50.0k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4229:13): [True: 50.0k, False: 503k]
  ------------------
 4230|  50.0k|                return options | float_reader_base::allow_scientific;
 4231|       |
 4232|   130k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4232:13): [True: 130k, False: 422k]
  ------------------
 4233|   130k|                return options | float_reader_base::allow_hex;
 4234|       |
 4235|   125k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4235:13): [True: 125k, False: 427k]
  ------------------
 4236|   125k|                return options | float_reader_base::allow_scientific |
 4237|   125k|                       float_reader_base::allow_fixed;
 4238|       |
 4239|   125k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4239:13): [True: 125k, False: 427k]
  ------------------
 4240|   125k|                return options | float_reader_base::allow_scientific |
 4241|   125k|                       float_reader_base::allow_fixed |
 4242|   125k|                       float_reader_base::allow_hex;
 4243|       |
 4244|      0|            default:
  ------------------
  |  Branch (4244:13): [True: 0, False: 553k]
  ------------------
 4245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4246|   553k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4247|   553k|        }
 4248|       |
 4249|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4250|   553k|    }
_ZN3scn2v34impl12float_readerIwEC2Ej:
 3659|   553k|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2Ev:
 1770|   741k|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIwEC2Ev:
 1531|  1.48M|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIwE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3690|   167k|    {
 3691|   167k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   167k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   167k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   167k|        const std::ptrdiff_t sign_len =
 3694|   167k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 305, False: 166k]
  ------------------
 3695|       |
 3696|   167k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   167k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   167k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   167k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   167k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 29.6k, False: 137k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  29.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  29.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  29.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  29.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  29.6k|    }                                                  \
  |  |  |  | 3671|   167k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   137k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|   137k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   167k|    }
_ZN3scn2v34impl12float_readerIwE17handle_separatorsEv:
 4056|   511k|    {
 4057|   511k|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4057:13): [True: 511k, False: 0]
  ------------------
 4058|   511k|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4058:13): [True: 511k, False: 0]
  ------------------
 4059|   511k|            return;
 4060|   511k|        }
 4061|       |
 4062|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4063|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4063:13): [True: 0, False: 0]
  ------------------
 4064|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4064:27): [True: 0, False: 0]
  ------------------
 4065|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4065:21): [True: 0, False: 0]
  ------------------
 4066|      0|                    ch = CharT{'.'};
 4067|      0|                }
 4068|      0|            }
 4069|      0|        }
 4070|       |
 4071|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4071:13): [True: 0, False: 0]
  ------------------
 4072|      0|            return;
 4073|      0|        }
 4074|       |
 4075|      0|        auto first =
 4076|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4077|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4077:13): [True: 0, False: 0]
  ------------------
 4078|      0|            return;
 4079|      0|        }
 4080|       |
 4081|      0|        m_thsep_indices.push_back(
 4082|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4083|       |
 4084|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4084:31): [True: 0, False: 0]
  ------------------
 4085|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4085:17): [True: 0, False: 0]
  ------------------
 4086|      0|                *first++ = std::move(*it);
 4087|      0|            }
 4088|      0|            else {
 4089|      0|                m_thsep_indices.push_back(
 4090|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4091|      0|            }
 4092|      0|        }
 4093|       |
 4094|      0|        str.erase(first, str.end());
 4095|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1586|   487k|    {
 1587|   487k|        return m_storage.has_value();
 1588|   487k|    }
_ZNR3scn2v34impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1591|   284k|    {
 1592|   284k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|   284k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   284k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|   284k|        return *m_storage;
 1594|   284k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|  91.0k|    {
 4170|  91.0k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|  91.0k|#if !SCN_DISABLE_LOCALE
 4173|  91.0k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 20.3k, False: 70.7k]
  ------------------
 4174|  20.3k|            return read_impl<Range>(
 4175|  20.3k|                range, rd,
 4176|  20.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  20.3k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  20.3k|                },
 4179|  20.3k|                value, loc);
 4180|  20.3k|        }
 4181|  70.7k|#endif
 4182|       |
 4183|  70.7k|        return read_impl<Range>(
 4184|  70.7k|            range, rd,
 4185|  70.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  70.7k|                return r.read_source(SCN_FWD(args)...);
 4187|  70.7k|            },
 4188|  70.7k|            value);
 4189|  91.0k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   121k|    {
 4206|   121k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   121k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   121k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 51.8k, False: 69.7k]
  |  |  ------------------
  ------------------
 4208|  51.8k|            return unexpected(r.error());
 4209|  51.8k|        }
 4210|       |
 4211|  69.7k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|  69.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  69.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  69.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  69.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.01k, False: 68.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.01k|    }                                                  \
  |  |  |  | 3671|  69.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  68.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  68.7k|        return ranges::next(range.begin(), n);
 4213|  69.7k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|   370k|    {
  763|   370k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   370k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   370k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  20.3k|    {
  754|  20.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  20.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  20.3k|              cvref<T> obj = *get<T>(fn);
  745|  20.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  20.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  20.3k|              }
  748|  20.3k|              else {
  749|  20.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  20.3k|              }
  751|  20.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  20.3k|    {
  684|  20.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  20.3k|            return static_cast<T*>(s.m_cp);
  686|  20.3k|        }
  687|  20.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  20.3k|            return static_cast<T*>(s.m_p);
  689|  20.3k|        }
  690|  20.3k|        else {
  691|  20.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  20.3k|        }
  693|  20.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  20.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  20.3k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  20.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  20.3k|                },
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3678|  62.5k|    {
 3679|  62.5k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|  62.5k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|  62.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 62.5k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|  62.5k|        return read_source_impl(range);
 3685|  62.5k|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3704|   370k|    {
 3705|   370k|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|   370k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   370k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   370k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   370k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 370k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   370k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   370k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|   370k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|   370k|        auto it = sign_result.first;
 3708|   370k|        m_sign = sign_result.second;
 3709|       |
 3710|   370k|        auto digits_begin = it;
 3711|   370k|        auto r = ranges::subrange{it, range.end()};
 3712|   370k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|   370k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|   370k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3715|   370k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|   370k|                SCN_TRY_ASSIGN(
 3717|   370k|                    it,
 3718|   370k|                    do_read_source_impl(
 3719|   370k|                        r,
 3720|   370k|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|   370k|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|   370k|            }
 3723|   370k|            else {
 3724|   370k|                auto cb = [&](const auto& rr)
 3725|   370k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|   370k|                    auto res = read_all(rr);
 3727|   370k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|   370k|                        return unexpected_scan_error(
 3729|   370k|                            scan_error::invalid_scanned_value,
 3730|   370k|                            "Invalid float value");
 3731|   370k|                    }
 3732|   370k|                    return res;
 3733|   370k|                };
 3734|   370k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3735|   370k|            }
 3736|   370k|        }
 3737|   370k|        else {
 3738|   370k|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|   370k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   370k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   370k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 156k, False: 213k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|   156k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|   156k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|   156k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|   156k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|   156k|    }                                                  \
  |  | 3671|   370k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   370k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3739|   213k|                it,
 3740|   213k|                do_read_source_impl(
 3741|   213k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|   213k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|   213k|        }
 3744|       |
 3745|   213k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   213k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   213k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|   213k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 213k, False: 0]
  |  Branch (3747:48): [True: 213k, False: 0]
  ------------------
 3748|   213k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 213k, False: 0]
  ------------------
 3749|   213k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 213k, False: 0]
  ------------------
 3750|   213k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|   213k|        }
 3752|       |
 3753|   213k|        handle_separators();
 3754|       |
 3755|   213k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 213k]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|   213k|        return it;
 3768|   213k|    }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 3999|   370k|    {
 4000|   370k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|   370k|        const bool allowed_nonhex =
 4002|   370k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|   370k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|   370k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 370k, False: 0]
  |  Branch (4005:45): [True: 0, False: 370k]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|   370k|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 370k]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|   370k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 370k, False: 0]
  |  Branch (4014:45): [True: 0, False: 370k]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|   370k|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 370k]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|   370k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 221k, False: 148k]
  |  Branch (4021:28): [True: 65.0k, False: 156k]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|  65.0k|            auto it = range.begin();
 4025|       |
 4026|  65.0k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 120, False: 64.9k]
  ------------------
 4027|    120|                m_kind = float_kind::hex_with_prefix;
 4028|    120|                it = *r;
 4029|    120|            }
 4030|  64.9k|            else {
 4031|  64.9k|                m_kind = float_kind::hex_without_prefix;
 4032|  64.9k|            }
 4033|       |
 4034|  65.0k|            return read_hex(ranges::subrange{it, range.end()});
 4035|  65.0k|        }
 4036|   305k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 148k, False: 156k]
  |  Branch (4036:29): [True: 148k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   148k|            m_kind = float_kind::generic;
 4040|   148k|            return read_regular_float(range);
 4041|   148k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|   156k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   156k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 300, False: 156k]
  |  |  ------------------
  ------------------
 4047|    300|            m_kind = float_kind::hex_with_prefix;
 4048|    300|            return read_hex(ranges::subrange{*r, range.end()});
 4049|    300|        }
 4050|       |
 4051|   156k|        m_kind = float_kind::generic;
 4052|   156k|        return read_regular(range);
 4053|   156k|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3810|   370k|    {
 3811|   370k|        auto it = range.begin();
 3812|   370k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 370k, False: 0]
  ------------------
 3813|   370k|            return unexpected(r.error());
 3814|   370k|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3833|   370k|    {
 3834|   370k|        auto it = range.begin();
 3835|   370k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 370k, False: 0]
  ------------------
 3836|   370k|            return r.transform_error(map_parse_error_to_scan_error(
 3837|   370k|                scan_error::invalid_scanned_value,
 3838|   370k|                "Invalid floating-point NaN value"));
 3839|   370k|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3803|   221k|    {
 3804|   221k|        return read_matching_string_classic_nocase(range, "0x");
 3805|   221k|    }
_ZN3scn2v34impl12float_readerIwE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3903|  65.3k|    {
 3904|  65.3k|        auto it = range.begin();
 3905|       |
 3906|  65.3k|        std::ptrdiff_t digits_count = 0;
 3907|  65.3k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3908|  65.3k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  65.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24.2k, False: 41.1k]
  |  |  ------------------
  ------------------
 3909|  24.2k|            return r.transform_error(map_parse_error_to_scan_error(
 3910|  24.2k|                scan_error::invalid_scanned_value,
 3911|  24.2k|                "Invalid hexadecimal floating-point value"));
 3912|  24.2k|        }
 3913|  41.1k|        else {
 3914|  41.1k|            digits_count += ranges::distance(it, *r);
 3915|  41.1k|            it = *r;
 3916|  41.1k|        }
 3917|       |
 3918|  41.1k|        m_integral_part_length = digits_count;
 3919|  41.1k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3919:18): [True: 120, False: 41.0k]
  ------------------
 3920|  41.1k|                                             m_locale_options.decimal_point)) {
 3921|    120|            it = *r;
 3922|    120|        }
 3923|       |
 3924|  41.1k|        if (auto r =
  ------------------
  |  Branch (3924:18): [True: 78, False: 41.0k]
  ------------------
 3925|  41.1k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3926|     78|            digits_count += ranges::distance(it, *r);
 3927|     78|            it = *r;
 3928|     78|        }
 3929|       |
 3930|  41.1k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|  41.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 41.1k]
  |  |  ------------------
  ------------------
 3931|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3932|      0|                                         "No significand digits in hexfloat");
 3933|      0|        }
 3934|       |
 3935|  41.1k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3936|       |
 3937|  41.1k|        return it;
 3938|  41.1k|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3788|   106k|    {
 3789|   106k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   106k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 106k]
  |  |  |  Branch (859:45): [True: 0, False: 106k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3790|   106k|                         thsep_allowed)) {
 3791|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3792|      0|                return char_to_int(ch) < 16 ||
 3793|      0|                       ch == m_locale_options.thousands_sep;
 3794|      0|            });
 3795|      0|        }
 3796|       |
 3797|   106k|        return read_while1_code_unit(
 3798|   106k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3799|   106k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_:
  753|   106k|    {
  754|   106k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|   156k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   156k|              cvref<T> obj = *get<T>(fn);
  745|   156k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   156k|                  obj(static_cast<decltype(args)>(args)...);
  747|   156k|              }
  748|   156k|              else {
  749|   156k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   156k|              }
  751|   156k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|   156k|    {
  684|   156k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   156k|            return static_cast<T*>(s.m_cp);
  686|   156k|        }
  687|   156k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   156k|            return static_cast<T*>(s.m_p);
  689|   156k|        }
  690|   156k|        else {
  691|   156k|            return reinterpret_cast<T*>(s.m_fp);
  692|   156k|        }
  693|   156k|    }
_ZZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3798|   156k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_LPv0EEEPSM_:
  661|   106k|        {
  662|   106k|        }
_ZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3875|   179k|    {
 3876|   179k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 6.29k, False: 173k]
  ------------------
 3877|  6.29k|            auto beg_exp_it = range.begin();
 3878|  6.29k|            auto it = *r;
 3879|       |
 3880|  6.29k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 6.22k, False: 70]
  ------------------
 3881|  6.29k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|  6.22k|                it = r_sign->first;
 3883|  6.22k|            }
 3884|       |
 3885|  6.29k|            if (auto r_exp = read_while1_code_unit(
 3886|  6.29k|                    ranges::subrange{it, range.end()},
 3887|  6.29k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|  6.29k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  6.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.01k, False: 5.27k]
  |  |  ------------------
  ------------------
 3889|  1.01k|                it = beg_exp_it;
 3890|  1.01k|            }
 3891|  5.27k|            else {
 3892|  5.27k|                it = *r_exp;
 3893|  5.27k|            }
 3894|       |
 3895|  6.29k|            return it;
 3896|  6.29k|        }
 3897|   173k|        return range.begin();
 3898|   179k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_LPv0EEEOSL_:
  753|  6.29k|    {
  754|  6.29k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clESZ_w:
  743|  19.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  19.6k|              cvref<T> obj = *get<T>(fn);
  745|  19.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  19.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  19.6k|              }
  748|  19.6k|              else {
  749|  19.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  19.6k|              }
  751|  19.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  19.6k|    {
  684|  19.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  19.6k|            return static_cast<T*>(s.m_cp);
  686|  19.6k|        }
  687|  19.6k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  19.6k|            return static_cast<T*>(s.m_p);
  689|  19.6k|        }
  690|  19.6k|        else {
  691|  19.6k|            return reinterpret_cast<T*>(s.m_fp);
  692|  19.6k|        }
  693|  19.6k|    }
_ZZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlwE_clEw:
 3887|  19.6k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_LPv0EEEPSL_:
  661|  6.29k|        {
  662|  6.29k|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3943|   305k|    {
 3944|   305k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|   305k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 243k, False: 61.0k]
  |  Branch (3945:50): [True: 25.0k, False: 218k]
  ------------------
 3946|       |
 3947|   305k|        auto it = ranges::begin(range);
 3948|   305k|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|   305k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|   305k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   305k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 130k, False: 174k]
  |  |  ------------------
  ------------------
 3952|   130k|            return r.transform_error(
 3953|   130k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|   130k|                                              "Invalid floating-point value"));
 3955|   130k|        }
 3956|   174k|        else {
 3957|   174k|            digits_count += ranges::distance(it, *r);
 3958|   174k|            it = *r;
 3959|   174k|        }
 3960|       |
 3961|   174k|        m_integral_part_length = digits_count;
 3962|   174k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 525, False: 174k]
  ------------------
 3963|   174k|                                             m_locale_options.decimal_point)) {
 3964|    525|            it = *r;
 3965|    525|        }
 3966|       |
 3967|   174k|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 360, False: 174k]
  ------------------
 3968|   174k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|    360|            digits_count += ranges::distance(it, *r);
 3970|    360|            it = *r;
 3971|    360|        }
 3972|       |
 3973|   174k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   174k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 174k]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|   174k|        auto beg_exp_it = it;
 3979|   174k|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 138k, False: 36.6k]
  ------------------
 3980|   138k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|   138k|        }
 3982|   174k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 2.89k, False: 171k]
  |  Branch (3982:29): [True: 2.41k, False: 480]
  ------------------
 3983|  2.41k|            return unexpected_scan_error(
 3984|  2.41k|                scan_error::invalid_scanned_value,
 3985|  2.41k|                "No exponent given to scientific float");
 3986|  2.41k|        }
 3987|       |
 3988|   172k|        m_kind =
 3989|   172k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 167k, False: 5.17k]
  ------------------
 3990|       |
 3991|   172k|        return it;
 3992|   174k|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3773|   479k|    {
 3774|   479k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   479k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 479k]
  |  |  |  Branch (859:45): [True: 0, False: 479k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|   479k|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|   479k|        return read_while1_code_unit(
 3783|   479k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|   479k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_:
  753|   479k|    {
  754|   479k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|   673k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   673k|              cvref<T> obj = *get<T>(fn);
  745|   673k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   673k|                  obj(static_cast<decltype(args)>(args)...);
  747|   673k|              }
  748|   673k|              else {
  749|   673k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   673k|              }
  751|   673k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|   673k|    {
  684|   673k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   673k|            return static_cast<T*>(s.m_cp);
  686|   673k|        }
  687|   673k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   673k|            return static_cast<T*>(s.m_p);
  689|   673k|        }
  690|   673k|        else {
  691|   673k|            return reinterpret_cast<T*>(s.m_fp);
  692|   673k|        }
  693|   673k|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3783|   673k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_LPv0EEEPSM_:
  661|   479k|        {
  662|   479k|        }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EELPv0EEEvOT_:
 1576|   213k|    {
 1577|   213k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   213k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|   213k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  20.3k|        {
  662|  20.3k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|  70.7k|    {
  754|  70.7k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  70.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  70.7k|              cvref<T> obj = *get<T>(fn);
  745|  70.7k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  70.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  70.7k|              }
  748|  70.7k|              else {
  749|  70.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  70.7k|              }
  751|  70.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  70.7k|    {
  684|  70.7k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  70.7k|            return static_cast<T*>(s.m_cp);
  686|  70.7k|        }
  687|  70.7k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  70.7k|            return static_cast<T*>(s.m_p);
  689|  70.7k|        }
  690|  70.7k|        else {
  691|  70.7k|            return reinterpret_cast<T*>(s.m_fp);
  692|  70.7k|        }
  693|  70.7k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|  70.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  70.7k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  70.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  70.7k|            },
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3664|   307k|    {
 3665|   307k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   307k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 307k]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|   307k|        return read_source_impl(range);
 3671|   307k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSM_:
  661|  70.7k|        {
  662|  70.7k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|  91.1k|    {
 4170|  91.1k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|  91.1k|#if !SCN_DISABLE_LOCALE
 4173|  91.1k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 20.3k, False: 70.7k]
  ------------------
 4174|  20.3k|            return read_impl<Range>(
 4175|  20.3k|                range, rd,
 4176|  20.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  20.3k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  20.3k|                },
 4179|  20.3k|                value, loc);
 4180|  20.3k|        }
 4181|  70.7k|#endif
 4182|       |
 4183|  70.7k|        return read_impl<Range>(
 4184|  70.7k|            range, rd,
 4185|  70.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  70.7k|                return r.read_source(SCN_FWD(args)...);
 4187|  70.7k|            },
 4188|  70.7k|            value);
 4189|  91.1k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   121k|    {
 4206|   121k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   121k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   121k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24.2k, False: 97.4k]
  |  |  ------------------
  ------------------
 4208|  24.2k|            return unexpected(r.error());
 4209|  24.2k|        }
 4210|       |
 4211|  97.4k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|  97.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  97.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  97.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  97.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 28.6k, False: 68.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  28.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  28.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  28.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  28.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  28.6k|    }                                                  \
  |  |  |  | 3671|  97.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  68.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  68.7k|        return ranges::next(range.begin(), n);
 4213|  97.4k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|   370k|    {
  763|   370k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   370k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   370k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  20.3k|    {
  754|  20.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  20.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  20.3k|              cvref<T> obj = *get<T>(fn);
  745|  20.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  20.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  20.3k|              }
  748|  20.3k|              else {
  749|  20.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  20.3k|              }
  751|  20.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  20.3k|    {
  684|  20.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  20.3k|            return static_cast<T*>(s.m_cp);
  686|  20.3k|        }
  687|  20.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  20.3k|            return static_cast<T*>(s.m_p);
  689|  20.3k|        }
  690|  20.3k|        else {
  691|  20.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  20.3k|        }
  693|  20.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  20.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  20.3k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  20.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  20.3k|                },
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3678|  62.6k|    {
 3679|  62.6k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|  62.6k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|  62.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 62.6k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|  62.6k|        return read_source_impl(range);
 3685|  62.6k|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3704|   370k|    {
 3705|   370k|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|   370k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   370k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   370k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   370k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 370k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   370k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   370k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|   370k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|   370k|        auto it = sign_result.first;
 3708|   370k|        m_sign = sign_result.second;
 3709|       |
 3710|   370k|        auto digits_begin = it;
 3711|   370k|        auto r = ranges::subrange{it, range.end()};
 3712|   370k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|   370k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|   370k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|   741k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 370k]
  |  |  |  Branch (859:45): [True: 0, False: 370k]
  |  |  |  Branch (859:45): [True: 0, False: 370k]
  |  |  ------------------
  ------------------
 3715|   370k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|      0|    }                                                  \
  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3717|      0|                    it,
 3718|      0|                    do_read_source_impl(
 3719|      0|                        r,
 3720|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|      0|            }
 3723|   370k|            else {
 3724|   370k|                auto cb = [&](const auto& rr)
 3725|   370k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|   370k|                    auto res = read_all(rr);
 3727|   370k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|   370k|                        return unexpected_scan_error(
 3729|   370k|                            scan_error::invalid_scanned_value,
 3730|   370k|                            "Invalid float value");
 3731|   370k|                    }
 3732|   370k|                    return res;
 3733|   370k|                };
 3734|   370k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3667|   370k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   370k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   370k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 73.0k, False: 297k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  73.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  73.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  73.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  73.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  73.0k|    }                                                  \
  |  | 3671|   370k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   370k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3735|   297k|            }
 3736|   370k|        }
 3737|   297k|        else {
 3738|   297k|            SCN_TRY_ASSIGN(
 3739|   297k|                it,
 3740|   297k|                do_read_source_impl(
 3741|   297k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|   297k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|   297k|        }
 3744|       |
 3745|   297k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   297k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   297k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|   297k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 297k, False: 0]
  |  Branch (3747:48): [True: 297k, False: 0]
  ------------------
 3748|   297k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 297k, False: 0]
  ------------------
 3749|   297k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 297k, False: 0]
  ------------------
 3750|   297k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|   297k|        }
 3752|       |
 3753|   297k|        handle_separators();
 3754|       |
 3755|   297k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 297k]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|   297k|        return it;
 3768|   297k|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3810|   370k|    {
 3811|   370k|        auto it = range.begin();
 3812|   370k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 370k, False: 0]
  ------------------
 3813|   370k|            return unexpected(r.error());
 3814|   370k|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|   370k|    {
 3834|   370k|        auto it = range.begin();
 3835|   370k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 370k, False: 0]
  ------------------
 3836|   370k|            return r.transform_error(map_parse_error_to_scan_error(
 3837|   370k|                scan_error::invalid_scanned_value,
 3838|   370k|                "Invalid floating-point NaN value"));
 3839|   370k|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3803|   221k|    {
 3804|   221k|        return read_matching_string_classic_nocase(range, "0x");
 3805|   221k|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|   229k|{
 1996|   229k|    auto it = read_while_code_unit(range, pred);
 1997|   229k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 149k, False: 80.2k]
  ------------------
 1998|   149k|        return unexpected(parse_error::error);
 1999|   149k|    }
 2000|  80.2k|    return it;
 2001|   229k|}
_ZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3875|  41.6k|    {
 3876|  41.6k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 2.23k, False: 39.4k]
  ------------------
 3877|  2.23k|            auto beg_exp_it = range.begin();
 3878|  2.23k|            auto it = *r;
 3879|       |
 3880|  2.23k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 2.20k, False: 24]
  ------------------
 3881|  2.23k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|  2.20k|                it = r_sign->first;
 3883|  2.20k|            }
 3884|       |
 3885|  2.23k|            if (auto r_exp = read_while1_code_unit(
 3886|  2.23k|                    ranges::subrange{it, range.end()},
 3887|  2.23k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|  2.23k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  2.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 410, False: 1.82k]
  |  |  ------------------
  ------------------
 3889|    410|                it = beg_exp_it;
 3890|    410|            }
 3891|  1.82k|            else {
 3892|  1.82k|                it = *r_exp;
 3893|  1.82k|            }
 3894|       |
 3895|  2.23k|            return it;
 3896|  2.23k|        }
 3897|  39.4k|        return range.begin();
 3898|  41.6k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_LPv0EEEOSI_:
  753|  2.23k|    {
  754|  2.23k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEwE_clESW_w:
  743|  6.76k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.76k|              cvref<T> obj = *get<T>(fn);
  745|  6.76k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  6.76k|                  obj(static_cast<decltype(args)>(args)...);
  747|  6.76k|              }
  748|  6.76k|              else {
  749|  6.76k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.76k|              }
  751|  6.76k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  6.76k|    {
  684|  6.76k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  6.76k|            return static_cast<T*>(s.m_cp);
  686|  6.76k|        }
  687|  6.76k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  6.76k|            return static_cast<T*>(s.m_p);
  689|  6.76k|        }
  690|  6.76k|        else {
  691|  6.76k|            return reinterpret_cast<T*>(s.m_fp);
  692|  6.76k|        }
  693|  6.76k|    }
_ZZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlwE_clEw:
 3887|  6.76k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_LPv0EEEPSI_:
  661|  2.23k|        {
  662|  2.23k|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3943|   148k|    {
 3944|   148k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|   148k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 87.7k, False: 61.0k]
  |  Branch (3945:50): [True: 25.0k, False: 62.6k]
  ------------------
 3946|       |
 3947|   148k|        auto it = ranges::begin(range);
 3948|   148k|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|   148k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|   148k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   148k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 70.5k, False: 78.2k]
  |  |  ------------------
  ------------------
 3952|  70.5k|            return r.transform_error(
 3953|  70.5k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|  70.5k|                                              "Invalid floating-point value"));
 3955|  70.5k|        }
 3956|  78.2k|        else {
 3957|  78.2k|            digits_count += ranges::distance(it, *r);
 3958|  78.2k|            it = *r;
 3959|  78.2k|        }
 3960|       |
 3961|  78.2k|        m_integral_part_length = digits_count;
 3962|  78.2k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 270, False: 77.9k]
  ------------------
 3963|  78.2k|                                             m_locale_options.decimal_point)) {
 3964|    270|            it = *r;
 3965|    270|        }
 3966|       |
 3967|  78.2k|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 180, False: 78.0k]
  ------------------
 3968|  78.2k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|    180|            digits_count += ranges::distance(it, *r);
 3970|    180|            it = *r;
 3971|    180|        }
 3972|       |
 3973|  78.2k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|  78.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 78.2k]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|  78.2k|        auto beg_exp_it = it;
 3979|  78.2k|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 41.6k, False: 36.6k]
  ------------------
 3980|  41.6k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|  41.6k|        }
 3982|  78.2k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 2.89k, False: 75.3k]
  |  Branch (3982:29): [True: 2.41k, False: 480]
  ------------------
 3983|  2.41k|            return unexpected_scan_error(
 3984|  2.41k|                scan_error::invalid_scanned_value,
 3985|  2.41k|                "No exponent given to scientific float");
 3986|  2.41k|        }
 3987|       |
 3988|  75.8k|        m_kind =
 3989|  75.8k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 74.0k, False: 1.82k]
  ------------------
 3990|       |
 3991|  75.8k|        return it;
 3992|  78.2k|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3773|   227k|    {
 3774|   227k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   227k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 227k]
  |  |  |  Branch (859:45): [True: 0, False: 227k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|   227k|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|   227k|        return read_while1_code_unit(
 3783|   227k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|   227k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_:
  753|   227k|    {
  754|   227k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clESU_w:
  743|   314k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   314k|              cvref<T> obj = *get<T>(fn);
  745|   314k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   314k|                  obj(static_cast<decltype(args)>(args)...);
  747|   314k|              }
  748|   314k|              else {
  749|   314k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   314k|              }
  751|   314k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  683|   314k|    {
  684|   314k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   314k|            return static_cast<T*>(s.m_cp);
  686|   314k|        }
  687|   314k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   314k|            return static_cast<T*>(s.m_p);
  689|   314k|        }
  690|   314k|        else {
  691|   314k|            return reinterpret_cast<T*>(s.m_fp);
  692|   314k|        }
  693|   314k|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3783|   314k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_LPv0EEEPSJ_:
  661|   227k|        {
  662|   227k|        }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3999|   370k|    {
 4000|   370k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|   370k|        const bool allowed_nonhex =
 4002|   370k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|   370k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|   370k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 370k, False: 0]
  |  Branch (4005:45): [True: 0, False: 370k]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|   370k|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 370k]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|   370k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 370k, False: 0]
  |  Branch (4014:45): [True: 0, False: 370k]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|   370k|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 370k]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|   370k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 221k, False: 148k]
  |  Branch (4021:28): [True: 65.1k, False: 156k]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|  65.1k|            auto it = range.begin();
 4025|       |
 4026|  65.1k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 120, False: 65.0k]
  ------------------
 4027|    120|                m_kind = float_kind::hex_with_prefix;
 4028|    120|                it = *r;
 4029|    120|            }
 4030|  65.0k|            else {
 4031|  65.0k|                m_kind = float_kind::hex_without_prefix;
 4032|  65.0k|            }
 4033|       |
 4034|  65.1k|            return read_hex(ranges::subrange{it, range.end()});
 4035|  65.1k|        }
 4036|   305k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 148k, False: 156k]
  |  Branch (4036:29): [True: 148k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   148k|            m_kind = float_kind::generic;
 4040|   148k|            return read_regular_float(range);
 4041|   148k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|   156k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   156k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 300, False: 156k]
  |  |  ------------------
  ------------------
 4047|    300|            m_kind = float_kind::hex_with_prefix;
 4048|    300|            return read_hex(ranges::subrange{*r, range.end()});
 4049|    300|        }
 4050|       |
 4051|   156k|        m_kind = float_kind::generic;
 4052|   156k|        return read_regular(range);
 4053|   156k|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3725|   221k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|   221k|                    auto res = read_all(rr);
 3727|   221k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|   221k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 98, False: 221k]
  |  |  ------------------
  ------------------
 3728|     98|                        return unexpected_scan_error(
 3729|     98|                            scan_error::invalid_scanned_value,
 3730|     98|                            "Invalid float value");
 3731|     98|                    }
 3732|   221k|                    return res;
 3733|   221k|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|   221k|{
 1839|   221k|    return ranges::next(range.begin(), range.end());
 1840|   221k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|   221k|    {
  313|   221k|        ranges::advance(x, bound);
  314|   221k|        return x;
  315|   221k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|   221k|    {
  275|   221k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|   221k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEvOT_:
 1576|   297k|    {
 1577|   297k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   297k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|   297k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1620|   297k|    {
 1621|   297k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|   297k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|   297k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|   297k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|   297k|            m_storage.reset();
 1627|   297k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|   297k|        }
 1629|   297k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|   297k|                                          std::basic_string<CharT>>) {
 1631|   297k|            m_storage.emplace(SCN_FWD(range));
 1632|   297k|            m_view = string_view_type{*m_storage};
 1633|   297k|        }
 1634|   297k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|   297k|                                          typename detail::basic_scan_buffer<
 1636|   297k|                                              value_t>::forward_iterator> &&
 1637|   297k|                           ranges::common_range<Range>) {
 1638|   297k|            auto beg_seg = range.begin().contiguous_segment();
 1639|   297k|            auto end_seg = range.end().contiguous_segment();
 1640|   297k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|   297k|                             detail::to_address(end_seg.end()))) {
 1642|   297k|                auto& str = m_storage.emplace();
 1643|   297k|                str.reserve(range.end().position() - range.begin().position());
 1644|   297k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|   297k|                m_view = string_view_type{str};
 1646|   297k|                return;
 1647|   297k|            }
 1648|       |
 1649|   297k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   297k|                                                            end_seg.data());
 1651|   297k|            m_storage.reset();
 1652|   297k|        }
 1653|   297k|        else {
 1654|   297k|            auto& str = m_storage.emplace();
 1655|   297k|            if constexpr (ranges::sized_range<Range>) {
 1656|   297k|                str.reserve(range.size());
 1657|   297k|            }
 1658|   297k|            if constexpr (ranges::common_range<Range>) {
 1659|   297k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|   297k|                          std::back_inserter(str));
 1661|   297k|            }
 1662|   297k|            else {
 1663|   297k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|   297k|                     ++it) {
 1665|   297k|                    str.push_back(*it);
 1666|   297k|                }
 1667|   297k|            }
 1668|   297k|            m_view = string_view_type{str};
 1669|   297k|        }
 1670|   297k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  20.3k|        {
  662|  20.3k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|  70.7k|    {
  754|  70.7k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  70.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  70.7k|              cvref<T> obj = *get<T>(fn);
  745|  70.7k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  70.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  70.7k|              }
  748|  70.7k|              else {
  749|  70.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  70.7k|              }
  751|  70.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  70.7k|    {
  684|  70.7k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  70.7k|            return static_cast<T*>(s.m_cp);
  686|  70.7k|        }
  687|  70.7k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  70.7k|            return static_cast<T*>(s.m_p);
  689|  70.7k|        }
  690|  70.7k|        else {
  691|  70.7k|            return reinterpret_cast<T*>(s.m_fp);
  692|  70.7k|        }
  693|  70.7k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|  70.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  70.7k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  70.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  70.7k|            },
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3664|   308k|    {
 3665|   308k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   308k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 308k]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|   308k|        return read_source_impl(range);
 3671|   308k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|  70.7k|        {
  662|  70.7k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6192|  93.0k|    {
 6193|  93.0k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  93.0k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|  93.0k|            auto rd = make_reader<T, char_type>();
 6198|  93.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|  93.0k|                return unexpected(e);
 6200|  93.0k|            }
 6201|       |
 6202|  93.0k|            return impl(rd, range, value);
 6203|  93.0k|        }
 6204|  93.0k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|  93.0k|            auto rd = make_reader<T, char_type>();
 6206|  93.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  93.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 93.0k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|  93.0k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 93.0k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|  93.0k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|  93.0k|                return impl(rd, range, value);
 6213|  93.0k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|  93.0k|        else {
 6221|  93.0k|            SCN_EXPECT(false);
 6222|  93.0k|            SCN_UNREACHABLE;
 6223|  93.0k|        }
 6224|  93.0k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|  93.0k|    {
 6124|  93.0k|        const bool need_skipped_width =
 6125|  93.0k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 93.0k]
  |  Branch (6125:33): [True: 0, False: 93.0k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  93.0k|        auto it = rng.begin();
 6129|  93.0k|        std::ptrdiff_t prefix_width = 0;
 6130|  93.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 93.0k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  93.0k|        else {
 6138|  93.0k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  93.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  93.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  93.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  93.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 742, False: 92.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    742|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    742|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    742|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    742|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    742|    }                                                  \
  |  |  |  | 3671|  93.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  92.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  92.3k|            std::tie(it, prefix_width) = prefix_result;
 6140|  92.3k|        }
 6141|  92.3k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  92.3k|        std::ptrdiff_t value_width = 0;
 6145|  92.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 92.3k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  92.3k|        else {
 6161|  92.3k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  92.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  92.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  92.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 40.6k, False: 51.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  40.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  40.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  40.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  40.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  40.6k|    }                                                  \
  |  | 3671|  92.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  92.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  51.6k|                                             specs, value, loc));
 6163|       |
 6164|  51.6k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 51.6k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  51.6k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  51.6k|        std::ptrdiff_t postfix_width = 0;
 6173|  51.6k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 51.3k, False: 286]
  ------------------
 6174|  51.3k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  51.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  51.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  51.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  51.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 51.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  51.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  51.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  51.3k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  51.3k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  51.3k|                                 value_width));
 6178|  51.3k|            std::tie(it, postfix_width) = postfix_result;
 6179|  51.3k|        }
 6180|       |
 6181|  51.6k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  51.6k|                                                 value_width, postfix_width);
 6183|  51.6k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 51.6k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  51.6k|        return it;
 6188|  51.6k|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3690|   170k|    {
 3691|   170k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   170k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   170k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   170k|        const std::ptrdiff_t sign_len =
 3694|   170k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 305, False: 170k]
  ------------------
 3695|       |
 3696|   170k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   170k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   170k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   170k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   170k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 29.0k, False: 141k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  29.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  29.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  29.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  29.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  29.0k|    }                                                  \
  |  |  |  | 3671|   170k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   141k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|   141k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   170k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|  92.3k|    {
 4170|  92.3k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|  92.3k|#if !SCN_DISABLE_LOCALE
 4173|  92.3k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 20.9k, False: 71.3k]
  ------------------
 4174|  20.9k|            return read_impl<Range>(
 4175|  20.9k|                range, rd,
 4176|  20.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  20.9k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  20.9k|                },
 4179|  20.9k|                value, loc);
 4180|  20.9k|        }
 4181|  71.3k|#endif
 4182|       |
 4183|  71.3k|        return read_impl<Range>(
 4184|  71.3k|            range, rd,
 4185|  71.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  71.3k|                return r.read_source(SCN_FWD(args)...);
 4187|  71.3k|            },
 4188|  71.3k|            value);
 4189|  92.3k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   123k|    {
 4206|   123k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   123k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   123k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52.2k, False: 71.4k]
  |  |  ------------------
  ------------------
 4208|  52.2k|            return unexpected(r.error());
 4209|  52.2k|        }
 4210|       |
 4211|  71.4k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|  71.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  71.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  71.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  71.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 576, False: 70.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    576|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    576|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    576|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    576|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    576|    }                                                  \
  |  |  |  | 3671|  71.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  70.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  70.9k|        return ranges::next(range.begin(), n);
 4213|  71.4k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  20.9k|    {
  754|  20.9k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  20.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  20.9k|              cvref<T> obj = *get<T>(fn);
  745|  20.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  20.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  20.9k|              }
  748|  20.9k|              else {
  749|  20.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  20.9k|              }
  751|  20.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  20.9k|    {
  684|  20.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  20.9k|            return static_cast<T*>(s.m_cp);
  686|  20.9k|        }
  687|  20.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  20.9k|            return static_cast<T*>(s.m_p);
  689|  20.9k|        }
  690|  20.9k|        else {
  691|  20.9k|            return reinterpret_cast<T*>(s.m_fp);
  692|  20.9k|        }
  693|  20.9k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  20.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  20.9k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  20.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  20.9k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  20.9k|        {
  662|  20.9k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|  71.3k|    {
  754|  71.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  71.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  71.3k|              cvref<T> obj = *get<T>(fn);
  745|  71.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  71.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  71.3k|              }
  748|  71.3k|              else {
  749|  71.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  71.3k|              }
  751|  71.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  71.3k|    {
  684|  71.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  71.3k|            return static_cast<T*>(s.m_cp);
  686|  71.3k|        }
  687|  71.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  71.3k|            return static_cast<T*>(s.m_p);
  689|  71.3k|        }
  690|  71.3k|        else {
  691|  71.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  71.3k|        }
  693|  71.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|  71.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  71.3k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  71.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  71.3k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSM_:
  661|  71.3k|        {
  662|  71.3k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|  92.3k|    {
 4170|  92.3k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|  92.3k|#if !SCN_DISABLE_LOCALE
 4173|  92.3k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 20.9k, False: 71.3k]
  ------------------
 4174|  20.9k|            return read_impl<Range>(
 4175|  20.9k|                range, rd,
 4176|  20.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  20.9k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  20.9k|                },
 4179|  20.9k|                value, loc);
 4180|  20.9k|        }
 4181|  71.3k|#endif
 4182|       |
 4183|  71.3k|        return read_impl<Range>(
 4184|  71.3k|            range, rd,
 4185|  71.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  71.3k|                return r.read_source(SCN_FWD(args)...);
 4187|  71.3k|            },
 4188|  71.3k|            value);
 4189|  92.3k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   123k|    {
 4206|   123k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   123k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   123k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24.3k, False: 99.4k]
  |  |  ------------------
  ------------------
 4208|  24.3k|            return unexpected(r.error());
 4209|  24.3k|        }
 4210|       |
 4211|  99.4k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|  99.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  99.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  99.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  99.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 28.4k, False: 71.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  28.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  28.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  28.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  28.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  28.4k|    }                                                  \
  |  |  |  | 3671|  99.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  71.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  71.0k|        return ranges::next(range.begin(), n);
 4213|  99.4k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  20.9k|    {
  754|  20.9k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  20.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  20.9k|              cvref<T> obj = *get<T>(fn);
  745|  20.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  20.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  20.9k|              }
  748|  20.9k|              else {
  749|  20.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  20.9k|              }
  751|  20.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  20.9k|    {
  684|  20.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  20.9k|            return static_cast<T*>(s.m_cp);
  686|  20.9k|        }
  687|  20.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  20.9k|            return static_cast<T*>(s.m_p);
  689|  20.9k|        }
  690|  20.9k|        else {
  691|  20.9k|            return reinterpret_cast<T*>(s.m_fp);
  692|  20.9k|        }
  693|  20.9k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  20.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  20.9k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  20.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  20.9k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  20.9k|        {
  662|  20.9k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|  71.3k|    {
  754|  71.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  71.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  71.3k|              cvref<T> obj = *get<T>(fn);
  745|  71.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  71.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  71.3k|              }
  748|  71.3k|              else {
  749|  71.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  71.3k|              }
  751|  71.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  71.3k|    {
  684|  71.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  71.3k|            return static_cast<T*>(s.m_cp);
  686|  71.3k|        }
  687|  71.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  71.3k|            return static_cast<T*>(s.m_p);
  689|  71.3k|        }
  690|  71.3k|        else {
  691|  71.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  71.3k|        }
  693|  71.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|  71.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  71.3k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  71.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  71.3k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|  71.3k|        {
  662|  71.3k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6192|  93.9k|    {
 6193|  93.9k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  93.9k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|  93.9k|            auto rd = make_reader<T, char_type>();
 6198|  93.9k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|  93.9k|                return unexpected(e);
 6200|  93.9k|            }
 6201|       |
 6202|  93.9k|            return impl(rd, range, value);
 6203|  93.9k|        }
 6204|  93.9k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|  93.9k|            auto rd = make_reader<T, char_type>();
 6206|  93.9k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  93.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 93.9k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|  93.9k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 93.9k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|  93.9k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|  93.9k|                return impl(rd, range, value);
 6213|  93.9k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|  93.9k|        else {
 6221|  93.9k|            SCN_EXPECT(false);
 6222|  93.9k|            SCN_UNREACHABLE;
 6223|  93.9k|        }
 6224|  93.9k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|  93.9k|    {
 6124|  93.9k|        const bool need_skipped_width =
 6125|  93.9k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 93.9k]
  |  Branch (6125:33): [True: 0, False: 93.9k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  93.9k|        auto it = rng.begin();
 6129|  93.9k|        std::ptrdiff_t prefix_width = 0;
 6130|  93.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 93.9k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  93.9k|        else {
 6138|  93.9k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  93.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  93.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  93.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  93.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 766, False: 93.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    766|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    766|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    766|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    766|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    766|    }                                                  \
  |  |  |  | 3671|  93.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  93.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  93.1k|            std::tie(it, prefix_width) = prefix_result;
 6140|  93.1k|        }
 6141|  93.1k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  93.1k|        std::ptrdiff_t value_width = 0;
 6145|  93.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 93.1k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  93.1k|        else {
 6161|  93.1k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  93.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  93.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  93.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 40.6k, False: 52.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  40.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  40.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  40.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  40.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  40.6k|    }                                                  \
  |  | 3671|  93.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  93.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  52.5k|                                             specs, value, loc));
 6163|       |
 6164|  52.5k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 52.5k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  52.5k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  52.5k|        std::ptrdiff_t postfix_width = 0;
 6173|  52.5k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 52.2k, False: 296]
  ------------------
 6174|  52.2k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  52.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  52.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  52.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  52.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 52.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  52.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  52.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  52.2k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  52.2k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  52.2k|                                 value_width));
 6178|  52.2k|            std::tie(it, postfix_width) = postfix_result;
 6179|  52.2k|        }
 6180|       |
 6181|  52.5k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  52.5k|                                                 value_width, postfix_width);
 6183|  52.5k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 52.5k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  52.5k|        return it;
 6188|  52.5k|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3690|   173k|    {
 3691|   173k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   173k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   173k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   173k|        const std::ptrdiff_t sign_len =
 3694|   173k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 310, False: 172k]
  ------------------
 3695|       |
 3696|   173k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   173k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   173k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   173k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   173k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 28.3k, False: 144k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  28.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  28.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  28.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  28.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  28.3k|    }                                                  \
  |  |  |  | 3671|   173k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   144k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|   144k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   173k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|  93.1k|    {
 4170|  93.1k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|  93.1k|#if !SCN_DISABLE_LOCALE
 4173|  93.1k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 21.3k, False: 71.8k]
  ------------------
 4174|  21.3k|            return read_impl<Range>(
 4175|  21.3k|                range, rd,
 4176|  21.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  21.3k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  21.3k|                },
 4179|  21.3k|                value, loc);
 4180|  21.3k|        }
 4181|  71.8k|#endif
 4182|       |
 4183|  71.8k|        return read_impl<Range>(
 4184|  71.8k|            range, rd,
 4185|  71.8k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  71.8k|                return r.read_source(SCN_FWD(args)...);
 4187|  71.8k|            },
 4188|  71.8k|            value);
 4189|  93.1k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   125k|    {
 4206|   125k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   125k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   125k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52.7k, False: 72.4k]
  |  |  ------------------
  ------------------
 4208|  52.7k|            return unexpected(r.error());
 4209|  52.7k|        }
 4210|       |
 4211|  72.4k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|  72.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  72.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  72.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  72.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 55, False: 72.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     55|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     55|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     55|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     55|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     55|    }                                                  \
  |  |  |  | 3671|  72.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  72.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  72.3k|        return ranges::next(range.begin(), n);
 4213|  72.4k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  21.3k|    {
  754|  21.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  21.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  21.3k|              cvref<T> obj = *get<T>(fn);
  745|  21.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  21.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  21.3k|              }
  748|  21.3k|              else {
  749|  21.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  21.3k|              }
  751|  21.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  21.3k|    {
  684|  21.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  21.3k|            return static_cast<T*>(s.m_cp);
  686|  21.3k|        }
  687|  21.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  21.3k|            return static_cast<T*>(s.m_p);
  689|  21.3k|        }
  690|  21.3k|        else {
  691|  21.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  21.3k|        }
  693|  21.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  21.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  21.3k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  21.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  21.3k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  21.3k|        {
  662|  21.3k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|  71.8k|    {
  754|  71.8k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  71.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  71.8k|              cvref<T> obj = *get<T>(fn);
  745|  71.8k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  71.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  71.8k|              }
  748|  71.8k|              else {
  749|  71.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  71.8k|              }
  751|  71.8k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  71.8k|    {
  684|  71.8k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  71.8k|            return static_cast<T*>(s.m_cp);
  686|  71.8k|        }
  687|  71.8k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  71.8k|            return static_cast<T*>(s.m_p);
  689|  71.8k|        }
  690|  71.8k|        else {
  691|  71.8k|            return reinterpret_cast<T*>(s.m_fp);
  692|  71.8k|        }
  693|  71.8k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|  71.8k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  71.8k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  71.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  71.8k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSM_:
  661|  71.8k|        {
  662|  71.8k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|  93.1k|    {
 4170|  93.1k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|  93.1k|#if !SCN_DISABLE_LOCALE
 4173|  93.1k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 21.3k, False: 71.8k]
  ------------------
 4174|  21.3k|            return read_impl<Range>(
 4175|  21.3k|                range, rd,
 4176|  21.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  21.3k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  21.3k|                },
 4179|  21.3k|                value, loc);
 4180|  21.3k|        }
 4181|  71.8k|#endif
 4182|       |
 4183|  71.8k|        return read_impl<Range>(
 4184|  71.8k|            range, rd,
 4185|  71.8k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  71.8k|                return r.read_source(SCN_FWD(args)...);
 4187|  71.8k|            },
 4188|  71.8k|            value);
 4189|  93.1k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   125k|    {
 4206|   125k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   125k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   125k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24.5k, False: 100k]
  |  |  ------------------
  ------------------
 4208|  24.5k|            return unexpected(r.error());
 4209|  24.5k|        }
 4210|       |
 4211|   100k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   100k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   100k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   100k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 28.2k, False: 72.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  28.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  28.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  28.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  28.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  28.2k|    }                                                  \
  |  |  |  | 3671|   100k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  72.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  72.4k|        return ranges::next(range.begin(), n);
 4213|   100k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  21.3k|    {
  754|  21.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  21.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  21.3k|              cvref<T> obj = *get<T>(fn);
  745|  21.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  21.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  21.3k|              }
  748|  21.3k|              else {
  749|  21.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  21.3k|              }
  751|  21.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  21.3k|    {
  684|  21.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  21.3k|            return static_cast<T*>(s.m_cp);
  686|  21.3k|        }
  687|  21.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  21.3k|            return static_cast<T*>(s.m_p);
  689|  21.3k|        }
  690|  21.3k|        else {
  691|  21.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  21.3k|        }
  693|  21.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  21.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  21.3k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  21.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  21.3k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  21.3k|        {
  662|  21.3k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|  71.8k|    {
  754|  71.8k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  71.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  71.8k|              cvref<T> obj = *get<T>(fn);
  745|  71.8k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  71.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  71.8k|              }
  748|  71.8k|              else {
  749|  71.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  71.8k|              }
  751|  71.8k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  71.8k|    {
  684|  71.8k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  71.8k|            return static_cast<T*>(s.m_cp);
  686|  71.8k|        }
  687|  71.8k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  71.8k|            return static_cast<T*>(s.m_p);
  689|  71.8k|        }
  690|  71.8k|        else {
  691|  71.8k|            return reinterpret_cast<T*>(s.m_fp);
  692|  71.8k|        }
  693|  71.8k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|  71.8k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  71.8k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  71.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  71.8k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|  71.8k|        {
  662|  71.8k|        }
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|   373k|{
 2061|   373k|    auto it = range.begin();
 2062|   591k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 588k, False: 2.64k]
  ------------------
 2063|   588k|        const auto val =
 2064|   588k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   588k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   588k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 588k, False: 0]
  |  |  ------------------
  ------------------
 2066|   588k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   588k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   588k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 370k, False: 218k]
  ------------------
 2069|   370k|                return it;
 2070|   370k|            }
 2071|   588k|        }
 2072|   218k|        it = val.iterator;
 2073|   218k|    }
 2074|       |
 2075|  2.64k|    return it;
 2076|   373k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|   588k|{
 1899|   588k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   588k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   588k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   588k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   588k|    auto it = range.begin();
 1903|   588k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   588k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   588k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 588k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|   588k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 588k, False: 0]
  ------------------
 1912|   588k|        ++it;
 1913|   588k|        return {it, string_type(1, *range.begin())};
 1914|   588k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|   588k|}
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1889|   588k|    {
 1890|   588k|        return !codepoint.empty();
 1891|   588k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|   373k|{
 2082|   373k|    return read_until_code_point(range, std::not_fn(pred));
 2083|   373k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|   373k|{
 2951|   373k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 373k, False: 0]
  ------------------
 2952|   373k|        auto it = read_while_classic_space(range);
 2953|   373k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   373k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   373k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.64k, False: 370k]
  |  |  ------------------
  ------------------
 2955|  2.64k|            return unexpected(e);
 2956|  2.64k|        }
 2957|       |
 2958|   370k|        return it;
 2959|   373k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   373k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|   373k|{
 2117|   373k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|   373k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|   373k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|   373k|        auto buf = make_contiguous_buffer(range);
 2121|   373k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|   373k|        return ranges::next(range.begin(),
 2123|   373k|                            ranges::distance(buf.view().begin(), it));
 2124|   373k|    }
 2125|   373k|    else {
 2126|   373k|        auto it = range.begin();
 2127|       |
 2128|   373k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|   373k|            auto seg = get_contiguous_beginning(range);
 2130|   373k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|   373k|                seg_it != seg.end()) {
 2132|   373k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   373k|            }
 2134|   373k|            ranges::advance(it, seg.size());
 2135|   373k|        }
 2136|       |
 2137|   373k|        return read_while_code_point(
 2138|   373k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   373k|    }
 2140|   373k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|   373k|    {
  754|   373k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|   588k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   588k|              cvref<T> obj = *get<T>(fn);
  745|   588k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   588k|                  obj(static_cast<decltype(args)>(args)...);
  747|   588k|              }
  748|   588k|              else {
  749|   588k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   588k|              }
  751|   588k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   588k|    {
  684|   588k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   588k|            return static_cast<T*>(s.m_cp);
  686|   588k|        }
  687|   588k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   588k|            return static_cast<T*>(s.m_p);
  689|   588k|        }
  690|   588k|        else {
  691|   588k|            return reinterpret_cast<T*>(s.m_fp);
  692|   588k|        }
  693|   588k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|   588k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|   373k|        {
  662|   373k|        }
_ZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2087|   992k|{
 2088|   992k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|   992k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|   992k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|   992k|        auto buf = make_contiguous_buffer(range);
 2092|   992k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|   992k|        return ranges::next(range.begin(),
 2094|   992k|                            ranges::distance(buf.view().begin(), it));
 2095|   992k|    }
 2096|   992k|    else {
 2097|   992k|        auto it = range.begin();
 2098|       |
 2099|   992k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2100|   992k|            auto seg = get_contiguous_beginning(range);
 2101|   992k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|   992k|                seg_it != seg.end()) {
 2103|   992k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|   992k|            }
 2105|   992k|            ranges::advance(it, seg.size());
 2106|   992k|        }
 2107|       |
 2108|   992k|        return read_until_code_point(
 2109|   992k|            ranges::subrange{it, range.end()},
 2110|   992k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|   992k|    }
 2112|   992k|}
_ZN3scn2v34impl22make_contiguous_bufferIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 1682|   992k|{
 1683|   992k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|   992k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|   992k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|   992k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|   992k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|   992k|    }
 1688|   992k|    else {
 1689|   992k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|   992k|    }
 1691|   992k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEELPv0EEEOT_:
 1489|   992k|    {
 1490|   992k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEELPv0EEEvOT_:
 1576|   992k|    {
 1577|   992k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   992k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|   992k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEvOT_:
 1620|   992k|    {
 1621|   992k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|   992k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|   992k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|   992k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|   992k|            m_storage.reset();
 1627|   992k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|   992k|        }
 1629|   992k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|   992k|                                          std::basic_string<CharT>>) {
 1631|   992k|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  930|   992k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1632|   992k|            m_view = string_view_type{*m_storage};
 1633|   992k|        }
 1634|   992k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|   992k|                                          typename detail::basic_scan_buffer<
 1636|   992k|                                              value_t>::forward_iterator> &&
 1637|   992k|                           ranges::common_range<Range>) {
 1638|   992k|            auto beg_seg = range.begin().contiguous_segment();
 1639|   992k|            auto end_seg = range.end().contiguous_segment();
 1640|   992k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|   992k|                             detail::to_address(end_seg.end()))) {
 1642|   992k|                auto& str = m_storage.emplace();
 1643|   992k|                str.reserve(range.end().position() - range.begin().position());
 1644|   992k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|   992k|                m_view = string_view_type{str};
 1646|   992k|                return;
 1647|   992k|            }
 1648|       |
 1649|   992k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   992k|                                                            end_seg.data());
 1651|   992k|            m_storage.reset();
 1652|   992k|        }
 1653|   992k|        else {
 1654|   992k|            auto& str = m_storage.emplace();
 1655|   992k|            if constexpr (ranges::sized_range<Range>) {
 1656|   992k|                str.reserve(range.size());
 1657|   992k|            }
 1658|   992k|            if constexpr (ranges::common_range<Range>) {
 1659|   992k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|   992k|                          std::back_inserter(str));
 1661|   992k|            }
 1662|   992k|            else {
 1663|   992k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|   992k|                     ++it) {
 1665|   992k|                    str.push_back(*it);
 1666|   992k|                }
 1667|   992k|            }
 1668|   992k|            m_view = string_view_type{str};
 1669|   992k|        }
 1670|   992k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIfEET_S5_:
 4099|   714k|    {
 4100|   714k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 77.3k, False: 637k]
  ------------------
 4101|  77.3k|            return std::copysign(value, T{-1.0});
 4102|  77.3k|        }
 4103|   637k|        return std::copysign(value, T{1.0});
 4104|   714k|    }
_ZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2087|   198k|{
 2088|   198k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|   198k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|   198k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|   198k|        auto buf = make_contiguous_buffer(range);
 2092|   198k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|   198k|        return ranges::next(range.begin(),
 2094|   198k|                            ranges::distance(buf.view().begin(), it));
 2095|   198k|    }
 2096|   198k|    else {
 2097|   198k|        auto it = range.begin();
 2098|       |
 2099|   198k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|   198k|            auto seg = get_contiguous_beginning(range);
 2101|   198k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|   198k|                seg_it != seg.end()) {
 2103|   198k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|   198k|            }
 2105|   198k|            ranges::advance(it, seg.size());
 2106|   198k|        }
 2107|       |
 2108|   198k|        return read_until_code_point(
 2109|   198k|            ranges::subrange{it, range.end()},
 2110|   198k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|   198k|    }
 2112|   198k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_LPv0EEEOSE_:
  753|   198k|    {
  754|   198k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_LPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESO_Di:
  743|   365k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   365k|              cvref<T> obj = *get<T>(fn);
  745|   365k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   365k|                  obj(static_cast<decltype(args)>(args)...);
  747|   365k|              }
  748|   365k|              else {
  749|   365k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   365k|              }
  751|   365k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  683|   365k|    {
  684|   365k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   365k|            return static_cast<T*>(s.m_cp);
  686|   365k|        }
  687|   365k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   365k|            return static_cast<T*>(s.m_p);
  689|   365k|        }
  690|   365k|        else {
  691|   365k|            return reinterpret_cast<T*>(s.m_fp);
  692|   365k|        }
  693|   365k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2110|   365k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_LPv0EEEPSE_:
  661|   198k|        {
  662|   198k|        }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEELPv0EEEvOT_:
 1576|   198k|    {
 1577|   198k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   198k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|   198k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEvOT_:
 1620|   198k|    {
 1621|   198k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|   198k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|   198k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|   198k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|   198k|            m_storage.reset();
 1627|   198k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|   198k|        }
 1629|   198k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|   198k|                                          std::basic_string<CharT>>) {
 1631|   198k|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  930|   198k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1632|   198k|            m_view = string_view_type{*m_storage};
 1633|   198k|        }
 1634|   198k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|   198k|                                          typename detail::basic_scan_buffer<
 1636|   198k|                                              value_t>::forward_iterator> &&
 1637|   198k|                           ranges::common_range<Range>) {
 1638|   198k|            auto beg_seg = range.begin().contiguous_segment();
 1639|   198k|            auto end_seg = range.end().contiguous_segment();
 1640|   198k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|   198k|                             detail::to_address(end_seg.end()))) {
 1642|   198k|                auto& str = m_storage.emplace();
 1643|   198k|                str.reserve(range.end().position() - range.begin().position());
 1644|   198k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|   198k|                m_view = string_view_type{str};
 1646|   198k|                return;
 1647|   198k|            }
 1648|       |
 1649|   198k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   198k|                                                            end_seg.data());
 1651|   198k|            m_storage.reset();
 1652|   198k|        }
 1653|   198k|        else {
 1654|   198k|            auto& str = m_storage.emplace();
 1655|   198k|            if constexpr (ranges::sized_range<Range>) {
 1656|   198k|                str.reserve(range.size());
 1657|   198k|            }
 1658|   198k|            if constexpr (ranges::common_range<Range>) {
 1659|   198k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|   198k|                          std::back_inserter(str));
 1661|   198k|            }
 1662|   198k|            else {
 1663|   198k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|   198k|                     ++it) {
 1665|   198k|                    str.push_back(*it);
 1666|   198k|                }
 1667|   198k|            }
 1668|   198k|            m_view = string_view_type{str};
 1669|   198k|        }
 1670|   198k|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIfEET_S5_:
 4099|   167k|    {
 4100|   167k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 276, False: 166k]
  ------------------
 4101|    276|            return std::copysign(value, T{-1.0});
 4102|    276|        }
 4103|   166k|        return std::copysign(value, T{1.0});
 4104|   167k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIdEET_S5_:
 4099|   746k|    {
 4100|   746k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 80.3k, False: 665k]
  ------------------
 4101|  80.3k|            return std::copysign(value, T{-1.0});
 4102|  80.3k|        }
 4103|   665k|        return std::copysign(value, T{1.0});
 4104|   746k|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIdEET_S5_:
 4099|   170k|    {
 4100|   170k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 276, False: 170k]
  ------------------
 4101|    276|            return std::copysign(value, T{-1.0});
 4102|    276|        }
 4103|   170k|        return std::copysign(value, T{1.0});
 4104|   170k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIeEET_S5_:
 4099|   753k|    {
 4100|   753k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 82.5k, False: 670k]
  ------------------
 4101|  82.5k|            return std::copysign(value, T{-1.0});
 4102|  82.5k|        }
 4103|   670k|        return std::copysign(value, T{1.0});
 4104|   753k|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIeEET_S5_:
 4099|   173k|    {
 4100|   173k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 281, False: 172k]
  ------------------
 4101|    281|            return std::copysign(value, T{-1.0});
 4102|    281|        }
 4103|   172k|        return std::copysign(value, T{1.0});
 4104|   173k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|   325k|{
 5795|   325k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   325k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.04k, False: 321k]
  |  |  ------------------
  ------------------
 5796|  4.04k|        return unexpected(e);
 5797|  4.04k|    }
 5798|       |
 5799|   321k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 321k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   321k|    return skip_classic_whitespace(range);
 5804|   321k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIfEENS0_13scan_expectedIPKcEERT_:
 5870|   104k|    {
 5871|   104k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   104k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|   104k|                          basic_contiguous_scan_context<char_type>>) {
 5875|   104k|            auto rd = make_reader<T, char_type>();
 5876|   104k|            return impl(rd, range, value);
 5877|   104k|        }
 5878|   104k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|   104k|            auto rd = make_reader<T, char_type>();
 5880|   104k|            if (!is_segment_contiguous(range)) {
 5881|   104k|                return impl(rd, range, value);
 5882|   104k|            }
 5883|   104k|            auto crange = get_as_contiguous(range);
 5884|   104k|            SCN_TRY(it, impl(rd, crange, value));
 5885|   104k|            return ranges::next(range.begin(),
 5886|   104k|                                ranges::distance(crange.begin(), it));
 5887|   104k|        }
 5888|   104k|        else {
 5889|   104k|            SCN_EXPECT(false);
 5890|   104k|            SCN_UNREACHABLE;
 5891|   104k|        }
 5892|   104k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|   104k|    {
 5863|   104k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   104k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   104k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   104k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   104k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.34k, False: 102k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.34k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.34k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.34k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.34k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.34k|    }                                                  \
  |  |  |  | 3671|   104k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   102k|                        .transform_error(make_eof_scan_error));
 5865|   102k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   104k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|   102k|    {
 4152|   102k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   102k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   102k|        float_reader<CharT> rd{};
 4155|   102k|        return read_impl<Range>(
 4156|   102k|            range, rd,
 4157|   102k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   102k|                return r.read_source(SCN_FWD(args)...);
 4159|   102k|            },
 4160|   102k|            value);
 4161|   102k|    }
_ZN3scn2v34impl12float_readerIcEC2Ev:
 3657|   662k|    constexpr float_reader() = default;
_ZN3scn2v34impl17float_reader_baseC2Ev:
 3643|   850k|    constexpr float_reader_base() = default;
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|   102k|    {
  754|   102k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|   102k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   102k|              cvref<T> obj = *get<T>(fn);
  745|   102k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   102k|                  obj(static_cast<decltype(args)>(args)...);
  747|   102k|              }
  748|   102k|              else {
  749|   102k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   102k|              }
  751|   102k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   102k|    {
  684|   102k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   102k|            return static_cast<T*>(s.m_cp);
  686|   102k|        }
  687|   102k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   102k|            return static_cast<T*>(s.m_p);
  689|   102k|        }
  690|   102k|        else {
  691|   102k|            return reinterpret_cast<T*>(s.m_fp);
  692|   102k|        }
  693|   102k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|   102k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   102k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   102k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   102k|        {
  662|   102k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 5870|   109k|    {
 5871|   109k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   109k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|   109k|                          basic_contiguous_scan_context<char_type>>) {
 5875|   109k|            auto rd = make_reader<T, char_type>();
 5876|   109k|            return impl(rd, range, value);
 5877|   109k|        }
 5878|   109k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|   109k|            auto rd = make_reader<T, char_type>();
 5880|   109k|            if (!is_segment_contiguous(range)) {
 5881|   109k|                return impl(rd, range, value);
 5882|   109k|            }
 5883|   109k|            auto crange = get_as_contiguous(range);
 5884|   109k|            SCN_TRY(it, impl(rd, crange, value));
 5885|   109k|            return ranges::next(range.begin(),
 5886|   109k|                                ranges::distance(crange.begin(), it));
 5887|   109k|        }
 5888|   109k|        else {
 5889|   109k|            SCN_EXPECT(false);
 5890|   109k|            SCN_UNREACHABLE;
 5891|   109k|        }
 5892|   109k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|   109k|    {
 5863|   109k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   109k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   109k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   109k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.53k, False: 108k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.53k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.53k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.53k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.53k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.53k|    }                                                  \
  |  |  |  | 3671|   109k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   108k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   108k|                        .transform_error(make_eof_scan_error));
 5865|   108k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   109k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|   108k|    {
 4152|   108k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   108k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   108k|        float_reader<CharT> rd{};
 4155|   108k|        return read_impl<Range>(
 4156|   108k|            range, rd,
 4157|   108k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   108k|                return r.read_source(SCN_FWD(args)...);
 4159|   108k|            },
 4160|   108k|            value);
 4161|   108k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|   108k|    {
  754|   108k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|   108k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   108k|              cvref<T> obj = *get<T>(fn);
  745|   108k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   108k|                  obj(static_cast<decltype(args)>(args)...);
  747|   108k|              }
  748|   108k|              else {
  749|   108k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   108k|              }
  751|   108k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   108k|    {
  684|   108k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   108k|            return static_cast<T*>(s.m_cp);
  686|   108k|        }
  687|   108k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   108k|            return static_cast<T*>(s.m_p);
  689|   108k|        }
  690|   108k|        else {
  691|   108k|            return reinterpret_cast<T*>(s.m_fp);
  692|   108k|        }
  693|   108k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|   108k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   108k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   108k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   108k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   108k|        {
  662|   108k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIeEENS0_13scan_expectedIPKcEERT_:
 5870|   111k|    {
 5871|   111k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   111k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|   111k|                          basic_contiguous_scan_context<char_type>>) {
 5875|   111k|            auto rd = make_reader<T, char_type>();
 5876|   111k|            return impl(rd, range, value);
 5877|   111k|        }
 5878|   111k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|   111k|            auto rd = make_reader<T, char_type>();
 5880|   111k|            if (!is_segment_contiguous(range)) {
 5881|   111k|                return impl(rd, range, value);
 5882|   111k|            }
 5883|   111k|            auto crange = get_as_contiguous(range);
 5884|   111k|            SCN_TRY(it, impl(rd, crange, value));
 5885|   111k|            return ranges::next(range.begin(),
 5886|   111k|                                ranges::distance(crange.begin(), it));
 5887|   111k|        }
 5888|   111k|        else {
 5889|   111k|            SCN_EXPECT(false);
 5890|   111k|            SCN_UNREACHABLE;
 5891|   111k|        }
 5892|   111k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|   111k|    {
 5863|   111k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   111k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   111k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   111k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.65k, False: 110k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.65k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.65k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.65k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.65k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.65k|    }                                                  \
  |  |  |  | 3671|   111k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   110k|                        .transform_error(make_eof_scan_error));
 5865|   110k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   111k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|   110k|    {
 4152|   110k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   110k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   110k|        float_reader<CharT> rd{};
 4155|   110k|        return read_impl<Range>(
 4156|   110k|            range, rd,
 4157|   110k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   110k|                return r.read_source(SCN_FWD(args)...);
 4159|   110k|            },
 4160|   110k|            value);
 4161|   110k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|   110k|    {
  754|   110k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|   110k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   110k|              cvref<T> obj = *get<T>(fn);
  745|   110k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   110k|                  obj(static_cast<decltype(args)>(args)...);
  747|   110k|              }
  748|   110k|              else {
  749|   110k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   110k|              }
  751|   110k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   110k|    {
  684|   110k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   110k|            return static_cast<T*>(s.m_cp);
  686|   110k|        }
  687|   110k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   110k|            return static_cast<T*>(s.m_p);
  689|   110k|        }
  690|   110k|        else {
  691|   110k|            return reinterpret_cast<T*>(s.m_fp);
  692|   110k|        }
  693|   110k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|   110k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   110k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   110k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   110k|        {
  662|   110k|        }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5794|   345k|{
 5795|   345k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   345k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.07k, False: 341k]
  |  |  ------------------
  ------------------
 5796|  4.07k|        return unexpected(e);
 5797|  4.07k|    }
 5798|       |
 5799|   341k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 341k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   341k|    return skip_classic_whitespace(range);
 5804|   341k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|   111k|    {
 5871|   111k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   111k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|   111k|            auto rd = make_reader<T, char_type>();
 5876|   111k|            return impl(rd, range, value);
 5877|   111k|        }
 5878|   111k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|   111k|            auto rd = make_reader<T, char_type>();
 5880|   111k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 111k, False: 0]
  ------------------
 5881|   111k|                return impl(rd, range, value);
 5882|   111k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|   111k|        else {
 5889|   111k|            SCN_EXPECT(false);
 5890|   111k|            SCN_UNREACHABLE;
 5891|   111k|        }
 5892|   111k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|   111k|    {
 5863|   111k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   111k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   111k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   111k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.35k, False: 109k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.35k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.35k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.35k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.35k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.35k|    }                                                  \
  |  |  |  | 3671|   111k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   109k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   109k|                        .transform_error(make_eof_scan_error));
 5865|   109k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   111k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|   109k|    {
 4152|   109k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   109k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   109k|        float_reader<CharT> rd{};
 4155|   109k|        return read_impl<Range>(
 4156|   109k|            range, rd,
 4157|   109k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   109k|                return r.read_source(SCN_FWD(args)...);
 4159|   109k|            },
 4160|   109k|            value);
 4161|   109k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|   109k|    {
  754|   109k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|   109k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   109k|              cvref<T> obj = *get<T>(fn);
  745|   109k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   109k|                  obj(static_cast<decltype(args)>(args)...);
  747|   109k|              }
  748|   109k|              else {
  749|   109k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   109k|              }
  751|   109k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   109k|    {
  684|   109k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   109k|            return static_cast<T*>(s.m_cp);
  686|   109k|        }
  687|   109k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   109k|            return static_cast<T*>(s.m_p);
  689|   109k|        }
  690|   109k|        else {
  691|   109k|            return reinterpret_cast<T*>(s.m_fp);
  692|   109k|        }
  693|   109k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|   109k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   109k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   109k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   109k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   109k|        {
  662|   109k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|   116k|    {
 5871|   116k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   116k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|   116k|            auto rd = make_reader<T, char_type>();
 5876|   116k|            return impl(rd, range, value);
 5877|   116k|        }
 5878|   116k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|   116k|            auto rd = make_reader<T, char_type>();
 5880|   116k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 116k, False: 0]
  ------------------
 5881|   116k|                return impl(rd, range, value);
 5882|   116k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|   116k|        else {
 5889|   116k|            SCN_EXPECT(false);
 5890|   116k|            SCN_UNREACHABLE;
 5891|   116k|        }
 5892|   116k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|   116k|    {
 5863|   116k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   116k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   116k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   116k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.54k, False: 115k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.54k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.54k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.54k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.54k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.54k|    }                                                  \
  |  |  |  | 3671|   116k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   115k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   115k|                        .transform_error(make_eof_scan_error));
 5865|   115k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   116k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|   115k|    {
 4152|   115k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   115k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   115k|        float_reader<CharT> rd{};
 4155|   115k|        return read_impl<Range>(
 4156|   115k|            range, rd,
 4157|   115k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   115k|                return r.read_source(SCN_FWD(args)...);
 4159|   115k|            },
 4160|   115k|            value);
 4161|   115k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|   115k|    {
  754|   115k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|   115k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   115k|              cvref<T> obj = *get<T>(fn);
  745|   115k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   115k|                  obj(static_cast<decltype(args)>(args)...);
  747|   115k|              }
  748|   115k|              else {
  749|   115k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   115k|              }
  751|   115k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   115k|    {
  684|   115k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   115k|            return static_cast<T*>(s.m_cp);
  686|   115k|        }
  687|   115k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   115k|            return static_cast<T*>(s.m_p);
  689|   115k|        }
  690|   115k|        else {
  691|   115k|            return reinterpret_cast<T*>(s.m_fp);
  692|   115k|        }
  693|   115k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|   115k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   115k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   115k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   115k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   115k|        {
  662|   115k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|   118k|    {
 5871|   118k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   118k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|   118k|            auto rd = make_reader<T, char_type>();
 5876|   118k|            return impl(rd, range, value);
 5877|   118k|        }
 5878|   118k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|   118k|            auto rd = make_reader<T, char_type>();
 5880|   118k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 118k, False: 0]
  ------------------
 5881|   118k|                return impl(rd, range, value);
 5882|   118k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|   118k|        else {
 5889|   118k|            SCN_EXPECT(false);
 5890|   118k|            SCN_UNREACHABLE;
 5891|   118k|        }
 5892|   118k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|   118k|    {
 5863|   118k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   118k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   118k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   118k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   118k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.66k, False: 116k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.66k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.66k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.66k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.66k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.66k|    }                                                  \
  |  |  |  | 3671|   118k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   116k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   116k|                        .transform_error(make_eof_scan_error));
 5865|   116k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   118k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|   116k|    {
 4152|   116k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   116k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   116k|        float_reader<CharT> rd{};
 4155|   116k|        return read_impl<Range>(
 4156|   116k|            range, rd,
 4157|   116k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   116k|                return r.read_source(SCN_FWD(args)...);
 4159|   116k|            },
 4160|   116k|            value);
 4161|   116k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|   116k|    {
  754|   116k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|   116k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   116k|              cvref<T> obj = *get<T>(fn);
  745|   116k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   116k|                  obj(static_cast<decltype(args)>(args)...);
  747|   116k|              }
  748|   116k|              else {
  749|   116k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   116k|              }
  751|   116k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   116k|    {
  684|   116k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   116k|            return static_cast<T*>(s.m_cp);
  686|   116k|        }
  687|   116k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   116k|            return static_cast<T*>(s.m_p);
  689|   116k|        }
  690|   116k|        else {
  691|   116k|            return reinterpret_cast<T*>(s.m_fp);
  692|   116k|        }
  693|   116k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|   116k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   116k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   116k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   116k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   116k|        {
  662|   116k|        }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2878|   771k|    {
 2879|   771k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2882|  2.25M|    {
 2883|  2.25M|        return m_current;
 2884|  2.25M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2887|  1.48M|    {
 2888|  1.48M|        return m_range.end();
 2889|  1.48M|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2902|   709k|    {
 2903|   709k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   709k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   709k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|   709k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|   709k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 709k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|   709k|        }
 2909|   709k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   709k|    static_cast<    \
  |  |  929|   709k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|   709k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2892|   771k|    {
 2893|   771k|        return ranges::subrange{begin(), end()};
 2894|   771k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|   771k|    {
 6037|   771k|        const bool need_skipped_width =
 6038|   771k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 771k]
  |  Branch (6038:33): [True: 0, False: 771k]
  ------------------
 6039|   771k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|   771k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 771k]
  ------------------
 6043|   771k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 771k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|   771k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 771k, False: 0]
  |  Branch (6047:56): [True: 771k, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|   771k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 771k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  1.53M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|   771k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   771k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   771k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   771k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 11.5k, False: 759k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  11.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  11.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  11.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  11.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  11.5k|    }                                                  \
  |  |  |  | 3671|   771k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   759k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  1.53M|                            make_eof_scan_error));
 6058|       |
 6059|  1.53M|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 759k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|   759k|            return result_type{it, 0};
 6067|  1.53M|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|   771k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|   699k|    {
 6079|   699k|        const bool need_skipped_width =
 6080|   699k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 699k]
  |  Branch (6080:33): [True: 0, False: 699k]
  ------------------
 6081|   699k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|   699k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 699k]
  ------------------
 6084|   699k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 699k]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|   699k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 699k, False: 0]
  ------------------
 6093|   699k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 0, False: 699k]
  ------------------
 6094|   699k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 0]
  ------------------
 6096|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|   699k|        return result_type{rng.begin(), 0};
 6118|   699k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIfEENS0_13scan_expectedIPKcEERT_:
 6192|   249k|    {
 6193|   249k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   249k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|   249k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   249k|            auto rd = make_reader<T, char_type>();
 6198|   249k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   249k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 249k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   249k|            return impl(rd, range, value);
 6203|   249k|        }
 6204|   249k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   249k|            auto rd = make_reader<T, char_type>();
 6206|   249k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|   249k|                return unexpected(e);
 6208|   249k|            }
 6209|       |
 6210|   249k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|   249k|                specs.width != 0) {
 6212|   249k|                return impl(rd, range, value);
 6213|   249k|            }
 6214|       |
 6215|   249k|            auto crange = get_as_contiguous(range);
 6216|   249k|            SCN_TRY(it, impl(rd, crange, value));
 6217|   249k|            return ranges::next(range.begin(),
 6218|   249k|                                ranges::distance(crange.begin(), it));
 6219|   249k|        }
 6220|   249k|        else {
 6221|   249k|            SCN_EXPECT(false);
 6222|   249k|            SCN_UNREACHABLE;
 6223|   249k|        }
 6224|   249k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   249k|    {
 6124|   249k|        const bool need_skipped_width =
 6125|   249k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 249k]
  |  Branch (6125:33): [True: 0, False: 249k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   249k|        auto it = rng.begin();
 6129|   249k|        std::ptrdiff_t prefix_width = 0;
 6130|   249k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 249k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   249k|        else {
 6138|   249k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   249k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   249k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   249k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   249k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.53k, False: 246k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.53k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.53k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.53k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.53k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.53k|    }                                                  \
  |  |  |  | 3671|   249k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   246k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   246k|            std::tie(it, prefix_width) = prefix_result;
 6140|   246k|        }
 6141|   246k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   246k|        std::ptrdiff_t value_width = 0;
 6145|   246k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 246k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   246k|        else {
 6161|   246k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   246k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   246k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   246k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 17.1k, False: 229k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  17.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  17.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  17.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  17.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  17.1k|    }                                                  \
  |  | 3671|   246k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   246k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   229k|                                             specs, value, loc));
 6163|       |
 6164|   229k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 229k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   229k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   229k|        std::ptrdiff_t postfix_width = 0;
 6173|   229k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 225k, False: 3.11k]
  ------------------
 6174|   225k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   225k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   225k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   225k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   225k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 225k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   225k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   225k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   225k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   225k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   225k|                                 value_width));
 6178|   225k|            std::tie(it, postfix_width) = postfix_result;
 6179|   225k|        }
 6180|       |
 6181|   229k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   229k|                                                 value_width, postfix_width);
 6183|   229k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 229k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   229k|        return it;
 6188|   229k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 6192|   259k|    {
 6193|   259k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   259k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|   259k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   259k|            auto rd = make_reader<T, char_type>();
 6198|   259k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   259k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 259k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   259k|            return impl(rd, range, value);
 6203|   259k|        }
 6204|   259k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   259k|            auto rd = make_reader<T, char_type>();
 6206|   259k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|   259k|                return unexpected(e);
 6208|   259k|            }
 6209|       |
 6210|   259k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|   259k|                specs.width != 0) {
 6212|   259k|                return impl(rd, range, value);
 6213|   259k|            }
 6214|       |
 6215|   259k|            auto crange = get_as_contiguous(range);
 6216|   259k|            SCN_TRY(it, impl(rd, crange, value));
 6217|   259k|            return ranges::next(range.begin(),
 6218|   259k|                                ranges::distance(crange.begin(), it));
 6219|   259k|        }
 6220|   259k|        else {
 6221|   259k|            SCN_EXPECT(false);
 6222|   259k|            SCN_UNREACHABLE;
 6223|   259k|        }
 6224|   259k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   259k|    {
 6124|   259k|        const bool need_skipped_width =
 6125|   259k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 259k]
  |  Branch (6125:33): [True: 0, False: 259k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   259k|        auto it = rng.begin();
 6129|   259k|        std::ptrdiff_t prefix_width = 0;
 6130|   259k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 259k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   259k|        else {
 6138|   259k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   259k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   259k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   259k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   259k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.90k, False: 255k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.90k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.90k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.90k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.90k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.90k|    }                                                  \
  |  |  |  | 3671|   259k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   255k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   255k|            std::tie(it, prefix_width) = prefix_result;
 6140|   255k|        }
 6141|   255k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   255k|        std::ptrdiff_t value_width = 0;
 6145|   255k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 255k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   255k|        else {
 6161|   255k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   255k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   255k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   255k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 16.7k, False: 238k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  16.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  16.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  16.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  16.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  16.7k|    }                                                  \
  |  | 3671|   255k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   255k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   238k|                                             specs, value, loc));
 6163|       |
 6164|   238k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 238k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   238k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   238k|        std::ptrdiff_t postfix_width = 0;
 6173|   238k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 235k, False: 3.43k]
  ------------------
 6174|   235k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   235k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   235k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   235k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   235k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 235k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   235k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   235k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   235k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   235k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   235k|                                 value_width));
 6178|   235k|            std::tie(it, postfix_width) = postfix_result;
 6179|   235k|        }
 6180|       |
 6181|   238k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   238k|                                                 value_width, postfix_width);
 6183|   238k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 238k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   238k|        return it;
 6188|   238k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIeEENS0_13scan_expectedIPKcEERT_:
 6192|   262k|    {
 6193|   262k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   262k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|   262k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   262k|            auto rd = make_reader<T, char_type>();
 6198|   262k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   262k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 262k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   262k|            return impl(rd, range, value);
 6203|   262k|        }
 6204|   262k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   262k|            auto rd = make_reader<T, char_type>();
 6206|   262k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|   262k|                return unexpected(e);
 6208|   262k|            }
 6209|       |
 6210|   262k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|   262k|                specs.width != 0) {
 6212|   262k|                return impl(rd, range, value);
 6213|   262k|            }
 6214|       |
 6215|   262k|            auto crange = get_as_contiguous(range);
 6216|   262k|            SCN_TRY(it, impl(rd, crange, value));
 6217|   262k|            return ranges::next(range.begin(),
 6218|   262k|                                ranges::distance(crange.begin(), it));
 6219|   262k|        }
 6220|   262k|        else {
 6221|   262k|            SCN_EXPECT(false);
 6222|   262k|            SCN_UNREACHABLE;
 6223|   262k|        }
 6224|   262k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   262k|    {
 6124|   262k|        const bool need_skipped_width =
 6125|   262k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 262k]
  |  Branch (6125:33): [True: 0, False: 262k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   262k|        auto it = rng.begin();
 6129|   262k|        std::ptrdiff_t prefix_width = 0;
 6130|   262k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 262k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   262k|        else {
 6138|   262k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   262k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   262k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   262k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   262k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.16k, False: 258k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.16k|    }                                                  \
  |  |  |  | 3671|   262k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   258k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   258k|            std::tie(it, prefix_width) = prefix_result;
 6140|   258k|        }
 6141|   258k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   258k|        std::ptrdiff_t value_width = 0;
 6145|   258k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 258k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   258k|        else {
 6161|   258k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   258k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   258k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   258k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 16.5k, False: 241k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  16.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  16.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  16.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  16.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  16.5k|    }                                                  \
  |  | 3671|   258k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   258k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   241k|                                             specs, value, loc));
 6163|       |
 6164|   241k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 241k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   241k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   241k|        std::ptrdiff_t postfix_width = 0;
 6173|   241k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 237k, False: 3.67k]
  ------------------
 6174|   237k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   237k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   237k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   237k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   237k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 237k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   237k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   237k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   237k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   237k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   237k|                                 value_width));
 6178|   237k|            std::tie(it, postfix_width) = postfix_result;
 6179|   237k|        }
 6180|       |
 6181|   241k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   241k|                                                 value_width, postfix_width);
 6183|   241k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 241k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   241k|        return it;
 6188|   241k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|  94.7k|{
 5795|  94.7k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  94.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 300, False: 94.4k]
  |  |  ------------------
  ------------------
 5796|    300|        return unexpected(e);
 5797|    300|    }
 5798|       |
 5799|  94.4k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 94.4k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|  94.4k|    return skip_classic_whitespace(range);
 5804|  94.4k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIfEENS0_13scan_expectedIPKwEERT_:
 5870|  30.7k|    {
 5871|  30.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  30.7k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  30.7k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  30.7k|            auto rd = make_reader<T, char_type>();
 5876|  30.7k|            return impl(rd, range, value);
 5877|  30.7k|        }
 5878|  30.7k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  30.7k|            auto rd = make_reader<T, char_type>();
 5880|  30.7k|            if (!is_segment_contiguous(range)) {
 5881|  30.7k|                return impl(rd, range, value);
 5882|  30.7k|            }
 5883|  30.7k|            auto crange = get_as_contiguous(range);
 5884|  30.7k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  30.7k|            return ranges::next(range.begin(),
 5886|  30.7k|                                ranges::distance(crange.begin(), it));
 5887|  30.7k|        }
 5888|  30.7k|        else {
 5889|  30.7k|            SCN_EXPECT(false);
 5890|  30.7k|            SCN_UNREACHABLE;
 5891|  30.7k|        }
 5892|  30.7k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  30.7k|    {
 5863|  30.7k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  30.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  30.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  30.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  30.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 225, False: 30.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    225|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    225|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    225|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    225|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    225|    }                                                  \
  |  |  |  | 3671|  30.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  30.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  30.5k|                        .transform_error(make_eof_scan_error));
 5865|  30.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  30.7k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|  30.5k|    {
 4152|  30.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  30.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  30.5k|        float_reader<CharT> rd{};
 4155|  30.5k|        return read_impl<Range>(
 4156|  30.5k|            range, rd,
 4157|  30.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  30.5k|                return r.read_source(SCN_FWD(args)...);
 4159|  30.5k|            },
 4160|  30.5k|            value);
 4161|  30.5k|    }
_ZN3scn2v34impl12float_readerIwEC2Ev:
 3657|   187k|    constexpr float_reader() = default;
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|  30.5k|    {
  754|  30.5k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|  30.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  30.5k|              cvref<T> obj = *get<T>(fn);
  745|  30.5k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  30.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  30.5k|              }
  748|  30.5k|              else {
  749|  30.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  30.5k|              }
  751|  30.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  30.5k|    {
  684|  30.5k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  30.5k|            return static_cast<T*>(s.m_cp);
  686|  30.5k|        }
  687|  30.5k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  30.5k|            return static_cast<T*>(s.m_p);
  689|  30.5k|        }
  690|  30.5k|        else {
  691|  30.5k|            return reinterpret_cast<T*>(s.m_fp);
  692|  30.5k|        }
  693|  30.5k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|  30.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  30.5k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  30.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  30.5k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  30.5k|        {
  662|  30.5k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 5870|  31.7k|    {
 5871|  31.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  31.7k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  31.7k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  31.7k|            auto rd = make_reader<T, char_type>();
 5876|  31.7k|            return impl(rd, range, value);
 5877|  31.7k|        }
 5878|  31.7k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  31.7k|            auto rd = make_reader<T, char_type>();
 5880|  31.7k|            if (!is_segment_contiguous(range)) {
 5881|  31.7k|                return impl(rd, range, value);
 5882|  31.7k|            }
 5883|  31.7k|            auto crange = get_as_contiguous(range);
 5884|  31.7k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  31.7k|            return ranges::next(range.begin(),
 5886|  31.7k|                                ranges::distance(crange.begin(), it));
 5887|  31.7k|        }
 5888|  31.7k|        else {
 5889|  31.7k|            SCN_EXPECT(false);
 5890|  31.7k|            SCN_UNREACHABLE;
 5891|  31.7k|        }
 5892|  31.7k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  31.7k|    {
 5863|  31.7k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  31.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  31.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  31.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  31.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 249, False: 31.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    249|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    249|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    249|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    249|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    249|    }                                                  \
  |  |  |  | 3671|  31.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  31.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  31.4k|                        .transform_error(make_eof_scan_error));
 5865|  31.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  31.7k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|  31.4k|    {
 4152|  31.4k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  31.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  31.4k|        float_reader<CharT> rd{};
 4155|  31.4k|        return read_impl<Range>(
 4156|  31.4k|            range, rd,
 4157|  31.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  31.4k|                return r.read_source(SCN_FWD(args)...);
 4159|  31.4k|            },
 4160|  31.4k|            value);
 4161|  31.4k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|  31.4k|    {
  754|  31.4k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|  31.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  31.4k|              cvref<T> obj = *get<T>(fn);
  745|  31.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  31.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  31.4k|              }
  748|  31.4k|              else {
  749|  31.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  31.4k|              }
  751|  31.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  31.4k|    {
  684|  31.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  31.4k|            return static_cast<T*>(s.m_cp);
  686|  31.4k|        }
  687|  31.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  31.4k|            return static_cast<T*>(s.m_p);
  689|  31.4k|        }
  690|  31.4k|        else {
  691|  31.4k|            return reinterpret_cast<T*>(s.m_fp);
  692|  31.4k|        }
  693|  31.4k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|  31.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  31.4k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  31.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  31.4k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  31.4k|        {
  662|  31.4k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIeEENS0_13scan_expectedIPKwEERT_:
 5870|  32.2k|    {
 5871|  32.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  32.2k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  32.2k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  32.2k|            auto rd = make_reader<T, char_type>();
 5876|  32.2k|            return impl(rd, range, value);
 5877|  32.2k|        }
 5878|  32.2k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  32.2k|            auto rd = make_reader<T, char_type>();
 5880|  32.2k|            if (!is_segment_contiguous(range)) {
 5881|  32.2k|                return impl(rd, range, value);
 5882|  32.2k|            }
 5883|  32.2k|            auto crange = get_as_contiguous(range);
 5884|  32.2k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  32.2k|            return ranges::next(range.begin(),
 5886|  32.2k|                                ranges::distance(crange.begin(), it));
 5887|  32.2k|        }
 5888|  32.2k|        else {
 5889|  32.2k|            SCN_EXPECT(false);
 5890|  32.2k|            SCN_UNREACHABLE;
 5891|  32.2k|        }
 5892|  32.2k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  32.2k|    {
 5863|  32.2k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  32.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  32.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  32.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  32.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 264, False: 32.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    264|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    264|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    264|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    264|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    264|    }                                                  \
  |  |  |  | 3671|  32.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  32.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  32.0k|                        .transform_error(make_eof_scan_error));
 5865|  32.0k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  32.2k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|  32.0k|    {
 4152|  32.0k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  32.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  32.0k|        float_reader<CharT> rd{};
 4155|  32.0k|        return read_impl<Range>(
 4156|  32.0k|            range, rd,
 4157|  32.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  32.0k|                return r.read_source(SCN_FWD(args)...);
 4159|  32.0k|            },
 4160|  32.0k|            value);
 4161|  32.0k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|  32.0k|    {
  754|  32.0k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|  32.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  32.0k|              cvref<T> obj = *get<T>(fn);
  745|  32.0k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  32.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  32.0k|              }
  748|  32.0k|              else {
  749|  32.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  32.0k|              }
  751|  32.0k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  32.0k|    {
  684|  32.0k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  32.0k|            return static_cast<T*>(s.m_cp);
  686|  32.0k|        }
  687|  32.0k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  32.0k|            return static_cast<T*>(s.m_p);
  689|  32.0k|        }
  690|  32.0k|        else {
  691|  32.0k|            return reinterpret_cast<T*>(s.m_fp);
  692|  32.0k|        }
  693|  32.0k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|  32.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  32.0k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  32.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  32.0k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  32.0k|        {
  662|  32.0k|        }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2878|   278k|    {
 2879|   278k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2882|   712k|    {
 2883|   712k|        return m_current;
 2884|   712k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2887|   433k|    {
 2888|   433k|        return m_range.end();
 2889|   433k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2902|   154k|    {
 2903|   154k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   154k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   154k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|   154k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|   154k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 154k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|   154k|        }
 2909|   154k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   154k|    static_cast<    \
  |  |  929|   154k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|   154k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2892|   278k|    {
 2893|   278k|        return ranges::subrange{begin(), end()};
 2894|   278k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|   278k|    {
 6037|   278k|        const bool need_skipped_width =
 6038|   278k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 278k]
  |  Branch (6038:33): [True: 0, False: 278k]
  ------------------
 6039|   278k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|   278k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 278k]
  ------------------
 6043|   278k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 278k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|   278k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 278k, False: 0]
  |  Branch (6047:56): [True: 278k, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|   278k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 278k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|   555k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|   278k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   278k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   278k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   278k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.20k, False: 276k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.20k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.20k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.20k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.20k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.20k|    }                                                  \
  |  |  |  | 3671|   278k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   276k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|   555k|                            make_eof_scan_error));
 6058|       |
 6059|   555k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 276k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|   276k|            return result_type{it, 0};
 6067|   555k|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|   278k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|   153k|    {
 6079|   153k|        const bool need_skipped_width =
 6080|   153k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 153k]
  |  Branch (6080:33): [True: 0, False: 153k]
  ------------------
 6081|   153k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|   153k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 153k]
  ------------------
 6084|   153k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 153k]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|   153k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 153k, False: 0]
  ------------------
 6093|   153k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 0, False: 153k]
  ------------------
 6094|   153k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 0]
  ------------------
 6096|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|   153k|        return result_type{rng.begin(), 0};
 6118|   153k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIfEENS0_13scan_expectedIPKwEERT_:
 6192|  91.8k|    {
 6193|  91.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  91.8k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  91.8k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  91.8k|            auto rd = make_reader<T, char_type>();
 6198|  91.8k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  91.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 91.8k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|  91.8k|            return impl(rd, range, value);
 6203|  91.8k|        }
 6204|  91.8k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  91.8k|            auto rd = make_reader<T, char_type>();
 6206|  91.8k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  91.8k|                return unexpected(e);
 6208|  91.8k|            }
 6209|       |
 6210|  91.8k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  91.8k|                specs.width != 0) {
 6212|  91.8k|                return impl(rd, range, value);
 6213|  91.8k|            }
 6214|       |
 6215|  91.8k|            auto crange = get_as_contiguous(range);
 6216|  91.8k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  91.8k|            return ranges::next(range.begin(),
 6218|  91.8k|                                ranges::distance(crange.begin(), it));
 6219|  91.8k|        }
 6220|  91.8k|        else {
 6221|  91.8k|            SCN_EXPECT(false);
 6222|  91.8k|            SCN_UNREACHABLE;
 6223|  91.8k|        }
 6224|  91.8k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|  91.8k|    {
 6124|  91.8k|        const bool need_skipped_width =
 6125|  91.8k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 91.8k]
  |  Branch (6125:33): [True: 0, False: 91.8k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  91.8k|        auto it = rng.begin();
 6129|  91.8k|        std::ptrdiff_t prefix_width = 0;
 6130|  91.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 91.8k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  91.8k|        else {
 6138|  91.8k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  91.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  91.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  91.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  91.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 700, False: 91.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    700|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    700|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    700|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    700|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    700|    }                                                  \
  |  |  |  | 3671|  91.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  91.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  91.1k|            std::tie(it, prefix_width) = prefix_result;
 6140|  91.1k|        }
 6141|  91.1k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  91.1k|        std::ptrdiff_t value_width = 0;
 6145|  91.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 91.1k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  91.1k|        else {
 6161|  91.1k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  91.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  91.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  91.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 40.6k, False: 50.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  40.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  40.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  40.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  40.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  40.6k|    }                                                  \
  |  | 3671|  91.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  91.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  50.4k|                                             specs, value, loc));
 6163|       |
 6164|  50.4k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 50.4k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  50.4k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  50.4k|        std::ptrdiff_t postfix_width = 0;
 6173|  50.4k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 50.1k, False: 264]
  ------------------
 6174|  50.1k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  50.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  50.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  50.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  50.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 50.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  50.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  50.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  50.1k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  50.1k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  50.1k|                                 value_width));
 6178|  50.1k|            std::tie(it, postfix_width) = postfix_result;
 6179|  50.1k|        }
 6180|       |
 6181|  50.4k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  50.4k|                                                 value_width, postfix_width);
 6183|  50.4k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 50.4k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  50.4k|        return it;
 6188|  50.4k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 6192|  93.1k|    {
 6193|  93.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  93.1k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  93.1k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  93.1k|            auto rd = make_reader<T, char_type>();
 6198|  93.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  93.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 93.1k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|  93.1k|            return impl(rd, range, value);
 6203|  93.1k|        }
 6204|  93.1k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  93.1k|            auto rd = make_reader<T, char_type>();
 6206|  93.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  93.1k|                return unexpected(e);
 6208|  93.1k|            }
 6209|       |
 6210|  93.1k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  93.1k|                specs.width != 0) {
 6212|  93.1k|                return impl(rd, range, value);
 6213|  93.1k|            }
 6214|       |
 6215|  93.1k|            auto crange = get_as_contiguous(range);
 6216|  93.1k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  93.1k|            return ranges::next(range.begin(),
 6218|  93.1k|                                ranges::distance(crange.begin(), it));
 6219|  93.1k|        }
 6220|  93.1k|        else {
 6221|  93.1k|            SCN_EXPECT(false);
 6222|  93.1k|            SCN_UNREACHABLE;
 6223|  93.1k|        }
 6224|  93.1k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|  93.1k|    {
 6124|  93.1k|        const bool need_skipped_width =
 6125|  93.1k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 93.1k]
  |  Branch (6125:33): [True: 0, False: 93.1k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  93.1k|        auto it = rng.begin();
 6129|  93.1k|        std::ptrdiff_t prefix_width = 0;
 6130|  93.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 93.1k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  93.1k|        else {
 6138|  93.1k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  93.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  93.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  93.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  93.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 742, False: 92.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    742|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    742|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    742|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    742|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    742|    }                                                  \
  |  |  |  | 3671|  93.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  92.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  92.3k|            std::tie(it, prefix_width) = prefix_result;
 6140|  92.3k|        }
 6141|  92.3k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  92.3k|        std::ptrdiff_t value_width = 0;
 6145|  92.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 92.3k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  92.3k|        else {
 6161|  92.3k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  92.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  92.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  92.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 40.6k, False: 51.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  40.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  40.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  40.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  40.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  40.6k|    }                                                  \
  |  | 3671|  92.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  92.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  51.7k|                                             specs, value, loc));
 6163|       |
 6164|  51.7k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 51.7k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  51.7k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  51.7k|        std::ptrdiff_t postfix_width = 0;
 6173|  51.7k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 51.4k, False: 286]
  ------------------
 6174|  51.4k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  51.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  51.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  51.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  51.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 51.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  51.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  51.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  51.4k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  51.4k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  51.4k|                                 value_width));
 6178|  51.4k|            std::tie(it, postfix_width) = postfix_result;
 6179|  51.4k|        }
 6180|       |
 6181|  51.7k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  51.7k|                                                 value_width, postfix_width);
 6183|  51.7k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 51.7k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  51.7k|        return it;
 6188|  51.7k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIeEENS0_13scan_expectedIPKwEERT_:
 6192|  93.9k|    {
 6193|  93.9k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  93.9k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  93.9k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  93.9k|            auto rd = make_reader<T, char_type>();
 6198|  93.9k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  93.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 93.9k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|  93.9k|            return impl(rd, range, value);
 6203|  93.9k|        }
 6204|  93.9k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  93.9k|            auto rd = make_reader<T, char_type>();
 6206|  93.9k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  93.9k|                return unexpected(e);
 6208|  93.9k|            }
 6209|       |
 6210|  93.9k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  93.9k|                specs.width != 0) {
 6212|  93.9k|                return impl(rd, range, value);
 6213|  93.9k|            }
 6214|       |
 6215|  93.9k|            auto crange = get_as_contiguous(range);
 6216|  93.9k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  93.9k|            return ranges::next(range.begin(),
 6218|  93.9k|                                ranges::distance(crange.begin(), it));
 6219|  93.9k|        }
 6220|  93.9k|        else {
 6221|  93.9k|            SCN_EXPECT(false);
 6222|  93.9k|            SCN_UNREACHABLE;
 6223|  93.9k|        }
 6224|  93.9k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|  93.9k|    {
 6124|  93.9k|        const bool need_skipped_width =
 6125|  93.9k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 93.9k]
  |  Branch (6125:33): [True: 0, False: 93.9k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  93.9k|        auto it = rng.begin();
 6129|  93.9k|        std::ptrdiff_t prefix_width = 0;
 6130|  93.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 93.9k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  93.9k|        else {
 6138|  93.9k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  93.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  93.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  93.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  93.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 766, False: 93.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    766|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    766|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    766|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    766|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    766|    }                                                  \
  |  |  |  | 3671|  93.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  93.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  93.1k|            std::tie(it, prefix_width) = prefix_result;
 6140|  93.1k|        }
 6141|  93.1k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  93.1k|        std::ptrdiff_t value_width = 0;
 6145|  93.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 93.1k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  93.1k|        else {
 6161|  93.1k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  93.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  93.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  93.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 40.6k, False: 52.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  40.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  40.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  40.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  40.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  40.6k|    }                                                  \
  |  | 3671|  93.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  93.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  52.5k|                                             specs, value, loc));
 6163|       |
 6164|  52.5k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 52.5k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  52.5k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  52.5k|        std::ptrdiff_t postfix_width = 0;
 6173|  52.5k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 52.2k, False: 296]
  ------------------
 6174|  52.2k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  52.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  52.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  52.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  52.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 52.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  52.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  52.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  52.2k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  52.2k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  52.2k|                                 value_width));
 6178|  52.2k|            std::tie(it, postfix_width) = postfix_result;
 6179|  52.2k|        }
 6180|       |
 6181|  52.5k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  52.5k|                                                 value_width, postfix_width);
 6183|  52.5k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 52.5k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  52.5k|        return it;
 6188|  52.5k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5794|  94.6k|{
 5795|  94.6k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  94.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 300, False: 94.3k]
  |  |  ------------------
  ------------------
 5796|    300|        return unexpected(e);
 5797|    300|    }
 5798|       |
 5799|  94.3k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 94.3k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|  94.3k|    return skip_classic_whitespace(range);
 5804|  94.3k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  30.7k|    {
 5871|  30.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  30.7k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|  30.7k|            auto rd = make_reader<T, char_type>();
 5876|  30.7k|            return impl(rd, range, value);
 5877|  30.7k|        }
 5878|  30.7k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|  30.7k|            auto rd = make_reader<T, char_type>();
 5880|  30.7k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 30.7k, False: 0]
  ------------------
 5881|  30.7k|                return impl(rd, range, value);
 5882|  30.7k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|  30.7k|        else {
 5889|  30.7k|            SCN_EXPECT(false);
 5890|  30.7k|            SCN_UNREACHABLE;
 5891|  30.7k|        }
 5892|  30.7k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  30.7k|    {
 5863|  30.7k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  30.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  30.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  30.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  30.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 225, False: 30.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    225|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    225|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    225|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    225|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    225|    }                                                  \
  |  |  |  | 3671|  30.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  30.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  30.4k|                        .transform_error(make_eof_scan_error));
 5865|  30.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  30.7k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|  30.4k|    {
 4152|  30.4k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  30.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  30.4k|        float_reader<CharT> rd{};
 4155|  30.4k|        return read_impl<Range>(
 4156|  30.4k|            range, rd,
 4157|  30.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  30.4k|                return r.read_source(SCN_FWD(args)...);
 4159|  30.4k|            },
 4160|  30.4k|            value);
 4161|  30.4k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|  30.4k|    {
  754|  30.4k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|  30.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  30.4k|              cvref<T> obj = *get<T>(fn);
  745|  30.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  30.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  30.4k|              }
  748|  30.4k|              else {
  749|  30.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  30.4k|              }
  751|  30.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  30.4k|    {
  684|  30.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  30.4k|            return static_cast<T*>(s.m_cp);
  686|  30.4k|        }
  687|  30.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  30.4k|            return static_cast<T*>(s.m_p);
  689|  30.4k|        }
  690|  30.4k|        else {
  691|  30.4k|            return reinterpret_cast<T*>(s.m_fp);
  692|  30.4k|        }
  693|  30.4k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|  30.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  30.4k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  30.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  30.4k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  30.4k|        {
  662|  30.4k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  31.6k|    {
 5871|  31.6k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  31.6k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|  31.6k|            auto rd = make_reader<T, char_type>();
 5876|  31.6k|            return impl(rd, range, value);
 5877|  31.6k|        }
 5878|  31.6k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|  31.6k|            auto rd = make_reader<T, char_type>();
 5880|  31.6k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 31.6k, False: 0]
  ------------------
 5881|  31.6k|                return impl(rd, range, value);
 5882|  31.6k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|  31.6k|        else {
 5889|  31.6k|            SCN_EXPECT(false);
 5890|  31.6k|            SCN_UNREACHABLE;
 5891|  31.6k|        }
 5892|  31.6k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  31.6k|    {
 5863|  31.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  31.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  31.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  31.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  31.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 249, False: 31.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    249|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    249|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    249|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    249|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    249|    }                                                  \
  |  |  |  | 3671|  31.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  31.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  31.4k|                        .transform_error(make_eof_scan_error));
 5865|  31.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  31.6k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|  31.4k|    {
 4152|  31.4k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  31.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  31.4k|        float_reader<CharT> rd{};
 4155|  31.4k|        return read_impl<Range>(
 4156|  31.4k|            range, rd,
 4157|  31.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  31.4k|                return r.read_source(SCN_FWD(args)...);
 4159|  31.4k|            },
 4160|  31.4k|            value);
 4161|  31.4k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|  31.4k|    {
  754|  31.4k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|  31.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  31.4k|              cvref<T> obj = *get<T>(fn);
  745|  31.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  31.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  31.4k|              }
  748|  31.4k|              else {
  749|  31.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  31.4k|              }
  751|  31.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  31.4k|    {
  684|  31.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  31.4k|            return static_cast<T*>(s.m_cp);
  686|  31.4k|        }
  687|  31.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  31.4k|            return static_cast<T*>(s.m_p);
  689|  31.4k|        }
  690|  31.4k|        else {
  691|  31.4k|            return reinterpret_cast<T*>(s.m_fp);
  692|  31.4k|        }
  693|  31.4k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|  31.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  31.4k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  31.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  31.4k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  31.4k|        {
  662|  31.4k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  32.2k|    {
 5871|  32.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  32.2k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|  32.2k|            auto rd = make_reader<T, char_type>();
 5876|  32.2k|            return impl(rd, range, value);
 5877|  32.2k|        }
 5878|  32.2k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|  32.2k|            auto rd = make_reader<T, char_type>();
 5880|  32.2k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 32.2k, False: 0]
  ------------------
 5881|  32.2k|                return impl(rd, range, value);
 5882|  32.2k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|  32.2k|        else {
 5889|  32.2k|            SCN_EXPECT(false);
 5890|  32.2k|            SCN_UNREACHABLE;
 5891|  32.2k|        }
 5892|  32.2k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  32.2k|    {
 5863|  32.2k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  32.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  32.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  32.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  32.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 264, False: 31.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    264|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    264|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    264|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    264|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    264|    }                                                  \
  |  |  |  | 3671|  32.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  31.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  31.9k|                        .transform_error(make_eof_scan_error));
 5865|  31.9k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  32.2k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|  31.9k|    {
 4152|  31.9k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  31.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  31.9k|        float_reader<CharT> rd{};
 4155|  31.9k|        return read_impl<Range>(
 4156|  31.9k|            range, rd,
 4157|  31.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  31.9k|                return r.read_source(SCN_FWD(args)...);
 4159|  31.9k|            },
 4160|  31.9k|            value);
 4161|  31.9k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|  31.9k|    {
  754|  31.9k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|  31.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  31.9k|              cvref<T> obj = *get<T>(fn);
  745|  31.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  31.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  31.9k|              }
  748|  31.9k|              else {
  749|  31.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  31.9k|              }
  751|  31.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  31.9k|    {
  684|  31.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  31.9k|            return static_cast<T*>(s.m_cp);
  686|  31.9k|        }
  687|  31.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  31.9k|            return static_cast<T*>(s.m_p);
  689|  31.9k|        }
  690|  31.9k|        else {
  691|  31.9k|            return reinterpret_cast<T*>(s.m_fp);
  692|  31.9k|        }
  693|  31.9k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|  31.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  31.9k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  31.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  31.9k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  31.9k|        {
  662|  31.9k|        }

LLVMFuzzerTestOneInput:
   54|  2.06k|{
   55|  2.06k|    scn::fuzz::run(data, size);
   56|  2.06k|    return 0;
   57|  2.06k|}
float_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   32|  2.06k|{
   33|  2.06k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (33:9): [True: 0, False: 2.06k]
  |  Branch (33:35): [True: 0, False: 2.06k]
  ------------------
   34|      0|        return;
   35|      0|    }
   36|       |
   37|  2.06k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   38|       |
   39|  2.06k|    const auto& f =
   40|  2.06k|        get_format_strings<char>("{}", "{:a}", "{:e}", "{:f}", "{:g}", "{:L}");
   41|  2.06k|    do_basic_run(sv, f);
   42|       |
   43|  2.06k|    const auto& wf = get_format_strings<wchar_t>(L"{}", L"{:a}", L"{:e}",
   44|  2.06k|                                                 L"{:f}", L"{:g}", L"{:L}");
   45|  2.06k|    do_basic_run(wsv_reinterpret, wf);
   46|  2.06k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (46:9): [True: 2.06k, False: 0]
  ------------------
   47|  2.06k|        do_basic_run(wsv_transcode, wf);
   48|  2.06k|    }
   49|  2.06k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  2.06k|{
   25|  2.06k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  2.06k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  2.06k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  2.06k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  2.06k|{
   25|  2.06k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  2.06k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  2.06k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  2.06k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  4.13k|{
   25|  4.13k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  4.13k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  4.13k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  4.13k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  4.13k|{
   25|  4.13k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  4.13k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  4.13k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  4.13k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|  2.06k|{
   52|  2.06k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|  2.06k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.06k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  2.06k|    string_buffer.resize(size);
   56|  2.06k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|  2.06k|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|  2.06k|    const auto wsv_reinterpret_size =
   61|  2.06k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 62, False: 2.00k]
  ------------------
   62|  2.06k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|  2.06k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|  2.06k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|  2.06k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|  2.06k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|  2.06k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|  2.06k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  2.06k|{
  122|  2.06k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  2.06k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  2.06k|    buf.resize(sizeof...(Args));
  125|  2.06k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  2.06k|    return buf;
  127|  2.06k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  107|  2.06k|{
  108|  2.06k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  2.06k|        return format_string_view_buffer;
  110|  2.06k|    }
  111|  2.06k|    else {
  112|  2.06k|        return wformat_string_view_buffer;
  113|  2.06k|    }
  114|  2.06k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  2.06k|{
  185|  2.06k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  2.06k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  2.06k|                                   format_strings);
  188|  2.06k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  2.06k|{
  133|       |    // Regular scan
  134|  12.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 12.4k, False: 2.06k]
  ------------------
  135|  12.4k|        auto it = scn::ranges::begin(source);
  136|   159k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   159k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   159k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   159k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   159k|            auto result = scn::scan<T>(
  139|   159k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   159k|                scn::runtime_format(f));
  141|   159k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 12.4k, False: 147k]
  ------------------
  142|  12.4k|                break;
  143|  12.4k|            }
  144|   147k|            it = result->begin();
  145|   147k|        }
  146|  12.4k|    }
  147|       |
  148|       |    // scan localized
  149|  12.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 12.4k, False: 2.06k]
  ------------------
  150|  12.4k|        auto it = scn::ranges::begin(source);
  151|   159k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   159k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   159k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   159k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   159k|            auto result = scn::scan<T>(
  154|   159k|                global_locale,
  155|   159k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   159k|                scn::runtime_format(f));
  157|   159k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 12.4k, False: 147k]
  ------------------
  158|  12.4k|                break;
  159|  12.4k|            }
  160|   147k|            it = result->begin();
  161|   147k|        }
  162|  12.4k|    }
  163|       |
  164|       |    // scan_value
  165|  2.06k|    {
  166|  2.06k|        auto it = scn::ranges::begin(source);
  167|  34.7k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  34.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  34.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  34.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  34.7k|            auto result = scn::scan_value<T>(
  170|  34.7k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  34.7k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.06k, False: 32.6k]
  ------------------
  172|  2.06k|                break;
  173|  2.06k|            }
  174|  32.6k|            it = result->begin();
  175|  32.6k|        }
  176|  2.06k|    }
  177|  2.06k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  2.06k|{
  133|       |    // Regular scan
  134|  12.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 12.4k, False: 2.06k]
  ------------------
  135|  12.4k|        auto it = scn::ranges::begin(source);
  136|   166k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   166k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   166k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   166k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   166k|            auto result = scn::scan<T>(
  139|   166k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   166k|                scn::runtime_format(f));
  141|   166k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 12.4k, False: 153k]
  ------------------
  142|  12.4k|                break;
  143|  12.4k|            }
  144|   153k|            it = result->begin();
  145|   153k|        }
  146|  12.4k|    }
  147|       |
  148|       |    // scan localized
  149|  12.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 12.4k, False: 2.06k]
  ------------------
  150|  12.4k|        auto it = scn::ranges::begin(source);
  151|   166k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   166k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   166k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   166k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   166k|            auto result = scn::scan<T>(
  154|   166k|                global_locale,
  155|   166k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   166k|                scn::runtime_format(f));
  157|   166k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 12.4k, False: 153k]
  ------------------
  158|  12.4k|                break;
  159|  12.4k|            }
  160|   153k|            it = result->begin();
  161|   153k|        }
  162|  12.4k|    }
  163|       |
  164|       |    // scan_value
  165|  2.06k|    {
  166|  2.06k|        auto it = scn::ranges::begin(source);
  167|  36.6k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  36.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  36.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  36.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  36.6k|            auto result = scn::scan_value<T>(
  170|  36.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  36.6k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.06k, False: 34.5k]
  ------------------
  172|  2.06k|                break;
  173|  2.06k|            }
  174|  34.5k|            it = result->begin();
  175|  34.5k|        }
  176|  2.06k|    }
  177|  2.06k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  2.06k|{
  133|       |    // Regular scan
  134|  12.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 12.4k, False: 2.06k]
  ------------------
  135|  12.4k|        auto it = scn::ranges::begin(source);
  136|   168k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   168k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   168k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   168k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   168k|            auto result = scn::scan<T>(
  139|   168k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   168k|                scn::runtime_format(f));
  141|   168k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 12.4k, False: 155k]
  ------------------
  142|  12.4k|                break;
  143|  12.4k|            }
  144|   155k|            it = result->begin();
  145|   155k|        }
  146|  12.4k|    }
  147|       |
  148|       |    // scan localized
  149|  12.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 12.4k, False: 2.06k]
  ------------------
  150|  12.4k|        auto it = scn::ranges::begin(source);
  151|   168k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   168k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   168k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   168k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   168k|            auto result = scn::scan<T>(
  154|   168k|                global_locale,
  155|   168k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   168k|                scn::runtime_format(f));
  157|   168k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 12.4k, False: 155k]
  ------------------
  158|  12.4k|                break;
  159|  12.4k|            }
  160|   155k|            it = result->begin();
  161|   155k|        }
  162|  12.4k|    }
  163|       |
  164|       |    // scan_value
  165|  2.06k|    {
  166|  2.06k|        auto it = scn::ranges::begin(source);
  167|  37.2k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  37.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  37.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  37.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  37.2k|            auto result = scn::scan_value<T>(
  170|  37.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  37.2k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.06k, False: 35.1k]
  ------------------
  172|  2.06k|                break;
  173|  2.06k|            }
  174|  35.1k|            it = result->begin();
  175|  35.1k|        }
  176|  2.06k|    }
  177|  2.06k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  2.06k|{
  133|       |    // Regular scan
  134|  12.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 12.4k, False: 2.06k]
  ------------------
  135|  12.4k|        auto it = scn::ranges::begin(source);
  136|   181k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   181k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   181k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   181k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   181k|            auto result = scn::scan<T>(
  139|   181k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   181k|                scn::runtime_format(f));
  141|   181k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 12.4k, False: 169k]
  ------------------
  142|  12.4k|                break;
  143|  12.4k|            }
  144|   169k|            it = result->begin();
  145|   169k|        }
  146|  12.4k|    }
  147|       |
  148|       |    // scan localized
  149|  12.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 12.4k, False: 2.06k]
  ------------------
  150|  12.4k|        auto it = scn::ranges::begin(source);
  151|   181k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   181k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   181k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   181k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   181k|            auto result = scn::scan<T>(
  154|   181k|                global_locale,
  155|   181k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   181k|                scn::runtime_format(f));
  157|   181k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 12.4k, False: 169k]
  ------------------
  158|  12.4k|                break;
  159|  12.4k|            }
  160|   169k|            it = result->begin();
  161|   169k|        }
  162|  12.4k|    }
  163|       |
  164|       |    // scan_value
  165|  2.06k|    {
  166|  2.06k|        auto it = scn::ranges::begin(source);
  167|  37.0k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  37.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  37.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  37.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  37.0k|            auto result = scn::scan_value<T>(
  170|  37.0k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  37.0k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.06k, False: 34.9k]
  ------------------
  172|  2.06k|                break;
  173|  2.06k|            }
  174|  34.9k|            it = result->begin();
  175|  34.9k|        }
  176|  2.06k|    }
  177|  2.06k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  2.06k|{
  133|       |    // Regular scan
  134|  12.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 12.4k, False: 2.06k]
  ------------------
  135|  12.4k|        auto it = scn::ranges::begin(source);
  136|   189k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   189k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   189k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   189k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   189k|            auto result = scn::scan<T>(
  139|   189k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   189k|                scn::runtime_format(f));
  141|   189k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 12.4k, False: 177k]
  ------------------
  142|  12.4k|                break;
  143|  12.4k|            }
  144|   177k|            it = result->begin();
  145|   177k|        }
  146|  12.4k|    }
  147|       |
  148|       |    // scan localized
  149|  12.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 12.4k, False: 2.06k]
  ------------------
  150|  12.4k|        auto it = scn::ranges::begin(source);
  151|   189k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   189k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   189k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   189k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   189k|            auto result = scn::scan<T>(
  154|   189k|                global_locale,
  155|   189k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   189k|                scn::runtime_format(f));
  157|   189k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 12.4k, False: 177k]
  ------------------
  158|  12.4k|                break;
  159|  12.4k|            }
  160|   177k|            it = result->begin();
  161|   177k|        }
  162|  12.4k|    }
  163|       |
  164|       |    // scan_value
  165|  2.06k|    {
  166|  2.06k|        auto it = scn::ranges::begin(source);
  167|  38.9k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  38.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  38.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  38.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  38.9k|            auto result = scn::scan_value<T>(
  170|  38.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  38.9k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.06k, False: 36.8k]
  ------------------
  172|  2.06k|                break;
  173|  2.06k|            }
  174|  36.8k|            it = result->begin();
  175|  36.8k|        }
  176|  2.06k|    }
  177|  2.06k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  2.06k|{
  133|       |    // Regular scan
  134|  12.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 12.4k, False: 2.06k]
  ------------------
  135|  12.4k|        auto it = scn::ranges::begin(source);
  136|   191k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   191k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   191k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   191k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   191k|            auto result = scn::scan<T>(
  139|   191k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   191k|                scn::runtime_format(f));
  141|   191k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 12.4k, False: 179k]
  ------------------
  142|  12.4k|                break;
  143|  12.4k|            }
  144|   179k|            it = result->begin();
  145|   179k|        }
  146|  12.4k|    }
  147|       |
  148|       |    // scan localized
  149|  12.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 12.4k, False: 2.06k]
  ------------------
  150|  12.4k|        auto it = scn::ranges::begin(source);
  151|   191k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   191k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   191k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   191k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   191k|            auto result = scn::scan<T>(
  154|   191k|                global_locale,
  155|   191k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   191k|                scn::runtime_format(f));
  157|   191k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 12.4k, False: 179k]
  ------------------
  158|  12.4k|                break;
  159|  12.4k|            }
  160|   179k|            it = result->begin();
  161|   179k|        }
  162|  12.4k|    }
  163|       |
  164|       |    // scan_value
  165|  2.06k|    {
  166|  2.06k|        auto it = scn::ranges::begin(source);
  167|  39.3k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  39.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  39.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  39.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  39.3k|            auto result = scn::scan_value<T>(
  170|  39.3k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  39.3k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.06k, False: 37.2k]
  ------------------
  172|  2.06k|                break;
  173|  2.06k|            }
  174|  37.2k|            it = result->begin();
  175|  37.2k|        }
  176|  2.06k|    }
  177|  2.06k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   89|  2.06k|{
   90|  2.06k|    using char_type = ranges::range_value_t<Source>;
   91|  2.06k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  2.06k|    deque.clear();
   93|  2.06k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  2.06k|              std::back_inserter(deque));
   95|  2.06k|    return deque;
   96|  2.06k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   78|  2.06k|{
   79|  2.06k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (79:19): [Folded - Ignored]
  ------------------
   80|  2.06k|        return noncontiguous_buffer;
   81|  2.06k|    }
   82|  2.06k|    else {
   83|  2.06k|        return wnoncontiguous_buffer;
   84|  2.06k|    }
   85|  2.06k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  2.06k|{
  122|  2.06k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  2.06k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  2.06k|    buf.resize(sizeof...(Args));
  125|  2.06k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  2.06k|    return buf;
  127|  2.06k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  107|  2.06k|{
  108|  2.06k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  2.06k|        return format_string_view_buffer;
  110|  2.06k|    }
  111|  2.06k|    else {
  112|  2.06k|        return wformat_string_view_buffer;
  113|  2.06k|    }
  114|  2.06k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  4.13k|{
  185|  4.13k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  4.13k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  4.13k|                                   format_strings);
  188|  4.13k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  4.13k|{
  133|       |    // Regular scan
  134|  24.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 24.8k, False: 4.13k]
  ------------------
  135|  24.8k|        auto it = scn::ranges::begin(source);
  136|  56.1k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  56.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  56.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  56.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  56.1k|            auto result = scn::scan<T>(
  139|  56.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  56.1k|                scn::runtime_format(f));
  141|  56.1k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 24.8k, False: 31.3k]
  ------------------
  142|  24.8k|                break;
  143|  24.8k|            }
  144|  31.3k|            it = result->begin();
  145|  31.3k|        }
  146|  24.8k|    }
  147|       |
  148|       |    // scan localized
  149|  24.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 24.8k, False: 4.13k]
  ------------------
  150|  24.8k|        auto it = scn::ranges::begin(source);
  151|  56.1k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  56.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  56.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  56.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  56.1k|            auto result = scn::scan<T>(
  154|  56.1k|                global_locale,
  155|  56.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  56.1k|                scn::runtime_format(f));
  157|  56.1k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 24.8k, False: 31.3k]
  ------------------
  158|  24.8k|                break;
  159|  24.8k|            }
  160|  31.3k|            it = result->begin();
  161|  31.3k|        }
  162|  24.8k|    }
  163|       |
  164|       |    // scan_value
  165|  4.13k|    {
  166|  4.13k|        auto it = scn::ranges::begin(source);
  167|  10.2k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  10.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  10.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  10.2k|            auto result = scn::scan_value<T>(
  170|  10.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  10.2k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.13k, False: 6.11k]
  ------------------
  172|  4.13k|                break;
  173|  4.13k|            }
  174|  6.11k|            it = result->begin();
  175|  6.11k|        }
  176|  4.13k|    }
  177|  4.13k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  4.13k|{
  133|       |    // Regular scan
  134|  24.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 24.8k, False: 4.13k]
  ------------------
  135|  24.8k|        auto it = scn::ranges::begin(source);
  136|  57.1k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  57.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  57.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  57.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  57.1k|            auto result = scn::scan<T>(
  139|  57.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  57.1k|                scn::runtime_format(f));
  141|  57.1k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 24.8k, False: 32.2k]
  ------------------
  142|  24.8k|                break;
  143|  24.8k|            }
  144|  32.2k|            it = result->begin();
  145|  32.2k|        }
  146|  24.8k|    }
  147|       |
  148|       |    // scan localized
  149|  24.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 24.8k, False: 4.13k]
  ------------------
  150|  24.8k|        auto it = scn::ranges::begin(source);
  151|  57.1k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  57.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  57.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  57.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  57.1k|            auto result = scn::scan<T>(
  154|  57.1k|                global_locale,
  155|  57.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  57.1k|                scn::runtime_format(f));
  157|  57.1k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 24.8k, False: 32.2k]
  ------------------
  158|  24.8k|                break;
  159|  24.8k|            }
  160|  32.2k|            it = result->begin();
  161|  32.2k|        }
  162|  24.8k|    }
  163|       |
  164|       |    // scan_value
  165|  4.13k|    {
  166|  4.13k|        auto it = scn::ranges::begin(source);
  167|  10.5k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  10.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  10.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  10.5k|            auto result = scn::scan_value<T>(
  170|  10.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  10.5k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.13k, False: 6.42k]
  ------------------
  172|  4.13k|                break;
  173|  4.13k|            }
  174|  6.42k|            it = result->begin();
  175|  6.42k|        }
  176|  4.13k|    }
  177|  4.13k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  4.13k|{
  133|       |    // Regular scan
  134|  24.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 24.8k, False: 4.13k]
  ------------------
  135|  24.8k|        auto it = scn::ranges::begin(source);
  136|  57.7k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  57.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  57.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  57.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  57.7k|            auto result = scn::scan<T>(
  139|  57.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  57.7k|                scn::runtime_format(f));
  141|  57.7k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 24.8k, False: 32.9k]
  ------------------
  142|  24.8k|                break;
  143|  24.8k|            }
  144|  32.9k|            it = result->begin();
  145|  32.9k|        }
  146|  24.8k|    }
  147|       |
  148|       |    // scan localized
  149|  24.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 24.8k, False: 4.13k]
  ------------------
  150|  24.8k|        auto it = scn::ranges::begin(source);
  151|  57.7k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  57.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  57.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  57.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  57.7k|            auto result = scn::scan<T>(
  154|  57.7k|                global_locale,
  155|  57.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  57.7k|                scn::runtime_format(f));
  157|  57.7k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 24.8k, False: 32.9k]
  ------------------
  158|  24.8k|                break;
  159|  24.8k|            }
  160|  32.9k|            it = result->begin();
  161|  32.9k|        }
  162|  24.8k|    }
  163|       |
  164|       |    // scan_value
  165|  4.13k|    {
  166|  4.13k|        auto it = scn::ranges::begin(source);
  167|  10.7k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  10.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  10.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  10.7k|            auto result = scn::scan_value<T>(
  170|  10.7k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  10.7k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.13k, False: 6.62k]
  ------------------
  172|  4.13k|                break;
  173|  4.13k|            }
  174|  6.62k|            it = result->begin();
  175|  6.62k|        }
  176|  4.13k|    }
  177|  4.13k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  4.13k|{
  133|       |    // Regular scan
  134|  24.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 24.8k, False: 4.13k]
  ------------------
  135|  24.8k|        auto it = scn::ranges::begin(source);
  136|  56.1k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  56.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  56.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  56.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  56.1k|            auto result = scn::scan<T>(
  139|  56.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  56.1k|                scn::runtime_format(f));
  141|  56.1k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 24.8k, False: 31.2k]
  ------------------
  142|  24.8k|                break;
  143|  24.8k|            }
  144|  31.2k|            it = result->begin();
  145|  31.2k|        }
  146|  24.8k|    }
  147|       |
  148|       |    // scan localized
  149|  24.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 24.8k, False: 4.13k]
  ------------------
  150|  24.8k|        auto it = scn::ranges::begin(source);
  151|  56.1k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  56.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  56.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  56.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  56.1k|            auto result = scn::scan<T>(
  154|  56.1k|                global_locale,
  155|  56.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  56.1k|                scn::runtime_format(f));
  157|  56.1k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 24.8k, False: 31.2k]
  ------------------
  158|  24.8k|                break;
  159|  24.8k|            }
  160|  31.2k|            it = result->begin();
  161|  31.2k|        }
  162|  24.8k|    }
  163|       |
  164|       |    // scan_value
  165|  4.13k|    {
  166|  4.13k|        auto it = scn::ranges::begin(source);
  167|  10.2k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  10.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  10.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  10.2k|            auto result = scn::scan_value<T>(
  170|  10.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  10.2k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.13k, False: 6.10k]
  ------------------
  172|  4.13k|                break;
  173|  4.13k|            }
  174|  6.10k|            it = result->begin();
  175|  6.10k|        }
  176|  4.13k|    }
  177|  4.13k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  4.13k|{
  133|       |    // Regular scan
  134|  24.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 24.8k, False: 4.13k]
  ------------------
  135|  24.8k|        auto it = scn::ranges::begin(source);
  136|  57.0k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  57.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  57.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  57.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  57.0k|            auto result = scn::scan<T>(
  139|  57.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  57.0k|                scn::runtime_format(f));
  141|  57.0k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 24.8k, False: 32.2k]
  ------------------
  142|  24.8k|                break;
  143|  24.8k|            }
  144|  32.2k|            it = result->begin();
  145|  32.2k|        }
  146|  24.8k|    }
  147|       |
  148|       |    // scan localized
  149|  24.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 24.8k, False: 4.13k]
  ------------------
  150|  24.8k|        auto it = scn::ranges::begin(source);
  151|  57.0k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  57.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  57.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  57.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  57.0k|            auto result = scn::scan<T>(
  154|  57.0k|                global_locale,
  155|  57.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  57.0k|                scn::runtime_format(f));
  157|  57.0k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 24.8k, False: 32.2k]
  ------------------
  158|  24.8k|                break;
  159|  24.8k|            }
  160|  32.2k|            it = result->begin();
  161|  32.2k|        }
  162|  24.8k|    }
  163|       |
  164|       |    // scan_value
  165|  4.13k|    {
  166|  4.13k|        auto it = scn::ranges::begin(source);
  167|  10.5k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  10.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  10.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  10.5k|            auto result = scn::scan_value<T>(
  170|  10.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  10.5k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.13k, False: 6.41k]
  ------------------
  172|  4.13k|                break;
  173|  4.13k|            }
  174|  6.41k|            it = result->begin();
  175|  6.41k|        }
  176|  4.13k|    }
  177|  4.13k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  4.13k|{
  133|       |    // Regular scan
  134|  24.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 24.8k, False: 4.13k]
  ------------------
  135|  24.8k|        auto it = scn::ranges::begin(source);
  136|  57.7k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  57.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  57.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  57.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  57.7k|            auto result = scn::scan<T>(
  139|  57.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  57.7k|                scn::runtime_format(f));
  141|  57.7k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 24.8k, False: 32.8k]
  ------------------
  142|  24.8k|                break;
  143|  24.8k|            }
  144|  32.8k|            it = result->begin();
  145|  32.8k|        }
  146|  24.8k|    }
  147|       |
  148|       |    // scan localized
  149|  24.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 24.8k, False: 4.13k]
  ------------------
  150|  24.8k|        auto it = scn::ranges::begin(source);
  151|  57.7k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  57.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  57.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  57.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  57.7k|            auto result = scn::scan<T>(
  154|  57.7k|                global_locale,
  155|  57.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  57.7k|                scn::runtime_format(f));
  157|  57.7k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 24.8k, False: 32.8k]
  ------------------
  158|  24.8k|                break;
  159|  24.8k|            }
  160|  32.8k|            it = result->begin();
  161|  32.8k|        }
  162|  24.8k|    }
  163|       |
  164|       |    // scan_value
  165|  4.13k|    {
  166|  4.13k|        auto it = scn::ranges::begin(source);
  167|  10.7k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  10.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  10.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  10.7k|            auto result = scn::scan_value<T>(
  170|  10.7k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  10.7k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.13k, False: 6.61k]
  ------------------
  172|  4.13k|                break;
  173|  4.13k|            }
  174|  6.61k|            it = result->begin();
  175|  6.61k|        }
  176|  4.13k|    }
  177|  4.13k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   89|  4.13k|{
   90|  4.13k|    using char_type = ranges::range_value_t<Source>;
   91|  4.13k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  4.13k|    deque.clear();
   93|  4.13k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  4.13k|              std::back_inserter(deque));
   95|  4.13k|    return deque;
   96|  4.13k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   78|  4.13k|{
   79|  4.13k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (79:19): [Folded - Ignored]
  ------------------
   80|  4.13k|        return noncontiguous_buffer;
   81|  4.13k|    }
   82|  4.13k|    else {
   83|  4.13k|        return wnoncontiguous_buffer;
   84|  4.13k|    }
   85|  4.13k|}

