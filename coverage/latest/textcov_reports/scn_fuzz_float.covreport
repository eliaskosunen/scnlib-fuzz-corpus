_ZN10fast_float19parse_number_stringIcEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  275|  1.48M|parsed_number_string_t<UC> parse_number_string(UC const *p, UC const * pend, parse_options_t<UC> options) noexcept {
  276|  1.48M|  chars_format const fmt = options.format;
  277|  1.48M|  UC const decimal_point = options.decimal_point;
  278|       |
  279|  1.48M|  parsed_number_string_t<UC> answer;
  280|  1.48M|  answer.valid = false;
  281|  1.48M|  answer.too_many_digits = false;
  282|  1.48M|  answer.negative = (*p == UC('-'));
  283|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  284|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  285|       |#else
  286|  1.48M|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (286:7): [True: 0, False: 1.48M]
  ------------------
  287|      0|#endif
  288|      0|    ++p;
  289|      0|    if (p == pend) {
  ------------------
  |  Branch (289:9): [True: 0, False: 0]
  ------------------
  290|      0|      return answer;
  291|      0|    }
  292|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (292:9): [True: 0, False: 0]
  ------------------
  293|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        return answer;
  295|      0|      }    
  296|      0|    } else {
  297|      0|      if (!is_integer(*p) && (*p != decimal_point)) { // a sign must be followed by an integer or the dot
  ------------------
  |  Branch (297:11): [True: 0, False: 0]
  |  Branch (297:30): [True: 0, False: 0]
  ------------------
  298|      0|        return answer;
  299|      0|      }
  300|      0|    }
  301|      0|  }
  302|  1.48M|  UC const * const start_digits = p;
  303|       |
  304|  1.48M|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  305|       |
  306|  8.48M|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (306:10): [True: 7.72M, False: 754k]
  |  Branch (306:25): [True: 6.99M, False: 734k]
  ------------------
  307|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  308|       |    // multiplication
  309|  6.99M|    i = 10 * i +
  310|  6.99M|        uint64_t(*p - UC('0')); // might overflow, we will handle the overflow later
  311|  6.99M|    ++p;
  312|  6.99M|  }
  313|  1.48M|  UC const * const end_of_integer_part = p;
  314|  1.48M|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  315|  1.48M|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  316|  1.48M|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|  1.48M|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (316:7): [True: 0, False: 1.48M]
  ------------------
  317|       |    // at least 1 digit in integer part, without leading zeros
  318|      0|    if (digit_count == 0 || (start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (318:9): [True: 0, False: 0]
  |  Branch (318:30): [True: 0, False: 0]
  |  Branch (318:60): [True: 0, False: 0]
  ------------------
  319|      0|      return answer;
  320|      0|    }
  321|      0|  }
  322|       |
  323|  1.48M|  int64_t exponent = 0;
  324|  1.48M|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (324:34): [True: 734k, False: 754k]
  |  Branch (324:49): [True: 281k, False: 453k]
  ------------------
  325|  1.48M|  if (has_decimal_point) {
  ------------------
  |  Branch (325:7): [True: 281k, False: 1.20M]
  ------------------
  326|   281k|    ++p;
  327|   281k|    UC const * before = p;
  328|       |    // can occur at most twice without overflowing, but let it occur more, since
  329|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  330|   281k|    loop_parse_if_eight_digits(p, pend, i);
  331|       |
  332|  1.15M|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (332:12): [True: 975k, False: 178k]
  |  Branch (332:27): [True: 872k, False: 103k]
  ------------------
  333|   872k|      uint8_t digit = uint8_t(*p - UC('0'));
  334|   872k|      ++p;
  335|   872k|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  336|   872k|    }
  337|   281k|    exponent = before - p;
  338|   281k|    answer.fraction = span<const UC>(before, size_t(p - before));
  339|   281k|    digit_count -= exponent;
  340|   281k|  }
  341|  1.48M|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|  1.48M|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (341:7): [True: 0, False: 1.48M]
  ------------------
  342|       |    // at least 1 digit in fractional part
  343|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (343:9): [True: 0, False: 0]
  |  Branch (343:30): [True: 0, False: 0]
  ------------------
  344|      0|      return answer;
  345|      0|    }
  346|      0|  } 
  347|  1.48M|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (347:12): [True: 0, False: 1.48M]
  ------------------
  348|      0|    return answer;
  349|      0|  }
  350|  1.48M|  int64_t exp_number = 0;            // explicit exponential part
  351|  1.48M|  if ( ((fmt & chars_format::scientific) &&
  ------------------
  |  Branch (351:9): [True: 1.27M, False: 212k]
  ------------------
  352|  1.48M|        (p != pend) &&
  ------------------
  |  Branch (352:9): [True: 556k, False: 720k]
  ------------------
  353|  1.48M|        ((UC('e') == *p) || (UC('E') == *p)))
  ------------------
  |  Branch (353:10): [True: 116k, False: 439k]
  |  Branch (353:29): [True: 67.7k, False: 371k]
  ------------------
  354|  1.48M|       ||
  355|  1.48M|       ((fmt & FASTFLOAT_FORTRANFMT) &&
  ------------------
  |  |   20|  1.30M|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (355:9): [True: 0, False: 1.30M]
  ------------------
  356|  1.30M|        (p != pend) &&
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|  1.30M|        ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) || (UC('D') == *p)))) {
  ------------------
  |  Branch (357:10): [True: 0, False: 0]
  |  Branch (357:29): [True: 0, False: 0]
  |  Branch (357:48): [True: 0, False: 0]
  |  Branch (357:67): [True: 0, False: 0]
  ------------------
  358|   184k|    UC const * location_of_e = p;
  359|   184k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) || (UC('D') == *p)) {
  ------------------
  |  Branch (359:9): [True: 116k, False: 67.7k]
  |  Branch (359:28): [True: 67.7k, False: 0]
  |  Branch (359:47): [True: 0, False: 0]
  |  Branch (359:66): [True: 0, False: 0]
  ------------------
  360|   184k|      ++p;
  361|   184k|    }
  362|   184k|    bool neg_exp = false;
  363|   184k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (363:9): [True: 184k, False: 125]
  |  Branch (363:24): [True: 13.6k, False: 170k]
  ------------------
  364|  13.6k|      neg_exp = true;
  365|  13.6k|      ++p;
  366|   171k|    } else if ((p != pend) && (UC('+') == *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  ------------------
  |  Branch (366:16): [True: 170k, False: 125]
  |  Branch (366:31): [True: 41.4k, False: 129k]
  ------------------
  367|  41.4k|      ++p;
  368|  41.4k|    }
  369|   184k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (369:9): [True: 175, False: 184k]
  |  Branch (369:24): [True: 730, False: 183k]
  ------------------
  370|    905|      if(!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (370:10): [True: 0, False: 905]
  ------------------
  371|       |        // We are in error.
  372|      0|        return answer;
  373|      0|      }
  374|       |      // Otherwise, we will be ignoring the 'e'.
  375|    905|      p = location_of_e;
  376|   183k|    } else {
  377|   587k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (377:14): [True: 451k, False: 135k]
  |  Branch (377:29): [True: 403k, False: 47.9k]
  ------------------
  378|   403k|        uint8_t digit = uint8_t(*p - UC('0'));
  379|   403k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (379:13): [True: 370k, False: 33.0k]
  ------------------
  380|   370k|          exp_number = 10 * exp_number + digit;
  381|   370k|        }
  382|   403k|        ++p;
  383|   403k|      }
  384|   183k|      if(neg_exp) { exp_number = - exp_number; }
  ------------------
  |  Branch (384:10): [True: 13.6k, False: 170k]
  ------------------
  385|   183k|      exponent += exp_number;
  386|   183k|    }
  387|  1.30M|  } else {
  388|       |    // If it scientific and not fixed, we have to bail out.
  389|  1.30M|    if((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) { return answer; }
  ------------------
  |  Branch (389:8): [True: 1.09M, False: 212k]
  |  Branch (389:44): [True: 0, False: 1.09M]
  ------------------
  390|  1.30M|  }
  391|  1.48M|  answer.lastmatch = p;
  392|  1.48M|  answer.valid = true;
  393|       |
  394|       |  // If we frequently had to deal with long strings of digits,
  395|       |  // we could extend our code by using a 128-bit integer instead
  396|       |  // of a 64-bit integer. However, this is uncommon.
  397|       |  //
  398|       |  // We can deal with up to 19 digits.
  399|  1.48M|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (399:7): [True: 266k, False: 1.22M]
  ------------------
  400|       |    // It is possible that the integer had an overflow.
  401|       |    // We have to handle the case where we have 0.0000somenumber.
  402|       |    // We need to be mindful of the case where we only have zeroes...
  403|       |    // E.g., 0.000000000...000.
  404|   266k|    UC const * start = start_digits;
  405|  1.10M|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (405:12): [True: 1.10M, False: 2.31k]
  |  Branch (405:32): [True: 828k, False: 274k]
  |  Branch (405:53): [True: 10.8k, False: 264k]
  ------------------
  406|   838k|      if(*start == UC('0')) { digit_count --; }
  ------------------
  |  Branch (406:10): [True: 828k, False: 10.8k]
  ------------------
  407|   838k|      start++;
  408|   838k|    }
  409|       |
  410|   266k|    if (digit_count > 19) {
  ------------------
  |  Branch (410:9): [True: 251k, False: 14.6k]
  ------------------
  411|   251k|      answer.too_many_digits = true;
  412|       |      // Let us start again, this time, avoiding overflows.
  413|       |      // We don't need to check if is_integer, since we use the
  414|       |      // pre-tokenized spans from above.
  415|   251k|      i = 0;
  416|   251k|      p = answer.integer.ptr;
  417|   251k|      UC const* int_end = p + answer.integer.len();
  418|   251k|      const uint64_t minimal_nineteen_digit_integer{ 1000000000000000000 };
  419|  2.86M|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (419:14): [True: 2.78M, False: 79.1k]
  |  Branch (419:54): [True: 2.61M, False: 172k]
  ------------------
  420|  2.61M|        i = i * 10 + uint64_t(*p - UC('0'));
  421|  2.61M|        ++p;
  422|  2.61M|      }
  423|   251k|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (423:11): [True: 79.1k, False: 172k]
  ------------------
  424|  79.1k|        exponent = end_of_integer_part - p + exp_number;
  425|  79.1k|      }
  426|   172k|      else { // We have a value with a fractional component.
  427|   172k|        p = answer.fraction.ptr;
  428|   172k|        UC const* frac_end = p + answer.fraction.len();
  429|  2.93M|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (429:16): [True: 2.75M, False: 172k]
  |  Branch (429:56): [True: 2.75M, False: 0]
  ------------------
  430|  2.75M|          i = i * 10 + uint64_t(*p - UC('0'));
  431|  2.75M|          ++p;
  432|  2.75M|        }
  433|   172k|        exponent = answer.fraction.ptr - p + exp_number;
  434|   172k|      }
  435|       |      // We have now corrected both exponent and i, to a truncated value
  436|   251k|    }
  437|   266k|  }
  438|  1.48M|  answer.exponent = exponent;
  439|  1.48M|  answer.mantissa = i;
  440|  1.48M|  return answer;
  441|  1.48M|}
_ZN10fast_float10is_integerIcEEbT_:
   35|  9.34M|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   36|  9.34M|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (36:12): [True: 211k, False: 9.12M]
  |  Branch (36:27): [True: 675k, False: 8.45M]
  ------------------
   37|  9.34M|}
_ZN10fast_float26loop_parse_if_eight_digitsERPKcS1_Rm:
  247|   281k|void loop_parse_if_eight_digits(const char*& p, const char* const pend, uint64_t& i) {
  248|       |  // optimizes better than parse_if_eight_digits_unrolled() for UC = char.
  249|   998k|  while ((std::distance(p, pend) >= 8) && is_made_of_eight_digits_fast(read8_to_u64(p))) {
  ------------------
  |  Branch (249:10): [True: 801k, False: 197k]
  |  Branch (249:43): [True: 717k, False: 84.1k]
  ------------------
  250|   717k|    i = i * 100000000 + parse_eight_digits_unrolled(read8_to_u64(p)); // in rare cases, this will overflow, but that's ok
  251|   717k|    p += 8;
  252|   717k|  }
  253|   281k|}
_ZN10fast_float28is_made_of_eight_digits_fastEm:
  169|   801k|fastfloat_really_inline constexpr bool is_made_of_eight_digits_fast(uint64_t val)  noexcept {
  170|   801k|  return !((((val + 0x4646464646464646) | (val - 0x3030303030303030)) &
  171|   801k|     0x8080808080808080));
  172|   801k|}
_ZN10fast_float12read8_to_u64IcEEmPKT_:
   53|  1.81M|uint64_t read8_to_u64(const UC *chars) {
   54|  1.81M|  if (cpp20_and_in_constexpr() || !std::is_same<UC, char>::value) {
  ------------------
  |  Branch (54:7): [Folded - Ignored]
  |  Branch (54:35): [Folded - Ignored]
  ------------------
   55|      0|    uint64_t val = 0;
   56|      0|    for(int i = 0; i < 8; ++i) {
  ------------------
  |  Branch (56:20): [True: 0, False: 0]
  ------------------
   57|      0|      val |= uint64_t(uint8_t(*chars)) << (i*8);
   58|      0|      ++chars;
   59|      0|    }
   60|      0|    return val;
   61|      0|  }
   62|  1.81M|  uint64_t val;
   63|  1.81M|  ::memcpy(&val, chars, sizeof(uint64_t));
   64|       |#if FASTFLOAT_IS_BIG_ENDIAN == 1
   65|       |  // Need to read as-if the number was in little-endian order.
   66|       |  val = byteswap(val);
   67|       |#endif
   68|  1.81M|  return val;
   69|  1.81M|}
_ZN10fast_float27parse_eight_digits_unrolledEm:
  146|  1.01M|uint32_t parse_eight_digits_unrolled(uint64_t val) {
  147|  1.01M|  const uint64_t mask = 0x000000FF000000FF;
  148|  1.01M|  const uint64_t mul1 = 0x000F424000000064; // 100 + (1000000ULL << 32)
  149|  1.01M|  const uint64_t mul2 = 0x0000271000000001; // 1 + (10000ULL << 32)
  150|  1.01M|  val -= 0x3030303030303030;
  151|  1.01M|  val = (val * 10) + (val >> 8); // val = (val * 2561) >> 8;
  152|  1.01M|  val = (((val & mask) * mul1) + (((val >> 16) & mask) * mul2)) >> 32;
  153|  1.01M|  return uint32_t(val);
  154|  1.01M|}
_ZN10fast_float27parse_eight_digits_unrolledIcEEjPKT_:
  160|   299k|uint32_t parse_eight_digits_unrolled(UC const * chars)  noexcept {
  161|   299k|  if (cpp20_and_in_constexpr() || !has_simd_opt<UC>()) {
  ------------------
  |  Branch (161:7): [Folded - Ignored]
  |  Branch (161:35): [Folded - Ignored]
  ------------------
  162|   299k|    return parse_eight_digits_unrolled(read8_to_u64(chars)); // truncation okay
  163|   299k|  }
  164|      0|  return parse_eight_digits_unrolled(simd_read8_to_u64(chars));
  165|   299k|}
_ZN10fast_float19parse_number_stringIDiEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  275|   630k|parsed_number_string_t<UC> parse_number_string(UC const *p, UC const * pend, parse_options_t<UC> options) noexcept {
  276|   630k|  chars_format const fmt = options.format;
  277|   630k|  UC const decimal_point = options.decimal_point;
  278|       |
  279|   630k|  parsed_number_string_t<UC> answer;
  280|   630k|  answer.valid = false;
  281|   630k|  answer.too_many_digits = false;
  282|   630k|  answer.negative = (*p == UC('-'));
  283|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  284|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  285|       |#else
  286|   630k|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (286:7): [True: 0, False: 630k]
  ------------------
  287|      0|#endif
  288|      0|    ++p;
  289|      0|    if (p == pend) {
  ------------------
  |  Branch (289:9): [True: 0, False: 0]
  ------------------
  290|      0|      return answer;
  291|      0|    }
  292|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (292:9): [True: 0, False: 0]
  ------------------
  293|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        return answer;
  295|      0|      }    
  296|      0|    } else {
  297|      0|      if (!is_integer(*p) && (*p != decimal_point)) { // a sign must be followed by an integer or the dot
  ------------------
  |  Branch (297:11): [True: 0, False: 0]
  |  Branch (297:30): [True: 0, False: 0]
  ------------------
  298|      0|        return answer;
  299|      0|      }
  300|      0|    }
  301|      0|  }
  302|   630k|  UC const * const start_digits = p;
  303|       |
  304|   630k|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  305|       |
  306|  1.36M|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (306:10): [True: 934k, False: 426k]
  |  Branch (306:25): [True: 729k, False: 204k]
  ------------------
  307|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  308|       |    // multiplication
  309|   729k|    i = 10 * i +
  310|   729k|        uint64_t(*p - UC('0')); // might overflow, we will handle the overflow later
  311|   729k|    ++p;
  312|   729k|  }
  313|   630k|  UC const * const end_of_integer_part = p;
  314|   630k|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  315|   630k|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  316|   630k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   630k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (316:7): [True: 0, False: 630k]
  ------------------
  317|       |    // at least 1 digit in integer part, without leading zeros
  318|      0|    if (digit_count == 0 || (start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (318:9): [True: 0, False: 0]
  |  Branch (318:30): [True: 0, False: 0]
  |  Branch (318:60): [True: 0, False: 0]
  ------------------
  319|      0|      return answer;
  320|      0|    }
  321|      0|  }
  322|       |
  323|   630k|  int64_t exponent = 0;
  324|   630k|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (324:34): [True: 204k, False: 426k]
  |  Branch (324:49): [True: 3.24k, False: 201k]
  ------------------
  325|   630k|  if (has_decimal_point) {
  ------------------
  |  Branch (325:7): [True: 3.24k, False: 627k]
  ------------------
  326|  3.24k|    ++p;
  327|  3.24k|    UC const * before = p;
  328|       |    // can occur at most twice without overflowing, but let it occur more, since
  329|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  330|  3.24k|    loop_parse_if_eight_digits(p, pend, i);
  331|       |
  332|  22.2k|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (332:12): [True: 20.1k, False: 2.03k]
  |  Branch (332:27): [True: 18.9k, False: 1.21k]
  ------------------
  333|  18.9k|      uint8_t digit = uint8_t(*p - UC('0'));
  334|  18.9k|      ++p;
  335|  18.9k|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  336|  18.9k|    }
  337|  3.24k|    exponent = before - p;
  338|  3.24k|    answer.fraction = span<const UC>(before, size_t(p - before));
  339|  3.24k|    digit_count -= exponent;
  340|  3.24k|  }
  341|   630k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   630k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (341:7): [True: 0, False: 630k]
  ------------------
  342|       |    // at least 1 digit in fractional part
  343|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (343:9): [True: 0, False: 0]
  |  Branch (343:30): [True: 0, False: 0]
  ------------------
  344|      0|      return answer;
  345|      0|    }
  346|      0|  } 
  347|   630k|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (347:12): [True: 0, False: 630k]
  ------------------
  348|      0|    return answer;
  349|      0|  }
  350|   630k|  int64_t exp_number = 0;            // explicit exponential part
  351|   630k|  if ( ((fmt & chars_format::scientific) &&
  ------------------
  |  Branch (351:9): [True: 518k, False: 112k]
  ------------------
  352|   630k|        (p != pend) &&
  ------------------
  |  Branch (352:9): [True: 202k, False: 315k]
  ------------------
  353|   630k|        ((UC('e') == *p) || (UC('E') == *p)))
  ------------------
  |  Branch (353:10): [True: 389, False: 202k]
  |  Branch (353:29): [True: 21.8k, False: 180k]
  ------------------
  354|   630k|       ||
  355|   630k|       ((fmt & FASTFLOAT_FORTRANFMT) &&
  ------------------
  |  |   20|   608k|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (355:9): [True: 0, False: 608k]
  ------------------
  356|   608k|        (p != pend) &&
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|   608k|        ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) || (UC('D') == *p)))) {
  ------------------
  |  Branch (357:10): [True: 0, False: 0]
  |  Branch (357:29): [True: 0, False: 0]
  |  Branch (357:48): [True: 0, False: 0]
  |  Branch (357:67): [True: 0, False: 0]
  ------------------
  358|  22.2k|    UC const * location_of_e = p;
  359|  22.2k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) || (UC('D') == *p)) {
  ------------------
  |  Branch (359:9): [True: 389, False: 21.8k]
  |  Branch (359:28): [True: 21.8k, False: 0]
  |  Branch (359:47): [True: 0, False: 0]
  |  Branch (359:66): [True: 0, False: 0]
  ------------------
  360|  22.2k|      ++p;
  361|  22.2k|    }
  362|  22.2k|    bool neg_exp = false;
  363|  22.2k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (363:9): [True: 22.1k, False: 30]
  |  Branch (363:24): [True: 5.96k, False: 16.2k]
  ------------------
  364|  5.96k|      neg_exp = true;
  365|  5.96k|      ++p;
  366|  16.2k|    } else if ((p != pend) && (UC('+') == *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  ------------------
  |  Branch (366:16): [True: 16.2k, False: 30]
  |  Branch (366:31): [True: 341, False: 15.8k]
  ------------------
  367|    341|      ++p;
  368|    341|    }
  369|  22.2k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (369:9): [True: 40, False: 22.1k]
  |  Branch (369:24): [True: 580, False: 21.5k]
  ------------------
  370|    620|      if(!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (370:10): [True: 0, False: 620]
  ------------------
  371|       |        // We are in error.
  372|      0|        return answer;
  373|      0|      }
  374|       |      // Otherwise, we will be ignoring the 'e'.
  375|    620|      p = location_of_e;
  376|  21.5k|    } else {
  377|  80.2k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (377:14): [True: 65.4k, False: 14.7k]
  |  Branch (377:29): [True: 58.6k, False: 6.80k]
  ------------------
  378|  58.6k|        uint8_t digit = uint8_t(*p - UC('0'));
  379|  58.6k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (379:13): [True: 55.0k, False: 3.58k]
  ------------------
  380|  55.0k|          exp_number = 10 * exp_number + digit;
  381|  55.0k|        }
  382|  58.6k|        ++p;
  383|  58.6k|      }
  384|  21.5k|      if(neg_exp) { exp_number = - exp_number; }
  ------------------
  |  Branch (384:10): [True: 5.92k, False: 15.6k]
  ------------------
  385|  21.5k|      exponent += exp_number;
  386|  21.5k|    }
  387|   608k|  } else {
  388|       |    // If it scientific and not fixed, we have to bail out.
  389|   608k|    if((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) { return answer; }
  ------------------
  |  Branch (389:8): [True: 495k, False: 112k]
  |  Branch (389:44): [True: 0, False: 495k]
  ------------------
  390|   608k|  }
  391|   630k|  answer.lastmatch = p;
  392|   630k|  answer.valid = true;
  393|       |
  394|       |  // If we frequently had to deal with long strings of digits,
  395|       |  // we could extend our code by using a 128-bit integer instead
  396|       |  // of a 64-bit integer. However, this is uncommon.
  397|       |  //
  398|       |  // We can deal with up to 19 digits.
  399|   630k|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (399:7): [True: 2.00k, False: 628k]
  ------------------
  400|       |    // It is possible that the integer had an overflow.
  401|       |    // We have to handle the case where we have 0.0000somenumber.
  402|       |    // We need to be mindful of the case where we only have zeroes...
  403|       |    // E.g., 0.000000000...000.
  404|  2.00k|    UC const * start = start_digits;
  405|  2.54k|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (405:12): [True: 2.54k, False: 0]
  |  Branch (405:32): [True: 536, False: 2.00k]
  |  Branch (405:53): [True: 0, False: 2.00k]
  ------------------
  406|    536|      if(*start == UC('0')) { digit_count --; }
  ------------------
  |  Branch (406:10): [True: 536, False: 0]
  ------------------
  407|    536|      start++;
  408|    536|    }
  409|       |
  410|  2.00k|    if (digit_count > 19) {
  ------------------
  |  Branch (410:9): [True: 1.73k, False: 272]
  ------------------
  411|  1.73k|      answer.too_many_digits = true;
  412|       |      // Let us start again, this time, avoiding overflows.
  413|       |      // We don't need to check if is_integer, since we use the
  414|       |      // pre-tokenized spans from above.
  415|  1.73k|      i = 0;
  416|  1.73k|      p = answer.integer.ptr;
  417|  1.73k|      UC const* int_end = p + answer.integer.len();
  418|  1.73k|      const uint64_t minimal_nineteen_digit_integer{ 1000000000000000000 };
  419|  27.1k|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (419:14): [True: 26.2k, False: 892]
  |  Branch (419:54): [True: 25.4k, False: 844]
  ------------------
  420|  25.4k|        i = i * 10 + uint64_t(*p - UC('0'));
  421|  25.4k|        ++p;
  422|  25.4k|      }
  423|  1.73k|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (423:11): [True: 892, False: 844]
  ------------------
  424|    892|        exponent = end_of_integer_part - p + exp_number;
  425|    892|      }
  426|    844|      else { // We have a value with a fractional component.
  427|    844|        p = answer.fraction.ptr;
  428|    844|        UC const* frac_end = p + answer.fraction.len();
  429|  8.54k|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (429:16): [True: 7.70k, False: 844]
  |  Branch (429:56): [True: 7.70k, False: 0]
  ------------------
  430|  7.70k|          i = i * 10 + uint64_t(*p - UC('0'));
  431|  7.70k|          ++p;
  432|  7.70k|        }
  433|    844|        exponent = answer.fraction.ptr - p + exp_number;
  434|    844|      }
  435|       |      // We have now corrected both exponent and i, to a truncated value
  436|  1.73k|    }
  437|  2.00k|  }
  438|   630k|  answer.exponent = exponent;
  439|   630k|  answer.mantissa = i;
  440|   630k|  return answer;
  441|   630k|}
_ZN10fast_float10is_integerIDiEEbT_:
   35|  1.04M|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   36|  1.04M|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (36:12): [True: 208k, False: 833k]
  |  Branch (36:27): [True: 4.61k, False: 828k]
  ------------------
   37|  1.04M|}
_ZN10fast_float26loop_parse_if_eight_digitsIDiTnNSt3__19enable_ifIXntsr3std7is_sameIT_cEE5valueEiE4typeELi0EEEvRPKS3_S7_Rm:
  237|  3.24k|void loop_parse_if_eight_digits(const UC*& p, const UC* const pend, uint64_t& i) {
  238|  3.24k|  if (!has_simd_opt<UC>()) {
  ------------------
  |  Branch (238:7): [Folded - Ignored]
  ------------------
  239|  3.24k|    return;
  240|  3.24k|  }
  241|      0|  while ((std::distance(p, pend) >= 8) && simd_parse_if_eight_digits_unrolled(p, i)) { // in rare cases, this will overflow, but that's ok
  ------------------
  |  Branch (241:10): [True: 0, False: 0]
  |  Branch (241:43): [True: 0, False: 0]
  ------------------
  242|      0|    p += 8;
  243|      0|  }
  244|      0|}
_ZN10fast_float27parse_eight_digits_unrolledIDiEEjPKT_:
  160|    108|uint32_t parse_eight_digits_unrolled(UC const * chars)  noexcept {
  161|    108|  if (cpp20_and_in_constexpr() || !has_simd_opt<UC>()) {
  ------------------
  |  Branch (161:7): [Folded - Ignored]
  |  Branch (161:35): [Folded - Ignored]
  ------------------
  162|    108|    return parse_eight_digits_unrolled(read8_to_u64(chars)); // truncation okay
  163|    108|  }
  164|      0|  return parse_eight_digits_unrolled(simd_read8_to_u64(chars));
  165|    108|}
_ZN10fast_float12read8_to_u64IDiEEmPKT_:
   53|    108|uint64_t read8_to_u64(const UC *chars) {
   54|    108|  if (cpp20_and_in_constexpr() || !std::is_same<UC, char>::value) {
  ------------------
  |  Branch (54:7): [Folded - Ignored]
  |  Branch (54:35): [Folded - Ignored]
  ------------------
   55|    108|    uint64_t val = 0;
   56|    972|    for(int i = 0; i < 8; ++i) {
  ------------------
  |  Branch (56:20): [True: 864, False: 108]
  ------------------
   57|    864|      val |= uint64_t(uint8_t(*chars)) << (i*8);
   58|    864|      ++chars;
   59|    864|    }
   60|    108|    return val;
   61|    108|  }
   62|      0|  uint64_t val;
   63|      0|  ::memcpy(&val, chars, sizeof(uint64_t));
   64|       |#if FASTFLOAT_IS_BIG_ENDIAN == 1
   65|       |  // Need to read as-if the number was in little-endian order.
   66|       |  val = byteswap(val);
   67|       |#endif
   68|      0|  return val;
   69|    108|}

_ZN10fast_float6bigintC2Ev:
  412|  80.6k|  FASTFLOAT_CONSTEXPR20 bigint(): vec() {}
_ZN10fast_float8stackvecILt62EEC2Ev:
   46|   169k|  stackvec() = default;
_ZN10fast_float6bigint3mulEm:
  563|   267k|  FASTFLOAT_CONSTEXPR20 bool mul(limb y) noexcept {
  564|   267k|    return small_mul(vec, y);
  565|   267k|  }
_ZN10fast_float9small_mulILt62EEEbRNS_8stackvecIXT_EEEm:
  282|   391k|bool small_mul(stackvec<size>& vec, limb y) noexcept {
  283|   391k|  limb carry = 0;
  284|  1.45M|  for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (284:26): [True: 1.06M, False: 391k]
  ------------------
  285|  1.06M|    vec[index] = scalar_mul(vec[index], y, carry);
  286|  1.06M|  }
  287|   391k|  if (carry != 0) {
  ------------------
  |  Branch (287:7): [True: 224k, False: 167k]
  ------------------
  288|   224k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|   224k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 224k]
  |  |  ------------------
  ------------------
  289|   224k|  }
  290|   391k|  return true;
  291|   391k|}
_ZNK10fast_float8stackvecILt62EE3lenEv:
   76|  2.88M|  constexpr size_t len() const noexcept {
   77|  2.88M|    return length;
   78|  2.88M|  }
_ZN10fast_float10scalar_mulEmmRm:
  229|  1.06M|limb scalar_mul(limb x, limb y, limb& carry) noexcept {
  230|  1.06M|#ifdef FASTFLOAT_64BIT_LIMB
  231|  1.06M|  #if defined(__SIZEOF_INT128__)
  232|       |  // GCC and clang both define it as an extension.
  233|  1.06M|  __uint128_t z = __uint128_t(x) * __uint128_t(y) + __uint128_t(carry);
  234|  1.06M|  carry = limb(z >> limb_bits);
  235|  1.06M|  return limb(z);
  236|       |  #else
  237|       |  // fallback, no native 128-bit integer multiplication with carry.
  238|       |  // on msvc, this optimizes identically, somehow.
  239|       |  value128 z = full_multiplication(x, y);
  240|       |  bool overflow;
  241|       |  z.low = scalar_add(z.low, carry, overflow);
  242|       |  z.high += uint64_t(overflow);  // cannot overflow
  243|       |  carry = z.high;
  244|       |  return z.low;
  245|       |  #endif
  246|       |#else
  247|       |  uint64_t z = uint64_t(x) * uint64_t(y) + uint64_t(carry);
  248|       |  carry = limb(z >> limb_bits);
  249|       |  return limb(z);
  250|       |#endif
  251|  1.06M|}
_ZN10fast_float8stackvecILt62EEixEm:
   57|  2.96M|  FASTFLOAT_CONSTEXPR14 limb& operator[](size_t index) noexcept {
   58|  2.96M|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|  2.96M|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   59|  2.96M|    return data[index];
   60|  2.96M|  }
_ZN10fast_float8stackvecILt62EE8try_pushEm:
   91|   323k|  FASTFLOAT_CONSTEXPR14 bool try_push(limb value) noexcept {
   92|   323k|    if (len() < capacity()) {
  ------------------
  |  Branch (92:9): [True: 323k, False: 0]
  ------------------
   93|   323k|      push_unchecked(value);
   94|   323k|      return true;
   95|   323k|    } else {
   96|      0|      return false;
   97|      0|    }
   98|   323k|  }
_ZNK10fast_float8stackvecILt62EE8capacityEv:
   82|   367k|  constexpr size_t capacity() const noexcept {
   83|   367k|    return size;
   84|   367k|  }
_ZN10fast_float8stackvecILt62EE14push_uncheckedEm:
   86|   397k|  FASTFLOAT_CONSTEXPR14 void push_unchecked(limb value) noexcept {
   87|   397k|    data[length] = value;
   88|   397k|    length++;
   89|   397k|  }
_ZN10fast_float6bigint3addEm:
  567|   267k|  FASTFLOAT_CONSTEXPR20 bool add(limb y) noexcept {
  568|   267k|    return small_add(vec, y);
  569|   267k|  }
_ZN10fast_float9small_addILt62EEEbRNS_8stackvecIXT_EEEm:
  275|   267k|bool small_add(stackvec<size>& vec, limb y) noexcept {
  276|   267k|  return small_add_from(vec, y, 0);
  277|   267k|}
_ZN10fast_float14small_add_fromILt62EEEbRNS_8stackvecIXT_EEEmm:
  257|   267k|bool small_add_from(stackvec<size>& vec, limb y, size_t start) noexcept {
  258|   267k|  size_t index = start;
  259|   267k|  limb carry = y;
  260|   267k|  bool overflow;
  261|   408k|  while (carry != 0 && index < vec.len()) {
  ------------------
  |  Branch (261:10): [True: 222k, False: 186k]
  |  Branch (261:24): [True: 141k, False: 80.6k]
  ------------------
  262|   141k|    vec[index] = scalar_add(vec[index], carry, overflow);
  263|   141k|    carry = limb(overflow);
  264|   141k|    index += 1;
  265|   141k|  }
  266|   267k|  if (carry != 0) {
  ------------------
  |  Branch (266:7): [True: 80.6k, False: 186k]
  ------------------
  267|  80.6k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|  80.6k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 80.6k]
  |  |  ------------------
  ------------------
  268|  80.6k|  }
  269|   267k|  return true;
  270|   267k|}
_ZN10fast_float10scalar_addEmmRb:
  209|   297k|limb scalar_add(limb x, limb y, bool& overflow) noexcept {
  210|   297k|  limb z;
  211|       |// gcc and clang
  212|   297k|#if defined(__has_builtin)
  213|   297k|  #if __has_builtin(__builtin_add_overflow)
  214|   297k|    if (!cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (214:9): [Folded - Ignored]
  ------------------
  215|   297k|      overflow = __builtin_add_overflow(x, y, &z);
  216|   297k|      return z;
  217|   297k|    }
  218|      0|  #endif
  219|      0|#endif
  220|       |
  221|       |  // generic, this still optimizes correctly on MSVC.
  222|      0|  z = x + y;
  223|      0|  overflow = z < x;
  224|      0|  return z;
  225|   297k|}
_ZN10fast_float6bigint5pow10Ej:
  609|  6.81k|  FASTFLOAT_CONSTEXPR20 bool pow10(uint32_t exp) noexcept {
  610|  6.81k|    FASTFLOAT_TRY(pow5(exp));
  ------------------
  |  |  178|  6.81k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 6.81k]
  |  |  ------------------
  ------------------
  611|  6.81k|    return pow2(exp);
  612|  6.81k|  }
_ZN10fast_float6bigint4pow5Ej:
  577|  80.6k|  FASTFLOAT_CONSTEXPR20 bool pow5(uint32_t exp) noexcept {
  578|       |    // multiply by a power of 5
  579|  80.6k|    size_t large_length = sizeof(large_power_of_5) / sizeof(limb);
  580|  80.6k|    limb_span large = limb_span(large_power_of_5, large_length);
  581|  84.4k|    while (exp >= large_step) {
  ------------------
  |  Branch (581:12): [True: 3.88k, False: 80.6k]
  ------------------
  582|  3.88k|      FASTFLOAT_TRY(large_mul(vec, large));
  ------------------
  |  |  178|  3.88k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 3.88k]
  |  |  ------------------
  ------------------
  583|  3.88k|      exp -= large_step;
  584|  3.88k|    }
  585|  80.6k|#ifdef FASTFLOAT_64BIT_LIMB
  586|  80.6k|    uint32_t small_step = 27;
  587|  80.6k|    limb max_native = 7450580596923828125UL;
  588|       |#else
  589|       |    uint32_t small_step = 13;
  590|       |    limb max_native = 1220703125U;
  591|       |#endif
  592|   116k|    while (exp >= small_step) {
  ------------------
  |  Branch (592:12): [True: 35.9k, False: 80.6k]
  ------------------
  593|  35.9k|      FASTFLOAT_TRY(small_mul(vec, max_native));
  ------------------
  |  |  178|  35.9k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 35.9k]
  |  |  ------------------
  ------------------
  594|  35.9k|      exp -= small_step;
  595|  35.9k|    }
  596|  80.6k|    if (exp != 0) {
  ------------------
  |  Branch (596:9): [True: 69.2k, False: 11.3k]
  ------------------
  597|       |      // Work around clang bug https://godbolt.org/z/zedh7rrhc
  598|       |      // This is similar to https://github.com/llvm/llvm-project/issues/47746,
  599|       |      // except the workaround described there don't work here
  600|  69.2k|      FASTFLOAT_TRY(
  ------------------
  |  |  178|  69.2k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 69.2k]
  |  |  ------------------
  ------------------
  601|  69.2k|        small_mul(vec, limb(((void)small_power_of_5[0], small_power_of_5[exp])))
  602|  69.2k|      );
  603|  69.2k|    }
  604|       |
  605|  80.6k|    return true;
  606|  80.6k|  }
_ZN10fast_float9large_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  364|  3.88k|bool large_mul(stackvec<size>& x, limb_span y) noexcept {
  365|  3.88k|  if (y.len() == 1) {
  ------------------
  |  Branch (365:7): [True: 0, False: 3.88k]
  ------------------
  366|      0|    FASTFLOAT_TRY(small_mul(x, y[0]));
  ------------------
  |  |  178|      0|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  367|  3.88k|  } else {
  368|  3.88k|    FASTFLOAT_TRY(long_mul(x, y));
  ------------------
  |  |  178|  3.88k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 3.88k]
  |  |  ------------------
  ------------------
  369|  3.88k|  }
  370|  3.88k|  return true;
  371|  3.88k|}
_ZN10fast_float8long_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  335|  3.88k|bool long_mul(stackvec<size>& x, limb_span y) noexcept {
  336|  3.88k|  limb_span xs = limb_span(x.data, x.len());
  337|  3.88k|  stackvec<size> z(xs);
  338|  3.88k|  limb_span zs = limb_span(z.data, z.len());
  339|       |
  340|  3.88k|  if (y.len() != 0) {
  ------------------
  |  Branch (340:7): [True: 3.88k, False: 0]
  ------------------
  341|  3.88k|    limb y0 = y[0];
  342|  3.88k|    FASTFLOAT_TRY(small_mul(x, y0));
  ------------------
  |  |  178|  3.88k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 3.88k]
  |  |  ------------------
  ------------------
  343|  19.4k|    for (size_t index = 1; index < y.len(); index++) {
  ------------------
  |  Branch (343:28): [True: 15.5k, False: 3.88k]
  ------------------
  344|  15.5k|      limb yi = y[index];
  345|  15.5k|      stackvec<size> zi;
  346|  15.5k|      if (yi != 0) {
  ------------------
  |  Branch (346:11): [True: 15.5k, False: 0]
  ------------------
  347|       |        // re-use the same buffer throughout
  348|  15.5k|        zi.set_len(0);
  349|  15.5k|        FASTFLOAT_TRY(zi.try_extend(zs));
  ------------------
  |  |  178|  15.5k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 15.5k]
  |  |  ------------------
  ------------------
  350|  15.5k|        FASTFLOAT_TRY(small_mul(zi, yi));
  ------------------
  |  |  178|  15.5k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 15.5k]
  |  |  ------------------
  ------------------
  351|  15.5k|        limb_span zis = limb_span(zi.data, zi.len());
  352|  15.5k|        FASTFLOAT_TRY(large_add_from(x, zis, index));
  ------------------
  |  |  178|  15.5k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 15.5k]
  |  |  ------------------
  ------------------
  353|  15.5k|      }
  354|  15.5k|    }
  355|  3.88k|  }
  356|       |
  357|  3.88k|  x.normalize();
  358|  3.88k|  return true;
  359|  3.88k|}
_ZN10fast_float8stackvecILt62EEC2ENS_4spanImEE:
   53|  3.88k|  FASTFLOAT_CONSTEXPR20 stackvec(limb_span s) {
   54|  3.88k|    FASTFLOAT_ASSERT(try_extend(s));
  ------------------
  |  |  170|  3.88k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
   55|  3.88k|  }
_ZN10fast_float8stackvecILt62EE7set_lenEm:
   73|  59.6k|  FASTFLOAT_CONSTEXPR14 void set_len(size_t len) noexcept {
   74|  59.6k|    length = uint16_t(len);
   75|  59.6k|  }
_ZN10fast_float8stackvecILt62EE10try_extendENS_4spanImEE:
  106|  19.4k|  FASTFLOAT_CONSTEXPR20 bool try_extend(limb_span s) noexcept {
  107|  19.4k|    if (len() + s.len() <= capacity()) {
  ------------------
  |  Branch (107:9): [True: 19.4k, False: 0]
  ------------------
  108|  19.4k|      extend_unchecked(s);
  109|  19.4k|      return true;
  110|  19.4k|    } else {
  111|      0|      return false;
  112|      0|    }
  113|  19.4k|  }
_ZN10fast_float8stackvecILt62EE16extend_uncheckedENS_4spanImEE:
  100|  19.4k|  FASTFLOAT_CONSTEXPR20 void extend_unchecked(limb_span s) noexcept {
  101|  19.4k|    limb* ptr = data + length;
  102|  19.4k|    std::copy_n(s.ptr, s.len(), ptr);
  103|  19.4k|    set_len(len() + s.len());
  104|  19.4k|  }
_ZN10fast_float14large_add_fromILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEEm:
  297|  15.5k|bool large_add_from(stackvec<size>& x, limb_span y, size_t start) noexcept {
  298|       |  // the effective x buffer is from `xstart..x.len()`, so exit early
  299|       |  // if we can't get that current range.
  300|  15.5k|  if (x.len() < start || y.len() > x.len() - start) {
  ------------------
  |  Branch (300:7): [True: 0, False: 15.5k]
  |  Branch (300:26): [True: 15.2k, False: 251]
  ------------------
  301|  15.2k|      FASTFLOAT_TRY(x.try_resize(y.len() + start, 0));
  ------------------
  |  |  178|  15.2k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 15.2k]
  |  |  ------------------
  ------------------
  302|  15.2k|  }
  303|       |
  304|  15.5k|  bool carry = false;
  305|   128k|  for (size_t index = 0; index < y.len(); index++) {
  ------------------
  |  Branch (305:26): [True: 113k, False: 15.5k]
  ------------------
  306|   113k|    limb xi = x[index + start];
  307|   113k|    limb yi = y[index];
  308|   113k|    bool c1 = false;
  309|   113k|    bool c2 = false;
  310|   113k|    xi = scalar_add(xi, yi, c1);
  311|   113k|    if (carry) {
  ------------------
  |  Branch (311:9): [True: 42.3k, False: 70.7k]
  ------------------
  312|  42.3k|      xi = scalar_add(xi, 1, c2);
  313|  42.3k|    }
  314|   113k|    x[index + start] = xi;
  315|   113k|    carry = c1 | c2;
  316|   113k|  }
  317|       |
  318|       |  // handle overflow
  319|  15.5k|  if (carry) {
  ------------------
  |  Branch (319:7): [True: 0, False: 15.5k]
  ------------------
  320|      0|    FASTFLOAT_TRY(small_add_from(x, 1, y.len() + start));
  ------------------
  |  |  178|      0|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  321|      0|  }
  322|  15.5k|  return true;
  323|  15.5k|}
_ZN10fast_float8stackvecILt62EE10try_resizeEmm:
  130|  15.2k|  FASTFLOAT_CONSTEXPR20 bool try_resize(size_t new_len, limb value) noexcept {
  131|  15.2k|    if (new_len > capacity()) {
  ------------------
  |  Branch (131:9): [True: 0, False: 15.2k]
  ------------------
  132|      0|      return false;
  133|  15.2k|    } else {
  134|  15.2k|      resize_unchecked(new_len, value);
  135|  15.2k|      return true;
  136|  15.2k|    }
  137|  15.2k|  }
_ZN10fast_float8stackvecILt62EE16resize_uncheckedEmm:
  118|  15.2k|  void resize_unchecked(size_t new_len, limb value) noexcept {
  119|  15.2k|    if (new_len > len()) {
  ------------------
  |  Branch (119:9): [True: 15.2k, False: 0]
  ------------------
  120|  15.2k|      size_t count = new_len - len();
  121|  15.2k|      limb* first = data + len();
  122|  15.2k|      limb* last = first + count;
  123|  15.2k|      ::std::fill(first, last, value);
  124|  15.2k|      set_len(new_len);
  125|  15.2k|    } else {
  126|      0|      set_len(new_len);
  127|      0|    }
  128|  15.2k|  }
_ZN10fast_float8stackvecILt62EE9normalizeEv:
  151|  77.6k|  FASTFLOAT_CONSTEXPR14 void normalize() noexcept {
  152|  77.6k|    while (len() > 0 && rindex(0) == 0) {
  ------------------
  |  Branch (152:12): [True: 77.6k, False: 0]
  |  Branch (152:25): [True: 0, False: 77.6k]
  ------------------
  153|      0|      length--;
  154|      0|    }
  155|  77.6k|  }
_ZNK10fast_float8stackvecILt62EE6rindexEm:
   66|  97.5k|  FASTFLOAT_CONSTEXPR14 const limb& rindex(size_t index) const noexcept {
   67|  97.5k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|  97.5k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   68|  97.5k|    size_t rindex = length - index - 1;
   69|  97.5k|    return data[rindex];
   70|  97.5k|  }
_ZN10fast_float6bigint4pow2Ej:
  572|  80.5k|  FASTFLOAT_CONSTEXPR20 bool pow2(uint32_t exp) noexcept {
  573|  80.5k|    return shl(exp);
  574|  80.5k|  }
_ZN10fast_float6bigint3shlEm:
  530|  80.5k|  FASTFLOAT_CONSTEXPR20 bool shl(size_t n) noexcept {
  531|  80.5k|    size_t rem = n % limb_bits;
  532|  80.5k|    size_t div = n / limb_bits;
  533|  80.5k|    if (rem != 0) {
  ------------------
  |  Branch (533:9): [True: 73.8k, False: 6.61k]
  ------------------
  534|  73.8k|      FASTFLOAT_TRY(shl_bits(rem));
  ------------------
  |  |  178|  73.8k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 73.8k]
  |  |  ------------------
  ------------------
  535|  73.8k|    }
  536|  80.5k|    if (div != 0) {
  ------------------
  |  Branch (536:9): [True: 9.44k, False: 71.0k]
  ------------------
  537|  9.44k|      FASTFLOAT_TRY(shl_limbs(div));
  ------------------
  |  |  178|  9.44k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 9.44k]
  |  |  ------------------
  ------------------
  538|  9.44k|    }
  539|  80.5k|    return true;
  540|  80.5k|  }
_ZN10fast_float6bigint8shl_bitsEm:
  483|  73.8k|  FASTFLOAT_CONSTEXPR20 bool shl_bits(size_t n) noexcept {
  484|       |    // Internally, for each item, we shift left by n, and add the previous
  485|       |    // right shifted limb-bits.
  486|       |    // For example, we transform (for u8) shifted left 2, to:
  487|       |    //      b10100100 b01000010
  488|       |    //      b10 b10010001 b00001000
  489|  73.8k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  174|  73.8k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  490|  73.8k|    FASTFLOAT_DEBUG_ASSERT(n < sizeof(limb) * 8);
  ------------------
  |  |  174|  73.8k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  491|       |
  492|  73.8k|    size_t shl = n;
  493|  73.8k|    size_t shr = limb_bits - shl;
  494|  73.8k|    limb prev = 0;
  495|   239k|    for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (495:28): [True: 165k, False: 73.8k]
  ------------------
  496|   165k|      limb xi = vec[index];
  497|   165k|      vec[index] = (xi << shl) | (prev >> shr);
  498|   165k|      prev = xi;
  499|   165k|    }
  500|       |
  501|  73.8k|    limb carry = prev >> shr;
  502|  73.8k|    if (carry != 0) {
  ------------------
  |  Branch (502:9): [True: 18.7k, False: 55.1k]
  ------------------
  503|  18.7k|      return vec.try_push(carry);
  504|  18.7k|    }
  505|  55.1k|    return true;
  506|  73.8k|  }
_ZN10fast_float6bigint9shl_limbsEm:
  509|  9.44k|  FASTFLOAT_CONSTEXPR20 bool shl_limbs(size_t n) noexcept {
  510|  9.44k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  174|  9.44k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  511|  9.44k|    if (n + vec.len() > vec.capacity()) {
  ------------------
  |  Branch (511:9): [True: 0, False: 9.44k]
  ------------------
  512|      0|      return false;
  513|  9.44k|    } else if (!vec.is_empty()) {
  ------------------
  |  Branch (513:16): [True: 9.44k, False: 0]
  ------------------
  514|       |      // move limbs
  515|  9.44k|      limb* dst = vec.data + n;
  516|  9.44k|      const limb* src = vec.data;
  517|  9.44k|      std::copy_backward(src, src + vec.len(), dst + vec.len());
  518|       |      // fill in empty limbs
  519|  9.44k|      limb* first = vec.data;
  520|  9.44k|      limb* last = first + n;
  521|  9.44k|      ::std::fill(first, last, 0);
  522|  9.44k|      vec.set_len(n + vec.len());
  523|  9.44k|      return true;
  524|  9.44k|    } else {
  525|      0|      return true;
  526|      0|    }
  527|  9.44k|  }
_ZNK10fast_float8stackvecILt62EE8is_emptyEv:
   79|  16.2k|  constexpr bool is_empty() const noexcept {
   80|  16.2k|    return length == 0;
   81|  16.2k|  }
_ZNK10fast_float6bigint4hi64ERb:
  430|  6.81k|  FASTFLOAT_CONSTEXPR20 uint64_t hi64(bool& truncated) const noexcept {
  431|  6.81k|#ifdef FASTFLOAT_64BIT_LIMB
  432|  6.81k|    if (vec.len() == 0) {
  ------------------
  |  Branch (432:9): [True: 0, False: 6.81k]
  ------------------
  433|      0|      return empty_hi64(truncated);
  434|  6.81k|    } else if (vec.len() == 1) {
  ------------------
  |  Branch (434:16): [True: 1.15k, False: 5.66k]
  ------------------
  435|  1.15k|      return uint64_hi64(vec.rindex(0), truncated);
  436|  5.66k|    } else {
  437|  5.66k|      uint64_t result = uint64_hi64(vec.rindex(0), vec.rindex(1), truncated);
  438|  5.66k|      truncated |= vec.nonzero(2);
  439|  5.66k|      return result;
  440|  5.66k|    }
  441|       |#else
  442|       |    if (vec.len() == 0) {
  443|       |      return empty_hi64(truncated);
  444|       |    } else if (vec.len() == 1) {
  445|       |      return uint32_hi64(vec.rindex(0), truncated);
  446|       |    } else if (vec.len() == 2) {
  447|       |      return uint32_hi64(vec.rindex(0), vec.rindex(1), truncated);
  448|       |    } else {
  449|       |      uint64_t result = uint32_hi64(vec.rindex(0), vec.rindex(1), vec.rindex(2), truncated);
  450|       |      truncated |= vec.nonzero(3);
  451|       |      return result;
  452|       |    }
  453|       |#endif
  454|  6.81k|  }
_ZN10fast_float11uint64_hi64EmRb:
  165|  1.15k|uint64_t uint64_hi64(uint64_t r0, bool& truncated) noexcept {
  166|  1.15k|  truncated = false;
  167|  1.15k|  int shl = leading_zeroes(r0);
  168|  1.15k|  return r0 << shl;
  169|  1.15k|}
_ZN10fast_float11uint64_hi64EmmRb:
  172|  5.66k|uint64_t uint64_hi64(uint64_t r0, uint64_t r1, bool& truncated) noexcept {
  173|  5.66k|  int shl = leading_zeroes(r0);
  174|  5.66k|  if (shl == 0) {
  ------------------
  |  Branch (174:7): [True: 36, False: 5.62k]
  ------------------
  175|     36|    truncated = r1 != 0;
  176|     36|    return r0;
  177|  5.62k|  } else {
  178|  5.62k|    int shr = 64 - shl;
  179|  5.62k|    truncated = (r1 << shl) != 0;
  180|  5.62k|    return (r0 << shl) | (r1 >> shr);
  181|  5.62k|  }
  182|  5.66k|}
_ZNK10fast_float8stackvecILt62EE7nonzeroEm:
  141|  5.66k|  FASTFLOAT_CONSTEXPR14 bool nonzero(size_t index) const noexcept {
  142|  5.70k|    while (index < len()) {
  ------------------
  |  Branch (142:12): [True: 540, False: 5.16k]
  ------------------
  143|    540|      if (rindex(index) != 0) {
  ------------------
  |  Branch (143:11): [True: 500, False: 40]
  ------------------
  144|    500|        return true;
  145|    500|      }
  146|     40|      index++;
  147|     40|    }
  148|  5.16k|    return false;
  149|  5.66k|  }
_ZNK10fast_float6bigint10bit_lengthEv:
  558|  6.81k|  FASTFLOAT_CONSTEXPR20 int bit_length() const noexcept {
  559|  6.81k|    int lz = ctlz();
  560|  6.81k|    return int(limb_bits * vec.len()) - lz;
  561|  6.81k|  }
_ZNK10fast_float6bigint4ctlzEv:
  543|  6.81k|  FASTFLOAT_CONSTEXPR20 int ctlz() const noexcept {
  544|  6.81k|    if (vec.is_empty()) {
  ------------------
  |  Branch (544:9): [True: 0, False: 6.81k]
  ------------------
  545|      0|      return 0;
  546|  6.81k|    } else {
  547|  6.81k|#ifdef FASTFLOAT_64BIT_LIMB
  548|  6.81k|      return leading_zeroes(vec.rindex(0));
  549|       |#else
  550|       |      // no use defining a specialized leading_zeroes for a 32-bit type.
  551|       |      uint64_t r0 = vec.rindex(0);
  552|       |      return leading_zeroes(r0 << 32);
  553|       |#endif
  554|  6.81k|    }
  555|  6.81k|  }
_ZN10fast_float6bigintC2Em:
  418|  73.7k|  FASTFLOAT_CONSTEXPR20 bigint(uint64_t value): vec() {
  419|  73.7k|#ifdef FASTFLOAT_64BIT_LIMB
  420|  73.7k|    vec.push_unchecked(value);
  421|       |#else
  422|       |    vec.push_unchecked(uint32_t(value));
  423|       |    vec.push_unchecked(uint32_t(value >> 32));
  424|       |#endif
  425|  73.7k|    vec.normalize();
  426|  73.7k|  }
_ZNK10fast_float6bigint7compareERKS0_:
  462|  73.7k|  FASTFLOAT_CONSTEXPR20 int compare(const bigint& other) const noexcept {
  463|  73.7k|    if (vec.len() > other.vec.len()) {
  ------------------
  |  Branch (463:9): [True: 0, False: 73.7k]
  ------------------
  464|      0|      return 1;
  465|  73.7k|    } else if (vec.len() < other.vec.len()) {
  ------------------
  |  Branch (465:16): [True: 0, False: 73.7k]
  ------------------
  466|      0|      return -1;
  467|  73.7k|    } else {
  468|   144k|      for (size_t index = vec.len(); index > 0; index--) {
  ------------------
  |  Branch (468:38): [True: 139k, False: 4.73k]
  ------------------
  469|   139k|        limb xi = vec[index - 1];
  470|   139k|        limb yi = other.vec[index - 1];
  471|   139k|        if (xi > yi) {
  ------------------
  |  Branch (471:13): [True: 15.6k, False: 124k]
  ------------------
  472|  15.6k|          return 1;
  473|   124k|        } else if (xi < yi) {
  ------------------
  |  Branch (473:20): [True: 53.4k, False: 70.6k]
  ------------------
  474|  53.4k|          return -1;
  475|  53.4k|        }
  476|   139k|      }
  477|  4.73k|      return 0;
  478|  73.7k|    }
  479|  73.7k|  }
_ZNK10fast_float8stackvecILt62EEixEm:
   61|   279k|  FASTFLOAT_CONSTEXPR14 const limb& operator[](size_t index) const noexcept {
   62|   279k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   279k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   63|   279k|    return data[index];
   64|   279k|  }

_ZN10fast_float13compute_floatINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   94|   348k|adjusted_mantissa compute_float(int64_t q, uint64_t w)  noexcept  {
   95|   348k|  adjusted_mantissa answer;
   96|   348k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (96:7): [True: 5.30k, False: 343k]
  |  Branch (96:19): [True: 1.92k, False: 341k]
  ------------------
   97|  7.22k|    answer.power2 = 0;
   98|  7.22k|    answer.mantissa = 0;
   99|       |    // result should be zero
  100|  7.22k|    return answer;
  101|  7.22k|  }
  102|   341k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (102:7): [True: 10.2k, False: 330k]
  ------------------
  103|       |    // we want to get infinity:
  104|  10.2k|    answer.power2 = binary::infinite_power();
  105|  10.2k|    answer.mantissa = 0;
  106|  10.2k|    return answer;
  107|  10.2k|  }
  108|       |  // At this point in time q is in [powers::smallest_power_of_five, powers::largest_power_of_five].
  109|       |
  110|       |  // We want the most significant bit of i to be 1. Shift if needed.
  111|   330k|  int lz = leading_zeroes(w);
  112|   330k|  w <<= lz;
  113|       |
  114|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  115|       |  // 1. We need the implicit bit
  116|       |  // 2. We need an extra bit for rounding purposes
  117|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small, requiring a shift)
  118|       |
  119|   330k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  120|       |  // The computed 'product' is always sufficient.
  121|       |  // Mathematical proof:
  122|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to appear)
  123|       |  // See script/mushtak_lemire.py
  124|       |
  125|       |  // The "compute_product_approximation" function can be slightly slower than a branchless approach:
  126|       |  // value128 product = compute_product(q, w);
  127|       |  // but in practice, we can win big with the compute_product_approximation if its additional branch
  128|       |  // is easily predicted. Which is best is data specific.
  129|   330k|  int upperbit = int(product.high >> 63);
  130|       |
  131|   330k|  answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  132|       |
  133|   330k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz - binary::minimum_exponent());
  134|   330k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (134:7): [True: 1.56k, False: 329k]
  ------------------
  135|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  136|  1.56k|    if(-answer.power2 + 1 >= 64) { // if we have more than 64 bits below the minimum exponent, you have a zero for sure.
  ------------------
  |  Branch (136:8): [True: 88, False: 1.47k]
  ------------------
  137|     88|      answer.power2 = 0;
  138|     88|      answer.mantissa = 0;
  139|       |      // result should be zero
  140|     88|      return answer;
  141|     88|    }
  142|       |    // next line is safe because -answer.power2 + 1 < 64
  143|  1.47k|    answer.mantissa >>= -answer.power2 + 1;
  144|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  145|       |    // "round-to-even" only occurs for powers close to 0.
  146|  1.47k|    answer.mantissa += (answer.mantissa & 1); // round up
  147|  1.47k|    answer.mantissa >>= 1;
  148|       |    // There is a weird scenario where we don't have a subnormal but just.
  149|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  150|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  151|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  152|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  153|       |    // subnormal, but we can only know this after rounding.
  154|       |    // So we only declare a subnormal if we are smaller than the threshold.
  155|  1.47k|    answer.power2 = (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (155:21): [True: 1.47k, False: 0]
  ------------------
  156|  1.47k|    return answer;
  157|  1.56k|  }
  158|       |
  159|       |  // usually, we round *up*, but if we fall right in between and and we have an
  160|       |  // even basis, we need to round down
  161|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  162|   329k|  if ((product.low <= 1) &&  (q >= binary::min_exponent_round_to_even()) && (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (162:7): [True: 123k, False: 205k]
  |  Branch (162:30): [True: 120k, False: 2.76k]
  |  Branch (162:77): [True: 112k, False: 8.79k]
  ------------------
  163|   329k|      ((answer.mantissa & 3) == 1) ) { // we may fall between two floats!
  ------------------
  |  Branch (163:7): [True: 12.2k, False: 99.8k]
  ------------------
  164|       |    // To be in-between two floats we need that in doing
  165|       |    //   answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  166|       |    // ... we dropped out only zeroes. But if this happened, then we can go back!!!
  167|  12.2k|    if((answer.mantissa  << (upperbit + 64 - binary::mantissa_explicit_bits() - 3)) ==  product.high) {
  ------------------
  |  Branch (167:8): [True: 5.05k, False: 7.22k]
  ------------------
  168|  5.05k|      answer.mantissa &= ~uint64_t(1);          // flip it so that we do not round up
  169|  5.05k|    }
  170|  12.2k|  }
  171|       |
  172|   329k|  answer.mantissa += (answer.mantissa & 1); // round up
  173|   329k|  answer.mantissa >>= 1;
  174|   329k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (174:7): [True: 27.0k, False: 302k]
  ------------------
  175|  27.0k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  176|  27.0k|    answer.power2++; // undo previous addition
  177|  27.0k|  }
  178|       |
  179|   329k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  180|   329k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (180:7): [True: 1.33k, False: 327k]
  ------------------
  181|  1.33k|    answer.power2 = binary::infinite_power();
  182|  1.33k|    answer.mantissa = 0;
  183|  1.33k|  }
  184|   329k|  return answer;
  185|   330k|}
_ZN10fast_float29compute_product_approximationILi26EEENS_8value128Elm:
   21|   367k|value128 compute_product_approximation(int64_t q, uint64_t w) {
   22|   367k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   23|       |  // For small values of q, e.g., q in [0,27], the answer is always exact because
   24|       |  // The line value128 firstproduct = full_multiplication(w, power_of_five_128[index]);
   25|       |  // gives the exact answer.
   26|   367k|  value128 firstproduct = full_multiplication(w, powers::power_of_five_128[index]);
   27|   367k|  static_assert((bit_precision >= 0) && (bit_precision <= 64), " precision should  be in (0,64]");
   28|   367k|  constexpr uint64_t precision_mask = (bit_precision < 64) ?
  ------------------
  |  Branch (28:39): [Folded - Ignored]
  ------------------
   29|      0|               (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
   30|   367k|               : uint64_t(0xFFFFFFFFFFFFFFFF);
   31|   367k|  if((firstproduct.high & precision_mask) == precision_mask) { // could further guard with  (lower + w < lower)
  ------------------
  |  Branch (31:6): [True: 69.2k, False: 298k]
  ------------------
   32|       |    // regarding the second product, we only need secondproduct.high, but our expectation is that the compiler will optimize this extra work away if needed.
   33|  69.2k|    value128 secondproduct = full_multiplication(w, powers::power_of_five_128[index + 1]);
   34|  69.2k|    firstproduct.low += secondproduct.high;
   35|  69.2k|    if(secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (35:8): [True: 50.2k, False: 19.0k]
  ------------------
   36|  50.2k|      firstproduct.high++;
   37|  50.2k|    }
   38|  69.2k|  }
   39|   367k|  return firstproduct;
   40|   367k|}
_ZN10fast_float6detail5powerEi:
   58|   717k|  constexpr fastfloat_really_inline int32_t power(int32_t q)  noexcept  {
   59|   717k|    return (((152170 + 65536) * q) >> 16) + 63;
   60|   717k|  }
_ZN10fast_float13compute_errorINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   80|  36.7k|adjusted_mantissa compute_error(int64_t q, uint64_t w)  noexcept  {
   81|  36.7k|  int lz = leading_zeroes(w);
   82|  36.7k|  w <<= lz;
   83|  36.7k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   84|  36.7k|  return compute_error_scaled<binary>(q, product.high, lz);
   85|  36.7k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIfEEEENS_17adjusted_mantissaElmi:
   67|  36.7k|adjusted_mantissa compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept  {
   68|  36.7k|  int hilz = int(w >> 63) ^ 1;
   69|  36.7k|  adjusted_mantissa answer;
   70|  36.7k|  answer.mantissa = w << hilz;
   71|  36.7k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   72|  36.7k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 + invalid_am_bias);
   73|  36.7k|  return answer;
   74|  36.7k|}
_ZN10fast_float13compute_floatINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   94|   316k|adjusted_mantissa compute_float(int64_t q, uint64_t w)  noexcept  {
   95|   316k|  adjusted_mantissa answer;
   96|   316k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (96:7): [True: 4.98k, False: 311k]
  |  Branch (96:19): [True: 550, False: 310k]
  ------------------
   97|  5.53k|    answer.power2 = 0;
   98|  5.53k|    answer.mantissa = 0;
   99|       |    // result should be zero
  100|  5.53k|    return answer;
  101|  5.53k|  }
  102|   310k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (102:7): [True: 5.27k, False: 305k]
  ------------------
  103|       |    // we want to get infinity:
  104|  5.27k|    answer.power2 = binary::infinite_power();
  105|  5.27k|    answer.mantissa = 0;
  106|  5.27k|    return answer;
  107|  5.27k|  }
  108|       |  // At this point in time q is in [powers::smallest_power_of_five, powers::largest_power_of_five].
  109|       |
  110|       |  // We want the most significant bit of i to be 1. Shift if needed.
  111|   305k|  int lz = leading_zeroes(w);
  112|   305k|  w <<= lz;
  113|       |
  114|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  115|       |  // 1. We need the implicit bit
  116|       |  // 2. We need an extra bit for rounding purposes
  117|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small, requiring a shift)
  118|       |
  119|   305k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  120|       |  // The computed 'product' is always sufficient.
  121|       |  // Mathematical proof:
  122|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to appear)
  123|       |  // See script/mushtak_lemire.py
  124|       |
  125|       |  // The "compute_product_approximation" function can be slightly slower than a branchless approach:
  126|       |  // value128 product = compute_product(q, w);
  127|       |  // but in practice, we can win big with the compute_product_approximation if its additional branch
  128|       |  // is easily predicted. Which is best is data specific.
  129|   305k|  int upperbit = int(product.high >> 63);
  130|       |
  131|   305k|  answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  132|       |
  133|   305k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz - binary::minimum_exponent());
  134|   305k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (134:7): [True: 7.10k, False: 298k]
  ------------------
  135|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  136|  7.10k|    if(-answer.power2 + 1 >= 64) { // if we have more than 64 bits below the minimum exponent, you have a zero for sure.
  ------------------
  |  Branch (136:8): [True: 118, False: 6.98k]
  ------------------
  137|    118|      answer.power2 = 0;
  138|    118|      answer.mantissa = 0;
  139|       |      // result should be zero
  140|    118|      return answer;
  141|    118|    }
  142|       |    // next line is safe because -answer.power2 + 1 < 64
  143|  6.98k|    answer.mantissa >>= -answer.power2 + 1;
  144|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  145|       |    // "round-to-even" only occurs for powers close to 0.
  146|  6.98k|    answer.mantissa += (answer.mantissa & 1); // round up
  147|  6.98k|    answer.mantissa >>= 1;
  148|       |    // There is a weird scenario where we don't have a subnormal but just.
  149|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  150|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  151|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  152|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  153|       |    // subnormal, but we can only know this after rounding.
  154|       |    // So we only declare a subnormal if we are smaller than the threshold.
  155|  6.98k|    answer.power2 = (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (155:21): [True: 6.98k, False: 0]
  ------------------
  156|  6.98k|    return answer;
  157|  7.10k|  }
  158|       |
  159|       |  // usually, we round *up*, but if we fall right in between and and we have an
  160|       |  // even basis, we need to round down
  161|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  162|   298k|  if ((product.low <= 1) &&  (q >= binary::min_exponent_round_to_even()) && (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (162:7): [True: 98.2k, False: 200k]
  |  Branch (162:30): [True: 56.8k, False: 41.3k]
  |  Branch (162:77): [True: 49.7k, False: 7.14k]
  ------------------
  163|   298k|      ((answer.mantissa & 3) == 1) ) { // we may fall between two floats!
  ------------------
  |  Branch (163:7): [True: 9.42k, False: 40.3k]
  ------------------
  164|       |    // To be in-between two floats we need that in doing
  165|       |    //   answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  166|       |    // ... we dropped out only zeroes. But if this happened, then we can go back!!!
  167|  9.42k|    if((answer.mantissa  << (upperbit + 64 - binary::mantissa_explicit_bits() - 3)) ==  product.high) {
  ------------------
  |  Branch (167:8): [True: 7.48k, False: 1.94k]
  ------------------
  168|  7.48k|      answer.mantissa &= ~uint64_t(1);          // flip it so that we do not round up
  169|  7.48k|    }
  170|  9.42k|  }
  171|       |
  172|   298k|  answer.mantissa += (answer.mantissa & 1); // round up
  173|   298k|  answer.mantissa >>= 1;
  174|   298k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (174:7): [True: 26.3k, False: 272k]
  ------------------
  175|  26.3k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  176|  26.3k|    answer.power2++; // undo previous addition
  177|  26.3k|  }
  178|       |
  179|   298k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  180|   298k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (180:7): [True: 352, False: 298k]
  ------------------
  181|    352|    answer.power2 = binary::infinite_power();
  182|    352|    answer.mantissa = 0;
  183|    352|  }
  184|   298k|  return answer;
  185|   305k|}
_ZN10fast_float29compute_product_approximationILi55EEENS_8value128Elm:
   21|   349k|value128 compute_product_approximation(int64_t q, uint64_t w) {
   22|   349k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   23|       |  // For small values of q, e.g., q in [0,27], the answer is always exact because
   24|       |  // The line value128 firstproduct = full_multiplication(w, power_of_five_128[index]);
   25|       |  // gives the exact answer.
   26|   349k|  value128 firstproduct = full_multiplication(w, powers::power_of_five_128[index]);
   27|   349k|  static_assert((bit_precision >= 0) && (bit_precision <= 64), " precision should  be in (0,64]");
   28|   349k|  constexpr uint64_t precision_mask = (bit_precision < 64) ?
  ------------------
  |  Branch (28:39): [Folded - Ignored]
  ------------------
   29|      0|               (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
   30|   349k|               : uint64_t(0xFFFFFFFFFFFFFFFF);
   31|   349k|  if((firstproduct.high & precision_mask) == precision_mask) { // could further guard with  (lower + w < lower)
  ------------------
  |  Branch (31:6): [True: 124k, False: 225k]
  ------------------
   32|       |    // regarding the second product, we only need secondproduct.high, but our expectation is that the compiler will optimize this extra work away if needed.
   33|   124k|    value128 secondproduct = full_multiplication(w, powers::power_of_five_128[index + 1]);
   34|   124k|    firstproduct.low += secondproduct.high;
   35|   124k|    if(secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (35:8): [True: 44.8k, False: 79.2k]
  ------------------
   36|  44.8k|      firstproduct.high++;
   37|  44.8k|    }
   38|   124k|  }
   39|   349k|  return firstproduct;
   40|   349k|}
_ZN10fast_float13compute_errorINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   80|  43.8k|adjusted_mantissa compute_error(int64_t q, uint64_t w)  noexcept  {
   81|  43.8k|  int lz = leading_zeroes(w);
   82|  43.8k|  w <<= lz;
   83|  43.8k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   84|  43.8k|  return compute_error_scaled<binary>(q, product.high, lz);
   85|  43.8k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIdEEEENS_17adjusted_mantissaElmi:
   67|  43.8k|adjusted_mantissa compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept  {
   68|  43.8k|  int hilz = int(w >> 63) ^ 1;
   69|  43.8k|  adjusted_mantissa answer;
   70|  43.8k|  answer.mantissa = w << hilz;
   71|  43.8k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   72|  43.8k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 + invalid_am_bias);
   73|  43.8k|  return answer;
   74|  43.8k|}

_ZN10fast_float10digit_compIfcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  36.7k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  36.7k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  36.7k|  int32_t sci_exp = scientific_exponent(num);
  411|  36.7k|  size_t max_digits = binary_format<T>::max_digits();
  412|  36.7k|  size_t digits = 0;
  413|  36.7k|  bigint bigmant;
  414|  36.7k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  36.7k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  36.7k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 558, False: 36.2k]
  ------------------
  418|    558|    return positive_digit_comp<T>(bigmant, exponent);
  419|  36.2k|  } else {
  420|  36.2k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  36.2k|  }
  422|  36.7k|}
_ZN10fast_float19scientific_exponentIcEEiRNS_22parsed_number_string_tIT_EE:
   28|  80.5k|int32_t scientific_exponent(parsed_number_string_t<UC> & num) noexcept {
   29|  80.5k|  uint64_t mantissa = num.mantissa;
   30|  80.5k|  int32_t exponent = int32_t(num.exponent);
   31|   402k|  while (mantissa >= 10000) {
  ------------------
  |  Branch (31:10): [True: 322k, False: 80.5k]
  ------------------
   32|   322k|    mantissa /= 10000;
   33|   322k|    exponent += 4;
   34|   322k|  }
   35|   161k|  while (mantissa >= 100) {
  ------------------
  |  Branch (35:10): [True: 80.5k, False: 80.5k]
  ------------------
   36|  80.5k|    mantissa /= 100;
   37|  80.5k|    exponent += 2;
   38|  80.5k|  }
   39|  80.5k|  while (mantissa >= 10) {
  ------------------
  |  Branch (39:10): [True: 0, False: 80.5k]
  ------------------
   40|      0|    mantissa /= 10;
   41|      0|    exponent += 1;
   42|      0|  }
   43|  80.5k|  return exponent;
   44|  80.5k|}
_ZN10fast_float14parse_mantissaIcEEvRNS_6bigintERNS_22parsed_number_string_tIT_EEmRm:
  240|  80.5k|void parse_mantissa(bigint& result, parsed_number_string_t<UC>& num, size_t max_digits, size_t& digits) noexcept {
  241|       |  // try to minimize the number of big integer and scalar multiplication.
  242|       |  // therefore, try to parse 8 digits at a time, and multiply by the largest
  243|       |  // scalar value (9 or 19 digits) for each step.
  244|  80.5k|  size_t counter = 0;
  245|  80.5k|  digits = 0;
  246|  80.5k|  limb value = 0;
  247|  80.5k|#ifdef FASTFLOAT_64BIT_LIMB
  248|  80.5k|  size_t step = 19;
  249|       |#else
  250|       |  size_t step = 9;
  251|       |#endif
  252|       |
  253|       |  // process all integer digits.
  254|  80.5k|  UC const * p = num.integer.ptr;
  255|  80.5k|  UC const * pend = p + num.integer.len();
  256|  80.5k|  skip_zeros(p, pend);
  257|       |  // process all digits, in increments of step per loop
  258|   177k|  while (p != pend) {
  ------------------
  |  Branch (258:10): [True: 96.9k, False: 80.2k]
  ------------------
  259|   162k|    while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (259:12): [True: 82.9k, False: 79.6k]
  |  Branch (259:45): [True: 66.0k, False: 16.9k]
  |  Branch (259:70): [True: 65.7k, False: 307]
  ------------------
  260|  65.7k|      parse_eight_digits(p, value, counter, digits);
  261|  65.7k|    }
  262|   307k|    while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (262:12): [True: 287k, False: 19.8k]
  |  Branch (262:30): [True: 211k, False: 76.7k]
  |  Branch (262:43): [True: 210k, False: 307]
  ------------------
  263|   210k|      parse_one_digit(p, value, counter, digits);
  264|   210k|    }
  265|  96.9k|    if (digits == max_digits) {
  ------------------
  |  Branch (265:9): [True: 307, False: 96.6k]
  ------------------
  266|       |      // add the temporary value, then check if we've truncated any digits
  267|    307|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  268|    307|      bool truncated = is_truncated(p, pend);
  269|    307|      if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (269:11): [True: 271, False: 36]
  ------------------
  270|    271|        truncated |= is_truncated(num.fraction);
  271|    271|      }
  272|    307|      if (truncated) {
  ------------------
  |  Branch (272:11): [True: 199, False: 108]
  ------------------
  273|    199|        round_up_bigint(result, digits);
  274|    199|      }
  275|    307|      return;
  276|  96.6k|    } else {
  277|  96.6k|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  278|  96.6k|      counter = 0;
  279|  96.6k|      value = 0;
  280|  96.6k|    }
  281|  96.9k|  }
  282|       |
  283|       |  // add our fraction digits, if they're available.
  284|  80.2k|  if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (284:7): [True: 73.9k, False: 6.25k]
  ------------------
  285|  73.9k|    p = num.fraction.ptr;
  286|  73.9k|    pend = p + num.fraction.len();
  287|  73.9k|    if (digits == 0) {
  ------------------
  |  Branch (287:9): [True: 3.47k, False: 70.4k]
  ------------------
  288|  3.47k|      skip_zeros(p, pend);
  289|  3.47k|    }
  290|       |    // process all digits, in increments of step per loop
  291|   235k|    while (p != pend) {
  ------------------
  |  Branch (291:12): [True: 166k, False: 69.1k]
  ------------------
  292|   399k|      while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (292:14): [True: 312k, False: 86.8k]
  |  Branch (292:47): [True: 235k, False: 77.2k]
  |  Branch (292:72): [True: 233k, False: 2.33k]
  ------------------
  293|   233k|        parse_eight_digits(p, value, counter, digits);
  294|   233k|      }
  295|   693k|      while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (295:14): [True: 598k, False: 95.1k]
  |  Branch (295:32): [True: 530k, False: 67.3k]
  |  Branch (295:45): [True: 526k, False: 3.85k]
  ------------------
  296|   526k|        parse_one_digit(p, value, counter, digits);
  297|   526k|      }
  298|   166k|      if (digits == max_digits) {
  ------------------
  |  Branch (298:11): [True: 4.84k, False: 161k]
  ------------------
  299|       |        // add the temporary value, then check if we've truncated any digits
  300|  4.84k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  301|  4.84k|        bool truncated = is_truncated(p, pend);
  302|  4.84k|        if (truncated) {
  ------------------
  |  Branch (302:13): [True: 3.63k, False: 1.21k]
  ------------------
  303|  3.63k|          round_up_bigint(result, digits);
  304|  3.63k|        }
  305|  4.84k|        return;
  306|   161k|      } else {
  307|   161k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  308|   161k|        counter = 0;
  309|   161k|        value = 0;
  310|   161k|      }
  311|   166k|    }
  312|  73.9k|  }
  313|       |
  314|  75.3k|  if (counter != 0) {
  ------------------
  |  Branch (314:7): [True: 0, False: 75.3k]
  ------------------
  315|      0|    add_native(result, limb(powers_of_ten_uint64[counter]), value);
  316|      0|  }
  317|  75.3k|}
_ZN10fast_float10skip_zerosIcEEvRPKT_S3_:
  159|  84.0k|void skip_zeros(UC const * & first, UC const * last) noexcept {
  160|  84.0k|  uint64_t val;
  161|   102k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (161:10): [Folded - Ignored]
  |  Branch (161:39): [True: 53.4k, False: 49.1k]
  ------------------
  162|  53.4k|    ::memcpy(&val, first, sizeof(uint64_t));
  163|  53.4k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (163:9): [True: 34.8k, False: 18.5k]
  ------------------
  164|  34.8k|      break;
  165|  34.8k|    }
  166|  18.5k|    first += int_cmp_len<UC>();
  167|  18.5k|  }
  168|   174k|  while (first != last) {
  ------------------
  |  Branch (168:10): [True: 170k, False: 3.47k]
  ------------------
  169|   170k|    if (*first != UC('0')) {
  ------------------
  |  Branch (169:9): [True: 80.5k, False: 90.0k]
  ------------------
  170|  80.5k|      break;
  171|  80.5k|    }
  172|  90.0k|    first++;
  173|  90.0k|  }
  174|  84.0k|}
_ZN10fast_float18parse_eight_digitsIcEEvRPKT_RmS5_S5_:
  207|   299k|void parse_eight_digits(const UC*& p, limb& value, size_t& counter, size_t& count) noexcept {
  208|   299k|  value = value * 100000000 + parse_eight_digits_unrolled(p);
  209|   299k|  p += 8;
  210|   299k|  counter += 8;
  211|   299k|  count += 8;
  212|   299k|}
_ZN10fast_float15parse_one_digitIcEEvRPKT_RmS5_S5_:
  216|   737k|void parse_one_digit(UC const *& p, limb& value, size_t& counter, size_t& count) noexcept {
  217|   737k|  value = value * 10 + limb(*p - UC('0'));
  218|   737k|  p++;
  219|   737k|  counter++;
  220|   737k|  count++;
  221|   737k|}
_ZN10fast_float10add_nativeERNS_6bigintEmm:
  224|   267k|void add_native(bigint& big, limb power, limb value) noexcept {
  225|   267k|  big.mul(power);
  226|   267k|  big.add(value);
  227|   267k|}
_ZN10fast_float12is_truncatedIcEEbPKT_S3_:
  180|  5.42k|bool is_truncated(UC const * first, UC const * last) noexcept {
  181|       |  // do 8-bit optimizations, can just compare to 8 literal 0s.
  182|  5.42k|  uint64_t val;
  183|  10.1k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (183:10): [Folded - Ignored]
  |  Branch (183:39): [True: 6.49k, False: 3.62k]
  ------------------
  184|  6.49k|    ::memcpy(&val, first, sizeof(uint64_t));
  185|  6.49k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (185:9): [True: 1.80k, False: 4.69k]
  ------------------
  186|  1.80k|      return true;
  187|  1.80k|    }
  188|  4.69k|    first += int_cmp_len<UC>();
  189|  4.69k|  }
  190|  5.27k|  while (first != last) {
  ------------------
  |  Branch (190:10): [True: 3.77k, False: 1.49k]
  ------------------
  191|  3.77k|    if (*first != UC('0')) {
  ------------------
  |  Branch (191:9): [True: 2.12k, False: 1.65k]
  ------------------
  192|  2.12k|      return true;
  193|  2.12k|    }
  194|  1.65k|    ++first;
  195|  1.65k|  }
  196|  1.49k|  return false;
  197|  3.62k|}
_ZN10fast_float12is_truncatedIcEEbNS_4spanIKT_EE:
  200|    271|bool is_truncated(span<const UC> s) noexcept {
  201|    271|  return is_truncated(s.ptr, s.ptr + s.len());
  202|    271|}
_ZN10fast_float15round_up_bigintERNS_6bigintERm:
  230|  3.82k|void round_up_bigint(bigint& big, size_t& count) noexcept {
  231|       |  // need to round-up the digits, but need to avoid rounding
  232|       |  // ....9999 to ...10000, which could cause a false halfway point.
  233|  3.82k|  add_native(big, 10, 1);
  234|  3.82k|  count++;
  235|  3.82k|}
_ZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEi:
  321|    558|adjusted_mantissa positive_digit_comp(bigint& bigmant, int32_t exponent) noexcept {
  322|    558|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  170|    558|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  323|    558|  adjusted_mantissa answer;
  324|    558|  bool truncated;
  325|    558|  answer.mantissa = bigmant.hi64(truncated);
  326|    558|  int bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
  327|    558|  answer.power2 = bigmant.bit_length() - 64 + bias;
  328|       |
  329|    558|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|    558|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    558|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|    558|    });
  333|    558|  });
  334|       |
  335|    558|  return answer;
  336|    558|}
_ZN10fast_float5roundIfZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
   93|    558|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|    558|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|    558|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 558]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|    558|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|    558|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 558]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|    558|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|    558|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 558]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|    558|}
_ZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  329|    558|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|    558|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    558|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|    558|    });
  333|    558|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  123|    558|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|    558|  const uint64_t mask
  125|    558|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 558]
  ------------------
  126|    558|    ? UINT64_MAX
  127|    558|    : (uint64_t(1) << shift) - 1;
  128|    558|  const uint64_t halfway
  129|    558|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 558]
  ------------------
  130|    558|    ? 0
  131|    558|    : uint64_t(1) << (shift - 1);
  132|    558|  uint64_t truncated_bits = am.mantissa & mask;
  133|    558|  bool is_above = truncated_bits > halfway;
  134|    558|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|    558|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 558]
  ------------------
  138|      0|    am.mantissa = 0;
  139|    558|  } else {
  140|    558|    am.mantissa >>= shift;
  141|    558|  }
  142|    558|  am.power2 += shift;
  143|       |
  144|    558|  bool is_odd = (am.mantissa & 1) == 1;
  145|    558|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|    558|}
_ZZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  330|    558|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    558|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  ------------------
  |  Branch (331:14): [True: 74, False: 484]
  |  Branch (331:27): [True: 352, False: 132]
  |  Branch (331:41): [True: 58, False: 294]
  |  Branch (331:56): [True: 60, False: 366]
  |  Branch (331:66): [True: 32, False: 28]
  ------------------
  332|    558|    });
_ZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_i:
  345|  36.2k|adjusted_mantissa negative_digit_comp(bigint& bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  346|  36.2k|  bigint& real_digits = bigmant;
  347|  36.2k|  int32_t real_exp = exponent;
  348|       |
  349|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  350|  36.2k|  adjusted_mantissa am_b = am;
  351|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with -Wnoexcept-type.
  352|  36.2k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
  353|  36.2k|  T b;
  354|  36.2k|  to_float(false, am_b, b);
  355|  36.2k|  adjusted_mantissa theor = to_extended_halfway(b);
  356|  36.2k|  bigint theor_digits(theor.mantissa);
  357|  36.2k|  int32_t theor_exp = theor.power2;
  358|       |
  359|       |  // scale real digits and theor digits to be same power.
  360|  36.2k|  int32_t pow2_exp = theor_exp - real_exp;
  361|  36.2k|  uint32_t pow5_exp = uint32_t(-real_exp);
  362|  36.2k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (362:7): [True: 36.2k, False: 0]
  ------------------
  363|  36.2k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  170|  36.2k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  364|  36.2k|  }
  365|  36.2k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (365:7): [True: 36.2k, False: 0]
  ------------------
  366|  36.2k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  170|  36.2k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  367|  36.2k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (367:14): [True: 0, False: 0]
  ------------------
  368|      0|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  170|      0|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  369|      0|  }
  370|       |
  371|       |  // compare digits, and use it to director rounding
  372|  36.2k|  int ord = real_digits.compare(theor_digits);
  373|  36.2k|  adjusted_mantissa answer = am;
  374|  36.2k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  36.2k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  36.2k|      (void)_;  // not needed, since we've done our comparison
  377|  36.2k|      (void)__; // not needed, since we've done our comparison
  378|  36.2k|      if (ord > 0) {
  379|  36.2k|        return true;
  380|  36.2k|      } else if (ord < 0) {
  381|  36.2k|        return false;
  382|  36.2k|      } else {
  383|  36.2k|        return is_odd;
  384|  36.2k|      }
  385|  36.2k|    });
  386|  36.2k|  });
  387|       |
  388|  36.2k|  return answer;
  389|  36.2k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
   93|  36.2k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  36.2k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  36.2k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 36.2k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  36.2k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  36.2k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 36.2k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  36.2k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  36.2k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 36.2k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  36.2k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  352|  36.2k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float10round_downERNS_17adjusted_mantissaEi:
  149|  73.7k|void round_down(adjusted_mantissa& am, int32_t shift) noexcept {
  150|  73.7k|  if (shift == 64) {
  ------------------
  |  Branch (150:7): [True: 0, False: 73.7k]
  ------------------
  151|      0|    am.mantissa = 0;
  152|  73.7k|  } else {
  153|  73.7k|    am.mantissa >>= shift;
  154|  73.7k|  }
  155|  73.7k|  am.power2 += shift;
  156|  73.7k|}
_ZN10fast_float19to_extended_halfwayIfEENS_17adjusted_mantissaET_:
   82|  36.2k|adjusted_mantissa to_extended_halfway(T value) noexcept {
   83|  36.2k|  adjusted_mantissa am = to_extended(value);
   84|  36.2k|  am.mantissa <<= 1;
   85|  36.2k|  am.mantissa += 1;
   86|  36.2k|  am.power2 -= 1;
   87|  36.2k|  return am;
   88|  36.2k|}
_ZN10fast_float11to_extendedIfEENS_17adjusted_mantissaET_:
   49|  36.2k|adjusted_mantissa to_extended(T value) noexcept {
   50|  36.2k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   51|  36.2k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   52|  36.2k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   53|  36.2k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   54|       |
   55|  36.2k|  adjusted_mantissa am;
   56|  36.2k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
   57|  36.2k|  equiv_uint bits;
   58|       |#if FASTFLOAT_HAS_BIT_CAST
   59|       |  bits = std::bit_cast<equiv_uint>(value);
   60|       |#else
   61|  36.2k|  ::memcpy(&bits, &value, sizeof(T));
   62|  36.2k|#endif
   63|  36.2k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (63:7): [True: 0, False: 36.2k]
  ------------------
   64|       |    // denormal
   65|      0|    am.power2 = 1 - bias;
   66|      0|    am.mantissa = bits & mantissa_mask;
   67|  36.2k|  } else {
   68|       |    // normal
   69|  36.2k|    am.power2 = int32_t((bits & exponent_mask) >> binary_format<T>::mantissa_explicit_bits());
   70|  36.2k|    am.power2 -= bias;
   71|  36.2k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   72|  36.2k|  }
   73|       |
   74|  36.2k|  return am;
   75|  36.2k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
   93|  36.2k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  36.2k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  36.2k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 36.2k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  36.2k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  36.2k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 36.2k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  36.2k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  36.2k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 36.2k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  36.2k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  374|  36.2k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  36.2k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  36.2k|      (void)_;  // not needed, since we've done our comparison
  377|  36.2k|      (void)__; // not needed, since we've done our comparison
  378|  36.2k|      if (ord > 0) {
  379|  36.2k|        return true;
  380|  36.2k|      } else if (ord < 0) {
  381|  36.2k|        return false;
  382|  36.2k|      } else {
  383|  36.2k|        return is_odd;
  384|  36.2k|      }
  385|  36.2k|    });
  386|  36.2k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  123|  36.2k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  36.2k|  const uint64_t mask
  125|  36.2k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 36.2k]
  ------------------
  126|  36.2k|    ? UINT64_MAX
  127|  36.2k|    : (uint64_t(1) << shift) - 1;
  128|  36.2k|  const uint64_t halfway
  129|  36.2k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 36.2k]
  ------------------
  130|  36.2k|    ? 0
  131|  36.2k|    : uint64_t(1) << (shift - 1);
  132|  36.2k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  36.2k|  bool is_above = truncated_bits > halfway;
  134|  36.2k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  36.2k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 36.2k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  36.2k|  } else {
  140|  36.2k|    am.mantissa >>= shift;
  141|  36.2k|  }
  142|  36.2k|  am.power2 += shift;
  143|       |
  144|  36.2k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  36.2k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  36.2k|}
_ZZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  375|  36.2k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  36.2k|      (void)_;  // not needed, since we've done our comparison
  377|  36.2k|      (void)__; // not needed, since we've done our comparison
  378|  36.2k|      if (ord > 0) {
  ------------------
  |  Branch (378:11): [True: 210, False: 36.0k]
  ------------------
  379|    210|        return true;
  380|  36.0k|      } else if (ord < 0) {
  ------------------
  |  Branch (380:18): [True: 31.8k, False: 4.21k]
  ------------------
  381|  31.8k|        return false;
  382|  31.8k|      } else {
  383|  4.21k|        return is_odd;
  384|  4.21k|      }
  385|  36.2k|    });
_ZN10fast_float19scientific_exponentIDiEEiRNS_22parsed_number_string_tIT_EE:
   28|     72|int32_t scientific_exponent(parsed_number_string_t<UC> & num) noexcept {
   29|     72|  uint64_t mantissa = num.mantissa;
   30|     72|  int32_t exponent = int32_t(num.exponent);
   31|    360|  while (mantissa >= 10000) {
  ------------------
  |  Branch (31:10): [True: 288, False: 72]
  ------------------
   32|    288|    mantissa /= 10000;
   33|    288|    exponent += 4;
   34|    288|  }
   35|    144|  while (mantissa >= 100) {
  ------------------
  |  Branch (35:10): [True: 72, False: 72]
  ------------------
   36|     72|    mantissa /= 100;
   37|     72|    exponent += 2;
   38|     72|  }
   39|     72|  while (mantissa >= 10) {
  ------------------
  |  Branch (39:10): [True: 0, False: 72]
  ------------------
   40|      0|    mantissa /= 10;
   41|      0|    exponent += 1;
   42|      0|  }
   43|     72|  return exponent;
   44|     72|}
_ZN10fast_float14parse_mantissaIDiEEvRNS_6bigintERNS_22parsed_number_string_tIT_EEmRm:
  240|     72|void parse_mantissa(bigint& result, parsed_number_string_t<UC>& num, size_t max_digits, size_t& digits) noexcept {
  241|       |  // try to minimize the number of big integer and scalar multiplication.
  242|       |  // therefore, try to parse 8 digits at a time, and multiply by the largest
  243|       |  // scalar value (9 or 19 digits) for each step.
  244|     72|  size_t counter = 0;
  245|     72|  digits = 0;
  246|     72|  limb value = 0;
  247|     72|#ifdef FASTFLOAT_64BIT_LIMB
  248|     72|  size_t step = 19;
  249|       |#else
  250|       |  size_t step = 9;
  251|       |#endif
  252|       |
  253|       |  // process all integer digits.
  254|     72|  UC const * p = num.integer.ptr;
  255|     72|  UC const * pend = p + num.integer.len();
  256|     72|  skip_zeros(p, pend);
  257|       |  // process all digits, in increments of step per loop
  258|    144|  while (p != pend) {
  ------------------
  |  Branch (258:10): [True: 72, False: 72]
  ------------------
  259|     72|    while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (259:12): [True: 0, False: 72]
  |  Branch (259:45): [True: 0, False: 0]
  |  Branch (259:70): [True: 0, False: 0]
  ------------------
  260|      0|      parse_eight_digits(p, value, counter, digits);
  261|      0|    }
  262|    576|    while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (262:12): [True: 576, False: 0]
  |  Branch (262:30): [True: 504, False: 72]
  |  Branch (262:43): [True: 504, False: 0]
  ------------------
  263|    504|      parse_one_digit(p, value, counter, digits);
  264|    504|    }
  265|     72|    if (digits == max_digits) {
  ------------------
  |  Branch (265:9): [True: 0, False: 72]
  ------------------
  266|       |      // add the temporary value, then check if we've truncated any digits
  267|      0|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  268|      0|      bool truncated = is_truncated(p, pend);
  269|      0|      if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (269:11): [True: 0, False: 0]
  ------------------
  270|      0|        truncated |= is_truncated(num.fraction);
  271|      0|      }
  272|      0|      if (truncated) {
  ------------------
  |  Branch (272:11): [True: 0, False: 0]
  ------------------
  273|      0|        round_up_bigint(result, digits);
  274|      0|      }
  275|      0|      return;
  276|     72|    } else {
  277|     72|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  278|     72|      counter = 0;
  279|     72|      value = 0;
  280|     72|    }
  281|     72|  }
  282|       |
  283|       |  // add our fraction digits, if they're available.
  284|     72|  if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (284:7): [True: 72, False: 0]
  ------------------
  285|     72|    p = num.fraction.ptr;
  286|     72|    pend = p + num.fraction.len();
  287|     72|    if (digits == 0) {
  ------------------
  |  Branch (287:9): [True: 0, False: 72]
  ------------------
  288|      0|      skip_zeros(p, pend);
  289|      0|    }
  290|       |    // process all digits, in increments of step per loop
  291|    162|    while (p != pend) {
  ------------------
  |  Branch (291:12): [True: 90, False: 72]
  ------------------
  292|    198|      while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (292:14): [True: 108, False: 90]
  |  Branch (292:47): [True: 108, False: 0]
  |  Branch (292:72): [True: 108, False: 0]
  ------------------
  293|    108|        parse_eight_digits(p, value, counter, digits);
  294|    108|      }
  295|    432|      while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (295:14): [True: 414, False: 18]
  |  Branch (295:32): [True: 342, False: 72]
  |  Branch (295:45): [True: 342, False: 0]
  ------------------
  296|    342|        parse_one_digit(p, value, counter, digits);
  297|    342|      }
  298|     90|      if (digits == max_digits) {
  ------------------
  |  Branch (298:11): [True: 0, False: 90]
  ------------------
  299|       |        // add the temporary value, then check if we've truncated any digits
  300|      0|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  301|      0|        bool truncated = is_truncated(p, pend);
  302|      0|        if (truncated) {
  ------------------
  |  Branch (302:13): [True: 0, False: 0]
  ------------------
  303|      0|          round_up_bigint(result, digits);
  304|      0|        }
  305|      0|        return;
  306|     90|      } else {
  307|     90|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  308|     90|        counter = 0;
  309|     90|        value = 0;
  310|     90|      }
  311|     90|    }
  312|     72|  }
  313|       |
  314|     72|  if (counter != 0) {
  ------------------
  |  Branch (314:7): [True: 0, False: 72]
  ------------------
  315|      0|    add_native(result, limb(powers_of_ten_uint64[counter]), value);
  316|      0|  }
  317|     72|}
_ZN10fast_float10skip_zerosIDiEEvRPKT_S3_:
  159|     72|void skip_zeros(UC const * & first, UC const * last) noexcept {
  160|     72|  uint64_t val;
  161|     72|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (161:10): [Folded - Ignored]
  |  Branch (161:39): [True: 72, False: 0]
  ------------------
  162|     72|    ::memcpy(&val, first, sizeof(uint64_t));
  163|     72|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (163:9): [True: 72, False: 0]
  ------------------
  164|     72|      break;
  165|     72|    }
  166|      0|    first += int_cmp_len<UC>();
  167|      0|  }
  168|     72|  while (first != last) {
  ------------------
  |  Branch (168:10): [True: 72, False: 0]
  ------------------
  169|     72|    if (*first != UC('0')) {
  ------------------
  |  Branch (169:9): [True: 72, False: 0]
  ------------------
  170|     72|      break;
  171|     72|    }
  172|      0|    first++;
  173|      0|  }
  174|     72|}
_ZN10fast_float18parse_eight_digitsIDiEEvRPKT_RmS5_S5_:
  207|    108|void parse_eight_digits(const UC*& p, limb& value, size_t& counter, size_t& count) noexcept {
  208|    108|  value = value * 100000000 + parse_eight_digits_unrolled(p);
  209|    108|  p += 8;
  210|    108|  counter += 8;
  211|    108|  count += 8;
  212|    108|}
_ZN10fast_float15parse_one_digitIDiEEvRPKT_RmS5_S5_:
  216|    846|void parse_one_digit(UC const *& p, limb& value, size_t& counter, size_t& count) noexcept {
  217|    846|  value = value * 10 + limb(*p - UC('0'));
  218|    846|  p++;
  219|    846|  counter++;
  220|    846|  count++;
  221|    846|}
_ZN10fast_float10digit_compIdcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  43.7k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  43.7k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  43.7k|  int32_t sci_exp = scientific_exponent(num);
  411|  43.7k|  size_t max_digits = binary_format<T>::max_digits();
  412|  43.7k|  size_t digits = 0;
  413|  43.7k|  bigint bigmant;
  414|  43.7k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  43.7k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  43.7k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 6.25k, False: 37.4k]
  ------------------
  418|  6.25k|    return positive_digit_comp<T>(bigmant, exponent);
  419|  37.4k|  } else {
  420|  37.4k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  37.4k|  }
  422|  43.7k|}
_ZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEi:
  321|  6.25k|adjusted_mantissa positive_digit_comp(bigint& bigmant, int32_t exponent) noexcept {
  322|  6.25k|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  170|  6.25k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  323|  6.25k|  adjusted_mantissa answer;
  324|  6.25k|  bool truncated;
  325|  6.25k|  answer.mantissa = bigmant.hi64(truncated);
  326|  6.25k|  int bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
  327|  6.25k|  answer.power2 = bigmant.bit_length() - 64 + bias;
  328|       |
  329|  6.25k|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|  6.25k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  6.25k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|  6.25k|    });
  333|  6.25k|  });
  334|       |
  335|  6.25k|  return answer;
  336|  6.25k|}
_ZN10fast_float5roundIdZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
   93|  6.25k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  6.25k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  6.25k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 6.25k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  6.25k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  6.25k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 590, False: 5.66k]
  ------------------
  109|    590|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|    590|    am.power2++;
  111|    590|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  6.25k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  6.25k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 6.25k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  6.25k|}
_ZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  329|  6.25k|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|  6.25k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  6.25k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|  6.25k|    });
  333|  6.25k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  123|  6.25k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  6.25k|  const uint64_t mask
  125|  6.25k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 6.25k]
  ------------------
  126|  6.25k|    ? UINT64_MAX
  127|  6.25k|    : (uint64_t(1) << shift) - 1;
  128|  6.25k|  const uint64_t halfway
  129|  6.25k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 6.25k]
  ------------------
  130|  6.25k|    ? 0
  131|  6.25k|    : uint64_t(1) << (shift - 1);
  132|  6.25k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  6.25k|  bool is_above = truncated_bits > halfway;
  134|  6.25k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  6.25k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 6.25k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  6.25k|  } else {
  140|  6.25k|    am.mantissa >>= shift;
  141|  6.25k|  }
  142|  6.25k|  am.power2 += shift;
  143|       |
  144|  6.25k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  6.25k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  6.25k|}
_ZZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  330|  6.25k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  6.25k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  ------------------
  |  Branch (331:14): [True: 698, False: 5.56k]
  |  Branch (331:27): [True: 4.71k, False: 850]
  |  Branch (331:41): [True: 1.02k, False: 3.68k]
  |  Branch (331:56): [True: 487, False: 4.04k]
  |  Branch (331:66): [True: 60, False: 427]
  ------------------
  332|  6.25k|    });
_ZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_i:
  345|  37.5k|adjusted_mantissa negative_digit_comp(bigint& bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  346|  37.5k|  bigint& real_digits = bigmant;
  347|  37.5k|  int32_t real_exp = exponent;
  348|       |
  349|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  350|  37.5k|  adjusted_mantissa am_b = am;
  351|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with -Wnoexcept-type.
  352|  37.5k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
  353|  37.5k|  T b;
  354|  37.5k|  to_float(false, am_b, b);
  355|  37.5k|  adjusted_mantissa theor = to_extended_halfway(b);
  356|  37.5k|  bigint theor_digits(theor.mantissa);
  357|  37.5k|  int32_t theor_exp = theor.power2;
  358|       |
  359|       |  // scale real digits and theor digits to be same power.
  360|  37.5k|  int32_t pow2_exp = theor_exp - real_exp;
  361|  37.5k|  uint32_t pow5_exp = uint32_t(-real_exp);
  362|  37.5k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (362:7): [True: 37.5k, False: 0]
  ------------------
  363|  37.5k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  170|  37.5k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  364|  37.5k|  }
  365|  37.5k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (365:7): [True: 3.04k, False: 34.5k]
  ------------------
  366|  3.04k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  170|  3.04k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  367|  34.5k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (367:14): [True: 34.4k, False: 102]
  ------------------
  368|  34.4k|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  170|  34.4k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  369|  34.4k|  }
  370|       |
  371|       |  // compare digits, and use it to director rounding
  372|  37.5k|  int ord = real_digits.compare(theor_digits);
  373|  37.5k|  adjusted_mantissa answer = am;
  374|  37.5k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  37.5k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  37.5k|      (void)_;  // not needed, since we've done our comparison
  377|  37.5k|      (void)__; // not needed, since we've done our comparison
  378|  37.5k|      if (ord > 0) {
  379|  37.5k|        return true;
  380|  37.5k|      } else if (ord < 0) {
  381|  37.5k|        return false;
  382|  37.5k|      } else {
  383|  37.5k|        return is_odd;
  384|  37.5k|      }
  385|  37.5k|    });
  386|  37.5k|  });
  387|       |
  388|  37.5k|  return answer;
  389|  37.5k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
   93|  37.5k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  37.5k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  37.5k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 118, False: 37.4k]
  ------------------
   96|       |    // have a denormal float
   97|    118|    int32_t shift = -am.power2 + 1;
   98|    118|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|    118|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 118, False: 0]
  ------------------
  101|    118|    return;
  102|    118|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  37.4k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  37.4k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 37.4k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  37.4k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  37.4k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 37.4k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  37.4k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  352|  37.5k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float19to_extended_halfwayIdEENS_17adjusted_mantissaET_:
   82|  37.5k|adjusted_mantissa to_extended_halfway(T value) noexcept {
   83|  37.5k|  adjusted_mantissa am = to_extended(value);
   84|  37.5k|  am.mantissa <<= 1;
   85|  37.5k|  am.mantissa += 1;
   86|  37.5k|  am.power2 -= 1;
   87|  37.5k|  return am;
   88|  37.5k|}
_ZN10fast_float11to_extendedIdEENS_17adjusted_mantissaET_:
   49|  37.5k|adjusted_mantissa to_extended(T value) noexcept {
   50|  37.5k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   51|  37.5k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   52|  37.5k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   53|  37.5k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   54|       |
   55|  37.5k|  adjusted_mantissa am;
   56|  37.5k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
   57|  37.5k|  equiv_uint bits;
   58|       |#if FASTFLOAT_HAS_BIT_CAST
   59|       |  bits = std::bit_cast<equiv_uint>(value);
   60|       |#else
   61|  37.5k|  ::memcpy(&bits, &value, sizeof(T));
   62|  37.5k|#endif
   63|  37.5k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (63:7): [True: 118, False: 37.4k]
  ------------------
   64|       |    // denormal
   65|    118|    am.power2 = 1 - bias;
   66|    118|    am.mantissa = bits & mantissa_mask;
   67|  37.4k|  } else {
   68|       |    // normal
   69|  37.4k|    am.power2 = int32_t((bits & exponent_mask) >> binary_format<T>::mantissa_explicit_bits());
   70|  37.4k|    am.power2 -= bias;
   71|  37.4k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   72|  37.4k|  }
   73|       |
   74|  37.5k|  return am;
   75|  37.5k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
   93|  37.5k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  37.5k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  37.5k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 118, False: 37.4k]
  ------------------
   96|       |    // have a denormal float
   97|    118|    int32_t shift = -am.power2 + 1;
   98|    118|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|    118|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 118, False: 0]
  ------------------
  101|    118|    return;
  102|    118|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  37.4k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  37.4k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 90, False: 37.3k]
  ------------------
  109|     90|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|     90|    am.power2++;
  111|     90|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  37.4k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  37.4k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 37.4k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  37.4k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  374|  37.5k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  37.5k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  37.5k|      (void)_;  // not needed, since we've done our comparison
  377|  37.5k|      (void)__; // not needed, since we've done our comparison
  378|  37.5k|      if (ord > 0) {
  379|  37.5k|        return true;
  380|  37.5k|      } else if (ord < 0) {
  381|  37.5k|        return false;
  382|  37.5k|      } else {
  383|  37.5k|        return is_odd;
  384|  37.5k|      }
  385|  37.5k|    });
  386|  37.5k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  123|  37.5k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  37.5k|  const uint64_t mask
  125|  37.5k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 37.5k]
  ------------------
  126|  37.5k|    ? UINT64_MAX
  127|  37.5k|    : (uint64_t(1) << shift) - 1;
  128|  37.5k|  const uint64_t halfway
  129|  37.5k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 37.5k]
  ------------------
  130|  37.5k|    ? 0
  131|  37.5k|    : uint64_t(1) << (shift - 1);
  132|  37.5k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  37.5k|  bool is_above = truncated_bits > halfway;
  134|  37.5k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  37.5k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 37.5k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  37.5k|  } else {
  140|  37.5k|    am.mantissa >>= shift;
  141|  37.5k|  }
  142|  37.5k|  am.power2 += shift;
  143|       |
  144|  37.5k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  37.5k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  37.5k|}
_ZZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  375|  37.5k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  37.5k|      (void)_;  // not needed, since we've done our comparison
  377|  37.5k|      (void)__; // not needed, since we've done our comparison
  378|  37.5k|      if (ord > 0) {
  ------------------
  |  Branch (378:11): [True: 15.4k, False: 22.1k]
  ------------------
  379|  15.4k|        return true;
  380|  22.1k|      } else if (ord < 0) {
  ------------------
  |  Branch (380:18): [True: 21.6k, False: 518]
  ------------------
  381|  21.6k|        return false;
  382|  21.6k|      } else {
  383|    518|        return is_odd;
  384|    518|      }
  385|  37.5k|    });
_ZN10fast_float10digit_compIdDiEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|     72|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|     72|  am.power2 -= invalid_am_bias;
  409|       |
  410|     72|  int32_t sci_exp = scientific_exponent(num);
  411|     72|  size_t max_digits = binary_format<T>::max_digits();
  412|     72|  size_t digits = 0;
  413|     72|  bigint bigmant;
  414|     72|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|     72|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|     72|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 0, False: 72]
  ------------------
  418|      0|    return positive_digit_comp<T>(bigmant, exponent);
  419|     72|  } else {
  420|     72|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|     72|  }
  422|     72|}

_ZN10fast_float4spanIKcEC2Ev:
  235|  2.97M|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKcEC2EPS1_m:
  234|  1.77M|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanIKcE3lenEv:
  237|   578k|  constexpr size_t len() const noexcept {
  238|   578k|    return length;
  239|   578k|  }
_ZN10fast_float13binary_formatIfE22min_exponent_fast_pathEv:
  464|  1.01M|template <> inline constexpr int binary_format<float>::min_exponent_fast_path() {
  465|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  466|       |  return 0;
  467|       |#else
  468|  1.01M|  return -10;
  469|  1.01M|#endif
  470|  1.01M|}
_ZN10fast_float13binary_formatIfE22max_exponent_fast_pathEv:
  515|   953k|template <> inline constexpr int binary_format<float>::max_exponent_fast_path() {
  516|   953k|  return 10;
  517|   953k|}
_ZN10fast_float13binary_formatIfE22max_mantissa_fast_pathEv:
  529|   835k|template <> inline constexpr uint64_t binary_format<float>::max_mantissa_fast_path() {
  530|   835k|  return uint64_t(2) << mantissa_explicit_bits();
  531|   835k|}
_ZN10fast_float13binary_formatIfE22mantissa_explicit_bitsEv:
  475|  2.45M|template <> inline constexpr int binary_format<float>::mantissa_explicit_bits() {
  476|  2.45M|  return 23;
  477|  2.45M|}
_ZN10fast_float13binary_formatIfE18exact_power_of_tenEl:
  546|   786k|inline constexpr float binary_format<float>::exact_power_of_ten(int64_t power) {
  547|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  548|   786k|  return (void)powers_of_ten[0], powers_of_ten[power];
  549|   786k|}
_ZN10fast_float17adjusted_mantissaC2Ev:
  347|   826k|  adjusted_mantissa() = default;
_ZN10fast_float13binary_formatIfE21smallest_power_of_tenEv:
  566|   343k|inline constexpr int binary_format<float>::smallest_power_of_ten() {
  567|   343k|  return -65;
  568|   343k|}
_ZN10fast_float13binary_formatIfE20largest_power_of_tenEv:
  557|   341k|inline constexpr int binary_format<float>::largest_power_of_ten() {
  558|   341k|  return 38;
  559|   341k|}
_ZN10fast_float14leading_zeroesEm:
  268|   730k|int leading_zeroes(uint64_t input_num) {
  269|   730k|  assert(input_num > 0);
  270|   730k|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (270:7): [Folded - Ignored]
  ------------------
  271|      0|    return leading_zeroes_generic(input_num);
  272|      0|  }
  273|       |#ifdef FASTFLOAT_VISUAL_STUDIO
  274|       |  #if defined(_M_X64) || defined(_M_ARM64)
  275|       |  unsigned long leading_zero = 0;
  276|       |  // Search the mask data from most significant bit (MSB)
  277|       |  // to least significant bit (LSB) for a set bit (1).
  278|       |  _BitScanReverse64(&leading_zero, input_num);
  279|       |  return (int)(63 - leading_zero);
  280|       |  #else
  281|       |  return leading_zeroes_generic(input_num);
  282|       |  #endif
  283|       |#else
  284|   730k|  return __builtin_clzll(input_num);
  285|   730k|#endif
  286|   730k|}
_ZN10fast_float19full_multiplicationEmm:
  320|   910k|value128 full_multiplication(uint64_t a, uint64_t b) {
  321|   910k|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (321:7): [Folded - Ignored]
  ------------------
  322|      0|    value128 answer;
  323|      0|    answer.low = umul128_generic(a, b, &answer.high);
  324|      0|    return answer;
  325|      0|  }
  326|   910k|  value128 answer;
  327|       |#if defined(_M_ARM64) && !defined(__MINGW32__)
  328|       |  // ARM64 has native support for 64-bit multiplications, no need to emulate
  329|       |  // But MinGW on ARM64 doesn't have native support for 64-bit multiplications
  330|       |  answer.high = __umulh(a, b);
  331|       |  answer.low = a * b;
  332|       |#elif defined(FASTFLOAT_32BIT) || (defined(_WIN64) && !defined(__clang__))
  333|       |  answer.low = _umul128(a, b, &answer.high); // _umul128 not available on ARM64
  334|       |#elif defined(FASTFLOAT_64BIT) && defined(__SIZEOF_INT128__)
  335|       |  __uint128_t r = ((__uint128_t)a) * b;
  336|   910k|  answer.low = uint64_t(r);
  337|   910k|  answer.high = uint64_t(r >> 64);
  338|       |#else
  339|       |  answer.low = umul128_generic(a, b, &answer.high);
  340|       |#endif
  341|   910k|  return answer;
  342|   910k|}
_ZN10fast_float8value128C2Ev:
  251|   910k|  constexpr value128() : low(0), high(0) {}
_ZN10fast_float13binary_formatIfE16minimum_exponentEv:
  498|   404k|template <> inline constexpr int binary_format<float>::minimum_exponent() {
  499|   404k|  return -127;
  500|   404k|}
_ZN10fast_float13binary_formatIfE26min_exponent_round_to_evenEv:
  491|   123k|template <> inline constexpr int binary_format<float>::min_exponent_round_to_even() {
  492|   123k|  return -17;
  493|   123k|}
_ZN10fast_float13binary_formatIfE26max_exponent_round_to_evenEv:
  483|   120k|template <> inline constexpr int binary_format<float>::max_exponent_round_to_even() {
  484|   120k|  return 10;
  485|   120k|}
_ZNK10fast_float17adjusted_mantissaneERKS0_:
  351|   253k|  constexpr bool operator!=(const adjusted_mantissa &o) const {
  352|   253k|    return mantissa != o.mantissa || power2 != o.power2;
  ------------------
  |  Branch (352:12): [True: 80.6k, False: 172k]
  |  Branch (352:38): [True: 0, False: 172k]
  ------------------
  353|   253k|  }
_ZN10fast_float13binary_formatIfE10max_digitsEv:
  573|  36.7k|template <> inline constexpr size_t binary_format<float>::max_digits() {
  574|  36.7k|  return 114;
  575|  36.7k|}
impl.cpp:_ZN10fast_floatL11int_cmp_lenIcEEiv:
  649|   135k|{
  650|   135k|    return sizeof(uint64_t) / sizeof(UC);
  651|   135k|}
impl.cpp:_ZN10fast_floatL13int_cmp_zerosIcEEmv:
  643|  59.9k|{
  644|  59.9k|    static_assert((sizeof(UC) == 1) || (sizeof(UC) == 2) || (sizeof(UC) == 4), "Unsupported character size");
  645|  59.9k|    return (sizeof(UC) == 1) ? 0x3030303030303030 : (sizeof(UC) == 2) ? (uint64_t(UC('0')) << 48 | uint64_t(UC('0')) << 32 | uint64_t(UC('0')) << 16 | UC('0')) : (uint64_t(UC('0')) << 32 | UC('0'));
  ------------------
  |  Branch (645:12): [Folded - Ignored]
  |  Branch (645:53): [Folded - Ignored]
  ------------------
  646|  59.9k|}
_ZN10fast_float4spanImEC2EPKmm:
  234|   103k|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanImE3lenEv:
  237|   244k|  constexpr size_t len() const noexcept {
  238|   244k|    return length;
  239|   244k|  }
_ZNK10fast_float4spanImEixEm:
  241|   132k|  FASTFLOAT_CONSTEXPR14 const T& operator[](size_t index) const noexcept {
  242|   132k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   132k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  243|   132k|    return ptr[index];
  244|   132k|  }
_ZN10fast_float8to_floatIfEEvbNS_17adjusted_mantissaERT_:
  606|   260k|void to_float(bool negative, adjusted_mantissa am, T &value) {
  607|   260k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  608|   260k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  609|   260k|  word |= fastfloat_uint(am.power2) << binary_format<T>::mantissa_explicit_bits();
  610|   260k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  611|       |#if FASTFLOAT_HAS_BIT_CAST
  612|       |  value = std::bit_cast<T>(word);
  613|       |#else
  614|   260k|  ::memcpy(&value, &word, sizeof(T));
  615|   260k|#endif
  616|   260k|}
_ZN10fast_float13binary_formatIfE10sign_indexEv:
  510|   260k|template <> inline constexpr int binary_format<float>::sign_index() { return 31; }
_ZN10fast_float13binary_formatIfE14infinite_powerEv:
  505|   635k|template <> inline constexpr int binary_format<float>::infinite_power() {
  506|   635k|  return 0xFF;
  507|   635k|}
_ZN10fast_float15parse_options_tIcEC2ENS_12chars_formatEc:
   46|  1.48M|    : format(fmt), decimal_point(dot) {}
_ZN10fast_float4spanIKDiEC2Ev:
  235|  1.26M|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKDiEC2EPS1_m:
  234|   634k|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanIKDiE3lenEv:
  237|  2.72k|  constexpr size_t len() const noexcept {
  238|  2.72k|    return length;
  239|  2.72k|  }
impl.cpp:_ZN10fast_floatL11int_cmp_lenIDiEEiv:
  649|     72|{
  650|     72|    return sizeof(uint64_t) / sizeof(UC);
  651|     72|}
impl.cpp:_ZN10fast_floatL13int_cmp_zerosIDiEEmv:
  643|     72|{
  644|     72|    static_assert((sizeof(UC) == 1) || (sizeof(UC) == 2) || (sizeof(UC) == 4), "Unsupported character size");
  645|     72|    return (sizeof(UC) == 1) ? 0x3030303030303030 : (sizeof(UC) == 2) ? (uint64_t(UC('0')) << 48 | uint64_t(UC('0')) << 32 | uint64_t(UC('0')) << 16 | UC('0')) : (uint64_t(UC('0')) << 32 | UC('0'));
  ------------------
  |  Branch (645:12): [Folded - Ignored]
  |  Branch (645:53): [Folded - Ignored]
  ------------------
  646|     72|}
_ZN10fast_float15parse_options_tIDiEC2ENS_12chars_formatEDi:
   46|   630k|    : format(fmt), decimal_point(dot) {}
_ZN10fast_float13binary_formatIdE22min_exponent_fast_pathEv:
  456|  1.11M|template <> inline constexpr int binary_format<double>::min_exponent_fast_path() {
  457|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  458|       |  return 0;
  459|       |#else
  460|  1.11M|  return -22;
  461|  1.11M|#endif
  462|  1.11M|}
_ZN10fast_float13binary_formatIdE22max_exponent_fast_pathEv:
  512|  1.09M|template <> inline constexpr int binary_format<double>::max_exponent_fast_path() {
  513|  1.09M|  return 22;
  514|  1.09M|}
_ZN10fast_float13binary_formatIdE22max_mantissa_fast_pathEv:
  519|   933k|template <> inline constexpr uint64_t binary_format<double>::max_mantissa_fast_path() {
  520|   933k|  return uint64_t(2) << mantissa_explicit_bits();
  521|   933k|}
_ZN10fast_float13binary_formatIdE22mantissa_explicit_bitsEv:
  472|  2.47M|template <> inline constexpr int binary_format<double>::mantissa_explicit_bits() {
  473|  2.47M|  return 52;
  474|  2.47M|}
_ZN10fast_float13binary_formatIdE18exact_power_of_tenEl:
  541|   922k|inline constexpr double binary_format<double>::exact_power_of_ten(int64_t power) {
  542|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  543|   922k|  return (void)powers_of_ten[0], powers_of_ten[power];
  544|   922k|}
_ZN10fast_float13binary_formatIdE21smallest_power_of_tenEv:
  562|   311k|inline constexpr int binary_format<double>::smallest_power_of_ten() {
  563|   311k|  return -342;
  564|   311k|}
_ZN10fast_float13binary_formatIdE20largest_power_of_tenEv:
  553|   310k|inline constexpr int binary_format<double>::largest_power_of_ten() {
  554|   310k|  return 308;
  555|   310k|}
_ZN10fast_float13binary_formatIdE16minimum_exponentEv:
  495|   393k|template <> inline constexpr int binary_format<double>::minimum_exponent() {
  496|   393k|  return -1023;
  497|   393k|}
_ZN10fast_float13binary_formatIdE26min_exponent_round_to_evenEv:
  487|  98.2k|template <> inline constexpr int binary_format<double>::min_exponent_round_to_even() {
  488|  98.2k|  return -4;
  489|  98.2k|}
_ZN10fast_float13binary_formatIdE26max_exponent_round_to_evenEv:
  479|  56.8k|template <> inline constexpr int binary_format<double>::max_exponent_round_to_even() {
  480|  56.8k|  return 23;
  481|  56.8k|}
_ZN10fast_float13binary_formatIdE10max_digitsEv:
  570|  43.8k|template <> inline constexpr size_t binary_format<double>::max_digits() {
  571|  43.8k|  return 769;
  572|  43.8k|}
_ZN10fast_float8to_floatIdEEvbNS_17adjusted_mantissaERT_:
  606|   224k|void to_float(bool negative, adjusted_mantissa am, T &value) {
  607|   224k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  608|   224k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  609|   224k|  word |= fastfloat_uint(am.power2) << binary_format<T>::mantissa_explicit_bits();
  610|   224k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  611|       |#if FASTFLOAT_HAS_BIT_CAST
  612|       |  value = std::bit_cast<T>(word);
  613|       |#else
  614|   224k|  ::memcpy(&value, &word, sizeof(T));
  615|   224k|#endif
  616|   224k|}
_ZN10fast_float13binary_formatIdE10sign_indexEv:
  509|   224k|template <> inline constexpr int binary_format<double>::sign_index() { return 63; }
_ZN10fast_float13binary_formatIdE14infinite_powerEv:
  502|   572k|template <> inline constexpr int binary_format<double>::infinite_power() {
  503|   572k|  return 0x7FF;
  504|   572k|}

_ZN10fast_float10from_charsIfciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   728k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   728k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   728k|}
_ZN10fast_float17from_chars_callerIfE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  141|   728k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   728k|    return from_chars_advanced(first, last, value, options);
  143|   728k|  }
_ZN10fast_float19from_chars_advancedIfcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   728k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   728k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   728k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   728k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   728k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 728k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   728k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   728k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 728k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   728k|  answer.ec = std::errc(); // be optimistic
  221|   728k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   728k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 674k, False: 54.4k]
  |  Branch (227:69): [True: 637k, False: 36.8k]
  |  Branch (227:131): [True: 561k, False: 76.2k]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   561k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 561k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   561k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 513k, False: 48.0k]
  ------------------
  239|   513k|        value = T(pns.mantissa);
  240|   513k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 12.3k, False: 500k]
  ------------------
  241|   500k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   513k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 513k]
  ------------------
  243|   513k|        return answer;
  244|   513k|      }
  245|   561k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   561k|  }
  262|   215k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|   215k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 123k, False: 92.0k]
  |  Branch (263:29): [True: 123k, False: 0]
  ------------------
  264|   123k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 36.7k, False: 86.7k]
  ------------------
  265|  36.7k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|  36.7k|    }
  267|   123k|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|   215k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 36.7k, False: 178k]
  ------------------
  271|   215k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|   215k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 210k, False: 4.59k]
  |  Branch (273:29): [True: 24.9k, False: 186k]
  |  Branch (273:49): [True: 1.26k, False: 23.6k]
  |  Branch (273:68): [True: 5.26k, False: 209k]
  ------------------
  274|  6.53k|    answer.ec = std::errc::result_out_of_range;
  275|  6.53k|  }
  276|   215k|  return answer;
  277|   728k|}
_ZN10fast_float6detail17rounds_to_nearestEv:
   74|  1.76M|fastfloat_really_inline bool rounds_to_nearest() noexcept {
   75|       |  // https://lemire.me/blog/2020/06/26/gcc-not-nearest/
   76|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
   77|       |  return false;
   78|       |#endif
   79|       |  // See
   80|       |  // A fast function to check your floating-point rounding mode
   81|       |  // https://lemire.me/blog/2022/11/16/a-fast-function-to-check-your-floating-point-rounding-mode/
   82|       |  //
   83|       |  // This function is meant to be equivalent to :
   84|       |  // prior: #include <cfenv>
   85|       |  //  return fegetround() == FE_TONEAREST;
   86|       |  // However, it is expected to be much faster than the fegetround()
   87|       |  // function call.
   88|       |  //
   89|       |  // The volatile keywoard prevents the compiler from computing the function
   90|       |  // at compile-time.
   91|       |  // There might be other ways to prevent compile-time optimizations (e.g., asm).
   92|       |  // The value does not need to be std::numeric_limits<float>::min(), any small
   93|       |  // value so that 1 + x should round to 1 would do (after accounting for excess
   94|       |  // precision, as in 387 instructions).
   95|  1.76M|  static volatile float fmin = std::numeric_limits<float>::min();
   96|  1.76M|  float fmini = fmin; // we copy it so that it gets loaded at most once.
   97|       |  //
   98|       |  // Explanation:
   99|       |  // Only when fegetround() == FE_TONEAREST do we have that
  100|       |  // fmin + 1.0f == 1.0f - fmin.
  101|       |  //
  102|       |  // FE_UPWARD:
  103|       |  //  fmin + 1.0f > 1
  104|       |  //  1.0f - fmin == 1
  105|       |  //
  106|       |  // FE_DOWNWARD or  FE_TOWARDZERO:
  107|       |  //  fmin + 1.0f == 1
  108|       |  //  1.0f - fmin < 1
  109|       |  //
  110|       |  // Note: This may fail to be accurate if fast-math has been
  111|       |  // enabled, as rounding conventions may not apply.
  112|       |  #ifdef FASTFLOAT_VISUAL_STUDIO
  113|       |  #   pragma warning(push)
  114|       |  //  todo: is there a VS warning?
  115|       |  //  see https://stackoverflow.com/questions/46079446/is-there-a-warning-for-floating-point-equality-checking-in-visual-studio-2013
  116|       |  #elif defined(__clang__)
  117|       |  #   pragma clang diagnostic push
  118|  1.76M|  #   pragma clang diagnostic ignored "-Wfloat-equal"
  119|       |  #elif defined(__GNUC__)
  120|       |  #   pragma GCC diagnostic push
  121|       |  #   pragma GCC diagnostic ignored "-Wfloat-equal"
  122|       |  #endif
  123|  1.76M|  return (fmini + 1.0f == 1.0f - fmini);
  124|       |  #ifdef FASTFLOAT_VISUAL_STUDIO
  125|       |  #   pragma warning(pop)
  126|       |  #elif defined(__clang__)
  127|       |  #   pragma clang diagnostic pop
  128|       |  #elif defined(__GNUC__)
  129|       |  #   pragma GCC diagnostic pop
  130|       |  #endif
  131|  1.76M|}
_ZN10fast_float10from_charsIfDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   281k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   281k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   281k|}
_ZN10fast_float17from_chars_callerIfE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  141|   281k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   281k|    return from_chars_advanced(first, last, value, options);
  143|   281k|  }
_ZN10fast_float19from_chars_advancedIfDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   281k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   281k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   281k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   281k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   281k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 281k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   281k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   281k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 281k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   281k|  answer.ec = std::errc(); // be optimistic
  221|   281k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   281k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 279k, False: 2.34k]
  |  Branch (227:69): [True: 274k, False: 4.99k]
  |  Branch (227:131): [True: 274k, False: 422]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   274k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 274k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   274k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 273k, False: 646]
  ------------------
  239|   273k|        value = T(pns.mantissa);
  240|   273k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 638, False: 272k]
  ------------------
  241|   272k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   273k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 273k]
  ------------------
  243|   273k|        return answer;
  244|   273k|      }
  245|   274k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   274k|  }
  262|  8.40k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|  8.40k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 854, False: 7.54k]
  |  Branch (263:29): [True: 854, False: 0]
  ------------------
  264|    854|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 0, False: 854]
  ------------------
  265|      0|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|      0|    }
  267|    854|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|  8.40k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 0, False: 8.40k]
  ------------------
  271|  8.40k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|  8.40k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 7.69k, False: 708]
  |  Branch (273:29): [True: 5.63k, False: 2.05k]
  |  Branch (273:49): [True: 1.57k, False: 4.06k]
  |  Branch (273:68): [True: 4.06k, False: 2.76k]
  ------------------
  274|  5.63k|    answer.ec = std::errc::result_out_of_range;
  275|  5.63k|  }
  276|  8.40k|  return answer;
  277|   281k|}
_ZN10fast_float10from_charsIdciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   761k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   761k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   761k|}
_ZN10fast_float17from_chars_callerIdE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  141|   761k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   761k|    return from_chars_advanced(first, last, value, options);
  143|   761k|  }
_ZN10fast_float19from_chars_advancedIdcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   761k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   761k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   761k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   761k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   761k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 761k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   761k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   761k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 761k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   761k|  answer.ec = std::errc(); // be optimistic
  221|   761k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   761k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 749k, False: 11.6k]
  |  Branch (227:69): [True: 714k, False: 35.1k]
  |  Branch (227:131): [True: 594k, False: 119k]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   594k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 594k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   594k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 584k, False: 10.3k]
  ------------------
  239|   584k|        value = T(pns.mantissa);
  240|   584k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 36.0k, False: 548k]
  ------------------
  241|   548k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   584k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 584k]
  ------------------
  243|   584k|        return answer;
  244|   584k|      }
  245|   594k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   594k|  }
  262|   176k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|   176k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 128k, False: 48.7k]
  |  Branch (263:29): [True: 128k, False: 0]
  ------------------
  264|   128k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 43.7k, False: 84.4k]
  ------------------
  265|  43.7k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|  43.7k|    }
  267|   128k|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|   176k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 43.7k, False: 133k]
  ------------------
  271|   176k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|   176k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 172k, False: 4.16k]
  |  Branch (273:29): [True: 16.6k, False: 156k]
  |  Branch (273:49): [True: 262, False: 16.3k]
  |  Branch (273:68): [True: 2.77k, False: 173k]
  ------------------
  274|  3.03k|    answer.ec = std::errc::result_out_of_range;
  275|  3.03k|  }
  276|   176k|  return answer;
  277|   761k|}
_ZN10fast_float10from_charsIdDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   348k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   348k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   348k|}
_ZN10fast_float17from_chars_callerIdE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  141|   348k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   348k|    return from_chars_advanced(first, last, value, options);
  143|   348k|  }
_ZN10fast_float19from_chars_advancedIdDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   348k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   348k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   348k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   348k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   348k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 348k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   348k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   348k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 348k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   348k|  answer.ec = std::errc(); // be optimistic
  221|   348k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   348k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 345k, False: 3.39k]
  |  Branch (227:69): [True: 339k, False: 6.18k]
  |  Branch (227:131): [True: 338k, False: 742]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   338k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 338k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   338k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 338k, False: 262]
  ------------------
  239|   338k|        value = T(pns.mantissa);
  240|   338k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 966, False: 337k]
  ------------------
  241|   337k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   338k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 338k]
  ------------------
  243|   338k|        return answer;
  244|   338k|      }
  245|   338k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   338k|  }
  262|  10.5k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|  10.5k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 882, False: 9.69k]
  |  Branch (263:29): [True: 882, False: 0]
  ------------------
  264|    882|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 72, False: 810]
  ------------------
  265|     72|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|     72|    }
  267|    882|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|  10.5k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 72, False: 10.5k]
  ------------------
  271|  10.5k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|  10.5k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 9.76k, False: 820]
  |  Branch (273:29): [True: 2.56k, False: 7.20k]
  |  Branch (273:49): [True: 352, False: 2.20k]
  |  Branch (273:68): [True: 2.20k, False: 8.02k]
  ------------------
  274|  2.56k|    answer.ec = std::errc::result_out_of_range;
  275|  2.56k|  }
  276|  10.5k|  return answer;
  277|   348k|}

_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIccEEDaSG_SQ_:
  859|  5.52M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIwcEEDaSG_SQ_:
  859|  2.64M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  859|  2.64M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3802|  5.15M|{
 3803|  5.15M|    if constexpr (sizeof(U) == 1) {
 3804|  5.15M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3805|       |    }
 3806|       |    else if constexpr (sizeof(U) == 2) {
 3807|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 3808|       |    }
 3809|       |    else {
 3810|       |        // utf-32
 3811|       |        static_assert(sizeof(U) == 4);
 3812|       |        SCN_UNUSED(ch);
 3813|       |        return 1;
 3814|       |    }
 3815|  5.15M|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3766|  5.15M|{
 3767|  5.15M|    static_assert(sizeof(U8) == 1);
 3768|       |
 3769|  5.15M|    SCN_GCC_COMPAT_PUSH
 3770|  5.15M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3771|  5.15M|    constexpr char lengths[] =
 3772|  5.15M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3773|  5.15M|        "\1\1\1\1\1\1\1\1"
 3774|  5.15M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3775|       |                            // byte
 3776|  5.15M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3777|  5.15M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3778|  5.15M|        "\4";               // highest bits 11110 -> 4-byte cp
 3779|  5.15M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3780|  5.15M|    SCN_GCC_COMPAT_POP
 3781|  5.15M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4008|  4.55M|{
 4009|  4.55M|    if constexpr (sizeof(CharT) == 1) {
 4010|  4.55M|        return decode_utf8_code_point_exhaustive(input);
 4011|       |    }
 4012|       |    else if constexpr (sizeof(CharT) == 2) {
 4013|       |        return decode_utf16_code_point_exhaustive(input);
 4014|       |    }
 4015|       |    else {
 4016|       |        SCN_EXPECT(input.size() == 1);
 4017|       |        auto cp = static_cast<char32_t>(input.front());
 4018|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4019|       |            return invalid_code_point;
 4020|       |        }
 4021|       |        return cp;
 4022|       |    }
 4023|  4.55M|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3821|  4.55M|{
 3822|  4.55M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  4.55M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.55M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3823|       |
 3824|  4.55M|    const auto is_trailing_code_unit = [](char ch) {
 3825|  4.55M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3826|  4.55M|    };
 3827|       |
 3828|  4.55M|    if (input.size() == 1) {
  ------------------
  |  Branch (3828:9): [True: 4.46M, False: 88.3k]
  ------------------
 3829|  4.46M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3829:13): [True: 800, False: 4.46M]
  ------------------
 3830|    800|            SCN_UNLIKELY_ATTR
 3831|    800|            return invalid_code_point;
 3832|    800|        }
 3833|  4.46M|        return static_cast<char32_t>(input[0]);
 3834|  4.46M|    }
 3835|       |
 3836|  88.3k|    if (input.size() == 2) {
  ------------------
  |  Branch (3836:9): [True: 81.5k, False: 6.79k]
  ------------------
 3837|  81.5k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3837:13): [True: 154, False: 81.4k]
  ------------------
 3838|    154|            SCN_UNLIKELY_ATTR
 3839|    154|            return invalid_code_point;
 3840|    154|        }
 3841|  81.4k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3841:13): [True: 9.31k, False: 72.0k]
  ------------------
 3842|  9.31k|            SCN_UNLIKELY_ATTR
 3843|  9.31k|            return invalid_code_point;
 3844|  9.31k|        }
 3845|       |
 3846|  72.0k|        char32_t cp{};
 3847|  72.0k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3848|  72.0k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3849|  72.0k|        return cp;
 3850|  81.4k|    }
 3851|       |
 3852|  6.79k|    if (input.size() == 3) {
  ------------------
  |  Branch (3852:9): [True: 3.97k, False: 2.81k]
  ------------------
 3853|  3.97k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3853:13): [True: 113, False: 3.86k]
  ------------------
 3854|    113|            SCN_UNLIKELY_ATTR
 3855|    113|            return invalid_code_point;
 3856|    113|        }
 3857|  3.86k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3857:13): [True: 1.80k, False: 2.05k]
  ------------------
 3858|  3.86k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3858:13): [True: 618, False: 1.44k]
  ------------------
 3859|  2.42k|            SCN_UNLIKELY_ATTR
 3860|  2.42k|            return invalid_code_point;
 3861|  2.42k|        }
 3862|       |
 3863|  1.44k|        char32_t cp{};
 3864|  1.44k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3865|  1.44k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3866|  1.44k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3867|  1.44k|        return cp;
 3868|  3.86k|    }
 3869|       |
 3870|  2.81k|    if (input.size() == 4) {
  ------------------
  |  Branch (3870:9): [True: 2.81k, False: 0]
  ------------------
 3871|  2.81k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3871:13): [True: 0, False: 2.81k]
  ------------------
 3872|      0|            SCN_UNLIKELY_ATTR
 3873|      0|            return invalid_code_point;
 3874|      0|        }
 3875|  2.81k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3875:13): [True: 580, False: 2.23k]
  ------------------
 3876|    580|            SCN_UNLIKELY_ATTR
 3877|    580|            return invalid_code_point;
 3878|    580|        }
 3879|  2.23k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3879:13): [True: 793, False: 1.44k]
  ------------------
 3880|  2.23k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3880:13): [True: 580, False: 863]
  ------------------
 3881|  2.23k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3881:13): [True: 544, False: 319]
  ------------------
 3882|  1.91k|            SCN_UNLIKELY_ATTR
 3883|  1.91k|            return invalid_code_point;
 3884|  1.91k|        }
 3885|       |
 3886|    319|        char32_t cp{};
 3887|    319|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3888|    319|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3889|    319|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3890|    319|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3891|    319|        return cp;
 3892|  2.23k|    }
 3893|       |
 3894|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3895|       |    // gcc 7 thinks we'll get here, even when we won't
 3896|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3897|      0|#endif
 3898|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3899|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3824|  91.8k|    const auto is_trailing_code_unit = [](char ch) {
 3825|  91.8k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3826|  91.8k|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3694|  7.33M|{
 3695|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3696|       |                                          decltype(first), decltype(last)> &&
 3697|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3698|       |        return {first, last};
 3699|       |    }
 3700|  7.33M|    else {
 3701|  7.33M|        return {to_address(first), static_cast<size_t>(std::distance(
 3702|  7.33M|                                       to_address(first), to_address(last)))};
 3703|  7.33M|    }
 3704|  7.33M|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  22.3M|{
  326|  22.3M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  22.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  22.3M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  303|  34.2M|{
  304|  34.2M|    return p;
  305|  34.2M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3725|  11.6M|{
 3726|       |    if constexpr (std::is_constructible_v<
 3727|       |                      typename std::basic_string_view<CharT>::iterator,
 3728|       |                      decltype(it)> &&
 3729|  11.6M|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3730|  11.6M|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  11.6M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3731|  11.6M|        return it;
 3732|       |    }
 3733|       |    else {
 3734|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3735|       |    }
 3736|  11.6M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   130k|    {
 2724|   130k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   130k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   130k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   130k|    {
 2705|   130k|        return decay_copy(t.begin());
 2706|   130k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1948|  16.7M|{
 1949|  16.7M|    return SCN_FWD(t);
  ------------------
  |  |  930|  16.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  16.7M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  3.15M|    {
 2781|  3.15M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.15M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  3.15M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  3.15M|    {
 2763|  3.15M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  3.15M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  3.15M|    }
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8876|   230k|{
 8877|   230k|    auto args = make_scan_args<scan_context, Args...>();
 8878|   230k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   230k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8879|   230k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   230k|    static_cast<    \
  |  |  929|   230k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   230k|    static_cast<    \
  |  |  929|   230k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8880|   230k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJfEEEDav:
 5405|   996k|{
 5406|   996k|    detail::check_scan_arg_types<Args...>();
 5407|   996k|    return detail::scan_arg_store<Context, Args...>{};
 5408|   996k|}
_ZN3scn2v36detail20check_scan_arg_typesIJfEEEvv:
 5144|  1.63M|{
 5145|  1.63M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|  1.63M|                  "Scan argument types must be default constructible");
 5147|  1.63M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|  1.63M|                  "Scan argument types must be Destructible");
 5149|  1.63M|    static_assert(
 5150|  1.63M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|  1.63M|        "Scan argument types must not be references");
 5152|  1.63M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEEC2Ev:
 5357|   996k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|   996k|    {
 5359|   996k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|   996k|    {
 5370|   996k|        return {detail::make_arg<
 5371|   996k|            kind, Context,
 5372|   996k|            mapped_type_constant<remove_cvref_t<A>,
 5373|   996k|                                 typename Context::char_type>::value>(args)...};
 5374|   996k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE16EfvEEPvRT2_:
 5179|   996k|{
 5180|   996k|    return make_value<Context>(value).ref_value;
 5181|   996k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEfEEDaRT0_:
 5129|  1.10M|{
 5130|  1.10M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  1.10M|                                  needs_context_tag>) {
 5134|  1.10M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  1.10M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  1.10M|}
_ZN3scn2v36detail10arg_mapperIcE3mapERf:
 4968|  1.10M|    {                                                                        \
 4969|  1.10M|        return val;                                                          \
 4970|  1.10M|    }
_ZN3scn2v36detail15make_value_implIRfEEDaOT_:
 5098|  1.63M|{
 5099|  1.63M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|  1.63M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|  1.63M|    constexpr bool scannable_char =
 5103|  1.63M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|  1.63M|    static_assert(scannable_char,
 5105|  1.63M|                  "Cannot scan an argument of an unsupported character "
 5106|  1.63M|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|  1.63M|    constexpr bool scannable_const =
 5109|  1.63M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|  1.63M|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|  1.63M|    constexpr bool scannable_disabled =
 5113|  1.63M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|  1.63M|    static_assert(scannable_disabled,
 5115|  1.63M|                  "Cannot scan an argument that has been disabled by "
 5116|  1.63M|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|  1.63M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|  1.63M|    static_assert(
 5120|  1.63M|        scannable,
 5121|  1.63M|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|  1.63M|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|  1.63M|    return arg_value{arg};
 5125|  1.63M|}
_ZN3scn2v36detail9arg_valueC2IfEERT_:
 4909|  1.63M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|  1.63M|    {
 4911|  1.63M|    }
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8663|   709k|{
 8664|   709k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   709k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8665|   709k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8600|   709k|{
 8601|   709k|    auto buffer = make_scan_buffer(range);
 8602|       |
 8603|   709k|    auto result = vscan_impl(buffer, format, args);
 8604|   709k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   709k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 58.9k, False: 650k]
  |  |  ------------------
  ------------------
 8605|  58.9k|        return unexpected(result.error());
 8606|  58.9k|    }
 8607|   650k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   650k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8608|   709k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 4728|  1.57M|{
 4729|  1.57M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4730|       |
 4731|  1.57M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4732|  1.57M|                  "\n"
 4733|  1.57M|                  "Unsupported range type given as input to a scanning "
 4734|  1.57M|                  "function.\n"
 4735|  1.57M|                  "A range needs to have a character type (value type) "
 4736|  1.57M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4737|  1.57M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4738|  1.57M|                  "to be included.\n"
 4739|  1.57M|                  "See the scnlib documentation for more details.");
 4740|  1.57M|    static_assert(
 4741|  1.57M|        !std::is_same_v<T, custom_char_traits>,
 4742|  1.57M|        "\n"
 4743|  1.57M|        "Unsupported range type given as input to a scanning "
 4744|  1.57M|        "function.\n"
 4745|  1.57M|        "String types (std::basic_string, and std::basic_string_view) "
 4746|  1.57M|        "need to use std::char_traits. Strings with custom Traits are "
 4747|  1.57M|        "not supported.");
 4748|  1.57M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4749|  1.57M|                  "\n"
 4750|  1.57M|                  "Unsupported range type given as input to a scanning "
 4751|  1.57M|                  "function.\n"
 4752|  1.57M|                  "file_marker_found cannot be used as an "
 4753|  1.57M|                  "source range type to scn::scan.\n"
 4754|  1.57M|                  "To read from stdin, use scn::input or scn::prompt, "
 4755|  1.57M|                  "and do not provide an explicit source range, "
 4756|  1.57M|                  "or use scn::scan with a FILE* directly.");
 4757|  1.57M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4758|  1.57M|                  "\n"
 4759|  1.57M|                  "Unsupported range type given as input to a scanning "
 4760|  1.57M|                  "function.\n"
 4761|  1.57M|                  "In order to be scannable, a range needs to satisfy "
 4762|  1.57M|                  "`forward_range`. `input_range` is not sufficient.");
 4763|  1.57M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4764|  1.57M|                  "\n"
 4765|  1.57M|                  "Unsupported range type given as input to a scanning "
 4766|  1.57M|                  "function.\n"
 4767|  1.57M|                  "A range needs to model forward_range and have a valid "
 4768|  1.57M|                  "character type (char or wchar_t) to be scannable.\n"
 4769|  1.57M|                  "Examples of scannable ranges are std::string, "
 4770|  1.57M|                  "std::string_view, "
 4771|  1.57M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4772|  1.57M|                  "See the scnlib documentation for more details.");
 4773|       |
 4774|  1.57M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4775|  1.57M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 4667|  1.57M|{
 4668|  1.57M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 4669|  1.57M|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4670|       |    }
 4671|       |    else {
 4672|       |        return invalid_char_type{};
 4673|       |    }
 4674|  1.57M|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  1.57M|    {
 2855|  1.57M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  1.57M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  1.57M|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  1.57M|    {
 2836|  1.57M|        return t.data();
 2837|  1.57M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3228|  1.57M|    {
 3229|  1.57M|        return detail::to_address(ranges::begin(derived()));
 3230|  1.57M|    }
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  11.9M|{
  326|  11.9M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  11.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  11.9M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  3.01M|    {
 2724|  3.01M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  3.01M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  3.01M|    {
 2705|  3.01M|        return decay_copy(t.begin());
 2706|  3.01M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3325|  38.1M|    {
 3326|  38.1M|        return m_iterator;
 3327|  38.1M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3184|  1.57M|    {
 3185|  1.57M|        return static_cast<const D&>(*this);
 3186|  1.57M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|  1.57M|    {
 2930|  1.57M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|  1.57M|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|  1.57M|    {
 2896|  1.57M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  1.57M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|  1.57M|    }
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1948|  6.86M|{
 1949|  6.86M|    return SCN_FWD(t);
  ------------------
  |  |  930|  6.86M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  6.86M|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3341|  8.70M|    {
 3342|  8.70M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3343|  8.70M|    }
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1597|  17.1M|    {
 1598|  17.1M|        return has_value();
 1599|  17.1M|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  484|  33.8M|    {
  485|  33.8M|        return m_has_value;
  486|  33.8M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1603|  1.17M|    {
 1604|  1.17M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.17M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.17M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.17M|        return this->get_unexpected().error();
 1606|  1.17M|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  1.17M|    {
  468|  1.17M|        return m_unexpected;
  469|  1.17M|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  360|  8.99M|    {
  361|  8.99M|        return m_unexpected;
  362|  8.99M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  345|  4.39M|        : m_unexpected(std::forward<Err>(e))
  346|  4.39M|    {
  347|  4.39M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  4.39M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  4.39M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1473|   127k|        : base(unexpect, std::move(e.error())),
 1474|   127k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   127k|    {
 1476|   127k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|   127k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   127k|          m_has_value(false)
  446|   127k|    {
  447|   127k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  354|  10.0M|        : m_unexpected(std::forward<Args>(args)...)
  355|  10.0M|    {
  356|  10.0M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  10.0M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  10.0M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.57M|    {
 1177|  1.57M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5932|  1.44M|{
 5933|       |    if constexpr (ranges::random_access_iterator<
 5934|  1.44M|                      ranges::iterator_t<SourceRange>>) {
 5935|  1.44M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5936|       |    }
 5937|       |    else {
 5938|       |        auto it = ranges::begin(source);
 5939|       |        while (n > 0) {
 5940|       |            --n;
 5941|       |            ++it;
 5942|       |        }
 5943|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5944|       |    }
 5945|  1.44M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  8.98M|    {
 2724|  8.98M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  8.98M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  8.98M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  8.98M|    {
 2705|  8.98M|        return decay_copy(t.begin());
 2706|  8.98M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 5919|  1.44M|{
 5920|  1.44M|    return ranges::end(source);
 5921|  1.44M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.44M|    {
 2781|  1.44M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.44M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.44M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.44M|    {
 2763|  1.44M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.44M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.44M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3329|  18.5M|    {
 3330|  18.5M|        return m_sentinel;
 3331|  18.5M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1652|  6.73M|    {
 1653|  6.73M|        return value();
 1654|  6.73M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1626|  15.5M|    {
 1627|  15.5M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  15.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  15.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  15.5M|        return this->get_value();
 1629|  15.5M|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  450|  15.5M|    {
  451|  15.5M|        return m_value;
  452|  15.5M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|  1.44M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.44M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.44M|    {
 1430|  1.44M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  435|  1.44M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.44M|    {
  437|  1.44M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7984|   460k|    {
 7985|   460k|        return m_str;
 7986|   460k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJfEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|   996k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|   996k|    {
 5436|   996k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE12arg_pointersEv:
 5388|   996k|    {
 5389|   996k|        return m_argptrs;
 5390|   996k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5486|  3.08M|        : m_desc(desc), m_builtin_values(data)
 5487|  3.08M|    {
 5488|  3.08M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8829|   460k|{
 8830|   460k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   460k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 39.2k, False: 421k]
  |  |  ------------------
  ------------------
 8831|  39.2k|        return unexpected(result.error());
 8832|  39.2k|    }
 8833|   421k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   421k|    static_cast<    \
  |  |  929|   421k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   421k|    static_cast<    \
  |  |  929|   421k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|   460k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1597|  1.57M|    {
 1598|  1.57M|        return has_value();
 1599|  1.57M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  3.14M|    {
  485|  3.14M|        return m_has_value;
  486|  3.14M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1603|   127k|    {
 1604|   127k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   127k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   127k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   127k|        return this->get_unexpected().error();
 1606|   127k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   127k|    {
  468|   127k|        return m_unexpected;
  469|   127k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  42.5k|        : base(unexpect, std::move(e.error())),
 1474|  42.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  42.5k|    {
 1476|  42.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  42.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  42.5k|          m_has_value(false)
  446|  42.5k|    {
  447|  42.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   510k|    {
 1177|   510k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1652|  1.30M|    {
 1653|  1.30M|        return value();
 1654|  1.30M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|  1.44M|    {
 1627|  1.44M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.44M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.44M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.44M|        return this->get_value();
 1629|  1.44M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.44M|    {
  451|  1.44M|        return m_value;
  452|  1.44M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2ES8_ONSt3__15tupleIJfEEE:
 5838|   467k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   467k|    static_cast<    \
  |  |  929|   467k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   467k|    static_cast<    \
  |  |  929|   467k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   467k|    {
 5840|   467k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5689|  1.44M|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|  1.44M|    static_cast<    \
  |  |  929|  1.44M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5690|  1.44M|    {
 5691|  1.44M|    }
_ZN3scn2v36detail25scan_result_value_storageIJfEEC2EONSt3__15tupleIJfEEE:
 5624|  1.38M|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|  1.38M|    static_cast<    \
  |  |  929|  1.38M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|  1.38M|    {
 5626|  1.38M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|   467k|        : base(std::in_place, std::forward<U>(val)),
 1428|   467k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   467k|    {
 1430|   467k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|   467k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   467k|    {
  437|   467k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE4argsEv:
 5383|   996k|    {
 5384|   996k|        return m_args;
 5385|   996k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3310|  14.8M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  14.8M|    static_cast<    \
  |  |  929|  14.8M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  14.8M|    static_cast<    \
  |  |  929|  14.8M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  14.8M|    {
 3312|  14.8M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7700|  3.08M|{
 7701|  3.08M|    return s;
 7702|  3.08M|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7677|  3.08M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7979|   460k|        : m_str(r.str)
 7980|   460k|    {
 7981|   460k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   510k|    {
 1598|   510k|        return has_value();
 1599|   510k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   977k|    {
  485|   977k|        return m_has_value;
  486|   977k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEptEv:
 1672|   467k|    {
 1673|   467k|        return &value();
 1674|   467k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|   467k|    {
 1627|   467k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   467k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   467k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   467k|        return this->get_value();
 1629|   467k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   467k|    {
  451|   467k|        return m_value;
  452|   467k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 5707|  1.44M|    {
 5708|  1.44M|        return ranges::begin(m_range);
 5709|  1.44M|    }
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8943|   230k|{
 8944|   230k|    auto args = make_scan_args<scan_context, Args...>();
 8945|   230k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   230k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8946|   230k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   230k|    static_cast<    \
  |  |  929|   230k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   230k|    static_cast<    \
  |  |  929|   230k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8947|   230k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8681|   709k|{
 8682|   709k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   709k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8683|   709k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8616|   709k|{
 8617|   709k|#if !SCN_DISABLE_LOCALE
 8618|   709k|    auto buffer = detail::make_scan_buffer(range);
 8619|       |
 8620|   709k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8621|   709k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8622|   709k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8623|       |
 8624|   709k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   709k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 58.9k, False: 650k]
  |  |  ------------------
  ------------------
 8625|  58.9k|        return unexpected(result.error());
 8626|  58.9k|    }
 8627|   650k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   650k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8628|       |#else
 8629|       |    static_assert(dependent_false<Locale>::value,
 8630|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8631|       |
 8632|       |    return {};
 8633|       |#endif
 8634|   709k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8982|  49.5k|{
 8983|  49.5k|    T value;
 8984|  49.5k|    auto arg = detail::make_arg<scan_context>(value);
 8985|  49.5k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  49.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  49.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  49.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  49.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.27k, False: 46.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.27k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.27k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.27k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.27k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.27k|    }                                                  \
  |  |  |  | 3667|  49.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  46.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8986|  46.2k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  46.2k|    static_cast<    \
  |  |  929|  46.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  46.2k|    static_cast<    \
  |  |  929|  46.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8987|  49.5k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEfEENS0_14basic_scan_argIT_EERT0_:
 5164|   103k|{
 5165|   103k|    check_scan_arg_types<T>();
 5166|       |
 5167|   103k|    basic_scan_arg<Context> arg;
 5168|   103k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|   103k|    arg.m_value = make_value<Context>(value);
 5170|   103k|    return arg;
 5171|   103k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5250|  3.40M|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4906|  5.17M|    arg_value() = default;
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8694|   153k|{
 8695|   153k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|   153k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8696|   153k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8640|   153k|{
 8641|   153k|    auto buffer = detail::make_scan_buffer(range);
 8642|       |
 8643|   153k|    auto result = detail::vscan_value_impl(buffer, arg);
 8644|   153k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   153k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.81k, False: 143k]
  |  |  ------------------
  ------------------
 8645|  9.81k|        return unexpected(result.error());
 8646|  9.81k|    }
 8647|   143k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   143k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8648|   153k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1662|   143k|    {
 1663|   143k|        return std::move(value());
 1664|   143k|    }
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8876|   238k|{
 8877|   238k|    auto args = make_scan_args<scan_context, Args...>();
 8878|   238k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   238k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8879|   238k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   238k|    static_cast<    \
  |  |  929|   238k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   238k|    static_cast<    \
  |  |  929|   238k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8880|   238k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJdEEEDav:
 5405|  1.03M|{
 5406|  1.03M|    detail::check_scan_arg_types<Args...>();
 5407|  1.03M|    return detail::scan_arg_store<Context, Args...>{};
 5408|  1.03M|}
_ZN3scn2v36detail20check_scan_arg_typesIJdEEEvv:
 5144|  1.75M|{
 5145|  1.75M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|  1.75M|                  "Scan argument types must be default constructible");
 5147|  1.75M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|  1.75M|                  "Scan argument types must be Destructible");
 5149|  1.75M|    static_assert(
 5150|  1.75M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|  1.75M|        "Scan argument types must not be references");
 5152|  1.75M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEEC2Ev:
 5357|  1.03M|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  1.03M|    {
 5359|  1.03M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|  1.03M|    {
 5370|  1.03M|        return {detail::make_arg<
 5371|  1.03M|            kind, Context,
 5372|  1.03M|            mapped_type_constant<remove_cvref_t<A>,
 5373|  1.03M|                                 typename Context::char_type>::value>(args)...};
 5374|  1.03M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE17EdvEEPvRT2_:
 5179|  1.03M|{
 5180|  1.03M|    return make_value<Context>(value).ref_value;
 5181|  1.03M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEdEEDaRT0_:
 5129|  1.14M|{
 5130|  1.14M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  1.14M|                                  needs_context_tag>) {
 5134|  1.14M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  1.14M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  1.14M|}
_ZN3scn2v36detail10arg_mapperIcE3mapERd:
 4968|  1.14M|    {                                                                        \
 4969|  1.14M|        return val;                                                          \
 4970|  1.14M|    }
_ZN3scn2v36detail15make_value_implIRdEEDaOT_:
 5098|  1.75M|{
 5099|  1.75M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|  1.75M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|  1.75M|    constexpr bool scannable_char =
 5103|  1.75M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|  1.75M|    static_assert(scannable_char,
 5105|  1.75M|                  "Cannot scan an argument of an unsupported character "
 5106|  1.75M|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|  1.75M|    constexpr bool scannable_const =
 5109|  1.75M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|  1.75M|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|  1.75M|    constexpr bool scannable_disabled =
 5113|  1.75M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|  1.75M|    static_assert(scannable_disabled,
 5115|  1.75M|                  "Cannot scan an argument that has been disabled by "
 5116|  1.75M|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|  1.75M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|  1.75M|    static_assert(
 5120|  1.75M|        scannable,
 5121|  1.75M|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|  1.75M|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|  1.75M|    return arg_value{arg};
 5125|  1.75M|}
_ZN3scn2v36detail9arg_valueC2IdEERT_:
 4909|  1.75M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|  1.75M|    {
 4911|  1.75M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7984|   476k|    {
 7985|   476k|        return m_str;
 7986|   476k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  1.03M|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  1.03M|    {
 5436|  1.03M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12arg_pointersEv:
 5388|  1.03M|    {
 5389|  1.03M|        return m_argptrs;
 5390|  1.03M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8829|   476k|{
 8830|   476k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   476k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 39.2k, False: 437k]
  |  |  ------------------
  ------------------
 8831|  39.2k|        return unexpected(result.error());
 8832|  39.2k|    }
 8833|   437k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   437k|    static_cast<    \
  |  |  929|   437k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   437k|    static_cast<    \
  |  |  929|   437k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|   476k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  42.5k|        : base(unexpect, std::move(e.error())),
 1474|  42.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  42.5k|    {
 1476|  42.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  42.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  42.5k|          m_has_value(false)
  446|  42.5k|    {
  447|  42.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   528k|    {
 1177|   528k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2ES8_ONSt3__15tupleIJdEEE:
 5838|   485k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   485k|    static_cast<    \
  |  |  929|   485k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   485k|    static_cast<    \
  |  |  929|   485k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   485k|    {
 5840|   485k|    }
_ZN3scn2v36detail25scan_result_value_storageIJdEEC2EONSt3__15tupleIJdEEE:
 5624|  1.49M|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|  1.49M|    static_cast<    \
  |  |  929|  1.49M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|  1.49M|    {
 5626|  1.49M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|   485k|        : base(std::in_place, std::forward<U>(val)),
 1428|   485k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   485k|    {
 1430|   485k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|   485k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   485k|    {
  437|   485k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE4argsEv:
 5383|  1.03M|    {
 5384|  1.03M|        return m_args;
 5385|  1.03M|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7979|   476k|        : m_str(r.str)
 7980|   476k|    {
 7981|   476k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   528k|    {
 1598|   528k|        return has_value();
 1599|   528k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.01M|    {
  485|  1.01M|        return m_has_value;
  486|  1.01M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEptEv:
 1672|   485k|    {
 1673|   485k|        return &value();
 1674|   485k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|   485k|    {
 1627|   485k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   485k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   485k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   485k|        return this->get_value();
 1629|   485k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   485k|    {
  451|   485k|        return m_value;
  452|   485k|    }
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8943|   238k|{
 8944|   238k|    auto args = make_scan_args<scan_context, Args...>();
 8945|   238k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   238k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8946|   238k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   238k|    static_cast<    \
  |  |  929|   238k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   238k|    static_cast<    \
  |  |  929|   238k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8947|   238k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8982|  51.6k|{
 8983|  51.6k|    T value;
 8984|  51.6k|    auto arg = detail::make_arg<scan_context>(value);
 8985|  51.6k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  51.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  51.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  51.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  51.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.27k, False: 48.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.27k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.27k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.27k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.27k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.27k|    }                                                  \
  |  |  |  | 3667|  51.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  48.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8986|  48.3k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  48.3k|    static_cast<    \
  |  |  929|  48.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  48.3k|    static_cast<    \
  |  |  929|  48.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8987|  51.6k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEdEENS0_14basic_scan_argIT_EERT0_:
 5164|   108k|{
 5165|   108k|    check_scan_arg_types<T>();
 5166|       |
 5167|   108k|    basic_scan_arg<Context> arg;
 5168|   108k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|   108k|    arg.m_value = make_value<Context>(value);
 5170|   108k|    return arg;
 5171|   108k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8876|   241k|{
 8877|   241k|    auto args = make_scan_args<scan_context, Args...>();
 8878|   241k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   241k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8879|   241k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   241k|    static_cast<    \
  |  |  929|   241k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   241k|    static_cast<    \
  |  |  929|   241k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8880|   241k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJeEEEDav:
 5405|  1.05M|{
 5406|  1.05M|    detail::check_scan_arg_types<Args...>();
 5407|  1.05M|    return detail::scan_arg_store<Context, Args...>{};
 5408|  1.05M|}
_ZN3scn2v36detail20check_scan_arg_typesIJeEEEvv:
 5144|  1.77M|{
 5145|  1.77M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|  1.77M|                  "Scan argument types must be default constructible");
 5147|  1.77M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|  1.77M|                  "Scan argument types must be Destructible");
 5149|  1.77M|    static_assert(
 5150|  1.77M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|  1.77M|        "Scan argument types must not be references");
 5152|  1.77M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEEC2Ev:
 5357|  1.05M|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  1.05M|    {
 5359|  1.05M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|  1.05M|    {
 5370|  1.05M|        return {detail::make_arg<
 5371|  1.05M|            kind, Context,
 5372|  1.05M|            mapped_type_constant<remove_cvref_t<A>,
 5373|  1.05M|                                 typename Context::char_type>::value>(args)...};
 5374|  1.05M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE18EevEEPvRT2_:
 5179|  1.05M|{
 5180|  1.05M|    return make_value<Context>(value).ref_value;
 5181|  1.05M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEeEEDaRT0_:
 5129|  1.16M|{
 5130|  1.16M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  1.16M|                                  needs_context_tag>) {
 5134|  1.16M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  1.16M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  1.16M|}
_ZN3scn2v36detail10arg_mapperIcE3mapERe:
 4968|  1.16M|    {                                                                        \
 4969|  1.16M|        return val;                                                          \
 4970|  1.16M|    }
_ZN3scn2v36detail15make_value_implIReEEDaOT_:
 5098|  1.77M|{
 5099|  1.77M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|  1.77M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|  1.77M|    constexpr bool scannable_char =
 5103|  1.77M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|  1.77M|    static_assert(scannable_char,
 5105|  1.77M|                  "Cannot scan an argument of an unsupported character "
 5106|  1.77M|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|  1.77M|    constexpr bool scannable_const =
 5109|  1.77M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|  1.77M|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|  1.77M|    constexpr bool scannable_disabled =
 5113|  1.77M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|  1.77M|    static_assert(scannable_disabled,
 5115|  1.77M|                  "Cannot scan an argument that has been disabled by "
 5116|  1.77M|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|  1.77M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|  1.77M|    static_assert(
 5120|  1.77M|        scannable,
 5121|  1.77M|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|  1.77M|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|  1.77M|    return arg_value{arg};
 5125|  1.77M|}
_ZN3scn2v36detail9arg_valueC2IeEERT_:
 4909|  1.77M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|  1.77M|    {
 4911|  1.77M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7984|   482k|    {
 7985|   482k|        return m_str;
 7986|   482k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJeEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  1.05M|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  1.05M|    {
 5436|  1.05M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE12arg_pointersEv:
 5388|  1.05M|    {
 5389|  1.05M|        return m_argptrs;
 5390|  1.05M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8829|   482k|{
 8830|   482k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   482k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 39.2k, False: 443k]
  |  |  ------------------
  ------------------
 8831|  39.2k|        return unexpected(result.error());
 8832|  39.2k|    }
 8833|   443k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   443k|    static_cast<    \
  |  |  929|   443k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   443k|    static_cast<    \
  |  |  929|   443k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|   482k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  42.5k|        : base(unexpect, std::move(e.error())),
 1474|  42.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  42.5k|    {
 1476|  42.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  42.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  42.5k|          m_has_value(false)
  446|  42.5k|    {
  447|  42.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   535k|    {
 1177|   535k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2ES8_ONSt3__15tupleIJeEEE:
 5838|   492k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   492k|    static_cast<    \
  |  |  929|   492k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   492k|    static_cast<    \
  |  |  929|   492k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   492k|    {
 5840|   492k|    }
_ZN3scn2v36detail25scan_result_value_storageIJeEEC2EONSt3__15tupleIJeEEE:
 5624|  1.52M|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|  1.52M|    static_cast<    \
  |  |  929|  1.52M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|  1.52M|    {
 5626|  1.52M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|   492k|        : base(std::in_place, std::forward<U>(val)),
 1428|   492k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   492k|    {
 1430|   492k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|   492k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   492k|    {
  437|   492k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE4argsEv:
 5383|  1.05M|    {
 5384|  1.05M|        return m_args;
 5385|  1.05M|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7979|   482k|        : m_str(r.str)
 7980|   482k|    {
 7981|   482k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   535k|    {
 1598|   535k|        return has_value();
 1599|   535k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.02M|    {
  485|  1.02M|        return m_has_value;
  486|  1.02M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEptEv:
 1672|   492k|    {
 1673|   492k|        return &value();
 1674|   492k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|   492k|    {
 1627|   492k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   492k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   492k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   492k|        return this->get_value();
 1629|   492k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   492k|    {
  451|   492k|        return m_value;
  452|   492k|    }
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8943|   241k|{
 8944|   241k|    auto args = make_scan_args<scan_context, Args...>();
 8945|   241k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   241k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8946|   241k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   241k|    static_cast<    \
  |  |  929|   241k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   241k|    static_cast<    \
  |  |  929|   241k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8947|   241k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8982|  52.6k|{
 8983|  52.6k|    T value;
 8984|  52.6k|    auto arg = detail::make_arg<scan_context>(value);
 8985|  52.6k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  52.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  52.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  52.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  52.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.27k, False: 49.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.27k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.27k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.27k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.27k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.27k|    }                                                  \
  |  |  |  | 3667|  52.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  49.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8986|  49.3k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  49.3k|    static_cast<    \
  |  |  929|  49.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  49.3k|    static_cast<    \
  |  |  929|  49.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8987|  52.6k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEeEENS0_14basic_scan_argIT_EERT0_:
 5164|   110k|{
 5165|   110k|    check_scan_arg_types<T>();
 5166|       |
 5167|   110k|    basic_scan_arg<Context> arg;
 5168|   110k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|   110k|    arg.m_value = make_value<Context>(value);
 5170|   110k|    return arg;
 5171|   110k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   127k|    {
 2724|   127k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   127k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   127k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   127k|    {
 2705|   127k|        return decay_copy(t.begin());
 2706|   127k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 1948|  80.7M|{
 1949|  80.7M|    return SCN_FWD(t);
  ------------------
  |  |  930|  80.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  80.7M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  3.66M|    {
 2781|  3.66M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.66M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  3.66M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  3.66M|    {
 2763|  3.66M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  3.66M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  3.66M|    }
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8876|   267k|{
 8877|   267k|    auto args = make_scan_args<scan_context, Args...>();
 8878|   267k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   267k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8879|   267k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   267k|    static_cast<    \
  |  |  929|   267k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   267k|    static_cast<    \
  |  |  929|   267k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8880|   267k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8663|   832k|{
 8664|   832k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   832k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8665|   832k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8600|   832k|{
 8601|   832k|    auto buffer = make_scan_buffer(range);
 8602|       |
 8603|   832k|    auto result = vscan_impl(buffer, format, args);
 8604|   832k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   832k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 58.9k, False: 773k]
  |  |  ------------------
  ------------------
 8605|  58.9k|        return unexpected(result.error());
 8606|  58.9k|    }
 8607|   773k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   773k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8608|   832k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4728|  1.83M|{
 4729|  1.83M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4730|       |
 4731|  1.83M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4732|  1.83M|                  "\n"
 4733|  1.83M|                  "Unsupported range type given as input to a scanning "
 4734|  1.83M|                  "function.\n"
 4735|  1.83M|                  "A range needs to have a character type (value type) "
 4736|  1.83M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4737|  1.83M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4738|  1.83M|                  "to be included.\n"
 4739|  1.83M|                  "See the scnlib documentation for more details.");
 4740|  1.83M|    static_assert(
 4741|  1.83M|        !std::is_same_v<T, custom_char_traits>,
 4742|  1.83M|        "\n"
 4743|  1.83M|        "Unsupported range type given as input to a scanning "
 4744|  1.83M|        "function.\n"
 4745|  1.83M|        "String types (std::basic_string, and std::basic_string_view) "
 4746|  1.83M|        "need to use std::char_traits. Strings with custom Traits are "
 4747|  1.83M|        "not supported.");
 4748|  1.83M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4749|  1.83M|                  "\n"
 4750|  1.83M|                  "Unsupported range type given as input to a scanning "
 4751|  1.83M|                  "function.\n"
 4752|  1.83M|                  "file_marker_found cannot be used as an "
 4753|  1.83M|                  "source range type to scn::scan.\n"
 4754|  1.83M|                  "To read from stdin, use scn::input or scn::prompt, "
 4755|  1.83M|                  "and do not provide an explicit source range, "
 4756|  1.83M|                  "or use scn::scan with a FILE* directly.");
 4757|  1.83M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4758|  1.83M|                  "\n"
 4759|  1.83M|                  "Unsupported range type given as input to a scanning "
 4760|  1.83M|                  "function.\n"
 4761|  1.83M|                  "In order to be scannable, a range needs to satisfy "
 4762|  1.83M|                  "`forward_range`. `input_range` is not sufficient.");
 4763|  1.83M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4764|  1.83M|                  "\n"
 4765|  1.83M|                  "Unsupported range type given as input to a scanning "
 4766|  1.83M|                  "function.\n"
 4767|  1.83M|                  "A range needs to model forward_range and have a valid "
 4768|  1.83M|                  "character type (char or wchar_t) to be scannable.\n"
 4769|  1.83M|                  "Examples of scannable ranges are std::string, "
 4770|  1.83M|                  "std::string_view, "
 4771|  1.83M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4772|  1.83M|                  "See the scnlib documentation for more details.");
 4773|       |
 4774|  1.83M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4775|  1.83M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4698|  1.83M|{
 4699|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 4700|       |        return file_marker_found{};
 4701|       |    }
 4702|       |    else if constexpr (!ranges::forward_range<Range>) {
 4703|       |        if constexpr (ranges::range<Range>) {
 4704|       |            return insufficient_range{};
 4705|       |        }
 4706|       |        else {
 4707|       |            return invalid_input_range{};
 4708|       |        }
 4709|       |    }
 4710|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 4711|       |        return invalid_char_type{};
 4712|       |    }
 4713|  1.83M|    else {
 4714|  1.83M|        return make_forward_scan_buffer(r);
 4715|  1.83M|    }
 4716|  1.83M|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4532|  1.83M|{
 4533|  1.83M|    return basic_scan_forward_buffer_impl(range);
 4534|  1.83M|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4417|  1.83M|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  930|  1.83M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4418|  1.83M|          m_cursor(ranges::begin(*m_range))
 4419|  1.83M|    {
 4420|  1.83M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4389|  1.83M|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4390|  1.83M|    {
 4391|  1.83M|    }
_ZN3scn2v36detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4157|  1.83M|        : m_current_view(sv), m_is_contiguous(false)
 4158|  1.83M|    {
 4159|  1.83M|    }
_ZN3scn2v36detail17basic_scan_bufferIcED2Ev:
 4073|  1.83M|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  3.54M|    {
 2724|  3.54M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.54M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  3.54M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  3.54M|    {
 2705|  3.54M|        return decay_copy(t.begin());
 2706|  3.54M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3325|  5.24M|    {
 3326|  5.24M|        return m_iterator;
 3327|  5.24M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4423|  23.5M|    {
 4424|  23.5M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4424:13): [True: 332k, False: 23.2M]
  ------------------
 4425|   332k|            return false;
 4426|   332k|        }
 4427|  23.2M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4428|  23.2M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  23.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  23.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4429|  23.2M|        }
 4430|  23.2M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4430:13): [True: 21.3M, False: 1.81M]
  ------------------
 4431|  21.3M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4432|  21.3M|                                          this->m_current_view.begin(),
 4433|  21.3M|                                          this->m_current_view.end());
 4434|  21.3M|        }
 4435|  23.2M|        m_latest = *m_cursor;
 4436|  23.2M|        ++m_cursor;
 4437|  23.2M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4438|  23.2M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4439|  23.2M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  23.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  23.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4440|  23.2M|        }
 4441|  23.2M|        return true;
 4442|  23.5M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  69.9M|    {
 2781|  69.9M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  69.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  69.9M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  69.9M|    {
 2763|  69.9M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  69.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  69.9M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3329|  71.6M|    {
 3330|  71.6M|        return m_sentinel;
 3331|  71.6M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE4syncEl:
 4078|  1.83M|    {
 4079|  1.83M|        SCN_UNUSED(position);
  ------------------
  |  |  909|  1.83M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4080|  1.83M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1473|   127k|        : base(unexpect, std::move(e.error())),
 1474|   127k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   127k|    {
 1476|   127k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  444|   127k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   127k|          m_has_value(false)
  446|   127k|    {
  447|   127k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.83M|    {
 1177|  1.83M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5932|  1.70M|{
 5933|       |    if constexpr (ranges::random_access_iterator<
 5934|  1.70M|                      ranges::iterator_t<SourceRange>>) {
 5935|  1.70M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5936|       |    }
 5937|       |    else {
 5938|       |        auto it = ranges::begin(source);
 5939|       |        while (n > 0) {
 5940|       |            --n;
 5941|       |            ++it;
 5942|       |        }
 5943|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5944|       |    }
 5945|  1.70M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.70M|    {
 2724|  1.70M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.70M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.70M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.70M|    {
 2705|  1.70M|        return decay_copy(t.begin());
 2706|  1.70M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 5919|  1.70M|{
 5920|  1.70M|    return ranges::end(source);
 5921|  1.70M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.70M|    {
 2781|  1.70M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.70M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.70M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.70M|    {
 2763|  1.70M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.70M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.70M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1427|  1.70M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.70M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.70M|    {
 1430|  1.70M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  435|  1.70M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.70M|    {
  437|  1.70M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7984|   535k|    {
 7985|   535k|        return m_str;
 7986|   535k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8829|   535k|{
 8830|   535k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   535k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 39.2k, False: 496k]
  |  |  ------------------
  ------------------
 8831|  39.2k|        return unexpected(result.error());
 8832|  39.2k|    }
 8833|   496k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   496k|    static_cast<    \
  |  |  929|   496k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   496k|    static_cast<    \
  |  |  929|   496k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|   535k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1597|  1.83M|    {
 1598|  1.83M|        return has_value();
 1599|  1.83M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  3.66M|    {
  485|  3.66M|        return m_has_value;
  486|  3.66M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1603|   127k|    {
 1604|   127k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   127k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   127k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   127k|        return this->get_unexpected().error();
 1606|   127k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   127k|    {
  468|   127k|        return m_unexpected;
  469|   127k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  42.5k|        : base(unexpect, std::move(e.error())),
 1474|  42.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  42.5k|    {
 1476|  42.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  42.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  42.5k|          m_has_value(false)
  446|  42.5k|    {
  447|  42.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   590k|    {
 1177|   590k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1652|  1.54M|    {
 1653|  1.54M|        return value();
 1654|  1.54M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1626|  1.70M|    {
 1627|  1.70M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.70M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.70M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.70M|        return this->get_value();
 1629|  1.70M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.70M|    {
  451|  1.70M|        return m_value;
  452|  1.70M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2ESE_ONS6_5tupleIJfEEE:
 5838|   547k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   547k|    static_cast<    \
  |  |  929|   547k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   547k|    static_cast<    \
  |  |  929|   547k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   547k|    {
 5840|   547k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2EOSF_:
 5689|  1.70M|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|  1.70M|    static_cast<    \
  |  |  929|  1.70M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5690|  1.70M|    {
 5691|  1.70M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|   547k|        : base(std::in_place, std::forward<U>(val)),
 1428|   547k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   547k|    {
 1430|   547k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|   547k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   547k|    {
  437|   547k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3310|  3.54M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  3.54M|    static_cast<    \
  |  |  929|  3.54M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  3.54M|    static_cast<    \
  |  |  929|  3.54M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  3.54M|    {
 3312|  3.54M|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7979|   535k|        : m_str(r.str)
 7980|   535k|    {
 7981|   535k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   590k|    {
 1598|   590k|        return has_value();
 1599|   590k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.13M|    {
  485|  1.13M|        return m_has_value;
  486|  1.13M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1672|   547k|    {
 1673|   547k|        return &value();
 1674|   547k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|   547k|    {
 1627|   547k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   547k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   547k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   547k|        return this->get_value();
 1629|   547k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   547k|    {
  451|   547k|        return m_value;
  452|   547k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 5707|  1.70M|    {
 5708|  1.70M|        return ranges::begin(m_range);
 5709|  1.70M|    }
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8943|   267k|{
 8944|   267k|    auto args = make_scan_args<scan_context, Args...>();
 8945|   267k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   267k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8946|   267k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   267k|    static_cast<    \
  |  |  929|   267k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   267k|    static_cast<    \
  |  |  929|   267k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8947|   267k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8681|   832k|{
 8682|   832k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   832k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8683|   832k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8616|   832k|{
 8617|   832k|#if !SCN_DISABLE_LOCALE
 8618|   832k|    auto buffer = detail::make_scan_buffer(range);
 8619|       |
 8620|   832k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8621|   832k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8622|   832k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8623|       |
 8624|   832k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   832k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 58.9k, False: 773k]
  |  |  ------------------
  ------------------
 8625|  58.9k|        return unexpected(result.error());
 8626|  58.9k|    }
 8627|   773k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   773k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8628|       |#else
 8629|       |    static_assert(dependent_false<Locale>::value,
 8630|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8631|       |
 8632|       |    return {};
 8633|       |#endif
 8634|   832k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8982|  54.2k|{
 8983|  54.2k|    T value;
 8984|  54.2k|    auto arg = detail::make_arg<scan_context>(value);
 8985|  54.2k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  54.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  54.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  54.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  54.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.27k, False: 50.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.27k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.27k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.27k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.27k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.27k|    }                                                  \
  |  |  |  | 3667|  54.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  50.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8986|  50.9k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  50.9k|    static_cast<    \
  |  |  929|  50.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  50.9k|    static_cast<    \
  |  |  929|  50.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8987|  54.2k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8694|   169k|{
 8695|   169k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|   169k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8696|   169k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8640|   169k|{
 8641|   169k|    auto buffer = detail::make_scan_buffer(range);
 8642|       |
 8643|   169k|    auto result = detail::vscan_value_impl(buffer, arg);
 8644|   169k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   169k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.81k, False: 159k]
  |  |  ------------------
  ------------------
 8645|  9.81k|        return unexpected(result.error());
 8646|  9.81k|    }
 8647|   159k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   159k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8648|   169k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSJ_v:
 1662|   159k|    {
 1663|   159k|        return std::move(value());
 1664|   159k|    }
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8876|   281k|{
 8877|   281k|    auto args = make_scan_args<scan_context, Args...>();
 8878|   281k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   281k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8879|   281k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   281k|    static_cast<    \
  |  |  929|   281k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   281k|    static_cast<    \
  |  |  929|   281k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8880|   281k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7984|   562k|    {
 7985|   562k|        return m_str;
 7986|   562k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8829|   562k|{
 8830|   562k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   562k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 39.2k, False: 522k]
  |  |  ------------------
  ------------------
 8831|  39.2k|        return unexpected(result.error());
 8832|  39.2k|    }
 8833|   522k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   522k|    static_cast<    \
  |  |  929|   522k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   522k|    static_cast<    \
  |  |  929|   522k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|   562k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  42.5k|        : base(unexpect, std::move(e.error())),
 1474|  42.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  42.5k|    {
 1476|  42.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  42.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  42.5k|          m_has_value(false)
  446|  42.5k|    {
  447|  42.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   619k|    {
 1177|   619k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2ESE_ONS6_5tupleIJdEEE:
 5838|   576k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   576k|    static_cast<    \
  |  |  929|   576k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   576k|    static_cast<    \
  |  |  929|   576k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   576k|    {
 5840|   576k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|   576k|        : base(std::in_place, std::forward<U>(val)),
 1428|   576k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   576k|    {
 1430|   576k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|   576k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   576k|    {
  437|   576k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7979|   562k|        : m_str(r.str)
 7980|   562k|    {
 7981|   562k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   619k|    {
 1598|   619k|        return has_value();
 1599|   619k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.19M|    {
  485|  1.19M|        return m_has_value;
  486|  1.19M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1672|   576k|    {
 1673|   576k|        return &value();
 1674|   576k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|   576k|    {
 1627|   576k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   576k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   576k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   576k|        return this->get_value();
 1629|   576k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   576k|    {
  451|   576k|        return m_value;
  452|   576k|    }
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8943|   281k|{
 8944|   281k|    auto args = make_scan_args<scan_context, Args...>();
 8945|   281k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   281k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8946|   281k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   281k|    static_cast<    \
  |  |  929|   281k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   281k|    static_cast<    \
  |  |  929|   281k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8947|   281k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8982|  57.2k|{
 8983|  57.2k|    T value;
 8984|  57.2k|    auto arg = detail::make_arg<scan_context>(value);
 8985|  57.2k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  57.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  57.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  57.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  57.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.27k, False: 53.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.27k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.27k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.27k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.27k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.27k|    }                                                  \
  |  |  |  | 3667|  57.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  53.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8986|  53.9k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  53.9k|    static_cast<    \
  |  |  929|  53.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  53.9k|    static_cast<    \
  |  |  929|  53.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8987|  57.2k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8876|   283k|{
 8877|   283k|    auto args = make_scan_args<scan_context, Args...>();
 8878|   283k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   283k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8879|   283k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   283k|    static_cast<    \
  |  |  929|   283k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   283k|    static_cast<    \
  |  |  929|   283k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8880|   283k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7984|   567k|    {
 7985|   567k|        return m_str;
 7986|   567k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8829|   567k|{
 8830|   567k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   567k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 39.2k, False: 528k]
  |  |  ------------------
  ------------------
 8831|  39.2k|        return unexpected(result.error());
 8832|  39.2k|    }
 8833|   528k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   528k|    static_cast<    \
  |  |  929|   528k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   528k|    static_cast<    \
  |  |  929|   528k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|   567k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  42.5k|        : base(unexpect, std::move(e.error())),
 1474|  42.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  42.5k|    {
 1476|  42.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  42.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  42.5k|          m_has_value(false)
  446|  42.5k|    {
  447|  42.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   625k|    {
 1177|   625k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2ESE_ONS6_5tupleIJeEEE:
 5838|   583k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   583k|    static_cast<    \
  |  |  929|   583k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   583k|    static_cast<    \
  |  |  929|   583k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   583k|    {
 5840|   583k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|   583k|        : base(std::in_place, std::forward<U>(val)),
 1428|   583k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   583k|    {
 1430|   583k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|   583k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   583k|    {
  437|   583k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7979|   567k|        : m_str(r.str)
 7980|   567k|    {
 7981|   567k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   625k|    {
 1598|   625k|        return has_value();
 1599|   625k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.20M|    {
  485|  1.20M|        return m_has_value;
  486|  1.20M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1672|   583k|    {
 1673|   583k|        return &value();
 1674|   583k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|   583k|    {
 1627|   583k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   583k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   583k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   583k|        return this->get_value();
 1629|   583k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   583k|    {
  451|   583k|        return m_value;
  452|   583k|    }
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8943|   283k|{
 8944|   283k|    auto args = make_scan_args<scan_context, Args...>();
 8945|   283k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   283k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8946|   283k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   283k|    static_cast<    \
  |  |  929|   283k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   283k|    static_cast<    \
  |  |  929|   283k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8947|   283k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8982|  57.8k|{
 8983|  57.8k|    T value;
 8984|  57.8k|    auto arg = detail::make_arg<scan_context>(value);
 8985|  57.8k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  57.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  57.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  57.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  57.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.27k, False: 54.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.27k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.27k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.27k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.27k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.27k|    }                                                  \
  |  |  |  | 3667|  57.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  54.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8986|  54.5k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  54.5k|    static_cast<    \
  |  |  929|  54.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  54.5k|    static_cast<    \
  |  |  929|  54.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8987|  57.8k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   261k|    {
 2724|   261k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   261k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   261k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   261k|    {
 2705|   261k|        return decay_copy(t.begin());
 2706|   261k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1948|  5.86M|{
 1949|  5.86M|    return SCN_FWD(t);
  ------------------
  |  |  930|  5.86M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  5.86M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.77M|    {
 2781|  1.77M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.77M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.77M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.77M|    {
 2763|  1.77M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.77M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.77M|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJfEEEDav:
 5405|   491k|{
 5406|   491k|    detail::check_scan_arg_types<Args...>();
 5407|   491k|    return detail::scan_arg_store<Context, Args...>{};
 5408|   491k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEEC2Ev:
 5357|   491k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|   491k|    {
 5359|   491k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|   491k|    {
 5370|   491k|        return {detail::make_arg<
 5371|   491k|            kind, Context,
 5372|   491k|            mapped_type_constant<remove_cvref_t<A>,
 5373|   491k|                                 typename Context::char_type>::value>(args)...};
 5374|   491k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE16EfvEEPvRT2_:
 5179|   491k|{
 5180|   491k|    return make_value<Context>(value).ref_value;
 5181|   491k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEfEEDaRT0_:
 5129|   536k|{
 5130|   536k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|   536k|                                  needs_context_tag>) {
 5134|   536k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   536k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|   536k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERf:
 4968|   536k|    {                                                                        \
 4969|   536k|        return val;                                                          \
 4970|   536k|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8600|   401k|{
 8601|   401k|    auto buffer = make_scan_buffer(range);
 8602|       |
 8603|   401k|    auto result = vscan_impl(buffer, format, args);
 8604|   401k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   401k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 117k, False: 283k]
  |  |  ------------------
  ------------------
 8605|   117k|        return unexpected(result.error());
 8606|   117k|    }
 8607|   283k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   283k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8608|   401k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 4728|   881k|{
 4729|   881k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4730|       |
 4731|   881k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4732|   881k|                  "\n"
 4733|   881k|                  "Unsupported range type given as input to a scanning "
 4734|   881k|                  "function.\n"
 4735|   881k|                  "A range needs to have a character type (value type) "
 4736|   881k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4737|   881k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4738|   881k|                  "to be included.\n"
 4739|   881k|                  "See the scnlib documentation for more details.");
 4740|   881k|    static_assert(
 4741|   881k|        !std::is_same_v<T, custom_char_traits>,
 4742|   881k|        "\n"
 4743|   881k|        "Unsupported range type given as input to a scanning "
 4744|   881k|        "function.\n"
 4745|   881k|        "String types (std::basic_string, and std::basic_string_view) "
 4746|   881k|        "need to use std::char_traits. Strings with custom Traits are "
 4747|   881k|        "not supported.");
 4748|   881k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4749|   881k|                  "\n"
 4750|   881k|                  "Unsupported range type given as input to a scanning "
 4751|   881k|                  "function.\n"
 4752|   881k|                  "file_marker_found cannot be used as an "
 4753|   881k|                  "source range type to scn::scan.\n"
 4754|   881k|                  "To read from stdin, use scn::input or scn::prompt, "
 4755|   881k|                  "and do not provide an explicit source range, "
 4756|   881k|                  "or use scn::scan with a FILE* directly.");
 4757|   881k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4758|   881k|                  "\n"
 4759|   881k|                  "Unsupported range type given as input to a scanning "
 4760|   881k|                  "function.\n"
 4761|   881k|                  "In order to be scannable, a range needs to satisfy "
 4762|   881k|                  "`forward_range`. `input_range` is not sufficient.");
 4763|   881k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4764|   881k|                  "\n"
 4765|   881k|                  "Unsupported range type given as input to a scanning "
 4766|   881k|                  "function.\n"
 4767|   881k|                  "A range needs to model forward_range and have a valid "
 4768|   881k|                  "character type (char or wchar_t) to be scannable.\n"
 4769|   881k|                  "Examples of scannable ranges are std::string, "
 4770|   881k|                  "std::string_view, "
 4771|   881k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4772|   881k|                  "See the scnlib documentation for more details.");
 4773|       |
 4774|   881k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4775|   881k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 4667|   881k|{
 4668|   881k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 4669|   881k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4670|       |    }
 4671|       |    else {
 4672|       |        return invalid_char_type{};
 4673|       |    }
 4674|   881k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   881k|    {
 2855|   881k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   881k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   881k|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   881k|    {
 2836|   881k|        return t.data();
 2837|   881k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3228|   881k|    {
 3229|   881k|        return detail::to_address(ranges::begin(derived()));
 3230|   881k|    }
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  2.90M|{
  326|  2.90M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  2.90M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  2.90M|}
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  303|  2.90M|{
  304|  2.90M|    return p;
  305|  2.90M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.50M|    {
 2724|  1.50M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.50M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.50M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.50M|    {
 2705|  1.50M|        return decay_copy(t.begin());
 2706|  1.50M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3325|  31.4M|    {
 3326|  31.4M|        return m_iterator;
 3327|  31.4M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3184|   881k|    {
 3185|   881k|        return static_cast<const D&>(*this);
 3186|   881k|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|   881k|    {
 2930|   881k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|   881k|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|   881k|    {
 2896|   881k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|   881k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|   881k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3341|  3.96M|    {
 3342|  3.96M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3343|  3.96M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1473|   255k|        : base(unexpect, std::move(e.error())),
 1474|   255k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   255k|    {
 1476|   255k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|   255k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   255k|          m_has_value(false)
  446|   255k|    {
  447|   255k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   881k|    {
 1177|   881k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5932|   626k|{
 5933|       |    if constexpr (ranges::random_access_iterator<
 5934|   626k|                      ranges::iterator_t<SourceRange>>) {
 5935|   626k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5936|       |    }
 5937|       |    else {
 5938|       |        auto it = ranges::begin(source);
 5939|       |        while (n > 0) {
 5940|       |            --n;
 5941|       |            ++it;
 5942|       |        }
 5943|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5944|       |    }
 5945|   626k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.70M|    {
 2724|  1.70M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.70M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.70M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.70M|    {
 2705|  1.70M|        return decay_copy(t.begin());
 2706|  1.70M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 5919|   626k|{
 5920|   626k|    return ranges::end(source);
 5921|   626k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   626k|    {
 2781|   626k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   626k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   626k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   626k|    {
 2763|   626k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   626k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   626k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3329|  18.2M|    {
 3330|  18.2M|        return m_sentinel;
 3331|  18.2M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|   626k|        : base(std::in_place, std::forward<U>(val)),
 1428|   626k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   626k|    {
 1430|   626k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  435|   626k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   626k|    {
  437|   626k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7984|   245k|    {
 7985|   245k|        return m_str;
 7986|   245k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJfEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|   491k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|   491k|    {
 5436|   491k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE12arg_pointersEv:
 5388|   491k|    {
 5389|   491k|        return m_argptrs;
 5390|   491k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5486|  1.60M|        : m_desc(desc), m_builtin_values(data)
 5487|  1.60M|    {
 5488|  1.60M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8829|   245k|{
 8830|   245k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   245k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 78.5k, False: 167k]
  |  |  ------------------
  ------------------
 8831|  78.5k|        return unexpected(result.error());
 8832|  78.5k|    }
 8833|   167k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   167k|    static_cast<    \
  |  |  929|   167k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   167k|    static_cast<    \
  |  |  929|   167k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|   245k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1597|   881k|    {
 1598|   881k|        return has_value();
 1599|   881k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.76M|    {
  485|  1.76M|        return m_has_value;
  486|  1.76M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1603|   255k|    {
 1604|   255k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   255k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   255k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   255k|        return this->get_unexpected().error();
 1606|   255k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   255k|    {
  468|   255k|        return m_unexpected;
  469|   255k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  85.0k|        : base(unexpect, std::move(e.error())),
 1474|  85.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  85.0k|    {
 1476|  85.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  85.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  85.0k|          m_has_value(false)
  446|  85.0k|    {
  447|  85.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   268k|    {
 1177|   268k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1652|   567k|    {
 1653|   567k|        return value();
 1654|   567k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|   626k|    {
 1627|   626k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   626k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   626k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   626k|        return this->get_value();
 1629|   626k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   626k|    {
  451|   626k|        return m_value;
  452|   626k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2ES8_ONSt3__15tupleIJfEEE:
 5838|   183k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   183k|    static_cast<    \
  |  |  929|   183k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   183k|    static_cast<    \
  |  |  929|   183k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   183k|    {
 5840|   183k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5689|   626k|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|   626k|    static_cast<    \
  |  |  929|   626k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5690|   626k|    {
 5691|   626k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|   183k|        : base(std::in_place, std::forward<U>(val)),
 1428|   183k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   183k|    {
 1430|   183k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|   183k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   183k|    {
  437|   183k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE4argsEv:
 5383|   491k|    {
 5384|   491k|        return m_args;
 5385|   491k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3310|  11.2M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  11.2M|    static_cast<    \
  |  |  929|  11.2M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  11.2M|    static_cast<    \
  |  |  929|  11.2M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  11.2M|    {
 3312|  11.2M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7705|  1.60M|{
 7706|  1.60M|    return s;
 7707|  1.60M|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7677|  1.60M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7979|   245k|        : m_str(r.str)
 7980|   245k|    {
 7981|   245k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   268k|    {
 1598|   268k|        return has_value();
 1599|   268k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   452k|    {
  485|   452k|        return m_has_value;
  486|   452k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEptEv:
 1672|   183k|    {
 1673|   183k|        return &value();
 1674|   183k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|   183k|    {
 1627|   183k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   183k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   183k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   183k|        return this->get_value();
 1629|   183k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   183k|    {
  451|   183k|        return m_value;
  452|   183k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 5707|   626k|    {
 5708|   626k|        return ranges::begin(m_range);
 5709|   626k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8616|   401k|{
 8617|   401k|#if !SCN_DISABLE_LOCALE
 8618|   401k|    auto buffer = detail::make_scan_buffer(range);
 8619|       |
 8620|   401k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8621|   401k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8622|   401k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8623|       |
 8624|   401k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   401k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 117k, False: 283k]
  |  |  ------------------
  ------------------
 8625|   117k|        return unexpected(result.error());
 8626|   117k|    }
 8627|   283k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   283k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8628|       |#else
 8629|       |    static_assert(dependent_false<Locale>::value,
 8630|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8631|       |
 8632|       |    return {};
 8633|       |#endif
 8634|   401k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEfEENS0_14basic_scan_argIT_EERT0_:
 5164|  45.3k|{
 5165|  45.3k|    check_scan_arg_types<T>();
 5166|       |
 5167|  45.3k|    basic_scan_arg<Context> arg;
 5168|  45.3k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  45.3k|    arg.m_value = make_value<Context>(value);
 5170|  45.3k|    return arg;
 5171|  45.3k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5250|  1.76M|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8640|  78.9k|{
 8641|  78.9k|    auto buffer = detail::make_scan_buffer(range);
 8642|       |
 8643|  78.9k|    auto result = detail::vscan_value_impl(buffer, arg);
 8644|  78.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  78.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.6k, False: 59.3k]
  |  |  ------------------
  ------------------
 8645|  19.6k|        return unexpected(result.error());
 8646|  19.6k|    }
 8647|  59.3k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  59.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8648|  78.9k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1662|  59.3k|    {
 1663|  59.3k|        return std::move(value());
 1664|  59.3k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJdEEEDav:
 5405|   551k|{
 5406|   551k|    detail::check_scan_arg_types<Args...>();
 5407|   551k|    return detail::scan_arg_store<Context, Args...>{};
 5408|   551k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEEC2Ev:
 5357|   551k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|   551k|    {
 5359|   551k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|   551k|    {
 5370|   551k|        return {detail::make_arg<
 5371|   551k|            kind, Context,
 5372|   551k|            mapped_type_constant<remove_cvref_t<A>,
 5373|   551k|                                 typename Context::char_type>::value>(args)...};
 5374|   551k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE17EdvEEPvRT2_:
 5179|   551k|{
 5180|   551k|    return make_value<Context>(value).ref_value;
 5181|   551k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEdEEDaRT0_:
 5129|   606k|{
 5130|   606k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|   606k|                                  needs_context_tag>) {
 5134|   606k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   606k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|   606k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERd:
 4968|   606k|    {                                                                        \
 4969|   606k|        return val;                                                          \
 4970|   606k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7984|   275k|    {
 7985|   275k|        return m_str;
 7986|   275k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|   551k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|   551k|    {
 5436|   551k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12arg_pointersEv:
 5388|   551k|    {
 5389|   551k|        return m_argptrs;
 5390|   551k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8829|   275k|{
 8830|   275k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   275k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 78.5k, False: 197k]
  |  |  ------------------
  ------------------
 8831|  78.5k|        return unexpected(result.error());
 8832|  78.5k|    }
 8833|   197k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   197k|    static_cast<    \
  |  |  929|   197k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   197k|    static_cast<    \
  |  |  929|   197k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|   275k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  85.0k|        : base(unexpect, std::move(e.error())),
 1474|  85.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  85.0k|    {
 1476|  85.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  85.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  85.0k|          m_has_value(false)
  446|  85.0k|    {
  447|  85.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   303k|    {
 1177|   303k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2ES8_ONSt3__15tupleIJdEEE:
 5838|   218k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   218k|    static_cast<    \
  |  |  929|   218k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   218k|    static_cast<    \
  |  |  929|   218k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   218k|    {
 5840|   218k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|   218k|        : base(std::in_place, std::forward<U>(val)),
 1428|   218k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   218k|    {
 1430|   218k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|   218k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   218k|    {
  437|   218k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE4argsEv:
 5383|   551k|    {
 5384|   551k|        return m_args;
 5385|   551k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7979|   275k|        : m_str(r.str)
 7980|   275k|    {
 7981|   275k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   303k|    {
 1598|   303k|        return has_value();
 1599|   303k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   522k|    {
  485|   522k|        return m_has_value;
  486|   522k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEptEv:
 1672|   218k|    {
 1673|   218k|        return &value();
 1674|   218k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|   218k|    {
 1627|   218k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   218k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   218k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   218k|        return this->get_value();
 1629|   218k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   218k|    {
  451|   218k|        return m_value;
  452|   218k|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEdEENS0_14basic_scan_argIT_EERT0_:
 5164|  55.3k|{
 5165|  55.3k|    check_scan_arg_types<T>();
 5166|       |
 5167|  55.3k|    basic_scan_arg<Context> arg;
 5168|  55.3k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  55.3k|    arg.m_value = make_value<Context>(value);
 5170|  55.3k|    return arg;
 5171|  55.3k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJeEEEDav:
 5405|   562k|{
 5406|   562k|    detail::check_scan_arg_types<Args...>();
 5407|   562k|    return detail::scan_arg_store<Context, Args...>{};
 5408|   562k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEEC2Ev:
 5357|   562k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|   562k|    {
 5359|   562k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|   562k|    {
 5370|   562k|        return {detail::make_arg<
 5371|   562k|            kind, Context,
 5372|   562k|            mapped_type_constant<remove_cvref_t<A>,
 5373|   562k|                                 typename Context::char_type>::value>(args)...};
 5374|   562k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE18EevEEPvRT2_:
 5179|   562k|{
 5180|   562k|    return make_value<Context>(value).ref_value;
 5181|   562k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEeEEDaRT0_:
 5129|   619k|{
 5130|   619k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|   619k|                                  needs_context_tag>) {
 5134|   619k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   619k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|   619k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERe:
 4968|   619k|    {                                                                        \
 4969|   619k|        return val;                                                          \
 4970|   619k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7984|   281k|    {
 7985|   281k|        return m_str;
 7986|   281k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJeEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|   562k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|   562k|    {
 5436|   562k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE12arg_pointersEv:
 5388|   562k|    {
 5389|   562k|        return m_argptrs;
 5390|   562k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8829|   281k|{
 8830|   281k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   281k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 78.5k, False: 202k]
  |  |  ------------------
  ------------------
 8831|  78.5k|        return unexpected(result.error());
 8832|  78.5k|    }
 8833|   202k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   202k|    static_cast<    \
  |  |  929|   202k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   202k|    static_cast<    \
  |  |  929|   202k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|   281k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  85.0k|        : base(unexpect, std::move(e.error())),
 1474|  85.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  85.0k|    {
 1476|  85.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  85.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  85.0k|          m_has_value(false)
  446|  85.0k|    {
  447|  85.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   309k|    {
 1177|   309k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2ES8_ONSt3__15tupleIJeEEE:
 5838|   224k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   224k|    static_cast<    \
  |  |  929|   224k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   224k|    static_cast<    \
  |  |  929|   224k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   224k|    {
 5840|   224k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|   224k|        : base(std::in_place, std::forward<U>(val)),
 1428|   224k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   224k|    {
 1430|   224k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|   224k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   224k|    {
  437|   224k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE4argsEv:
 5383|   562k|    {
 5384|   562k|        return m_args;
 5385|   562k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7979|   281k|        : m_str(r.str)
 7980|   281k|    {
 7981|   281k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   309k|    {
 1598|   309k|        return has_value();
 1599|   309k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   534k|    {
  485|   534k|        return m_has_value;
  486|   534k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEptEv:
 1672|   224k|    {
 1673|   224k|        return &value();
 1674|   224k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|   224k|    {
 1627|   224k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   224k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   224k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   224k|        return this->get_value();
 1629|   224k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   224k|    {
  451|   224k|        return m_value;
  452|   224k|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEeEENS0_14basic_scan_argIT_EERT0_:
 5164|  57.0k|{
 5165|  57.0k|    check_scan_arg_types<T>();
 5166|       |
 5167|  57.0k|    basic_scan_arg<Context> arg;
 5168|  57.0k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  57.0k|    arg.m_value = make_value<Context>(value);
 5170|  57.0k|    return arg;
 5171|  57.0k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   255k|    {
 2724|   255k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   255k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   255k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   255k|    {
 2705|   255k|        return decay_copy(t.begin());
 2706|   255k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 1948|  17.5M|{
 1949|  17.5M|    return SCN_FWD(t);
  ------------------
  |  |  930|  17.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  17.5M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.76M|    {
 2781|  1.76M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.76M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.76M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.76M|    {
 2763|  1.76M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.76M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.76M|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8600|   401k|{
 8601|   401k|    auto buffer = make_scan_buffer(range);
 8602|       |
 8603|   401k|    auto result = vscan_impl(buffer, format, args);
 8604|   401k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   401k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 117k, False: 283k]
  |  |  ------------------
  ------------------
 8605|   117k|        return unexpected(result.error());
 8606|   117k|    }
 8607|   283k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   283k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8608|   401k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4728|   881k|{
 4729|   881k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4730|       |
 4731|   881k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4732|   881k|                  "\n"
 4733|   881k|                  "Unsupported range type given as input to a scanning "
 4734|   881k|                  "function.\n"
 4735|   881k|                  "A range needs to have a character type (value type) "
 4736|   881k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4737|   881k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4738|   881k|                  "to be included.\n"
 4739|   881k|                  "See the scnlib documentation for more details.");
 4740|   881k|    static_assert(
 4741|   881k|        !std::is_same_v<T, custom_char_traits>,
 4742|   881k|        "\n"
 4743|   881k|        "Unsupported range type given as input to a scanning "
 4744|   881k|        "function.\n"
 4745|   881k|        "String types (std::basic_string, and std::basic_string_view) "
 4746|   881k|        "need to use std::char_traits. Strings with custom Traits are "
 4747|   881k|        "not supported.");
 4748|   881k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4749|   881k|                  "\n"
 4750|   881k|                  "Unsupported range type given as input to a scanning "
 4751|   881k|                  "function.\n"
 4752|   881k|                  "file_marker_found cannot be used as an "
 4753|   881k|                  "source range type to scn::scan.\n"
 4754|   881k|                  "To read from stdin, use scn::input or scn::prompt, "
 4755|   881k|                  "and do not provide an explicit source range, "
 4756|   881k|                  "or use scn::scan with a FILE* directly.");
 4757|   881k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4758|   881k|                  "\n"
 4759|   881k|                  "Unsupported range type given as input to a scanning "
 4760|   881k|                  "function.\n"
 4761|   881k|                  "In order to be scannable, a range needs to satisfy "
 4762|   881k|                  "`forward_range`. `input_range` is not sufficient.");
 4763|   881k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4764|   881k|                  "\n"
 4765|   881k|                  "Unsupported range type given as input to a scanning "
 4766|   881k|                  "function.\n"
 4767|   881k|                  "A range needs to model forward_range and have a valid "
 4768|   881k|                  "character type (char or wchar_t) to be scannable.\n"
 4769|   881k|                  "Examples of scannable ranges are std::string, "
 4770|   881k|                  "std::string_view, "
 4771|   881k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4772|   881k|                  "See the scnlib documentation for more details.");
 4773|       |
 4774|   881k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4775|   881k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4698|   881k|{
 4699|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 4700|       |        return file_marker_found{};
 4701|       |    }
 4702|       |    else if constexpr (!ranges::forward_range<Range>) {
 4703|       |        if constexpr (ranges::range<Range>) {
 4704|       |            return insufficient_range{};
 4705|       |        }
 4706|       |        else {
 4707|       |            return invalid_input_range{};
 4708|       |        }
 4709|       |    }
 4710|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 4711|       |        return invalid_char_type{};
 4712|       |    }
 4713|   881k|    else {
 4714|   881k|        return make_forward_scan_buffer(r);
 4715|   881k|    }
 4716|   881k|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4532|   881k|{
 4533|   881k|    return basic_scan_forward_buffer_impl(range);
 4534|   881k|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4417|   881k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  930|   881k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4418|   881k|          m_cursor(ranges::begin(*m_range))
 4419|   881k|    {
 4420|   881k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4389|   881k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4390|   881k|    {
 4391|   881k|    }
_ZN3scn2v36detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4157|   881k|        : m_current_view(sv), m_is_contiguous(false)
 4158|   881k|    {
 4159|   881k|    }
_ZN3scn2v36detail17basic_scan_bufferIwED2Ev:
 4073|   881k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.50M|    {
 2724|  1.50M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.50M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.50M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.50M|    {
 2705|  1.50M|        return decay_copy(t.begin());
 2706|  1.50M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3325|  2.13M|    {
 3326|  2.13M|        return m_iterator;
 3327|  2.13M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4423|  4.40M|    {
 4424|  4.40M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4424:13): [True: 199k, False: 4.20M]
  ------------------
 4425|   199k|            return false;
 4426|   199k|        }
 4427|  4.20M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4428|  4.20M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  4.20M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.20M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4429|  4.20M|        }
 4430|  4.20M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4430:13): [True: 3.32M, False: 879k]
  ------------------
 4431|  3.32M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4432|  3.32M|                                          this->m_current_view.begin(),
 4433|  3.32M|                                          this->m_current_view.end());
 4434|  3.32M|        }
 4435|  4.20M|        m_latest = *m_cursor;
 4436|  4.20M|        ++m_cursor;
 4437|  4.20M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4438|  4.20M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4439|  4.20M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  4.20M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.20M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4440|  4.20M|        }
 4441|  4.20M|        return true;
 4442|  4.40M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  12.8M|    {
 2781|  12.8M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  12.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  12.8M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  12.8M|    {
 2763|  12.8M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  12.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  12.8M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3329|  13.4M|    {
 3330|  13.4M|        return m_sentinel;
 3331|  13.4M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE4syncEl:
 4078|   881k|    {
 4079|   881k|        SCN_UNUSED(position);
  ------------------
  |  |  909|   881k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4080|   881k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1473|   255k|        : base(unexpect, std::move(e.error())),
 1474|   255k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   255k|    {
 1476|   255k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  444|   255k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   255k|          m_has_value(false)
  446|   255k|    {
  447|   255k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   881k|    {
 1177|   881k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5932|   625k|{
 5933|       |    if constexpr (ranges::random_access_iterator<
 5934|   625k|                      ranges::iterator_t<SourceRange>>) {
 5935|   625k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5936|       |    }
 5937|       |    else {
 5938|       |        auto it = ranges::begin(source);
 5939|       |        while (n > 0) {
 5940|       |            --n;
 5941|       |            ++it;
 5942|       |        }
 5943|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5944|       |    }
 5945|   625k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   625k|    {
 2724|   625k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   625k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   625k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   625k|    {
 2705|   625k|        return decay_copy(t.begin());
 2706|   625k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 5919|   625k|{
 5920|   625k|    return ranges::end(source);
 5921|   625k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   625k|    {
 2781|   625k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   625k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   625k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   625k|    {
 2763|   625k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   625k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   625k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1427|   625k|        : base(std::in_place, std::forward<U>(val)),
 1428|   625k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   625k|    {
 1430|   625k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  435|   625k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   625k|    {
  437|   625k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7984|   245k|    {
 7985|   245k|        return m_str;
 7986|   245k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8829|   245k|{
 8830|   245k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   245k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 78.5k, False: 167k]
  |  |  ------------------
  ------------------
 8831|  78.5k|        return unexpected(result.error());
 8832|  78.5k|    }
 8833|   167k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   167k|    static_cast<    \
  |  |  929|   167k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   167k|    static_cast<    \
  |  |  929|   167k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|   245k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1597|   881k|    {
 1598|   881k|        return has_value();
 1599|   881k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.76M|    {
  485|  1.76M|        return m_has_value;
  486|  1.76M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1603|   255k|    {
 1604|   255k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   255k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   255k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   255k|        return this->get_unexpected().error();
 1606|   255k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   255k|    {
  468|   255k|        return m_unexpected;
  469|   255k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  85.0k|        : base(unexpect, std::move(e.error())),
 1474|  85.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  85.0k|    {
 1476|  85.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  85.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  85.0k|          m_has_value(false)
  446|  85.0k|    {
  447|  85.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   268k|    {
 1177|   268k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1652|   566k|    {
 1653|   566k|        return value();
 1654|   566k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1626|   625k|    {
 1627|   625k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   625k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   625k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   625k|        return this->get_value();
 1629|   625k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   625k|    {
  451|   625k|        return m_value;
  452|   625k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2ESE_ONS6_5tupleIJfEEE:
 5838|   183k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   183k|    static_cast<    \
  |  |  929|   183k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   183k|    static_cast<    \
  |  |  929|   183k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   183k|    {
 5840|   183k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2EOSF_:
 5689|   625k|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|   625k|    static_cast<    \
  |  |  929|   625k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5690|   625k|    {
 5691|   625k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|   183k|        : base(std::in_place, std::forward<U>(val)),
 1428|   183k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   183k|    {
 1430|   183k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|   183k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   183k|    {
  437|   183k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3310|  1.50M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.50M|    static_cast<    \
  |  |  929|  1.50M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.50M|    static_cast<    \
  |  |  929|  1.50M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  1.50M|    {
 3312|  1.50M|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7979|   245k|        : m_str(r.str)
 7980|   245k|    {
 7981|   245k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   268k|    {
 1598|   268k|        return has_value();
 1599|   268k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   451k|    {
  485|   451k|        return m_has_value;
  486|   451k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1672|   183k|    {
 1673|   183k|        return &value();
 1674|   183k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|   183k|    {
 1627|   183k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   183k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   183k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   183k|        return this->get_value();
 1629|   183k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   183k|    {
  451|   183k|        return m_value;
  452|   183k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 5707|   625k|    {
 5708|   625k|        return ranges::begin(m_range);
 5709|   625k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8616|   401k|{
 8617|   401k|#if !SCN_DISABLE_LOCALE
 8618|   401k|    auto buffer = detail::make_scan_buffer(range);
 8619|       |
 8620|   401k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8621|   401k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8622|   401k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8623|       |
 8624|   401k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   401k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 117k, False: 283k]
  |  |  ------------------
  ------------------
 8625|   117k|        return unexpected(result.error());
 8626|   117k|    }
 8627|   283k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   283k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8628|       |#else
 8629|       |    static_assert(dependent_false<Locale>::value,
 8630|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8631|       |
 8632|       |    return {};
 8633|       |#endif
 8634|   401k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8640|  78.8k|{
 8641|  78.8k|    auto buffer = detail::make_scan_buffer(range);
 8642|       |
 8643|  78.8k|    auto result = detail::vscan_value_impl(buffer, arg);
 8644|  78.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  78.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.6k, False: 59.2k]
  |  |  ------------------
  ------------------
 8645|  19.6k|        return unexpected(result.error());
 8646|  19.6k|    }
 8647|  59.2k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  59.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8648|  78.8k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSJ_v:
 1662|  59.2k|    {
 1663|  59.2k|        return std::move(value());
 1664|  59.2k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7984|   275k|    {
 7985|   275k|        return m_str;
 7986|   275k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8829|   275k|{
 8830|   275k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   275k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 78.5k, False: 197k]
  |  |  ------------------
  ------------------
 8831|  78.5k|        return unexpected(result.error());
 8832|  78.5k|    }
 8833|   197k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   197k|    static_cast<    \
  |  |  929|   197k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   197k|    static_cast<    \
  |  |  929|   197k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|   275k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  85.0k|        : base(unexpect, std::move(e.error())),
 1474|  85.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  85.0k|    {
 1476|  85.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  85.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  85.0k|          m_has_value(false)
  446|  85.0k|    {
  447|  85.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   303k|    {
 1177|   303k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2ESE_ONS6_5tupleIJdEEE:
 5838|   218k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   218k|    static_cast<    \
  |  |  929|   218k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   218k|    static_cast<    \
  |  |  929|   218k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   218k|    {
 5840|   218k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|   218k|        : base(std::in_place, std::forward<U>(val)),
 1428|   218k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   218k|    {
 1430|   218k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|   218k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   218k|    {
  437|   218k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7979|   275k|        : m_str(r.str)
 7980|   275k|    {
 7981|   275k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   303k|    {
 1598|   303k|        return has_value();
 1599|   303k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   521k|    {
  485|   521k|        return m_has_value;
  486|   521k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1672|   218k|    {
 1673|   218k|        return &value();
 1674|   218k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|   218k|    {
 1627|   218k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   218k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   218k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   218k|        return this->get_value();
 1629|   218k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   218k|    {
  451|   218k|        return m_value;
  452|   218k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7984|   280k|    {
 7985|   280k|        return m_str;
 7986|   280k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8829|   280k|{
 8830|   280k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   280k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 78.5k, False: 202k]
  |  |  ------------------
  ------------------
 8831|  78.5k|        return unexpected(result.error());
 8832|  78.5k|    }
 8833|   202k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   202k|    static_cast<    \
  |  |  929|   202k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   202k|    static_cast<    \
  |  |  929|   202k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|   280k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  85.0k|        : base(unexpect, std::move(e.error())),
 1474|  85.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  85.0k|    {
 1476|  85.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  85.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  85.0k|          m_has_value(false)
  446|  85.0k|    {
  447|  85.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   309k|    {
 1177|   309k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2ESE_ONS6_5tupleIJeEEE:
 5838|   224k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   224k|    static_cast<    \
  |  |  929|   224k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   224k|    static_cast<    \
  |  |  929|   224k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   224k|    {
 5840|   224k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|   224k|        : base(std::in_place, std::forward<U>(val)),
 1428|   224k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   224k|    {
 1430|   224k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|   224k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   224k|    {
  437|   224k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7979|   280k|        : m_str(r.str)
 7980|   280k|    {
 7981|   280k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   309k|    {
 1598|   309k|        return has_value();
 1599|   309k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   533k|    {
  485|   533k|        return m_has_value;
  486|   533k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1672|   224k|    {
 1673|   224k|        return &value();
 1674|   224k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|   224k|    {
 1627|   224k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   224k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   224k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   224k|        return this->get_value();
 1629|   224k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   224k|    {
  451|   224k|        return m_value;
  452|   224k|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3562|  5.72M|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3563|  5.72M|    {
 3564|  5.72M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  5.72M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3565|  5.72M|    }
_ZNK3scn2v310scan_errorcvbEv:
 3569|  23.9M|    {
 3570|  23.9M|        return m_code == good;
 3571|  23.9M|    }
_ZNK3scn2v310scan_error4codeEv:
 3580|   589k|    {
 3581|   589k|        return m_code;
 3582|   589k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3325|  83.3M|    {
 3326|  83.3M|        return m_iterator;
 3327|  83.3M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3325|  37.2M|    {
 3326|  37.2M|        return m_iterator;
 3327|  37.2M|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6269|  3.72M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter12on_localizedEv:
 6281|   997k|    {
 6282|   997k|        if constexpr (!SCN_DISABLE_LOCALE) {
 6283|   997k|            m_specs.localized = true;
 6284|       |        }
 6285|       |        else {
 6286|       |            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 6287|       |        }
 6288|   997k|    }
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6312|  2.73M|    {
 6313|  2.73M|        m_specs.type = type;
 6314|  2.73M|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6385|  3.72M|    {
 6386|  3.72M|        return static_cast<bool>(m_error);
 6387|  3.72M|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3604|   589k|{
 3605|   589k|    return a.code() == b;
 3606|   589k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3608|   589k|{
 3609|   589k|    return !(a == b);
 3610|   589k|}
_ZN3scn2v36detail11is_cp_spaceEDi:
 4042|  7.77M|{
 4043|       |    // Pattern_White_Space property
 4044|  7.77M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4044:13): [True: 7.47M, False: 306k]
  |  Branch (4044:27): [True: 1.45M, False: 6.01M]
  ------------------
 4045|  7.77M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4045:12): [True: 100k, False: 6.21M]
  ------------------
 4046|  7.77M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4046:12): [True: 70.5k, False: 6.14M]
  ------------------
 4047|  7.77M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4047:12): [True: 4.13k, False: 6.14M]
  ------------------
 4048|  7.77M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4048:12): [True: 25.0k, False: 6.11M]
  ------------------
 4049|  7.77M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4049:12): [True: 1.49M, False: 4.62M]
  ------------------
 4050|  7.77M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4050:12): [True: 154, False: 4.62M]
  ------------------
 4051|  7.77M|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7072|   997k|{
 7073|   997k|    switch (type) {
 7074|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7074:9): [True: 0, False: 997k]
  ------------------
 7075|      0|            return arg_type_category::none;
 7076|       |
 7077|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7077:9): [True: 0, False: 997k]
  ------------------
 7078|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7078:9): [True: 0, False: 997k]
  ------------------
 7079|      0|        case arg_type::int_type:
  ------------------
  |  Branch (7079:9): [True: 0, False: 997k]
  ------------------
 7080|      0|        case arg_type::long_type:
  ------------------
  |  Branch (7080:9): [True: 0, False: 997k]
  ------------------
 7081|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (7081:9): [True: 0, False: 997k]
  ------------------
 7082|      0|            return arg_type_category::integer;
 7083|       |
 7084|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7084:9): [True: 0, False: 997k]
  ------------------
 7085|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7085:9): [True: 0, False: 997k]
  ------------------
 7086|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (7086:9): [True: 0, False: 997k]
  ------------------
 7087|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (7087:9): [True: 0, False: 997k]
  ------------------
 7088|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (7088:9): [True: 0, False: 997k]
  ------------------
 7089|      0|            return arg_type_category::unsigned_integer;
 7090|       |
 7091|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7091:9): [True: 0, False: 997k]
  ------------------
 7092|      0|            return arg_type_category::pointer;
 7093|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7093:9): [True: 0, False: 997k]
  ------------------
 7094|      0|            return arg_type_category::boolean;
 7095|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7095:9): [True: 0, False: 997k]
  ------------------
 7096|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7096:9): [True: 0, False: 997k]
  ------------------
 7097|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7097:9): [True: 0, False: 997k]
  ------------------
 7098|      0|            return arg_type_category::character;
 7099|       |
 7100|   308k|        case arg_type::float_type:
  ------------------
  |  Branch (7100:9): [True: 308k, False: 688k]
  ------------------
 7101|   649k|        case arg_type::double_type:
  ------------------
  |  Branch (7101:9): [True: 340k, False: 656k]
  ------------------
 7102|   997k|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7102:9): [True: 348k, False: 649k]
  ------------------
 7103|   997k|            return arg_type_category::floating;
 7104|       |
 7105|      0|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7105:9): [True: 0, False: 997k]
  ------------------
 7106|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7106:9): [True: 0, False: 997k]
  ------------------
 7107|      0|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7107:9): [True: 0, False: 997k]
  ------------------
 7108|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7108:9): [True: 0, False: 997k]
  ------------------
 7109|      0|            return arg_type_category::string;
 7110|       |
 7111|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7111:9): [True: 0, False: 997k]
  ------------------
 7112|      0|            return arg_type_category::custom;
 7113|       |
 7114|      0|            SCN_CLANG_PUSH
 7115|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7116|      0|        default:
  ------------------
  |  Branch (7116:9): [True: 0, False: 997k]
  ------------------
 7117|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7118|   997k|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7119|   997k|            SCN_CLANG_POP
 7120|   997k|    }
 7121|       |
 7122|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7123|   997k|}
_ZN3scn2v36ranges6detail5size_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|  4.40M|    {
 2896|  4.40M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  4.40M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|  4.40M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSE_:
 2929|  4.40M|    {
 2930|  4.40M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|  4.40M|    }
_ZN3scn2v36ranges6detail6ssize_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISE_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSE_:
 2952|  4.40M|    {
 2953|  4.40M|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 2954|  4.40M|    }
_ZNK3scn2v36ranges6detail6ssize_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSE_:
 2961|  4.40M|    {
 2962|  4.40M|        return fn::impl(std::forward<T>(t));
 2963|  4.40M|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA20_KcEEEDaDpOT_:
 3649|  1.05k|{
 3650|  1.05k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.05k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  1.05k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
 3649|  3.40k|{
 3650|  3.40k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  3.40k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  3.40k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA38_KcEEEDaDpOT_:
 3649|  44.3k|{
 3650|  44.3k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  44.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  44.3k|}
_ZN3scn2v36detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7202|  3.72M|{
 7203|  3.72M|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7203:9): [True: 2.73M, False: 997k]
  ------------------
 7204|  3.72M|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (7204:10): [True: 0, False: 2.73M]
  ------------------
 7205|  2.73M|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (7205:10): [True: 0, False: 2.73M]
  ------------------
 7206|      0|        SCN_UNLIKELY_ATTR
 7207|      0|        return handler.on_error("Invalid type specifier for float type");
 7208|      0|    }
 7209|  3.72M|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4202|   532M|    {
 4203|   532M|        assert(m_begin);
 4204|   532M|        return m_end == nullptr;
 4205|   532M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3710|  1.41M|{
 3711|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3712|       |                                          const CharT*, const CharT*>) {
 3713|       |        return {first, last};
 3714|       |    }
 3715|  1.41M|    else {
 3716|  1.41M|        return {first, static_cast<size_t>(std::distance(first, last))};
 3717|  1.41M|    }
 3718|  1.41M|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4219|  6.93M|    {
 4220|  6.93M|        if (!stores_parent()) {
  ------------------
  |  Branch (4220:13): [True: 0, False: 6.93M]
  ------------------
 4221|      0|            return make_string_view_from_pointers(
 4222|      0|                static_cast<const CharT*>(m_begin) + position(),
 4223|      0|                static_cast<const CharT*>(m_end));
 4224|      0|        }
 4225|  6.93M|        return parent()->get_segment_starting_at(position());
 4226|  6.93M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4213|   296M|    {
 4214|   296M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|   296M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   296M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4215|   296M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4216|   296M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4108|  6.93M|    {
 4109|  6.93M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  6.93M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.03M, False: 3.89M]
  |  |  ------------------
  ------------------
 4110|  6.93M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4111|  3.03M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4112|  3.03M|        }
 4113|  3.89M|        const auto start = pos - m_putback_buffer.size();
 4114|  3.89M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|  3.89M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.89M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4115|  3.89M|        return m_current_view.substr(start);
 4116|  3.89M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4208|  4.83M|    {
 4209|  4.83M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  4.83M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.83M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4210|  4.83M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4211|  4.83M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4197|  12.7M|    {
 4198|  12.7M|        return m_position;
 4199|  12.7M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE13is_contiguousEv:
 4130|  5.50M|    {
 4131|  5.50M|        return m_is_contiguous;
 4132|  5.50M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4202|   119M|    {
 4203|   119M|        assert(m_begin);
 4204|   119M|        return m_end == nullptr;
 4205|   119M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3710|   609k|{
 3711|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3712|       |                                          const CharT*, const CharT*>) {
 3713|       |        return {first, last};
 3714|       |    }
 3715|   609k|    else {
 3716|   609k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3717|   609k|    }
 3718|   609k|}
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4219|  2.14M|    {
 4220|  2.14M|        if (!stores_parent()) {
  ------------------
  |  Branch (4220:13): [True: 0, False: 2.14M]
  ------------------
 4221|      0|            return make_string_view_from_pointers(
 4222|      0|                static_cast<const CharT*>(m_begin) + position(),
 4223|      0|                static_cast<const CharT*>(m_end));
 4224|      0|        }
 4225|  2.14M|        return parent()->get_segment_starting_at(position());
 4226|  2.14M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4213|  64.1M|    {
 4214|  64.1M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  64.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  64.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4215|  64.1M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4216|  64.1M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4108|  2.14M|    {
 4109|  2.14M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  2.14M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.23M, False: 903k]
  |  |  ------------------
  ------------------
 4110|  2.14M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4111|  1.23M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4112|  1.23M|        }
 4113|   903k|        const auto start = pos - m_putback_buffer.size();
 4114|   903k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|   903k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   903k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4115|   903k|        return m_current_view.substr(start);
 4116|   903k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4208|  2.32M|    {
 4209|  2.32M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  2.32M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.32M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4210|  2.32M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4211|  2.32M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4197|  4.68M|    {
 4198|  4.68M|        return m_position;
 4199|  4.68M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE13is_contiguousEv:
 4130|  2.64M|    {
 4131|  2.64M|        return m_is_contiguous;
 4132|  2.64M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3179|  7.09M|    {
 3180|  7.09M|        return static_cast<D&>(*this);
 3181|  7.09M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3220|  7.09M|    {
 3221|  7.09M|        return detail::to_address(ranges::begin(derived()));
 3222|  7.09M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3179|   762k|    {
 3180|   762k|        return static_cast<D&>(*this);
 3181|   762k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3220|   762k|    {
 3221|   762k|        return detail::to_address(ranges::begin(derived()));
 3222|   762k|    }
_ZNK3scn2v318basic_scan_contextIcE5rangeEv:
 8178|  1.32M|    {
 8179|  1.32M|        return ranges::subrange{begin(), end()};
 8180|  1.32M|    }
_ZNK3scn2v318basic_scan_contextIcE5beginEv:
 8162|  3.88M|    {
 8163|  3.88M|        return m_current;
 8164|  3.88M|    }
_ZNK3scn2v318basic_scan_contextIcE3endEv:
 8170|  1.32M|    {
 8171|  1.32M|        return ranges::default_sentinel;
 8172|  1.32M|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3310|  20.3M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  20.3M|    static_cast<    \
  |  |  929|  20.3M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  20.3M|    static_cast<    \
  |  |  929|  20.3M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  20.3M|    {
 3312|  20.3M|    }
_ZN3scn2v36detail10locale_refC2Ev:
 8000|  7.92M|    constexpr locale_ref() = default;
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  1.83M|    {
 1837|  1.83M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.83M|                                            std::forward<F>(f));
 1839|  1.83M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|  1.83M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.83M|    else {
 1333|  1.83M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.83M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.83M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.81M, False: 22.6k]
  |  |  ------------------
  ------------------
 1335|  1.83M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.83M|                   : result(unexpect,
 1337|  22.6k|                            trivial_invoke(std::forward<F>(f),
 1338|  22.6k|                                           std::forward<Exp>(exp).error()));
 1339|  1.83M|    }
 1340|  1.83M|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  19.4M|    {
  485|  19.4M|        return m_has_value;
  486|  19.4M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|  6.61M|    {
 1663|  6.61M|        return std::move(value());
 1664|  6.61M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|  7.55M|    {
 1627|  7.55M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  7.55M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.55M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  7.55M|        return this->get_value();
 1629|  7.55M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  7.55M|    {
  451|  7.55M|        return m_value;
  452|  7.55M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1427|  8.15M|        : base(std::in_place, std::forward<U>(val)),
 1428|  8.15M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  8.15M|    {
 1430|  8.15M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  8.15M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  8.15M|    {
  437|  8.15M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  10.3M|    {
 1177|  10.3M|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|  48.4k|{
 1211|  48.4k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  48.4k|}
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  62.5k|    {
 1614|  62.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  62.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  62.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  62.5k|        return std::move(this->get_unexpected().error());
 1616|  62.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  85.8k|    {
  468|  85.8k|        return m_unexpected;
  469|  85.8k|    }
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  360|   480k|    {
  361|   480k|        return m_unexpected;
  362|   480k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1483|  1.82M|        : base(unexpect, std::forward<Args>(args)...),
 1484|  1.82M|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  1.82M|    {
 1486|  1.82M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  2.15M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  2.15M|          m_has_value(false)
  446|  2.15M|    {
  447|  2.15M|    }
_ZNK3scn2v318basic_scan_contextIwE5rangeEv:
 8178|   644k|    {
 8179|   644k|        return ranges::subrange{begin(), end()};
 8180|   644k|    }
_ZNK3scn2v318basic_scan_contextIwE5beginEv:
 8162|  1.73M|    {
 8163|  1.73M|        return m_current;
 8164|  1.73M|    }
_ZNK3scn2v318basic_scan_contextIwE3endEv:
 8170|   644k|    {
 8171|   644k|        return ranges::default_sentinel;
 8172|   644k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3310|  9.04M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  9.04M|    static_cast<    \
  |  |  929|  9.04M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  9.04M|    static_cast<    \
  |  |  929|  9.04M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  9.04M|    {
 3312|  9.04M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|   881k|    {
 1837|   881k|        return detail::transform_error_impl(std::move(*this),
 1838|   881k|                                            std::forward<F>(f));
 1839|   881k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|   881k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   881k|    else {
 1333|   881k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   881k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   881k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 877k, False: 3.85k]
  |  |  ------------------
  ------------------
 1335|   881k|                   ? result(*std::forward<Exp>(exp))
 1336|   881k|                   : result(unexpect,
 1337|  3.85k|                            trivial_invoke(std::forward<F>(f),
 1338|  3.85k|                                           std::forward<Exp>(exp).error()));
 1339|   881k|    }
 1340|   881k|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  8.51M|    {
  485|  8.51M|        return m_has_value;
  486|  8.51M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|  3.13M|    {
 1663|  3.13M|        return std::move(value());
 1664|  3.13M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|  3.16M|    {
 1627|  3.16M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.16M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.16M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.16M|        return this->get_value();
 1629|  3.16M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  3.16M|    {
  451|  3.16M|        return m_value;
  452|  3.16M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1427|  3.21M|        : base(std::in_place, std::forward<U>(val)),
 1428|  3.21M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  3.21M|    {
 1430|  3.21M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  3.21M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  3.21M|    {
  437|  3.21M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  5.03M|    {
 1177|  5.03M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  63.9k|    {
 1614|  63.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  63.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  63.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  63.9k|        return std::move(this->get_unexpected().error());
 1616|  63.9k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  66.0k|    {
  468|  66.0k|        return m_unexpected;
  469|  66.0k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1483|  1.12M|        : base(unexpect, std::forward<Args>(args)...),
 1484|  1.12M|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  1.12M|    {
 1486|  1.12M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  1.82M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.82M|          m_has_value(false)
  446|  1.82M|    {
  447|  1.82M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  345|   231k|        : m_unexpected(std::forward<Err>(e))
  346|   231k|    {
  347|   231k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   231k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   231k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1473|   287k|        : base(unexpect, std::move(e.error())),
 1474|   287k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   287k|    {
 1476|   287k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  444|  1.81M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.81M|          m_has_value(false)
  446|  1.81M|    {
  447|  1.81M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  8.89M|    {
 1177|  8.89M|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1427|  6.99M|        : base(std::in_place, std::forward<U>(val)),
 1428|  6.99M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  6.99M|    {
 1430|  6.99M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  6.99M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  6.99M|    {
  437|  6.99M|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1597|  10.4M|    {
 1598|  10.4M|        return has_value();
 1599|  10.4M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  484|  16.3M|    {
  485|  16.3M|        return m_has_value;
  486|  16.3M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1603|   340k|    {
 1604|   340k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   340k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   340k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   340k|        return this->get_unexpected().error();
 1606|   340k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   340k|    {
  468|   340k|        return m_unexpected;
  469|   340k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1662|  4.50M|    {
 1663|  4.50M|        return std::move(value());
 1664|  4.50M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1626|  5.57M|    {
 1627|  5.57M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  5.57M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.57M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  5.57M|        return this->get_value();
 1629|  5.57M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  450|  5.57M|    {
  451|  5.57M|        return m_value;
  452|  5.57M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1473|   569k|        : base(unexpect, std::move(e.error())),
 1474|   569k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   569k|    {
 1476|   569k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  444|  1.56M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.56M|          m_has_value(false)
  446|  1.56M|    {
  447|  1.56M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  5.04M|    {
 1177|  5.04M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1427|  3.47M|        : base(std::in_place, std::forward<U>(val)),
 1428|  3.47M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  3.47M|    {
 1430|  3.47M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  3.47M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  3.47M|    {
  437|  3.47M|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1597|  5.91M|    {
 1598|  5.91M|        return has_value();
 1599|  5.91M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  484|  9.31M|    {
  485|  9.31M|        return m_has_value;
  486|  9.31M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1603|   683k|    {
 1604|   683k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   683k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   683k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   683k|        return this->get_unexpected().error();
 1606|   683k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   683k|    {
  468|   683k|        return m_unexpected;
  469|   683k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1662|  2.26M|    {
 1663|  2.26M|        return std::move(value());
 1664|  2.26M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1626|  2.71M|    {
 1627|  2.71M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.71M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.71M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.71M|        return this->get_value();
 1629|  2.71M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  450|  2.71M|    {
  451|  2.71M|        return m_value;
  452|  2.71M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  1.57M|    {
 1837|  1.57M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.57M|                                            std::forward<F>(f));
 1839|  1.57M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|  1.57M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.57M|    else {
 1333|  1.57M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.57M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.57M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.55M, False: 18.1k]
  |  |  ------------------
  ------------------
 1335|  1.57M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.57M|                   : result(unexpect,
 1337|  18.1k|                            trivial_invoke(std::forward<F>(f),
 1338|  18.1k|                                           std::forward<Exp>(exp).error()));
 1339|  1.57M|    }
 1340|  1.57M|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  5.96M|    {
  485|  5.96M|        return m_has_value;
  486|  5.96M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|  1.55M|    {
 1663|  1.55M|        return std::move(value());
 1664|  1.55M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|  2.03M|    {
 1627|  2.03M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.03M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.03M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.03M|        return this->get_value();
 1629|  2.03M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  2.03M|    {
  451|  2.03M|        return m_value;
  452|  2.03M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1613|  18.1k|    {
 1614|  18.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  18.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  18.1k|        return std::move(this->get_unexpected().error());
 1616|  18.1k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  23.6k|    {
  468|  23.6k|        return m_unexpected;
  469|  23.6k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1483|  1.52M|        : base(unexpect, std::forward<Args>(args)...),
 1484|  1.52M|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  1.52M|    {
 1486|  1.52M|    }
_ZN3scn2v310scan_errorC2Ev:
 3558|  16.4M|    constexpr scan_error() noexcept = default;
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|   327k|        : base(unexpect, std::move(e.error())),
 1474|   327k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   327k|    {
 1476|   327k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4288|  16.2M|    {
 4289|  16.2M|        return x.is_at_end();
 4290|  16.2M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4332|  40.3M|    {
 4333|  40.3M|        if (m_end) {
  ------------------
  |  Branch (4333:13): [True: 0, False: 40.3M]
  ------------------
 4334|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4335|      0|        }
 4336|  40.3M|        if (!m_begin) {
  ------------------
  |  Branch (4336:13): [True: 0, False: 40.3M]
  ------------------
 4337|      0|            return true;
 4338|      0|        }
 4339|  40.3M|        return !read_at_position();
 4340|  40.3M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4312|   174M|    {
 4313|   174M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|   174M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   174M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4314|       |
 4315|   174M|        if (!stores_parent()) {
  ------------------
  |  Branch (4315:13): [True: 0, False: 174M]
  ------------------
 4316|      0|            return true;
 4317|      0|        }
 4318|       |
 4319|   174M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|   174M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 150M, False: 23.5M]
  |  |  ------------------
  ------------------
 4320|   150M|            return true;
 4321|   150M|        }
 4322|       |
 4323|  46.7M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4323:16): [True: 23.5M, False: 23.2M]
  ------------------
 4324|  23.5M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4324:17): [True: 332k, False: 23.2M]
  ------------------
 4325|   332k|                return false;
 4326|   332k|            }
 4327|  23.5M|        }
 4328|  23.2M|        return true;
 4329|  23.5M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE15chars_availableEv:
 4088|   225M|    {
 4089|   225M|        return m_putback_buffer.size() + m_current_view.size();
 4090|   225M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4247|  44.9M|    {
 4248|  44.9M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  44.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  44.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|       |
 4250|  44.9M|        if (!stores_parent()) {
  ------------------
  |  Branch (4250:13): [True: 0, False: 44.9M]
  ------------------
 4251|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4252|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4253|      0|            return *ptr;
 4254|      0|        }
 4255|       |
 4256|  44.9M|        auto res = read_at_position();
 4257|  44.9M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  44.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  44.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4258|  44.9M|        return parent()->get_character_at(m_position);
 4259|  44.9M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16get_character_atEl:
 4119|  44.9M|    {
 4120|  44.9M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  44.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 27.9M, False: 16.9M]
  |  |  ------------------
  ------------------
 4121|  44.9M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4122|  27.9M|            return m_putback_buffer[pos];
 4123|  27.9M|        }
 4124|  16.9M|        const auto start = pos - m_putback_buffer.size();
 4125|  16.9M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  16.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4126|  16.9M|        return m_current_view[start];
 4127|  16.9M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1427|  11.7M|        : base(std::in_place, std::forward<U>(val)),
 1428|  11.7M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  11.7M|    {
 1430|  11.7M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  11.7M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  11.7M|    {
  437|  11.7M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  11.8M|    {
 1177|  11.8M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  345|   160k|        : m_unexpected(std::forward<Err>(e))
  346|   160k|    {
  347|   160k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   160k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   160k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|  85.8k|        : base(unexpect, std::move(e.error())),
 1474|  85.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  85.8k|    {
 1476|  85.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|  85.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  85.8k|          m_has_value(false)
  446|  85.8k|    {
  447|  85.8k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  354|   240k|        : m_unexpected(std::forward<Args>(args)...)
  355|   240k|    {
  356|   240k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   240k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|   240k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1597|  5.18M|    {
 1598|  5.18M|        return has_value();
 1599|  5.18M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1652|   942k|    {
 1653|   942k|        return value();
 1654|   942k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4282|  42.5M|    {
 4283|  42.5M|        return !(lhs == rhs);
 4284|  42.5M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4277|  47.3M|    {
 4278|  47.3M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4278:16): [True: 47.3M, False: 0]
  |  Branch (4278:46): [True: 6.09M, False: 41.2M]
  ------------------
 4279|  47.3M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4233|  88.8M|    {
 4234|  88.8M|        ++m_position;
 4235|  88.8M|        (void)read_at_position();
 4236|  88.8M|        return *this;
 4237|  88.8M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  345|  80.0k|        : m_unexpected(std::forward<Err>(e))
  346|  80.0k|    {
  347|  80.0k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  80.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  80.0k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  17.2k|        : base(unexpect, std::move(e.error())),
 1474|  17.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  17.2k|    {
 1476|  17.2k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|  17.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  17.2k|          m_has_value(false)
  446|  17.2k|    {
  447|  17.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.54M|    {
 1177|  2.54M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|  2.52M|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.52M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.52M|    {
 1430|  2.52M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  435|  2.52M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.52M|    {
  437|  2.52M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|  2.54M|    {
 1598|  2.54M|        return has_value();
 1599|  2.54M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  5.08M|    {
  485|  5.08M|        return m_has_value;
  486|  5.08M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  17.2k|    {
 1604|  17.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  17.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  17.2k|        return this->get_unexpected().error();
 1606|  17.2k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  17.2k|    {
  468|  17.2k|        return m_unexpected;
  469|  17.2k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|  2.52M|    {
 1663|  2.52M|        return std::move(value());
 1664|  2.52M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|  2.52M|    {
 1627|  2.52M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.52M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.52M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.52M|        return this->get_value();
 1629|  2.52M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.52M|    {
  451|  2.52M|        return m_value;
  452|  2.52M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3329|  57.5M|    {
 3330|  57.5M|        return m_sentinel;
 3331|  57.5M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  345|  69.9k|        : m_unexpected(std::forward<Err>(e))
  346|  69.9k|    {
  347|  69.9k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  69.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  69.9k|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_errorEE5errorEv:
  360|  20.5M|    {
  361|  20.5M|        return m_unexpected;
  362|  20.5M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  354|  5.47M|        : m_unexpected(std::forward<Args>(args)...)
  355|  5.47M|    {
  356|  5.47M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  5.47M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  5.47M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  345|  25.4M|        : m_unexpected(std::forward<Err>(e))
  346|  25.4M|    {
  347|  25.4M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  25.4M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  25.4M|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  360|  25.4M|    {
  361|  25.4M|        return m_unexpected;
  362|  25.4M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  354|  25.4M|        : m_unexpected(std::forward<Args>(args)...)
  355|  25.4M|    {
  356|  25.4M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  25.4M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  25.4M|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|   160k|{
 1211|   160k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|   160k|}
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  345|  5.24M|        : m_unexpected(std::forward<Err>(e))
  346|  5.24M|    {
  347|  5.24M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  5.24M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  5.24M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1603|  23.3k|    {
 1604|  23.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  23.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  23.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  23.3k|        return this->get_unexpected().error();
 1606|  23.3k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|  1.85M|        : base(unexpect, std::move(e.error())),
 1474|  1.85M|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  1.85M|    {
 1476|  1.85M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|  1.89M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.89M|          m_has_value(false)
  446|  1.89M|    {
  447|  1.89M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  20.2M|    {
 1177|  20.2M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1427|   951k|        : base(std::in_place, std::forward<U>(val)),
 1428|   951k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   951k|    {
 1430|   951k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  435|   951k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   951k|    {
  437|   951k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  10.3M|        : base(unexpect, std::move(e.error())),
 1474|  10.3M|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  10.3M|    {
 1476|  10.3M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|  10.3M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  10.3M|          m_has_value(false)
  446|  10.3M|    {
  447|  10.3M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1597|  22.0M|    {
 1598|  22.0M|        return has_value();
 1599|  22.0M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  38.9M|    {
  485|  38.9M|        return m_has_value;
  486|  38.9M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1603|  5.17M|    {
 1604|  5.17M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  5.17M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.17M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  5.17M|        return this->get_unexpected().error();
 1606|  5.17M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  5.17M|    {
  468|  5.17M|        return m_unexpected;
  469|  5.17M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1427|  1.98M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.98M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.98M|    {
 1430|  1.98M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  435|  1.98M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.98M|    {
  437|  1.98M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.98M|    {
 1177|  1.98M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSE_IXsr3stdE16is_convertible_vISG_SB_EEvE4typeELSK_0EEEONS0_10unexpectedISF_EE:
 1473|    309|        : base(unexpect, std::move(e.error())),
 1474|    309|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|    309|    {
 1476|    309|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  444|    309|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|    309|          m_has_value(false)
  446|    309|    {
  447|    309|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1652|  5.14M|    {
 1653|  5.14M|        return value();
 1654|  5.14M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|  9.94M|    {
 1627|  9.94M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  9.94M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.94M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  9.94M|        return this->get_value();
 1629|  9.94M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  9.94M|    {
  451|  9.94M|        return m_value;
  452|  9.94M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1597|   171k|    {
 1598|   171k|        return has_value();
 1599|   171k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  484|  3.96M|    {
  485|  3.96M|        return m_has_value;
  486|  3.96M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|  1.81M|    {
 1663|  1.81M|        return std::move(value());
 1664|  1.81M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|  1.98M|    {
 1627|  1.98M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.98M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.98M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.98M|        return this->get_value();
 1629|  1.98M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  450|  1.98M|    {
  451|  1.98M|        return m_value;
  452|  1.98M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  4.83M|    {
 1837|  4.83M|        return detail::transform_error_impl(std::move(*this),
 1838|  4.83M|                                            std::forward<F>(f));
 1839|  4.83M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|  4.83M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  4.83M|    else {
 1333|  4.83M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  4.83M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  4.83M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 4.79M, False: 39.8k]
  |  |  ------------------
  ------------------
 1335|  4.83M|                   ? result(*std::forward<Exp>(exp))
 1336|  4.83M|                   : result(unexpect,
 1337|  39.8k|                            trivial_invoke(std::forward<F>(f),
 1338|  39.8k|                                           std::forward<Exp>(exp).error()));
 1339|  4.83M|    }
 1340|  4.83M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1427|  7.05M|        : base(std::in_place, std::forward<U>(val)),
 1428|  7.05M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  7.05M|    {
 1430|  7.05M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  7.05M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  7.05M|    {
  437|  7.05M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1483|  39.8k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  39.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  39.8k|    {
 1486|  39.8k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|  4.79M|    {
 1663|  4.79M|        return std::move(value());
 1664|  4.79M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3325|  2.08M|    {
 3326|  2.08M|        return m_iterator;
 3327|  2.08M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3329|  2.08M|    {
 3330|  2.08M|        return m_sentinel;
 3331|  2.08M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|  12.1M|    {
 1598|  12.1M|        return has_value();
 1599|  12.1M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|  19.1M|    {
  485|  19.1M|        return m_has_value;
  486|  19.1M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|   429k|    {
 1604|   429k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   429k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   429k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   429k|        return this->get_unexpected().error();
 1606|   429k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   429k|    {
  468|   429k|        return m_unexpected;
  469|   429k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|  5.23M|    {
 1663|  5.23M|        return std::move(value());
 1664|  5.23M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|  6.52M|    {
 1627|  6.52M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  6.52M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.52M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  6.52M|        return this->get_value();
 1629|  6.52M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|  6.52M|    {
  451|  6.52M|        return m_value;
  452|  6.52M|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3310|  1.63M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.63M|    static_cast<    \
  |  |  929|  1.63M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.63M|    static_cast<    \
  |  |  929|  1.63M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  1.63M|    {
 3312|  1.63M|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4299|  24.1M|    {
 4300|  24.1M|        return !x.is_at_end();
 4301|  24.1M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|  23.6k|        : base(unexpect, std::move(e.error())),
 1474|  23.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  23.6k|    {
 1476|  23.6k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  23.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  23.6k|          m_has_value(false)
  446|  23.6k|    {
  447|  23.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.90M|    {
 1177|  3.90M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1427|  3.87M|        : base(std::in_place, std::forward<U>(val)),
 1428|  3.87M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  3.87M|    {
 1430|  3.87M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  3.87M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  3.87M|    {
  437|  3.87M|    }
_ZNK3scn2v38expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1597|  2.32M|    {
 1598|  2.32M|        return has_value();
 1599|  2.32M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1652|   482k|    {
 1653|   482k|        return value();
 1654|   482k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  13.0k|        : base(unexpect, std::move(e.error())),
 1474|  13.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  13.0k|    {
 1476|  13.0k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  444|  13.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  13.0k|          m_has_value(false)
  446|  13.0k|    {
  447|  13.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.11M|    {
 1177|  2.11M|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|  2.10M|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.10M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.10M|    {
 1430|  2.10M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  435|  2.10M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.10M|    {
  437|  2.10M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1597|  2.11M|    {
 1598|  2.11M|        return has_value();
 1599|  2.11M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  484|  4.22M|    {
  485|  4.22M|        return m_has_value;
  486|  4.22M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1603|  13.0k|    {
 1604|  13.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  13.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  13.0k|        return this->get_unexpected().error();
 1606|  13.0k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  13.0k|    {
  468|  13.0k|        return m_unexpected;
  469|  13.0k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|  2.10M|    {
 1663|  2.10M|        return std::move(value());
 1664|  2.10M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|  2.10M|    {
 1627|  2.10M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.10M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.10M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.10M|        return this->get_value();
 1629|  2.10M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.10M|    {
  451|  2.10M|        return m_value;
  452|  2.10M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1603|  5.49k|    {
 1604|  5.49k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  5.49k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.49k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  5.49k|        return this->get_unexpected().error();
 1606|  5.49k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|  1.58M|        : base(unexpect, std::move(e.error())),
 1474|  1.58M|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  1.58M|    {
 1476|  1.58M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  1.58M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.58M|          m_has_value(false)
  446|  1.58M|    {
  447|  1.58M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  8.91M|    {
 1177|  8.91M|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1427|   491k|        : base(std::in_place, std::forward<U>(val)),
 1428|   491k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   491k|    {
 1430|   491k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  435|   491k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   491k|    {
  437|   491k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  6.17M|        : base(unexpect, std::move(e.error())),
 1474|  6.17M|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  6.17M|    {
 1476|  6.17M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|  6.17M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  6.17M|          m_has_value(false)
  446|  6.17M|    {
  447|  6.17M|    }
_ZNK3scn2v38expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1597|  10.4M|    {
 1598|  10.4M|        return has_value();
 1599|  10.4M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  17.8M|    {
  485|  17.8M|        return m_has_value;
  486|  17.8M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1603|  4.27M|    {
 1604|  4.27M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  4.27M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.27M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  4.27M|        return this->get_unexpected().error();
 1606|  4.27M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  4.27M|    {
  468|  4.27M|        return m_unexpected;
  469|  4.27M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1427|  1.59M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.59M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.59M|    {
 1430|  1.59M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  435|  1.59M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.59M|    {
  437|  1.59M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.59M|    {
 1177|  1.59M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|    102|        : base(unexpect, std::move(e.error())),
 1474|    102|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|    102|    {
 1476|    102|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|    102|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|    102|          m_has_value(false)
  446|    102|    {
  447|    102|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1652|  1.63M|    {
 1653|  1.63M|        return value();
 1654|  1.63M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|  1.63M|    {
 1627|  1.63M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.63M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.63M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.63M|        return this->get_value();
 1629|  1.63M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  1.63M|    {
  451|  1.63M|        return m_value;
  452|  1.63M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  38.4k|    {
 1598|  38.4k|        return has_value();
 1599|  38.4k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|  3.18M|    {
  485|  3.18M|        return m_has_value;
  486|  3.18M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|  1.55M|    {
 1663|  1.55M|        return std::move(value());
 1664|  1.55M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|  1.59M|    {
 1627|  1.59M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.59M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.59M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.59M|        return this->get_value();
 1629|  1.59M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|  1.59M|    {
  451|  1.59M|        return m_value;
  452|  1.59M|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1427|   665k|        : base(std::in_place, std::forward<U>(val)),
 1428|   665k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   665k|    {
 1430|   665k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|   665k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   665k|    {
  437|   665k|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  2.99M|    {
 2855|  2.99M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  2.99M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  2.99M|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  2.99M|    {
 2836|  2.99M|        return t.data();
 2837|  2.99M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1473|  1.17M|        : base(unexpect, std::move(e.error())),
 1474|  1.17M|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  1.17M|    {
 1476|  1.17M|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  444|  1.17M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.17M|          m_has_value(false)
  446|  1.17M|    {
  447|  1.17M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  14.3M|    {
 1177|  14.3M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1427|  13.0M|        : base(std::in_place, std::forward<U>(val)),
 1428|  13.0M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  13.0M|    {
 1430|  13.0M|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  435|  13.0M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  13.0M|    {
  437|  13.0M|    }
_ZNO3scn2v38expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS7_v:
 1662|  8.81M|    {
 1663|  8.81M|        return std::move(value());
 1664|  8.81M|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1210|  5.41M|{
 1211|  5.41M|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  5.41M|}
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1836|  1.81M|    {
 1837|  1.81M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.81M|                                            std::forward<F>(f));
 1839|  1.81M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSI_OT0_:
 1322|  1.81M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.81M|    else {
 1333|  1.81M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.81M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.81M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.81M, False: 0]
  |  |  ------------------
  ------------------
 1335|  1.81M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.81M|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  1.81M|    }
 1340|  1.81M|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|  1.81M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.81M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.81M|    {
 1430|  1.81M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  435|  1.81M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.81M|    {
  437|  1.81M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.81M|    {
 1177|  1.81M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|  1.81M|    {
 1598|  1.81M|        return has_value();
 1599|  1.81M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  3.62M|    {
  485|  3.62M|        return m_has_value;
  486|  3.62M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|  1.81M|    {
 1663|  1.81M|        return std::move(value());
 1664|  1.81M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|  1.81M|    {
 1627|  1.81M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.81M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.81M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.81M|        return this->get_value();
 1629|  1.81M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.81M|    {
  451|  1.81M|        return m_value;
  452|  1.81M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1822|  1.80M|    {
 1823|  1.80M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|  1.80M|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSI_OT0_:
 1322|  1.80M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.80M|    else {
 1333|  1.80M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.80M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.80M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 1.80M]
  |  |  ------------------
  ------------------
 1335|  1.80M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.80M|                   : result(unexpect,
 1337|  1.80M|                            trivial_invoke(std::forward<F>(f),
 1338|  1.80M|                                           std::forward<Exp>(exp).error()));
 1339|  1.80M|    }
 1340|  1.80M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1427|  87.8k|        : base(std::in_place, std::forward<U>(val)),
 1428|  87.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  87.8k|    {
 1430|  87.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  435|  87.8k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  87.8k|    {
  437|  87.8k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1652|  1.29M|    {
 1653|  1.29M|        return value();
 1654|  1.29M|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3663|   421k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1672|   170k|    {
 1673|   170k|        return &value();
 1674|   170k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2723|  1.30M|    {
 2724|  1.30M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.30M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.30M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2704|  1.30M|    {
 2705|  1.30M|        return decay_copy(t.begin());
 2706|  1.30M|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEu7__decayIT_EOS8_:
 1948|  1.30M|{
 1949|  1.30M|    return SCN_FWD(t);
  ------------------
  |  |  930|  1.30M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  1.30M|}
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3663|   792k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|  1.55M|    {
 1837|  1.55M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.55M|                                            std::forward<F>(f));
 1839|  1.55M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1322|  1.55M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.55M|    else {
 1333|  1.55M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.55M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.55M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.55M, False: 0]
  |  |  ------------------
  ------------------
 1335|  1.55M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.55M|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  1.55M|    }
 1340|  1.55M|}
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|  1.55M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.55M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.55M|    {
 1430|  1.55M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  435|  1.55M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.55M|    {
  437|  1.55M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.55M|    {
 1177|  1.55M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|  1.55M|    {
 1598|  1.55M|        return has_value();
 1599|  1.55M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  3.11M|    {
  485|  3.11M|        return m_has_value;
  486|  3.11M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|  1.55M|    {
 1663|  1.55M|        return std::move(value());
 1664|  1.55M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|  1.55M|    {
 1627|  1.55M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.55M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.55M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.55M|        return this->get_value();
 1629|  1.55M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.55M|    {
  451|  1.55M|        return m_value;
  452|  1.55M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1822|  1.50M|    {
 1823|  1.50M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|  1.50M|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|  1.50M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.50M|    else {
 1333|  1.50M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.50M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.50M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 1.50M]
  |  |  ------------------
  ------------------
 1335|  1.50M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.50M|                   : result(unexpect,
 1337|  1.50M|                            trivial_invoke(std::forward<F>(f),
 1338|  1.50M|                                           std::forward<Exp>(exp).error()));
 1339|  1.50M|    }
 1340|  1.50M|}
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRS3_vEEOT_:
 1427|  84.4k|        : base(std::in_place, std::forward<U>(val)),
 1428|  84.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  84.4k|    {
 1430|  84.4k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  435|  84.4k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  84.4k|    {
  437|  84.4k|    }
_ZN3scn2v313scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3642|  1.50M|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  928|  1.50M|    static_cast<    \
  |  |  929|  1.50M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3643|  1.50M|    {
 3644|  1.50M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1652|  1.07M|    {
 1653|  1.07M|        return value();
 1654|  1.07M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1672|  38.3k|    {
 1673|  38.3k|        return &value();
 1674|  38.3k|    }
_ZN3scn2v313scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3642|  1.80M|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  928|  1.80M|    static_cast<    \
  |  |  929|  1.80M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3643|  1.80M|    {
 3644|  1.80M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|   701k|        : base(unexpect, std::move(e.error())),
 1474|   701k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   701k|    {
 1476|   701k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4288|  7.42M|    {
 4289|  7.42M|        return x.is_at_end();
 4290|  7.42M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4332|  11.7M|    {
 4333|  11.7M|        if (m_end) {
  ------------------
  |  Branch (4333:13): [True: 0, False: 11.7M]
  ------------------
 4334|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4335|      0|        }
 4336|  11.7M|        if (!m_begin) {
  ------------------
  |  Branch (4336:13): [True: 0, False: 11.7M]
  ------------------
 4337|      0|            return true;
 4338|      0|        }
 4339|  11.7M|        return !read_at_position();
 4340|  11.7M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4312|  37.3M|    {
 4313|  37.3M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  37.3M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  37.3M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4314|       |
 4315|  37.3M|        if (!stores_parent()) {
  ------------------
  |  Branch (4315:13): [True: 0, False: 37.3M]
  ------------------
 4316|      0|            return true;
 4317|      0|        }
 4318|       |
 4319|  37.3M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|  37.3M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 32.8M, False: 4.40M]
  |  |  ------------------
  ------------------
 4320|  32.8M|            return true;
 4321|  32.8M|        }
 4322|       |
 4323|  8.61M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4323:16): [True: 4.40M, False: 4.20M]
  ------------------
 4324|  4.40M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4324:17): [True: 199k, False: 4.20M]
  ------------------
 4325|   199k|                return false;
 4326|   199k|            }
 4327|  4.40M|        }
 4328|  4.20M|        return true;
 4329|  4.40M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE15chars_availableEv:
 4088|  48.2M|    {
 4089|  48.2M|        return m_putback_buffer.size() + m_current_view.size();
 4090|  48.2M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4247|  11.6M|    {
 4248|  11.6M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  11.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|       |
 4250|  11.6M|        if (!stores_parent()) {
  ------------------
  |  Branch (4250:13): [True: 0, False: 11.6M]
  ------------------
 4251|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4252|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4253|      0|            return *ptr;
 4254|      0|        }
 4255|       |
 4256|  11.6M|        auto res = read_at_position();
 4257|  11.6M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  11.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4258|  11.6M|        return parent()->get_character_at(m_position);
 4259|  11.6M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16get_character_atEl:
 4119|  11.6M|    {
 4120|  11.6M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  11.6M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.96M, False: 1.73M]
  |  |  ------------------
  ------------------
 4121|  11.6M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4122|  9.96M|            return m_putback_buffer[pos];
 4123|  9.96M|        }
 4124|  1.73M|        const auto start = pos - m_putback_buffer.size();
 4125|  1.73M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  1.73M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.73M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4126|  1.73M|        return m_current_view[start];
 4127|  1.73M|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3802|  4.23M|{
 3803|       |    if constexpr (sizeof(U) == 1) {
 3804|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 3805|       |    }
 3806|       |    else if constexpr (sizeof(U) == 2) {
 3807|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 3808|       |    }
 3809|  4.23M|    else {
 3810|       |        // utf-32
 3811|  4.23M|        static_assert(sizeof(U) == 4);
 3812|  4.23M|        SCN_UNUSED(ch);
  ------------------
  |  |  909|  4.23M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3813|  4.23M|        return 1;
 3814|  4.23M|    }
 3815|  4.23M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1427|  5.21M|        : base(std::in_place, std::forward<U>(val)),
 1428|  5.21M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  5.21M|    {
 1430|  5.21M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  5.21M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  5.21M|    {
  437|  5.21M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  5.28M|    {
 1177|  5.28M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|  66.0k|        : base(unexpect, std::move(e.error())),
 1474|  66.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  66.0k|    {
 1476|  66.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|  66.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  66.0k|          m_has_value(false)
  446|  66.0k|    {
  447|  66.0k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1597|  2.08M|    {
 1598|  2.08M|        return has_value();
 1599|  2.08M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1652|  31.5k|    {
 1653|  31.5k|        return value();
 1654|  31.5k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4282|  5.67M|    {
 4283|  5.67M|        return !(lhs == rhs);
 4284|  5.67M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4277|  7.71M|    {
 4278|  7.71M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4278:16): [True: 7.71M, False: 0]
  |  Branch (4278:46): [True: 2.46M, False: 5.24M]
  ------------------
 4279|  7.71M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4233|  13.8M|    {
 4234|  13.8M|        ++m_position;
 4235|  13.8M|        (void)read_at_position();
 4236|  13.8M|        return *this;
 4237|  13.8M|    }
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4008|  4.23M|{
 4009|       |    if constexpr (sizeof(CharT) == 1) {
 4010|       |        return decode_utf8_code_point_exhaustive(input);
 4011|       |    }
 4012|       |    else if constexpr (sizeof(CharT) == 2) {
 4013|       |        return decode_utf16_code_point_exhaustive(input);
 4014|       |    }
 4015|  4.23M|    else {
 4016|  4.23M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|  4.23M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.23M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4017|  4.23M|        auto cp = static_cast<char32_t>(input.front());
 4018|  4.23M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  4.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 284k, False: 3.95M]
  |  |  ------------------
  ------------------
 4019|   284k|            return invalid_code_point;
 4020|   284k|        }
 4021|  3.95M|        return cp;
 4022|  4.23M|    }
 4023|  4.23M|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  2.87k|        : base(unexpect, std::move(e.error())),
 1474|  2.87k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  2.87k|    {
 1476|  2.87k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|  2.87k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  2.87k|          m_has_value(false)
  446|  2.87k|    {
  447|  2.87k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.09M|    {
 1177|  1.09M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|  1.08M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.08M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.08M|    {
 1430|  1.08M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  435|  1.08M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.08M|    {
  437|  1.08M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|  1.09M|    {
 1598|  1.09M|        return has_value();
 1599|  1.09M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.18M|    {
  485|  2.18M|        return m_has_value;
  486|  2.18M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  2.87k|    {
 1604|  2.87k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.87k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.87k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.87k|        return this->get_unexpected().error();
 1606|  2.87k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  2.87k|    {
  468|  2.87k|        return m_unexpected;
  469|  2.87k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|  1.08M|    {
 1663|  1.08M|        return std::move(value());
 1664|  1.08M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|  1.08M|    {
 1627|  1.08M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.08M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.08M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.08M|        return this->get_value();
 1629|  1.08M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.08M|    {
  451|  1.08M|        return m_value;
  452|  1.08M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3329|  19.2M|    {
 3330|  19.2M|        return m_sentinel;
 3331|  19.2M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1603|  2.15k|    {
 1604|  2.15k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.15k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.15k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.15k|        return this->get_unexpected().error();
 1606|  2.15k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|   939k|        : base(unexpect, std::move(e.error())),
 1474|   939k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   939k|    {
 1476|   939k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|   999k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   999k|          m_has_value(false)
  446|   999k|    {
  447|   999k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  9.13M|    {
 1177|  9.13M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1427|  31.5k|        : base(std::in_place, std::forward<U>(val)),
 1428|  31.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  31.5k|    {
 1430|  31.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  435|  31.5k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  31.5k|    {
  437|  31.5k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  5.18M|        : base(unexpect, std::move(e.error())),
 1474|  5.18M|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  5.18M|    {
 1476|  5.18M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|  5.18M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  5.18M|          m_has_value(false)
  446|  5.18M|    {
  447|  5.18M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1597|  10.0M|    {
 1598|  10.0M|        return has_value();
 1599|  10.0M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  17.6M|    {
  485|  17.6M|        return m_has_value;
  486|  17.6M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1603|  2.94M|    {
 1604|  2.94M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.94M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.94M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.94M|        return this->get_unexpected().error();
 1606|  2.94M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  2.94M|    {
  468|  2.94M|        return m_unexpected;
  469|  2.94M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1427|   896k|        : base(std::in_place, std::forward<U>(val)),
 1428|   896k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   896k|    {
 1430|   896k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  435|   896k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   896k|    {
  437|   896k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   896k|    {
 1177|   896k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSE_IXsr3stdE16is_convertible_vISG_SB_EEvE4typeELSK_0EEEONS0_10unexpectedISF_EE:
 1473|     91|        : base(unexpect, std::move(e.error())),
 1474|     91|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|     91|    {
 1476|     91|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  444|     91|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|     91|          m_has_value(false)
  446|     91|    {
  447|     91|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1652|  1.32M|    {
 1653|  1.32M|        return value();
 1654|  1.32M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|  3.58M|    {
 1627|  3.58M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.58M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.58M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.58M|        return this->get_value();
 1629|  3.58M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  3.58M|    {
  451|  3.58M|        return m_value;
  452|  3.58M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1597|  18.9k|    {
 1598|  18.9k|        return has_value();
 1599|  18.9k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  484|  1.79M|    {
  485|  1.79M|        return m_has_value;
  486|  1.79M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|   877k|    {
 1663|   877k|        return std::move(value());
 1664|   877k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|   896k|    {
 1627|   896k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   896k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   896k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   896k|        return this->get_value();
 1629|   896k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  450|   896k|    {
  451|   896k|        return m_value;
  452|   896k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  2.32M|    {
 1837|  2.32M|        return detail::transform_error_impl(std::move(*this),
 1838|  2.32M|                                            std::forward<F>(f));
 1839|  2.32M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|  2.32M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  2.32M|    else {
 1333|  2.32M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.32M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.32M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.26M, False: 60.0k]
  |  |  ------------------
  ------------------
 1335|  2.32M|                   ? result(*std::forward<Exp>(exp))
 1336|  2.32M|                   : result(unexpect,
 1337|  60.0k|                            trivial_invoke(std::forward<F>(f),
 1338|  60.0k|                                           std::forward<Exp>(exp).error()));
 1339|  2.32M|    }
 1340|  2.32M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1427|  2.91M|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.91M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.91M|    {
 1430|  2.91M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  2.91M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.91M|    {
  437|  2.91M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1483|  60.0k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  60.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  60.0k|    {
 1486|  60.0k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|  2.26M|    {
 1663|  2.26M|        return std::move(value());
 1664|  2.26M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3325|   672k|    {
 3326|   672k|        return m_iterator;
 3327|   672k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3329|   672k|    {
 3330|   672k|        return m_sentinel;
 3331|   672k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|  5.91M|    {
 1598|  5.91M|        return has_value();
 1599|  5.91M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|  9.44M|    {
  485|  9.44M|        return m_has_value;
  486|  9.44M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|   946k|    {
 1604|   946k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   946k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   946k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   946k|        return this->get_unexpected().error();
 1606|   946k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   946k|    {
  468|   946k|        return m_unexpected;
  469|   946k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|  2.13M|    {
 1663|  2.13M|        return std::move(value());
 1664|  2.13M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|  2.58M|    {
 1627|  2.58M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.58M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.58M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.58M|        return this->get_value();
 1629|  2.58M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.58M|    {
  451|  2.58M|        return m_value;
  452|  2.58M|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3310|   630k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   630k|    static_cast<    \
  |  |  929|   630k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   630k|    static_cast<    \
  |  |  929|   630k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|   630k|    {
 3312|   630k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4299|  4.32M|    {
 4300|  4.32M|        return !x.is_at_end();
 4301|  4.32M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|  64.6k|        : base(unexpect, std::move(e.error())),
 1474|  64.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  64.6k|    {
 1476|  64.6k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  64.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  64.6k|          m_has_value(false)
  446|  64.6k|    {
  447|  64.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  4.40M|    {
 1177|  4.40M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1427|  4.34M|        : base(std::in_place, std::forward<U>(val)),
 1428|  4.34M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  4.34M|    {
 1430|  4.34M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  4.34M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  4.34M|    {
  437|  4.34M|    }
_ZNK3scn2v38expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1597|  1.20M|    {
 1598|  1.20M|        return has_value();
 1599|  1.20M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  7.62M|    {
  485|  7.62M|        return m_has_value;
  486|  7.62M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1652|  13.3k|    {
 1653|  13.3k|        return value();
 1654|  13.3k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|  3.15M|    {
 1627|  3.15M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.15M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.15M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.15M|        return this->get_value();
 1629|  3.15M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  3.15M|    {
  451|  3.15M|        return m_value;
  452|  3.15M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  2.87k|        : base(unexpect, std::move(e.error())),
 1474|  2.87k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  2.87k|    {
 1476|  2.87k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  444|  2.87k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  2.87k|          m_has_value(false)
  446|  2.87k|    {
  447|  2.87k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.09M|    {
 1177|  1.09M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|  1.08M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.08M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.08M|    {
 1430|  1.08M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  435|  1.08M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.08M|    {
  437|  1.08M|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|   881k|    {
 1837|   881k|        return detail::transform_error_impl(std::move(*this),
 1838|   881k|                                            std::forward<F>(f));
 1839|   881k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|   881k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   881k|    else {
 1333|   881k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   881k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   881k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 878k, False: 3.85k]
  |  |  ------------------
  ------------------
 1335|   881k|                   ? result(*std::forward<Exp>(exp))
 1336|   881k|                   : result(unexpect,
 1337|  3.85k|                            trivial_invoke(std::forward<F>(f),
 1338|  3.85k|                                           std::forward<Exp>(exp).error()));
 1339|   881k|    }
 1340|   881k|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|  3.14M|    {
 1663|  3.14M|        return std::move(value());
 1664|  3.14M|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1613|  64.0k|    {
 1614|  64.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  64.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  64.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  64.0k|        return std::move(this->get_unexpected().error());
 1616|  64.0k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  64.6k|    {
  468|  64.6k|        return m_unexpected;
  469|  64.6k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1483|   991k|        : base(unexpect, std::forward<Args>(args)...),
 1484|   991k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|   991k|    {
 1486|   991k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1597|  1.09M|    {
 1598|  1.09M|        return has_value();
 1599|  1.09M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.18M|    {
  485|  2.18M|        return m_has_value;
  486|  2.18M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1603|  2.87k|    {
 1604|  2.87k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.87k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.87k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.87k|        return this->get_unexpected().error();
 1606|  2.87k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  2.87k|    {
  468|  2.87k|        return m_unexpected;
  469|  2.87k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|  1.08M|    {
 1663|  1.08M|        return std::move(value());
 1664|  1.08M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|  1.08M|    {
 1627|  1.08M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.08M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.08M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.08M|        return this->get_value();
 1629|  1.08M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.08M|    {
  451|  1.08M|        return m_value;
  452|  1.08M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1603|    524|    {
 1604|    524|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    524|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    524|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    524|        return this->get_unexpected().error();
 1606|    524|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|   938k|        : base(unexpect, std::move(e.error())),
 1474|   938k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   938k|    {
 1476|   938k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|   999k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   999k|          m_has_value(false)
  446|   999k|    {
  447|   999k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  7.24M|    {
 1177|  7.24M|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1427|  13.3k|        : base(std::in_place, std::forward<U>(val)),
 1428|  13.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  13.3k|    {
 1430|  13.3k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  435|  13.3k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  13.3k|    {
  437|  13.3k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  3.76M|        : base(unexpect, std::move(e.error())),
 1474|  3.76M|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  3.76M|    {
 1476|  3.76M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|  3.76M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  3.76M|          m_has_value(false)
  446|  3.76M|    {
  447|  3.76M|    }
_ZNK3scn2v38expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1597|  8.12M|    {
 1598|  8.12M|        return has_value();
 1599|  8.12M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  14.6M|    {
  485|  14.6M|        return m_has_value;
  486|  14.6M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1603|  2.80M|    {
 1604|  2.80M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.80M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.80M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.80M|        return this->get_unexpected().error();
 1606|  2.80M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  2.80M|    {
  468|  2.80M|        return m_unexpected;
  469|  2.80M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1427|   884k|        : base(std::in_place, std::forward<U>(val)),
 1428|   884k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   884k|    {
 1430|   884k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  435|   884k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   884k|    {
  437|   884k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   884k|    {
 1177|   884k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|     30|        : base(unexpect, std::move(e.error())),
 1474|     30|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|     30|    {
 1476|     30|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|     30|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|     30|          m_has_value(false)
  446|     30|    {
  447|     30|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1652|   426k|    {
 1653|   426k|        return value();
 1654|   426k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|  2.68M|    {
 1627|  2.68M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.68M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.68M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.68M|        return this->get_value();
 1629|  2.68M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  2.68M|    {
  451|  2.68M|        return m_value;
  452|  2.68M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  6.47k|    {
 1598|  6.47k|        return has_value();
 1599|  6.47k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|  1.76M|    {
  485|  1.76M|        return m_has_value;
  486|  1.76M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|   878k|    {
 1663|   878k|        return std::move(value());
 1664|   878k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|   884k|    {
 1627|   884k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   884k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   884k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   884k|        return this->get_value();
 1629|   884k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|   884k|    {
  451|   884k|        return m_value;
  452|   884k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  2.32M|    {
 1837|  2.32M|        return detail::transform_error_impl(std::move(*this),
 1838|  2.32M|                                            std::forward<F>(f));
 1839|  2.32M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|  2.32M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  2.32M|    else {
 1333|  2.32M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.32M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.32M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.26M, False: 60.2k]
  |  |  ------------------
  ------------------
 1335|  2.32M|                   ? result(*std::forward<Exp>(exp))
 1336|  2.32M|                   : result(unexpect,
 1337|  60.2k|                            trivial_invoke(std::forward<F>(f),
 1338|  60.2k|                                           std::forward<Exp>(exp).error()));
 1339|  2.32M|    }
 1340|  2.32M|}
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1427|  2.47M|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.47M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.47M|    {
 1430|  2.47M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  2.47M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.47M|    {
  437|  2.47M|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1483|  60.2k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  60.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  60.2k|    {
 1486|  60.2k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|  2.26M|    {
 1663|  2.26M|        return std::move(value());
 1664|  2.26M|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   762k|    {
 2855|   762k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   762k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   762k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   762k|    {
 2836|   762k|        return t.data();
 2837|   762k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1836|   877k|    {
 1837|   877k|        return detail::transform_error_impl(std::move(*this),
 1838|   877k|                                            std::forward<F>(f));
 1839|   877k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSI_OT0_:
 1322|   877k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   877k|    else {
 1333|   877k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   877k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   877k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 877k, False: 0]
  |  |  ------------------
  ------------------
 1335|   877k|                   ? result(*std::forward<Exp>(exp))
 1336|   877k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|   877k|    }
 1340|   877k|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|   877k|        : base(std::in_place, std::forward<U>(val)),
 1428|   877k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   877k|    {
 1430|   877k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  435|   877k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   877k|    {
  437|   877k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   877k|    {
 1177|   877k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|   877k|    {
 1598|   877k|        return has_value();
 1599|   877k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.75M|    {
  485|  1.75M|        return m_has_value;
  486|  1.75M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|   877k|    {
 1663|   877k|        return std::move(value());
 1664|   877k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|   877k|    {
 1627|   877k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   877k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   877k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   877k|        return this->get_value();
 1629|   877k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   877k|    {
  451|   877k|        return m_value;
  452|   877k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1822|  1.11M|    {
 1823|  1.11M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|  1.11M|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSI_OT0_:
 1322|  1.11M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.11M|    else {
 1333|  1.11M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.11M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.11M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 1.11M]
  |  |  ------------------
  ------------------
 1335|  1.11M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.11M|                   : result(unexpect,
 1337|  1.11M|                            trivial_invoke(std::forward<F>(f),
 1338|  1.11M|                                           std::forward<Exp>(exp).error()));
 1339|  1.11M|    }
 1340|  1.11M|}
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1652|   448k|    {
 1653|   448k|        return value();
 1654|   448k|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3663|   174k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1672|  18.8k|    {
 1673|  18.8k|        return &value();
 1674|  18.8k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2723|   703k|    {
 2724|   703k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   703k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   703k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2704|   703k|    {
 2705|   703k|        return decay_copy(t.begin());
 2706|   703k|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEu7__decayIT_EOS8_:
 1948|   703k|{
 1949|   703k|    return SCN_FWD(t);
  ------------------
  |  |  930|   703k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|   703k|}
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3663|   391k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|   878k|    {
 1837|   878k|        return detail::transform_error_impl(std::move(*this),
 1838|   878k|                                            std::forward<F>(f));
 1839|   878k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1322|   878k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   878k|    else {
 1333|   878k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   878k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   878k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 878k, False: 0]
  |  |  ------------------
  ------------------
 1335|   878k|                   ? result(*std::forward<Exp>(exp))
 1336|   878k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|   878k|    }
 1340|   878k|}
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|   878k|        : base(std::in_place, std::forward<U>(val)),
 1428|   878k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   878k|    {
 1430|   878k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  435|   878k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   878k|    {
  437|   878k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   878k|    {
 1177|   878k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|   878k|    {
 1598|   878k|        return has_value();
 1599|   878k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.75M|    {
  485|  1.75M|        return m_has_value;
  486|  1.75M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|   878k|    {
 1663|   878k|        return std::move(value());
 1664|   878k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|   878k|    {
 1627|   878k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   878k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   878k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   878k|        return this->get_value();
 1629|   878k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   878k|    {
  451|   878k|        return m_value;
  452|   878k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1822|   987k|    {
 1823|   987k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|   987k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSH_OT0_:
 1322|   987k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   987k|    else {
 1333|   987k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   987k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   987k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 987k]
  |  |  ------------------
  ------------------
 1335|   987k|                   ? result(*std::forward<Exp>(exp))
 1336|   987k|                   : result(unexpect,
 1337|   987k|                            trivial_invoke(std::forward<F>(f),
 1338|   987k|                                           std::forward<Exp>(exp).error()));
 1339|   987k|    }
 1340|   987k|}
_ZN3scn2v313scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3642|   987k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  928|   987k|    static_cast<    \
  |  |  929|   987k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3643|   987k|    {
 3644|   987k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1652|   448k|    {
 1653|   448k|        return value();
 1654|   448k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1672|  6.44k|    {
 1673|  6.44k|        return &value();
 1674|  6.44k|    }
_ZN3scn2v313scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3642|  1.11M|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  928|  1.11M|    static_cast<    \
  |  |  929|  1.11M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3643|  1.11M|    {
 3644|  1.11M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IivEEOT_:
 1427|   158k|        : base(std::in_place, std::forward<U>(val)),
 1428|   158k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   158k|    {
 1430|   158k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJiEvEENSt3__110in_place_tEDpOT_:
  435|   158k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   158k|    {
  437|   158k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA29_KcEEEDaDpOT_:
 3649|   182k|{
 3650|   182k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|   182k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|   182k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  1.43M|    {
 2855|  1.43M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  1.43M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  1.43M|    }
_ZN3scn2v36ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  1.43M|    {
 2836|  1.43M|        return t.data();
 2837|  1.43M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5475|  3.08M|    {
 5476|  3.08M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  3.08M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.08M]
  |  |  ------------------
  ------------------
 5477|      0|            return max_size();
 5478|      0|        }
 5479|       |
 5480|  3.08M|        return static_cast<std::size_t>(m_desc &
 5481|  3.08M|                                        ((1 << detail::packed_arg_bits) - 1));
 5482|  3.08M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5500|  6.17M|    {
 5501|  6.17M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5502|  6.17M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5443|  3.08M|    {
 5444|  3.08M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  3.08M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.08M]
  |  |  ------------------
  ------------------
 5445|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5446|      0|                return m_args[id];
 5447|      0|            }
 5448|      0|            return {};
 5449|      0|        }
 5450|       |
 5451|  3.08M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  3.08M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.08M]
  |  |  ------------------
  ------------------
 5452|      0|            return {};
 5453|      0|        }
 5454|       |
 5455|  3.08M|        const auto t = type(id);
 5456|  3.08M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  3.08M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.08M]
  |  |  ------------------
  ------------------
 5457|      0|            return {};
 5458|      0|        }
 5459|       |
 5460|  3.08M|        basic_scan_arg<Context> arg;
 5461|  3.08M|        arg.m_type = t;
 5462|  3.08M|        if (is_only_builtin()) {
  ------------------
  |  Branch (5462:13): [True: 3.08M, False: 0]
  ------------------
 5463|  3.08M|            arg.m_value.ref_value = m_builtin_values[id];
 5464|  3.08M|        }
 5465|      0|        else {
 5466|      0|            arg.m_value = m_values[id];
 5467|      0|        }
 5468|  3.08M|        return arg;
 5469|  3.08M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5509|  3.08M|    {
 5510|       |        // First (0th) index is size, types start after that
 5511|  3.08M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5512|  3.08M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5513|  3.08M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5514|  3.08M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5504|  3.08M|    {
 5505|  3.08M|        return (m_desc & detail::has_custom_types_bit) == 0;
 5506|  3.08M|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5256|  5.84M|    {
 5257|  5.84M|        return m_type != detail::arg_type::none_type;
 5258|  5.84M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8426|   461k|{
 8427|   461k|#define SCN_VISIT(Type)                                         \
 8428|   461k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8429|   461k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8430|   461k|    }                                                           \
 8431|   461k|    else {                                                      \
 8432|   461k|        return vis(monostate_val);                              \
 8433|   461k|    }
 8434|       |
 8435|   461k|    monostate monostate_val{};
 8436|       |
 8437|   461k|    switch (arg.m_type) {
 8438|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 461k]
  ------------------
 8439|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 461k]
  ------------------
 8441|      0|            SCN_VISIT(short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 461k]
  ------------------
 8443|      0|            SCN_VISIT(int);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 461k]
  ------------------
 8445|      0|            SCN_VISIT(long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 461k]
  ------------------
 8447|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 461k]
  ------------------
 8449|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 461k]
  ------------------
 8451|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 461k]
  ------------------
 8453|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 461k]
  ------------------
 8455|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 461k]
  ------------------
 8457|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 461k]
  ------------------
 8459|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 461k]
  ------------------
 8461|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 461k]
  ------------------
 8463|      0|            SCN_VISIT(char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 461k]
  ------------------
 8465|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 461k]
  ------------------
 8467|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8468|   148k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8468:9): [True: 148k, False: 312k]
  ------------------
 8469|   148k|            SCN_VISIT(float);
  ------------------
  |  | 8428|   148k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   148k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   148k|    }                                                           \
  |  | 8431|   148k|    else {                                                      \
  |  | 8432|   148k|        return vis(monostate_val);                              \
  |  | 8433|   148k|    }
  ------------------
 8470|   303k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8470:9): [True: 154k, False: 306k]
  ------------------
 8471|   303k|            SCN_VISIT(double);
  ------------------
  |  | 8428|   303k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   303k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   303k|    }                                                           \
  |  | 8431|   303k|    else {                                                      \
  |  | 8432|   303k|        return vis(monostate_val);                              \
  |  | 8433|   303k|    }
  ------------------
 8472|   461k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8472:9): [True: 157k, False: 303k]
  ------------------
 8473|   461k|            SCN_VISIT(long double);
  ------------------
  |  | 8428|   461k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   461k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   461k|    }                                                           \
  |  | 8431|   461k|    else {                                                      \
  |  | 8432|   461k|        return vis(monostate_val);                              \
  |  | 8433|   461k|    }
  ------------------
 8474|   461k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 461k]
  ------------------
 8475|   461k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8428|   461k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   461k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   461k|    }                                                           \
  |  | 8431|   461k|    else {                                                      \
  |  | 8432|   461k|        return vis(monostate_val);                              \
  |  | 8433|   461k|    }
  ------------------
 8476|   461k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8476:9): [True: 0, False: 461k]
  ------------------
 8477|   461k|            SCN_VISIT(std::string);
  ------------------
  |  | 8428|   461k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   461k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   461k|    }                                                           \
  |  | 8431|   461k|    else {                                                      \
  |  | 8432|   461k|        return vis(monostate_val);                              \
  |  | 8433|   461k|    }
  ------------------
 8478|   461k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8478:9): [True: 0, False: 461k]
  ------------------
 8479|   461k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8428|   461k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   461k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   461k|    }                                                           \
  |  | 8431|   461k|    else {                                                      \
  |  | 8432|   461k|        return vis(monostate_val);                              \
  |  | 8433|   461k|    }
  ------------------
 8480|   461k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8480:9): [True: 0, False: 461k]
  ------------------
 8481|   461k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8428|   461k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   461k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   461k|    }                                                           \
  |  | 8431|   461k|    else {                                                      \
  |  | 8432|   461k|        return vis(monostate_val);                              \
  |  | 8433|   461k|    }
  ------------------
 8482|   461k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8482:9): [True: 0, False: 461k]
  ------------------
 8483|   461k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8428|   461k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   461k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   461k|    }                                                           \
  |  | 8431|   461k|    else {                                                      \
  |  | 8432|   461k|        return vis(monostate_val);                              \
  |  | 8433|   461k|    }
  ------------------
 8484|   461k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8484:9): [True: 0, False: 461k]
  ------------------
 8485|   461k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8428|   461k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   461k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   461k|    }                                                           \
  |  | 8431|   461k|    else {                                                      \
  |  | 8432|   461k|        return vis(monostate_val);                              \
  |  | 8433|   461k|    }
  ------------------
 8486|       |
 8487|   461k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8487:9): [True: 0, False: 461k]
  ------------------
 8488|   461k|#if !SCN_DISABLE_TYPE_CUSTOM
 8489|   461k|            return vis(
 8490|   461k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8491|       |#else
 8492|       |            return vis(monostate_val);
 8493|       |#endif
 8494|       |
 8495|      0|            SCN_CLANG_PUSH
 8496|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8497|       |
 8498|      0|            SCN_UNLIKELY_ATTR
 8499|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8499:9): [True: 0, False: 461k]
  ------------------
 8500|      0|        default: {
  ------------------
  |  Branch (8500:9): [True: 0, False: 461k]
  ------------------
 8501|      0|            return vis(monostate_val);
 8502|      0|        }
 8503|       |
 8504|   461k|            SCN_CLANG_POP
 8505|   461k|    }
 8506|       |
 8507|      0|#undef SCN_VISIT
 8508|       |
 8509|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8510|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8511|      0|}
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5553|  2.43M|        : m_format{format}, m_next_arg_id{next_arg_id}
 5554|  2.43M|    {
 5555|  2.43M|    }
_ZN3scn2v318basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8146|  1.32M|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  928|  1.32M|    static_cast<    \
  |  |  929|  1.32M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8147|  1.32M|    {
 8148|  1.32M|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8064|  2.43M|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|  2.43M|    static_cast<    \
  |  |  929|  2.43M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|  2.43M|    static_cast<    \
  |  |  929|  2.43M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8065|  2.43M|    {
 8066|  2.43M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE3getEv:
 4352|  1.83M|{
 4353|  1.83M|    if (is_contiguous()) {
  ------------------
  |  Branch (4353:9): [True: 0, False: 1.83M]
  ------------------
 4354|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4355|      0|                                ranges::default_sentinel};
 4356|      0|    }
 4357|  1.83M|    return ranges::subrange{forward_iterator{this, 0},
 4358|  1.83M|                            ranges::default_sentinel};
 4359|  1.83M|}
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4183|  1.83M|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4184|  1.83M|    {
 4185|  1.83M|        SCN_EXPECT(parent);
  ------------------
  |  |  924|  1.83M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.83M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4186|  1.83M|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|  1.83M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.83M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4187|  1.83M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8426|   507k|{
 8427|   507k|#define SCN_VISIT(Type)                                         \
 8428|   507k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8429|   507k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8430|   507k|    }                                                           \
 8431|   507k|    else {                                                      \
 8432|   507k|        return vis(monostate_val);                              \
 8433|   507k|    }
 8434|       |
 8435|   507k|    monostate monostate_val{};
 8436|       |
 8437|   507k|    switch (arg.m_type) {
 8438|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 507k]
  ------------------
 8439|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 507k]
  ------------------
 8441|      0|            SCN_VISIT(short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 507k]
  ------------------
 8443|      0|            SCN_VISIT(int);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 507k]
  ------------------
 8445|      0|            SCN_VISIT(long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 507k]
  ------------------
 8447|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 507k]
  ------------------
 8449|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 507k]
  ------------------
 8451|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 507k]
  ------------------
 8453|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 507k]
  ------------------
 8455|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 507k]
  ------------------
 8457|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 507k]
  ------------------
 8459|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 507k]
  ------------------
 8461|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 507k]
  ------------------
 8463|      0|            SCN_VISIT(char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 507k]
  ------------------
 8465|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 507k]
  ------------------
 8467|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8468|   162k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8468:9): [True: 162k, False: 345k]
  ------------------
 8469|   162k|            SCN_VISIT(float);
  ------------------
  |  | 8428|   162k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   162k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   162k|    }                                                           \
  |  | 8431|   162k|    else {                                                      \
  |  | 8432|   162k|        return vis(monostate_val);                              \
  |  | 8433|   162k|    }
  ------------------
 8470|   334k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8470:9): [True: 171k, False: 336k]
  ------------------
 8471|   334k|            SCN_VISIT(double);
  ------------------
  |  | 8428|   334k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   334k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   334k|    }                                                           \
  |  | 8431|   334k|    else {                                                      \
  |  | 8432|   334k|        return vis(monostate_val);                              \
  |  | 8433|   334k|    }
  ------------------
 8472|   507k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8472:9): [True: 173k, False: 334k]
  ------------------
 8473|   507k|            SCN_VISIT(long double);
  ------------------
  |  | 8428|   507k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   507k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   507k|    }                                                           \
  |  | 8431|   507k|    else {                                                      \
  |  | 8432|   507k|        return vis(monostate_val);                              \
  |  | 8433|   507k|    }
  ------------------
 8474|   507k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 507k]
  ------------------
 8475|   507k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8428|   507k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   507k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   507k|    }                                                           \
  |  | 8431|   507k|    else {                                                      \
  |  | 8432|   507k|        return vis(monostate_val);                              \
  |  | 8433|   507k|    }
  ------------------
 8476|   507k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8476:9): [True: 0, False: 507k]
  ------------------
 8477|   507k|            SCN_VISIT(std::string);
  ------------------
  |  | 8428|   507k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   507k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   507k|    }                                                           \
  |  | 8431|   507k|    else {                                                      \
  |  | 8432|   507k|        return vis(monostate_val);                              \
  |  | 8433|   507k|    }
  ------------------
 8478|   507k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8478:9): [True: 0, False: 507k]
  ------------------
 8479|   507k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8428|   507k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   507k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   507k|    }                                                           \
  |  | 8431|   507k|    else {                                                      \
  |  | 8432|   507k|        return vis(monostate_val);                              \
  |  | 8433|   507k|    }
  ------------------
 8480|   507k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8480:9): [True: 0, False: 507k]
  ------------------
 8481|   507k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8428|   507k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   507k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   507k|    }                                                           \
  |  | 8431|   507k|    else {                                                      \
  |  | 8432|   507k|        return vis(monostate_val);                              \
  |  | 8433|   507k|    }
  ------------------
 8482|   507k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8482:9): [True: 0, False: 507k]
  ------------------
 8483|   507k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8428|   507k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   507k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   507k|    }                                                           \
  |  | 8431|   507k|    else {                                                      \
  |  | 8432|   507k|        return vis(monostate_val);                              \
  |  | 8433|   507k|    }
  ------------------
 8484|   507k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8484:9): [True: 0, False: 507k]
  ------------------
 8485|   507k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8428|   507k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   507k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   507k|    }                                                           \
  |  | 8431|   507k|    else {                                                      \
  |  | 8432|   507k|        return vis(monostate_val);                              \
  |  | 8433|   507k|    }
  ------------------
 8486|       |
 8487|   507k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8487:9): [True: 0, False: 507k]
  ------------------
 8488|   507k|#if !SCN_DISABLE_TYPE_CUSTOM
 8489|   507k|            return vis(
 8490|   507k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8491|       |#else
 8492|       |            return vis(monostate_val);
 8493|       |#endif
 8494|       |
 8495|      0|            SCN_CLANG_PUSH
 8496|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8497|       |
 8498|      0|            SCN_UNLIKELY_ATTR
 8499|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8499:9): [True: 0, False: 507k]
  ------------------
 8500|      0|        default: {
  ------------------
  |  Branch (8500:9): [True: 0, False: 507k]
  ------------------
 8501|      0|            return vis(monostate_val);
 8502|      0|        }
 8503|       |
 8504|   507k|            SCN_CLANG_POP
 8505|   507k|    }
 8506|       |
 8507|      0|#undef SCN_VISIT
 8508|       |
 8509|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8510|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8511|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7053|  1.11M|{
 7054|  1.11M|    parse_format_string_impl<IsConstexpr>(format, handler);
 7055|  1.11M|    handler.check_args_exhausted();
 7056|  1.11M|    return handler.get_error();
 7057|  1.11M|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7019|  1.11M|{
 7020|       |    // TODO: memchr fast path with a larger (> 32) format string
 7021|       |
 7022|  1.11M|    auto begin = format.data();
 7023|  1.11M|    auto it = begin;
 7024|  1.11M|    const auto end = format.data() + format.size();
 7025|       |
 7026|  2.12M|    while (it != end) {
  ------------------
  |  Branch (7026:12): [True: 1.11M, False: 1.01M]
  ------------------
 7027|  1.11M|        const auto ch = *it++;
 7028|  1.11M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7028:13): [True: 1.11M, False: 0]
  ------------------
 7029|  1.11M|            handler.on_literal_text(begin, it - 1);
 7030|       |
 7031|  1.11M|            begin = it = parse_replacement_field(it - 1, end, handler);
 7032|  1.11M|            if (!handler) {
  ------------------
  |  Branch (7032:17): [True: 98.1k, False: 1.01M]
  ------------------
 7033|  98.1k|                return;
 7034|  98.1k|            }
 7035|  1.11M|        }
 7036|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7036:18): [True: 0, False: 0]
  ------------------
 7037|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7038|      0|                handler.on_error("Unmatched '}' in format string");
 7039|      0|                return;
 7040|      0|            }
 7041|       |
 7042|      0|            handler.on_literal_text(begin, it);
 7043|      0|            begin = ++it;
 7044|      0|        }
 7045|  1.11M|    }
 7046|       |
 7047|  1.01M|    handler.on_literal_text(begin, end);
 7048|  1.01M|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6951|  1.11M|{
 6952|  1.11M|    struct id_adapter {
 6953|  1.11M|        constexpr void operator()()
 6954|  1.11M|        {
 6955|  1.11M|            arg_id = handler.on_arg_id();
 6956|  1.11M|        }
 6957|  1.11M|        constexpr void operator()(std::size_t id)
 6958|  1.11M|        {
 6959|  1.11M|            arg_id = handler.on_arg_id(id);
 6960|  1.11M|        }
 6961|       |
 6962|  1.11M|        constexpr void on_error(const char* msg)
 6963|  1.11M|        {
 6964|  1.11M|            SCN_UNLIKELY_ATTR
 6965|  1.11M|            handler.on_error(msg);
 6966|  1.11M|        }
 6967|       |
 6968|  1.11M|        Handler& handler;
 6969|  1.11M|        std::size_t arg_id;
 6970|  1.11M|    };
 6971|       |
 6972|  1.11M|    ++begin;
 6973|  1.11M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.11M]
  |  |  ------------------
  ------------------
 6974|      0|        handler.on_error("Unexpected end of replacement field");
 6975|      0|        return begin;
 6976|      0|    }
 6977|       |
 6978|  1.11M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6978:9): [True: 0, False: 1.11M]
  ------------------
 6979|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6980|      0|    }
 6981|  1.11M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6981:14): [True: 0, False: 1.11M]
  ------------------
 6982|      0|        handler.on_literal_text(begin, begin + 1);
 6983|      0|    }
 6984|  1.11M|    else {
 6985|  1.11M|        auto adapter = id_adapter{handler, 0};
 6986|  1.11M|        begin = parse_arg_id(begin, end, adapter);
 6987|       |
 6988|  1.11M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.11M]
  |  |  ------------------
  ------------------
 6989|      0|            handler.on_error("Missing '}' in format string");
 6990|      0|            return begin;
 6991|      0|        }
 6992|       |
 6993|  1.11M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6993:13): [True: 0, False: 1.11M]
  ------------------
 6994|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6995|      0|        }
 6996|  1.11M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6996:18): [True: 1.11M, False: 0]
  ------------------
 6997|  1.11M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  1.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.11M]
  |  |  ------------------
  ------------------
 6998|      0|                handler.on_error("Unexpected end of replacement field");
 6999|      0|                return begin;
 7000|      0|            }
 7001|  1.11M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7002|  1.11M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  2.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.11M]
  |  |  |  Branch (859:45): [True: 0, False: 1.11M]
  |  |  |  Branch (859:45): [True: 0, False: 1.11M]
  |  |  ------------------
  ------------------
 7003|      0|                handler.on_error("Unknown format specifier");
 7004|      0|                return begin;
 7005|      0|            }
 7006|  1.11M|        }
 7007|      0|        else {
 7008|      0|            SCN_UNLIKELY_ATTR
 7009|      0|            handler.on_error("Missing '}' in format string");
 7010|      0|            return begin;
 7011|      0|        }
 7012|  1.11M|    }
 7013|  1.11M|    return begin + 1;
 7014|  1.11M|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 8048|  2.43M|    {
 8049|  2.43M|        return m_args.get(id);
 8050|  2.43M|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8058|  2.43M|    {
 8059|  2.43M|        return m_locale;
 8060|  2.43M|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5575|  2.43M|    {
 5576|  2.43M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  2.43M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.43M]
  |  |  ------------------
  ------------------
 5577|      0|            on_error(
 5578|      0|                "Cannot switch from manual to automatic argument indexing");
 5579|      0|            return 0;
 5580|      0|        }
 5581|       |
 5582|  2.43M|        auto id = static_cast<size_t>(m_next_arg_id++);
 5583|  2.43M|        do_check_arg_id(id);
 5584|  2.43M|        return id;
 5585|  2.43M|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6063|  2.43M|{
 6064|  2.43M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6064:9): [Folded - Ignored]
  ------------------
 6065|  2.43M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6065:10): [Folded - Ignored]
  |  Branch (6065:22): [Folded - Ignored]
  ------------------
 6066|       |        // The cast below will cause an error on gcc pre-12
 6067|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6068|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6068:13): [True: 0, False: 0]
  ------------------
 6069|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6070|      0|            SCN_UNLIKELY_ATTR
 6071|      0|            on_error("Argument not found");
 6072|      0|        }
 6073|      0|    }
 6074|  2.43M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6452|  1.11M|{
 6453|  1.11M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.11M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.11M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6454|  1.11M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6454:9): [True: 1.11M, False: 0]
  |  Branch (6454:26): [True: 0, False: 1.11M]
  ------------------
 6455|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6456|      0|    }
 6457|       |
 6458|  1.11M|    handler();
 6459|  1.11M|    return begin;
 6460|  1.11M|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6954|  1.11M|        {
 6955|  1.11M|            arg_id = handler.on_arg_id();
 6956|  1.11M|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5261|  4.87M|    {
 5262|  4.87M|        return m_type;
 5263|  4.87M|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5570|  2.43M|    {
 5571|  2.43M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5572|  2.43M|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5559|  4.87M|    {
 5560|  4.87M|        return m_format.data();
 5561|  4.87M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7130|  1.11M|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|  1.11M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7131|  1.11M|    {
 7132|  1.11M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  1.11M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.11M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7133|  1.11M|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6867|  1.11M|{
 6868|  1.11M|    auto do_presentation = [&]() -> const CharT* {
 6869|  1.11M|        if (*begin == CharT{'['}) {
 6870|  1.11M|            auto set = parse_presentation_set(begin, end, handler);
 6871|  1.11M|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6872|       |                // clang-format off
 6873|  1.11M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6874|       |                // clang-format on
 6875|  1.11M|                return begin;
 6876|  1.11M|            }
 6877|  1.11M|            handler.on_character_set_string(set);
 6878|  1.11M|            return begin;
 6879|  1.11M|        }
 6880|  1.11M|        if (*begin == CharT{'/'}) {
 6881|  1.11M|            return parse_presentation_regex(begin, end, handler);
 6882|  1.11M|        }
 6883|  1.11M|        presentation_type type = parse_presentation_type(*begin++);
 6884|  1.11M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6885|  1.11M|            handler.on_error("Invalid type specifier in format string");
 6886|  1.11M|            return begin;
 6887|  1.11M|        }
 6888|  1.11M|        handler.on_type(type);
 6889|  1.11M|        return begin;
 6890|  1.11M|    };
 6891|       |
 6892|  1.11M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6892:9): [True: 1.11M, False: 0]
  |  Branch (6892:28): [True: 1.11M, False: 0]
  ------------------
 6893|  1.11M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6893:9): [True: 1.11M, False: 0]
  |  Branch (6893:36): [True: 804k, False: 307k]
  ------------------
 6894|   804k|        return do_presentation();
 6895|   804k|    }
 6896|       |
 6897|   307k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   307k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 307k]
  |  |  ------------------
  ------------------
 6898|      0|        handler.on_error("Unexpected end of format string");
 6899|      0|        return begin;
 6900|      0|    }
 6901|       |
 6902|   307k|    begin = parse_align(begin, end, handler);
 6903|   307k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   307k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 307k]
  |  |  ------------------
  ------------------
 6904|      0|        handler.on_error("Unexpected end of format string");
 6905|      0|        return begin;
 6906|      0|    }
 6907|       |
 6908|   307k|    begin = parse_width(begin, end, handler);
 6909|   307k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   307k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 307k]
  |  |  ------------------
  ------------------
 6910|      0|        handler.on_error("Unexpected end of format string");
 6911|      0|        return begin;
 6912|      0|    }
 6913|       |
 6914|   307k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6914:9): [True: 0, False: 307k]
  ------------------
 6915|      0|        ++begin;
 6916|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6917|      0|            handler.on_error("Unexpected end of format string");
 6918|      0|            return begin;
 6919|      0|        }
 6920|      0|        begin = parse_precision(begin, end, handler);
 6921|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6922|      0|            handler.on_error("Unexpected end of format string");
 6923|      0|            return begin;
 6924|      0|        }
 6925|      0|    }
 6926|       |
 6927|   307k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6927:9): [True: 307k, False: 0]
  ------------------
 6928|   307k|        handler.on_localized();
 6929|   307k|        ++begin;
 6930|   307k|    }
 6931|   307k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   307k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 307k]
  |  |  ------------------
  ------------------
 6932|      0|        handler.on_error("Unexpected end of format string");
 6933|      0|        return begin;
 6934|      0|    }
 6935|       |
 6936|   307k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6936:9): [True: 307k, False: 0]
  |  Branch (6936:25): [True: 0, False: 307k]
  ------------------
 6937|      0|        do_presentation();
 6938|      0|    }
 6939|   307k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   307k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 307k]
  |  |  ------------------
  ------------------
 6940|      0|        handler.on_error("Unexpected end of format string");
 6941|      0|        return begin;
 6942|      0|    }
 6943|       |
 6944|   307k|    return begin;
 6945|   307k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6516|  2.43M|{
 6517|  2.43M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6517:13): [True: 1.75M, False: 681k]
  |  Branch (6517:33): [True: 1.75M, False: 0]
  ------------------
 6518|  2.43M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6518:13): [True: 681k, False: 0]
  |  Branch (6518:33): [True: 681k, False: 0]
  ------------------
 6519|  2.43M|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6868|   804k|    auto do_presentation = [&]() -> const CharT* {
 6869|   804k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6869:13): [True: 0, False: 804k]
  ------------------
 6870|      0|            auto set = parse_presentation_set(begin, end, handler);
 6871|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6872|       |                // clang-format off
 6873|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6874|       |                // clang-format on
 6875|      0|                return begin;
 6876|      0|            }
 6877|      0|            handler.on_character_set_string(set);
 6878|      0|            return begin;
 6879|      0|        }
 6880|   804k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6880:13): [True: 0, False: 804k]
  ------------------
 6881|      0|            return parse_presentation_regex(begin, end, handler);
 6882|      0|        }
 6883|   804k|        presentation_type type = parse_presentation_type(*begin++);
 6884|   804k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   804k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 804k]
  |  |  ------------------
  ------------------
 6885|      0|            handler.on_error("Invalid type specifier in format string");
 6886|      0|            return begin;
 6887|      0|        }
 6888|   804k|        handler.on_type(type);
 6889|   804k|        return begin;
 6890|   804k|    };
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6464|  1.75M|{
 6465|  1.75M|    switch (type) {
 6466|      0|        case 'b':
  ------------------
  |  Branch (6466:9): [True: 0, False: 1.75M]
  ------------------
 6467|      0|        case 'B':
  ------------------
  |  Branch (6467:9): [True: 0, False: 1.75M]
  ------------------
 6468|      0|            return presentation_type::int_binary;
 6469|      0|        case 'd':
  ------------------
  |  Branch (6469:9): [True: 0, False: 1.75M]
  ------------------
 6470|      0|            return presentation_type::int_decimal;
 6471|      0|        case 'i':
  ------------------
  |  Branch (6471:9): [True: 0, False: 1.75M]
  ------------------
 6472|      0|            return presentation_type::int_generic;
 6473|      0|        case 'u':
  ------------------
  |  Branch (6473:9): [True: 0, False: 1.75M]
  ------------------
 6474|      0|            return presentation_type::int_unsigned_decimal;
 6475|      0|        case 'o':
  ------------------
  |  Branch (6475:9): [True: 0, False: 1.75M]
  ------------------
 6476|      0|            return presentation_type::int_octal;
 6477|      0|        case 'x':
  ------------------
  |  Branch (6477:9): [True: 0, False: 1.75M]
  ------------------
 6478|      0|        case 'X':
  ------------------
  |  Branch (6478:9): [True: 0, False: 1.75M]
  ------------------
 6479|      0|            return presentation_type::int_hex;
 6480|      0|        case 'r':
  ------------------
  |  Branch (6480:9): [True: 0, False: 1.75M]
  ------------------
 6481|      0|        case 'R':
  ------------------
  |  Branch (6481:9): [True: 0, False: 1.75M]
  ------------------
 6482|      0|            return presentation_type::int_arbitrary_base;
 6483|   743k|        case 'a':
  ------------------
  |  Branch (6483:9): [True: 743k, False: 1.01M]
  ------------------
 6484|   743k|        case 'A':
  ------------------
  |  Branch (6484:9): [True: 0, False: 1.75M]
  ------------------
 6485|   743k|            return presentation_type::float_hex;
 6486|  59.4k|        case 'e':
  ------------------
  |  Branch (6486:9): [True: 59.4k, False: 1.69M]
  ------------------
 6487|  59.4k|        case 'E':
  ------------------
  |  Branch (6487:9): [True: 0, False: 1.75M]
  ------------------
 6488|  59.4k|            return presentation_type::float_scientific;
 6489|   368k|        case 'f':
  ------------------
  |  Branch (6489:9): [True: 368k, False: 1.38M]
  ------------------
 6490|   368k|        case 'F':
  ------------------
  |  Branch (6490:9): [True: 0, False: 1.75M]
  ------------------
 6491|   368k|            return presentation_type::float_fixed;
 6492|   586k|        case 'g':
  ------------------
  |  Branch (6492:9): [True: 586k, False: 1.17M]
  ------------------
 6493|   586k|        case 'G':
  ------------------
  |  Branch (6493:9): [True: 0, False: 1.75M]
  ------------------
 6494|   586k|            return presentation_type::float_general;
 6495|      0|        case 's':
  ------------------
  |  Branch (6495:9): [True: 0, False: 1.75M]
  ------------------
 6496|      0|            return presentation_type::string;
 6497|      0|        case 'c':
  ------------------
  |  Branch (6497:9): [True: 0, False: 1.75M]
  ------------------
 6498|      0|            return presentation_type::character;
 6499|      0|        case '?':
  ------------------
  |  Branch (6499:9): [True: 0, False: 1.75M]
  ------------------
 6500|      0|            return presentation_type::escaped_character;
 6501|      0|        case 'p':
  ------------------
  |  Branch (6501:9): [True: 0, False: 1.75M]
  ------------------
 6502|      0|            return presentation_type::pointer;
 6503|      0|        case '[':
  ------------------
  |  Branch (6503:9): [True: 0, False: 1.75M]
  ------------------
 6504|      0|        case '/':
  ------------------
  |  Branch (6504:9): [True: 0, False: 1.75M]
  ------------------
 6505|       |            // Should be handled by parse_presentation_set and
 6506|       |            // parse_presentation_regex
 6507|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6508|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6509|      0|        default:
  ------------------
  |  Branch (6509:9): [True: 0, False: 1.75M]
  ------------------
 6510|      0|            return presentation_type::none;
 6511|  1.75M|    }
 6512|  1.75M|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6541|   307k|{
 6542|   307k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   307k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   307k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6543|       |
 6544|   307k|    auto check_align = [](wchar_t ch) {
 6545|   307k|        switch (ch) {
 6546|   307k|            case L'<':
 6547|   307k|                return align_type::left;
 6548|   307k|            case L'>':
 6549|   307k|                return align_type::right;
 6550|   307k|            case L'^':
 6551|   307k|                return align_type::center;
 6552|   307k|            default:
 6553|   307k|                return align_type::none;
 6554|   307k|        }
 6555|   307k|    };
 6556|       |
 6557|   307k|    auto potential_fill_len = code_point_length(begin, end);
 6558|   307k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   615k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 307k]
  |  |  |  Branch (859:45): [True: 0, False: 307k]
  |  |  |  Branch (859:45): [True: 0, False: 307k]
  |  |  ------------------
  ------------------
 6559|   307k|                     std::distance(begin, end) < potential_fill_len)) {
 6560|      0|        handler.on_error("Invalid encoding in fill character");
 6561|      0|        return begin;
 6562|      0|    }
 6563|       |
 6564|   307k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6565|       |
 6566|   307k|    auto potential_fill = std::basic_string_view<CharT>{
 6567|   307k|        begin, static_cast<size_t>(potential_fill_len)};
 6568|   307k|    const auto begin_before_fill = begin;
 6569|   307k|    begin += potential_fill_len;
 6570|       |
 6571|   307k|    if (begin == end) {
  ------------------
  |  Branch (6571:9): [True: 0, False: 307k]
  ------------------
 6572|      0|        return begin_before_fill;
 6573|      0|    }
 6574|       |
 6575|   307k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6576|   307k|    const auto begin_after_fill = begin;
 6577|   307k|    ++begin;
 6578|       |
 6579|   307k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6579:9): [True: 307k, False: 0]
  ------------------
 6580|   307k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   307k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 307k]
  |  |  ------------------
  ------------------
 6581|      0|            handler.on_error("Invalid fill character '{' in format string");
 6582|      0|            return begin;
 6583|      0|        }
 6584|   307k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6584:13): [True: 0, False: 307k]
  ------------------
 6585|      0|            return begin_before_fill;
 6586|      0|        }
 6587|   307k|    }
 6588|       |
 6589|   307k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6589:9): [True: 307k, False: 0]
  ------------------
 6590|   307k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6590:13): [True: 0, False: 307k]
  ------------------
 6591|      0|            handler.on_align(potential_align_on_fill);
 6592|      0|            return begin_after_fill;
 6593|      0|        }
 6594|   307k|        return begin_before_fill;
 6595|   307k|    }
 6596|       |
 6597|      0|    handler.on_fill(potential_fill);
 6598|      0|    handler.on_align(potential_align_after_fill);
 6599|      0|    return begin;
 6600|   307k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6523|   681k|{
 6524|   681k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   681k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   681k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6525|       |    if constexpr (sizeof(CharT) != 1) {
 6526|       |        return 1;
 6527|       |    }
 6528|   681k|    else {
 6529|   681k|        const auto lengths =
 6530|   681k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6531|   681k|            "\3\4";
 6532|   681k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6533|   681k|        return len;
 6534|   681k|    }
 6535|   681k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6544|   615k|    auto check_align = [](wchar_t ch) {
 6545|   615k|        switch (ch) {
 6546|      0|            case L'<':
  ------------------
  |  Branch (6546:13): [True: 0, False: 615k]
  ------------------
 6547|      0|                return align_type::left;
 6548|      0|            case L'>':
  ------------------
  |  Branch (6548:13): [True: 0, False: 615k]
  ------------------
 6549|      0|                return align_type::right;
 6550|      0|            case L'^':
  ------------------
  |  Branch (6550:13): [True: 0, False: 615k]
  ------------------
 6551|      0|                return align_type::center;
 6552|   615k|            default:
  ------------------
  |  Branch (6552:13): [True: 615k, False: 0]
  ------------------
 6553|   615k|                return align_type::none;
 6554|   615k|        }
 6555|   615k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6606|   307k|{
 6607|   307k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   307k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   307k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6608|       |
 6609|   307k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6609:9): [True: 307k, False: 0]
  |  Branch (6609:33): [True: 0, False: 307k]
  ------------------
 6610|      0|        int width = parse_simple_int(begin, end);
 6611|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6612|      0|            handler.on_width(width);
 6613|      0|        }
 6614|      0|        else {
 6615|      0|            handler.on_error("Invalid field width");
 6616|      0|            return begin;
 6617|      0|        }
 6618|      0|    }
 6619|   307k|    return begin;
 6620|   307k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7136|   307k|    {
 7137|   307k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7138|   307k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7138:13): [True: 307k, False: 0]
  ------------------
 7139|   307k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7139:13): [True: 307k, False: 0]
  ------------------
 7140|   307k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7140:13): [True: 0, False: 307k]
  ------------------
 7141|   307k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7141:13): [True: 0, False: 0]
  ------------------
 7142|      0|            SCN_UNLIKELY_ATTR
 7143|       |            // clang-format off
 7144|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7145|       |            // clang-format on
 7146|      0|        }
 7147|       |
 7148|   307k|        Handler::on_localized();
 7149|   307k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8426|  1.11M|{
 8427|  1.11M|#define SCN_VISIT(Type)                                         \
 8428|  1.11M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8429|  1.11M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8430|  1.11M|    }                                                           \
 8431|  1.11M|    else {                                                      \
 8432|  1.11M|        return vis(monostate_val);                              \
 8433|  1.11M|    }
 8434|       |
 8435|  1.11M|    monostate monostate_val{};
 8436|       |
 8437|  1.11M|    switch (arg.m_type) {
 8438|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 1.11M]
  ------------------
 8439|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 1.11M]
  ------------------
 8441|      0|            SCN_VISIT(short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 1.11M]
  ------------------
 8443|      0|            SCN_VISIT(int);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 1.11M]
  ------------------
 8445|      0|            SCN_VISIT(long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 1.11M]
  ------------------
 8447|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 1.11M]
  ------------------
 8449|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 1.11M]
  ------------------
 8451|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 1.11M]
  ------------------
 8453|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 1.11M]
  ------------------
 8455|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 1.11M]
  ------------------
 8457|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 1.11M]
  ------------------
 8459|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 1.11M]
  ------------------
 8461|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 1.11M]
  ------------------
 8463|      0|            SCN_VISIT(char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 1.11M]
  ------------------
 8465|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 1.11M]
  ------------------
 8467|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8468|   361k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8468:9): [True: 361k, False: 750k]
  ------------------
 8469|   361k|            SCN_VISIT(float);
  ------------------
  |  | 8428|   361k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   361k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   361k|    }                                                           \
  |  | 8431|   361k|    else {                                                      \
  |  | 8432|   361k|        return vis(monostate_val);                              \
  |  | 8433|   361k|    }
  ------------------
 8470|   734k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8470:9): [True: 373k, False: 738k]
  ------------------
 8471|   734k|            SCN_VISIT(double);
  ------------------
  |  | 8428|   734k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   734k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   734k|    }                                                           \
  |  | 8431|   734k|    else {                                                      \
  |  | 8432|   734k|        return vis(monostate_val);                              \
  |  | 8433|   734k|    }
  ------------------
 8472|  1.11M|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8472:9): [True: 377k, False: 734k]
  ------------------
 8473|  1.11M|            SCN_VISIT(long double);
  ------------------
  |  | 8428|  1.11M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  1.11M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  1.11M|    }                                                           \
  |  | 8431|  1.11M|    else {                                                      \
  |  | 8432|  1.11M|        return vis(monostate_val);                              \
  |  | 8433|  1.11M|    }
  ------------------
 8474|  1.11M|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 1.11M]
  ------------------
 8475|  1.11M|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8428|  1.11M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  1.11M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  1.11M|    }                                                           \
  |  | 8431|  1.11M|    else {                                                      \
  |  | 8432|  1.11M|        return vis(monostate_val);                              \
  |  | 8433|  1.11M|    }
  ------------------
 8476|  1.11M|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8476:9): [True: 0, False: 1.11M]
  ------------------
 8477|  1.11M|            SCN_VISIT(std::string);
  ------------------
  |  | 8428|  1.11M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  1.11M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  1.11M|    }                                                           \
  |  | 8431|  1.11M|    else {                                                      \
  |  | 8432|  1.11M|        return vis(monostate_val);                              \
  |  | 8433|  1.11M|    }
  ------------------
 8478|  1.11M|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8478:9): [True: 0, False: 1.11M]
  ------------------
 8479|  1.11M|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8428|  1.11M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  1.11M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  1.11M|    }                                                           \
  |  | 8431|  1.11M|    else {                                                      \
  |  | 8432|  1.11M|        return vis(monostate_val);                              \
  |  | 8433|  1.11M|    }
  ------------------
 8480|  1.11M|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8480:9): [True: 0, False: 1.11M]
  ------------------
 8481|  1.11M|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8428|  1.11M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  1.11M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  1.11M|    }                                                           \
  |  | 8431|  1.11M|    else {                                                      \
  |  | 8432|  1.11M|        return vis(monostate_val);                              \
  |  | 8433|  1.11M|    }
  ------------------
 8482|  1.11M|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8482:9): [True: 0, False: 1.11M]
  ------------------
 8483|  1.11M|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8428|  1.11M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  1.11M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  1.11M|    }                                                           \
  |  | 8431|  1.11M|    else {                                                      \
  |  | 8432|  1.11M|        return vis(monostate_val);                              \
  |  | 8433|  1.11M|    }
  ------------------
 8484|  1.11M|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8484:9): [True: 0, False: 1.11M]
  ------------------
 8485|  1.11M|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8428|  1.11M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  1.11M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  1.11M|    }                                                           \
  |  | 8431|  1.11M|    else {                                                      \
  |  | 8432|  1.11M|        return vis(monostate_val);                              \
  |  | 8433|  1.11M|    }
  ------------------
 8486|       |
 8487|  1.11M|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8487:9): [True: 0, False: 1.11M]
  ------------------
 8488|  1.11M|#if !SCN_DISABLE_TYPE_CUSTOM
 8489|  1.11M|            return vis(
 8490|  1.11M|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8491|       |#else
 8492|       |            return vis(monostate_val);
 8493|       |#endif
 8494|       |
 8495|      0|            SCN_CLANG_PUSH
 8496|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8497|       |
 8498|      0|            SCN_UNLIKELY_ATTR
 8499|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8499:9): [True: 0, False: 1.11M]
  ------------------
 8500|      0|        default: {
  ------------------
  |  Branch (8500:9): [True: 0, False: 1.11M]
  ------------------
 8501|      0|            return vis(monostate_val);
 8502|      0|        }
 8503|       |
 8504|  1.11M|            SCN_CLANG_POP
 8505|  1.11M|    }
 8506|       |
 8507|      0|#undef SCN_VISIT
 8508|       |
 8509|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8510|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8511|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7053|  1.32M|{
 7054|  1.32M|    parse_format_string_impl<IsConstexpr>(format, handler);
 7055|  1.32M|    handler.check_args_exhausted();
 7056|  1.32M|    return handler.get_error();
 7057|  1.32M|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7019|  1.32M|{
 7020|       |    // TODO: memchr fast path with a larger (> 32) format string
 7021|       |
 7022|  1.32M|    auto begin = format.data();
 7023|  1.32M|    auto it = begin;
 7024|  1.32M|    const auto end = format.data() + format.size();
 7025|       |
 7026|  2.55M|    while (it != end) {
  ------------------
  |  Branch (7026:12): [True: 1.32M, False: 1.22M]
  ------------------
 7027|  1.32M|        const auto ch = *it++;
 7028|  1.32M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7028:13): [True: 1.32M, False: 0]
  ------------------
 7029|  1.32M|            handler.on_literal_text(begin, it - 1);
 7030|       |
 7031|  1.32M|            begin = it = parse_replacement_field(it - 1, end, handler);
 7032|  1.32M|            if (!handler) {
  ------------------
  |  Branch (7032:17): [True: 98.1k, False: 1.22M]
  ------------------
 7033|  98.1k|                return;
 7034|  98.1k|            }
 7035|  1.32M|        }
 7036|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7036:18): [True: 0, False: 0]
  ------------------
 7037|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7038|      0|                handler.on_error("Unmatched '}' in format string");
 7039|      0|                return;
 7040|      0|            }
 7041|       |
 7042|      0|            handler.on_literal_text(begin, it);
 7043|      0|            begin = ++it;
 7044|      0|        }
 7045|  1.32M|    }
 7046|       |
 7047|  1.22M|    handler.on_literal_text(begin, end);
 7048|  1.22M|}
_ZN3scn2v318basic_scan_contextIcE10advance_toENS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
 8184|  1.22M|    {
 8185|  1.22M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  1.22M|    static_cast<    \
  |  |  929|  1.22M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8186|  1.22M|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 6951|  1.32M|{
 6952|  1.32M|    struct id_adapter {
 6953|  1.32M|        constexpr void operator()()
 6954|  1.32M|        {
 6955|  1.32M|            arg_id = handler.on_arg_id();
 6956|  1.32M|        }
 6957|  1.32M|        constexpr void operator()(std::size_t id)
 6958|  1.32M|        {
 6959|  1.32M|            arg_id = handler.on_arg_id(id);
 6960|  1.32M|        }
 6961|       |
 6962|  1.32M|        constexpr void on_error(const char* msg)
 6963|  1.32M|        {
 6964|  1.32M|            SCN_UNLIKELY_ATTR
 6965|  1.32M|            handler.on_error(msg);
 6966|  1.32M|        }
 6967|       |
 6968|  1.32M|        Handler& handler;
 6969|  1.32M|        std::size_t arg_id;
 6970|  1.32M|    };
 6971|       |
 6972|  1.32M|    ++begin;
 6973|  1.32M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.32M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.32M]
  |  |  ------------------
  ------------------
 6974|      0|        handler.on_error("Unexpected end of replacement field");
 6975|      0|        return begin;
 6976|      0|    }
 6977|       |
 6978|  1.32M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6978:9): [True: 0, False: 1.32M]
  ------------------
 6979|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6980|      0|    }
 6981|  1.32M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6981:14): [True: 0, False: 1.32M]
  ------------------
 6982|      0|        handler.on_literal_text(begin, begin + 1);
 6983|      0|    }
 6984|  1.32M|    else {
 6985|  1.32M|        auto adapter = id_adapter{handler, 0};
 6986|  1.32M|        begin = parse_arg_id(begin, end, adapter);
 6987|       |
 6988|  1.32M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.32M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.32M]
  |  |  ------------------
  ------------------
 6989|      0|            handler.on_error("Missing '}' in format string");
 6990|      0|            return begin;
 6991|      0|        }
 6992|       |
 6993|  1.32M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6993:13): [True: 0, False: 1.32M]
  ------------------
 6994|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6995|      0|        }
 6996|  1.32M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6996:18): [True: 1.32M, False: 0]
  ------------------
 6997|  1.32M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  1.32M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.32M]
  |  |  ------------------
  ------------------
 6998|      0|                handler.on_error("Unexpected end of replacement field");
 6999|      0|                return begin;
 7000|      0|            }
 7001|  1.32M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7002|  1.32M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  2.65M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.32M]
  |  |  |  Branch (859:45): [True: 0, False: 1.32M]
  |  |  |  Branch (859:45): [True: 0, False: 1.32M]
  |  |  ------------------
  ------------------
 7003|      0|                handler.on_error("Unknown format specifier");
 7004|      0|                return begin;
 7005|      0|            }
 7006|  1.32M|        }
 7007|      0|        else {
 7008|      0|            SCN_UNLIKELY_ATTR
 7009|      0|            handler.on_error("Missing '}' in format string");
 7010|      0|            return begin;
 7011|      0|        }
 7012|  1.32M|    }
 7013|  1.32M|    return begin + 1;
 7014|  1.32M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6452|  1.32M|{
 6453|  1.32M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.32M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.32M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6454|  1.32M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6454:9): [True: 1.32M, False: 0]
  |  Branch (6454:26): [True: 0, False: 1.32M]
  ------------------
 6455|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6456|      0|    }
 6457|       |
 6458|  1.32M|    handler();
 6459|  1.32M|    return begin;
 6460|  1.32M|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6954|  1.32M|        {
 6955|  1.32M|            arg_id = handler.on_arg_id();
 6956|  1.32M|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7130|  1.32M|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|  1.32M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7131|  1.32M|    {
 7132|  1.32M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  1.32M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.32M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7133|  1.32M|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6867|  1.32M|{
 6868|  1.32M|    auto do_presentation = [&]() -> const CharT* {
 6869|  1.32M|        if (*begin == CharT{'['}) {
 6870|  1.32M|            auto set = parse_presentation_set(begin, end, handler);
 6871|  1.32M|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6872|       |                // clang-format off
 6873|  1.32M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6874|       |                // clang-format on
 6875|  1.32M|                return begin;
 6876|  1.32M|            }
 6877|  1.32M|            handler.on_character_set_string(set);
 6878|  1.32M|            return begin;
 6879|  1.32M|        }
 6880|  1.32M|        if (*begin == CharT{'/'}) {
 6881|  1.32M|            return parse_presentation_regex(begin, end, handler);
 6882|  1.32M|        }
 6883|  1.32M|        presentation_type type = parse_presentation_type(*begin++);
 6884|  1.32M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6885|  1.32M|            handler.on_error("Invalid type specifier in format string");
 6886|  1.32M|            return begin;
 6887|  1.32M|        }
 6888|  1.32M|        handler.on_type(type);
 6889|  1.32M|        return begin;
 6890|  1.32M|    };
 6891|       |
 6892|  1.32M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6892:9): [True: 1.32M, False: 0]
  |  Branch (6892:28): [True: 1.32M, False: 0]
  ------------------
 6893|  1.32M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6893:9): [True: 1.32M, False: 0]
  |  Branch (6893:36): [True: 952k, False: 374k]
  ------------------
 6894|   952k|        return do_presentation();
 6895|   952k|    }
 6896|       |
 6897|   374k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   374k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 374k]
  |  |  ------------------
  ------------------
 6898|      0|        handler.on_error("Unexpected end of format string");
 6899|      0|        return begin;
 6900|      0|    }
 6901|       |
 6902|   374k|    begin = parse_align(begin, end, handler);
 6903|   374k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   374k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 374k]
  |  |  ------------------
  ------------------
 6904|      0|        handler.on_error("Unexpected end of format string");
 6905|      0|        return begin;
 6906|      0|    }
 6907|       |
 6908|   374k|    begin = parse_width(begin, end, handler);
 6909|   374k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   374k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 374k]
  |  |  ------------------
  ------------------
 6910|      0|        handler.on_error("Unexpected end of format string");
 6911|      0|        return begin;
 6912|      0|    }
 6913|       |
 6914|   374k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6914:9): [True: 0, False: 374k]
  ------------------
 6915|      0|        ++begin;
 6916|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6917|      0|            handler.on_error("Unexpected end of format string");
 6918|      0|            return begin;
 6919|      0|        }
 6920|      0|        begin = parse_precision(begin, end, handler);
 6921|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6922|      0|            handler.on_error("Unexpected end of format string");
 6923|      0|            return begin;
 6924|      0|        }
 6925|      0|    }
 6926|       |
 6927|   374k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6927:9): [True: 374k, False: 0]
  ------------------
 6928|   374k|        handler.on_localized();
 6929|   374k|        ++begin;
 6930|   374k|    }
 6931|   374k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   374k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 374k]
  |  |  ------------------
  ------------------
 6932|      0|        handler.on_error("Unexpected end of format string");
 6933|      0|        return begin;
 6934|      0|    }
 6935|       |
 6936|   374k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6936:9): [True: 374k, False: 0]
  |  Branch (6936:25): [True: 0, False: 374k]
  ------------------
 6937|      0|        do_presentation();
 6938|      0|    }
 6939|   374k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   374k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 374k]
  |  |  ------------------
  ------------------
 6940|      0|        handler.on_error("Unexpected end of format string");
 6941|      0|        return begin;
 6942|      0|    }
 6943|       |
 6944|   374k|    return begin;
 6945|   374k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6868|   952k|    auto do_presentation = [&]() -> const CharT* {
 6869|   952k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6869:13): [True: 0, False: 952k]
  ------------------
 6870|      0|            auto set = parse_presentation_set(begin, end, handler);
 6871|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6872|       |                // clang-format off
 6873|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6874|       |                // clang-format on
 6875|      0|                return begin;
 6876|      0|            }
 6877|      0|            handler.on_character_set_string(set);
 6878|      0|            return begin;
 6879|      0|        }
 6880|   952k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6880:13): [True: 0, False: 952k]
  ------------------
 6881|      0|            return parse_presentation_regex(begin, end, handler);
 6882|      0|        }
 6883|   952k|        presentation_type type = parse_presentation_type(*begin++);
 6884|   952k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   952k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 952k]
  |  |  ------------------
  ------------------
 6885|      0|            handler.on_error("Invalid type specifier in format string");
 6886|      0|            return begin;
 6887|      0|        }
 6888|   952k|        handler.on_type(type);
 6889|   952k|        return begin;
 6890|   952k|    };
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6541|   374k|{
 6542|   374k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   374k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   374k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6543|       |
 6544|   374k|    auto check_align = [](wchar_t ch) {
 6545|   374k|        switch (ch) {
 6546|   374k|            case L'<':
 6547|   374k|                return align_type::left;
 6548|   374k|            case L'>':
 6549|   374k|                return align_type::right;
 6550|   374k|            case L'^':
 6551|   374k|                return align_type::center;
 6552|   374k|            default:
 6553|   374k|                return align_type::none;
 6554|   374k|        }
 6555|   374k|    };
 6556|       |
 6557|   374k|    auto potential_fill_len = code_point_length(begin, end);
 6558|   374k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   748k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 374k]
  |  |  |  Branch (859:45): [True: 0, False: 374k]
  |  |  |  Branch (859:45): [True: 0, False: 374k]
  |  |  ------------------
  ------------------
 6559|   374k|                     std::distance(begin, end) < potential_fill_len)) {
 6560|      0|        handler.on_error("Invalid encoding in fill character");
 6561|      0|        return begin;
 6562|      0|    }
 6563|       |
 6564|   374k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6565|       |
 6566|   374k|    auto potential_fill = std::basic_string_view<CharT>{
 6567|   374k|        begin, static_cast<size_t>(potential_fill_len)};
 6568|   374k|    const auto begin_before_fill = begin;
 6569|   374k|    begin += potential_fill_len;
 6570|       |
 6571|   374k|    if (begin == end) {
  ------------------
  |  Branch (6571:9): [True: 0, False: 374k]
  ------------------
 6572|      0|        return begin_before_fill;
 6573|      0|    }
 6574|       |
 6575|   374k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6576|   374k|    const auto begin_after_fill = begin;
 6577|   374k|    ++begin;
 6578|       |
 6579|   374k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6579:9): [True: 374k, False: 0]
  ------------------
 6580|   374k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   374k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 374k]
  |  |  ------------------
  ------------------
 6581|      0|            handler.on_error("Invalid fill character '{' in format string");
 6582|      0|            return begin;
 6583|      0|        }
 6584|   374k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6584:13): [True: 0, False: 374k]
  ------------------
 6585|      0|            return begin_before_fill;
 6586|      0|        }
 6587|   374k|    }
 6588|       |
 6589|   374k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6589:9): [True: 374k, False: 0]
  ------------------
 6590|   374k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6590:13): [True: 0, False: 374k]
  ------------------
 6591|      0|            handler.on_align(potential_align_on_fill);
 6592|      0|            return begin_after_fill;
 6593|      0|        }
 6594|   374k|        return begin_before_fill;
 6595|   374k|    }
 6596|       |
 6597|      0|    handler.on_fill(potential_fill);
 6598|      0|    handler.on_align(potential_align_after_fill);
 6599|      0|    return begin;
 6600|   374k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6544|   748k|    auto check_align = [](wchar_t ch) {
 6545|   748k|        switch (ch) {
 6546|      0|            case L'<':
  ------------------
  |  Branch (6546:13): [True: 0, False: 748k]
  ------------------
 6547|      0|                return align_type::left;
 6548|      0|            case L'>':
  ------------------
  |  Branch (6548:13): [True: 0, False: 748k]
  ------------------
 6549|      0|                return align_type::right;
 6550|      0|            case L'^':
  ------------------
  |  Branch (6550:13): [True: 0, False: 748k]
  ------------------
 6551|      0|                return align_type::center;
 6552|   748k|            default:
  ------------------
  |  Branch (6552:13): [True: 748k, False: 0]
  ------------------
 6553|   748k|                return align_type::none;
 6554|   748k|        }
 6555|   748k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6606|   374k|{
 6607|   374k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   374k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   374k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6608|       |
 6609|   374k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6609:9): [True: 374k, False: 0]
  |  Branch (6609:33): [True: 0, False: 374k]
  ------------------
 6610|      0|        int width = parse_simple_int(begin, end);
 6611|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6612|      0|            handler.on_width(width);
 6613|      0|        }
 6614|      0|        else {
 6615|      0|            handler.on_error("Invalid field width");
 6616|      0|            return begin;
 6617|      0|        }
 6618|      0|    }
 6619|   374k|    return begin;
 6620|   374k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 7136|   374k|    {
 7137|   374k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7138|   374k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7138:13): [True: 374k, False: 0]
  ------------------
 7139|   374k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7139:13): [True: 374k, False: 0]
  ------------------
 7140|   374k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7140:13): [True: 0, False: 374k]
  ------------------
 7141|   374k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7141:13): [True: 0, False: 0]
  ------------------
 7142|      0|            SCN_UNLIKELY_ATTR
 7143|       |            // clang-format off
 7144|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7145|       |            // clang-format on
 7146|      0|        }
 7147|       |
 7148|   374k|        Handler::on_localized();
 7149|   374k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8426|  1.32M|{
 8427|  1.32M|#define SCN_VISIT(Type)                                         \
 8428|  1.32M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8429|  1.32M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8430|  1.32M|    }                                                           \
 8431|  1.32M|    else {                                                      \
 8432|  1.32M|        return vis(monostate_val);                              \
 8433|  1.32M|    }
 8434|       |
 8435|  1.32M|    monostate monostate_val{};
 8436|       |
 8437|  1.32M|    switch (arg.m_type) {
 8438|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 1.32M]
  ------------------
 8439|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 1.32M]
  ------------------
 8441|      0|            SCN_VISIT(short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 1.32M]
  ------------------
 8443|      0|            SCN_VISIT(int);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 1.32M]
  ------------------
 8445|      0|            SCN_VISIT(long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 1.32M]
  ------------------
 8447|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 1.32M]
  ------------------
 8449|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 1.32M]
  ------------------
 8451|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 1.32M]
  ------------------
 8453|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 1.32M]
  ------------------
 8455|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 1.32M]
  ------------------
 8457|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 1.32M]
  ------------------
 8459|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 1.32M]
  ------------------
 8461|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 1.32M]
  ------------------
 8463|      0|            SCN_VISIT(char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 1.32M]
  ------------------
 8465|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 1.32M]
  ------------------
 8467|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8468|   427k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8468:9): [True: 427k, False: 899k]
  ------------------
 8469|   427k|            SCN_VISIT(float);
  ------------------
  |  | 8428|   427k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   427k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   427k|    }                                                           \
  |  | 8431|   427k|    else {                                                      \
  |  | 8432|   427k|        return vis(monostate_val);                              \
  |  | 8433|   427k|    }
  ------------------
 8470|   874k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8470:9): [True: 447k, False: 879k]
  ------------------
 8471|   874k|            SCN_VISIT(double);
  ------------------
  |  | 8428|   874k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   874k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   874k|    }                                                           \
  |  | 8431|   874k|    else {                                                      \
  |  | 8432|   874k|        return vis(monostate_val);                              \
  |  | 8433|   874k|    }
  ------------------
 8472|  1.32M|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8472:9): [True: 452k, False: 874k]
  ------------------
 8473|  1.32M|            SCN_VISIT(long double);
  ------------------
  |  | 8428|  1.32M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  1.32M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  1.32M|    }                                                           \
  |  | 8431|  1.32M|    else {                                                      \
  |  | 8432|  1.32M|        return vis(monostate_val);                              \
  |  | 8433|  1.32M|    }
  ------------------
 8474|  1.32M|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 1.32M]
  ------------------
 8475|  1.32M|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8428|  1.32M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  1.32M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  1.32M|    }                                                           \
  |  | 8431|  1.32M|    else {                                                      \
  |  | 8432|  1.32M|        return vis(monostate_val);                              \
  |  | 8433|  1.32M|    }
  ------------------
 8476|  1.32M|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8476:9): [True: 0, False: 1.32M]
  ------------------
 8477|  1.32M|            SCN_VISIT(std::string);
  ------------------
  |  | 8428|  1.32M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  1.32M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  1.32M|    }                                                           \
  |  | 8431|  1.32M|    else {                                                      \
  |  | 8432|  1.32M|        return vis(monostate_val);                              \
  |  | 8433|  1.32M|    }
  ------------------
 8478|  1.32M|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8478:9): [True: 0, False: 1.32M]
  ------------------
 8479|  1.32M|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8428|  1.32M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  1.32M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  1.32M|    }                                                           \
  |  | 8431|  1.32M|    else {                                                      \
  |  | 8432|  1.32M|        return vis(monostate_val);                              \
  |  | 8433|  1.32M|    }
  ------------------
 8480|  1.32M|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8480:9): [True: 0, False: 1.32M]
  ------------------
 8481|  1.32M|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8428|  1.32M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  1.32M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  1.32M|    }                                                           \
  |  | 8431|  1.32M|    else {                                                      \
  |  | 8432|  1.32M|        return vis(monostate_val);                              \
  |  | 8433|  1.32M|    }
  ------------------
 8482|  1.32M|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8482:9): [True: 0, False: 1.32M]
  ------------------
 8483|  1.32M|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8428|  1.32M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  1.32M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  1.32M|    }                                                           \
  |  | 8431|  1.32M|    else {                                                      \
  |  | 8432|  1.32M|        return vis(monostate_val);                              \
  |  | 8433|  1.32M|    }
  ------------------
 8484|  1.32M|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8484:9): [True: 0, False: 1.32M]
  ------------------
 8485|  1.32M|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8428|  1.32M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  1.32M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  1.32M|    }                                                           \
  |  | 8431|  1.32M|    else {                                                      \
  |  | 8432|  1.32M|        return vis(monostate_val);                              \
  |  | 8433|  1.32M|    }
  ------------------
 8486|       |
 8487|  1.32M|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8487:9): [True: 0, False: 1.32M]
  ------------------
 8488|  1.32M|#if !SCN_DISABLE_TYPE_CUSTOM
 8489|  1.32M|            return vis(
 8490|  1.32M|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8491|       |#else
 8492|       |            return vis(monostate_val);
 8493|       |#endif
 8494|       |
 8495|      0|            SCN_CLANG_PUSH
 8496|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8497|       |
 8498|      0|            SCN_UNLIKELY_ATTR
 8499|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8499:9): [True: 0, False: 1.32M]
  ------------------
 8500|      0|        default: {
  ------------------
  |  Branch (8500:9): [True: 0, False: 1.32M]
  ------------------
 8501|      0|            return vis(monostate_val);
 8502|      0|        }
 8503|       |
 8504|  1.32M|            SCN_CLANG_POP
 8505|  1.32M|    }
 8506|       |
 8507|      0|#undef SCN_VISIT
 8508|       |
 8509|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8510|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8511|      0|}
_ZN3scn2v36detail17basic_scan_bufferIcE8sync_allEv:
 4083|   127k|    {
 4084|   127k|        sync(0);
 4085|   127k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5475|  1.60M|    {
 5476|  1.60M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  1.60M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.60M]
  |  |  ------------------
  ------------------
 5477|      0|            return max_size();
 5478|      0|        }
 5479|       |
 5480|  1.60M|        return static_cast<std::size_t>(m_desc &
 5481|  1.60M|                                        ((1 << detail::packed_arg_bits) - 1));
 5482|  1.60M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5500|  3.21M|    {
 5501|  3.21M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5502|  3.21M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5443|  1.60M|    {
 5444|  1.60M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  1.60M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.60M]
  |  |  ------------------
  ------------------
 5445|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5446|      0|                return m_args[id];
 5447|      0|            }
 5448|      0|            return {};
 5449|      0|        }
 5450|       |
 5451|  1.60M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  1.60M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.60M]
  |  |  ------------------
  ------------------
 5452|      0|            return {};
 5453|      0|        }
 5454|       |
 5455|  1.60M|        const auto t = type(id);
 5456|  1.60M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  1.60M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.60M]
  |  |  ------------------
  ------------------
 5457|      0|            return {};
 5458|      0|        }
 5459|       |
 5460|  1.60M|        basic_scan_arg<Context> arg;
 5461|  1.60M|        arg.m_type = t;
 5462|  1.60M|        if (is_only_builtin()) {
  ------------------
  |  Branch (5462:13): [True: 1.60M, False: 0]
  ------------------
 5463|  1.60M|            arg.m_value.ref_value = m_builtin_values[id];
 5464|  1.60M|        }
 5465|      0|        else {
 5466|      0|            arg.m_value = m_values[id];
 5467|      0|        }
 5468|  1.60M|        return arg;
 5469|  1.60M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5509|  1.60M|    {
 5510|       |        // First (0th) index is size, types start after that
 5511|  1.60M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5512|  1.60M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5513|  1.60M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5514|  1.60M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5504|  1.60M|    {
 5505|  1.60M|        return (m_desc & detail::has_custom_types_bit) == 0;
 5506|  1.60M|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5256|  3.05M|    {
 5257|  3.05M|        return m_type != detail::arg_type::none_type;
 5258|  3.05M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8426|   236k|{
 8427|   236k|#define SCN_VISIT(Type)                                         \
 8428|   236k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8429|   236k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8430|   236k|    }                                                           \
 8431|   236k|    else {                                                      \
 8432|   236k|        return vis(monostate_val);                              \
 8433|   236k|    }
 8434|       |
 8435|   236k|    monostate monostate_val{};
 8436|       |
 8437|   236k|    switch (arg.m_type) {
 8438|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 236k]
  ------------------
 8439|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 236k]
  ------------------
 8441|      0|            SCN_VISIT(short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 236k]
  ------------------
 8443|      0|            SCN_VISIT(int);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 236k]
  ------------------
 8445|      0|            SCN_VISIT(long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 236k]
  ------------------
 8447|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 236k]
  ------------------
 8449|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 236k]
  ------------------
 8451|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 236k]
  ------------------
 8453|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 236k]
  ------------------
 8455|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 236k]
  ------------------
 8457|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 236k]
  ------------------
 8459|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 236k]
  ------------------
 8461|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 236k]
  ------------------
 8463|      0|            SCN_VISIT(char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 236k]
  ------------------
 8465|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 236k]
  ------------------
 8467|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8468|  68.1k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8468:9): [True: 68.1k, False: 168k]
  ------------------
 8469|  68.1k|            SCN_VISIT(float);
  ------------------
  |  | 8428|  68.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  68.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  68.1k|    }                                                           \
  |  | 8431|  68.1k|    else {                                                      \
  |  | 8432|  68.1k|        return vis(monostate_val);                              \
  |  | 8433|  68.1k|    }
  ------------------
 8470|   151k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8470:9): [True: 83.0k, False: 153k]
  ------------------
 8471|   151k|            SCN_VISIT(double);
  ------------------
  |  | 8428|   151k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   151k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   151k|    }                                                           \
  |  | 8431|   151k|    else {                                                      \
  |  | 8432|   151k|        return vis(monostate_val);                              \
  |  | 8433|   151k|    }
  ------------------
 8472|   236k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8472:9): [True: 85.6k, False: 151k]
  ------------------
 8473|   236k|            SCN_VISIT(long double);
  ------------------
  |  | 8428|   236k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   236k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   236k|    }                                                           \
  |  | 8431|   236k|    else {                                                      \
  |  | 8432|   236k|        return vis(monostate_val);                              \
  |  | 8433|   236k|    }
  ------------------
 8474|   236k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 236k]
  ------------------
 8475|   236k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8428|   236k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   236k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   236k|    }                                                           \
  |  | 8431|   236k|    else {                                                      \
  |  | 8432|   236k|        return vis(monostate_val);                              \
  |  | 8433|   236k|    }
  ------------------
 8476|   236k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8476:9): [True: 0, False: 236k]
  ------------------
 8477|   236k|            SCN_VISIT(std::string);
  ------------------
  |  | 8428|   236k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   236k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   236k|    }                                                           \
  |  | 8431|   236k|    else {                                                      \
  |  | 8432|   236k|        return vis(monostate_val);                              \
  |  | 8433|   236k|    }
  ------------------
 8478|   236k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8478:9): [True: 0, False: 236k]
  ------------------
 8479|   236k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8428|   236k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   236k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   236k|    }                                                           \
  |  | 8431|   236k|    else {                                                      \
  |  | 8432|   236k|        return vis(monostate_val);                              \
  |  | 8433|   236k|    }
  ------------------
 8480|   236k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8480:9): [True: 0, False: 236k]
  ------------------
 8481|   236k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8428|   236k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   236k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   236k|    }                                                           \
  |  | 8431|   236k|    else {                                                      \
  |  | 8432|   236k|        return vis(monostate_val);                              \
  |  | 8433|   236k|    }
  ------------------
 8482|   236k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8482:9): [True: 0, False: 236k]
  ------------------
 8483|   236k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8428|   236k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   236k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   236k|    }                                                           \
  |  | 8431|   236k|    else {                                                      \
  |  | 8432|   236k|        return vis(monostate_val);                              \
  |  | 8433|   236k|    }
  ------------------
 8484|   236k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8484:9): [True: 0, False: 236k]
  ------------------
 8485|   236k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8428|   236k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   236k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   236k|    }                                                           \
  |  | 8431|   236k|    else {                                                      \
  |  | 8432|   236k|        return vis(monostate_val);                              \
  |  | 8433|   236k|    }
  ------------------
 8486|       |
 8487|   236k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8487:9): [True: 0, False: 236k]
  ------------------
 8488|   236k|#if !SCN_DISABLE_TYPE_CUSTOM
 8489|   236k|            return vis(
 8490|   236k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8491|       |#else
 8492|       |            return vis(monostate_val);
 8493|       |#endif
 8494|       |
 8495|      0|            SCN_CLANG_PUSH
 8496|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8497|       |
 8498|      0|            SCN_UNLIKELY_ATTR
 8499|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8499:9): [True: 0, False: 236k]
  ------------------
 8500|      0|        default: {
  ------------------
  |  Branch (8500:9): [True: 0, False: 236k]
  ------------------
 8501|      0|            return vis(monostate_val);
 8502|      0|        }
 8503|       |
 8504|   236k|            SCN_CLANG_POP
 8505|   236k|    }
 8506|       |
 8507|      0|#undef SCN_VISIT
 8508|       |
 8509|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8510|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8511|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5553|  1.28M|        : m_format{format}, m_next_arg_id{next_arg_id}
 5554|  1.28M|    {
 5555|  1.28M|    }
_ZN3scn2v318basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8146|   644k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  928|   644k|    static_cast<    \
  |  |  929|   644k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8147|   644k|    {
 8148|   644k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8064|  1.28M|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|  1.28M|    static_cast<    \
  |  |  929|  1.28M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|  1.28M|    static_cast<    \
  |  |  929|  1.28M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8065|  1.28M|    {
 8066|  1.28M|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7053|   645k|{
 7054|   645k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7055|   645k|    handler.check_args_exhausted();
 7056|   645k|    return handler.get_error();
 7057|   645k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7019|   645k|{
 7020|       |    // TODO: memchr fast path with a larger (> 32) format string
 7021|       |
 7022|   645k|    auto begin = format.data();
 7023|   645k|    auto it = begin;
 7024|   645k|    const auto end = format.data() + format.size();
 7025|       |
 7026|  1.09M|    while (it != end) {
  ------------------
  |  Branch (7026:12): [True: 645k, False: 448k]
  ------------------
 7027|   645k|        const auto ch = *it++;
 7028|   645k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7028:13): [True: 645k, False: 0]
  ------------------
 7029|   645k|            handler.on_literal_text(begin, it - 1);
 7030|       |
 7031|   645k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7032|   645k|            if (!handler) {
  ------------------
  |  Branch (7032:17): [True: 196k, False: 448k]
  ------------------
 7033|   196k|                return;
 7034|   196k|            }
 7035|   645k|        }
 7036|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7036:18): [True: 0, False: 0]
  ------------------
 7037|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7038|      0|                handler.on_error("Unmatched '}' in format string");
 7039|      0|                return;
 7040|      0|            }
 7041|       |
 7042|      0|            handler.on_literal_text(begin, it);
 7043|      0|            begin = ++it;
 7044|      0|        }
 7045|   645k|    }
 7046|       |
 7047|   448k|    handler.on_literal_text(begin, end);
 7048|   448k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6951|   645k|{
 6952|   645k|    struct id_adapter {
 6953|   645k|        constexpr void operator()()
 6954|   645k|        {
 6955|   645k|            arg_id = handler.on_arg_id();
 6956|   645k|        }
 6957|   645k|        constexpr void operator()(std::size_t id)
 6958|   645k|        {
 6959|   645k|            arg_id = handler.on_arg_id(id);
 6960|   645k|        }
 6961|       |
 6962|   645k|        constexpr void on_error(const char* msg)
 6963|   645k|        {
 6964|   645k|            SCN_UNLIKELY_ATTR
 6965|   645k|            handler.on_error(msg);
 6966|   645k|        }
 6967|       |
 6968|   645k|        Handler& handler;
 6969|   645k|        std::size_t arg_id;
 6970|   645k|    };
 6971|       |
 6972|   645k|    ++begin;
 6973|   645k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   645k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 645k]
  |  |  ------------------
  ------------------
 6974|      0|        handler.on_error("Unexpected end of replacement field");
 6975|      0|        return begin;
 6976|      0|    }
 6977|       |
 6978|   645k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6978:9): [True: 0, False: 645k]
  ------------------
 6979|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6980|      0|    }
 6981|   645k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6981:14): [True: 0, False: 645k]
  ------------------
 6982|      0|        handler.on_literal_text(begin, begin + 1);
 6983|      0|    }
 6984|   645k|    else {
 6985|   645k|        auto adapter = id_adapter{handler, 0};
 6986|   645k|        begin = parse_arg_id(begin, end, adapter);
 6987|       |
 6988|   645k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   645k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 645k]
  |  |  ------------------
  ------------------
 6989|      0|            handler.on_error("Missing '}' in format string");
 6990|      0|            return begin;
 6991|      0|        }
 6992|       |
 6993|   645k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6993:13): [True: 0, False: 645k]
  ------------------
 6994|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6995|      0|        }
 6996|   645k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6996:18): [True: 645k, False: 0]
  ------------------
 6997|   645k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   645k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 645k]
  |  |  ------------------
  ------------------
 6998|      0|                handler.on_error("Unexpected end of replacement field");
 6999|      0|                return begin;
 7000|      0|            }
 7001|   645k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7002|   645k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  1.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 645k]
  |  |  |  Branch (859:45): [True: 0, False: 645k]
  |  |  |  Branch (859:45): [True: 0, False: 645k]
  |  |  ------------------
  ------------------
 7003|      0|                handler.on_error("Unknown format specifier");
 7004|      0|                return begin;
 7005|      0|            }
 7006|   645k|        }
 7007|      0|        else {
 7008|      0|            SCN_UNLIKELY_ATTR
 7009|      0|            handler.on_error("Missing '}' in format string");
 7010|      0|            return begin;
 7011|      0|        }
 7012|   645k|    }
 7013|   645k|    return begin + 1;
 7014|   645k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 8048|  1.28M|    {
 8049|  1.28M|        return m_args.get(id);
 8050|  1.28M|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8058|  1.28M|    {
 8059|  1.28M|        return m_locale;
 8060|  1.28M|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5575|  1.28M|    {
 5576|  1.28M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  1.28M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.28M]
  |  |  ------------------
  ------------------
 5577|      0|            on_error(
 5578|      0|                "Cannot switch from manual to automatic argument indexing");
 5579|      0|            return 0;
 5580|      0|        }
 5581|       |
 5582|  1.28M|        auto id = static_cast<size_t>(m_next_arg_id++);
 5583|  1.28M|        do_check_arg_id(id);
 5584|  1.28M|        return id;
 5585|  1.28M|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6063|  1.28M|{
 6064|  1.28M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6064:9): [Folded - Ignored]
  ------------------
 6065|  1.28M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6065:10): [Folded - Ignored]
  |  Branch (6065:22): [Folded - Ignored]
  ------------------
 6066|       |        // The cast below will cause an error on gcc pre-12
 6067|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6068|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6068:13): [True: 0, False: 0]
  ------------------
 6069|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6070|      0|            SCN_UNLIKELY_ATTR
 6071|      0|            on_error("Argument not found");
 6072|      0|        }
 6073|      0|    }
 6074|  1.28M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6452|   645k|{
 6453|   645k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   645k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   645k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6454|   645k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6454:9): [True: 645k, False: 0]
  |  Branch (6454:26): [True: 0, False: 645k]
  ------------------
 6455|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6456|      0|    }
 6457|       |
 6458|   645k|    handler();
 6459|   645k|    return begin;
 6460|   645k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6954|   645k|        {
 6955|   645k|            arg_id = handler.on_arg_id();
 6956|   645k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5261|  2.57M|    {
 5262|  2.57M|        return m_type;
 5263|  2.57M|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5570|  1.28M|    {
 5571|  1.28M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5572|  1.28M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE3getEv:
 4352|   881k|{
 4353|   881k|    if (is_contiguous()) {
  ------------------
  |  Branch (4353:9): [True: 0, False: 881k]
  ------------------
 4354|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4355|      0|                                ranges::default_sentinel};
 4356|      0|    }
 4357|   881k|    return ranges::subrange{forward_iterator{this, 0},
 4358|   881k|                            ranges::default_sentinel};
 4359|   881k|}
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4183|   881k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4184|   881k|    {
 4185|   881k|        SCN_EXPECT(parent);
  ------------------
  |  |  924|   881k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   881k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4186|   881k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|   881k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   881k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4187|   881k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5559|  2.57M|    {
 5560|  2.57M|        return m_format.data();
 5561|  2.57M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7130|   645k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|   645k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7131|   645k|    {
 7132|   645k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   645k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   645k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7133|   645k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6867|   645k|{
 6868|   645k|    auto do_presentation = [&]() -> const CharT* {
 6869|   645k|        if (*begin == CharT{'['}) {
 6870|   645k|            auto set = parse_presentation_set(begin, end, handler);
 6871|   645k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6872|       |                // clang-format off
 6873|   645k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6874|       |                // clang-format on
 6875|   645k|                return begin;
 6876|   645k|            }
 6877|   645k|            handler.on_character_set_string(set);
 6878|   645k|            return begin;
 6879|   645k|        }
 6880|   645k|        if (*begin == CharT{'/'}) {
 6881|   645k|            return parse_presentation_regex(begin, end, handler);
 6882|   645k|        }
 6883|   645k|        presentation_type type = parse_presentation_type(*begin++);
 6884|   645k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6885|   645k|            handler.on_error("Invalid type specifier in format string");
 6886|   645k|            return begin;
 6887|   645k|        }
 6888|   645k|        handler.on_type(type);
 6889|   645k|        return begin;
 6890|   645k|    };
 6891|       |
 6892|   645k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6892:9): [True: 645k, False: 0]
  |  Branch (6892:28): [True: 645k, False: 0]
  ------------------
 6893|   645k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6893:9): [True: 645k, False: 0]
  |  Branch (6893:36): [True: 487k, False: 157k]
  ------------------
 6894|   487k|        return do_presentation();
 6895|   487k|    }
 6896|       |
 6897|   157k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 157k]
  |  |  ------------------
  ------------------
 6898|      0|        handler.on_error("Unexpected end of format string");
 6899|      0|        return begin;
 6900|      0|    }
 6901|       |
 6902|   157k|    begin = parse_align(begin, end, handler);
 6903|   157k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 157k]
  |  |  ------------------
  ------------------
 6904|      0|        handler.on_error("Unexpected end of format string");
 6905|      0|        return begin;
 6906|      0|    }
 6907|       |
 6908|   157k|    begin = parse_width(begin, end, handler);
 6909|   157k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 157k]
  |  |  ------------------
  ------------------
 6910|      0|        handler.on_error("Unexpected end of format string");
 6911|      0|        return begin;
 6912|      0|    }
 6913|       |
 6914|   157k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6914:9): [True: 0, False: 157k]
  ------------------
 6915|      0|        ++begin;
 6916|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6917|      0|            handler.on_error("Unexpected end of format string");
 6918|      0|            return begin;
 6919|      0|        }
 6920|      0|        begin = parse_precision(begin, end, handler);
 6921|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6922|      0|            handler.on_error("Unexpected end of format string");
 6923|      0|            return begin;
 6924|      0|        }
 6925|      0|    }
 6926|       |
 6927|   157k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6927:9): [True: 157k, False: 0]
  ------------------
 6928|   157k|        handler.on_localized();
 6929|   157k|        ++begin;
 6930|   157k|    }
 6931|   157k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 157k]
  |  |  ------------------
  ------------------
 6932|      0|        handler.on_error("Unexpected end of format string");
 6933|      0|        return begin;
 6934|      0|    }
 6935|       |
 6936|   157k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6936:9): [True: 157k, False: 0]
  |  Branch (6936:25): [True: 0, False: 157k]
  ------------------
 6937|      0|        do_presentation();
 6938|      0|    }
 6939|   157k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 157k]
  |  |  ------------------
  ------------------
 6940|      0|        handler.on_error("Unexpected end of format string");
 6941|      0|        return begin;
 6942|      0|    }
 6943|       |
 6944|   157k|    return begin;
 6945|   157k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6516|  1.28M|{
 6517|  1.28M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6517:13): [True: 973k, False: 315k]
  |  Branch (6517:33): [True: 973k, False: 0]
  ------------------
 6518|  1.28M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6518:13): [True: 315k, False: 0]
  |  Branch (6518:33): [True: 315k, False: 0]
  ------------------
 6519|  1.28M|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6868|   487k|    auto do_presentation = [&]() -> const CharT* {
 6869|   487k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6869:13): [True: 0, False: 487k]
  ------------------
 6870|      0|            auto set = parse_presentation_set(begin, end, handler);
 6871|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6872|       |                // clang-format off
 6873|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6874|       |                // clang-format on
 6875|      0|                return begin;
 6876|      0|            }
 6877|      0|            handler.on_character_set_string(set);
 6878|      0|            return begin;
 6879|      0|        }
 6880|   487k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6880:13): [True: 0, False: 487k]
  ------------------
 6881|      0|            return parse_presentation_regex(begin, end, handler);
 6882|      0|        }
 6883|   487k|        presentation_type type = parse_presentation_type(*begin++);
 6884|   487k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   487k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 487k]
  |  |  ------------------
  ------------------
 6885|      0|            handler.on_error("Invalid type specifier in format string");
 6886|      0|            return begin;
 6887|      0|        }
 6888|   487k|        handler.on_type(type);
 6889|   487k|        return begin;
 6890|   487k|    };
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6464|   973k|{
 6465|   973k|    switch (type) {
 6466|      0|        case 'b':
  ------------------
  |  Branch (6466:9): [True: 0, False: 973k]
  ------------------
 6467|      0|        case 'B':
  ------------------
  |  Branch (6467:9): [True: 0, False: 973k]
  ------------------
 6468|      0|            return presentation_type::int_binary;
 6469|      0|        case 'd':
  ------------------
  |  Branch (6469:9): [True: 0, False: 973k]
  ------------------
 6470|      0|            return presentation_type::int_decimal;
 6471|      0|        case 'i':
  ------------------
  |  Branch (6471:9): [True: 0, False: 973k]
  ------------------
 6472|      0|            return presentation_type::int_generic;
 6473|      0|        case 'u':
  ------------------
  |  Branch (6473:9): [True: 0, False: 973k]
  ------------------
 6474|      0|            return presentation_type::int_unsigned_decimal;
 6475|      0|        case 'o':
  ------------------
  |  Branch (6475:9): [True: 0, False: 973k]
  ------------------
 6476|      0|            return presentation_type::int_octal;
 6477|      0|        case 'x':
  ------------------
  |  Branch (6477:9): [True: 0, False: 973k]
  ------------------
 6478|      0|        case 'X':
  ------------------
  |  Branch (6478:9): [True: 0, False: 973k]
  ------------------
 6479|      0|            return presentation_type::int_hex;
 6480|      0|        case 'r':
  ------------------
  |  Branch (6480:9): [True: 0, False: 973k]
  ------------------
 6481|      0|        case 'R':
  ------------------
  |  Branch (6481:9): [True: 0, False: 973k]
  ------------------
 6482|      0|            return presentation_type::int_arbitrary_base;
 6483|   348k|        case 'a':
  ------------------
  |  Branch (6483:9): [True: 348k, False: 625k]
  ------------------
 6484|   348k|        case 'A':
  ------------------
  |  Branch (6484:9): [True: 0, False: 973k]
  ------------------
 6485|   348k|            return presentation_type::float_hex;
 6486|  80.6k|        case 'e':
  ------------------
  |  Branch (6486:9): [True: 80.6k, False: 893k]
  ------------------
 6487|  80.6k|        case 'E':
  ------------------
  |  Branch (6487:9): [True: 0, False: 973k]
  ------------------
 6488|  80.6k|            return presentation_type::float_scientific;
 6489|   247k|        case 'f':
  ------------------
  |  Branch (6489:9): [True: 247k, False: 726k]
  ------------------
 6490|   247k|        case 'F':
  ------------------
  |  Branch (6490:9): [True: 0, False: 973k]
  ------------------
 6491|   247k|            return presentation_type::float_fixed;
 6492|   297k|        case 'g':
  ------------------
  |  Branch (6492:9): [True: 297k, False: 676k]
  ------------------
 6493|   297k|        case 'G':
  ------------------
  |  Branch (6493:9): [True: 0, False: 973k]
  ------------------
 6494|   297k|            return presentation_type::float_general;
 6495|      0|        case 's':
  ------------------
  |  Branch (6495:9): [True: 0, False: 973k]
  ------------------
 6496|      0|            return presentation_type::string;
 6497|      0|        case 'c':
  ------------------
  |  Branch (6497:9): [True: 0, False: 973k]
  ------------------
 6498|      0|            return presentation_type::character;
 6499|      0|        case '?':
  ------------------
  |  Branch (6499:9): [True: 0, False: 973k]
  ------------------
 6500|      0|            return presentation_type::escaped_character;
 6501|      0|        case 'p':
  ------------------
  |  Branch (6501:9): [True: 0, False: 973k]
  ------------------
 6502|      0|            return presentation_type::pointer;
 6503|      0|        case '[':
  ------------------
  |  Branch (6503:9): [True: 0, False: 973k]
  ------------------
 6504|      0|        case '/':
  ------------------
  |  Branch (6504:9): [True: 0, False: 973k]
  ------------------
 6505|       |            // Should be handled by parse_presentation_set and
 6506|       |            // parse_presentation_regex
 6507|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6508|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6509|      0|        default:
  ------------------
  |  Branch (6509:9): [True: 0, False: 973k]
  ------------------
 6510|      0|            return presentation_type::none;
 6511|   973k|    }
 6512|   973k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6541|   157k|{
 6542|   157k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   157k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   157k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6543|       |
 6544|   157k|    auto check_align = [](wchar_t ch) {
 6545|   157k|        switch (ch) {
 6546|   157k|            case L'<':
 6547|   157k|                return align_type::left;
 6548|   157k|            case L'>':
 6549|   157k|                return align_type::right;
 6550|   157k|            case L'^':
 6551|   157k|                return align_type::center;
 6552|   157k|            default:
 6553|   157k|                return align_type::none;
 6554|   157k|        }
 6555|   157k|    };
 6556|       |
 6557|   157k|    auto potential_fill_len = code_point_length(begin, end);
 6558|   157k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   315k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 157k]
  |  |  |  Branch (859:45): [True: 0, False: 157k]
  |  |  |  Branch (859:45): [True: 0, False: 157k]
  |  |  ------------------
  ------------------
 6559|   157k|                     std::distance(begin, end) < potential_fill_len)) {
 6560|      0|        handler.on_error("Invalid encoding in fill character");
 6561|      0|        return begin;
 6562|      0|    }
 6563|       |
 6564|   157k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6565|       |
 6566|   157k|    auto potential_fill = std::basic_string_view<CharT>{
 6567|   157k|        begin, static_cast<size_t>(potential_fill_len)};
 6568|   157k|    const auto begin_before_fill = begin;
 6569|   157k|    begin += potential_fill_len;
 6570|       |
 6571|   157k|    if (begin == end) {
  ------------------
  |  Branch (6571:9): [True: 0, False: 157k]
  ------------------
 6572|      0|        return begin_before_fill;
 6573|      0|    }
 6574|       |
 6575|   157k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6576|   157k|    const auto begin_after_fill = begin;
 6577|   157k|    ++begin;
 6578|       |
 6579|   157k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6579:9): [True: 157k, False: 0]
  ------------------
 6580|   157k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 157k]
  |  |  ------------------
  ------------------
 6581|      0|            handler.on_error("Invalid fill character '{' in format string");
 6582|      0|            return begin;
 6583|      0|        }
 6584|   157k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6584:13): [True: 0, False: 157k]
  ------------------
 6585|      0|            return begin_before_fill;
 6586|      0|        }
 6587|   157k|    }
 6588|       |
 6589|   157k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6589:9): [True: 157k, False: 0]
  ------------------
 6590|   157k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6590:13): [True: 0, False: 157k]
  ------------------
 6591|      0|            handler.on_align(potential_align_on_fill);
 6592|      0|            return begin_after_fill;
 6593|      0|        }
 6594|   157k|        return begin_before_fill;
 6595|   157k|    }
 6596|       |
 6597|      0|    handler.on_fill(potential_fill);
 6598|      0|    handler.on_align(potential_align_after_fill);
 6599|      0|    return begin;
 6600|   157k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6523|   315k|{
 6524|   315k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   315k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   315k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6525|   315k|    if constexpr (sizeof(CharT) != 1) {
 6526|   315k|        return 1;
 6527|       |    }
 6528|       |    else {
 6529|       |        const auto lengths =
 6530|       |            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6531|       |            "\3\4";
 6532|       |        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6533|       |        return len;
 6534|       |    }
 6535|   315k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6544|   315k|    auto check_align = [](wchar_t ch) {
 6545|   315k|        switch (ch) {
 6546|      0|            case L'<':
  ------------------
  |  Branch (6546:13): [True: 0, False: 315k]
  ------------------
 6547|      0|                return align_type::left;
 6548|      0|            case L'>':
  ------------------
  |  Branch (6548:13): [True: 0, False: 315k]
  ------------------
 6549|      0|                return align_type::right;
 6550|      0|            case L'^':
  ------------------
  |  Branch (6550:13): [True: 0, False: 315k]
  ------------------
 6551|      0|                return align_type::center;
 6552|   315k|            default:
  ------------------
  |  Branch (6552:13): [True: 315k, False: 0]
  ------------------
 6553|   315k|                return align_type::none;
 6554|   315k|        }
 6555|   315k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6606|   157k|{
 6607|   157k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   157k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   157k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6608|       |
 6609|   157k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6609:9): [True: 157k, False: 0]
  |  Branch (6609:33): [True: 0, False: 157k]
  ------------------
 6610|      0|        int width = parse_simple_int(begin, end);
 6611|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6612|      0|            handler.on_width(width);
 6613|      0|        }
 6614|      0|        else {
 6615|      0|            handler.on_error("Invalid field width");
 6616|      0|            return begin;
 6617|      0|        }
 6618|      0|    }
 6619|   157k|    return begin;
 6620|   157k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7136|   157k|    {
 7137|   157k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7138|   157k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7138:13): [True: 157k, False: 0]
  ------------------
 7139|   157k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7139:13): [True: 157k, False: 0]
  ------------------
 7140|   157k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7140:13): [True: 0, False: 157k]
  ------------------
 7141|   157k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7141:13): [True: 0, False: 0]
  ------------------
 7142|      0|            SCN_UNLIKELY_ATTR
 7143|       |            // clang-format off
 7144|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7145|       |            // clang-format on
 7146|      0|        }
 7147|       |
 7148|   157k|        Handler::on_localized();
 7149|   157k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8426|   645k|{
 8427|   645k|#define SCN_VISIT(Type)                                         \
 8428|   645k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8429|   645k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8430|   645k|    }                                                           \
 8431|   645k|    else {                                                      \
 8432|   645k|        return vis(monostate_val);                              \
 8433|   645k|    }
 8434|       |
 8435|   645k|    monostate monostate_val{};
 8436|       |
 8437|   645k|    switch (arg.m_type) {
 8438|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 645k]
  ------------------
 8439|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 645k]
  ------------------
 8441|      0|            SCN_VISIT(short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 645k]
  ------------------
 8443|      0|            SCN_VISIT(int);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 645k]
  ------------------
 8445|      0|            SCN_VISIT(long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 645k]
  ------------------
 8447|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 645k]
  ------------------
 8449|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 645k]
  ------------------
 8451|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 645k]
  ------------------
 8453|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 645k]
  ------------------
 8455|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 645k]
  ------------------
 8457|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 645k]
  ------------------
 8459|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 645k]
  ------------------
 8461|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 645k]
  ------------------
 8463|      0|            SCN_VISIT(char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 645k]
  ------------------
 8465|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 645k]
  ------------------
 8467|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8468|   200k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8468:9): [True: 200k, False: 444k]
  ------------------
 8469|   200k|            SCN_VISIT(float);
  ------------------
  |  | 8428|   200k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   200k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   200k|    }                                                           \
  |  | 8431|   200k|    else {                                                      \
  |  | 8432|   200k|        return vis(monostate_val);                              \
  |  | 8433|   200k|    }
  ------------------
 8470|   420k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8470:9): [True: 220k, False: 424k]
  ------------------
 8471|   420k|            SCN_VISIT(double);
  ------------------
  |  | 8428|   420k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   420k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   420k|    }                                                           \
  |  | 8431|   420k|    else {                                                      \
  |  | 8432|   420k|        return vis(monostate_val);                              \
  |  | 8433|   420k|    }
  ------------------
 8472|   645k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8472:9): [True: 224k, False: 420k]
  ------------------
 8473|   645k|            SCN_VISIT(long double);
  ------------------
  |  | 8428|   645k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   645k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   645k|    }                                                           \
  |  | 8431|   645k|    else {                                                      \
  |  | 8432|   645k|        return vis(monostate_val);                              \
  |  | 8433|   645k|    }
  ------------------
 8474|   645k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 645k]
  ------------------
 8475|   645k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8428|   645k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   645k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   645k|    }                                                           \
  |  | 8431|   645k|    else {                                                      \
  |  | 8432|   645k|        return vis(monostate_val);                              \
  |  | 8433|   645k|    }
  ------------------
 8476|   645k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8476:9): [True: 0, False: 645k]
  ------------------
 8477|   645k|            SCN_VISIT(std::string);
  ------------------
  |  | 8428|   645k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   645k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   645k|    }                                                           \
  |  | 8431|   645k|    else {                                                      \
  |  | 8432|   645k|        return vis(monostate_val);                              \
  |  | 8433|   645k|    }
  ------------------
 8478|   645k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8478:9): [True: 0, False: 645k]
  ------------------
 8479|   645k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8428|   645k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   645k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   645k|    }                                                           \
  |  | 8431|   645k|    else {                                                      \
  |  | 8432|   645k|        return vis(monostate_val);                              \
  |  | 8433|   645k|    }
  ------------------
 8480|   645k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8480:9): [True: 0, False: 645k]
  ------------------
 8481|   645k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8428|   645k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   645k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   645k|    }                                                           \
  |  | 8431|   645k|    else {                                                      \
  |  | 8432|   645k|        return vis(monostate_val);                              \
  |  | 8433|   645k|    }
  ------------------
 8482|   645k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8482:9): [True: 0, False: 645k]
  ------------------
 8483|   645k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8428|   645k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   645k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   645k|    }                                                           \
  |  | 8431|   645k|    else {                                                      \
  |  | 8432|   645k|        return vis(monostate_val);                              \
  |  | 8433|   645k|    }
  ------------------
 8484|   645k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8484:9): [True: 0, False: 645k]
  ------------------
 8485|   645k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8428|   645k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   645k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   645k|    }                                                           \
  |  | 8431|   645k|    else {                                                      \
  |  | 8432|   645k|        return vis(monostate_val);                              \
  |  | 8433|   645k|    }
  ------------------
 8486|       |
 8487|   645k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8487:9): [True: 0, False: 645k]
  ------------------
 8488|   645k|#if !SCN_DISABLE_TYPE_CUSTOM
 8489|   645k|            return vis(
 8490|   645k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8491|       |#else
 8492|       |            return vis(monostate_val);
 8493|       |#endif
 8494|       |
 8495|      0|            SCN_CLANG_PUSH
 8496|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8497|       |
 8498|      0|            SCN_UNLIKELY_ATTR
 8499|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8499:9): [True: 0, False: 645k]
  ------------------
 8500|      0|        default: {
  ------------------
  |  Branch (8500:9): [True: 0, False: 645k]
  ------------------
 8501|      0|            return vis(monostate_val);
 8502|      0|        }
 8503|       |
 8504|   645k|            SCN_CLANG_POP
 8505|   645k|    }
 8506|       |
 8507|      0|#undef SCN_VISIT
 8508|       |
 8509|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8510|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8511|      0|}
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8426|   236k|{
 8427|   236k|#define SCN_VISIT(Type)                                         \
 8428|   236k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8429|   236k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8430|   236k|    }                                                           \
 8431|   236k|    else {                                                      \
 8432|   236k|        return vis(monostate_val);                              \
 8433|   236k|    }
 8434|       |
 8435|   236k|    monostate monostate_val{};
 8436|       |
 8437|   236k|    switch (arg.m_type) {
 8438|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 236k]
  ------------------
 8439|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 236k]
  ------------------
 8441|      0|            SCN_VISIT(short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 236k]
  ------------------
 8443|      0|            SCN_VISIT(int);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 236k]
  ------------------
 8445|      0|            SCN_VISIT(long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 236k]
  ------------------
 8447|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 236k]
  ------------------
 8449|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 236k]
  ------------------
 8451|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 236k]
  ------------------
 8453|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 236k]
  ------------------
 8455|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 236k]
  ------------------
 8457|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 236k]
  ------------------
 8459|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 236k]
  ------------------
 8461|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 236k]
  ------------------
 8463|      0|            SCN_VISIT(char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 236k]
  ------------------
 8465|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 236k]
  ------------------
 8467|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8468|  67.9k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8468:9): [True: 67.9k, False: 168k]
  ------------------
 8469|  67.9k|            SCN_VISIT(float);
  ------------------
  |  | 8428|  67.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  67.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  67.9k|    }                                                           \
  |  | 8431|  67.9k|    else {                                                      \
  |  | 8432|  67.9k|        return vis(monostate_val);                              \
  |  | 8433|  67.9k|    }
  ------------------
 8470|   150k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8470:9): [True: 82.9k, False: 153k]
  ------------------
 8471|   150k|            SCN_VISIT(double);
  ------------------
  |  | 8428|   150k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   150k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   150k|    }                                                           \
  |  | 8431|   150k|    else {                                                      \
  |  | 8432|   150k|        return vis(monostate_val);                              \
  |  | 8433|   150k|    }
  ------------------
 8472|   236k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8472:9): [True: 85.5k, False: 150k]
  ------------------
 8473|   236k|            SCN_VISIT(long double);
  ------------------
  |  | 8428|   236k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   236k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   236k|    }                                                           \
  |  | 8431|   236k|    else {                                                      \
  |  | 8432|   236k|        return vis(monostate_val);                              \
  |  | 8433|   236k|    }
  ------------------
 8474|   236k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 236k]
  ------------------
 8475|   236k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8428|   236k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   236k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   236k|    }                                                           \
  |  | 8431|   236k|    else {                                                      \
  |  | 8432|   236k|        return vis(monostate_val);                              \
  |  | 8433|   236k|    }
  ------------------
 8476|   236k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8476:9): [True: 0, False: 236k]
  ------------------
 8477|   236k|            SCN_VISIT(std::string);
  ------------------
  |  | 8428|   236k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   236k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   236k|    }                                                           \
  |  | 8431|   236k|    else {                                                      \
  |  | 8432|   236k|        return vis(monostate_val);                              \
  |  | 8433|   236k|    }
  ------------------
 8478|   236k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8478:9): [True: 0, False: 236k]
  ------------------
 8479|   236k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8428|   236k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   236k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   236k|    }                                                           \
  |  | 8431|   236k|    else {                                                      \
  |  | 8432|   236k|        return vis(monostate_val);                              \
  |  | 8433|   236k|    }
  ------------------
 8480|   236k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8480:9): [True: 0, False: 236k]
  ------------------
 8481|   236k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8428|   236k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   236k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   236k|    }                                                           \
  |  | 8431|   236k|    else {                                                      \
  |  | 8432|   236k|        return vis(monostate_val);                              \
  |  | 8433|   236k|    }
  ------------------
 8482|   236k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8482:9): [True: 0, False: 236k]
  ------------------
 8483|   236k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8428|   236k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   236k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   236k|    }                                                           \
  |  | 8431|   236k|    else {                                                      \
  |  | 8432|   236k|        return vis(monostate_val);                              \
  |  | 8433|   236k|    }
  ------------------
 8484|   236k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8484:9): [True: 0, False: 236k]
  ------------------
 8485|   236k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8428|   236k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   236k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   236k|    }                                                           \
  |  | 8431|   236k|    else {                                                      \
  |  | 8432|   236k|        return vis(monostate_val);                              \
  |  | 8433|   236k|    }
  ------------------
 8486|       |
 8487|   236k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8487:9): [True: 0, False: 236k]
  ------------------
 8488|   236k|#if !SCN_DISABLE_TYPE_CUSTOM
 8489|   236k|            return vis(
 8490|   236k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8491|       |#else
 8492|       |            return vis(monostate_val);
 8493|       |#endif
 8494|       |
 8495|      0|            SCN_CLANG_PUSH
 8496|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8497|       |
 8498|      0|            SCN_UNLIKELY_ATTR
 8499|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8499:9): [True: 0, False: 236k]
  ------------------
 8500|      0|        default: {
  ------------------
  |  Branch (8500:9): [True: 0, False: 236k]
  ------------------
 8501|      0|            return vis(monostate_val);
 8502|      0|        }
 8503|       |
 8504|   236k|            SCN_CLANG_POP
 8505|   236k|    }
 8506|       |
 8507|      0|#undef SCN_VISIT
 8508|       |
 8509|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8510|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8511|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7053|   644k|{
 7054|   644k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7055|   644k|    handler.check_args_exhausted();
 7056|   644k|    return handler.get_error();
 7057|   644k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7019|   644k|{
 7020|       |    // TODO: memchr fast path with a larger (> 32) format string
 7021|       |
 7022|   644k|    auto begin = format.data();
 7023|   644k|    auto it = begin;
 7024|   644k|    const auto end = format.data() + format.size();
 7025|       |
 7026|  1.09M|    while (it != end) {
  ------------------
  |  Branch (7026:12): [True: 644k, False: 448k]
  ------------------
 7027|   644k|        const auto ch = *it++;
 7028|   644k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7028:13): [True: 644k, False: 0]
  ------------------
 7029|   644k|            handler.on_literal_text(begin, it - 1);
 7030|       |
 7031|   644k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7032|   644k|            if (!handler) {
  ------------------
  |  Branch (7032:17): [True: 196k, False: 448k]
  ------------------
 7033|   196k|                return;
 7034|   196k|            }
 7035|   644k|        }
 7036|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7036:18): [True: 0, False: 0]
  ------------------
 7037|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7038|      0|                handler.on_error("Unmatched '}' in format string");
 7039|      0|                return;
 7040|      0|            }
 7041|       |
 7042|      0|            handler.on_literal_text(begin, it);
 7043|      0|            begin = ++it;
 7044|      0|        }
 7045|   644k|    }
 7046|       |
 7047|   448k|    handler.on_literal_text(begin, end);
 7048|   448k|}
_ZN3scn2v318basic_scan_contextIwE10advance_toENS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
 8184|   448k|    {
 8185|   448k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   448k|    static_cast<    \
  |  |  929|   448k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8186|   448k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 6951|   644k|{
 6952|   644k|    struct id_adapter {
 6953|   644k|        constexpr void operator()()
 6954|   644k|        {
 6955|   644k|            arg_id = handler.on_arg_id();
 6956|   644k|        }
 6957|   644k|        constexpr void operator()(std::size_t id)
 6958|   644k|        {
 6959|   644k|            arg_id = handler.on_arg_id(id);
 6960|   644k|        }
 6961|       |
 6962|   644k|        constexpr void on_error(const char* msg)
 6963|   644k|        {
 6964|   644k|            SCN_UNLIKELY_ATTR
 6965|   644k|            handler.on_error(msg);
 6966|   644k|        }
 6967|       |
 6968|   644k|        Handler& handler;
 6969|   644k|        std::size_t arg_id;
 6970|   644k|    };
 6971|       |
 6972|   644k|    ++begin;
 6973|   644k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   644k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 644k]
  |  |  ------------------
  ------------------
 6974|      0|        handler.on_error("Unexpected end of replacement field");
 6975|      0|        return begin;
 6976|      0|    }
 6977|       |
 6978|   644k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6978:9): [True: 0, False: 644k]
  ------------------
 6979|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6980|      0|    }
 6981|   644k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6981:14): [True: 0, False: 644k]
  ------------------
 6982|      0|        handler.on_literal_text(begin, begin + 1);
 6983|      0|    }
 6984|   644k|    else {
 6985|   644k|        auto adapter = id_adapter{handler, 0};
 6986|   644k|        begin = parse_arg_id(begin, end, adapter);
 6987|       |
 6988|   644k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   644k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 644k]
  |  |  ------------------
  ------------------
 6989|      0|            handler.on_error("Missing '}' in format string");
 6990|      0|            return begin;
 6991|      0|        }
 6992|       |
 6993|   644k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6993:13): [True: 0, False: 644k]
  ------------------
 6994|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6995|      0|        }
 6996|   644k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6996:18): [True: 644k, False: 0]
  ------------------
 6997|   644k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   644k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 644k]
  |  |  ------------------
  ------------------
 6998|      0|                handler.on_error("Unexpected end of replacement field");
 6999|      0|                return begin;
 7000|      0|            }
 7001|   644k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7002|   644k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  1.28M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 644k]
  |  |  |  Branch (859:45): [True: 0, False: 644k]
  |  |  |  Branch (859:45): [True: 0, False: 644k]
  |  |  ------------------
  ------------------
 7003|      0|                handler.on_error("Unknown format specifier");
 7004|      0|                return begin;
 7005|      0|            }
 7006|   644k|        }
 7007|      0|        else {
 7008|      0|            SCN_UNLIKELY_ATTR
 7009|      0|            handler.on_error("Missing '}' in format string");
 7010|      0|            return begin;
 7011|      0|        }
 7012|   644k|    }
 7013|   644k|    return begin + 1;
 7014|   644k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6452|   644k|{
 6453|   644k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   644k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   644k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6454|   644k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6454:9): [True: 644k, False: 0]
  |  Branch (6454:26): [True: 0, False: 644k]
  ------------------
 6455|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6456|      0|    }
 6457|       |
 6458|   644k|    handler();
 6459|   644k|    return begin;
 6460|   644k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6954|   644k|        {
 6955|   644k|            arg_id = handler.on_arg_id();
 6956|   644k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7130|   644k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|   644k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7131|   644k|    {
 7132|   644k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   644k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   644k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7133|   644k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6867|   644k|{
 6868|   644k|    auto do_presentation = [&]() -> const CharT* {
 6869|   644k|        if (*begin == CharT{'['}) {
 6870|   644k|            auto set = parse_presentation_set(begin, end, handler);
 6871|   644k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6872|       |                // clang-format off
 6873|   644k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6874|       |                // clang-format on
 6875|   644k|                return begin;
 6876|   644k|            }
 6877|   644k|            handler.on_character_set_string(set);
 6878|   644k|            return begin;
 6879|   644k|        }
 6880|   644k|        if (*begin == CharT{'/'}) {
 6881|   644k|            return parse_presentation_regex(begin, end, handler);
 6882|   644k|        }
 6883|   644k|        presentation_type type = parse_presentation_type(*begin++);
 6884|   644k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6885|   644k|            handler.on_error("Invalid type specifier in format string");
 6886|   644k|            return begin;
 6887|   644k|        }
 6888|   644k|        handler.on_type(type);
 6889|   644k|        return begin;
 6890|   644k|    };
 6891|       |
 6892|   644k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6892:9): [True: 644k, False: 0]
  |  Branch (6892:28): [True: 644k, False: 0]
  ------------------
 6893|   644k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6893:9): [True: 644k, False: 0]
  |  Branch (6893:36): [True: 486k, False: 157k]
  ------------------
 6894|   486k|        return do_presentation();
 6895|   486k|    }
 6896|       |
 6897|   157k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 157k]
  |  |  ------------------
  ------------------
 6898|      0|        handler.on_error("Unexpected end of format string");
 6899|      0|        return begin;
 6900|      0|    }
 6901|       |
 6902|   157k|    begin = parse_align(begin, end, handler);
 6903|   157k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 157k]
  |  |  ------------------
  ------------------
 6904|      0|        handler.on_error("Unexpected end of format string");
 6905|      0|        return begin;
 6906|      0|    }
 6907|       |
 6908|   157k|    begin = parse_width(begin, end, handler);
 6909|   157k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 157k]
  |  |  ------------------
  ------------------
 6910|      0|        handler.on_error("Unexpected end of format string");
 6911|      0|        return begin;
 6912|      0|    }
 6913|       |
 6914|   157k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6914:9): [True: 0, False: 157k]
  ------------------
 6915|      0|        ++begin;
 6916|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6917|      0|            handler.on_error("Unexpected end of format string");
 6918|      0|            return begin;
 6919|      0|        }
 6920|      0|        begin = parse_precision(begin, end, handler);
 6921|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6922|      0|            handler.on_error("Unexpected end of format string");
 6923|      0|            return begin;
 6924|      0|        }
 6925|      0|    }
 6926|       |
 6927|   157k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6927:9): [True: 157k, False: 0]
  ------------------
 6928|   157k|        handler.on_localized();
 6929|   157k|        ++begin;
 6930|   157k|    }
 6931|   157k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 157k]
  |  |  ------------------
  ------------------
 6932|      0|        handler.on_error("Unexpected end of format string");
 6933|      0|        return begin;
 6934|      0|    }
 6935|       |
 6936|   157k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6936:9): [True: 157k, False: 0]
  |  Branch (6936:25): [True: 0, False: 157k]
  ------------------
 6937|      0|        do_presentation();
 6938|      0|    }
 6939|   157k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 157k]
  |  |  ------------------
  ------------------
 6940|      0|        handler.on_error("Unexpected end of format string");
 6941|      0|        return begin;
 6942|      0|    }
 6943|       |
 6944|   157k|    return begin;
 6945|   157k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6868|   486k|    auto do_presentation = [&]() -> const CharT* {
 6869|   486k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6869:13): [True: 0, False: 486k]
  ------------------
 6870|      0|            auto set = parse_presentation_set(begin, end, handler);
 6871|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6872|       |                // clang-format off
 6873|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6874|       |                // clang-format on
 6875|      0|                return begin;
 6876|      0|            }
 6877|      0|            handler.on_character_set_string(set);
 6878|      0|            return begin;
 6879|      0|        }
 6880|   486k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6880:13): [True: 0, False: 486k]
  ------------------
 6881|      0|            return parse_presentation_regex(begin, end, handler);
 6882|      0|        }
 6883|   486k|        presentation_type type = parse_presentation_type(*begin++);
 6884|   486k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   486k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 486k]
  |  |  ------------------
  ------------------
 6885|      0|            handler.on_error("Invalid type specifier in format string");
 6886|      0|            return begin;
 6887|      0|        }
 6888|   486k|        handler.on_type(type);
 6889|   486k|        return begin;
 6890|   486k|    };
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6541|   157k|{
 6542|   157k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   157k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   157k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6543|       |
 6544|   157k|    auto check_align = [](wchar_t ch) {
 6545|   157k|        switch (ch) {
 6546|   157k|            case L'<':
 6547|   157k|                return align_type::left;
 6548|   157k|            case L'>':
 6549|   157k|                return align_type::right;
 6550|   157k|            case L'^':
 6551|   157k|                return align_type::center;
 6552|   157k|            default:
 6553|   157k|                return align_type::none;
 6554|   157k|        }
 6555|   157k|    };
 6556|       |
 6557|   157k|    auto potential_fill_len = code_point_length(begin, end);
 6558|   157k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   315k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 157k]
  |  |  |  Branch (859:45): [True: 0, False: 157k]
  |  |  |  Branch (859:45): [True: 0, False: 157k]
  |  |  ------------------
  ------------------
 6559|   157k|                     std::distance(begin, end) < potential_fill_len)) {
 6560|      0|        handler.on_error("Invalid encoding in fill character");
 6561|      0|        return begin;
 6562|      0|    }
 6563|       |
 6564|   157k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6565|       |
 6566|   157k|    auto potential_fill = std::basic_string_view<CharT>{
 6567|   157k|        begin, static_cast<size_t>(potential_fill_len)};
 6568|   157k|    const auto begin_before_fill = begin;
 6569|   157k|    begin += potential_fill_len;
 6570|       |
 6571|   157k|    if (begin == end) {
  ------------------
  |  Branch (6571:9): [True: 0, False: 157k]
  ------------------
 6572|      0|        return begin_before_fill;
 6573|      0|    }
 6574|       |
 6575|   157k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6576|   157k|    const auto begin_after_fill = begin;
 6577|   157k|    ++begin;
 6578|       |
 6579|   157k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6579:9): [True: 157k, False: 0]
  ------------------
 6580|   157k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 157k]
  |  |  ------------------
  ------------------
 6581|      0|            handler.on_error("Invalid fill character '{' in format string");
 6582|      0|            return begin;
 6583|      0|        }
 6584|   157k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6584:13): [True: 0, False: 157k]
  ------------------
 6585|      0|            return begin_before_fill;
 6586|      0|        }
 6587|   157k|    }
 6588|       |
 6589|   157k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6589:9): [True: 157k, False: 0]
  ------------------
 6590|   157k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6590:13): [True: 0, False: 157k]
  ------------------
 6591|      0|            handler.on_align(potential_align_on_fill);
 6592|      0|            return begin_after_fill;
 6593|      0|        }
 6594|   157k|        return begin_before_fill;
 6595|   157k|    }
 6596|       |
 6597|      0|    handler.on_fill(potential_fill);
 6598|      0|    handler.on_align(potential_align_after_fill);
 6599|      0|    return begin;
 6600|   157k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6544|   315k|    auto check_align = [](wchar_t ch) {
 6545|   315k|        switch (ch) {
 6546|      0|            case L'<':
  ------------------
  |  Branch (6546:13): [True: 0, False: 315k]
  ------------------
 6547|      0|                return align_type::left;
 6548|      0|            case L'>':
  ------------------
  |  Branch (6548:13): [True: 0, False: 315k]
  ------------------
 6549|      0|                return align_type::right;
 6550|      0|            case L'^':
  ------------------
  |  Branch (6550:13): [True: 0, False: 315k]
  ------------------
 6551|      0|                return align_type::center;
 6552|   315k|            default:
  ------------------
  |  Branch (6552:13): [True: 315k, False: 0]
  ------------------
 6553|   315k|                return align_type::none;
 6554|   315k|        }
 6555|   315k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6606|   157k|{
 6607|   157k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   157k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   157k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6608|       |
 6609|   157k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6609:9): [True: 157k, False: 0]
  |  Branch (6609:33): [True: 0, False: 157k]
  ------------------
 6610|      0|        int width = parse_simple_int(begin, end);
 6611|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6612|      0|            handler.on_width(width);
 6613|      0|        }
 6614|      0|        else {
 6615|      0|            handler.on_error("Invalid field width");
 6616|      0|            return begin;
 6617|      0|        }
 6618|      0|    }
 6619|   157k|    return begin;
 6620|   157k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 7136|   157k|    {
 7137|   157k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7138|   157k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7138:13): [True: 157k, False: 0]
  ------------------
 7139|   157k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7139:13): [True: 157k, False: 0]
  ------------------
 7140|   157k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7140:13): [True: 0, False: 157k]
  ------------------
 7141|   157k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7141:13): [True: 0, False: 0]
  ------------------
 7142|      0|            SCN_UNLIKELY_ATTR
 7143|       |            // clang-format off
 7144|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7145|       |            // clang-format on
 7146|      0|        }
 7147|       |
 7148|   157k|        Handler::on_localized();
 7149|   157k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8426|   644k|{
 8427|   644k|#define SCN_VISIT(Type)                                         \
 8428|   644k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8429|   644k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8430|   644k|    }                                                           \
 8431|   644k|    else {                                                      \
 8432|   644k|        return vis(monostate_val);                              \
 8433|   644k|    }
 8434|       |
 8435|   644k|    monostate monostate_val{};
 8436|       |
 8437|   644k|    switch (arg.m_type) {
 8438|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 644k]
  ------------------
 8439|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 644k]
  ------------------
 8441|      0|            SCN_VISIT(short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 644k]
  ------------------
 8443|      0|            SCN_VISIT(int);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 644k]
  ------------------
 8445|      0|            SCN_VISIT(long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 644k]
  ------------------
 8447|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 644k]
  ------------------
 8449|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 644k]
  ------------------
 8451|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 644k]
  ------------------
 8453|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 644k]
  ------------------
 8455|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 644k]
  ------------------
 8457|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 644k]
  ------------------
 8459|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 644k]
  ------------------
 8461|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 644k]
  ------------------
 8463|      0|            SCN_VISIT(char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 644k]
  ------------------
 8465|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 644k]
  ------------------
 8467|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8468|   200k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8468:9): [True: 200k, False: 444k]
  ------------------
 8469|   200k|            SCN_VISIT(float);
  ------------------
  |  | 8428|   200k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   200k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   200k|    }                                                           \
  |  | 8431|   200k|    else {                                                      \
  |  | 8432|   200k|        return vis(monostate_val);                              \
  |  | 8433|   200k|    }
  ------------------
 8470|   420k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8470:9): [True: 220k, False: 424k]
  ------------------
 8471|   420k|            SCN_VISIT(double);
  ------------------
  |  | 8428|   420k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   420k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   420k|    }                                                           \
  |  | 8431|   420k|    else {                                                      \
  |  | 8432|   420k|        return vis(monostate_val);                              \
  |  | 8433|   420k|    }
  ------------------
 8472|   644k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8472:9): [True: 223k, False: 420k]
  ------------------
 8473|   644k|            SCN_VISIT(long double);
  ------------------
  |  | 8428|   644k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   644k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   644k|    }                                                           \
  |  | 8431|   644k|    else {                                                      \
  |  | 8432|   644k|        return vis(monostate_val);                              \
  |  | 8433|   644k|    }
  ------------------
 8474|   644k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 644k]
  ------------------
 8475|   644k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8428|   644k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   644k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   644k|    }                                                           \
  |  | 8431|   644k|    else {                                                      \
  |  | 8432|   644k|        return vis(monostate_val);                              \
  |  | 8433|   644k|    }
  ------------------
 8476|   644k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8476:9): [True: 0, False: 644k]
  ------------------
 8477|   644k|            SCN_VISIT(std::string);
  ------------------
  |  | 8428|   644k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   644k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   644k|    }                                                           \
  |  | 8431|   644k|    else {                                                      \
  |  | 8432|   644k|        return vis(monostate_val);                              \
  |  | 8433|   644k|    }
  ------------------
 8478|   644k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8478:9): [True: 0, False: 644k]
  ------------------
 8479|   644k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8428|   644k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   644k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   644k|    }                                                           \
  |  | 8431|   644k|    else {                                                      \
  |  | 8432|   644k|        return vis(monostate_val);                              \
  |  | 8433|   644k|    }
  ------------------
 8480|   644k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8480:9): [True: 0, False: 644k]
  ------------------
 8481|   644k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8428|   644k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   644k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   644k|    }                                                           \
  |  | 8431|   644k|    else {                                                      \
  |  | 8432|   644k|        return vis(monostate_val);                              \
  |  | 8433|   644k|    }
  ------------------
 8482|   644k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8482:9): [True: 0, False: 644k]
  ------------------
 8483|   644k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8428|   644k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   644k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   644k|    }                                                           \
  |  | 8431|   644k|    else {                                                      \
  |  | 8432|   644k|        return vis(monostate_val);                              \
  |  | 8433|   644k|    }
  ------------------
 8484|   644k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8484:9): [True: 0, False: 644k]
  ------------------
 8485|   644k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8428|   644k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   644k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   644k|    }                                                           \
  |  | 8431|   644k|    else {                                                      \
  |  | 8432|   644k|        return vis(monostate_val);                              \
  |  | 8433|   644k|    }
  ------------------
 8486|       |
 8487|   644k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8487:9): [True: 0, False: 644k]
  ------------------
 8488|   644k|#if !SCN_DISABLE_TYPE_CUSTOM
 8489|   644k|            return vis(
 8490|   644k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8491|       |#else
 8492|       |            return vis(monostate_val);
 8493|       |#endif
 8494|       |
 8495|      0|            SCN_CLANG_PUSH
 8496|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8497|       |
 8498|      0|            SCN_UNLIKELY_ATTR
 8499|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8499:9): [True: 0, False: 644k]
  ------------------
 8500|      0|        default: {
  ------------------
  |  Branch (8500:9): [True: 0, False: 644k]
  ------------------
 8501|      0|            return vis(monostate_val);
 8502|      0|        }
 8503|       |
 8504|   644k|            SCN_CLANG_POP
 8505|   644k|    }
 8506|       |
 8507|      0|#undef SCN_VISIT
 8508|       |
 8509|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8510|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8511|      0|}
_ZN3scn2v36detail17basic_scan_bufferIwE8sync_allEv:
 4083|   255k|    {
 4084|   255k|        sync(0);
 4085|   255k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
 5429|   323k|    constexpr basic_scan_args() = default;
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
 5429|   157k|    constexpr basic_scan_args() = default;

_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|   122k|{
   89|   122k|    auto args = make_scan_args<wscan_context, Args...>();
   90|   122k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   122k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   122k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   122k|    static_cast<    \
  |  |  929|   122k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   122k|    static_cast<    \
  |  |  929|   122k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|   122k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   401k|{
   44|   401k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   401k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   401k|}
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|   122k|{
  127|   122k|    auto args = make_scan_args<wscan_context, Args...>();
  128|   122k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   122k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|   122k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   122k|    static_cast<    \
  |  |  929|   122k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   122k|    static_cast<    \
  |  |  929|   122k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|   122k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeETnPvLPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT0_OSF_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   401k|{
   60|   401k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   401k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   401k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  162|  22.7k|{
  163|  22.7k|    T value;
  164|  22.7k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  22.7k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  22.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  22.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  22.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  22.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.54k, False: 16.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  6.54k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  6.54k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  6.54k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  6.54k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  6.54k|    }                                                  \
  |  |  |  | 3667|  22.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  16.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  16.1k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  16.1k|    static_cast<    \
  |  |  929|  16.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  16.1k|    static_cast<    \
  |  |  929|  16.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  22.7k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  78.9k|{
   72|  78.9k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  78.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  78.9k|}
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|   137k|{
   89|   137k|    auto args = make_scan_args<wscan_context, Args...>();
   90|   137k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   137k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   137k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   137k|    static_cast<    \
  |  |  929|   137k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   137k|    static_cast<    \
  |  |  929|   137k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|   137k|}
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|   137k|{
  127|   137k|    auto args = make_scan_args<wscan_context, Args...>();
  128|   137k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   137k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|   137k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   137k|    static_cast<    \
  |  |  929|   137k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   137k|    static_cast<    \
  |  |  929|   137k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|   137k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  162|  27.6k|{
  163|  27.6k|    T value;
  164|  27.6k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  27.6k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  27.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  27.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  27.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  27.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.54k, False: 21.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  6.54k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  6.54k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  6.54k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  6.54k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  6.54k|    }                                                  \
  |  |  |  | 3667|  27.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  21.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  21.1k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  21.1k|    static_cast<    \
  |  |  929|  21.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  21.1k|    static_cast<    \
  |  |  929|  21.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  27.6k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|   140k|{
   89|   140k|    auto args = make_scan_args<wscan_context, Args...>();
   90|   140k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   140k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   140k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   140k|    static_cast<    \
  |  |  929|   140k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   140k|    static_cast<    \
  |  |  929|   140k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|   140k|}
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|   140k|{
  127|   140k|    auto args = make_scan_args<wscan_context, Args...>();
  128|   140k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   140k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|   140k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   140k|    static_cast<    \
  |  |  929|   140k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   140k|    static_cast<    \
  |  |  929|   140k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|   140k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  162|  28.5k|{
  163|  28.5k|    T value;
  164|  28.5k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  28.5k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  28.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  28.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  28.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  28.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.54k, False: 22.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  6.54k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  6.54k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  6.54k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  6.54k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  6.54k|    }                                                  \
  |  |  |  | 3667|  28.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  22.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  22.0k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  22.0k|    static_cast<    \
  |  |  929|  22.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  22.0k|    static_cast<    \
  |  |  929|  22.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  28.5k|}
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|   122k|{
   89|   122k|    auto args = make_scan_args<wscan_context, Args...>();
   90|   122k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   122k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   122k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   122k|    static_cast<    \
  |  |  929|   122k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   122k|    static_cast<    \
  |  |  929|   122k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|   122k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   401k|{
   44|   401k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   401k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   401k|}
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  126|   122k|{
  127|   122k|    auto args = make_scan_args<wscan_context, Args...>();
  128|   122k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   122k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|   122k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   122k|    static_cast<    \
  |  |  929|   122k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   122k|    static_cast<    \
  |  |  929|   122k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|   122k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeETnPvLPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT0_OSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   401k|{
   60|   401k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   401k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   401k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  162|  22.6k|{
  163|  22.6k|    T value;
  164|  22.6k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  22.6k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  22.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  22.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  22.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  22.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.54k, False: 16.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  6.54k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  6.54k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  6.54k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  6.54k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  6.54k|    }                                                  \
  |  |  |  | 3667|  22.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  16.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  16.1k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  16.1k|    static_cast<    \
  |  |  929|  16.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  16.1k|    static_cast<    \
  |  |  929|  16.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  22.6k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  78.8k|{
   72|  78.8k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  78.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  78.8k|}
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|   137k|{
   89|   137k|    auto args = make_scan_args<wscan_context, Args...>();
   90|   137k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   137k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   137k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   137k|    static_cast<    \
  |  |  929|   137k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   137k|    static_cast<    \
  |  |  929|   137k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|   137k|}
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  126|   137k|{
  127|   137k|    auto args = make_scan_args<wscan_context, Args...>();
  128|   137k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   137k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|   137k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   137k|    static_cast<    \
  |  |  929|   137k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   137k|    static_cast<    \
  |  |  929|   137k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|   137k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  162|  27.6k|{
  163|  27.6k|    T value;
  164|  27.6k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  27.6k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  27.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  27.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  27.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  27.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.54k, False: 21.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  6.54k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  6.54k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  6.54k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  6.54k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  6.54k|    }                                                  \
  |  |  |  | 3667|  27.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  21.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  21.1k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  21.1k|    static_cast<    \
  |  |  929|  21.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  21.1k|    static_cast<    \
  |  |  929|  21.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  27.6k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|   140k|{
   89|   140k|    auto args = make_scan_args<wscan_context, Args...>();
   90|   140k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   140k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   140k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   140k|    static_cast<    \
  |  |  929|   140k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   140k|    static_cast<    \
  |  |  929|   140k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|   140k|}
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  126|   140k|{
  127|   140k|    auto args = make_scan_args<wscan_context, Args...>();
  128|   140k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   140k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|   140k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   140k|    static_cast<    \
  |  |  929|   140k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   140k|    static_cast<    \
  |  |  929|   140k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|   140k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  162|  28.5k|{
  163|  28.5k|    T value;
  164|  28.5k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  28.5k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  28.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  28.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  28.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  28.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.54k, False: 21.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  6.54k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  6.54k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  6.54k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  6.54k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  6.54k|    }                                                  \
  |  |  |  | 3667|  28.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  21.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  21.9k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  21.9k|    static_cast<    \
  |  |  929|  21.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  21.9k|    static_cast<    \
  |  |  929|  21.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  28.5k|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  651|  2.34M|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  652|  2.34M|{
  653|  2.34M|    static_assert(std::is_same_v<Locale, std::locale>);
  654|  2.34M|}
_ZNK3scn2v36detail10locale_ref3getINSt3__16localeEEET_v:
  658|   987k|{
  659|   987k|    static_assert(std::is_same_v<Locale, std::locale>);
  660|   987k|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (660:12): [True: 493k, False: 493k]
  ------------------
  661|   987k|                    : std::locale{};
  662|   987k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1220|  1.03M|{
 1221|  1.03M|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  1.03M|                                  m_nan_payload_buffer, value);
 1223|  1.03M|    value = this->setsign(value);
 1224|  1.03M|    return n;
 1225|  1.03M|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1220|   415k|{
 1221|   415k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   415k|                                  m_nan_payload_buffer, value);
 1223|   415k|    value = this->setsign(value);
 1224|   415k|    return n;
 1225|   415k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|  1.08M|{
 1221|  1.08M|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  1.08M|                                  m_nan_payload_buffer, value);
 1223|  1.08M|    value = this->setsign(value);
 1224|  1.08M|    return n;
 1225|  1.08M|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|   483k|{
 1221|   483k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   483k|                                  m_nan_payload_buffer, value);
 1223|   483k|    value = this->setsign(value);
 1224|   483k|    return n;
 1225|   483k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1220|  1.09M|{
 1221|  1.09M|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  1.09M|                                  m_nan_payload_buffer, value);
 1223|  1.09M|    value = this->setsign(value);
 1224|  1.09M|    return n;
 1225|  1.09M|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1220|   494k|{
 1221|   494k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   494k|                                  m_nan_payload_buffer, value);
 1223|   494k|    value = this->setsign(value);
 1224|   494k|    return n;
 1225|   494k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2183|   709k|{
 2184|   709k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2185|   709k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2191|   832k|{
 2192|   832k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2193|   832k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   832k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 773k, False: 58.9k]
  |  |  ------------------
  ------------------
 2194|   773k|        source.sync(*n);
 2195|   773k|    }
 2196|  58.9k|    else {
 2197|  58.9k|        source.sync_all();
 2198|  58.9k|    }
 2199|   832k|    return n;
 2200|   832k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2207|   401k|{
 2208|   401k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2209|   401k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2215|   401k|{
 2216|   401k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2217|   401k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   401k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 283k, False: 117k]
  |  |  ------------------
  ------------------
 2218|   283k|        source.sync(*n);
 2219|   283k|    }
 2220|   117k|    else {
 2221|   117k|        source.sync_all();
 2222|   117k|    }
 2223|   401k|    return n;
 2224|   401k|}
_ZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  193|  1.43M|{
  194|  1.43M|    return find_classic_impl(
  195|  1.43M|        source, [](char ch) { return is_ascii_space(ch); },
  196|  1.43M|        [](char32_t cp) { return detail::is_cp_space(cp); });
  197|  1.43M|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  201|  3.39M|{
  202|  3.39M|    return find_classic_impl(
  203|  3.39M|        source, [](char ch) { return !is_ascii_space(ch); },
  204|  3.39M|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  205|  3.39M|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2140|   709k|{
 2141|   709k|    return vscan_internal(source, format, args);
 2142|   709k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2146|   832k|{
 2147|   832k|    auto n = vscan_internal(source, format, args);
 2148|   832k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   832k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 773k, False: 58.9k]
  |  |  ------------------
  ------------------
 2149|   773k|        source.sync(*n);
 2150|   773k|    }
 2151|  58.9k|    else {
 2152|  58.9k|        source.sync_all();
 2153|  58.9k|    }
 2154|   832k|    return n;
 2155|   832k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2160|   401k|{
 2161|   401k|    return vscan_internal(source, format, args);
 2162|   401k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2166|   401k|{
 2167|   401k|    auto n = vscan_internal(source, format, args);
 2168|   401k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   401k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 283k, False: 117k]
  |  |  ------------------
  ------------------
 2169|   283k|        source.sync(*n);
 2170|   283k|    }
 2171|   117k|    else {
 2172|   117k|        source.sync_all();
 2173|   117k|    }
 2174|   401k|    return n;
 2175|   401k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2250|   153k|{
 2251|   153k|    return vscan_value_internal(source, arg);
 2252|   153k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2255|   169k|{
 2256|   169k|    auto n = vscan_value_internal(source, arg);
 2257|   169k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   169k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 159k, False: 9.81k]
  |  |  ------------------
  ------------------
 2258|   159k|        source.sync(*n);
 2259|   159k|    }
 2260|  9.81k|    else {
 2261|  9.81k|        source.sync_all();
 2262|  9.81k|    }
 2263|   169k|    return n;
 2264|   169k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2269|  78.9k|{
 2270|  78.9k|    return vscan_value_internal(source, arg);
 2271|  78.9k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2275|  78.8k|{
 2276|  78.8k|    auto n = vscan_value_internal(source, arg);
 2277|  78.8k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  78.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 59.2k, False: 19.6k]
  |  |  ------------------
  ------------------
 2278|  59.2k|        source.sync(*n);
 2279|  59.2k|    }
 2280|  19.6k|    else {
 2281|  19.6k|        source.sync_all();
 2282|  19.6k|    }
 2283|  78.8k|    return n;
 2284|  78.8k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  1.43M|{
  118|  1.43M|    auto it = source.begin();
  119|       |
  120|  4.68M|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 3.75M, False: 925k]
  ------------------
  121|  3.75M|        auto sv =
  122|  3.75M|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  3.75M|                .substr(0, 8);
  124|       |
  125|  3.75M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 3.67M, False: 84.3k]
  ------------------
  126|  3.67M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  3.67M|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  3.67M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 475k, False: 3.19M]
  ------------------
  129|   475k|                break;
  130|   475k|            }
  131|  3.19M|            continue;
  132|  3.67M|        }
  133|       |
  134|   285k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 235k, False: 50.1k]
  ------------------
  135|   235k|            auto tmp =
  136|   235k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   235k|            auto res = get_next_code_point(tmp);
  138|   235k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 34.1k, False: 201k]
  ------------------
  139|  34.1k|                return it;
  140|  34.1k|            }
  141|   201k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|   201k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|   201k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|   201k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|   201k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|   201k|        }
  145|  84.3k|    }
  146|       |
  147|  1.40M|    return detail::make_string_view_iterator(source, it);
  148|  1.43M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  104|  5.83M|{
  105|  5.83M|    static_assert(sizeof(*source.data()) == 1);
  106|  5.83M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|  5.83M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.83M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  107|  5.83M|    uint64_t word{};
  108|  5.83M|    std::memcpy(&word, source.data(), source.size());
  109|       |
  110|  5.83M|    return has_byte_greater(word, 127) != 0;
  111|  5.83M|}
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  195|  22.4M|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  196|   235k|        [](char32_t cp) { return detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  3.39M|{
  118|  3.39M|    auto it = source.begin();
  119|       |
  120|  3.71M|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 2.07M, False: 1.64M]
  ------------------
  121|  2.07M|        auto sv =
  122|  2.07M|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  2.07M|                .substr(0, 8);
  124|       |
  125|  2.07M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 1.95M, False: 115k]
  ------------------
  126|  1.95M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  1.95M|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  1.95M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 1.64M, False: 308k]
  ------------------
  129|  1.64M|                break;
  130|  1.64M|            }
  131|   308k|            continue;
  132|  1.95M|        }
  133|       |
  134|   217k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 207k, False: 10.2k]
  ------------------
  135|   207k|            auto tmp =
  136|   207k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   207k|            auto res = get_next_code_point(tmp);
  138|   207k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 105k, False: 101k]
  ------------------
  139|   105k|                return it;
  140|   105k|            }
  141|   101k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|   101k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|   101k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|   101k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|   101k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|   101k|        }
  145|   115k|    }
  146|       |
  147|  3.29M|    return detail::make_string_view_iterator(source, it);
  148|  3.39M|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  203|  3.07M|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  204|   207k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  1.03M|{
 1138|  1.03M|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 5.79k, False: 1.03M]
  ------------------
 1139|  5.79k|        value = std::numeric_limits<T>::infinity();
 1140|  5.79k|        return 3;
 1141|  5.79k|    }
 1142|  1.03M|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 5.85k, False: 1.02M]
  ------------------
 1143|  5.85k|        value = std::numeric_limits<T>::infinity();
 1144|  5.85k|        return 8;
 1145|  5.85k|    }
 1146|  1.02M|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 39.4k, False: 987k]
  ------------------
 1147|  39.4k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  39.4k|        return 3;
 1149|  39.4k|    }
 1150|   987k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 2.14k, False: 985k]
  ------------------
 1151|  2.14k|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|  2.14k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|  2.14k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|  2.14k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|  2.14k|    }
 1182|       |
 1183|   985k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   985k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   985k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   985k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 213k, False: 771k]
  ------------------
 1185|   213k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   213k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.43k, False: 209k]
  |  |  ------------------
  ------------------
 1186|  4.43k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  4.43k|                                         "Invalid floating-point digit");
 1188|  4.43k|        }
 1189|   213k|    }
 1190|   981k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   981k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.6k, False: 969k]
  |  |  ------------------
  ------------------
 1191|  11.6k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  11.6k|                                     "Invalid floating-point digit");
 1193|  11.6k|    }
 1194|       |
 1195|       |    if constexpr (std::is_same_v<T, long double>) {
 1196|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|       |            double tmp{};
 1200|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|       |            value = tmp;
 1202|       |            return ret;
 1203|       |        }
 1204|       |        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|       |            return fast_float_fallback(data, value);
 1208|       |        }
 1209|       |    }
 1210|   969k|    else {
 1211|       |        // Default to fast_float
 1212|   969k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   969k|    }
 1214|   969k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIcfEC2ENS2_14impl_init_dataIcEE:
 1076|   969k|        : fast_float_impl_base{data.base()}, m_input(data.input)
 1077|   969k|    {
 1078|   969k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_114impl_init_dataIcE4baseEv:
  711|  3.49M|    {
  712|  3.49M|        return {kind, options};
  713|  3.49M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcfEclERf:
 1081|   969k|    {
 1082|   969k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 209k, False: 760k]
  ------------------
 1083|   969k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 31.6k, False: 728k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|   240k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|   240k|                                              value);
 1087|   240k|        }
 1088|       |
 1089|   728k|        const auto flags = get_flags();
 1090|   728k|        const auto view = get_view();
 1091|   728k|        const auto result = fast_float::from_chars(
 1092|   728k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|   728k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|   728k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 728k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|   728k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|   728k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.53k, False: 722k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  6.53k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  6.53k|                                              value);
 1102|  6.53k|        }
 1103|       |
 1104|   722k|        return result.ptr - view.data();
 1105|   728k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   247k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   247k|    {
 1048|   247k|#if !SCN_DISABLE_STRTOD
 1049|   247k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   247k|    }
 1056|   247k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfEC2ENS2_14impl_init_dataIcEE:
  892|   247k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  893|   247k|    {
  894|   247k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfEC2ENS2_9impl_baseE:
  725|   343k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfEclERf:
  897|   247k|    {
  898|   247k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   247k|                           generic_strtod);
  900|   247k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIcPFfPKcPPcEEENS0_13scan_expectedIlEERfPKT_T0_:
  731|   247k|    {
  732|   247k|        CharT* end{};
  733|   247k|        errno = 0;
  734|   247k|        value = strtod_cb(src, &end);
  735|   247k|        const auto saved_errno = errno;
  736|   247k|        auto chars_read = end - src;
  737|       |
  738|   247k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   247k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   247k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.74k, False: 239k]
  |  |  ------------------
  ------------------
  740|  7.74k|            return unexpected(e);
  741|  7.74k|        }
  742|       |
  743|   239k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 208k, False: 31.5k]
  ------------------
  744|   239k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 208k, False: 0]
  ------------------
  745|   208k|            chars_read -= 2;
  746|   208k|        }
  747|       |
  748|   239k|        return chars_read;
  749|   247k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE11check_errorElif:
  777|   343k|    {
  778|   343k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 135k, False: 207k]
  |  Branch (778:37): [True: 0, False: 135k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|   343k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 32.3k, False: 311k]
  ------------------
  785|   343k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 32.3k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|   343k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 13.4k, False: 330k]
  |  Branch (791:34): [True: 3.02k, False: 10.4k]
  ------------------
  792|  3.02k|            SCN_UNLIKELY_ATTR
  793|  3.02k|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|  3.02k|        }
  795|       |
  796|   340k|        SCN_GCC_COMPAT_PUSH
  797|   340k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|   340k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 340k, False: 0]
  ------------------
  800|   340k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 340k, False: 0]
  ------------------
  801|   340k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 10.4k, False: 330k]
  ------------------
  802|  10.4k|            SCN_UNLIKELY_ATTR
  803|  10.4k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|  10.4k|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|   330k|            return {};
  809|   340k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEf:
  686|   356k|{
  687|   356k|    return f == 0.0f || f == -0.0f;
  ------------------
  |  Branch (687:12): [True: 138k, False: 218k]
  |  Branch (687:25): [True: 0, False: 218k]
  ------------------
  688|   356k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   247k|    {
  755|   247k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 242k, False: 5.22k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   242k|            auto first_space = read_until_classic_space(input.view());
  758|   242k|            input.assign(
  759|   242k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   242k|        }
  761|       |
  762|   247k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 209k, False: 38.2k]
  ------------------
  763|   209k|            if constexpr (std::is_same_v<CharT, char>) {
  764|   209k|                input.get_allocated_string().insert(0, "0x");
  765|       |            }
  766|       |            else {
  767|       |                input.get_allocated_string().insert(0, L"0x");
  768|       |            }
  769|   209k|        }
  770|       |
  771|   247k|        return input.get_allocated_string().c_str();
  772|   247k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfE14generic_strtodEPKcPPc:
  904|   247k|    {
  905|   247k|        if constexpr (std::is_same_v<CharT, char>) {
  906|   247k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|       |        }
  908|       |        else {
  909|       |            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|       |        }
  911|   247k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE21generic_narrow_strtodEPKcPPc:
  812|   247k|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|   247k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|   247k|        if constexpr (std::is_same_v<T, float>) {
  838|   247k|            return std::strtof(str, str_end);
  839|       |        }
  840|       |        else if constexpr (std::is_same_v<T, double>) {
  841|       |            return std::strtod(str, str_end);
  842|       |        }
  843|       |        else if constexpr (std::is_same_v<T, long double>) {
  844|       |            return std::strtold(str, str_end);
  845|       |        }
  846|   247k|#endif
  847|   247k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_120fast_float_impl_base9get_flagsEv:
 1060|  2.12M|    {
 1061|  2.12M|        unsigned format_flags{};
 1062|  2.12M|        if ((m_options & float_reader_base::allow_fixed) != 0) {
  ------------------
  |  Branch (1062:13): [True: 2.10M, False: 14.1k]
  ------------------
 1063|  2.10M|            format_flags |= fast_float::fixed;
 1064|  2.10M|        }
 1065|  2.12M|        if ((m_options & float_reader_base::allow_scientific) != 0) {
  ------------------
  |  Branch (1065:13): [True: 1.79M, False: 325k]
  ------------------
 1066|  1.79M|            format_flags |= fast_float::scientific;
 1067|  1.79M|        }
 1068|       |
 1069|  2.12M|        return static_cast<fast_float::chars_format>(format_flags);
 1070|  2.12M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcfE8get_viewEv:
 1109|   728k|    {
 1110|   728k|        if constexpr (sizeof(CharT) == 1) {
 1111|   728k|            return m_input.view();
 1112|       |        }
 1113|       |        else if constexpr (sizeof(CharT) == 2) {
 1114|       |            return std::u16string_view{
 1115|       |                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|       |                m_input.view().size()};
 1117|       |        }
 1118|       |        else {
 1119|       |            return std::u32string_view{
 1120|       |                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|       |                m_input.view().size()};
 1122|       |        }
 1123|   728k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   415k|{
 1138|   415k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 415k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|   415k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 415k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|   415k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 415k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|   415k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 415k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|   415k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   415k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   415k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   415k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 102k, False: 312k]
  ------------------
 1185|   102k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.6k, False: 89.7k]
  |  |  ------------------
  ------------------
 1186|  12.6k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  12.6k|                                         "Invalid floating-point digit");
 1188|  12.6k|        }
 1189|   102k|    }
 1190|   402k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   402k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 30.3k, False: 372k]
  |  |  ------------------
  ------------------
 1191|  30.3k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  30.3k|                                     "Invalid floating-point digit");
 1193|  30.3k|    }
 1194|       |
 1195|       |    if constexpr (std::is_same_v<T, long double>) {
 1196|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|       |            double tmp{};
 1200|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|       |            value = tmp;
 1202|       |            return ret;
 1203|       |        }
 1204|       |        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|       |            return fast_float_fallback(data, value);
 1208|       |        }
 1209|       |    }
 1210|   372k|    else {
 1211|       |        // Default to fast_float
 1212|   372k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   372k|    }
 1214|   372k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIwfEC2ENS2_14impl_init_dataIwEE:
 1076|   372k|        : fast_float_impl_base{data.base()}, m_input(data.input)
 1077|   372k|    {
 1078|   372k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_114impl_init_dataIwE4baseEv:
  711|  1.45M|    {
  712|  1.45M|        return {kind, options};
  713|  1.45M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwfEclERf:
 1081|   372k|    {
 1082|   372k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 89.7k, False: 282k]
  ------------------
 1083|   372k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 707, False: 281k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|  90.4k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|  90.4k|                                              value);
 1087|  90.4k|        }
 1088|       |
 1089|   281k|        const auto flags = get_flags();
 1090|   281k|        const auto view = get_view();
 1091|   281k|        const auto result = fast_float::from_chars(
 1092|   281k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|   281k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|   281k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 281k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|   281k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|   281k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.63k, False: 276k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  5.63k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  5.63k|                                              value);
 1102|  5.63k|        }
 1103|       |
 1104|   276k|        return result.ptr - view.data();
 1105|   281k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  96.0k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  96.0k|    {
 1048|  96.0k|#if !SCN_DISABLE_STRTOD
 1049|  96.0k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  96.0k|    }
 1056|  96.0k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfEC2ENS2_14impl_init_dataIwEE:
  892|  96.0k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  893|  96.0k|    {
  894|  96.0k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfEclERf:
  897|  96.0k|    {
  898|  96.0k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  96.0k|                           generic_strtod);
  900|  96.0k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIwPFfPKwPPwEEENS0_13scan_expectedIlEERfPKT_T0_:
  731|  96.0k|    {
  732|  96.0k|        CharT* end{};
  733|  96.0k|        errno = 0;
  734|  96.0k|        value = strtod_cb(src, &end);
  735|  96.0k|        const auto saved_errno = errno;
  736|  96.0k|        auto chars_read = end - src;
  737|       |
  738|  96.0k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  96.0k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  96.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.72k, False: 90.3k]
  |  |  ------------------
  ------------------
  740|  5.72k|            return unexpected(e);
  741|  5.72k|        }
  742|       |
  743|  90.3k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 89.6k, False: 707]
  ------------------
  744|  90.3k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 89.6k, False: 0]
  ------------------
  745|  89.6k|            chars_read -= 2;
  746|  89.6k|        }
  747|       |
  748|  90.3k|        return chars_read;
  749|  96.0k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  96.0k|    {
  755|  96.0k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 92.7k, False: 3.26k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  92.7k|            auto first_space = read_until_classic_space(input.view());
  758|  92.7k|            input.assign(
  759|  92.7k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  92.7k|        }
  761|       |
  762|  96.0k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 89.7k, False: 6.34k]
  ------------------
  763|       |            if constexpr (std::is_same_v<CharT, char>) {
  764|       |                input.get_allocated_string().insert(0, "0x");
  765|       |            }
  766|  89.7k|            else {
  767|  89.7k|                input.get_allocated_string().insert(0, L"0x");
  768|  89.7k|            }
  769|  89.7k|        }
  770|       |
  771|  96.0k|        return input.get_allocated_string().c_str();
  772|  96.0k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfE14generic_strtodEPKwPPw:
  904|  96.0k|    {
  905|       |        if constexpr (std::is_same_v<CharT, char>) {
  906|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|       |        }
  908|  96.0k|        else {
  909|  96.0k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  96.0k|        }
  911|  96.0k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE19generic_wide_strtodEPKwPPw:
  850|  96.0k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|  96.0k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|  96.0k|        if constexpr (std::is_same_v<T, float>) {
  876|  96.0k|            return std::wcstof(str, str_end);
  877|       |        }
  878|       |        else if constexpr (std::is_same_v<T, double>) {
  879|       |            return std::wcstod(str, str_end);
  880|       |        }
  881|       |        else if constexpr (std::is_same_v<T, long double>) {
  882|       |            return std::wcstold(str, str_end);
  883|       |        }
  884|  96.0k|#endif
  885|  96.0k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwfE8get_viewEv:
 1109|   281k|    {
 1110|       |        if constexpr (sizeof(CharT) == 1) {
 1111|       |            return m_input.view();
 1112|       |        }
 1113|       |        else if constexpr (sizeof(CharT) == 2) {
 1114|       |            return std::u16string_view{
 1115|       |                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|       |                m_input.view().size()};
 1117|       |        }
 1118|   281k|        else {
 1119|   281k|            return std::u32string_view{
 1120|   281k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|   281k|                m_input.view().size()};
 1122|   281k|        }
 1123|   281k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  1.08M|{
 1138|  1.08M|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 6.46k, False: 1.07M]
  ------------------
 1139|  6.46k|        value = std::numeric_limits<T>::infinity();
 1140|  6.46k|        return 3;
 1141|  6.46k|    }
 1142|  1.07M|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 6.26k, False: 1.07M]
  ------------------
 1143|  6.26k|        value = std::numeric_limits<T>::infinity();
 1144|  6.26k|        return 8;
 1145|  6.26k|    }
 1146|  1.07M|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 40.6k, False: 1.02M]
  ------------------
 1147|  40.6k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  40.6k|        return 3;
 1149|  40.6k|    }
 1150|  1.02M|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 2.38k, False: 1.02M]
  ------------------
 1151|  2.38k|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|  2.38k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|  2.38k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|  2.38k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|  2.38k|    }
 1182|       |
 1183|  1.02M|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  1.02M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.02M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  1.02M|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 219k, False: 807k]
  ------------------
 1185|   219k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   219k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.56k, False: 215k]
  |  |  ------------------
  ------------------
 1186|  4.56k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  4.56k|                                         "Invalid floating-point digit");
 1188|  4.56k|        }
 1189|   219k|    }
 1190|  1.02M|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  1.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.3k, False: 1.01M]
  |  |  ------------------
  ------------------
 1191|  12.3k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  12.3k|                                     "Invalid floating-point digit");
 1193|  12.3k|    }
 1194|       |
 1195|       |    if constexpr (std::is_same_v<T, long double>) {
 1196|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|       |            double tmp{};
 1200|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|       |            value = tmp;
 1202|       |            return ret;
 1203|       |        }
 1204|       |        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|       |            return fast_float_fallback(data, value);
 1208|       |        }
 1209|       |    }
 1210|  1.01M|    else {
 1211|       |        // Default to fast_float
 1212|  1.01M|        return fast_float_impl<CharT, T>{data}(value);
 1213|  1.01M|    }
 1214|  1.01M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIcdEC2ENS2_14impl_init_dataIcEE:
 1076|  1.01M|        : fast_float_impl_base{data.base()}, m_input(data.input)
 1077|  1.01M|    {
 1078|  1.01M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcdEclERd:
 1081|  1.01M|    {
 1082|  1.01M|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 215k, False: 795k]
  ------------------
 1083|  1.01M|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 34.0k, False: 761k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|   249k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|   249k|                                              value);
 1087|   249k|        }
 1088|       |
 1089|   761k|        const auto flags = get_flags();
 1090|   761k|        const auto view = get_view();
 1091|   761k|        const auto result = fast_float::from_chars(
 1092|   761k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|   761k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|   761k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 761k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|   761k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|   761k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.03k, False: 758k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  3.03k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  3.03k|                                              value);
 1102|  3.03k|        }
 1103|       |
 1104|   758k|        return result.ptr - view.data();
 1105|   761k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   252k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   252k|    {
 1048|   252k|#if !SCN_DISABLE_STRTOD
 1049|   252k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   252k|    }
 1056|   252k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdEC2ENS2_14impl_init_dataIcEE:
  892|   252k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  893|   252k|    {
  894|   252k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdEC2ENS2_9impl_baseE:
  725|   345k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdEclERd:
  897|   252k|    {
  898|   252k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   252k|                           generic_strtod);
  900|   252k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIcPFdPKcPPcEEENS0_13scan_expectedIlEERdPKT_T0_:
  731|   252k|    {
  732|   252k|        CharT* end{};
  733|   252k|        errno = 0;
  734|   252k|        value = strtod_cb(src, &end);
  735|   252k|        const auto saved_errno = errno;
  736|   252k|        auto chars_read = end - src;
  737|       |
  738|   252k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   252k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   252k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.56k, False: 248k]
  |  |  ------------------
  ------------------
  740|  3.56k|            return unexpected(e);
  741|  3.56k|        }
  742|       |
  743|   248k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 214k, False: 34.0k]
  ------------------
  744|   248k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 214k, False: 0]
  ------------------
  745|   214k|            chars_read -= 2;
  746|   214k|        }
  747|       |
  748|   248k|        return chars_read;
  749|   252k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE11check_errorElid:
  777|   345k|    {
  778|   345k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 134k, False: 210k]
  |  Branch (778:37): [True: 0, False: 134k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|   345k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 34.7k, False: 310k]
  ------------------
  785|   345k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 34.7k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|   345k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 6.19k, False: 338k]
  |  Branch (791:34): [True: 708, False: 5.48k]
  ------------------
  792|    708|            SCN_UNLIKELY_ATTR
  793|    708|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|    708|        }
  795|       |
  796|   344k|        SCN_GCC_COMPAT_PUSH
  797|   344k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|   344k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 344k, False: 0]
  ------------------
  800|   344k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 344k, False: 0]
  ------------------
  801|   344k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 5.48k, False: 338k]
  ------------------
  802|  5.48k|            SCN_UNLIKELY_ATTR
  803|  5.48k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|  5.48k|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|   338k|            return {};
  809|   344k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEd:
  690|   351k|{
  691|   351k|    return d == 0.0 || d == -0.0;
  ------------------
  |  Branch (691:12): [True: 135k, False: 216k]
  |  Branch (691:24): [True: 0, False: 216k]
  ------------------
  692|   351k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   252k|    {
  755|   252k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 248k, False: 3.77k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   248k|            auto first_space = read_until_classic_space(input.view());
  758|   248k|            input.assign(
  759|   248k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   248k|        }
  761|       |
  762|   252k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 215k, False: 37.1k]
  ------------------
  763|   215k|            if constexpr (std::is_same_v<CharT, char>) {
  764|   215k|                input.get_allocated_string().insert(0, "0x");
  765|       |            }
  766|       |            else {
  767|       |                input.get_allocated_string().insert(0, L"0x");
  768|       |            }
  769|   215k|        }
  770|       |
  771|   252k|        return input.get_allocated_string().c_str();
  772|   252k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdE14generic_strtodEPKcPPc:
  904|   252k|    {
  905|   252k|        if constexpr (std::is_same_v<CharT, char>) {
  906|   252k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|       |        }
  908|       |        else {
  909|       |            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|       |        }
  911|   252k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE21generic_narrow_strtodEPKcPPc:
  812|   252k|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|   252k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|       |        if constexpr (std::is_same_v<T, float>) {
  838|       |            return std::strtof(str, str_end);
  839|       |        }
  840|   252k|        else if constexpr (std::is_same_v<T, double>) {
  841|   252k|            return std::strtod(str, str_end);
  842|       |        }
  843|       |        else if constexpr (std::is_same_v<T, long double>) {
  844|       |            return std::strtold(str, str_end);
  845|       |        }
  846|   252k|#endif
  847|   252k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcdE8get_viewEv:
 1109|   761k|    {
 1110|   761k|        if constexpr (sizeof(CharT) == 1) {
 1111|   761k|            return m_input.view();
 1112|       |        }
 1113|       |        else if constexpr (sizeof(CharT) == 2) {
 1114|       |            return std::u16string_view{
 1115|       |                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|       |                m_input.view().size()};
 1117|       |        }
 1118|       |        else {
 1119|       |            return std::u32string_view{
 1120|       |                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|       |                m_input.view().size()};
 1122|       |        }
 1123|   761k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   483k|{
 1138|   483k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 483k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|   483k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 483k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|   483k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 483k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|   483k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 483k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|   483k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   483k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   483k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   483k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 102k, False: 380k]
  ------------------
 1185|   102k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.6k, False: 89.7k]
  |  |  ------------------
  ------------------
 1186|  12.6k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  12.6k|                                         "Invalid floating-point digit");
 1188|  12.6k|        }
 1189|   102k|    }
 1190|   470k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   470k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 31.3k, False: 439k]
  |  |  ------------------
  ------------------
 1191|  31.3k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  31.3k|                                     "Invalid floating-point digit");
 1193|  31.3k|    }
 1194|       |
 1195|       |    if constexpr (std::is_same_v<T, long double>) {
 1196|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|       |            double tmp{};
 1200|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|       |            value = tmp;
 1202|       |            return ret;
 1203|       |        }
 1204|       |        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|       |            return fast_float_fallback(data, value);
 1208|       |        }
 1209|       |    }
 1210|   439k|    else {
 1211|       |        // Default to fast_float
 1212|   439k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   439k|    }
 1214|   439k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIwdEC2ENS2_14impl_init_dataIwEE:
 1076|   439k|        : fast_float_impl_base{data.base()}, m_input(data.input)
 1077|   439k|    {
 1078|   439k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwdEclERd:
 1081|   439k|    {
 1082|   439k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 89.7k, False: 349k]
  ------------------
 1083|   439k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 707, False: 348k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|  90.4k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|  90.4k|                                              value);
 1087|  90.4k|        }
 1088|       |
 1089|   348k|        const auto flags = get_flags();
 1090|   348k|        const auto view = get_view();
 1091|   348k|        const auto result = fast_float::from_chars(
 1092|   348k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|   348k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|   348k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 348k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|   348k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|   348k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.56k, False: 346k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  2.56k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  2.56k|                                              value);
 1102|  2.56k|        }
 1103|       |
 1104|   346k|        return result.ptr - view.data();
 1105|   348k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  92.9k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  92.9k|    {
 1048|  92.9k|#if !SCN_DISABLE_STRTOD
 1049|  92.9k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  92.9k|    }
 1056|  92.9k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdEC2ENS2_14impl_init_dataIwEE:
  892|  92.9k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  893|  92.9k|    {
  894|  92.9k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdEclERd:
  897|  92.9k|    {
  898|  92.9k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  92.9k|                           generic_strtod);
  900|  92.9k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIwPFdPKwPPwEEENS0_13scan_expectedIlEERdPKT_T0_:
  731|  92.9k|    {
  732|  92.9k|        CharT* end{};
  733|  92.9k|        errno = 0;
  734|  92.9k|        value = strtod_cb(src, &end);
  735|  92.9k|        const auto saved_errno = errno;
  736|  92.9k|        auto chars_read = end - src;
  737|       |
  738|  92.9k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  92.9k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  92.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.62k, False: 90.3k]
  |  |  ------------------
  ------------------
  740|  2.62k|            return unexpected(e);
  741|  2.62k|        }
  742|       |
  743|  90.3k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 89.6k, False: 707]
  ------------------
  744|  90.3k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 89.6k, False: 0]
  ------------------
  745|  89.6k|            chars_read -= 2;
  746|  89.6k|        }
  747|       |
  748|  90.3k|        return chars_read;
  749|  92.9k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  92.9k|    {
  755|  92.9k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 91.2k, False: 1.73k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  91.2k|            auto first_space = read_until_classic_space(input.view());
  758|  91.2k|            input.assign(
  759|  91.2k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  91.2k|        }
  761|       |
  762|  92.9k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 89.7k, False: 3.26k]
  ------------------
  763|       |            if constexpr (std::is_same_v<CharT, char>) {
  764|       |                input.get_allocated_string().insert(0, "0x");
  765|       |            }
  766|  89.7k|            else {
  767|  89.7k|                input.get_allocated_string().insert(0, L"0x");
  768|  89.7k|            }
  769|  89.7k|        }
  770|       |
  771|  92.9k|        return input.get_allocated_string().c_str();
  772|  92.9k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdE14generic_strtodEPKwPPw:
  904|  92.9k|    {
  905|       |        if constexpr (std::is_same_v<CharT, char>) {
  906|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|       |        }
  908|  92.9k|        else {
  909|  92.9k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  92.9k|        }
  911|  92.9k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE19generic_wide_strtodEPKwPPw:
  850|  92.9k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|  92.9k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|       |        if constexpr (std::is_same_v<T, float>) {
  876|       |            return std::wcstof(str, str_end);
  877|       |        }
  878|  92.9k|        else if constexpr (std::is_same_v<T, double>) {
  879|  92.9k|            return std::wcstod(str, str_end);
  880|       |        }
  881|       |        else if constexpr (std::is_same_v<T, long double>) {
  882|       |            return std::wcstold(str, str_end);
  883|       |        }
  884|  92.9k|#endif
  885|  92.9k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwdE8get_viewEv:
 1109|   348k|    {
 1110|       |        if constexpr (sizeof(CharT) == 1) {
 1111|       |            return m_input.view();
 1112|       |        }
 1113|       |        else if constexpr (sizeof(CharT) == 2) {
 1114|       |            return std::u16string_view{
 1115|       |                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|       |                m_input.view().size()};
 1117|       |        }
 1118|   348k|        else {
 1119|   348k|            return std::u32string_view{
 1120|   348k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|   348k|                m_input.view().size()};
 1122|   348k|        }
 1123|   348k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  1.09M|{
 1138|  1.09M|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 6.62k, False: 1.08M]
  ------------------
 1139|  6.62k|        value = std::numeric_limits<T>::infinity();
 1140|  6.62k|        return 3;
 1141|  6.62k|    }
 1142|  1.08M|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 6.38k, False: 1.08M]
  ------------------
 1143|  6.38k|        value = std::numeric_limits<T>::infinity();
 1144|  6.38k|        return 8;
 1145|  6.38k|    }
 1146|  1.08M|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 40.9k, False: 1.03M]
  ------------------
 1147|  40.9k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  40.9k|        return 3;
 1149|  40.9k|    }
 1150|  1.03M|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 2.41k, False: 1.03M]
  ------------------
 1151|  2.41k|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|  2.41k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|  2.41k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|  2.41k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|  2.41k|    }
 1182|       |
 1183|  1.03M|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  1.03M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.03M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  1.03M|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 220k, False: 817k]
  ------------------
 1185|   220k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   220k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.67k, False: 215k]
  |  |  ------------------
  ------------------
 1186|  4.67k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  4.67k|                                         "Invalid floating-point digit");
 1188|  4.67k|        }
 1189|   220k|    }
 1190|  1.03M|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  1.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.7k, False: 1.02M]
  |  |  ------------------
  ------------------
 1191|  12.7k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  12.7k|                                     "Invalid floating-point digit");
 1193|  12.7k|    }
 1194|       |
 1195|  1.02M|    if constexpr (std::is_same_v<T, long double>) {
 1196|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|       |            double tmp{};
 1200|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|       |            value = tmp;
 1202|       |            return ret;
 1203|       |        }
 1204|  1.02M|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  1.02M|            return fast_float_fallback(data, value);
 1208|  1.02M|        }
 1209|       |    }
 1210|       |    else {
 1211|       |        // Default to fast_float
 1212|       |        return fast_float_impl<CharT, T>{data}(value);
 1213|       |    }
 1214|  1.02M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  1.02M|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  1.02M|    {
 1048|  1.02M|#if !SCN_DISABLE_STRTOD
 1049|  1.02M|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  1.02M|    }
 1056|  1.02M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceEC2ENS2_14impl_init_dataIcEE:
  892|  1.02M|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  893|  1.02M|    {
  894|  1.02M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeEC2ENS2_9impl_baseE:
  725|  1.46M|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceEclERe:
  897|  1.02M|    {
  898|  1.02M|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  1.02M|                           generic_strtod);
  900|  1.02M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIcPFePKcPPcEEENS0_13scan_expectedIlEERePKT_T0_:
  731|  1.02M|    {
  732|  1.02M|        CharT* end{};
  733|  1.02M|        errno = 0;
  734|  1.02M|        value = strtod_cb(src, &end);
  735|  1.02M|        const auto saved_errno = errno;
  736|  1.02M|        auto chars_read = end - src;
  737|       |
  738|  1.02M|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  1.02M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 840, False: 1.01M]
  |  |  ------------------
  ------------------
  740|    840|            return unexpected(e);
  741|    840|        }
  742|       |
  743|  1.01M|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 215k, False: 803k]
  ------------------
  744|  1.01M|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 215k, False: 0]
  ------------------
  745|   215k|            chars_read -= 2;
  746|   215k|        }
  747|       |
  748|  1.01M|        return chars_read;
  749|  1.02M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE11check_errorElie:
  777|  1.46M|    {
  778|  1.46M|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 637k, False: 832k]
  |  Branch (778:37): [True: 0, False: 637k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|  1.46M|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 34.8k, False: 1.43M]
  ------------------
  785|  1.46M|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 34.8k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|  1.46M|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 1.20k, False: 1.46M]
  |  Branch (791:34): [True: 170, False: 1.03k]
  ------------------
  792|    170|            SCN_UNLIKELY_ATTR
  793|    170|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|    170|        }
  795|       |
  796|  1.46M|        SCN_GCC_COMPAT_PUSH
  797|  1.46M|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|  1.46M|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 1.46M, False: 0]
  ------------------
  800|  1.46M|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 1.46M, False: 0]
  ------------------
  801|  1.46M|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 1.03k, False: 1.46M]
  ------------------
  802|  1.03k|            SCN_UNLIKELY_ATTR
  803|  1.03k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|  1.03k|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|  1.46M|            return {};
  809|  1.46M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEe:
  694|  1.47M|{
  695|  1.47M|    return ld == 0.0L || ld == -0.0L;
  ------------------
  |  Branch (695:12): [True: 637k, False: 833k]
  |  Branch (695:26): [True: 0, False: 833k]
  ------------------
  696|  1.47M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  1.02M|    {
  755|  1.02M|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 944k, False: 76.0k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   944k|            auto first_space = read_until_classic_space(input.view());
  758|   944k|            input.assign(
  759|   944k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   944k|        }
  761|       |
  762|  1.02M|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 215k, False: 804k]
  ------------------
  763|   215k|            if constexpr (std::is_same_v<CharT, char>) {
  764|   215k|                input.get_allocated_string().insert(0, "0x");
  765|       |            }
  766|       |            else {
  767|       |                input.get_allocated_string().insert(0, L"0x");
  768|       |            }
  769|   215k|        }
  770|       |
  771|  1.02M|        return input.get_allocated_string().c_str();
  772|  1.02M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceE14generic_strtodEPKcPPc:
  904|  1.02M|    {
  905|  1.02M|        if constexpr (std::is_same_v<CharT, char>) {
  906|  1.02M|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|       |        }
  908|       |        else {
  909|       |            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|       |        }
  911|  1.02M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE21generic_narrow_strtodEPKcPPc:
  812|  1.02M|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|  1.02M|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|       |        if constexpr (std::is_same_v<T, float>) {
  838|       |            return std::strtof(str, str_end);
  839|       |        }
  840|       |        else if constexpr (std::is_same_v<T, double>) {
  841|       |            return std::strtod(str, str_end);
  842|       |        }
  843|  1.02M|        else if constexpr (std::is_same_v<T, long double>) {
  844|  1.02M|            return std::strtold(str, str_end);
  845|  1.02M|        }
  846|  1.02M|#endif
  847|  1.02M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   494k|{
 1138|   494k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 494k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|   494k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 494k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|   494k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 494k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|   494k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 494k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|   494k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   494k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   494k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   494k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 102k, False: 391k]
  ------------------
 1185|   102k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.7k, False: 89.7k]
  |  |  ------------------
  ------------------
 1186|  12.7k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  12.7k|                                         "Invalid floating-point digit");
 1188|  12.7k|        }
 1189|   102k|    }
 1190|   481k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   481k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 32.0k, False: 449k]
  |  |  ------------------
  ------------------
 1191|  32.0k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  32.0k|                                     "Invalid floating-point digit");
 1193|  32.0k|    }
 1194|       |
 1195|   449k|    if constexpr (std::is_same_v<T, long double>) {
 1196|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|       |            double tmp{};
 1200|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|       |            value = tmp;
 1202|       |            return ret;
 1203|       |        }
 1204|   449k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|   449k|            return fast_float_fallback(data, value);
 1208|   449k|        }
 1209|       |    }
 1210|       |    else {
 1211|       |        // Default to fast_float
 1212|       |        return fast_float_impl<CharT, T>{data}(value);
 1213|       |    }
 1214|   449k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   449k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   449k|    {
 1048|   449k|#if !SCN_DISABLE_STRTOD
 1049|   449k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   449k|    }
 1056|   449k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweEC2ENS2_14impl_init_dataIwEE:
  892|   449k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  893|   449k|    {
  894|   449k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweEclERe:
  897|   449k|    {
  898|   449k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   449k|                           generic_strtod);
  900|   449k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIwPFePKwPPwEEENS0_13scan_expectedIlEERePKT_T0_:
  731|   449k|    {
  732|   449k|        CharT* end{};
  733|   449k|        errno = 0;
  734|   449k|        value = strtod_cb(src, &end);
  735|   449k|        const auto saved_errno = errno;
  736|   449k|        auto chars_read = end - src;
  737|       |
  738|   449k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   449k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   449k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 362, False: 449k]
  |  |  ------------------
  ------------------
  740|    362|            return unexpected(e);
  741|    362|        }
  742|       |
  743|   449k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 89.7k, False: 359k]
  ------------------
  744|   449k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 89.7k, False: 0]
  ------------------
  745|  89.7k|            chars_read -= 2;
  746|  89.7k|        }
  747|       |
  748|   449k|        return chars_read;
  749|   449k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   449k|    {
  755|   449k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 441k, False: 7.70k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   441k|            auto first_space = read_until_classic_space(input.view());
  758|   441k|            input.assign(
  759|   441k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   441k|        }
  761|       |
  762|   449k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 89.7k, False: 359k]
  ------------------
  763|       |            if constexpr (std::is_same_v<CharT, char>) {
  764|       |                input.get_allocated_string().insert(0, "0x");
  765|       |            }
  766|  89.7k|            else {
  767|  89.7k|                input.get_allocated_string().insert(0, L"0x");
  768|  89.7k|            }
  769|  89.7k|        }
  770|       |
  771|   449k|        return input.get_allocated_string().c_str();
  772|   449k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweE14generic_strtodEPKwPPw:
  904|   449k|    {
  905|       |        if constexpr (std::is_same_v<CharT, char>) {
  906|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|       |        }
  908|   449k|        else {
  909|   449k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|   449k|        }
  911|   449k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE19generic_wide_strtodEPKwPPw:
  850|   449k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|   449k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|       |        if constexpr (std::is_same_v<T, float>) {
  876|       |            return std::wcstof(str, str_end);
  877|       |        }
  878|       |        else if constexpr (std::is_same_v<T, double>) {
  879|       |            return std::wcstod(str, str_end);
  880|       |        }
  881|   449k|        else if constexpr (std::is_same_v<T, long double>) {
  882|   449k|            return std::wcstold(str, str_end);
  883|   449k|        }
  884|   449k|#endif
  885|   449k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2072|  1.66M|{
 2073|  1.66M|    const auto argcount = args.size();
 2074|  1.66M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2074:9): [True: 338k, False: 1.32M]
  |  Branch (2074:60): [True: 338k, False: 0]
  ------------------
 2075|   338k|        auto arg = args.get(0);
 2076|   338k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   338k|    static_cast<    \
  |  |  929|   338k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2077|   338k|    }
 2078|       |
 2079|  1.32M|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2079:9): [True: 0, False: 1.32M]
  ------------------
 2080|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2081|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|        return vscan_parse_format_string(format, handler);
 2084|      0|    }
 2085|       |
 2086|  1.32M|    SCN_UNLIKELY_ATTR
 2087|  1.32M|    {
 2088|  1.32M|        auto handler = format_handler<false, CharT>{
 2089|  1.32M|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.32M|    static_cast<    \
  |  |  929|  1.32M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.32M|    static_cast<    \
  |  |  929|  1.32M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2090|  1.32M|        return vscan_parse_format_string(format, handler);
 2091|  1.32M|    }
 2092|  1.32M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|  3.08M|{
 1625|  3.08M|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 2.43M, False: 646k]
  ------------------
 1626|  2.43M|        return false;
 1627|  2.43M|    }
 1628|   646k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 646k, False: 0]
  |  Branch (1628:39): [True: 646k, False: 0]
  ------------------
 1629|  3.08M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|   507k|{
 1658|   507k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   507k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 507k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|   507k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|   507k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 507k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|   507k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|   507k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|   507k|    static_cast<    \
  |  |  929|   507k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|   507k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|   507k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   507k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   507k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   507k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 29.4k, False: 478k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  29.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  29.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  29.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  29.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  29.4k|    }                                                  \
  |  |  |  | 3667|   507k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   478k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|   478k|    return it.position();
 1675|   507k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1899|  1.11M|        : format_handler_base{argcount},
 1900|  1.11M|          parse_ctx{format},
 1901|  1.11M|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|  1.11M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|  1.11M|    static_cast<    \
  |  |  929|  1.11M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|  1.11M|    static_cast<    \
  |  |  929|  1.11M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|  1.11M|    {
 1903|  1.11M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1720|  3.72M|    format_handler_base(size_t argcount) : args_count(argcount)
 1721|  3.72M|    {
 1722|  3.72M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|  3.72M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.72M]
  |  |  ------------------
  ------------------
 1723|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1724|      0|        }
 1725|  3.72M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1851|  1.11M|        : contiguous_ctx(source, args, loc)
 1852|  1.11M|    {
 1853|  1.11M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|  1.11M|{
 2038|  1.11M|    const auto beg = handler.get_ctx().begin();
 2039|  1.11M|    detail::parse_format_string<false>(format, handler);
 2040|  1.11M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 98.1k, False: 1.01M]
  |  |  ------------------
  ------------------
 2041|  98.1k|        return unexpected(handler.error);
 2042|  98.1k|    }
 2043|  1.01M|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|  1.11M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2021|  7.58M|    {
 2022|  7.58M|        return ctx.get();
 2023|  7.58M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1856|  7.58M|    {
 1857|  7.58M|        return contiguous_ctx;
 1858|  7.58M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1906|  2.12M|    {
 1907|  2.12M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 2.12M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|  2.12M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1680|  1.11M|{
 1681|  1.11M|    auto arg = ctx.arg(id);
 1682|  1.11M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  1.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.11M]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  1.11M|    return arg;
 1686|  1.11M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1796|  3.72M|    {
 1797|  3.72M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  3.72M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.72M]
  |  |  ------------------
  ------------------
 1798|      0|            on_error("Invalid out-of-range argument ID");
 1799|      0|            return;
 1800|      0|        }
 1801|       |
 1802|  3.72M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|  3.72M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.72M]
  |  |  ------------------
  ------------------
 1803|      0|            return on_error("Argument with this ID has already been scanned");
 1804|      0|        }
 1805|       |
 1806|  3.72M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  3.72M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.72M, False: 0]
  |  |  ------------------
  ------------------
 1807|  3.72M|            visited_args_lower64 |= (1ull << id);
 1808|  3.72M|            return;
 1809|  3.72M|        }
 1810|       |
 1811|      0|        id -= 64;
 1812|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1813|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1781|  3.72M|    {
 1782|  3.72M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  3.72M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.72M]
  |  |  ------------------
  ------------------
 1783|      0|            on_error("Invalid out-of-range argument ID");
 1784|      0|            return false;
 1785|      0|        }
 1786|       |
 1787|  3.72M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  3.72M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.72M, False: 0]
  |  |  ------------------
  ------------------
 1788|  3.72M|            return (visited_args_lower64 >> id) & 1ull;
 1789|  3.72M|        }
 1790|       |
 1791|      0|        id -= 64;
 1792|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1793|  3.72M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1765|   589k|    {
 1766|   589k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|   589k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 589k, False: 0]
  |  |  ------------------
  ------------------
 1767|   589k|            error = err;
 1768|   589k|        }
 1769|   589k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1943|  1.11M|    {
 1944|  1.11M|        return parse_ctx.next_arg_id();
 1945|  1.11M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1984|  1.11M|    {
 1985|  1.11M|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|  1.11M|        set_arg_as_visited(arg_id);
 1987|       |
 1988|  1.11M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 1.11M]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|  1.11M|        auto specs = detail::format_specs{};
 1998|  1.11M|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|  1.11M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|  1.11M|            arg.type()};
 2001|       |
 2002|  1.11M|        begin = detail::parse_format_specs(begin, end, handler);
 2003|  1.11M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 1.11M]
  |  Branch (2003:29): [True: 0, False: 1.11M]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|  1.11M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.11M]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|  1.11M|        parse_ctx.advance_to(begin);
 2012|       |
 2013|  1.11M|        on_visit_scan_arg(
 2014|  1.11M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|  1.11M|                                           get_ctx().locale()},
 2016|  1.11M|            arg);
 2017|  1.11M|        return parse_ctx.begin();
 2018|  1.11M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1699|  1.11M|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|  1.11M|    {
 1701|  1.11M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1955|  1.11M|    {
 1956|  1.11M|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 1.11M]
  |  Branch (1956:23): [True: 0, False: 1.11M]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|  1.11M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  1.11M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  1.11M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 98.1k, False: 1.01M]
  |  |  ------------------
  ------------------
 1963|  98.1k|            on_error(r.error());
 1964|  98.1k|        }
 1965|  1.01M|        else {
 1966|  1.01M|            get_ctx().advance_to(*r);
 1967|  1.01M|        }
 1968|  1.11M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1728|  3.72M|    {
 1729|  3.72M|        {
 1730|  3.72M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1730:45): [True: 0, False: 3.72M]
  ------------------
 1731|  3.72M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1731:35): [True: 0, False: 3.72M]
  ------------------
 1732|  3.72M|                                      ? std::numeric_limits<uint64_t>::max()
 1733|  3.72M|                                      : (1ull << args_count_lower64) - 1;
 1734|       |
 1735|  3.72M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1735:17): [True: 0, False: 3.72M]
  ------------------
 1736|      0|                return on_error("Argument list not exhausted");
 1737|      0|            }
 1738|  3.72M|        }
 1739|       |
 1740|  3.72M|        if (args_count < 64) {
  ------------------
  |  Branch (1740:13): [True: 3.72M, False: 0]
  ------------------
 1741|  3.72M|            return;
 1742|  3.72M|        }
 1743|       |
 1744|      0|        auto last_args_count = args_count - 64;
 1745|      0|        for (auto it = visited_args_upper.begin();
 1746|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1746:14): [True: 0, False: 0]
  ------------------
 1747|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1747:17): [True: 0, False: 0]
  ------------------
 1748|      0|                return on_error("Argument list not exhausted");
 1749|      0|            }
 1750|      0|            last_args_count -= 8;
 1751|      0|        }
 1752|       |
 1753|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1754|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1754:13): [True: 0, False: 0]
  ------------------
 1755|      0|            return on_error("Argument list not exhausted");
 1756|      0|        }
 1757|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1776|  3.72M|    {
 1777|  3.72M|        return error;
 1778|  3.72M|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1772|  11.1M|    {
 1773|  11.1M|        return static_cast<bool>(error);
 1774|  11.1M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
 1899|  1.32M|        : format_handler_base{argcount},
 1900|  1.32M|          parse_ctx{format},
 1901|  1.32M|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|  1.32M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|  1.32M|    static_cast<    \
  |  |  929|  1.32M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|  1.32M|    static_cast<    \
  |  |  929|  1.32M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|  1.32M|    {
 1903|  1.32M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
 1828|  1.32M|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  928|  1.32M|    static_cast<    \
  |  |  929|  1.32M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1829|  1.32M|    {
 1830|  1.32M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|  1.32M|{
 2038|  1.32M|    const auto beg = handler.get_ctx().begin();
 2039|  1.32M|    detail::parse_format_string<false>(format, handler);
 2040|  1.32M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.32M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 98.1k, False: 1.22M]
  |  |  ------------------
  ------------------
 2041|  98.1k|        return unexpected(handler.error);
 2042|  98.1k|    }
 2043|  1.22M|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|  1.32M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 2021|  9.09M|    {
 2022|  9.09M|        return ctx.get();
 2023|  9.09M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1833|  9.09M|    {
 1834|  9.09M|        return ctx;
 1835|  9.09M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1906|  2.55M|    {
 1907|  2.55M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 2.55M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|  2.55M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
 1680|  1.32M|{
 1681|  1.32M|    auto arg = ctx.arg(id);
 1682|  1.32M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  1.32M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.32M]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  1.32M|    return arg;
 1686|  1.32M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1943|  1.32M|    {
 1944|  1.32M|        return parse_ctx.next_arg_id();
 1945|  1.32M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1984|  1.32M|    {
 1985|  1.32M|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|  1.32M|        set_arg_as_visited(arg_id);
 1987|       |
 1988|  1.32M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 1.32M]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|  1.32M|        auto specs = detail::format_specs{};
 1998|  1.32M|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|  1.32M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|  1.32M|            arg.type()};
 2001|       |
 2002|  1.32M|        begin = detail::parse_format_specs(begin, end, handler);
 2003|  1.32M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 1.32M]
  |  Branch (2003:29): [True: 0, False: 1.32M]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|  1.32M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.32M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.32M]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|  1.32M|        parse_ctx.advance_to(begin);
 2012|       |
 2013|  1.32M|        on_visit_scan_arg(
 2014|  1.32M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|  1.32M|                                           get_ctx().locale()},
 2016|  1.32M|            arg);
 2017|  1.32M|        return parse_ctx.begin();
 2018|  1.32M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
 1699|  1.32M|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|  1.32M|    {
 1701|  1.32M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1955|  1.32M|    {
 1956|  1.32M|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 1.32M]
  |  Branch (1956:23): [True: 0, False: 1.32M]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|  1.32M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  1.32M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  1.32M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.32M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 98.1k, False: 1.22M]
  |  |  ------------------
  ------------------
 1963|  98.1k|            on_error(r.error());
 1964|  98.1k|        }
 1965|  1.22M|        else {
 1966|  1.22M|            get_ctx().advance_to(*r);
 1967|  1.22M|        }
 1968|  1.32M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|  1.41M|{
 2053|  1.41M|    const auto argcount = args.size();
 2054|  1.41M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 307k, False: 1.11M]
  |  Branch (2054:60): [True: 307k, False: 0]
  ------------------
 2055|   307k|        auto arg = args.get(0);
 2056|   307k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   307k|    static_cast<    \
  |  |  929|   307k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|   307k|    }
 2058|       |
 2059|  1.11M|    auto handler = format_handler<true, CharT>{
 2060|  1.11M|        ranges::subrange<const CharT*>{source.data(),
 2061|  1.11M|                                       source.data() + source.size()},
 2062|  1.11M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.11M|    static_cast<    \
  |  |  929|  1.11M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.11M|    static_cast<    \
  |  |  929|  1.11M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|  1.11M|    return vscan_parse_format_string(format, handler);
 2064|  1.41M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|   461k|{
 1638|   461k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   461k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 461k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|   461k|    auto reader =
 1644|   461k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|   461k|            ranges::subrange<const CharT*>{source.data(),
 1646|   461k|                                           source.data() + source.size()},
 1647|   461k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|   461k|    static_cast<    \
  |  |  929|   461k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|   461k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|   461k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   461k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   461k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   461k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 29.4k, False: 431k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  29.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  29.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  29.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  29.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  29.4k|    }                                                  \
  |  |  |  | 3667|   461k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   431k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|   431k|    return ranges::distance(source.data(), it);
 1650|   461k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|   802k|{
 2053|   802k|    const auto argcount = args.size();
 2054|   802k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 157k, False: 645k]
  |  Branch (2054:60): [True: 157k, False: 0]
  ------------------
 2055|   157k|        auto arg = args.get(0);
 2056|   157k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   157k|    static_cast<    \
  |  |  929|   157k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|   157k|    }
 2058|       |
 2059|   645k|    auto handler = format_handler<true, CharT>{
 2060|   645k|        ranges::subrange<const CharT*>{source.data(),
 2061|   645k|                                       source.data() + source.size()},
 2062|   645k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   645k|    static_cast<    \
  |  |  929|   645k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   645k|    static_cast<    \
  |  |  929|   645k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   645k|    return vscan_parse_format_string(format, handler);
 2064|   802k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|  1.60M|{
 1625|  1.60M|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 1.28M, False: 315k]
  ------------------
 1626|  1.28M|        return false;
 1627|  1.28M|    }
 1628|   315k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 315k, False: 0]
  |  Branch (1628:39): [True: 315k, False: 0]
  ------------------
 1629|  1.60M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|   236k|{
 1638|   236k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   236k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 236k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|   236k|    auto reader =
 1644|   236k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|   236k|            ranges::subrange<const CharT*>{source.data(),
 1646|   236k|                                           source.data() + source.size()},
 1647|   236k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|   236k|    static_cast<    \
  |  |  929|   236k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|   236k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|   236k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   236k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   236k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   236k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 58.9k, False: 177k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  58.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  58.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  58.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  58.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  58.9k|    }                                                  \
  |  |  |  | 3667|   236k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   177k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|   177k|    return ranges::distance(source.data(), it);
 1650|   236k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1899|   645k|        : format_handler_base{argcount},
 1900|   645k|          parse_ctx{format},
 1901|   645k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   645k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   645k|    static_cast<    \
  |  |  929|   645k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   645k|    static_cast<    \
  |  |  929|   645k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|   645k|    {
 1903|   645k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1851|   645k|        : contiguous_ctx(source, args, loc)
 1852|   645k|    {
 1853|   645k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   645k|{
 2038|   645k|    const auto beg = handler.get_ctx().begin();
 2039|   645k|    detail::parse_format_string<false>(format, handler);
 2040|   645k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   645k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 196k, False: 448k]
  |  |  ------------------
  ------------------
 2041|   196k|        return unexpected(handler.error);
 2042|   196k|    }
 2043|   448k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   645k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2021|  4.12M|    {
 2022|  4.12M|        return ctx.get();
 2023|  4.12M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1856|  4.12M|    {
 1857|  4.12M|        return contiguous_ctx;
 1858|  4.12M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1906|  1.09M|    {
 1907|  1.09M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 1.09M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|  1.09M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   645k|{
 1681|   645k|    auto arg = ctx.arg(id);
 1682|   645k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   645k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 645k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   645k|    return arg;
 1686|   645k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1943|   645k|    {
 1944|   645k|        return parse_ctx.next_arg_id();
 1945|   645k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1984|   645k|    {
 1985|   645k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   645k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   645k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 645k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   645k|        auto specs = detail::format_specs{};
 1998|   645k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   645k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   645k|            arg.type()};
 2001|       |
 2002|   645k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   645k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 645k]
  |  Branch (2003:29): [True: 0, False: 645k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   645k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   645k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 645k]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|   645k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   645k|        on_visit_scan_arg(
 2014|   645k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   645k|                                           get_ctx().locale()},
 2016|   645k|            arg);
 2017|   645k|        return parse_ctx.begin();
 2018|   645k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1699|   645k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|   645k|    {
 1701|   645k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1955|   645k|    {
 1956|   645k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 645k]
  |  Branch (1956:23): [True: 0, False: 645k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   645k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   645k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   645k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   645k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 196k, False: 448k]
  |  |  ------------------
  ------------------
 1963|   196k|            on_error(r.error());
 1964|   196k|        }
 1965|   448k|        else {
 1966|   448k|            get_ctx().advance_to(*r);
 1967|   448k|        }
 1968|   645k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2072|   802k|{
 2073|   802k|    const auto argcount = args.size();
 2074|   802k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2074:9): [True: 157k, False: 644k]
  |  Branch (2074:60): [True: 157k, False: 0]
  ------------------
 2075|   157k|        auto arg = args.get(0);
 2076|   157k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   157k|    static_cast<    \
  |  |  929|   157k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2077|   157k|    }
 2078|       |
 2079|   644k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2079:9): [True: 0, False: 644k]
  ------------------
 2080|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2081|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|        return vscan_parse_format_string(format, handler);
 2084|      0|    }
 2085|       |
 2086|   644k|    SCN_UNLIKELY_ATTR
 2087|   644k|    {
 2088|   644k|        auto handler = format_handler<false, CharT>{
 2089|   644k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   644k|    static_cast<    \
  |  |  929|   644k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   644k|    static_cast<    \
  |  |  929|   644k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2090|   644k|        return vscan_parse_format_string(format, handler);
 2091|   644k|    }
 2092|   644k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|   236k|{
 1658|   236k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   236k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 236k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|   236k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|   236k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 236k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|   236k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|   236k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|   236k|    static_cast<    \
  |  |  929|   236k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|   236k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|   236k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   236k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   236k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   236k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 58.9k, False: 177k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  58.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  58.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  58.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  58.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  58.9k|    }                                                  \
  |  |  |  | 3667|   236k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   177k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|   177k|    return it.position();
 1675|   236k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
 1899|   644k|        : format_handler_base{argcount},
 1900|   644k|          parse_ctx{format},
 1901|   644k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   644k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   644k|    static_cast<    \
  |  |  929|   644k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   644k|    static_cast<    \
  |  |  929|   644k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|   644k|    {
 1903|   644k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
 1828|   644k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  928|   644k|    static_cast<    \
  |  |  929|   644k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1829|   644k|    {
 1830|   644k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   644k|{
 2038|   644k|    const auto beg = handler.get_ctx().begin();
 2039|   644k|    detail::parse_format_string<false>(format, handler);
 2040|   644k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   644k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 196k, False: 448k]
  |  |  ------------------
  ------------------
 2041|   196k|        return unexpected(handler.error);
 2042|   196k|    }
 2043|   448k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   644k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 2021|  4.11M|    {
 2022|  4.11M|        return ctx.get();
 2023|  4.11M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1833|  4.11M|    {
 1834|  4.11M|        return ctx;
 1835|  4.11M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1906|  1.09M|    {
 1907|  1.09M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 1.09M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|  1.09M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
 1680|   644k|{
 1681|   644k|    auto arg = ctx.arg(id);
 1682|   644k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   644k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 644k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   644k|    return arg;
 1686|   644k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1943|   644k|    {
 1944|   644k|        return parse_ctx.next_arg_id();
 1945|   644k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1984|   644k|    {
 1985|   644k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   644k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   644k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 644k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   644k|        auto specs = detail::format_specs{};
 1998|   644k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   644k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   644k|            arg.type()};
 2001|       |
 2002|   644k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   644k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 644k]
  |  Branch (2003:29): [True: 0, False: 644k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   644k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   644k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 644k]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|   644k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   644k|        on_visit_scan_arg(
 2014|   644k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   644k|                                           get_ctx().locale()},
 2016|   644k|            arg);
 2017|   644k|        return parse_ctx.begin();
 2018|   644k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
 1699|   644k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|   644k|    {
 1701|   644k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1955|   644k|    {
 1956|   644k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 644k]
  |  Branch (1956:23): [True: 0, False: 644k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   644k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   644k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   644k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   644k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 196k, False: 448k]
  |  |  ------------------
  ------------------
 1963|   196k|            on_error(r.error());
 1964|   196k|        }
 1965|   448k|        else {
 1966|   448k|            get_ctx().advance_to(*r);
 1967|   448k|        }
 1968|   644k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|   153k|{
 2099|   153k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   153k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|   153k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|   169k|{
 2099|   169k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   169k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|   169k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  78.9k|{
 2099|  78.9k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  78.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  78.9k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  78.8k|{
 2099|  78.8k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  78.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  78.8k|}

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1350|  3.27k|{
 1351|  3.27k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1352|       |
 1353|  3.27k|    if constexpr (sizeof(SourceCharT) == 1) {
 1354|       |        if constexpr (sizeof(DestCharT) == 2) {
 1355|       |            std::u32string tmp;
 1356|       |            transcode_to_string_impl_to32(src, tmp);
 1357|       |            return transcode_to_string_impl_32to16<false>(
 1358|       |                std::u32string_view{tmp}, dest);
 1359|       |        }
 1360|  3.27k|        else if constexpr (sizeof(DestCharT) == 4) {
 1361|  3.27k|            return transcode_to_string_impl_to32(src, dest);
 1362|  3.27k|        }
 1363|       |    }
 1364|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1365|       |        if constexpr (sizeof(DestCharT) == 1) {
 1366|       |            std::u32string tmp;
 1367|       |            transcode_to_string_impl_to32(src, tmp);
 1368|       |            return transcode_to_string_impl_32to8<false>(
 1369|       |                std::u32string_view{tmp}, dest);
 1370|       |        }
 1371|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1372|       |            return trasncode_to_string_impl_to32(src, dest);
 1373|       |        }
 1374|       |    }
 1375|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1376|       |        if constexpr (sizeof(DestCharT) == 1) {
 1377|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1378|       |        }
 1379|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1380|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1381|       |        }
 1382|       |    }
 1383|       |
 1384|  3.27k|    SCN_EXPECT(false);
  ------------------
  |  |  924|  3.27k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.27k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1385|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1386|  3.27k|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1243|  3.27k|{
 1244|  3.27k|    static_assert(sizeof(DestCharT) == 4);
 1245|       |
 1246|  3.27k|    auto it = src.begin();
 1247|  1.06M|    while (it != src.end()) {
  ------------------
  |  Branch (1247:12): [True: 1.06M, False: 3.27k]
  ------------------
 1248|  1.06M|        auto res = get_next_code_point(
 1249|  1.06M|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1250|  1.06M|                                                                 src.end()));
 1251|  1.06M|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|  1.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.30k, False: 1.05M]
  |  |  ------------------
  ------------------
 1252|  4.30k|            dest.push_back(DestCharT{0xfffd});
 1253|  4.30k|        }
 1254|  1.05M|        else {
 1255|  1.05M|            dest.push_back(res.value);
 1256|  1.05M|        }
 1257|  1.06M|        it = detail::make_string_view_iterator(src, res.iterator);
 1258|  1.06M|    }
 1259|  3.27k|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|  1.50M|{
 1169|  1.50M|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|  1.50M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.50M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|  1.50M|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|  1.50M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  1.50M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42.2k, False: 1.46M]
  |  |  ------------------
  ------------------
 1173|  42.2k|        return {get_start_for_next_code_point(input),
 1174|  42.2k|                detail::invalid_code_point};
 1175|  42.2k|    }
 1176|  1.46M|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|  1.46M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.17k, False: 1.45M]
  |  |  ------------------
  ------------------
 1177|  5.17k|        return {input.end(), detail::invalid_code_point};
 1178|  5.17k|    }
 1179|       |
 1180|  1.45M|    return {input.begin() + len,
 1181|  1.45M|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|  1.46M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  42.2k|{
 1155|  42.2k|    auto it = input.begin();
 1156|   341k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 332k, False: 9.13k]
  ------------------
 1157|   332k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 33.1k, False: 299k]
  ------------------
 1158|  33.1k|            break;
 1159|  33.1k|        }
 1160|   332k|    }
 1161|  42.2k|    return it;
 1162|  42.2k|}
_ZN3scn2v34impl11parse_errorC2ENS2_4codeE:
  807|  41.0M|    constexpr parse_error(code c) : m_code(c)
  808|  41.0M|    {
  809|  41.0M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  41.0M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  41.0M|    }
_ZN3scn2v34impleqENS1_11parse_errorES2_:
  822|  15.3M|    {
  823|  15.3M|        return a.m_code == b.m_code;
  824|  15.3M|    }
_ZN3scn2v34impl16clocale_restorerC2Ei:
 1714|  2.15M|    clocale_restorer(int cat) : m_category(cat)
 1715|  2.15M|    {
 1716|  2.15M|        const auto loc = std::setlocale(cat, nullptr);
 1717|  2.15M|        std::strcpy(m_locbuf, loc);
 1718|  2.15M|    }
_ZN3scn2v34impl16clocale_restorerD2Ev:
 1720|  2.15M|    {
 1721|       |        // Restore locale to what it was before
 1722|  2.15M|        std::setlocale(m_category, m_locbuf);
 1723|  2.15M|    }
_ZN3scn2v34impl25set_clocale_classic_guardC2Ei:
 1743|  2.15M|    set_clocale_classic_guard(int cat) : m_restorer(cat)
 1744|  2.15M|    {
 1745|  2.15M|        std::setlocale(cat, "C");
 1746|  2.15M|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2924|  3.72M|    {
 2925|  3.72M|        return m_msg == nullptr;
 2926|  3.72M|    }
_ZN3scn2v34impl17float_reader_baseC2Ej:
 3633|  3.69M|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|  25.5M|{
  458|  25.5M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  25.5M|        static_cast<unsigned char>(ch))];
  460|  25.5M|}
_ZN3scn2v34impl13is_ascii_charEc:
  468|   214k|{
  469|   214k|    return static_cast<unsigned char>(ch) <= 127;
  470|   214k|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|  5.83M|{
  539|  5.83M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  5.83M|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|  17.4M|{
  784|  17.4M|    return e != eof_error::good;
  785|  17.4M|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  48.4k|{
  798|  48.4k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|  48.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  48.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  48.4k|    return scan_error{scan_error::end_of_range, "EOF"};
  800|  48.4k|}
_ZN3scn2v34impl20make_eof_parse_errorENS1_9eof_errorE:
  844|   230k|{
  845|   230k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|   230k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   230k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|   230k|    return parse_error::eof;
  847|   230k|}
_ZN3scn2v34impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|  5.41M|{
  854|  5.41M|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 5.41M]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|  5.41M|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 84.5k, False: 5.33M]
  ------------------
  859|  84.5k|        return scan_error{scan_error::end_of_range, "EOF"};
  860|  84.5k|    }
  861|       |
  862|  5.33M|    return scan_error{code, msg};
  863|  5.41M|}
_ZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  5.41M|{
  868|  5.41M|    return [code, msg](parse_error err) {
  869|  5.41M|        return make_scan_error_from_parse_error(err, code, msg);
  870|  5.41M|    };
  871|  5.41M|}
_ZN3scn2v34impl17fast_streq_nocaseEPKcS3_m:
 2208|  4.10M|{
 2209|  4.10M|    unsigned char running_diff{0};
 2210|  15.4M|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2210:24): [True: 11.3M, False: 4.10M]
  ------------------
 2211|  11.3M|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2212|  11.3M|    }
 2213|  4.10M|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2213:12): [True: 117k, False: 3.98M]
  |  Branch (2213:33): [True: 23.1k, False: 3.96M]
  ------------------
 2214|  4.10M|}
_ZN3scn2v34impl11char_to_intEc:
 3111|  30.7M|{
 3112|  30.7M|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3113|  30.7M|}
_ZN3scn2v34impl11char_to_intEw:
 3115|  4.79M|{
 3116|  4.79M|#if WCHAR_MIN < 0
 3117|  4.79M|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3117:9): [True: 4.77M, False: 20.3k]
  |  Branch (3117:20): [True: 2.98M, False: 1.78M]
  ------------------
 3118|       |#else
 3119|       |    if (ch <= 255) {
 3120|       |#endif
 3121|  2.98M|        return char_to_int(static_cast<char>(ch));
 3122|  2.98M|    }
 3123|  1.80M|    return 255;
 3124|  4.79M|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 5996|  3.13M|{
 5997|  3.13M|    if (specs.width != 0) {
  ------------------
  |  Branch (5997:9): [True: 0, False: 3.13M]
  ------------------
 5998|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (5998:13): [True: 0, False: 0]
  ------------------
 5999|      0|            return {scan_error::invalid_scanned_value,
 6000|      0|                    "Scanned value too narrow, width did not exceed what "
 6001|      0|                    "was specified in the format string"};
 6002|      0|        }
 6003|      0|    }
 6004|  3.13M|    if (specs.precision != 0) {
  ------------------
  |  Branch (6004:9): [True: 0, False: 3.13M]
  ------------------
 6005|      0|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6005:13): [True: 0, False: 0]
  ------------------
 6006|      0|            return {scan_error::invalid_scanned_value,
 6007|      0|                    "Scanned value too wide, width exceeded the specified "
 6008|      0|                    "precision"};
 6009|      0|        }
 6010|      0|    }
 6011|  3.13M|    return {};
 6012|  3.13M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  4.59M|    {
  304|  4.59M|        ranges::advance(x, n);
  305|  4.59M|        return x;
  306|  4.59M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  4.59M|    {
  268|  4.59M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  4.59M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  4.59M|    {
  151|  4.59M|        i += n;
  152|  4.59M|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  5.43M|    {
  108|  5.43M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  5.43M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  5.43M|    {
   87|  5.43M|        return s - i;
   88|  5.43M|    }
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  2.88M|    {
  304|  2.88M|        ranges::advance(x, n);
  305|  2.88M|        return x;
  306|  2.88M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  2.88M|    {
  268|  2.88M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  2.88M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  2.88M|    {
  151|  2.88M|        i += n;
  152|  2.88M|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   829k|    {
  108|   829k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   829k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   829k|    {
   87|   829k|        return s - i;
   88|   829k|    }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|  1.83M|{
  981|       |    if constexpr (ranges::contiguous_range<Range> &&
  982|       |                  ranges::sized_range<Range>) {
  983|       |        return true;
  984|       |    }
  985|       |    else if constexpr (std::is_same_v<
  986|       |                           ranges::const_iterator_t<Range>,
  987|       |                           typename detail::basic_scan_buffer<
  988|  1.83M|                               detail::char_t<Range>>::forward_iterator>) {
  989|  1.83M|        auto beg = r.begin();
  990|  1.83M|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 1.83M, False: 0]
  ------------------
  991|  1.83M|            return false;
  992|  1.83M|        }
  993|       |        if constexpr (ranges::common_range<Range>) {
  994|       |            return beg.contiguous_segment().end() ==
  995|       |                   ranges::end(r).contiguous_segment().end();
  996|       |        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|       |    }
 1005|       |    else {
 1006|       |        return false;
 1007|       |    }
 1008|  1.83M|}
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  48.5M|    {
  763|  48.5M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  48.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  48.5M|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1844|  4.83M|{
 1845|  4.83M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  4.83M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.83M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1846|       |
 1847|       |    if constexpr (ranges::sized_range<Range>) {
 1848|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1849|       |        if (sz < count) {
 1850|       |            return unexpected(eof_error::eof);
 1851|       |        }
 1852|       |
 1853|       |        return ranges::next(range.begin(), count);
 1854|       |    }
 1855|  4.83M|    else {
 1856|  4.83M|        auto it = range.begin();
 1857|  4.83M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1857:13): [True: 2.98M, False: 1.85M]
  ------------------
 1858|  2.98M|            return ranges::next(it, count);
 1859|  2.98M|        }
 1860|       |
 1861|  7.37M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1861:36): [True: 5.56M, False: 1.81M]
  ------------------
 1862|  5.56M|            if (it == range.end()) {
  ------------------
  |  Branch (1862:17): [True: 39.8k, False: 5.52M]
  ------------------
 1863|  39.8k|                return unexpected(eof_error::eof);
 1864|  39.8k|            }
 1865|  5.56M|        }
 1866|       |
 1867|  1.81M|        return it;
 1868|  1.85M|    }
 1869|  4.83M|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1094|  4.83M|{
 1095|       |    if constexpr (ranges::sized_range<Range>) {
 1096|       |        return r.size();
 1097|       |    }
 1098|       |    else if constexpr (std::is_same_v<
 1099|       |                           ranges::const_iterator_t<Range>,
 1100|       |                           typename detail::basic_scan_buffer<
 1101|  4.83M|                               detail::char_t<Range>>::forward_iterator>) {
 1102|       |        if constexpr (ranges::common_range<Range>) {
 1103|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|       |        }
 1105|  4.83M|        else {
 1106|  4.83M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1106:17): [True: 4.83M, False: 0]
  ------------------
 1107|  4.83M|                return static_cast<size_t>(
 1108|  4.83M|                    r.begin().parent()->chars_available() -
 1109|  4.83M|                    r.begin().position());
 1110|  4.83M|            }
 1111|      0|            return r.begin().contiguous_segment().size();
 1112|  4.83M|        }
 1113|       |    }
 1114|       |    else {
 1115|       |        return 0;
 1116|       |    }
 1117|  4.83M|}
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  4.44M|        : m_fptr([](storage fn,
  743|  4.44M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.44M|              cvref<T> obj = *get<T>(fn);
  745|  4.44M|              if constexpr (std::is_void_v<R>) {
  746|  4.44M|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.44M|              }
  748|  4.44M|              else {
  749|  4.44M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.44M|              }
  751|  4.44M|          }),
  752|  4.44M|          m_storage(std::addressof(f))
  753|  4.44M|    {
  754|  4.44M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEcE_clESK_c:
  743|  24.2M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  24.2M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  24.2M|              else {
  749|  24.2M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  24.2M|              }
  751|  24.2M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  24.2M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  24.2M|        else if constexpr (std::is_object_v<T>) {
  688|  24.2M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  24.2M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  4.44M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  4.44M|        {
  662|  4.44M|        }
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|  13.4M|    {
  763|  13.4M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  13.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  13.4M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  3.39M|        : m_fptr([](storage fn,
  743|  3.39M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.39M|              cvref<T> obj = *get<T>(fn);
  745|  3.39M|              if constexpr (std::is_void_v<R>) {
  746|  3.39M|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.39M|              }
  748|  3.39M|              else {
  749|  3.39M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.39M|              }
  751|  3.39M|          }),
  752|  3.39M|          m_storage(std::addressof(f))
  753|  3.39M|    {
  754|  3.39M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|  6.14M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.14M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  6.14M|              else {
  749|  6.14M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.14M|              }
  751|  6.14M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  6.14M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  6.14M|        else if constexpr (std::is_object_v<T>) {
  688|  6.14M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  6.14M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  3.39M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  3.39M|        {
  662|  3.39M|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6025|  1.32M|    {
 6026|  1.32M|        const bool need_skipped_width =
 6027|  1.32M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 0, False: 1.32M]
  |  Branch (6027:33): [True: 0, False: 1.32M]
  ------------------
 6028|  1.32M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|  1.32M|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 0, False: 1.32M]
  ------------------
 6032|  1.32M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 0, False: 1.32M]
  ------------------
 6033|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6034|      0|                             need_skipped_width);
 6035|      0|        }
 6036|  1.32M|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 1.32M, False: 0]
  |  Branch (6036:56): [True: 1.32M, False: 0]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|  1.32M|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 0, False: 1.32M]
  ------------------
 6040|      0|                auto max_width_view = take_width(rng, specs.precision);
 6041|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|      0|                                  .transform_error(make_eof_scan_error));
 6043|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|      0|            }
 6045|  2.63M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|  1.32M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.32M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.32M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.32M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 17.2k, False: 1.30M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  17.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  17.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  17.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  17.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  17.2k|    }                                                  \
  |  |  |  | 3667|  1.32M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.30M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|  2.63M|                            make_eof_scan_error));
 6047|       |
 6048|  2.63M|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 0, False: 1.30M]
  ------------------
 6049|      0|                return result_type{
 6050|      0|                    it,
 6051|      0|                    calculate_text_width(make_contiguous_buffer(
 6052|      0|                                             ranges::subrange{rng.begin(), it})
 6053|      0|                                             .view())};
 6054|      0|            }
 6055|  1.30M|            return result_type{it, 0};
 6056|  2.63M|        }
 6057|       |
 6058|      0|        return result_type{rng.begin(), 0};
 6059|  1.32M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1963|  3.55M|{
 1964|  3.55M|    return read_until_code_unit(range, std::not_fn(pred));
 1965|  3.55M|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1944|  3.55M|{
 1945|       |    if constexpr (ranges::common_range<Range>) {
 1946|       |        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|  3.55M|    else {
 1949|  3.55M|        auto first = range.begin();
 1950|  19.5M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1950:16): [True: 19.5M, False: 31.4k]
  ------------------
 1951|  19.5M|            if (pred(*first)) {
  ------------------
  |  Branch (1951:17): [True: 3.51M, False: 16.0M]
  ------------------
 1952|  3.51M|                return first;
 1953|  3.51M|            }
 1954|  19.5M|        }
 1955|  31.4k|        return first;
 1956|  3.55M|    }
 1957|  3.55M|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  3.16M|    {
  108|  3.16M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  3.16M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  3.16M|    {
   94|  3.16M|        iter_difference_t<I> counter{0};
   95|  31.7M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 28.5M, False: 3.16M]
  ------------------
   96|  28.5M|            ++i;
   97|  28.5M|            ++counter;
   98|  28.5M|        }
   99|  3.16M|        return counter;
  100|  3.16M|    }
_ZZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|  5.41M|    return [code, msg](parse_error err) {
  869|  5.41M|        return make_scan_error_from_parse_error(err, code, msg);
  870|  5.41M|    };
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1767|   673k|    {
 1768|   673k|        auto stdloc = loc.get<std::locale>();
 1769|   673k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1770|   673k|        grouping = numpunct.grouping();
 1771|   673k|        thousands_sep =
 1772|   673k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1772:13): [True: 0, False: 673k]
  ------------------
 1773|   673k|        decimal_point = numpunct.decimal_point();
 1774|   673k|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1704|   673k|{
 1705|   673k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1705:9): [True: 673k, False: 0]
  ------------------
 1706|   673k|        return std::use_facet<Facet>(stdloc);
 1707|   673k|    }
 1708|      0|    stdloc = std::locale(stdloc, new Facet{});
 1709|      0|    return std::use_facet<Facet>(stdloc);
 1710|   673k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1833|  5.18M|{
 1834|  5.18M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 23.3k, False: 5.15M]
  |  |  ------------------
  ------------------
 1835|  23.3k|        return unexpected(e);
 1836|  23.3k|    }
 1837|       |
 1838|  5.15M|    return ranges::next(range.begin());
 1839|  5.18M|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  7.52M|{
  950|  7.52M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  7.52M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 45.9k, False: 7.47M]
  |  |  ------------------
  ------------------
  951|  45.9k|        return eof_error::eof;
  952|  45.9k|    }
  953|  7.47M|    return eof_error::good;
  954|  7.52M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  10.6M|{
  944|  10.6M|    return is_range_eof(r.begin(), r.end());
  945|  10.6M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  10.6M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  10.6M|    {
  937|  10.6M|        return begin == end;
  938|  10.6M|    }
  939|  10.6M|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|  5.15M|    {
  296|  5.15M|        ++x;
  297|  5.15M|        return x;
  298|  5.15M|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3129|  1.98M|{
 3130|  1.98M|    auto r = read_one_of_code_unit(range, "+-");
 3131|  1.98M|    if (!r) {
  ------------------
  |  Branch (3131:9): [True: 1.53M, False: 450k]
  ------------------
 3132|  1.53M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3132:13): [True: 1.53M, False: 309]
  ------------------
 3133|  1.53M|            return std::pair{range.begin(), sign_type::default_sign};
 3134|  1.53M|        }
 3135|    309|        return unexpected(eof_error::eof);
 3136|  1.53M|    }
 3137|       |
 3138|   450k|    auto& it = *r;
 3139|   450k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3139:9): [True: 183k, False: 267k]
  ------------------
 3140|   183k|        return std::pair{it, sign_type::minus_sign};
 3141|   183k|    }
 3142|   267k|    return std::pair{it, sign_type::plus_sign};
 3143|   450k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2260|  3.46M|{
 2261|  3.46M|    auto it = read_code_unit(range);
 2262|  3.46M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  3.46M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.8k, False: 3.44M]
  |  |  ------------------
  ------------------
 2263|  13.8k|        return unexpected(make_eof_parse_error(it.error()));
 2264|  13.8k|    }
 2265|       |
 2266|  6.52M|    for (auto ch : str) {
  ------------------
  |  Branch (2266:18): [True: 6.52M, False: 2.82M]
  ------------------
 2267|  6.52M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2267:13): [True: 622k, False: 5.89M]
  ------------------
 2268|   622k|            return *it;
 2269|   622k|        }
 2270|  6.52M|    }
 2271|       |
 2272|  2.82M|    return unexpected(parse_error::error);
 2273|  3.44M|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2219|  4.83M|{
 2220|  4.83M|    using char_type = detail::char_t<Range>;
 2221|       |
 2222|       |    if constexpr (ranges::contiguous_range<Range> &&
 2223|       |                  std::is_same_v<char_type, char>) {
 2224|       |        if (range.size() < str.size()) {
 2225|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2226|       |        }
 2227|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2228|       |            return unexpected(parse_error::error);
 2229|       |        }
 2230|       |        return ranges::next(range.begin(), str.size());
 2231|       |    }
 2232|  4.83M|    else {
 2233|  4.83M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|  4.83M|            if (ch < 'A' || ch > 'Z') {
 2235|  4.83M|                return ch;
 2236|  4.83M|            }
 2237|  4.83M|            return static_cast<char_type>(ch +
 2238|  4.83M|                                          static_cast<char_type>('a' - 'A'));
 2239|  4.83M|        };
 2240|       |
 2241|  4.83M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|  4.83M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.83M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.83M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.83M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 39.8k, False: 4.79M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  39.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  39.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  39.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  39.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  39.8k|    }                                                  \
  |  |  |  | 3667|  4.83M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.79M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2242|  4.79M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2243|  4.79M|                        .transform_error(make_eof_parse_error));
 2244|       |
 2245|  4.79M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  4.79M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.65M, False: 147k]
  |  |  ------------------
  ------------------
 2246|  4.79M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2247|  4.79M|                    return ascii_tolower(a) ==
 2248|  4.79M|                           static_cast<detail::char_t<Range>>(b);
 2249|  4.79M|                }))) {
 2250|  4.65M|            return unexpected(parse_error::error);
 2251|  4.65M|        }
 2252|       |
 2253|   147k|        return it;
 2254|  4.79M|    }
 2255|  4.83M|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlcE_clEc:
 2233|  5.52M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|  5.52M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2234:17): [True: 5.03M, False: 492k]
  |  Branch (2234:29): [True: 408k, False: 84.5k]
  ------------------
 2235|  5.43M|                return ch;
 2236|  5.43M|            }
 2237|  84.5k|            return static_cast<char_type>(ch +
 2238|  84.5k|                                          static_cast<char_type>('a' - 'A'));
 2239|  5.52M|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2134|  1.71M|{
 2135|  1.71M|    auto it = read_code_unit(range);
 2136|  1.71M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.71M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.56k, False: 1.70M]
  |  |  ------------------
  ------------------
 2137|  9.56k|        return unexpected(make_eof_parse_error(it.error()));
 2138|  9.56k|    }
 2139|       |
 2140|  1.70M|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  1.70M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.38M, False: 320k]
  |  |  ------------------
  ------------------
 2141|  1.70M|                     static_cast<detail::char_t<Range>>(ch))) {
 2142|  1.38M|        return unexpected(parse_error::error);
 2143|  1.38M|    }
 2144|       |
 2145|   320k|    return *it;
 2146|  1.70M|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1983|  3.54M|{
 1984|  3.54M|    auto it = read_while_code_unit(range, pred);
 1985|  3.54M|    if (it == range.begin()) {
  ------------------
  |  Branch (1985:9): [True: 1.44M, False: 2.10M]
  ------------------
 1986|  1.44M|        return unexpected(parse_error::error);
 1987|  1.44M|    }
 1988|  2.10M|    return it;
 1989|  3.54M|}
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1608|  1.63M|    {
 1609|  1.63M|        using value_t = ranges::range_value_t<Range>;
 1610|       |
 1611|       |        if constexpr (ranges::borrowed_range<Range> &&
 1612|       |                      ranges::contiguous_range<Range> &&
 1613|       |                      ranges::sized_range<Range>) {
 1614|       |            m_storage.reset();
 1615|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1616|       |        }
 1617|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1618|       |                                          std::basic_string<CharT>>) {
 1619|       |            m_storage.emplace(SCN_FWD(range));
 1620|       |            m_view = string_view_type{*m_storage};
 1621|       |        }
 1622|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1623|       |                                          typename detail::basic_scan_buffer<
 1624|       |                                              value_t>::forward_iterator> &&
 1625|  1.63M|                           ranges::common_range<Range>) {
 1626|  1.63M|            auto beg_seg = range.begin().contiguous_segment();
 1627|  1.63M|            auto end_seg = range.end().contiguous_segment();
 1628|  1.63M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|  1.63M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 223k, False: 1.41M]
  |  |  ------------------
  ------------------
 1629|  1.63M|                             detail::to_address(end_seg.end()))) {
 1630|   223k|                auto& str = m_storage.emplace();
 1631|   223k|                str.reserve(range.end().position() - range.begin().position());
 1632|   223k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1633|   223k|                m_view = string_view_type{str};
 1634|   223k|                return;
 1635|   223k|            }
 1636|       |
 1637|  1.41M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1638|  1.41M|                                                            end_seg.data());
 1639|  1.41M|            m_storage.reset();
 1640|       |        }
 1641|       |        else {
 1642|       |            auto& str = m_storage.emplace();
 1643|       |            if constexpr (ranges::sized_range<Range>) {
 1644|       |                str.reserve(range.size());
 1645|       |            }
 1646|       |            if constexpr (ranges::common_range<Range>) {
 1647|       |                std::copy(ranges::begin(range), ranges::end(range),
 1648|       |                          std::back_inserter(str));
 1649|       |            }
 1650|       |            else {
 1651|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1652|       |                     ++it) {
 1653|       |                    str.push_back(*it);
 1654|       |                }
 1655|       |            }
 1656|       |            m_view = string_view_type{str};
 1657|       |        }
 1658|  1.63M|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1569|  11.1M|    {
 1570|  11.1M|        return m_view;
 1571|  11.1M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1559|  6.73M|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6067|  1.21M|    {
 6068|  1.21M|        const bool need_skipped_width =
 6069|  1.21M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6069:13): [True: 0, False: 1.21M]
  |  Branch (6069:33): [True: 0, False: 1.21M]
  ------------------
 6070|  1.21M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6071|       |
 6072|  1.21M|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6072:13): [True: 0, False: 1.21M]
  ------------------
 6073|  1.21M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6073:13): [True: 0, False: 1.21M]
  ------------------
 6074|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6074:17): [True: 0, False: 0]
  ------------------
 6075|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6075:17): [True: 0, False: 0]
  ------------------
 6076|      0|                return result_type{rng.begin(), 0};
 6077|      0|            }
 6078|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6079|      0|                             specs.fill, need_skipped_width);
 6080|      0|        }
 6081|  1.21M|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6081:13): [True: 1.21M, False: 0]
  ------------------
 6082|  1.21M|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6082:13): [True: 0, False: 1.21M]
  ------------------
 6083|  1.21M|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6083:15): [True: 0, False: 0]
  |  Branch (6083:35): [True: 0, False: 0]
  ------------------
 6084|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6084:15): [True: 0, False: 0]
  ------------------
 6085|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6085:15): [True: 0, False: 0]
  ------------------
 6086|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                const auto initial_width =
 6088|      0|                    specs.precision - prefix_width - value_width;
 6089|      0|                auto max_width_view = take_width(rng, initial_width);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6093|      0|            }
 6094|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|      0|                            make_eof_scan_error));
 6096|       |
 6097|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|      0|            return result_type{it, 0};
 6105|      0|        }
 6106|  1.21M|        return result_type{rng.begin(), 0};
 6107|  1.21M|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1833|  2.32M|{
 1834|  2.32M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.32M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.49k, False: 2.32M]
  |  |  ------------------
  ------------------
 1835|  5.49k|        return unexpected(e);
 1836|  5.49k|    }
 1837|       |
 1838|  2.32M|    return ranges::next(range.begin());
 1839|  2.32M|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|  4.35M|{
  950|  4.35M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  4.35M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 23.6k, False: 4.33M]
  |  |  ------------------
  ------------------
  951|  23.6k|        return eof_error::eof;
  952|  23.6k|    }
  953|  4.33M|    return eof_error::good;
  954|  4.35M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|  4.35M|{
  944|  4.35M|    return is_range_eof(r.begin(), r.end());
  945|  4.35M|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|  4.35M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  4.35M|    {
  937|  4.35M|        return begin == end;
  938|  4.35M|    }
  939|  4.35M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  2.32M|    {
  296|  2.32M|        ++x;
  297|  2.32M|        return x;
  298|  2.32M|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3129|  1.59M|{
 3130|  1.59M|    auto r = read_one_of_code_unit(range, "+-");
 3131|  1.59M|    if (!r) {
  ------------------
  |  Branch (3131:9): [True: 1.23M, False: 361k]
  ------------------
 3132|  1.23M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3132:13): [True: 1.23M, False: 102]
  ------------------
 3133|  1.23M|            return std::pair{range.begin(), sign_type::default_sign};
 3134|  1.23M|        }
 3135|    102|        return unexpected(eof_error::eof);
 3136|  1.23M|    }
 3137|       |
 3138|   361k|    auto& it = *r;
 3139|   361k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3139:9): [True: 157k, False: 203k]
  ------------------
 3140|   157k|        return std::pair{it, sign_type::minus_sign};
 3141|   157k|    }
 3142|   203k|    return std::pair{it, sign_type::plus_sign};
 3143|   361k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2260|  1.85M|{
 2261|  1.85M|    auto it = read_code_unit(range);
 2262|  1.85M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.85M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.42k, False: 1.84M]
  |  |  ------------------
  ------------------
 2263|  2.42k|        return unexpected(make_eof_parse_error(it.error()));
 2264|  2.42k|    }
 2265|       |
 2266|  3.46M|    for (auto ch : str) {
  ------------------
  |  Branch (2266:18): [True: 3.46M, False: 1.44M]
  ------------------
 2267|  3.46M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2267:13): [True: 399k, False: 3.06M]
  ------------------
 2268|   399k|            return *it;
 2269|   399k|        }
 2270|  3.46M|    }
 2271|       |
 2272|  1.44M|    return unexpected(parse_error::error);
 2273|  1.84M|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2219|  4.13M|{
 2220|  4.13M|    using char_type = detail::char_t<Range>;
 2221|       |
 2222|       |    if constexpr (ranges::contiguous_range<Range> &&
 2223|  4.13M|                  std::is_same_v<char_type, char>) {
 2224|  4.13M|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2224:13): [True: 38.3k, False: 4.10M]
  ------------------
 2225|  38.3k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2226|  38.3k|        }
 2227|  4.10M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2227:13): [True: 3.96M, False: 140k]
  ------------------
 2228|  3.96M|            return unexpected(parse_error::error);
 2229|  3.96M|        }
 2230|   140k|        return ranges::next(range.begin(), str.size());
 2231|       |    }
 2232|       |    else {
 2233|       |        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|       |            if (ch < 'A' || ch > 'Z') {
 2235|       |                return ch;
 2236|       |            }
 2237|       |            return static_cast<char_type>(ch +
 2238|       |                                          static_cast<char_type>('a' - 'A'));
 2239|       |        };
 2240|       |
 2241|       |        SCN_TRY(it, read_exactly_n_code_units(
 2242|       |                        range, static_cast<std::ptrdiff_t>(str.size()))
 2243|       |                        .transform_error(make_eof_parse_error));
 2244|       |
 2245|       |        if (SCN_UNLIKELY(!std::equal(
 2246|       |                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2247|       |                    return ascii_tolower(a) ==
 2248|       |                           static_cast<detail::char_t<Range>>(b);
 2249|       |                }))) {
 2250|       |            return unexpected(parse_error::error);
 2251|       |        }
 2252|       |
 2253|       |        return it;
 2254|       |    }
 2255|  4.13M|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2134|   478k|{
 2135|   478k|    auto it = read_code_unit(range);
 2136|   478k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   478k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.07k, False: 475k]
  |  |  ------------------
  ------------------
 2137|  3.07k|        return unexpected(make_eof_parse_error(it.error()));
 2138|  3.07k|    }
 2139|       |
 2140|   475k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   475k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 392k, False: 83.0k]
  |  |  ------------------
  ------------------
 2141|   475k|                     static_cast<detail::char_t<Range>>(ch))) {
 2142|   392k|        return unexpected(parse_error::error);
 2143|   392k|    }
 2144|       |
 2145|  83.0k|    return *it;
 2146|   475k|}
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1490|  6.00M|    {
 1491|  6.00M|        return sv;
 1492|  6.00M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1963|   896k|{
 1964|   896k|    return read_until_code_unit(range, std::not_fn(pred));
 1965|   896k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1944|   896k|{
 1945|   896k|    if constexpr (ranges::common_range<Range>) {
 1946|   896k|        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|       |    else {
 1949|       |        auto first = range.begin();
 1950|       |        for (; first != range.end(); ++first) {
 1951|       |            if (pred(*first)) {
 1952|       |                return first;
 1953|       |            }
 1954|       |        }
 1955|       |        return first;
 1956|       |    }
 1957|   896k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2939|  1.56M|{
 2940|  1.56M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 1.56M, False: 0]
  ------------------
 2941|  1.56M|        auto it = read_while_classic_space(range);
 2942|  1.56M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|  1.56M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.56M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.5k, False: 1.55M]
  |  |  ------------------
  ------------------
 2944|  13.5k|            return unexpected(e);
 2945|  13.5k|        }
 2946|       |
 2947|  1.55M|        return it;
 2948|  1.56M|    }
 2949|       |
 2950|      0|    return read_while_classic_space(range);
 2951|  1.56M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2104|  1.56M|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|  1.56M|                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|  1.56M|        auto buf = make_contiguous_buffer(range);
 2109|  1.56M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|  1.56M|        return ranges::next(range.begin(),
 2111|  1.56M|                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|       |    else {
 2114|       |        auto it = range.begin();
 2115|       |
 2116|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|       |            auto seg = get_contiguous_beginning(range);
 2118|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|       |                seg_it != seg.end()) {
 2120|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|       |            }
 2122|       |            ranges::advance(it, seg.size());
 2123|       |        }
 2124|       |
 2125|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|       |            return detail::is_cp_space(cp);
 2127|       |        });
 2128|       |    }
 2129|  1.56M|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1670|  1.56M|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|  1.56M|                  ranges::sized_range<Range>) {
 1674|  1.56M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  1.56M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1675|       |    }
 1676|       |    else {
 1677|       |        return contiguous_range_factory{SCN_FWD(range)};
 1678|       |    }
 1679|  1.56M|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1476|  1.56M|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1477|  1.56M|    {
 1478|  1.56M|    }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  4.89M|    {
  304|  4.89M|        ranges::advance(x, n);
  305|  4.89M|        return x;
  306|  4.89M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  6.52M|    {
  268|  6.52M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  6.52M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  6.52M|    {
  181|  31.0M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 24.5M, False: 6.52M]
  ------------------
  182|  24.5M|            ++i;
  183|  24.5M|        }
  184|  6.52M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6181|   427k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|   427k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|   427k|            auto rd = make_reader<T, char_type>();
 6195|   427k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   427k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 427k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|   427k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 427k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|   427k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|   427k|                return impl(rd, range, value);
 6202|   427k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   427k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3028|  2.43M|    {
 3029|  2.43M|        reader_error_handler eh{};
 3030|  2.43M|        get_derived().check_specs_impl(specs, eh);
 3031|  2.43M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  2.43M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.43M]
  |  |  ------------------
  ------------------
 3032|      0|            return {scan_error::invalid_format_string, eh.m_msg};
 3033|      0|        }
 3034|  2.43M|        return {};
 3035|  2.43M|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3039|  2.43M|    {
 3040|  2.43M|        return static_cast<Derived&>(*this);
 3041|  2.43M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4133|  2.43M|    {
 4134|  2.43M|        detail::check_float_type_specs(specs, eh);
 4135|  2.43M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|   427k|    {
 6113|   427k|        const bool need_skipped_width =
 6114|   427k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 427k]
  |  Branch (6114:33): [True: 0, False: 427k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   427k|        auto it = rng.begin();
 6118|   427k|        std::ptrdiff_t prefix_width = 0;
 6119|   427k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 427k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   427k|        else {
 6127|   427k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   427k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   427k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   427k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   427k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.15k, False: 422k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  5.15k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  5.15k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  5.15k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  5.15k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  5.15k|    }                                                  \
  |  |  |  | 3667|   427k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   422k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   422k|            std::tie(it, prefix_width) = prefix_result;
 6129|   422k|        }
 6130|   422k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   422k|        std::ptrdiff_t value_width = 0;
 6134|   422k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 422k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   422k|        else {
 6150|   422k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   422k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   422k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   422k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 27.5k, False: 394k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  27.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  27.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  27.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  27.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  27.5k|    }                                                  \
  |  | 3667|   422k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   422k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|   394k|                                             specs, value, loc));
 6152|       |
 6153|   394k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 394k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|   394k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|   394k|        std::ptrdiff_t postfix_width = 0;
 6162|   394k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 390k, False: 4.19k]
  ------------------
 6163|   390k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   390k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   390k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   390k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   390k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 390k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   390k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   390k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   390k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|   390k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|   390k|                                 value_width));
 6167|   390k|            std::tie(it, postfix_width) = postfix_result;
 6168|   390k|        }
 6169|       |
 6170|   394k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|   394k|                                                 value_width, postfix_width);
 6172|   394k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 394k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|   394k|        return it;
 6177|   394k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3023|  5.62M|    {
 3024|  5.62M|        return true;
 3025|  5.62M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4205|  2.40M|    {
 4206|  2.40M|        unsigned options{};
 4207|  2.40M|        if (specs.localized) {
  ------------------
  |  Branch (4207:13): [True: 673k, False: 1.73M]
  ------------------
 4208|   673k|            options |= float_reader_base::allow_thsep;
 4209|   673k|        }
 4210|       |
 4211|  2.40M|        SCN_GCC_COMPAT_PUSH
 4212|  2.40M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4213|       |
 4214|  2.40M|        switch (specs.type) {
 4215|   364k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4215:13): [True: 364k, False: 2.04M]
  ------------------
 4216|   364k|                return options | float_reader_base::allow_fixed;
 4217|       |
 4218|  57.6k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4218:13): [True: 57.6k, False: 2.35M]
  ------------------
 4219|  57.6k|                return options | float_reader_base::allow_scientific;
 4220|       |
 4221|   733k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4221:13): [True: 733k, False: 1.67M]
  ------------------
 4222|   733k|                return options | float_reader_base::allow_hex;
 4223|       |
 4224|   579k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4224:13): [True: 579k, False: 1.82M]
  ------------------
 4225|   579k|                return options | float_reader_base::allow_scientific |
 4226|   579k|                       float_reader_base::allow_fixed;
 4227|       |
 4228|   673k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4228:13): [True: 673k, False: 1.73M]
  ------------------
 4229|   673k|                return options | float_reader_base::allow_scientific |
 4230|   673k|                       float_reader_base::allow_fixed |
 4231|   673k|                       float_reader_base::allow_hex;
 4232|       |
 4233|      0|            default:
  ------------------
  |  Branch (4233:13): [True: 0, False: 2.40M]
  ------------------
 4234|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4235|  2.40M|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4236|  2.40M|        }
 4237|       |
 4238|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4239|  2.40M|    }
_ZN3scn2v34impl12float_readerIcEC2Ej:
 3648|  2.40M|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2Ev:
 1758|  3.36M|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIcEC2Ev:
 1519|  6.73M|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIcE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3679|  1.03M|    {
 3680|  1.03M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.03M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.03M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3681|       |
 3682|  1.03M|        const std::ptrdiff_t sign_len =
 3683|  1.03M|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3683:13): [True: 240k, False: 798k]
  ------------------
 3684|       |
 3685|  1.03M|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3668|  1.03M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.03M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.03M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 23.8k, False: 1.01M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  23.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  23.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  23.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  23.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  23.8k|    }                                                  \
  |  |  |  | 3667|  1.03M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3686|  1.01M|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3687|  1.03M|    }
_ZN3scn2v34impl12float_readerIcE17handle_separatorsEv:
 4045|  3.21M|    {
 4046|  3.21M|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4046:13): [True: 3.21M, False: 0]
  ------------------
 4047|  3.21M|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4047:13): [True: 3.21M, False: 0]
  ------------------
 4048|  3.21M|            return;
 4049|  3.21M|        }
 4050|       |
 4051|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4052|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4052:13): [True: 0, False: 0]
  ------------------
 4053|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4053:27): [True: 0, False: 0]
  ------------------
 4054|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4054:21): [True: 0, False: 0]
  ------------------
 4055|      0|                    ch = CharT{'.'};
 4056|      0|                }
 4057|      0|            }
 4058|      0|        }
 4059|       |
 4060|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4060:13): [True: 0, False: 0]
  ------------------
 4061|      0|            return;
 4062|      0|        }
 4063|       |
 4064|      0|        auto first =
 4065|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4066|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4066:13): [True: 0, False: 0]
  ------------------
 4067|      0|            return;
 4068|      0|        }
 4069|       |
 4070|      0|        m_thsep_indices.push_back(
 4071|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4072|       |
 4073|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4073:31): [True: 0, False: 0]
  ------------------
 4074|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4074:17): [True: 0, False: 0]
  ------------------
 4075|      0|                *first++ = std::move(*it);
 4076|      0|            }
 4077|      0|            else {
 4078|      0|                m_thsep_indices.push_back(
 4079|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4080|      0|            }
 4081|      0|        }
 4082|       |
 4083|      0|        str.erase(first, str.end());
 4084|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1574|  3.67M|    {
 1575|  3.67M|        return m_storage.has_value();
 1576|  3.67M|    }
_ZNR3scn2v34impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1579|  2.15M|    {
 1580|  2.15M|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|  2.15M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.15M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1581|  2.15M|        return *m_storage;
 1582|  2.15M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4158|   422k|    {
 4159|   422k|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|   422k|#if !SCN_DISABLE_LOCALE
 4162|   422k|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 117k, False: 304k]
  ------------------
 4163|   117k|            return read_impl<Range>(
 4164|   117k|                range, rd,
 4165|   117k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|   117k|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|   117k|                },
 4168|   117k|                value, loc);
 4169|   117k|        }
 4170|   304k|#endif
 4171|       |
 4172|   304k|        return read_impl<Range>(
 4173|   304k|            range, rd,
 4174|   304k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   304k|                return r.read_source(SCN_FWD(args)...);
 4176|   304k|            },
 4177|   304k|            value);
 4178|   422k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4194|   583k|    {
 4195|   583k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|   583k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   583k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 31.5k, False: 551k]
  |  |  ------------------
  ------------------
 4197|  31.5k|            return unexpected(r.error());
 4198|  31.5k|        }
 4199|       |
 4200|   551k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   551k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   551k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   551k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   551k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.26k, False: 547k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.26k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.26k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.26k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.26k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.26k|    }                                                  \
  |  |  |  | 3667|   551k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   547k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|   547k|        return ranges::next(range.begin(), n);
 4202|   551k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|  1.81M|    {
  763|  1.81M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  1.81M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.81M|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   117k|        : m_fptr([](storage fn,
  743|   117k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   117k|              cvref<T> obj = *get<T>(fn);
  745|   117k|              if constexpr (std::is_void_v<R>) {
  746|   117k|                  obj(static_cast<decltype(args)>(args)...);
  747|   117k|              }
  748|   117k|              else {
  749|   117k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   117k|              }
  751|   117k|          }),
  752|   117k|          m_storage(std::addressof(f))
  753|   117k|    {
  754|   117k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   117k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   117k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   117k|              else {
  749|   117k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   117k|              }
  751|   117k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   117k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   117k|        else if constexpr (std::is_object_v<T>) {
  688|   117k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   117k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4165|   117k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|   117k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   117k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|   117k|                },
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3667|   369k|    {
 3668|   369k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3669|   369k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|   369k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 369k]
  |  |  ------------------
  ------------------
 3670|      0|            m_locale_options.thousands_sep = CharT{0};
 3671|      0|        }
 3672|       |
 3673|   369k|        return read_source_impl(range);
 3674|   369k|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3693|  1.81M|    {
 3694|  1.81M|        SCN_TRY(sign_result,
  ------------------
  |  | 3668|  1.81M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.81M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.81M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.81M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.81M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  1.81M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.81M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3695|  1.81M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3696|  1.81M|        auto it = sign_result.first;
 3697|  1.81M|        m_sign = sign_result.second;
 3698|       |
 3699|  1.81M|        auto digits_begin = it;
 3700|  1.81M|        auto r = ranges::subrange{it, range.end()};
 3701|       |        if constexpr (ranges::contiguous_range<Range> &&
 3702|       |                      ranges::sized_range<Range>) {
 3703|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3704|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3705|       |                SCN_TRY_ASSIGN(
 3706|       |                    it,
 3707|       |                    do_read_source_impl(
 3708|       |                        r,
 3709|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3710|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3711|       |            }
 3712|       |            else {
 3713|       |                auto cb = [&](const auto& rr)
 3714|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3715|       |                    auto res = read_all(rr);
 3716|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3717|       |                        return unexpected_scan_error(
 3718|       |                            scan_error::invalid_scanned_value,
 3719|       |                            "Invalid float value");
 3720|       |                    }
 3721|       |                    return res;
 3722|       |                };
 3723|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3724|       |            }
 3725|       |        }
 3726|  1.81M|        else {
 3727|  1.81M|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3663|  1.81M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  1.81M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  1.81M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 98.1k, False: 1.71M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  98.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  98.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  98.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  98.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  98.1k|    }                                                  \
  |  | 3667|  1.81M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  1.81M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3728|  1.71M|                it,
 3729|  1.71M|                do_read_source_impl(
 3730|  1.71M|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3731|  1.71M|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3732|  1.71M|        }
 3733|       |
 3734|  1.81M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.81M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.81M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3735|       |
 3736|  1.71M|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3736:13): [True: 1.70M, False: 9.60k]
  |  Branch (3736:48): [True: 1.69M, False: 9.61k]
  ------------------
 3737|  1.71M|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3737:13): [True: 1.63M, False: 61.2k]
  ------------------
 3738|  1.71M|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3738:13): [True: 1.62M, False: 3.70k]
  ------------------
 3739|  1.62M|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3740|  1.62M|        }
 3741|       |
 3742|  1.71M|        handle_separators();
 3743|       |
 3744|  1.71M|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3744:13): [True: 0, False: 1.71M]
  ------------------
 3745|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|      0|            if (auto e = check_thsep_grouping(
 3747|      0|                    ranges::subrange{
 3748|      0|                        digits_begin,
 3749|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3750|      0|                    m_thsep_indices, m_locale_options.grouping);
 3751|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3752|      0|                return unexpected(e);
 3753|      0|            }
 3754|      0|        }
 3755|       |
 3756|  1.71M|        return it;
 3757|  1.71M|    }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 3988|  1.81M|    {
 3989|  1.81M|        const bool allowed_hex = (m_options & allow_hex) != 0;
 3990|  1.81M|        const bool allowed_nonhex =
 3991|  1.81M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 3992|  1.81M|             ~static_cast<unsigned>(allow_hex)) != 0;
 3993|       |
 3994|  1.81M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (3994:39): [True: 1.79M, False: 19.2k]
  |  Branch (3994:45): [True: 0, False: 1.79M]
  ------------------
 3995|      0|            return r.transform_error(map_parse_error_to_scan_error(
 3996|      0|                scan_error::invalid_scanned_value,
 3997|      0|                "Invalid infinite floating-point value"));
 3998|      0|        }
 3999|  1.81M|        else if (r) {
  ------------------
  |  Branch (3999:18): [True: 19.2k, False: 1.79M]
  ------------------
 4000|  19.2k|            return *r;
 4001|  19.2k|        }
 4002|       |
 4003|  1.79M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4003:39): [True: 1.72M, False: 64.9k]
  |  Branch (4003:45): [True: 1.86k, False: 1.72M]
  ------------------
 4004|  1.86k|            return unexpected(r.error());
 4005|  1.86k|        }
 4006|  1.79M|        else if (r) {
  ------------------
  |  Branch (4006:18): [True: 64.9k, False: 1.72M]
  ------------------
 4007|  64.9k|            return *r;
 4008|  64.9k|        }
 4009|       |
 4010|  1.72M|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4010:13): [True: 1.21M, False: 512k]
  |  Branch (4010:28): [True: 385k, False: 828k]
  ------------------
 4011|       |            // only hex allowed:
 4012|       |            // prefix "0x" allowed, not required
 4013|   385k|            auto it = range.begin();
 4014|       |
 4015|   385k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4015:22): [True: 16.1k, False: 369k]
  ------------------
 4016|  16.1k|                m_kind = float_kind::hex_with_prefix;
 4017|  16.1k|                it = *r;
 4018|  16.1k|            }
 4019|   369k|            else {
 4020|   369k|                m_kind = float_kind::hex_without_prefix;
 4021|   369k|            }
 4022|       |
 4023|   385k|            return read_hex(ranges::subrange{it, range.end()});
 4024|   385k|        }
 4025|  1.34M|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4025:13): [True: 512k, False: 828k]
  |  Branch (4025:29): [True: 512k, False: 0]
  ------------------
 4026|       |            // only nonhex allowed:
 4027|       |            // no prefix allowed
 4028|   512k|            m_kind = float_kind::generic;
 4029|   512k|            return read_regular_float(range);
 4030|   512k|        }
 4031|       |        // both hex and nonhex allowed:
 4032|       |        // check for "0x" prefix -> hex,
 4033|       |        // regular otherwise
 4034|       |
 4035|   828k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   828k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 35.5k, False: 792k]
  |  |  ------------------
  ------------------
 4036|  35.5k|            m_kind = float_kind::hex_with_prefix;
 4037|  35.5k|            return read_hex(ranges::subrange{*r, range.end()});
 4038|  35.5k|        }
 4039|       |
 4040|   792k|        m_kind = float_kind::generic;
 4041|   792k|        return read_regular(range);
 4042|   828k|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3799|  1.81M|    {
 3800|  1.81M|        auto it = range.begin();
 3801|  1.81M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3801:73): [True: 1.79M, False: 19.2k]
  ------------------
 3802|  1.79M|            return unexpected(r.error());
 3803|  1.79M|        }
 3804|  19.2k|        else {
 3805|  19.2k|            it = *r;
 3806|  19.2k|        }
 3807|       |
 3808|  19.2k|        if (auto r = read_matching_string_classic_nocase(
 3809|  19.2k|                ranges::subrange{it, range.end()}, "inity");
 3810|  19.2k|            !r) {
  ------------------
  |  Branch (3810:13): [True: 9.60k, False: 9.61k]
  ------------------
 3811|  9.60k|            m_kind = float_kind::inf_short;
 3812|  9.60k|            return it;
 3813|  9.60k|        }
 3814|  9.61k|        else {
 3815|  9.61k|            m_kind = float_kind::inf_long;
 3816|  9.61k|            return *r;
 3817|  9.61k|        }
 3818|  19.2k|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3822|  1.79M|    {
 3823|  1.79M|        auto it = range.begin();
 3824|  1.79M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3824:73): [True: 1.72M, False: 66.8k]
  ------------------
 3825|  1.72M|            return r.transform_error(map_parse_error_to_scan_error(
 3826|  1.72M|                scan_error::invalid_scanned_value,
 3827|  1.72M|                "Invalid floating-point NaN value"));
 3828|  1.72M|        }
 3829|  66.8k|        else {
 3830|  66.8k|            it = *r;
 3831|  66.8k|        }
 3832|       |
 3833|  66.8k|        if (auto r =
 3834|  66.8k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3835|  66.8k|            !r) {
  ------------------
  |  Branch (3835:13): [True: 61.2k, False: 5.56k]
  ------------------
 3836|  61.2k|            m_kind = float_kind::nan_simple;
 3837|  61.2k|            return it;
 3838|  61.2k|        }
 3839|  5.56k|        else {
 3840|  5.56k|            it = *r;
 3841|  5.56k|        }
 3842|       |
 3843|  5.56k|        auto payload_beg_it = it;
 3844|  5.56k|        it = read_while_code_unit(
 3845|  5.56k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3846|  5.56k|                return is_ascii_char(ch) &&
 3847|  5.56k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3848|  5.56k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3849|  5.56k|            });
 3850|  5.56k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3851|       |
 3852|  5.56k|        m_kind = float_kind::nan_with_payload;
 3853|  5.56k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3853:18): [True: 3.70k, False: 1.86k]
  ------------------
 3854|  5.56k|                                             ')')) {
 3855|  3.70k|            return *r;
 3856|  3.70k|        }
 3857|  1.86k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3858|  1.86k|                                     "Invalid floating-point NaN payload");
 3859|  5.56k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|  5.56k|        : m_fptr([](storage fn,
  743|  5.56k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.56k|              cvref<T> obj = *get<T>(fn);
  745|  5.56k|              if constexpr (std::is_void_v<R>) {
  746|  5.56k|                  obj(static_cast<decltype(args)>(args)...);
  747|  5.56k|              }
  748|  5.56k|              else {
  749|  5.56k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.56k|              }
  751|  5.56k|          }),
  752|  5.56k|          m_storage(std::addressof(f))
  753|  5.56k|    {
  754|  5.56k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|   119k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   119k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   119k|              else {
  749|   119k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   119k|              }
  751|   119k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_EUlcE_EEDaNS3_7storageE:
  683|   119k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   119k|        else if constexpr (std::is_object_v<T>) {
  688|   119k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   119k|    }
_ZZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlcE_clEc:
 3845|   119k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3846|   119k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3846:24): [True: 119k, False: 122]
  ------------------
 3847|   119k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3847:26): [True: 115k, False: 4.35k]
  |  Branch (3847:39): [True: 105k, False: 9.75k]
  |  Branch (3847:54): [True: 2.93k, False: 11.1k]
  |  Branch (3847:67): [True: 2.85k, False: 83]
  ------------------
 3848|   119k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3848:26): [True: 6.90k, False: 4.35k]
  |  Branch (3848:39): [True: 2.55k, False: 4.34k]
  |  Branch (3848:53): [True: 4.26k, False: 4.43k]
  ------------------
 3849|   119k|            });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  5.56k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  5.56k|        {
  662|  5.56k|        }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3792|  1.21M|    {
 3793|  1.21M|        return read_matching_string_classic_nocase(range, "0x");
 3794|  1.21M|    }
_ZN3scn2v34impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3892|   421k|    {
 3893|   421k|        auto it = range.begin();
 3894|       |
 3895|   421k|        std::ptrdiff_t digits_count = 0;
 3896|   421k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3897|   421k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   421k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.4k, False: 408k]
  |  |  ------------------
  ------------------
 3898|  12.4k|            return r.transform_error(map_parse_error_to_scan_error(
 3899|  12.4k|                scan_error::invalid_scanned_value,
 3900|  12.4k|                "Invalid hexadecimal floating-point value"));
 3901|  12.4k|        }
 3902|   408k|        else {
 3903|   408k|            digits_count += ranges::distance(it, *r);
 3904|   408k|            it = *r;
 3905|   408k|        }
 3906|       |
 3907|   408k|        m_integral_part_length = digits_count;
 3908|   408k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3908:18): [True: 66.0k, False: 342k]
  ------------------
 3909|   408k|                                             m_locale_options.decimal_point)) {
 3910|  66.0k|            it = *r;
 3911|  66.0k|        }
 3912|       |
 3913|   408k|        if (auto r =
  ------------------
  |  Branch (3913:18): [True: 60.5k, False: 348k]
  ------------------
 3914|   408k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3915|  60.5k|            digits_count += ranges::distance(it, *r);
 3916|  60.5k|            it = *r;
 3917|  60.5k|        }
 3918|       |
 3919|   408k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   408k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 408k]
  |  |  ------------------
  ------------------
 3920|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3921|      0|                                         "No significand digits in hexfloat");
 3922|      0|        }
 3923|       |
 3924|   408k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3925|       |
 3926|   408k|        return it;
 3927|   408k|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3777|   830k|    {
 3778|   830k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   830k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 830k]
  |  |  |  Branch (859:45): [True: 0, False: 830k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3779|   830k|                         thsep_allowed)) {
 3780|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3781|      0|                return char_to_int(ch) < 16 ||
 3782|      0|                       ch == m_locale_options.thousands_sep;
 3783|      0|            });
 3784|      0|        }
 3785|       |
 3786|   830k|        return read_while1_code_unit(
 3787|   830k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3788|   830k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|   830k|        : m_fptr([](storage fn,
  743|   830k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   830k|              cvref<T> obj = *get<T>(fn);
  745|   830k|              if constexpr (std::is_void_v<R>) {
  746|   830k|                  obj(static_cast<decltype(args)>(args)...);
  747|   830k|              }
  748|   830k|              else {
  749|   830k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   830k|              }
  751|   830k|          }),
  752|   830k|          m_storage(std::addressof(f))
  753|   830k|    {
  754|   830k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  4.45M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.45M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  4.45M|              else {
  749|  4.45M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.45M|              }
  751|  4.45M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  4.45M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  4.45M|        else if constexpr (std::is_object_v<T>) {
  688|  4.45M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  4.45M|    }
_ZZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3787|  4.45M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   830k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   830k|        {
  662|   830k|        }
_ZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3864|  1.47M|    {
 3865|  1.47M|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3865:18): [True: 171k, False: 1.30M]
  ------------------
 3866|   171k|            auto beg_exp_it = range.begin();
 3867|   171k|            auto it = *r;
 3868|       |
 3869|   171k|            if (auto r_sign =
  ------------------
  |  Branch (3869:22): [True: 170k, False: 309]
  ------------------
 3870|   171k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3871|   170k|                it = r_sign->first;
 3872|   170k|            }
 3873|       |
 3874|   171k|            if (auto r_exp = read_while1_code_unit(
 3875|   171k|                    ranges::subrange{it, range.end()},
 3876|   171k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3877|   171k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|   171k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.44k, False: 168k]
  |  |  ------------------
  ------------------
 3878|  2.44k|                it = beg_exp_it;
 3879|  2.44k|            }
 3880|   168k|            else {
 3881|   168k|                it = *r_exp;
 3882|   168k|            }
 3883|       |
 3884|   171k|            return it;
 3885|   171k|        }
 3886|  1.30M|        return range.begin();
 3887|  1.47M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|   171k|        : m_fptr([](storage fn,
  743|   171k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   171k|              cvref<T> obj = *get<T>(fn);
  745|   171k|              if constexpr (std::is_void_v<R>) {
  746|   171k|                  obj(static_cast<decltype(args)>(args)...);
  747|   171k|              }
  748|   171k|              else {
  749|   171k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   171k|              }
  751|   171k|          }),
  752|   171k|          m_storage(std::addressof(f))
  753|   171k|    {
  754|   171k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES15_c:
  743|   552k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   552k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   552k|              else {
  749|   552k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   552k|              }
  751|   552k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|   552k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   552k|        else if constexpr (std::is_object_v<T>) {
  688|   552k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   552k|    }
_ZZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlcE_clEc:
 3876|   552k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|   171k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   171k|        {
  662|   171k|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3932|  1.30M|    {
 3933|  1.30M|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3934|  1.30M|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3934:35): [True: 1.11M, False: 185k]
  |  Branch (3934:50): [True: 28.8k, False: 1.09M]
  ------------------
 3935|       |
 3936|  1.30M|        auto it = ranges::begin(range);
 3937|  1.30M|        std::ptrdiff_t digits_count = 0;
 3938|       |
 3939|  1.30M|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3940|  1.30M|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.30M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 66.7k, False: 1.23M]
  |  |  ------------------
  ------------------
 3941|  66.7k|            return r.transform_error(
 3942|  66.7k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3943|  66.7k|                                              "Invalid floating-point value"));
 3944|  66.7k|        }
 3945|  1.23M|        else {
 3946|  1.23M|            digits_count += ranges::distance(it, *r);
 3947|  1.23M|            it = *r;
 3948|  1.23M|        }
 3949|       |
 3950|  1.23M|        m_integral_part_length = digits_count;
 3951|  1.23M|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3951:18): [True: 244k, False: 993k]
  ------------------
 3952|  1.23M|                                             m_locale_options.decimal_point)) {
 3953|   244k|            it = *r;
 3954|   244k|        }
 3955|       |
 3956|  1.23M|        if (auto r =
  ------------------
  |  Branch (3956:18): [True: 227k, False: 1.01M]
  ------------------
 3957|  1.23M|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3958|   227k|            digits_count += ranges::distance(it, *r);
 3959|   227k|            it = *r;
 3960|   227k|        }
 3961|       |
 3962|  1.23M|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|  1.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.23M]
  |  |  ------------------
  ------------------
 3963|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3964|      0|                                         "No significand digits in float");
 3965|      0|        }
 3966|       |
 3967|  1.23M|        auto beg_exp_it = it;
 3968|  1.23M|        if (allowed_exp) {
  ------------------
  |  Branch (3968:13): [True: 1.07M, False: 167k]
  ------------------
 3969|  1.07M|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3970|  1.07M|        }
 3971|  1.23M|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3971:13): [True: 27.7k, False: 1.21M]
  |  Branch (3971:29): [True: 17.0k, False: 10.6k]
  ------------------
 3972|  17.0k|            return unexpected_scan_error(
 3973|  17.0k|                scan_error::invalid_scanned_value,
 3974|  17.0k|                "No exponent given to scientific float");
 3975|  17.0k|        }
 3976|       |
 3977|  1.22M|        m_kind =
 3978|  1.22M|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3978:13): [True: 1.05M, False: 168k]
  ------------------
 3979|       |
 3980|  1.22M|        return it;
 3981|  1.23M|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3762|  2.54M|    {
 3763|  2.54M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|  2.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.54M]
  |  |  |  Branch (859:45): [True: 0, False: 2.54M]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3764|  2.54M|                         thsep_allowed)) {
 3765|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3766|      0|                return char_to_int(ch) < 10 ||
 3767|      0|                       ch == m_locale_options.thousands_sep;
 3768|      0|            });
 3769|      0|        }
 3770|       |
 3771|  2.54M|        return read_while1_code_unit(
 3772|  2.54M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3773|  2.54M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|  2.54M|        : m_fptr([](storage fn,
  743|  2.54M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.54M|              cvref<T> obj = *get<T>(fn);
  745|  2.54M|              if constexpr (std::is_void_v<R>) {
  746|  2.54M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.54M|              }
  748|  2.54M|              else {
  749|  2.54M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.54M|              }
  751|  2.54M|          }),
  752|  2.54M|          m_storage(std::addressof(f))
  753|  2.54M|    {
  754|  2.54M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  14.3M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  14.3M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  14.3M|              else {
  749|  14.3M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  14.3M|              }
  751|  14.3M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  14.3M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  14.3M|        else if constexpr (std::is_object_v<T>) {
  688|  14.3M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  14.3M|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3772|  14.3M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  2.54M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.54M|        {
  662|  2.54M|        }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSG_:
 1564|  1.63M|    {
 1565|  1.63M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  1.63M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1566|  1.63M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   117k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   117k|        {
  662|   117k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   304k|        : m_fptr([](storage fn,
  743|   304k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   304k|              cvref<T> obj = *get<T>(fn);
  745|   304k|              if constexpr (std::is_void_v<R>) {
  746|   304k|                  obj(static_cast<decltype(args)>(args)...);
  747|   304k|              }
  748|   304k|              else {
  749|   304k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   304k|              }
  751|   304k|          }),
  752|   304k|          m_storage(std::addressof(f))
  753|   304k|    {
  754|   304k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   304k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   304k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   304k|              else {
  749|   304k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   304k|              }
  751|   304k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   304k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   304k|        else if constexpr (std::is_object_v<T>) {
  688|   304k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   304k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4174|   304k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   304k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   304k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|   304k|            },
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3653|  1.44M|    {
 3654|  1.44M|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|  1.44M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.44M]
  |  |  ------------------
  ------------------
 3655|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3656|      0|                classic_with_thsep_tag{}};
 3657|      0|        }
 3658|       |
 3659|  1.44M|        return read_source_impl(range);
 3660|  1.44M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   304k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   304k|        {
  662|   304k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4158|   357k|    {
 4159|   357k|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|   357k|#if !SCN_DISABLE_LOCALE
 4162|   357k|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 98.0k, False: 259k]
  ------------------
 4163|  98.0k|            return read_impl<Range>(
 4164|  98.0k|                range, rd,
 4165|  98.0k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  98.0k|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|  98.0k|                },
 4168|  98.0k|                value, loc);
 4169|  98.0k|        }
 4170|   259k|#endif
 4171|       |
 4172|   259k|        return read_impl<Range>(
 4173|   259k|            range, rd,
 4174|   259k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   259k|                return r.read_source(SCN_FWD(args)...);
 4176|   259k|            },
 4177|   259k|            value);
 4178|   357k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4194|   504k|    {
 4195|   504k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|   504k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   504k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.5k, False: 487k]
  |  |  ------------------
  ------------------
 4197|  17.5k|            return unexpected(r.error());
 4198|  17.5k|        }
 4199|       |
 4200|   487k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   487k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   487k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   487k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   487k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 19.5k, False: 467k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  19.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  19.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  19.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  19.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  19.5k|    }                                                  \
  |  |  |  | 3667|   487k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   467k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|   467k|        return ranges::next(range.begin(), n);
 4202|   487k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|  1.55M|    {
  763|  1.55M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  1.55M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.55M|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  98.0k|        : m_fptr([](storage fn,
  743|  98.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  98.0k|              cvref<T> obj = *get<T>(fn);
  745|  98.0k|              if constexpr (std::is_void_v<R>) {
  746|  98.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  98.0k|              }
  748|  98.0k|              else {
  749|  98.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  98.0k|              }
  751|  98.0k|          }),
  752|  98.0k|          m_storage(std::addressof(f))
  753|  98.0k|    {
  754|  98.0k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  98.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  98.0k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  98.0k|              else {
  749|  98.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  98.0k|              }
  751|  98.0k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  98.0k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  98.0k|        else if constexpr (std::is_object_v<T>) {
  688|  98.0k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  98.0k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4165|  98.0k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  98.0k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  98.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|  98.0k|                },
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3667|   304k|    {
 3668|   304k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3669|   304k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|   304k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 304k]
  |  |  ------------------
  ------------------
 3670|      0|            m_locale_options.thousands_sep = CharT{0};
 3671|      0|        }
 3672|       |
 3673|   304k|        return read_source_impl(range);
 3674|   304k|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3693|  1.55M|    {
 3694|  1.55M|        SCN_TRY(sign_result,
  ------------------
  |  | 3668|  1.55M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.55M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.55M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.55M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.55M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  1.55M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.55M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3695|  1.55M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3696|  1.55M|        auto it = sign_result.first;
 3697|  1.55M|        m_sign = sign_result.second;
 3698|       |
 3699|  1.55M|        auto digits_begin = it;
 3700|  1.55M|        auto r = ranges::subrange{it, range.end()};
 3701|       |        if constexpr (ranges::contiguous_range<Range> &&
 3702|  1.55M|                      ranges::sized_range<Range>) {
 3703|  1.55M|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  3.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.55M]
  |  |  |  Branch (859:45): [True: 0, False: 1.55M]
  |  |  |  Branch (859:45): [True: 0, False: 1.55M]
  |  |  ------------------
  ------------------
 3704|  1.55M|                             m_locale_options.decimal_point != CharT{'.'})) {
 3705|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|      0|    }                                                  \
  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3706|      0|                    it,
 3707|      0|                    do_read_source_impl(
 3708|      0|                        r,
 3709|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3710|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3711|      0|            }
 3712|  1.55M|            else {
 3713|  1.55M|                auto cb = [&](const auto& rr)
 3714|  1.55M|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3715|  1.55M|                    auto res = read_all(rr);
 3716|  1.55M|                    if (SCN_UNLIKELY(res == r.begin())) {
 3717|  1.55M|                        return unexpected_scan_error(
 3718|  1.55M|                            scan_error::invalid_scanned_value,
 3719|  1.55M|                            "Invalid float value");
 3720|  1.55M|                    }
 3721|  1.55M|                    return res;
 3722|  1.55M|                };
 3723|  1.55M|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3663|  1.55M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  1.55M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  1.55M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 53.7k, False: 1.50M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  53.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  53.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  53.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  53.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  53.7k|    }                                                  \
  |  | 3667|  1.55M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  1.55M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3724|  1.50M|            }
 3725|       |        }
 3726|       |        else {
 3727|       |            SCN_TRY_ASSIGN(
 3728|       |                it,
 3729|       |                do_read_source_impl(
 3730|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3731|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3732|       |        }
 3733|       |
 3734|  1.55M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.55M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.55M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3735|       |
 3736|  1.50M|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3736:13): [True: 1.49M, False: 9.28k]
  |  Branch (3736:48): [True: 1.48M, False: 8.88k]
  ------------------
 3737|  1.50M|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3737:13): [True: 1.42M, False: 59.7k]
  ------------------
 3738|  1.50M|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3738:13): [True: 1.42M, False: 3.24k]
  ------------------
 3739|  1.42M|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3740|  1.42M|        }
 3741|       |
 3742|  1.50M|        handle_separators();
 3743|       |
 3744|  1.50M|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3744:13): [True: 0, False: 1.50M]
  ------------------
 3745|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|      0|            if (auto e = check_thsep_grouping(
 3747|      0|                    ranges::subrange{
 3748|      0|                        digits_begin,
 3749|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3750|      0|                    m_thsep_indices, m_locale_options.grouping);
 3751|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3752|      0|                return unexpected(e);
 3753|      0|            }
 3754|      0|        }
 3755|       |
 3756|  1.50M|        return it;
 3757|  1.50M|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3799|  1.55M|    {
 3800|  1.55M|        auto it = range.begin();
 3801|  1.55M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3801:73): [True: 1.53M, False: 18.1k]
  ------------------
 3802|  1.53M|            return unexpected(r.error());
 3803|  1.53M|        }
 3804|  18.1k|        else {
 3805|  18.1k|            it = *r;
 3806|  18.1k|        }
 3807|       |
 3808|  18.1k|        if (auto r = read_matching_string_classic_nocase(
 3809|  18.1k|                ranges::subrange{it, range.end()}, "inity");
 3810|  18.1k|            !r) {
  ------------------
  |  Branch (3810:13): [True: 9.28k, False: 8.88k]
  ------------------
 3811|  9.28k|            m_kind = float_kind::inf_short;
 3812|  9.28k|            return it;
 3813|  9.28k|        }
 3814|  8.88k|        else {
 3815|  8.88k|            m_kind = float_kind::inf_long;
 3816|  8.88k|            return *r;
 3817|  8.88k|        }
 3818|  18.1k|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3822|  1.53M|    {
 3823|  1.53M|        auto it = range.begin();
 3824|  1.53M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3824:73): [True: 1.47M, False: 64.5k]
  ------------------
 3825|  1.47M|            return r.transform_error(map_parse_error_to_scan_error(
 3826|  1.47M|                scan_error::invalid_scanned_value,
 3827|  1.47M|                "Invalid floating-point NaN value"));
 3828|  1.47M|        }
 3829|  64.5k|        else {
 3830|  64.5k|            it = *r;
 3831|  64.5k|        }
 3832|       |
 3833|  64.5k|        if (auto r =
 3834|  64.5k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3835|  64.5k|            !r) {
  ------------------
  |  Branch (3835:13): [True: 59.7k, False: 4.77k]
  ------------------
 3836|  59.7k|            m_kind = float_kind::nan_simple;
 3837|  59.7k|            return it;
 3838|  59.7k|        }
 3839|  4.77k|        else {
 3840|  4.77k|            it = *r;
 3841|  4.77k|        }
 3842|       |
 3843|  4.77k|        auto payload_beg_it = it;
 3844|  4.77k|        it = read_while_code_unit(
 3845|  4.77k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3846|  4.77k|                return is_ascii_char(ch) &&
 3847|  4.77k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3848|  4.77k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3849|  4.77k|            });
 3850|  4.77k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3851|       |
 3852|  4.77k|        m_kind = float_kind::nan_with_payload;
 3853|  4.77k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3853:18): [True: 3.24k, False: 1.53k]
  ------------------
 3854|  4.77k|                                             ')')) {
 3855|  3.24k|            return *r;
 3856|  3.24k|        }
 3857|  1.53k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3858|  1.53k|                                     "Invalid floating-point NaN payload");
 3859|  4.77k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|  4.77k|        : m_fptr([](storage fn,
  743|  4.77k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.77k|              cvref<T> obj = *get<T>(fn);
  745|  4.77k|              if constexpr (std::is_void_v<R>) {
  746|  4.77k|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.77k|              }
  748|  4.77k|              else {
  749|  4.77k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.77k|              }
  751|  4.77k|          }),
  752|  4.77k|          m_storage(std::addressof(f))
  753|  4.77k|    {
  754|  4.77k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|  94.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  94.4k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  94.4k|              else {
  749|  94.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  94.4k|              }
  751|  94.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_EUlcE_EEDaNS3_7storageE:
  683|  94.4k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  94.4k|        else if constexpr (std::is_object_v<T>) {
  688|  94.4k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  94.4k|    }
_ZZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlcE_clEc:
 3845|  94.4k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3846|  94.4k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3846:24): [True: 94.3k, False: 116]
  ------------------
 3847|  94.4k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3847:26): [True: 90.7k, False: 3.59k]
  |  Branch (3847:39): [True: 81.1k, False: 9.62k]
  |  Branch (3847:54): [True: 2.80k, False: 10.4k]
  |  Branch (3847:67): [True: 2.72k, False: 83]
  ------------------
 3848|  94.3k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3848:26): [True: 6.90k, False: 3.59k]
  |  Branch (3848:39): [True: 2.55k, False: 4.34k]
  |  Branch (3848:53): [True: 4.26k, False: 3.67k]
  ------------------
 3849|  94.4k|            });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  4.77k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  4.77k|        {
  662|  4.77k|        }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3792|  1.02M|    {
 3793|  1.02M|        return read_matching_string_classic_nocase(range, "0x");
 3794|  1.02M|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1983|   891k|{
 1984|   891k|    auto it = read_while_code_unit(range, pred);
 1985|   891k|    if (it == range.begin()) {
  ------------------
  |  Branch (1985:9): [True: 375k, False: 515k]
  ------------------
 1986|   375k|        return unexpected(parse_error::error);
 1987|   375k|    }
 1988|   515k|    return it;
 1989|   891k|}
_ZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3864|   257k|    {
 3865|   257k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3865:18): [True: 38.4k, False: 218k]
  ------------------
 3866|  38.4k|            auto beg_exp_it = range.begin();
 3867|  38.4k|            auto it = *r;
 3868|       |
 3869|  38.4k|            if (auto r_sign =
  ------------------
  |  Branch (3869:22): [True: 38.3k, False: 102]
  ------------------
 3870|  38.4k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3871|  38.3k|                it = r_sign->first;
 3872|  38.3k|            }
 3873|       |
 3874|  38.4k|            if (auto r_exp = read_while1_code_unit(
 3875|  38.4k|                    ranges::subrange{it, range.end()},
 3876|  38.4k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3877|  38.4k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  38.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 836, False: 37.6k]
  |  |  ------------------
  ------------------
 3878|    836|                it = beg_exp_it;
 3879|    836|            }
 3880|  37.6k|            else {
 3881|  37.6k|                it = *r_exp;
 3882|  37.6k|            }
 3883|       |
 3884|  38.4k|            return it;
 3885|  38.4k|        }
 3886|   218k|        return range.begin();
 3887|   257k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_:
  742|  38.4k|        : m_fptr([](storage fn,
  743|  38.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  38.4k|              cvref<T> obj = *get<T>(fn);
  745|  38.4k|              if constexpr (std::is_void_v<R>) {
  746|  38.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  38.4k|              }
  748|  38.4k|              else {
  749|  38.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  38.4k|              }
  751|  38.4k|          }),
  752|  38.4k|          m_storage(std::addressof(f))
  753|  38.4k|    {
  754|  38.4k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEcE_clES12_c:
  743|   114k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   114k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   114k|              else {
  749|   114k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   114k|              }
  751|   114k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|   114k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   114k|        else if constexpr (std::is_object_v<T>) {
  688|   114k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   114k|    }
_ZZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlcE_clEc:
 3876|   114k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|  38.4k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  38.4k|        {
  662|  38.4k|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3932|   443k|    {
 3933|   443k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3934|   443k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3934:35): [True: 274k, False: 169k]
  |  Branch (3934:50): [True: 26.2k, False: 247k]
  ------------------
 3935|       |
 3936|   443k|        auto it = ranges::begin(range);
 3937|   443k|        std::ptrdiff_t digits_count = 0;
 3938|       |
 3939|   443k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3940|   443k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   443k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34.6k, False: 409k]
  |  |  ------------------
  ------------------
 3941|  34.6k|            return r.transform_error(
 3942|  34.6k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3943|  34.6k|                                              "Invalid floating-point value"));
 3944|  34.6k|        }
 3945|   409k|        else {
 3946|   409k|            digits_count += ranges::distance(it, *r);
 3947|   409k|            it = *r;
 3948|   409k|        }
 3949|       |
 3950|   409k|        m_integral_part_length = digits_count;
 3951|   409k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3951:18): [True: 75.0k, False: 334k]
  ------------------
 3952|   409k|                                             m_locale_options.decimal_point)) {
 3953|  75.0k|            it = *r;
 3954|  75.0k|        }
 3955|       |
 3956|   409k|        if (auto r =
  ------------------
  |  Branch (3956:18): [True: 68.8k, False: 340k]
  ------------------
 3957|   409k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3958|  68.8k|            digits_count += ranges::distance(it, *r);
 3959|  68.8k|            it = *r;
 3960|  68.8k|        }
 3961|       |
 3962|   409k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   409k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 409k]
  |  |  ------------------
  ------------------
 3963|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3964|      0|                                         "No significand digits in float");
 3965|      0|        }
 3966|       |
 3967|   409k|        auto beg_exp_it = it;
 3968|   409k|        if (allowed_exp) {
  ------------------
  |  Branch (3968:13): [True: 257k, False: 151k]
  ------------------
 3969|   257k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3970|   257k|        }
 3971|   409k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3971:13): [True: 24.6k, False: 384k]
  |  Branch (3971:29): [True: 16.6k, False: 7.96k]
  ------------------
 3972|  16.6k|            return unexpected_scan_error(
 3973|  16.6k|                scan_error::invalid_scanned_value,
 3974|  16.6k|                "No exponent given to scientific float");
 3975|  16.6k|        }
 3976|       |
 3977|   392k|        m_kind =
 3978|   392k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3978:13): [True: 354k, False: 37.6k]
  ------------------
 3979|       |
 3980|   392k|        return it;
 3981|   409k|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3762|   852k|    {
 3763|   852k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   852k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 852k]
  |  |  |  Branch (859:45): [True: 0, False: 852k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3764|   852k|                         thsep_allowed)) {
 3765|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3766|      0|                return char_to_int(ch) < 10 ||
 3767|      0|                       ch == m_locale_options.thousands_sep;
 3768|      0|            });
 3769|      0|        }
 3770|       |
 3771|   852k|        return read_while1_code_unit(
 3772|   852k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3773|   852k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|   852k|        : m_fptr([](storage fn,
  743|   852k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   852k|              cvref<T> obj = *get<T>(fn);
  745|   852k|              if constexpr (std::is_void_v<R>) {
  746|   852k|                  obj(static_cast<decltype(args)>(args)...);
  747|   852k|              }
  748|   852k|              else {
  749|   852k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   852k|              }
  751|   852k|          }),
  752|   852k|          m_storage(std::addressof(f))
  753|   852k|    {
  754|   852k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|  4.52M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.52M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  4.52M|              else {
  749|  4.52M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.52M|              }
  751|  4.52M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  683|  4.52M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  4.52M|        else if constexpr (std::is_object_v<T>) {
  688|  4.52M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  4.52M|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3772|  4.52M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   852k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   852k|        {
  662|   852k|        }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3988|  1.55M|    {
 3989|  1.55M|        const bool allowed_hex = (m_options & allow_hex) != 0;
 3990|  1.55M|        const bool allowed_nonhex =
 3991|  1.55M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 3992|  1.55M|             ~static_cast<unsigned>(allow_hex)) != 0;
 3993|       |
 3994|  1.55M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (3994:39): [True: 1.53M, False: 18.1k]
  |  Branch (3994:45): [True: 0, False: 1.53M]
  ------------------
 3995|      0|            return r.transform_error(map_parse_error_to_scan_error(
 3996|      0|                scan_error::invalid_scanned_value,
 3997|      0|                "Invalid infinite floating-point value"));
 3998|      0|        }
 3999|  1.55M|        else if (r) {
  ------------------
  |  Branch (3999:18): [True: 18.1k, False: 1.53M]
  ------------------
 4000|  18.1k|            return *r;
 4001|  18.1k|        }
 4002|       |
 4003|  1.53M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4003:39): [True: 1.47M, False: 63.0k]
  |  Branch (4003:45): [True: 1.53k, False: 1.47M]
  ------------------
 4004|  1.53k|            return unexpected(r.error());
 4005|  1.53k|        }
 4006|  1.53M|        else if (r) {
  ------------------
  |  Branch (4006:18): [True: 63.0k, False: 1.47M]
  ------------------
 4007|  63.0k|            return *r;
 4008|  63.0k|        }
 4009|       |
 4010|  1.47M|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4010:13): [True: 1.02M, False: 443k]
  |  Branch (4010:28): [True: 310k, False: 718k]
  ------------------
 4011|       |            // only hex allowed:
 4012|       |            // prefix "0x" allowed, not required
 4013|   310k|            auto it = range.begin();
 4014|       |
 4015|   310k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4015:22): [True: 14.3k, False: 296k]
  ------------------
 4016|  14.3k|                m_kind = float_kind::hex_with_prefix;
 4017|  14.3k|                it = *r;
 4018|  14.3k|            }
 4019|   296k|            else {
 4020|   296k|                m_kind = float_kind::hex_without_prefix;
 4021|   296k|            }
 4022|       |
 4023|   310k|            return read_hex(ranges::subrange{it, range.end()});
 4024|   310k|        }
 4025|  1.16M|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4025:13): [True: 443k, False: 718k]
  |  Branch (4025:29): [True: 443k, False: 0]
  ------------------
 4026|       |            // only nonhex allowed:
 4027|       |            // no prefix allowed
 4028|   443k|            m_kind = float_kind::generic;
 4029|   443k|            return read_regular_float(range);
 4030|   443k|        }
 4031|       |        // both hex and nonhex allowed:
 4032|       |        // check for "0x" prefix -> hex,
 4033|       |        // regular otherwise
 4034|       |
 4035|   718k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   718k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34.7k, False: 683k]
  |  |  ------------------
  ------------------
 4036|  34.7k|            m_kind = float_kind::hex_with_prefix;
 4037|  34.7k|            return read_hex(ranges::subrange{*r, range.end()});
 4038|  34.7k|        }
 4039|       |
 4040|   683k|        m_kind = float_kind::generic;
 4041|   683k|        return read_regular(range);
 4042|   718k|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3714|  1.02M|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3715|  1.02M|                    auto res = read_all(rr);
 3716|  1.02M|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|  1.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 900, False: 1.02M]
  |  |  ------------------
  ------------------
 3717|    900|                        return unexpected_scan_error(
 3718|    900|                            scan_error::invalid_scanned_value,
 3719|    900|                            "Invalid float value");
 3720|    900|                    }
 3721|  1.02M|                    return res;
 3722|  1.02M|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1826|  1.02M|{
 1827|  1.02M|    return ranges::next(range.begin(), range.end());
 1828|  1.02M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|  1.02M|    {
  313|  1.02M|        ranges::advance(x, bound);
  314|  1.02M|        return x;
  315|  1.02M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|  1.02M|    {
  275|  1.02M|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|  1.02M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|  1.02M|    {
  190|  1.02M|        i = std::move(bound);
  191|  1.02M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1564|  1.42M|    {
 1565|  1.42M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  1.42M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1566|  1.42M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1608|  1.42M|    {
 1609|  1.42M|        using value_t = ranges::range_value_t<Range>;
 1610|       |
 1611|       |        if constexpr (ranges::borrowed_range<Range> &&
 1612|       |                      ranges::contiguous_range<Range> &&
 1613|  1.42M|                      ranges::sized_range<Range>) {
 1614|  1.42M|            m_storage.reset();
 1615|  1.42M|            m_view = string_view_type{ranges::data(range), range.size()};
 1616|       |        }
 1617|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1618|       |                                          std::basic_string<CharT>>) {
 1619|       |            m_storage.emplace(SCN_FWD(range));
 1620|       |            m_view = string_view_type{*m_storage};
 1621|       |        }
 1622|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1623|       |                                          typename detail::basic_scan_buffer<
 1624|       |                                              value_t>::forward_iterator> &&
 1625|       |                           ranges::common_range<Range>) {
 1626|       |            auto beg_seg = range.begin().contiguous_segment();
 1627|       |            auto end_seg = range.end().contiguous_segment();
 1628|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1629|       |                             detail::to_address(end_seg.end()))) {
 1630|       |                auto& str = m_storage.emplace();
 1631|       |                str.reserve(range.end().position() - range.begin().position());
 1632|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1633|       |                m_view = string_view_type{str};
 1634|       |                return;
 1635|       |            }
 1636|       |
 1637|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1638|       |                                                            end_seg.data());
 1639|       |            m_storage.reset();
 1640|       |        }
 1641|       |        else {
 1642|       |            auto& str = m_storage.emplace();
 1643|       |            if constexpr (ranges::sized_range<Range>) {
 1644|       |                str.reserve(range.size());
 1645|       |            }
 1646|       |            if constexpr (ranges::common_range<Range>) {
 1647|       |                std::copy(ranges::begin(range), ranges::end(range),
 1648|       |                          std::back_inserter(str));
 1649|       |            }
 1650|       |            else {
 1651|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1652|       |                     ++it) {
 1653|       |                    str.push_back(*it);
 1654|       |                }
 1655|       |            }
 1656|       |            m_view = string_view_type{str};
 1657|       |        }
 1658|  1.42M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  98.0k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  98.0k|        {
  662|  98.0k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   259k|        : m_fptr([](storage fn,
  743|   259k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   259k|              cvref<T> obj = *get<T>(fn);
  745|   259k|              if constexpr (std::is_void_v<R>) {
  746|   259k|                  obj(static_cast<decltype(args)>(args)...);
  747|   259k|              }
  748|   259k|              else {
  749|   259k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   259k|              }
  751|   259k|          }),
  752|   259k|          m_storage(std::addressof(f))
  753|   259k|    {
  754|   259k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   259k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   259k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   259k|              else {
  749|   259k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   259k|              }
  751|   259k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   259k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   259k|        else if constexpr (std::is_object_v<T>) {
  688|   259k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   259k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4174|   259k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   259k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   259k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|   259k|            },
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3653|  1.25M|    {
 3654|  1.25M|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|  1.25M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.25M]
  |  |  ------------------
  ------------------
 3655|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3656|      0|                classic_with_thsep_tag{}};
 3657|      0|        }
 3658|       |
 3659|  1.25M|        return read_source_impl(range);
 3660|  1.25M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   259k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   259k|        {
  662|   259k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6181|   447k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|   447k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|   447k|            auto rd = make_reader<T, char_type>();
 6195|   447k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   447k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 447k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|   447k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 447k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|   447k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|   447k|                return impl(rd, range, value);
 6202|   447k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   447k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|   447k|    {
 6113|   447k|        const bool need_skipped_width =
 6114|   447k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 447k]
  |  Branch (6114:33): [True: 0, False: 447k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   447k|        auto it = rng.begin();
 6118|   447k|        std::ptrdiff_t prefix_width = 0;
 6119|   447k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 447k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   447k|        else {
 6127|   447k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   447k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   447k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   447k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   447k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.83k, False: 441k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  5.83k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  5.83k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  5.83k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  5.83k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  5.83k|    }                                                  \
  |  |  |  | 3667|   447k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   441k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   441k|            std::tie(it, prefix_width) = prefix_result;
 6129|   441k|        }
 6130|   441k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   441k|        std::ptrdiff_t value_width = 0;
 6134|   441k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 441k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   441k|        else {
 6150|   441k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   441k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   441k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   441k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 26.9k, False: 414k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  26.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  26.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  26.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  26.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  26.9k|    }                                                  \
  |  | 3667|   441k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   441k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|   414k|                                             specs, value, loc));
 6152|       |
 6153|   414k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 414k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|   414k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|   414k|        std::ptrdiff_t postfix_width = 0;
 6162|   414k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 410k, False: 4.75k]
  ------------------
 6163|   410k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   410k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   410k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   410k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   410k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 410k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   410k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   410k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   410k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|   410k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|   410k|                                 value_width));
 6167|   410k|            std::tie(it, postfix_width) = postfix_result;
 6168|   410k|        }
 6169|       |
 6170|   414k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|   414k|                                                 value_width, postfix_width);
 6172|   414k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 414k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|   414k|        return it;
 6177|   414k|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3679|  1.08M|    {
 3680|  1.08M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.08M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.08M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3681|       |
 3682|  1.08M|        const std::ptrdiff_t sign_len =
 3683|  1.08M|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3683:13): [True: 250k, False: 832k]
  ------------------
 3684|       |
 3685|  1.08M|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3668|  1.08M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.08M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.08M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.08M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20.4k, False: 1.06M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  20.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  20.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  20.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  20.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  20.4k|    }                                                  \
  |  |  |  | 3667|  1.08M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3686|  1.06M|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3687|  1.08M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4158|   441k|    {
 4159|   441k|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|   441k|#if !SCN_DISABLE_LOCALE
 4162|   441k|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 125k, False: 316k]
  ------------------
 4163|   125k|            return read_impl<Range>(
 4164|   125k|                range, rd,
 4165|   125k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|   125k|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|   125k|                },
 4168|   125k|                value, loc);
 4169|   125k|        }
 4170|   316k|#endif
 4171|       |
 4172|   316k|        return read_impl<Range>(
 4173|   316k|            range, rd,
 4174|   316k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   316k|                return r.read_source(SCN_FWD(args)...);
 4176|   316k|            },
 4177|   316k|            value);
 4178|   441k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4194|   611k|    {
 4195|   611k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|   611k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   611k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 32.8k, False: 578k]
  |  |  ------------------
  ------------------
 4197|  32.8k|            return unexpected(r.error());
 4198|  32.8k|        }
 4199|       |
 4200|   578k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   578k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   578k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   578k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   578k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.00k, False: 576k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.00k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.00k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.00k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.00k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.00k|    }                                                  \
  |  |  |  | 3667|   578k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   576k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|   576k|        return ranges::next(range.begin(), n);
 4202|   578k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   125k|        : m_fptr([](storage fn,
  743|   125k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   125k|              cvref<T> obj = *get<T>(fn);
  745|   125k|              if constexpr (std::is_void_v<R>) {
  746|   125k|                  obj(static_cast<decltype(args)>(args)...);
  747|   125k|              }
  748|   125k|              else {
  749|   125k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   125k|              }
  751|   125k|          }),
  752|   125k|          m_storage(std::addressof(f))
  753|   125k|    {
  754|   125k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   125k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   125k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   125k|              else {
  749|   125k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   125k|              }
  751|   125k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   125k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   125k|        else if constexpr (std::is_object_v<T>) {
  688|   125k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   125k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4165|   125k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|   125k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   125k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|   125k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   125k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   125k|        {
  662|   125k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   316k|        : m_fptr([](storage fn,
  743|   316k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   316k|              cvref<T> obj = *get<T>(fn);
  745|   316k|              if constexpr (std::is_void_v<R>) {
  746|   316k|                  obj(static_cast<decltype(args)>(args)...);
  747|   316k|              }
  748|   316k|              else {
  749|   316k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   316k|              }
  751|   316k|          }),
  752|   316k|          m_storage(std::addressof(f))
  753|   316k|    {
  754|   316k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   316k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   316k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   316k|              else {
  749|   316k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   316k|              }
  751|   316k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   316k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   316k|        else if constexpr (std::is_object_v<T>) {
  688|   316k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   316k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4174|   316k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   316k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   316k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|   316k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   316k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   316k|        {
  662|   316k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4158|   368k|    {
 4159|   368k|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|   368k|#if !SCN_DISABLE_LOCALE
 4162|   368k|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 102k, False: 266k]
  ------------------
 4163|   102k|            return read_impl<Range>(
 4164|   102k|                range, rd,
 4165|   102k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|   102k|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|   102k|                },
 4168|   102k|                value, loc);
 4169|   102k|        }
 4170|   266k|#endif
 4171|       |
 4172|   266k|        return read_impl<Range>(
 4173|   266k|            range, rd,
 4174|   266k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   266k|                return r.read_source(SCN_FWD(args)...);
 4176|   266k|            },
 4177|   266k|            value);
 4178|   368k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4194|   522k|    {
 4195|   522k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|   522k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   522k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.9k, False: 504k]
  |  |  ------------------
  ------------------
 4197|  17.9k|            return unexpected(r.error());
 4198|  17.9k|        }
 4199|       |
 4200|   504k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   504k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   504k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   504k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   504k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 18.4k, False: 485k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  18.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  18.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  18.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  18.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  18.4k|    }                                                  \
  |  |  |  | 3667|   504k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   485k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|   485k|        return ranges::next(range.begin(), n);
 4202|   504k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   102k|        : m_fptr([](storage fn,
  743|   102k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   102k|              cvref<T> obj = *get<T>(fn);
  745|   102k|              if constexpr (std::is_void_v<R>) {
  746|   102k|                  obj(static_cast<decltype(args)>(args)...);
  747|   102k|              }
  748|   102k|              else {
  749|   102k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   102k|              }
  751|   102k|          }),
  752|   102k|          m_storage(std::addressof(f))
  753|   102k|    {
  754|   102k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   102k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   102k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   102k|              else {
  749|   102k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   102k|              }
  751|   102k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   102k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   102k|        else if constexpr (std::is_object_v<T>) {
  688|   102k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   102k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4165|   102k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|   102k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|   102k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   102k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   102k|        {
  662|   102k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   266k|        : m_fptr([](storage fn,
  743|   266k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   266k|              cvref<T> obj = *get<T>(fn);
  745|   266k|              if constexpr (std::is_void_v<R>) {
  746|   266k|                  obj(static_cast<decltype(args)>(args)...);
  747|   266k|              }
  748|   266k|              else {
  749|   266k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   266k|              }
  751|   266k|          }),
  752|   266k|          m_storage(std::addressof(f))
  753|   266k|    {
  754|   266k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   266k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   266k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   266k|              else {
  749|   266k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   266k|              }
  751|   266k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   266k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   266k|        else if constexpr (std::is_object_v<T>) {
  688|   266k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   266k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4174|   266k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   266k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   266k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|   266k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   266k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   266k|        {
  662|   266k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6181|   452k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|   452k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|   452k|            auto rd = make_reader<T, char_type>();
 6195|   452k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   452k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 452k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|   452k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 452k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|   452k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|   452k|                return impl(rd, range, value);
 6202|   452k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   452k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|   452k|    {
 6113|   452k|        const bool need_skipped_width =
 6114|   452k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 452k]
  |  Branch (6114:33): [True: 0, False: 452k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   452k|        auto it = rng.begin();
 6118|   452k|        std::ptrdiff_t prefix_width = 0;
 6119|   452k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 452k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   452k|        else {
 6127|   452k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   452k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   452k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   452k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   452k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.21k, False: 445k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  6.21k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  6.21k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  6.21k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  6.21k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  6.21k|    }                                                  \
  |  |  |  | 3667|   452k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   445k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   445k|            std::tie(it, prefix_width) = prefix_result;
 6129|   445k|        }
 6130|   445k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   445k|        std::ptrdiff_t value_width = 0;
 6134|   445k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 445k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   445k|        else {
 6150|   445k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   445k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   445k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   445k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 26.5k, False: 419k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  26.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  26.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  26.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  26.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  26.5k|    }                                                  \
  |  | 3667|   445k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   445k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|   419k|                                             specs, value, loc));
 6152|       |
 6153|   419k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 419k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|   419k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|   419k|        std::ptrdiff_t postfix_width = 0;
 6162|   419k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 414k, False: 5.04k]
  ------------------
 6163|   414k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   414k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   414k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   414k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   414k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 414k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   414k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   414k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   414k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|   414k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|   414k|                                 value_width));
 6167|   414k|            std::tie(it, postfix_width) = postfix_result;
 6168|   414k|        }
 6169|       |
 6170|   419k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|   419k|                                                 value_width, postfix_width);
 6172|   419k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 419k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|   419k|        return it;
 6177|   419k|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3679|  1.09M|    {
 3680|  1.09M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.09M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.09M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3681|       |
 3682|  1.09M|        const std::ptrdiff_t sign_len =
 3683|  1.09M|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3683:13): [True: 255k, False: 838k]
  ------------------
 3684|       |
 3685|  1.09M|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3668|  1.09M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.09M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.09M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.09M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 18.2k, False: 1.07M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  18.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  18.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  18.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  18.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  18.2k|    }                                                  \
  |  |  |  | 3667|  1.09M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.07M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3686|  1.07M|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3687|  1.09M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4158|   445k|    {
 4159|   445k|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|   445k|#if !SCN_DISABLE_LOCALE
 4162|   445k|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 127k, False: 318k]
  ------------------
 4163|   127k|            return read_impl<Range>(
 4164|   127k|                range, rd,
 4165|   127k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|   127k|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|   127k|                },
 4168|   127k|                value, loc);
 4169|   127k|        }
 4170|   318k|#endif
 4171|       |
 4172|   318k|        return read_impl<Range>(
 4173|   318k|            range, rd,
 4174|   318k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   318k|                return r.read_source(SCN_FWD(args)...);
 4176|   318k|            },
 4177|   318k|            value);
 4178|   445k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4194|   617k|    {
 4195|   617k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|   617k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   617k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 33.7k, False: 583k]
  |  |  ------------------
  ------------------
 4197|  33.7k|            return unexpected(r.error());
 4198|  33.7k|        }
 4199|       |
 4200|   583k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   583k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   583k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   583k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   583k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 606, False: 583k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    606|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    606|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    606|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    606|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    606|    }                                                  \
  |  |  |  | 3667|   583k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   583k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|   583k|        return ranges::next(range.begin(), n);
 4202|   583k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   127k|        : m_fptr([](storage fn,
  743|   127k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   127k|              cvref<T> obj = *get<T>(fn);
  745|   127k|              if constexpr (std::is_void_v<R>) {
  746|   127k|                  obj(static_cast<decltype(args)>(args)...);
  747|   127k|              }
  748|   127k|              else {
  749|   127k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   127k|              }
  751|   127k|          }),
  752|   127k|          m_storage(std::addressof(f))
  753|   127k|    {
  754|   127k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   127k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   127k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   127k|              else {
  749|   127k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   127k|              }
  751|   127k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   127k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   127k|        else if constexpr (std::is_object_v<T>) {
  688|   127k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   127k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4165|   127k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|   127k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   127k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|   127k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   127k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   127k|        {
  662|   127k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   318k|        : m_fptr([](storage fn,
  743|   318k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   318k|              cvref<T> obj = *get<T>(fn);
  745|   318k|              if constexpr (std::is_void_v<R>) {
  746|   318k|                  obj(static_cast<decltype(args)>(args)...);
  747|   318k|              }
  748|   318k|              else {
  749|   318k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   318k|              }
  751|   318k|          }),
  752|   318k|          m_storage(std::addressof(f))
  753|   318k|    {
  754|   318k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   318k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   318k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   318k|              else {
  749|   318k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   318k|              }
  751|   318k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   318k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   318k|        else if constexpr (std::is_object_v<T>) {
  688|   318k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   318k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4174|   318k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   318k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   318k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|   318k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   318k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   318k|        {
  662|   318k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4158|   372k|    {
 4159|   372k|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|   372k|#if !SCN_DISABLE_LOCALE
 4162|   372k|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 103k, False: 268k]
  ------------------
 4163|   103k|            return read_impl<Range>(
 4164|   103k|                range, rd,
 4165|   103k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|   103k|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|   103k|                },
 4168|   103k|                value, loc);
 4169|   103k|        }
 4170|   268k|#endif
 4171|       |
 4172|   268k|        return read_impl<Range>(
 4173|   268k|            range, rd,
 4174|   268k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   268k|                return r.read_source(SCN_FWD(args)...);
 4176|   268k|            },
 4177|   268k|            value);
 4178|   372k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4194|   528k|    {
 4195|   528k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|   528k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   528k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.3k, False: 510k]
  |  |  ------------------
  ------------------
 4197|  18.3k|            return unexpected(r.error());
 4198|  18.3k|        }
 4199|       |
 4200|   510k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   510k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   510k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   510k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   510k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 17.6k, False: 492k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  17.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  17.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  17.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  17.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  17.6k|    }                                                  \
  |  |  |  | 3667|   510k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   492k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|   492k|        return ranges::next(range.begin(), n);
 4202|   510k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   103k|        : m_fptr([](storage fn,
  743|   103k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   103k|              cvref<T> obj = *get<T>(fn);
  745|   103k|              if constexpr (std::is_void_v<R>) {
  746|   103k|                  obj(static_cast<decltype(args)>(args)...);
  747|   103k|              }
  748|   103k|              else {
  749|   103k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   103k|              }
  751|   103k|          }),
  752|   103k|          m_storage(std::addressof(f))
  753|   103k|    {
  754|   103k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   103k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   103k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   103k|              else {
  749|   103k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   103k|              }
  751|   103k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   103k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   103k|        else if constexpr (std::is_object_v<T>) {
  688|   103k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   103k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4165|   103k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|   103k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|   103k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   103k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   103k|        {
  662|   103k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   268k|        : m_fptr([](storage fn,
  743|   268k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   268k|              cvref<T> obj = *get<T>(fn);
  745|   268k|              if constexpr (std::is_void_v<R>) {
  746|   268k|                  obj(static_cast<decltype(args)>(args)...);
  747|   268k|              }
  748|   268k|              else {
  749|   268k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   268k|              }
  751|   268k|          }),
  752|   268k|          m_storage(std::addressof(f))
  753|   268k|    {
  754|   268k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   268k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   268k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   268k|              else {
  749|   268k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   268k|              }
  751|   268k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   268k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   268k|        else if constexpr (std::is_object_v<T>) {
  688|   268k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   268k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4174|   268k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   268k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   268k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|   268k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   268k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   268k|        {
  662|   268k|        }
_ZN3scn2v34impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1038|  1.83M|{
 1039|       |    if constexpr (ranges::contiguous_range<Range> &&
 1040|       |                  ranges::sized_range<Range>) {
 1041|       |        return r;
 1042|       |    }
 1043|       |    else if constexpr (std::is_same_v<
 1044|       |                           ranges::const_iterator_t<Range>,
 1045|       |                           typename detail::basic_scan_buffer<
 1046|  1.83M|                               detail::char_t<Range>>::forward_iterator>) {
 1047|       |        if constexpr (ranges::common_range<Range>) {
 1048|       |            auto seg = r.begin().contiguous_segment();
 1049|       |            auto dist =
 1050|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|       |            return seg.substr(0, std::min(seg.size(), dist));
 1052|       |        }
 1053|  1.83M|        else {
 1054|  1.83M|            return r.begin().contiguous_segment();
 1055|  1.83M|        }
 1056|       |    }
 1057|       |    else {
 1058|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1059|       |    }
 1060|  1.83M|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2048|  1.62M|{
 2049|  1.62M|    auto it = range.begin();
 2050|  3.13M|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 3.11M, False: 17.7k]
  ------------------
 2051|  3.11M|        const auto val =
 2052|  3.11M|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|  3.11M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  3.11M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.09M, False: 20.5k]
  |  |  ------------------
  ------------------
 2054|  3.09M|            const auto cp = detail::decode_code_point_exhaustive(
 2055|  3.09M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|  3.09M|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 1.61M, False: 1.48M]
  ------------------
 2057|  1.61M|                return it;
 2058|  1.61M|            }
 2059|  3.09M|        }
 2060|  1.50M|        it = val.iterator;
 2061|  1.50M|    }
 2062|       |
 2063|  17.7k|    return it;
 2064|  1.62M|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1886|  3.11M|{
 1887|  3.11M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  3.11M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.11M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1888|  3.11M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1889|       |
 1890|  3.11M|    auto it = range.begin();
 1891|  3.11M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1892|       |
 1893|  3.11M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  3.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.5k, False: 3.09M]
  |  |  ------------------
  ------------------
 1894|  20.5k|        ++it;
 1895|  20.5k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1896|  20.5k|        return {it, {}};
 1897|  20.5k|    }
 1898|       |
 1899|  3.09M|    if (len == 1) {
  ------------------
  |  Branch (1899:9): [True: 3.06M, False: 26.8k]
  ------------------
 1900|  3.06M|        ++it;
 1901|  3.06M|        return {it, string_type(1, *range.begin())};
 1902|  3.06M|    }
 1903|       |
 1904|  26.8k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1905|  26.8k|    return {it, string_type{range.begin(), it}};
 1906|  3.09M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1154|  20.5k|{
 1155|  20.5k|    auto it = input.begin();
 1156|   203k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 202k, False: 1.47k]
  ------------------
 1157|   202k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 19.1k, False: 183k]
  ------------------
 1158|  19.1k|            break;
 1159|  19.1k|        }
 1160|   202k|    }
 1161|  20.5k|    return it;
 1162|  20.5k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  26.8k|    {
  283|  26.8k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  26.8k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  26.8k|    {
  252|  26.8k|        constexpr iter_difference_t<I> zero{0};
  253|  26.8k|        iter_difference_t<I> counter{0};
  254|       |
  255|  81.4k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 55.5k, False: 25.8k]
  |  Branch (255:30): [True: 54.5k, False: 1.06k]
  ------------------
  256|  54.5k|            ++i;
  257|  54.5k|            ++counter;
  258|  54.5k|        }
  259|       |
  260|  26.8k|        return counter;
  261|  26.8k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1877|  3.11M|    {
 1878|  3.11M|        return !codepoint.empty();
 1879|  3.11M|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2069|  1.62M|{
 2070|  1.62M|    return read_until_code_point(range, std::not_fn(pred));
 2071|  1.62M|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2939|  1.83M|{
 2940|  1.83M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 1.83M, False: 0]
  ------------------
 2941|  1.83M|        auto it = read_while_classic_space(range);
 2942|  1.83M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|  1.83M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.83M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.7k, False: 1.81M]
  |  |  ------------------
  ------------------
 2944|  17.7k|            return unexpected(e);
 2945|  17.7k|        }
 2946|       |
 2947|  1.81M|        return it;
 2948|  1.83M|    }
 2949|       |
 2950|      0|    return read_while_classic_space(range);
 2951|  1.83M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2104|  1.83M|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|       |        auto buf = make_contiguous_buffer(range);
 2109|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|       |        return ranges::next(range.begin(),
 2111|       |                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|  1.83M|    else {
 2114|  1.83M|        auto it = range.begin();
 2115|       |
 2116|  1.83M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|  1.83M|            auto seg = get_contiguous_beginning(range);
 2118|  1.83M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|  1.83M|                seg_it != seg.end()) {
  ------------------
  |  Branch (2119:17): [True: 200k, False: 1.62M]
  ------------------
 2120|   200k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|   200k|            }
 2122|  1.62M|            ranges::advance(it, seg.size());
 2123|  1.62M|        }
 2124|       |
 2125|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  1.83M|            return detail::is_cp_space(cp);
 2127|  1.83M|        });
 2128|  1.83M|    }
 2129|  1.83M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|  1.62M|        : m_fptr([](storage fn,
  743|  1.62M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.62M|              cvref<T> obj = *get<T>(fn);
  745|  1.62M|              if constexpr (std::is_void_v<R>) {
  746|  1.62M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.62M|              }
  748|  1.62M|              else {
  749|  1.62M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.62M|              }
  751|  1.62M|          }),
  752|  1.62M|          m_storage(std::addressof(f))
  753|  1.62M|    {
  754|  1.62M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  3.09M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.09M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  3.09M|              else {
  749|  3.09M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.09M|              }
  751|  3.09M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  3.09M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  3.09M|        else if constexpr (std::is_object_v<T>) {
  688|  3.09M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  3.09M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2125|  3.09M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  3.09M|            return detail::is_cp_space(cp);
 2127|  3.09M|        });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  1.62M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.62M|        {
  662|  1.62M|        }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|   881k|{
  981|       |    if constexpr (ranges::contiguous_range<Range> &&
  982|       |                  ranges::sized_range<Range>) {
  983|       |        return true;
  984|       |    }
  985|       |    else if constexpr (std::is_same_v<
  986|       |                           ranges::const_iterator_t<Range>,
  987|       |                           typename detail::basic_scan_buffer<
  988|   881k|                               detail::char_t<Range>>::forward_iterator>) {
  989|   881k|        auto beg = r.begin();
  990|   881k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 881k, False: 0]
  ------------------
  991|   881k|            return false;
  992|   881k|        }
  993|       |        if constexpr (ranges::common_range<Range>) {
  994|       |            return beg.contiguous_segment().end() ==
  995|       |                   ranges::end(r).contiguous_segment().end();
  996|       |        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|       |    }
 1005|       |    else {
 1006|       |        return false;
 1007|       |    }
 1008|   881k|}
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|  6.26M|    {
  763|  6.26M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  6.26M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  6.26M|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1844|  2.32M|{
 1845|  2.32M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  2.32M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.32M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1846|       |
 1847|       |    if constexpr (ranges::sized_range<Range>) {
 1848|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1849|       |        if (sz < count) {
 1850|       |            return unexpected(eof_error::eof);
 1851|       |        }
 1852|       |
 1853|       |        return ranges::next(range.begin(), count);
 1854|       |    }
 1855|  2.32M|    else {
 1856|  2.32M|        auto it = range.begin();
 1857|  2.32M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1857:13): [True: 1.40M, False: 911k]
  ------------------
 1858|  1.40M|            return ranges::next(it, count);
 1859|  1.40M|        }
 1860|       |
 1861|  3.54M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1861:36): [True: 2.69M, False: 851k]
  ------------------
 1862|  2.69M|            if (it == range.end()) {
  ------------------
  |  Branch (1862:17): [True: 60.0k, False: 2.63M]
  ------------------
 1863|  60.0k|                return unexpected(eof_error::eof);
 1864|  60.0k|            }
 1865|  2.69M|        }
 1866|       |
 1867|   851k|        return it;
 1868|   911k|    }
 1869|  2.32M|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1094|  2.32M|{
 1095|       |    if constexpr (ranges::sized_range<Range>) {
 1096|       |        return r.size();
 1097|       |    }
 1098|       |    else if constexpr (std::is_same_v<
 1099|       |                           ranges::const_iterator_t<Range>,
 1100|       |                           typename detail::basic_scan_buffer<
 1101|  2.32M|                               detail::char_t<Range>>::forward_iterator>) {
 1102|       |        if constexpr (ranges::common_range<Range>) {
 1103|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|       |        }
 1105|  2.32M|        else {
 1106|  2.32M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1106:17): [True: 2.32M, False: 0]
  ------------------
 1107|  2.32M|                return static_cast<size_t>(
 1108|  2.32M|                    r.begin().parent()->chars_available() -
 1109|  2.32M|                    r.begin().position());
 1110|  2.32M|            }
 1111|      0|            return r.begin().contiguous_segment().size();
 1112|  2.32M|        }
 1113|       |    }
 1114|       |    else {
 1115|       |        return 0;
 1116|       |    }
 1117|  2.32M|}
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  2.05M|        : m_fptr([](storage fn,
  743|  2.05M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.05M|              cvref<T> obj = *get<T>(fn);
  745|  2.05M|              if constexpr (std::is_void_v<R>) {
  746|  2.05M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.05M|              }
  748|  2.05M|              else {
  749|  2.05M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.05M|              }
  751|  2.05M|          }),
  752|  2.05M|          m_storage(std::addressof(f))
  753|  2.05M|    {
  754|  2.05M|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEwE_clESK_w:
  743|  3.13M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.13M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  3.13M|              else {
  749|  3.13M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.13M|              }
  751|  3.13M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  3.13M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  3.13M|        else if constexpr (std::is_object_v<T>) {
  688|  3.13M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  3.13M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  2.05M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.05M|        {
  662|  2.05M|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6025|   644k|    {
 6026|   644k|        const bool need_skipped_width =
 6027|   644k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 0, False: 644k]
  |  Branch (6027:33): [True: 0, False: 644k]
  ------------------
 6028|   644k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|   644k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 0, False: 644k]
  ------------------
 6032|   644k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 0, False: 644k]
  ------------------
 6033|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6034|      0|                             need_skipped_width);
 6035|      0|        }
 6036|   644k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 644k, False: 0]
  |  Branch (6036:56): [True: 644k, False: 0]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|   644k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 0, False: 644k]
  ------------------
 6040|      0|                auto max_width_view = take_width(rng, specs.precision);
 6041|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|      0|                                  .transform_error(make_eof_scan_error));
 6043|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|      0|            }
 6045|  1.28M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|   644k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   644k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   644k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   644k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.87k, False: 641k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.87k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.87k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.87k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.87k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.87k|    }                                                  \
  |  |  |  | 3667|   644k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   641k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|  1.28M|                            make_eof_scan_error));
 6047|       |
 6048|  1.28M|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 0, False: 641k]
  ------------------
 6049|      0|                return result_type{
 6050|      0|                    it,
 6051|      0|                    calculate_text_width(make_contiguous_buffer(
 6052|      0|                                             ranges::subrange{rng.begin(), it})
 6053|      0|                                             .view())};
 6054|      0|            }
 6055|   641k|            return result_type{it, 0};
 6056|  1.28M|        }
 6057|       |
 6058|      0|        return result_type{rng.begin(), 0};
 6059|   644k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1963|  1.53M|{
 1964|  1.53M|    return read_until_code_unit(range, std::not_fn(pred));
 1965|  1.53M|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1944|  1.53M|{
 1945|       |    if constexpr (ranges::common_range<Range>) {
 1946|       |        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|  1.53M|    else {
 1949|  1.53M|        auto first = range.begin();
 1950|  2.35M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1950:16): [True: 2.34M, False: 3.27k]
  ------------------
 1951|  2.34M|            if (pred(*first)) {
  ------------------
  |  Branch (1951:17): [True: 1.52M, False: 820k]
  ------------------
 1952|  1.52M|                return first;
 1953|  1.52M|            }
 1954|  2.34M|        }
 1955|  3.27k|        return first;
 1956|  1.53M|    }
 1957|  1.53M|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  1.08M|    {
  108|  1.08M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  1.08M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  1.08M|    {
   94|  1.08M|        iter_difference_t<I> counter{0};
   95|  2.89M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 1.80M, False: 1.08M]
  ------------------
   96|  1.80M|            ++i;
   97|  1.80M|            ++counter;
   98|  1.80M|        }
   99|  1.08M|        return counter;
  100|  1.08M|    }
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1767|   314k|    {
 1768|   314k|        auto stdloc = loc.get<std::locale>();
 1769|   314k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1770|   314k|        grouping = numpunct.grouping();
 1771|   314k|        thousands_sep =
 1772|   314k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1772:13): [True: 0, False: 314k]
  ------------------
 1773|   314k|        decimal_point = numpunct.decimal_point();
 1774|   314k|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1704|   314k|{
 1705|   314k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1705:9): [True: 314k, False: 0]
  ------------------
 1706|   314k|        return std::use_facet<Facet>(stdloc);
 1707|   314k|    }
 1708|      0|    stdloc = std::locale(stdloc, new Facet{});
 1709|      0|    return std::use_facet<Facet>(stdloc);
 1710|   314k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1833|  2.08M|{
 1834|  2.08M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.08M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.15k, False: 2.08M]
  |  |  ------------------
  ------------------
 1835|  2.15k|        return unexpected(e);
 1836|  2.15k|    }
 1837|       |
 1838|  2.08M|    return ranges::next(range.begin());
 1839|  2.08M|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  3.19M|{
  950|  3.19M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  3.19M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.00k, False: 3.19M]
  |  |  ------------------
  ------------------
  951|  6.00k|        return eof_error::eof;
  952|  6.00k|    }
  953|  3.19M|    return eof_error::good;
  954|  3.19M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  4.72M|{
  944|  4.72M|    return is_range_eof(r.begin(), r.end());
  945|  4.72M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  4.72M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  4.72M|    {
  937|  4.72M|        return begin == end;
  938|  4.72M|    }
  939|  4.72M|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|  2.08M|    {
  296|  2.08M|        ++x;
  297|  2.08M|        return x;
  298|  2.08M|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3129|   896k|{
 3130|   896k|    auto r = read_one_of_code_unit(range, "+-");
 3131|   896k|    if (!r) {
  ------------------
  |  Branch (3131:9): [True: 886k, False: 9.33k]
  ------------------
 3132|   886k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3132:13): [True: 886k, False: 91]
  ------------------
 3133|   886k|            return std::pair{range.begin(), sign_type::default_sign};
 3134|   886k|        }
 3135|     91|        return unexpected(eof_error::eof);
 3136|   886k|    }
 3137|       |
 3138|  9.33k|    auto& it = *r;
 3139|  9.33k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3139:9): [True: 7.92k, False: 1.40k]
  ------------------
 3140|  7.92k|        return std::pair{it, sign_type::minus_sign};
 3141|  7.92k|    }
 3142|  1.40k|    return std::pair{it, sign_type::plus_sign};
 3143|  9.33k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2260|  1.44M|{
 2261|  1.44M|    auto it = read_code_unit(range);
 2262|  1.44M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.44M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.19k, False: 1.44M]
  |  |  ------------------
  ------------------
 2263|  1.19k|        return unexpected(make_eof_parse_error(it.error()));
 2264|  1.19k|    }
 2265|       |
 2266|  2.89M|    for (auto ch : str) {
  ------------------
  |  Branch (2266:18): [True: 2.89M, False: 1.41M]
  ------------------
 2267|  2.89M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2267:13): [True: 28.2k, False: 2.86M]
  ------------------
 2268|  28.2k|            return *it;
 2269|  28.2k|        }
 2270|  2.89M|    }
 2271|       |
 2272|  1.41M|    return unexpected(parse_error::error);
 2273|  1.44M|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2219|  2.32M|{
 2220|  2.32M|    using char_type = detail::char_t<Range>;
 2221|       |
 2222|       |    if constexpr (ranges::contiguous_range<Range> &&
 2223|       |                  std::is_same_v<char_type, char>) {
 2224|       |        if (range.size() < str.size()) {
 2225|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2226|       |        }
 2227|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2228|       |            return unexpected(parse_error::error);
 2229|       |        }
 2230|       |        return ranges::next(range.begin(), str.size());
 2231|       |    }
 2232|  2.32M|    else {
 2233|  2.32M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|  2.32M|            if (ch < 'A' || ch > 'Z') {
 2235|  2.32M|                return ch;
 2236|  2.32M|            }
 2237|  2.32M|            return static_cast<char_type>(ch +
 2238|  2.32M|                                          static_cast<char_type>('a' - 'A'));
 2239|  2.32M|        };
 2240|       |
 2241|  2.32M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|  2.32M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.32M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.32M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.32M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 60.0k, False: 2.26M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  60.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  60.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  60.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  60.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  60.0k|    }                                                  \
  |  |  |  | 3667|  2.32M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.26M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2242|  2.26M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2243|  2.26M|                        .transform_error(make_eof_parse_error));
 2244|       |
 2245|  2.26M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  2.26M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.25M, False: 1.46k]
  |  |  ------------------
  ------------------
 2246|  2.26M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2247|  2.26M|                    return ascii_tolower(a) ==
 2248|  2.26M|                           static_cast<detail::char_t<Range>>(b);
 2249|  2.26M|                }))) {
 2250|  2.25M|            return unexpected(parse_error::error);
 2251|  2.25M|        }
 2252|       |
 2253|  1.46k|        return it;
 2254|  2.26M|    }
 2255|  2.32M|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlwE_clEw:
 2233|  2.64M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|  2.64M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2234:17): [True: 2.07M, False: 572k]
  |  Branch (2234:29): [True: 554k, False: 17.5k]
  ------------------
 2235|  2.62M|                return ch;
 2236|  2.62M|            }
 2237|  17.5k|            return static_cast<char_type>(ch +
 2238|  17.5k|                                          static_cast<char_type>('a' - 'A'));
 2239|  2.64M|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2134|   635k|{
 2135|   635k|    auto it = read_code_unit(range);
 2136|   635k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   635k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 952, False: 634k]
  |  |  ------------------
  ------------------
 2137|    952|        return unexpected(make_eof_parse_error(it.error()));
 2138|    952|    }
 2139|       |
 2140|   634k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   634k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 631k, False: 3.27k]
  |  |  ------------------
  ------------------
 2141|   634k|                     static_cast<detail::char_t<Range>>(ch))) {
 2142|   631k|        return unexpected(parse_error::error);
 2143|   631k|    }
 2144|       |
 2145|  3.27k|    return *it;
 2146|   634k|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1983|  1.53M|{
 1984|  1.53M|    auto it = read_while_code_unit(range, pred);
 1985|  1.53M|    if (it == range.begin()) {
  ------------------
  |  Branch (1985:9): [True: 876k, False: 655k]
  ------------------
 1986|   876k|        return unexpected(parse_error::error);
 1987|   876k|    }
 1988|   655k|    return it;
 1989|  1.53M|}
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1608|   630k|    {
 1609|   630k|        using value_t = ranges::range_value_t<Range>;
 1610|       |
 1611|       |        if constexpr (ranges::borrowed_range<Range> &&
 1612|       |                      ranges::contiguous_range<Range> &&
 1613|       |                      ranges::sized_range<Range>) {
 1614|       |            m_storage.reset();
 1615|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1616|       |        }
 1617|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1618|       |                                          std::basic_string<CharT>>) {
 1619|       |            m_storage.emplace(SCN_FWD(range));
 1620|       |            m_view = string_view_type{*m_storage};
 1621|       |        }
 1622|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1623|       |                                          typename detail::basic_scan_buffer<
 1624|       |                                              value_t>::forward_iterator> &&
 1625|   630k|                           ranges::common_range<Range>) {
 1626|   630k|            auto beg_seg = range.begin().contiguous_segment();
 1627|   630k|            auto end_seg = range.end().contiguous_segment();
 1628|   630k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|   630k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 21.0k, False: 609k]
  |  |  ------------------
  ------------------
 1629|   630k|                             detail::to_address(end_seg.end()))) {
 1630|  21.0k|                auto& str = m_storage.emplace();
 1631|  21.0k|                str.reserve(range.end().position() - range.begin().position());
 1632|  21.0k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1633|  21.0k|                m_view = string_view_type{str};
 1634|  21.0k|                return;
 1635|  21.0k|            }
 1636|       |
 1637|   609k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1638|   609k|                                                            end_seg.data());
 1639|   609k|            m_storage.reset();
 1640|       |        }
 1641|       |        else {
 1642|       |            auto& str = m_storage.emplace();
 1643|       |            if constexpr (ranges::sized_range<Range>) {
 1644|       |                str.reserve(range.size());
 1645|       |            }
 1646|       |            if constexpr (ranges::common_range<Range>) {
 1647|       |                std::copy(ranges::begin(range), ranges::end(range),
 1648|       |                          std::back_inserter(str));
 1649|       |            }
 1650|       |            else {
 1651|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1652|       |                     ++it) {
 1653|       |                    str.push_back(*it);
 1654|       |                }
 1655|       |            }
 1656|       |            m_view = string_view_type{str};
 1657|       |        }
 1658|   630k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1569|  5.56M|    {
 1570|  5.56M|        return m_view;
 1571|  5.56M|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1559|  3.51M|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6067|   446k|    {
 6068|   446k|        const bool need_skipped_width =
 6069|   446k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6069:13): [True: 0, False: 446k]
  |  Branch (6069:33): [True: 0, False: 446k]
  ------------------
 6070|   446k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6071|       |
 6072|   446k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6072:13): [True: 0, False: 446k]
  ------------------
 6073|   446k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6073:13): [True: 0, False: 446k]
  ------------------
 6074|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6074:17): [True: 0, False: 0]
  ------------------
 6075|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6075:17): [True: 0, False: 0]
  ------------------
 6076|      0|                return result_type{rng.begin(), 0};
 6077|      0|            }
 6078|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6079|      0|                             specs.fill, need_skipped_width);
 6080|      0|        }
 6081|   446k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6081:13): [True: 446k, False: 0]
  ------------------
 6082|   446k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6082:13): [True: 0, False: 446k]
  ------------------
 6083|   446k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6083:15): [True: 0, False: 0]
  |  Branch (6083:35): [True: 0, False: 0]
  ------------------
 6084|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6084:15): [True: 0, False: 0]
  ------------------
 6085|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6085:15): [True: 0, False: 0]
  ------------------
 6086|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                const auto initial_width =
 6088|      0|                    specs.precision - prefix_width - value_width;
 6089|      0|                auto max_width_view = take_width(rng, initial_width);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6093|      0|            }
 6094|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|      0|                            make_eof_scan_error));
 6096|       |
 6097|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|      0|            return result_type{it, 0};
 6105|      0|        }
 6106|   446k|        return result_type{rng.begin(), 0};
 6107|   446k|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1844|  2.32M|{
 1845|  2.32M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  2.32M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.32M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1846|       |
 1847|  2.32M|    if constexpr (ranges::sized_range<Range>) {
 1848|  2.32M|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1849|  2.32M|        if (sz < count) {
  ------------------
  |  Branch (1849:13): [True: 60.2k, False: 2.26M]
  ------------------
 1850|  60.2k|            return unexpected(eof_error::eof);
 1851|  60.2k|        }
 1852|       |
 1853|  2.26M|        return ranges::next(range.begin(), count);
 1854|       |    }
 1855|       |    else {
 1856|       |        auto it = range.begin();
 1857|       |        if (guaranteed_minimum_size(range) >= count) {
 1858|       |            return ranges::next(it, count);
 1859|       |        }
 1860|       |
 1861|       |        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1862|       |            if (it == range.end()) {
 1863|       |                return unexpected(eof_error::eof);
 1864|       |            }
 1865|       |        }
 1866|       |
 1867|       |        return it;
 1868|       |    }
 1869|  2.32M|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1886|  2.71M|{
 1887|  2.71M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  2.71M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.71M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1888|  2.71M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1889|       |
 1890|  2.71M|    auto it = range.begin();
 1891|  2.71M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1892|       |
 1893|  2.71M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  2.71M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.71M]
  |  |  ------------------
  ------------------
 1894|      0|        ++it;
 1895|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1896|      0|        return {it, {}};
 1897|      0|    }
 1898|       |
 1899|  2.71M|    if (len == 1) {
  ------------------
  |  Branch (1899:9): [True: 2.71M, False: 0]
  ------------------
 1900|  2.71M|        ++it;
 1901|  2.71M|        return {it, string_type(1, *range.begin())};
 1902|  2.71M|    }
 1903|       |
 1904|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1905|      0|    return {it, string_type{range.begin(), it}};
 1906|  2.71M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|  5.03M|{
  944|  5.03M|    return is_range_eof(r.begin(), r.end());
  945|  5.03M|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|  5.03M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  5.03M|    {
  937|  5.03M|        return begin == end;
  938|  5.03M|    }
  939|  5.03M|}
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|   566k|    {
  190|   566k|        i = std::move(bound);
  191|   566k|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1877|  2.71M|    {
 1878|  2.71M|        return !codepoint.empty();
 1879|  2.71M|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|  2.32M|{
  950|  2.32M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  2.32M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.38k, False: 2.31M]
  |  |  ------------------
  ------------------
  951|  4.38k|        return eof_error::eof;
  952|  4.38k|    }
  953|  2.31M|    return eof_error::good;
  954|  2.32M|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1833|  1.20M|{
 1834|  1.20M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.20M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 524, False: 1.20M]
  |  |  ------------------
  ------------------
 1835|    524|        return unexpected(e);
 1836|    524|    }
 1837|       |
 1838|  1.20M|    return ranges::next(range.begin());
 1839|  1.20M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  1.20M|    {
  296|  1.20M|        ++x;
  297|  1.20M|        return x;
  298|  1.20M|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3129|   884k|{
 3130|   884k|    auto r = read_one_of_code_unit(range, "+-");
 3131|   884k|    if (!r) {
  ------------------
  |  Branch (3131:9): [True: 878k, False: 5.60k]
  ------------------
 3132|   878k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3132:13): [True: 878k, False: 30]
  ------------------
 3133|   878k|            return std::pair{range.begin(), sign_type::default_sign};
 3134|   878k|        }
 3135|     30|        return unexpected(eof_error::eof);
 3136|   878k|    }
 3137|       |
 3138|  5.60k|    auto& it = *r;
 3139|  5.60k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3139:9): [True: 4.43k, False: 1.16k]
  ------------------
 3140|  4.43k|        return std::pair{it, sign_type::minus_sign};
 3141|  4.43k|    }
 3142|  1.16k|    return std::pair{it, sign_type::plus_sign};
 3143|  5.60k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2260|  1.00M|{
 2261|  1.00M|    auto it = read_code_unit(range);
 2262|  1.00M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 264, False: 1.00M]
  |  |  ------------------
  ------------------
 2263|    264|        return unexpected(make_eof_parse_error(it.error()));
 2264|    264|    }
 2265|       |
 2266|  2.00M|    for (auto ch : str) {
  ------------------
  |  Branch (2266:18): [True: 2.00M, False: 989k]
  ------------------
 2267|  2.00M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2267:13): [True: 12.0k, False: 1.98M]
  ------------------
 2268|  12.0k|            return *it;
 2269|  12.0k|        }
 2270|  2.00M|    }
 2271|       |
 2272|   989k|    return unexpected(parse_error::error);
 2273|  1.00M|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2219|  2.32M|{
 2220|  2.32M|    using char_type = detail::char_t<Range>;
 2221|       |
 2222|       |    if constexpr (ranges::contiguous_range<Range> &&
 2223|       |                  std::is_same_v<char_type, char>) {
 2224|       |        if (range.size() < str.size()) {
 2225|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2226|       |        }
 2227|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2228|       |            return unexpected(parse_error::error);
 2229|       |        }
 2230|       |        return ranges::next(range.begin(), str.size());
 2231|       |    }
 2232|  2.32M|    else {
 2233|  2.32M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|  2.32M|            if (ch < 'A' || ch > 'Z') {
 2235|  2.32M|                return ch;
 2236|  2.32M|            }
 2237|  2.32M|            return static_cast<char_type>(ch +
 2238|  2.32M|                                          static_cast<char_type>('a' - 'A'));
 2239|  2.32M|        };
 2240|       |
 2241|  2.32M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|  2.32M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.32M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.32M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.32M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 60.2k, False: 2.26M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  60.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  60.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  60.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  60.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  60.2k|    }                                                  \
  |  |  |  | 3667|  2.32M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.26M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2242|  2.26M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2243|  2.26M|                        .transform_error(make_eof_parse_error));
 2244|       |
 2245|  2.26M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  2.26M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.26M, False: 1.46k]
  |  |  ------------------
  ------------------
 2246|  2.26M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2247|  2.26M|                    return ascii_tolower(a) ==
 2248|  2.26M|                           static_cast<detail::char_t<Range>>(b);
 2249|  2.26M|                }))) {
 2250|  2.26M|            return unexpected(parse_error::error);
 2251|  2.26M|        }
 2252|       |
 2253|  1.46k|        return it;
 2254|  2.26M|    }
 2255|  2.32M|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2233|  2.64M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|  2.64M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2234:17): [True: 2.07M, False: 574k]
  |  Branch (2234:29): [True: 556k, False: 17.6k]
  ------------------
 2235|  2.63M|                return ch;
 2236|  2.63M|            }
 2237|  17.6k|            return static_cast<char_type>(ch +
 2238|  17.6k|                                          static_cast<char_type>('a' - 'A'));
 2239|  2.64M|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2134|   201k|{
 2135|   201k|    auto it = read_code_unit(range);
 2136|   201k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   201k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 260, False: 201k]
  |  |  ------------------
  ------------------
 2137|    260|        return unexpected(make_eof_parse_error(it.error()));
 2138|    260|    }
 2139|       |
 2140|   201k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   201k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 200k, False: 1.32k]
  |  |  ------------------
  ------------------
 2141|   201k|                     static_cast<detail::char_t<Range>>(ch))) {
 2142|   200k|        return unexpected(parse_error::error);
 2143|   200k|    }
 2144|       |
 2145|  1.32k|    return *it;
 2146|   201k|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1963|   519k|{
 1964|   519k|    return read_until_code_unit(range, std::not_fn(pred));
 1965|   519k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1944|   519k|{
 1945|   519k|    if constexpr (ranges::common_range<Range>) {
 1946|   519k|        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|       |    else {
 1949|       |        auto first = range.begin();
 1950|       |        for (; first != range.end(); ++first) {
 1951|       |            if (pred(*first)) {
 1952|       |                return first;
 1953|       |            }
 1954|       |        }
 1955|       |        return first;
 1956|       |    }
 1957|   519k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2939|   881k|{
 2940|   881k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 881k, False: 0]
  ------------------
 2941|   881k|        auto it = read_while_classic_space(range);
 2942|   881k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|   881k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   881k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.38k, False: 878k]
  |  |  ------------------
  ------------------
 2944|  3.38k|            return unexpected(e);
 2945|  3.38k|        }
 2946|       |
 2947|   878k|        return it;
 2948|   881k|    }
 2949|       |
 2950|      0|    return read_while_classic_space(range);
 2951|   881k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2104|   881k|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|       |        auto buf = make_contiguous_buffer(range);
 2109|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|       |        return ranges::next(range.begin(),
 2111|       |                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|   881k|    else {
 2114|   881k|        auto it = range.begin();
 2115|       |
 2116|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|       |            auto seg = get_contiguous_beginning(range);
 2118|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|       |                seg_it != seg.end()) {
 2120|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|       |            }
 2122|       |            ranges::advance(it, seg.size());
 2123|       |        }
 2124|       |
 2125|   881k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|   881k|            return detail::is_cp_space(cp);
 2127|   881k|        });
 2128|   881k|    }
 2129|   881k|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2069|   881k|{
 2070|   881k|    return read_until_code_point(range, std::not_fn(pred));
 2071|   881k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2048|  1.50M|{
 2049|  1.50M|    auto it = range.begin();
 2050|  3.10M|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 2.71M, False: 388k]
  ------------------
 2051|  2.71M|        const auto val =
 2052|  2.71M|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|  2.71M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  2.71M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.71M, False: 0]
  |  |  ------------------
  ------------------
 2054|  2.71M|            const auto cp = detail::decode_code_point_exhaustive(
 2055|  2.71M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|  2.71M|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 1.11M, False: 1.59M]
  ------------------
 2057|  1.11M|                return it;
 2058|  1.11M|            }
 2059|  2.71M|        }
 2060|  1.59M|        it = val.iterator;
 2061|  1.59M|    }
 2062|       |
 2063|   388k|    return it;
 2064|  1.50M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|   881k|        : m_fptr([](storage fn,
  743|   881k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   881k|              cvref<T> obj = *get<T>(fn);
  745|   881k|              if constexpr (std::is_void_v<R>) {
  746|   881k|                  obj(static_cast<decltype(args)>(args)...);
  747|   881k|              }
  748|   881k|              else {
  749|   881k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   881k|              }
  751|   881k|          }),
  752|   881k|          m_storage(std::addressof(f))
  753|   881k|    {
  754|   881k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|  1.52M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.52M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.52M|              else {
  749|  1.52M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.52M|              }
  751|  1.52M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  1.52M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.52M|        else if constexpr (std::is_object_v<T>) {
  688|  1.52M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.52M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2125|  1.52M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  1.52M|            return detail::is_cp_space(cp);
 2127|  1.52M|        });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|   881k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   881k|        {
  662|   881k|        }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  2.03M|    {
  304|  2.03M|        ranges::advance(x, n);
  305|  2.03M|        return x;
  306|  2.03M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  2.03M|    {
  268|  2.03M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  2.03M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  2.03M|    {
  181|  6.50M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 4.47M, False: 2.03M]
  ------------------
  182|  4.47M|            ++i;
  183|  4.47M|        }
  184|  2.03M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6181|   200k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|   200k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|   200k|            auto rd = make_reader<T, char_type>();
 6195|   200k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   200k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 200k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|   200k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 200k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|   200k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|   200k|                return impl(rd, range, value);
 6202|   200k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   200k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3028|  1.28M|    {
 3029|  1.28M|        reader_error_handler eh{};
 3030|  1.28M|        get_derived().check_specs_impl(specs, eh);
 3031|  1.28M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  1.28M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.28M]
  |  |  ------------------
  ------------------
 3032|      0|            return {scan_error::invalid_format_string, eh.m_msg};
 3033|      0|        }
 3034|  1.28M|        return {};
 3035|  1.28M|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3039|  1.28M|    {
 3040|  1.28M|        return static_cast<Derived&>(*this);
 3041|  1.28M|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4133|  1.28M|    {
 4134|  1.28M|        detail::check_float_type_specs(specs, eh);
 4135|  1.28M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|   200k|    {
 6113|   200k|        const bool need_skipped_width =
 6114|   200k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 200k]
  |  Branch (6114:33): [True: 0, False: 200k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   200k|        auto it = rng.begin();
 6118|   200k|        std::ptrdiff_t prefix_width = 0;
 6119|   200k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 200k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   200k|        else {
 6127|   200k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   200k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   200k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   200k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   200k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 896, False: 199k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    896|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    896|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    896|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    896|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    896|    }                                                  \
  |  |  |  | 3667|   200k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   199k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   199k|            std::tie(it, prefix_width) = prefix_result;
 6129|   199k|        }
 6130|   199k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   199k|        std::ptrdiff_t value_width = 0;
 6134|   199k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 199k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   199k|        else {
 6150|   199k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   199k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   199k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   199k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 64.5k, False: 134k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  64.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  64.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  64.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  64.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  64.5k|    }                                                  \
  |  | 3667|   199k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   199k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|   134k|                                             specs, value, loc));
 6152|       |
 6153|   134k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 134k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|   134k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|   134k|        std::ptrdiff_t postfix_width = 0;
 6162|   134k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 134k, False: 396]
  ------------------
 6163|   134k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   134k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   134k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   134k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 134k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   134k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   134k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   134k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|   134k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|   134k|                                 value_width));
 6167|   134k|            std::tie(it, postfix_width) = postfix_result;
 6168|   134k|        }
 6169|       |
 6170|   134k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|   134k|                                                 value_width, postfix_width);
 6172|   134k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 134k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|   134k|        return it;
 6177|   134k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3023|  2.65M|    {
 3024|  2.65M|        return true;
 3025|  2.65M|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4205|  1.28M|    {
 4206|  1.28M|        unsigned options{};
 4207|  1.28M|        if (specs.localized) {
  ------------------
  |  Branch (4207:13): [True: 314k, False: 969k]
  ------------------
 4208|   314k|            options |= float_reader_base::allow_thsep;
 4209|   314k|        }
 4210|       |
 4211|  1.28M|        SCN_GCC_COMPAT_PUSH
 4212|  1.28M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4213|       |
 4214|  1.28M|        switch (specs.type) {
 4215|   246k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4215:13): [True: 246k, False: 1.03M]
  ------------------
 4216|   246k|                return options | float_reader_base::allow_fixed;
 4217|       |
 4218|  80.3k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4218:13): [True: 80.3k, False: 1.20M]
  ------------------
 4219|  80.3k|                return options | float_reader_base::allow_scientific;
 4220|       |
 4221|   346k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4221:13): [True: 346k, False: 937k]
  ------------------
 4222|   346k|                return options | float_reader_base::allow_hex;
 4223|       |
 4224|   296k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4224:13): [True: 296k, False: 987k]
  ------------------
 4225|   296k|                return options | float_reader_base::allow_scientific |
 4226|   296k|                       float_reader_base::allow_fixed;
 4227|       |
 4228|   314k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4228:13): [True: 314k, False: 969k]
  ------------------
 4229|   314k|                return options | float_reader_base::allow_scientific |
 4230|   314k|                       float_reader_base::allow_fixed |
 4231|   314k|                       float_reader_base::allow_hex;
 4232|       |
 4233|      0|            default:
  ------------------
  |  Branch (4233:13): [True: 0, False: 1.28M]
  ------------------
 4234|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4235|  1.28M|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4236|  1.28M|        }
 4237|       |
 4238|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4239|  1.28M|    }
_ZN3scn2v34impl12float_readerIwEC2Ej:
 3648|  1.28M|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2Ev:
 1758|  1.75M|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIwEC2Ev:
 1519|  3.51M|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIwE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3679|   415k|    {
 3680|   415k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   415k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   415k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3681|       |
 3682|   415k|        const std::ptrdiff_t sign_len =
 3683|   415k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3683:13): [True: 2.24k, False: 413k]
  ------------------
 3684|       |
 3685|   415k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3668|   415k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   415k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   415k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   415k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 48.7k, False: 366k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  48.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  48.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  48.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  48.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  48.7k|    }                                                  \
  |  |  |  | 3667|   415k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   366k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3686|   366k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3687|   415k|    }
_ZN3scn2v34impl12float_readerIwE17handle_separatorsEv:
 4045|  1.39M|    {
 4046|  1.39M|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4046:13): [True: 1.39M, False: 0]
  ------------------
 4047|  1.39M|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4047:13): [True: 1.39M, False: 0]
  ------------------
 4048|  1.39M|            return;
 4049|  1.39M|        }
 4050|       |
 4051|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4052|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4052:13): [True: 0, False: 0]
  ------------------
 4053|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4053:27): [True: 0, False: 0]
  ------------------
 4054|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4054:21): [True: 0, False: 0]
  ------------------
 4055|      0|                    ch = CharT{'.'};
 4056|      0|                }
 4057|      0|            }
 4058|      0|        }
 4059|       |
 4060|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4060:13): [True: 0, False: 0]
  ------------------
 4061|      0|            return;
 4062|      0|        }
 4063|       |
 4064|      0|        auto first =
 4065|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4066|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4066:13): [True: 0, False: 0]
  ------------------
 4067|      0|            return;
 4068|      0|        }
 4069|       |
 4070|      0|        m_thsep_indices.push_back(
 4071|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4072|       |
 4073|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4073:31): [True: 0, False: 0]
  ------------------
 4074|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4074:17): [True: 0, False: 0]
  ------------------
 4075|      0|                *first++ = std::move(*it);
 4076|      0|            }
 4077|      0|            else {
 4078|      0|                m_thsep_indices.push_back(
 4079|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4080|      0|            }
 4081|      0|        }
 4082|       |
 4083|      0|        str.erase(first, str.end());
 4084|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1574|  1.54M|    {
 1575|  1.54M|        return m_storage.has_value();
 1576|  1.54M|    }
_ZNR3scn2v34impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1579|   907k|    {
 1580|   907k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|   907k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   907k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1581|   907k|        return *m_storage;
 1582|   907k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4158|   199k|    {
 4159|   199k|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|   199k|#if !SCN_DISABLE_LOCALE
 4162|   199k|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 45.1k, False: 154k]
  ------------------
 4163|  45.1k|            return read_impl<Range>(
 4164|  45.1k|                range, rd,
 4165|  45.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  45.1k|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|  45.1k|                },
 4168|  45.1k|                value, loc);
 4169|  45.1k|        }
 4170|   154k|#endif
 4171|       |
 4172|   154k|        return read_impl<Range>(
 4173|   154k|            range, rd,
 4174|   154k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   154k|                return r.read_source(SCN_FWD(args)...);
 4176|   154k|            },
 4177|   154k|            value);
 4178|   199k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4194|   267k|    {
 4195|   267k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|   267k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   267k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 81.0k, False: 186k]
  |  |  ------------------
  ------------------
 4197|  81.0k|            return unexpected(r.error());
 4198|  81.0k|        }
 4199|       |
 4200|   186k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   186k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   186k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   186k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   186k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.88k, False: 183k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.88k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.88k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.88k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.88k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.88k|    }                                                  \
  |  |  |  | 3667|   186k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   183k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|   183k|        return ranges::next(range.begin(), n);
 4202|   186k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|   877k|    {
  763|   877k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   877k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   877k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  45.1k|        : m_fptr([](storage fn,
  743|  45.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  45.1k|              cvref<T> obj = *get<T>(fn);
  745|  45.1k|              if constexpr (std::is_void_v<R>) {
  746|  45.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  45.1k|              }
  748|  45.1k|              else {
  749|  45.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  45.1k|              }
  751|  45.1k|          }),
  752|  45.1k|          m_storage(std::addressof(f))
  753|  45.1k|    {
  754|  45.1k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  45.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  45.1k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  45.1k|              else {
  749|  45.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  45.1k|              }
  751|  45.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  45.1k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  45.1k|        else if constexpr (std::is_object_v<T>) {
  688|  45.1k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  45.1k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4165|  45.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  45.1k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  45.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|  45.1k|                },
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3667|   157k|    {
 3668|   157k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3669|   157k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|   157k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 157k]
  |  |  ------------------
  ------------------
 3670|      0|            m_locale_options.thousands_sep = CharT{0};
 3671|      0|        }
 3672|       |
 3673|   157k|        return read_source_impl(range);
 3674|   157k|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3693|   877k|    {
 3694|   877k|        SCN_TRY(sign_result,
  ------------------
  |  | 3668|   877k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   877k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   877k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   877k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 877k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   877k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   877k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3695|   877k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3696|   877k|        auto it = sign_result.first;
 3697|   877k|        m_sign = sign_result.second;
 3698|       |
 3699|   877k|        auto digits_begin = it;
 3700|   877k|        auto r = ranges::subrange{it, range.end()};
 3701|       |        if constexpr (ranges::contiguous_range<Range> &&
 3702|       |                      ranges::sized_range<Range>) {
 3703|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3704|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3705|       |                SCN_TRY_ASSIGN(
 3706|       |                    it,
 3707|       |                    do_read_source_impl(
 3708|       |                        r,
 3709|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3710|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3711|       |            }
 3712|       |            else {
 3713|       |                auto cb = [&](const auto& rr)
 3714|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3715|       |                    auto res = read_all(rr);
 3716|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3717|       |                        return unexpected_scan_error(
 3718|       |                            scan_error::invalid_scanned_value,
 3719|       |                            "Invalid float value");
 3720|       |                    }
 3721|       |                    return res;
 3722|       |                };
 3723|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3724|       |            }
 3725|       |        }
 3726|   877k|        else {
 3727|   877k|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3663|   877k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   877k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   877k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 247k, False: 630k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|   247k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|   247k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|   247k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|   247k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|   247k|    }                                                  \
  |  | 3667|   877k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   877k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3728|   630k|                it,
 3729|   630k|                do_read_source_impl(
 3730|   630k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3731|   630k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3732|   630k|        }
 3733|       |
 3734|   877k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   877k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   877k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3735|       |
 3736|   630k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3736:13): [True: 630k, False: 0]
  |  Branch (3736:48): [True: 630k, False: 0]
  ------------------
 3737|   630k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3737:13): [True: 630k, False: 0]
  ------------------
 3738|   630k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3738:13): [True: 630k, False: 0]
  ------------------
 3739|   630k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3740|   630k|        }
 3741|       |
 3742|   630k|        handle_separators();
 3743|       |
 3744|   630k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3744:13): [True: 0, False: 630k]
  ------------------
 3745|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|      0|            if (auto e = check_thsep_grouping(
 3747|      0|                    ranges::subrange{
 3748|      0|                        digits_begin,
 3749|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3750|      0|                    m_thsep_indices, m_locale_options.grouping);
 3751|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3752|      0|                return unexpected(e);
 3753|      0|            }
 3754|      0|        }
 3755|       |
 3756|   630k|        return it;
 3757|   630k|    }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 3988|   877k|    {
 3989|   877k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 3990|   877k|        const bool allowed_nonhex =
 3991|   877k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 3992|   877k|             ~static_cast<unsigned>(allow_hex)) != 0;
 3993|       |
 3994|   877k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (3994:39): [True: 877k, False: 0]
  |  Branch (3994:45): [True: 0, False: 877k]
  ------------------
 3995|      0|            return r.transform_error(map_parse_error_to_scan_error(
 3996|      0|                scan_error::invalid_scanned_value,
 3997|      0|                "Invalid infinite floating-point value"));
 3998|      0|        }
 3999|   877k|        else if (r) {
  ------------------
  |  Branch (3999:18): [True: 0, False: 877k]
  ------------------
 4000|      0|            return *r;
 4001|      0|        }
 4002|       |
 4003|   877k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4003:39): [True: 877k, False: 0]
  |  Branch (4003:45): [True: 0, False: 877k]
  ------------------
 4004|      0|            return unexpected(r.error());
 4005|      0|        }
 4006|   877k|        else if (r) {
  ------------------
  |  Branch (4006:18): [True: 0, False: 877k]
  ------------------
 4007|      0|            return *r;
 4008|      0|        }
 4009|       |
 4010|   877k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4010:13): [True: 565k, False: 311k]
  |  Branch (4010:28): [True: 172k, False: 392k]
  ------------------
 4011|       |            // only hex allowed:
 4012|       |            // prefix "0x" allowed, not required
 4013|   172k|            auto it = range.begin();
 4014|       |
 4015|   172k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4015:22): [True: 444, False: 172k]
  ------------------
 4016|    444|                m_kind = float_kind::hex_with_prefix;
 4017|    444|                it = *r;
 4018|    444|            }
 4019|   172k|            else {
 4020|   172k|                m_kind = float_kind::hex_without_prefix;
 4021|   172k|            }
 4022|       |
 4023|   172k|            return read_hex(ranges::subrange{it, range.end()});
 4024|   172k|        }
 4025|   704k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4025:13): [True: 311k, False: 392k]
  |  Branch (4025:29): [True: 311k, False: 0]
  ------------------
 4026|       |            // only nonhex allowed:
 4027|       |            // no prefix allowed
 4028|   311k|            m_kind = float_kind::generic;
 4029|   311k|            return read_regular_float(range);
 4030|   311k|        }
 4031|       |        // both hex and nonhex allowed:
 4032|       |        // check for "0x" prefix -> hex,
 4033|       |        // regular otherwise
 4034|       |
 4035|   392k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   392k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.02k, False: 391k]
  |  |  ------------------
  ------------------
 4036|  1.02k|            m_kind = float_kind::hex_with_prefix;
 4037|  1.02k|            return read_hex(ranges::subrange{*r, range.end()});
 4038|  1.02k|        }
 4039|       |
 4040|   391k|        m_kind = float_kind::generic;
 4041|   391k|        return read_regular(range);
 4042|   392k|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3799|   877k|    {
 3800|   877k|        auto it = range.begin();
 3801|   877k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3801:73): [True: 877k, False: 0]
  ------------------
 3802|   877k|            return unexpected(r.error());
 3803|   877k|        }
 3804|      0|        else {
 3805|      0|            it = *r;
 3806|      0|        }
 3807|       |
 3808|      0|        if (auto r = read_matching_string_classic_nocase(
 3809|      0|                ranges::subrange{it, range.end()}, "inity");
 3810|      0|            !r) {
  ------------------
  |  Branch (3810:13): [True: 0, False: 0]
  ------------------
 3811|      0|            m_kind = float_kind::inf_short;
 3812|      0|            return it;
 3813|      0|        }
 3814|      0|        else {
 3815|      0|            m_kind = float_kind::inf_long;
 3816|      0|            return *r;
 3817|      0|        }
 3818|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3822|   877k|    {
 3823|   877k|        auto it = range.begin();
 3824|   877k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3824:73): [True: 877k, False: 0]
  ------------------
 3825|   877k|            return r.transform_error(map_parse_error_to_scan_error(
 3826|   877k|                scan_error::invalid_scanned_value,
 3827|   877k|                "Invalid floating-point NaN value"));
 3828|   877k|        }
 3829|      0|        else {
 3830|      0|            it = *r;
 3831|      0|        }
 3832|       |
 3833|      0|        if (auto r =
 3834|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3835|      0|            !r) {
  ------------------
  |  Branch (3835:13): [True: 0, False: 0]
  ------------------
 3836|      0|            m_kind = float_kind::nan_simple;
 3837|      0|            return it;
 3838|      0|        }
 3839|      0|        else {
 3840|      0|            it = *r;
 3841|      0|        }
 3842|       |
 3843|      0|        auto payload_beg_it = it;
 3844|      0|        it = read_while_code_unit(
 3845|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3846|      0|                return is_ascii_char(ch) &&
 3847|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3848|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3849|      0|            });
 3850|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3851|       |
 3852|      0|        m_kind = float_kind::nan_with_payload;
 3853|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3853:18): [True: 0, False: 0]
  ------------------
 3854|      0|                                             ')')) {
 3855|      0|            return *r;
 3856|      0|        }
 3857|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3858|      0|                                     "Invalid floating-point NaN payload");
 3859|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3792|   565k|    {
 3793|   565k|        return read_matching_string_classic_nocase(range, "0x");
 3794|   565k|    }
_ZN3scn2v34impl12float_readerIwE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3892|   174k|    {
 3893|   174k|        auto it = range.begin();
 3894|       |
 3895|   174k|        std::ptrdiff_t digits_count = 0;
 3896|   174k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3897|   174k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   174k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38.6k, False: 135k]
  |  |  ------------------
  ------------------
 3898|  38.6k|            return r.transform_error(map_parse_error_to_scan_error(
 3899|  38.6k|                scan_error::invalid_scanned_value,
 3900|  38.6k|                "Invalid hexadecimal floating-point value"));
 3901|  38.6k|        }
 3902|   135k|        else {
 3903|   135k|            digits_count += ranges::distance(it, *r);
 3904|   135k|            it = *r;
 3905|   135k|        }
 3906|       |
 3907|   135k|        m_integral_part_length = digits_count;
 3908|   135k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3908:18): [True: 594, False: 134k]
  ------------------
 3909|   135k|                                             m_locale_options.decimal_point)) {
 3910|    594|            it = *r;
 3911|    594|        }
 3912|       |
 3913|   135k|        if (auto r =
  ------------------
  |  Branch (3913:18): [True: 492, False: 134k]
  ------------------
 3914|   135k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3915|    492|            digits_count += ranges::distance(it, *r);
 3916|    492|            it = *r;
 3917|    492|        }
 3918|       |
 3919|   135k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 135k]
  |  |  ------------------
  ------------------
 3920|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3921|      0|                                         "No significand digits in hexfloat");
 3922|      0|        }
 3923|       |
 3924|   135k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3925|       |
 3926|   135k|        return it;
 3927|   135k|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3777|   309k|    {
 3778|   309k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   309k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 309k]
  |  |  |  Branch (859:45): [True: 0, False: 309k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3779|   309k|                         thsep_allowed)) {
 3780|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3781|      0|                return char_to_int(ch) < 16 ||
 3782|      0|                       ch == m_locale_options.thousands_sep;
 3783|      0|            });
 3784|      0|        }
 3785|       |
 3786|   309k|        return read_while1_code_unit(
 3787|   309k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3788|   309k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|   309k|        : m_fptr([](storage fn,
  743|   309k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   309k|              cvref<T> obj = *get<T>(fn);
  745|   309k|              if constexpr (std::is_void_v<R>) {
  746|   309k|                  obj(static_cast<decltype(args)>(args)...);
  747|   309k|              }
  748|   309k|              else {
  749|   309k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   309k|              }
  751|   309k|          }),
  752|   309k|          m_storage(std::addressof(f))
  753|   309k|    {
  754|   309k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|   484k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   484k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   484k|              else {
  749|   484k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   484k|              }
  751|   484k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|   484k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   484k|        else if constexpr (std::is_object_v<T>) {
  688|   484k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   484k|    }
_ZZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3787|   484k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   309k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   309k|        {
  662|   309k|        }
_ZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3864|   551k|    {
 3865|   551k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3865:18): [True: 18.9k, False: 532k]
  ------------------
 3866|  18.9k|            auto beg_exp_it = range.begin();
 3867|  18.9k|            auto it = *r;
 3868|       |
 3869|  18.9k|            if (auto r_sign =
  ------------------
  |  Branch (3869:22): [True: 18.8k, False: 91]
  ------------------
 3870|  18.9k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3871|  18.8k|                it = r_sign->first;
 3872|  18.8k|            }
 3873|       |
 3874|  18.9k|            if (auto r_exp = read_while1_code_unit(
 3875|  18.9k|                    ranges::subrange{it, range.end()},
 3876|  18.9k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3877|  18.9k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  18.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.65k, False: 17.2k]
  |  |  ------------------
  ------------------
 3878|  1.65k|                it = beg_exp_it;
 3879|  1.65k|            }
 3880|  17.2k|            else {
 3881|  17.2k|                it = *r_exp;
 3882|  17.2k|            }
 3883|       |
 3884|  18.9k|            return it;
 3885|  18.9k|        }
 3886|   532k|        return range.begin();
 3887|   551k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|  18.9k|        : m_fptr([](storage fn,
  743|  18.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  18.9k|              cvref<T> obj = *get<T>(fn);
  745|  18.9k|              if constexpr (std::is_void_v<R>) {
  746|  18.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  18.9k|              }
  748|  18.9k|              else {
  749|  18.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  18.9k|              }
  751|  18.9k|          }),
  752|  18.9k|          m_storage(std::addressof(f))
  753|  18.9k|    {
  754|  18.9k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES15_w:
  743|  64.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  64.9k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  64.9k|              else {
  749|  64.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  64.9k|              }
  751|  64.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  64.9k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  64.9k|        else if constexpr (std::is_object_v<T>) {
  688|  64.9k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  64.9k|    }
_ZZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlwE_clEw:
 3876|  64.9k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|  18.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  18.9k|        {
  662|  18.9k|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3932|   703k|    {
 3933|   703k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3934|   703k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3934:35): [True: 579k, False: 123k]
  |  Branch (3934:50): [True: 40.1k, False: 539k]
  ------------------
 3935|       |
 3936|   703k|        auto it = ranges::begin(range);
 3937|   703k|        std::ptrdiff_t digits_count = 0;
 3938|       |
 3939|   703k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3940|   703k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   703k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 203k, False: 500k]
  |  |  ------------------
  ------------------
 3941|   203k|            return r.transform_error(
 3942|   203k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3943|   203k|                                              "Invalid floating-point value"));
 3944|   203k|        }
 3945|   500k|        else {
 3946|   500k|            digits_count += ranges::distance(it, *r);
 3947|   500k|            it = *r;
 3948|   500k|        }
 3949|       |
 3950|   500k|        m_integral_part_length = digits_count;
 3951|   500k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3951:18): [True: 2.67k, False: 497k]
  ------------------
 3952|   500k|                                             m_locale_options.decimal_point)) {
 3953|  2.67k|            it = *r;
 3954|  2.67k|        }
 3955|       |
 3956|   500k|        if (auto r =
  ------------------
  |  Branch (3956:18): [True: 2.25k, False: 497k]
  ------------------
 3957|   500k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3958|  2.25k|            digits_count += ranges::distance(it, *r);
 3959|  2.25k|            it = *r;
 3960|  2.25k|        }
 3961|       |
 3962|   500k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   500k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 500k]
  |  |  ------------------
  ------------------
 3963|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3964|      0|                                         "No significand digits in float");
 3965|      0|        }
 3966|       |
 3967|   500k|        auto beg_exp_it = it;
 3968|   500k|        if (allowed_exp) {
  ------------------
  |  Branch (3968:13): [True: 415k, False: 84.5k]
  ------------------
 3969|   415k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3970|   415k|        }
 3971|   500k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3971:13): [True: 6.63k, False: 493k]
  |  Branch (3971:29): [True: 5.30k, False: 1.33k]
  ------------------
 3972|  5.30k|            return unexpected_scan_error(
 3973|  5.30k|                scan_error::invalid_scanned_value,
 3974|  5.30k|                "No exponent given to scientific float");
 3975|  5.30k|        }
 3976|       |
 3977|   494k|        m_kind =
 3978|   494k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3978:13): [True: 477k, False: 17.1k]
  ------------------
 3979|       |
 3980|   494k|        return it;
 3981|   500k|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3762|  1.20M|    {
 3763|  1.20M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|  1.20M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.20M]
  |  |  |  Branch (859:45): [True: 0, False: 1.20M]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3764|  1.20M|                         thsep_allowed)) {
 3765|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3766|      0|                return char_to_int(ch) < 10 ||
 3767|      0|                       ch == m_locale_options.thousands_sep;
 3768|      0|            });
 3769|      0|        }
 3770|       |
 3771|  1.20M|        return read_while1_code_unit(
 3772|  1.20M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3773|  1.20M|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|  1.20M|        : m_fptr([](storage fn,
  743|  1.20M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.20M|              cvref<T> obj = *get<T>(fn);
  745|  1.20M|              if constexpr (std::is_void_v<R>) {
  746|  1.20M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.20M|              }
  748|  1.20M|              else {
  749|  1.20M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.20M|              }
  751|  1.20M|          }),
  752|  1.20M|          m_storage(std::addressof(f))
  753|  1.20M|    {
  754|  1.20M|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|  1.79M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.79M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.79M|              else {
  749|  1.79M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.79M|              }
  751|  1.79M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|  1.79M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.79M|        else if constexpr (std::is_object_v<T>) {
  688|  1.79M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.79M|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3772|  1.79M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  1.20M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.20M|        {
  662|  1.20M|        }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSG_:
 1564|   630k|    {
 1565|   630k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   630k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1566|   630k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  45.1k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  45.1k|        {
  662|  45.1k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   154k|        : m_fptr([](storage fn,
  743|   154k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   154k|              cvref<T> obj = *get<T>(fn);
  745|   154k|              if constexpr (std::is_void_v<R>) {
  746|   154k|                  obj(static_cast<decltype(args)>(args)...);
  747|   154k|              }
  748|   154k|              else {
  749|   154k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   154k|              }
  751|   154k|          }),
  752|   154k|          m_storage(std::addressof(f))
  753|   154k|    {
  754|   154k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   154k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   154k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   154k|              else {
  749|   154k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   154k|              }
  751|   154k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   154k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   154k|        else if constexpr (std::is_object_v<T>) {
  688|   154k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   154k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4174|   154k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   154k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   154k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|   154k|            },
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3653|   720k|    {
 3654|   720k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   720k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 720k]
  |  |  ------------------
  ------------------
 3655|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3656|      0|                classic_with_thsep_tag{}};
 3657|      0|        }
 3658|       |
 3659|   720k|        return read_source_impl(range);
 3660|   720k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   154k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   154k|        {
  662|   154k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4158|   199k|    {
 4159|   199k|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|   199k|#if !SCN_DISABLE_LOCALE
 4162|   199k|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 45.2k, False: 154k]
  ------------------
 4163|  45.2k|            return read_impl<Range>(
 4164|  45.2k|                range, rd,
 4165|  45.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  45.2k|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|  45.2k|                },
 4168|  45.2k|                value, loc);
 4169|  45.2k|        }
 4170|   154k|#endif
 4171|       |
 4172|   154k|        return read_impl<Range>(
 4173|   154k|            range, rd,
 4174|   154k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   154k|                return r.read_source(SCN_FWD(args)...);
 4176|   154k|            },
 4177|   154k|            value);
 4178|   199k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4194|   267k|    {
 4195|   267k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|   267k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   267k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38.0k, False: 229k]
  |  |  ------------------
  ------------------
 4197|  38.0k|            return unexpected(r.error());
 4198|  38.0k|        }
 4199|       |
 4200|   229k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   229k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   229k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   229k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   229k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 45.8k, False: 183k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  45.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  45.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  45.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  45.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  45.8k|    }                                                  \
  |  |  |  | 3667|   229k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   183k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|   183k|        return ranges::next(range.begin(), n);
 4202|   229k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|   878k|    {
  763|   878k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   878k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   878k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  45.2k|        : m_fptr([](storage fn,
  743|  45.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  45.2k|              cvref<T> obj = *get<T>(fn);
  745|  45.2k|              if constexpr (std::is_void_v<R>) {
  746|  45.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  45.2k|              }
  748|  45.2k|              else {
  749|  45.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  45.2k|              }
  751|  45.2k|          }),
  752|  45.2k|          m_storage(std::addressof(f))
  753|  45.2k|    {
  754|  45.2k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  45.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  45.2k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  45.2k|              else {
  749|  45.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  45.2k|              }
  751|  45.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  45.2k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  45.2k|        else if constexpr (std::is_object_v<T>) {
  688|  45.2k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  45.2k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4165|  45.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  45.2k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  45.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|  45.2k|                },
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3667|   157k|    {
 3668|   157k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3669|   157k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|   157k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 157k]
  |  |  ------------------
  ------------------
 3670|      0|            m_locale_options.thousands_sep = CharT{0};
 3671|      0|        }
 3672|       |
 3673|   157k|        return read_source_impl(range);
 3674|   157k|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3693|   878k|    {
 3694|   878k|        SCN_TRY(sign_result,
  ------------------
  |  | 3668|   878k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   878k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   878k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   878k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 878k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   878k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   878k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3695|   878k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3696|   878k|        auto it = sign_result.first;
 3697|   878k|        m_sign = sign_result.second;
 3698|       |
 3699|   878k|        auto digits_begin = it;
 3700|   878k|        auto r = ranges::subrange{it, range.end()};
 3701|       |        if constexpr (ranges::contiguous_range<Range> &&
 3702|   878k|                      ranges::sized_range<Range>) {
 3703|   878k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  1.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 878k]
  |  |  |  Branch (859:45): [True: 0, False: 878k]
  |  |  |  Branch (859:45): [True: 0, False: 878k]
  |  |  ------------------
  ------------------
 3704|   878k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3705|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|      0|    }                                                  \
  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3706|      0|                    it,
 3707|      0|                    do_read_source_impl(
 3708|      0|                        r,
 3709|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3710|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3711|      0|            }
 3712|   878k|            else {
 3713|   878k|                auto cb = [&](const auto& rr)
 3714|   878k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3715|   878k|                    auto res = read_all(rr);
 3716|   878k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3717|   878k|                        return unexpected_scan_error(
 3718|   878k|                            scan_error::invalid_scanned_value,
 3719|   878k|                            "Invalid float value");
 3720|   878k|                    }
 3721|   878k|                    return res;
 3722|   878k|                };
 3723|   878k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3663|   878k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   878k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   878k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 115k, False: 762k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|   115k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|   115k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|   115k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|   115k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|   115k|    }                                                  \
  |  | 3667|   878k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   878k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3724|   762k|            }
 3725|       |        }
 3726|       |        else {
 3727|       |            SCN_TRY_ASSIGN(
 3728|       |                it,
 3729|       |                do_read_source_impl(
 3730|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3731|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3732|       |        }
 3733|       |
 3734|   878k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   878k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   878k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3735|       |
 3736|   762k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3736:13): [True: 762k, False: 0]
  |  Branch (3736:48): [True: 762k, False: 0]
  ------------------
 3737|   762k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3737:13): [True: 762k, False: 0]
  ------------------
 3738|   762k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3738:13): [True: 762k, False: 0]
  ------------------
 3739|   762k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3740|   762k|        }
 3741|       |
 3742|   762k|        handle_separators();
 3743|       |
 3744|   762k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3744:13): [True: 0, False: 762k]
  ------------------
 3745|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|      0|            if (auto e = check_thsep_grouping(
 3747|      0|                    ranges::subrange{
 3748|      0|                        digits_begin,
 3749|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3750|      0|                    m_thsep_indices, m_locale_options.grouping);
 3751|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3752|      0|                return unexpected(e);
 3753|      0|            }
 3754|      0|        }
 3755|       |
 3756|   762k|        return it;
 3757|   762k|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3799|   878k|    {
 3800|   878k|        auto it = range.begin();
 3801|   878k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3801:73): [True: 878k, False: 0]
  ------------------
 3802|   878k|            return unexpected(r.error());
 3803|   878k|        }
 3804|      0|        else {
 3805|      0|            it = *r;
 3806|      0|        }
 3807|       |
 3808|      0|        if (auto r = read_matching_string_classic_nocase(
 3809|      0|                ranges::subrange{it, range.end()}, "inity");
 3810|      0|            !r) {
  ------------------
  |  Branch (3810:13): [True: 0, False: 0]
  ------------------
 3811|      0|            m_kind = float_kind::inf_short;
 3812|      0|            return it;
 3813|      0|        }
 3814|      0|        else {
 3815|      0|            m_kind = float_kind::inf_long;
 3816|      0|            return *r;
 3817|      0|        }
 3818|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3822|   878k|    {
 3823|   878k|        auto it = range.begin();
 3824|   878k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3824:73): [True: 878k, False: 0]
  ------------------
 3825|   878k|            return r.transform_error(map_parse_error_to_scan_error(
 3826|   878k|                scan_error::invalid_scanned_value,
 3827|   878k|                "Invalid floating-point NaN value"));
 3828|   878k|        }
 3829|      0|        else {
 3830|      0|            it = *r;
 3831|      0|        }
 3832|       |
 3833|      0|        if (auto r =
 3834|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3835|      0|            !r) {
  ------------------
  |  Branch (3835:13): [True: 0, False: 0]
  ------------------
 3836|      0|            m_kind = float_kind::nan_simple;
 3837|      0|            return it;
 3838|      0|        }
 3839|      0|        else {
 3840|      0|            it = *r;
 3841|      0|        }
 3842|       |
 3843|      0|        auto payload_beg_it = it;
 3844|      0|        it = read_while_code_unit(
 3845|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3846|      0|                return is_ascii_char(ch) &&
 3847|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3848|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3849|      0|            });
 3850|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3851|       |
 3852|      0|        m_kind = float_kind::nan_with_payload;
 3853|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3853:18): [True: 0, False: 0]
  ------------------
 3854|      0|                                             ')')) {
 3855|      0|            return *r;
 3856|      0|        }
 3857|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3858|      0|                                     "Invalid floating-point NaN payload");
 3859|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3792|   566k|    {
 3793|   566k|        return read_matching_string_classic_nocase(range, "0x");
 3794|   566k|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1983|   519k|{
 1984|   519k|    auto it = read_while_code_unit(range, pred);
 1985|   519k|    if (it == range.begin()) {
  ------------------
  |  Branch (1985:9): [True: 311k, False: 208k]
  ------------------
 1986|   311k|        return unexpected(parse_error::error);
 1987|   311k|    }
 1988|   208k|    return it;
 1989|   519k|}
_ZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3864|   117k|    {
 3865|   117k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3865:18): [True: 6.47k, False: 110k]
  ------------------
 3866|  6.47k|            auto beg_exp_it = range.begin();
 3867|  6.47k|            auto it = *r;
 3868|       |
 3869|  6.47k|            if (auto r_sign =
  ------------------
  |  Branch (3869:22): [True: 6.44k, False: 30]
  ------------------
 3870|  6.47k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3871|  6.44k|                it = r_sign->first;
 3872|  6.44k|            }
 3873|       |
 3874|  6.47k|            if (auto r_exp = read_while1_code_unit(
 3875|  6.47k|                    ranges::subrange{it, range.end()},
 3876|  6.47k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3877|  6.47k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  6.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 626, False: 5.84k]
  |  |  ------------------
  ------------------
 3878|    626|                it = beg_exp_it;
 3879|    626|            }
 3880|  5.84k|            else {
 3881|  5.84k|                it = *r_exp;
 3882|  5.84k|            }
 3883|       |
 3884|  6.47k|            return it;
 3885|  6.47k|        }
 3886|   110k|        return range.begin();
 3887|   117k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_:
  742|  6.47k|        : m_fptr([](storage fn,
  743|  6.47k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.47k|              cvref<T> obj = *get<T>(fn);
  745|  6.47k|              if constexpr (std::is_void_v<R>) {
  746|  6.47k|                  obj(static_cast<decltype(args)>(args)...);
  747|  6.47k|              }
  748|  6.47k|              else {
  749|  6.47k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.47k|              }
  751|  6.47k|          }),
  752|  6.47k|          m_storage(std::addressof(f))
  753|  6.47k|    {
  754|  6.47k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEwE_clES12_w:
  743|  22.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  22.1k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  22.1k|              else {
  749|  22.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  22.1k|              }
  751|  22.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  22.1k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  22.1k|        else if constexpr (std::is_object_v<T>) {
  688|  22.1k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  22.1k|    }
_ZZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlwE_clEw:
 3876|  22.1k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|  6.47k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  6.47k|        {
  662|  6.47k|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3932|   311k|    {
 3933|   311k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3934|   311k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3934:35): [True: 188k, False: 123k]
  |  Branch (3934:50): [True: 40.1k, False: 148k]
  ------------------
 3935|       |
 3936|   311k|        auto it = ranges::begin(range);
 3937|   311k|        std::ptrdiff_t digits_count = 0;
 3938|       |
 3939|   311k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3940|   311k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   311k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 109k, False: 201k]
  |  |  ------------------
  ------------------
 3941|   109k|            return r.transform_error(
 3942|   109k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3943|   109k|                                              "Invalid floating-point value"));
 3944|   109k|        }
 3945|   201k|        else {
 3946|   201k|            digits_count += ranges::distance(it, *r);
 3947|   201k|            it = *r;
 3948|   201k|        }
 3949|       |
 3950|   201k|        m_integral_part_length = digits_count;
 3951|   201k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3951:18): [True: 1.32k, False: 200k]
  ------------------
 3952|   201k|                                             m_locale_options.decimal_point)) {
 3953|  1.32k|            it = *r;
 3954|  1.32k|        }
 3955|       |
 3956|   201k|        if (auto r =
  ------------------
  |  Branch (3956:18): [True: 1.11k, False: 200k]
  ------------------
 3957|   201k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3958|  1.11k|            digits_count += ranges::distance(it, *r);
 3959|  1.11k|            it = *r;
 3960|  1.11k|        }
 3961|       |
 3962|   201k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   201k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 201k]
  |  |  ------------------
  ------------------
 3963|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3964|      0|                                         "No significand digits in float");
 3965|      0|        }
 3966|       |
 3967|   201k|        auto beg_exp_it = it;
 3968|   201k|        if (allowed_exp) {
  ------------------
  |  Branch (3968:13): [True: 117k, False: 84.5k]
  ------------------
 3969|   117k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3970|   117k|        }
 3971|   201k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3971:13): [True: 6.63k, False: 195k]
  |  Branch (3971:29): [True: 5.30k, False: 1.33k]
  ------------------
 3972|  5.30k|            return unexpected_scan_error(
 3973|  5.30k|                scan_error::invalid_scanned_value,
 3974|  5.30k|                "No exponent given to scientific float");
 3975|  5.30k|        }
 3976|       |
 3977|   196k|        m_kind =
 3978|   196k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3978:13): [True: 190k, False: 5.84k]
  ------------------
 3979|       |
 3980|   196k|        return it;
 3981|   201k|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3762|   513k|    {
 3763|   513k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   513k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 513k]
  |  |  |  Branch (859:45): [True: 0, False: 513k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3764|   513k|                         thsep_allowed)) {
 3765|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3766|      0|                return char_to_int(ch) < 10 ||
 3767|      0|                       ch == m_locale_options.thousands_sep;
 3768|      0|            });
 3769|      0|        }
 3770|       |
 3771|   513k|        return read_while1_code_unit(
 3772|   513k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3773|   513k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|   513k|        : m_fptr([](storage fn,
  743|   513k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   513k|              cvref<T> obj = *get<T>(fn);
  745|   513k|              if constexpr (std::is_void_v<R>) {
  746|   513k|                  obj(static_cast<decltype(args)>(args)...);
  747|   513k|              }
  748|   513k|              else {
  749|   513k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   513k|              }
  751|   513k|          }),
  752|   513k|          m_storage(std::addressof(f))
  753|   513k|    {
  754|   513k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES10_w:
  743|   759k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   759k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   759k|              else {
  749|   759k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   759k|              }
  751|   759k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  683|   759k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   759k|        else if constexpr (std::is_object_v<T>) {
  688|   759k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   759k|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3772|   759k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   513k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   513k|        {
  662|   513k|        }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3988|   878k|    {
 3989|   878k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 3990|   878k|        const bool allowed_nonhex =
 3991|   878k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 3992|   878k|             ~static_cast<unsigned>(allow_hex)) != 0;
 3993|       |
 3994|   878k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (3994:39): [True: 878k, False: 0]
  |  Branch (3994:45): [True: 0, False: 878k]
  ------------------
 3995|      0|            return r.transform_error(map_parse_error_to_scan_error(
 3996|      0|                scan_error::invalid_scanned_value,
 3997|      0|                "Invalid infinite floating-point value"));
 3998|      0|        }
 3999|   878k|        else if (r) {
  ------------------
  |  Branch (3999:18): [True: 0, False: 878k]
  ------------------
 4000|      0|            return *r;
 4001|      0|        }
 4002|       |
 4003|   878k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4003:39): [True: 878k, False: 0]
  |  Branch (4003:45): [True: 0, False: 878k]
  ------------------
 4004|      0|            return unexpected(r.error());
 4005|      0|        }
 4006|   878k|        else if (r) {
  ------------------
  |  Branch (4006:18): [True: 0, False: 878k]
  ------------------
 4007|      0|            return *r;
 4008|      0|        }
 4009|       |
 4010|   878k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4010:13): [True: 566k, False: 311k]
  |  Branch (4010:28): [True: 173k, False: 393k]
  ------------------
 4011|       |            // only hex allowed:
 4012|       |            // prefix "0x" allowed, not required
 4013|   173k|            auto it = range.begin();
 4014|       |
 4015|   173k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4015:22): [True: 444, False: 172k]
  ------------------
 4016|    444|                m_kind = float_kind::hex_with_prefix;
 4017|    444|                it = *r;
 4018|    444|            }
 4019|   172k|            else {
 4020|   172k|                m_kind = float_kind::hex_without_prefix;
 4021|   172k|            }
 4022|       |
 4023|   173k|            return read_hex(ranges::subrange{it, range.end()});
 4024|   173k|        }
 4025|   704k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4025:13): [True: 311k, False: 393k]
  |  Branch (4025:29): [True: 311k, False: 0]
  ------------------
 4026|       |            // only nonhex allowed:
 4027|       |            // no prefix allowed
 4028|   311k|            m_kind = float_kind::generic;
 4029|   311k|            return read_regular_float(range);
 4030|   311k|        }
 4031|       |        // both hex and nonhex allowed:
 4032|       |        // check for "0x" prefix -> hex,
 4033|       |        // regular otherwise
 4034|       |
 4035|   393k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   393k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.02k, False: 392k]
  |  |  ------------------
  ------------------
 4036|  1.02k|            m_kind = float_kind::hex_with_prefix;
 4037|  1.02k|            return read_hex(ranges::subrange{*r, range.end()});
 4038|  1.02k|        }
 4039|       |
 4040|   392k|        m_kind = float_kind::generic;
 4041|   392k|        return read_regular(range);
 4042|   393k|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3714|   566k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3715|   566k|                    auto res = read_all(rr);
 3716|   566k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|   566k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 151, False: 566k]
  |  |  ------------------
  ------------------
 3717|    151|                        return unexpected_scan_error(
 3718|    151|                            scan_error::invalid_scanned_value,
 3719|    151|                            "Invalid float value");
 3720|    151|                    }
 3721|   566k|                    return res;
 3722|   566k|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1826|   566k|{
 1827|   566k|    return ranges::next(range.begin(), range.end());
 1828|   566k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|   566k|    {
  313|   566k|        ranges::advance(x, bound);
  314|   566k|        return x;
  315|   566k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|   566k|    {
  275|   566k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|   566k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1564|   762k|    {
 1565|   762k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   762k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1566|   762k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1608|   762k|    {
 1609|   762k|        using value_t = ranges::range_value_t<Range>;
 1610|       |
 1611|       |        if constexpr (ranges::borrowed_range<Range> &&
 1612|       |                      ranges::contiguous_range<Range> &&
 1613|   762k|                      ranges::sized_range<Range>) {
 1614|   762k|            m_storage.reset();
 1615|   762k|            m_view = string_view_type{ranges::data(range), range.size()};
 1616|       |        }
 1617|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1618|       |                                          std::basic_string<CharT>>) {
 1619|       |            m_storage.emplace(SCN_FWD(range));
 1620|       |            m_view = string_view_type{*m_storage};
 1621|       |        }
 1622|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1623|       |                                          typename detail::basic_scan_buffer<
 1624|       |                                              value_t>::forward_iterator> &&
 1625|       |                           ranges::common_range<Range>) {
 1626|       |            auto beg_seg = range.begin().contiguous_segment();
 1627|       |            auto end_seg = range.end().contiguous_segment();
 1628|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1629|       |                             detail::to_address(end_seg.end()))) {
 1630|       |                auto& str = m_storage.emplace();
 1631|       |                str.reserve(range.end().position() - range.begin().position());
 1632|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1633|       |                m_view = string_view_type{str};
 1634|       |                return;
 1635|       |            }
 1636|       |
 1637|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1638|       |                                                            end_seg.data());
 1639|       |            m_storage.reset();
 1640|       |        }
 1641|       |        else {
 1642|       |            auto& str = m_storage.emplace();
 1643|       |            if constexpr (ranges::sized_range<Range>) {
 1644|       |                str.reserve(range.size());
 1645|       |            }
 1646|       |            if constexpr (ranges::common_range<Range>) {
 1647|       |                std::copy(ranges::begin(range), ranges::end(range),
 1648|       |                          std::back_inserter(str));
 1649|       |            }
 1650|       |            else {
 1651|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1652|       |                     ++it) {
 1653|       |                    str.push_back(*it);
 1654|       |                }
 1655|       |            }
 1656|       |            m_view = string_view_type{str};
 1657|       |        }
 1658|   762k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  45.2k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  45.2k|        {
  662|  45.2k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   154k|        : m_fptr([](storage fn,
  743|   154k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   154k|              cvref<T> obj = *get<T>(fn);
  745|   154k|              if constexpr (std::is_void_v<R>) {
  746|   154k|                  obj(static_cast<decltype(args)>(args)...);
  747|   154k|              }
  748|   154k|              else {
  749|   154k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   154k|              }
  751|   154k|          }),
  752|   154k|          m_storage(std::addressof(f))
  753|   154k|    {
  754|   154k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   154k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   154k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   154k|              else {
  749|   154k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   154k|              }
  751|   154k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   154k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   154k|        else if constexpr (std::is_object_v<T>) {
  688|   154k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   154k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4174|   154k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   154k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   154k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|   154k|            },
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3653|   720k|    {
 3654|   720k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   720k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 720k]
  |  |  ------------------
  ------------------
 3655|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3656|      0|                classic_with_thsep_tag{}};
 3657|      0|        }
 3658|       |
 3659|   720k|        return read_source_impl(range);
 3660|   720k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   154k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   154k|        {
  662|   154k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6181|   220k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|   220k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|   220k|            auto rd = make_reader<T, char_type>();
 6195|   220k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   220k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 220k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|   220k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 220k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|   220k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|   220k|                return impl(rd, range, value);
 6202|   220k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   220k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|   220k|    {
 6113|   220k|        const bool need_skipped_width =
 6114|   220k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 220k]
  |  Branch (6114:33): [True: 0, False: 220k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   220k|        auto it = rng.begin();
 6118|   220k|        std::ptrdiff_t prefix_width = 0;
 6119|   220k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 220k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   220k|        else {
 6127|   220k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   220k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   220k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   220k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   220k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 964, False: 219k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    964|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    964|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    964|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    964|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    964|    }                                                  \
  |  |  |  | 3667|   220k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   219k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   219k|            std::tie(it, prefix_width) = prefix_result;
 6129|   219k|        }
 6130|   219k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   219k|        std::ptrdiff_t value_width = 0;
 6134|   219k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 219k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   219k|        else {
 6150|   219k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   219k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   219k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   219k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 64.4k, False: 154k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  64.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  64.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  64.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  64.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  64.4k|    }                                                  \
  |  | 3667|   219k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   219k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|   154k|                                             specs, value, loc));
 6152|       |
 6153|   154k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 154k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|   154k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|   154k|        std::ptrdiff_t postfix_width = 0;
 6162|   154k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 154k, False: 428]
  ------------------
 6163|   154k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   154k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   154k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   154k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   154k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 154k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   154k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   154k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   154k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|   154k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|   154k|                                 value_width));
 6167|   154k|            std::tie(it, postfix_width) = postfix_result;
 6168|   154k|        }
 6169|       |
 6170|   154k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|   154k|                                                 value_width, postfix_width);
 6172|   154k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 154k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|   154k|        return it;
 6177|   154k|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3679|   483k|    {
 3680|   483k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   483k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   483k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3681|       |
 3682|   483k|        const std::ptrdiff_t sign_len =
 3683|   483k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3683:13): [True: 2.32k, False: 481k]
  ------------------
 3684|       |
 3685|   483k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3668|   483k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   483k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   483k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   483k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 46.6k, False: 436k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  46.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  46.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  46.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  46.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  46.6k|    }                                                  \
  |  |  |  | 3667|   483k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   436k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3686|   436k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3687|   483k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4158|   219k|    {
 4159|   219k|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|   219k|#if !SCN_DISABLE_LOCALE
 4162|   219k|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 55.1k, False: 164k]
  ------------------
 4163|  55.1k|            return read_impl<Range>(
 4164|  55.1k|                range, rd,
 4165|  55.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  55.1k|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|  55.1k|                },
 4168|  55.1k|                value, loc);
 4169|  55.1k|        }
 4170|   164k|#endif
 4171|       |
 4172|   164k|        return read_impl<Range>(
 4173|   164k|            range, rd,
 4174|   164k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   164k|                return r.read_source(SCN_FWD(args)...);
 4176|   164k|            },
 4177|   164k|            value);
 4178|   219k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4194|   302k|    {
 4195|   302k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|   302k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   302k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 82.4k, False: 219k]
  |  |  ------------------
  ------------------
 4197|  82.4k|            return unexpected(r.error());
 4198|  82.4k|        }
 4199|       |
 4200|   219k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   219k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   219k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   219k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   219k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.33k, False: 218k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.33k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.33k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.33k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.33k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.33k|    }                                                  \
  |  |  |  | 3667|   219k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   218k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|   218k|        return ranges::next(range.begin(), n);
 4202|   219k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  55.1k|        : m_fptr([](storage fn,
  743|  55.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  55.1k|              cvref<T> obj = *get<T>(fn);
  745|  55.1k|              if constexpr (std::is_void_v<R>) {
  746|  55.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  55.1k|              }
  748|  55.1k|              else {
  749|  55.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  55.1k|              }
  751|  55.1k|          }),
  752|  55.1k|          m_storage(std::addressof(f))
  753|  55.1k|    {
  754|  55.1k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  55.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  55.1k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  55.1k|              else {
  749|  55.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  55.1k|              }
  751|  55.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  55.1k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  55.1k|        else if constexpr (std::is_object_v<T>) {
  688|  55.1k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  55.1k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4165|  55.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  55.1k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  55.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|  55.1k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  55.1k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  55.1k|        {
  662|  55.1k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   164k|        : m_fptr([](storage fn,
  743|   164k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   164k|              cvref<T> obj = *get<T>(fn);
  745|   164k|              if constexpr (std::is_void_v<R>) {
  746|   164k|                  obj(static_cast<decltype(args)>(args)...);
  747|   164k|              }
  748|   164k|              else {
  749|   164k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   164k|              }
  751|   164k|          }),
  752|   164k|          m_storage(std::addressof(f))
  753|   164k|    {
  754|   164k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   164k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   164k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   164k|              else {
  749|   164k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   164k|              }
  751|   164k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   164k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   164k|        else if constexpr (std::is_object_v<T>) {
  688|   164k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   164k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4174|   164k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   164k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   164k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|   164k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   164k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   164k|        {
  662|   164k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4158|   219k|    {
 4159|   219k|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|   219k|#if !SCN_DISABLE_LOCALE
 4162|   219k|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 55.1k, False: 164k]
  ------------------
 4163|  55.1k|            return read_impl<Range>(
 4164|  55.1k|                range, rd,
 4165|  55.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  55.1k|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|  55.1k|                },
 4168|  55.1k|                value, loc);
 4169|  55.1k|        }
 4170|   164k|#endif
 4171|       |
 4172|   164k|        return read_impl<Range>(
 4173|   164k|            range, rd,
 4174|   164k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   164k|                return r.read_source(SCN_FWD(args)...);
 4176|   164k|            },
 4177|   164k|            value);
 4178|   219k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4194|   302k|    {
 4195|   302k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|   302k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   302k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38.4k, False: 263k]
  |  |  ------------------
  ------------------
 4197|  38.4k|            return unexpected(r.error());
 4198|  38.4k|        }
 4199|       |
 4200|   263k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   263k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   263k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   263k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   263k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 45.3k, False: 218k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  45.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  45.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  45.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  45.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  45.3k|    }                                                  \
  |  |  |  | 3667|   263k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   218k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|   218k|        return ranges::next(range.begin(), n);
 4202|   263k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  55.1k|        : m_fptr([](storage fn,
  743|  55.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  55.1k|              cvref<T> obj = *get<T>(fn);
  745|  55.1k|              if constexpr (std::is_void_v<R>) {
  746|  55.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  55.1k|              }
  748|  55.1k|              else {
  749|  55.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  55.1k|              }
  751|  55.1k|          }),
  752|  55.1k|          m_storage(std::addressof(f))
  753|  55.1k|    {
  754|  55.1k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  55.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  55.1k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  55.1k|              else {
  749|  55.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  55.1k|              }
  751|  55.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  55.1k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  55.1k|        else if constexpr (std::is_object_v<T>) {
  688|  55.1k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  55.1k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4165|  55.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  55.1k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  55.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|  55.1k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  55.1k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  55.1k|        {
  662|  55.1k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   164k|        : m_fptr([](storage fn,
  743|   164k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   164k|              cvref<T> obj = *get<T>(fn);
  745|   164k|              if constexpr (std::is_void_v<R>) {
  746|   164k|                  obj(static_cast<decltype(args)>(args)...);
  747|   164k|              }
  748|   164k|              else {
  749|   164k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   164k|              }
  751|   164k|          }),
  752|   164k|          m_storage(std::addressof(f))
  753|   164k|    {
  754|   164k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   164k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   164k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   164k|              else {
  749|   164k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   164k|              }
  751|   164k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   164k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   164k|        else if constexpr (std::is_object_v<T>) {
  688|   164k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   164k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4174|   164k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   164k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   164k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|   164k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   164k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   164k|        {
  662|   164k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6181|   223k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|   223k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|   223k|            auto rd = make_reader<T, char_type>();
 6195|   223k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   223k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 223k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|   223k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 223k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|   223k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|   223k|                return impl(rd, range, value);
 6202|   223k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   223k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|   223k|    {
 6113|   223k|        const bool need_skipped_width =
 6114|   223k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 223k]
  |  Branch (6114:33): [True: 0, False: 223k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   223k|        auto it = rng.begin();
 6118|   223k|        std::ptrdiff_t prefix_width = 0;
 6119|   223k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 223k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   223k|        else {
 6127|   223k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   223k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   223k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   223k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   223k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.01k, False: 222k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.01k|    }                                                  \
  |  |  |  | 3667|   223k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   222k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   222k|            std::tie(it, prefix_width) = prefix_result;
 6129|   222k|        }
 6130|   222k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   222k|        std::ptrdiff_t value_width = 0;
 6134|   222k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 222k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   222k|        else {
 6150|   222k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   222k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   222k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   222k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 64.4k, False: 158k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  64.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  64.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  64.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  64.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  64.4k|    }                                                  \
  |  | 3667|   222k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   222k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|   158k|                                             specs, value, loc));
 6152|       |
 6153|   158k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 158k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|   158k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|   158k|        std::ptrdiff_t postfix_width = 0;
 6162|   158k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 158k, False: 450]
  ------------------
 6163|   158k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   158k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   158k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   158k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   158k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 158k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   158k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   158k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   158k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|   158k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|   158k|                                 value_width));
 6167|   158k|            std::tie(it, postfix_width) = postfix_result;
 6168|   158k|        }
 6169|       |
 6170|   158k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|   158k|                                                 value_width, postfix_width);
 6172|   158k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 158k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|   158k|        return it;
 6177|   158k|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3679|   494k|    {
 3680|   494k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   494k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   494k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3681|       |
 3682|   494k|        const std::ptrdiff_t sign_len =
 3683|   494k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3683:13): [True: 2.33k, False: 491k]
  ------------------
 3684|       |
 3685|   494k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3668|   494k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   494k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   494k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   494k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 45.1k, False: 449k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  45.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  45.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  45.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  45.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  45.1k|    }                                                  \
  |  |  |  | 3667|   494k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   449k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3686|   449k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3687|   494k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4158|   222k|    {
 4159|   222k|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|   222k|#if !SCN_DISABLE_LOCALE
 4162|   222k|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 56.8k, False: 166k]
  ------------------
 4163|  56.8k|            return read_impl<Range>(
 4164|  56.8k|                range, rd,
 4165|  56.8k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  56.8k|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|  56.8k|                },
 4168|  56.8k|                value, loc);
 4169|  56.8k|        }
 4170|   166k|#endif
 4171|       |
 4172|   166k|        return read_impl<Range>(
 4173|   166k|            range, rd,
 4174|   166k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   166k|                return r.read_source(SCN_FWD(args)...);
 4176|   166k|            },
 4177|   166k|            value);
 4178|   222k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4194|   308k|    {
 4195|   308k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|   308k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   308k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 83.5k, False: 224k]
  |  |  ------------------
  ------------------
 4197|  83.5k|            return unexpected(r.error());
 4198|  83.5k|        }
 4199|       |
 4200|   224k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   224k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   224k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   224k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   224k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 207, False: 224k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    207|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    207|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    207|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    207|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    207|    }                                                  \
  |  |  |  | 3667|   224k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   224k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|   224k|        return ranges::next(range.begin(), n);
 4202|   224k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  56.8k|        : m_fptr([](storage fn,
  743|  56.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  56.8k|              cvref<T> obj = *get<T>(fn);
  745|  56.8k|              if constexpr (std::is_void_v<R>) {
  746|  56.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  56.8k|              }
  748|  56.8k|              else {
  749|  56.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  56.8k|              }
  751|  56.8k|          }),
  752|  56.8k|          m_storage(std::addressof(f))
  753|  56.8k|    {
  754|  56.8k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  56.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  56.8k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  56.8k|              else {
  749|  56.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  56.8k|              }
  751|  56.8k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  56.8k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  56.8k|        else if constexpr (std::is_object_v<T>) {
  688|  56.8k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  56.8k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4165|  56.8k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  56.8k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  56.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|  56.8k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  56.8k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  56.8k|        {
  662|  56.8k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   166k|        : m_fptr([](storage fn,
  743|   166k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   166k|              cvref<T> obj = *get<T>(fn);
  745|   166k|              if constexpr (std::is_void_v<R>) {
  746|   166k|                  obj(static_cast<decltype(args)>(args)...);
  747|   166k|              }
  748|   166k|              else {
  749|   166k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   166k|              }
  751|   166k|          }),
  752|   166k|          m_storage(std::addressof(f))
  753|   166k|    {
  754|   166k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   166k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   166k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   166k|              else {
  749|   166k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   166k|              }
  751|   166k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   166k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   166k|        else if constexpr (std::is_object_v<T>) {
  688|   166k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   166k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4174|   166k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   166k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   166k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|   166k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   166k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   166k|        {
  662|   166k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4158|   223k|    {
 4159|   223k|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|   223k|#if !SCN_DISABLE_LOCALE
 4162|   223k|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 56.8k, False: 166k]
  ------------------
 4163|  56.8k|            return read_impl<Range>(
 4164|  56.8k|                range, rd,
 4165|  56.8k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  56.8k|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|  56.8k|                },
 4168|  56.8k|                value, loc);
 4169|  56.8k|        }
 4170|   166k|#endif
 4171|       |
 4172|   166k|        return read_impl<Range>(
 4173|   166k|            range, rd,
 4174|   166k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   166k|                return r.read_source(SCN_FWD(args)...);
 4176|   166k|            },
 4177|   166k|            value);
 4178|   223k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4194|   308k|    {
 4195|   308k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|   308k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   308k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38.8k, False: 269k]
  |  |  ------------------
  ------------------
 4197|  38.8k|            return unexpected(r.error());
 4198|  38.8k|        }
 4199|       |
 4200|   269k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   269k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   269k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   269k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   269k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 44.9k, False: 224k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  44.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  44.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  44.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  44.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  44.9k|    }                                                  \
  |  |  |  | 3667|   269k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   224k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|   224k|        return ranges::next(range.begin(), n);
 4202|   269k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  56.8k|        : m_fptr([](storage fn,
  743|  56.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  56.8k|              cvref<T> obj = *get<T>(fn);
  745|  56.8k|              if constexpr (std::is_void_v<R>) {
  746|  56.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  56.8k|              }
  748|  56.8k|              else {
  749|  56.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  56.8k|              }
  751|  56.8k|          }),
  752|  56.8k|          m_storage(std::addressof(f))
  753|  56.8k|    {
  754|  56.8k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  56.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  56.8k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  56.8k|              else {
  749|  56.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  56.8k|              }
  751|  56.8k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  56.8k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  56.8k|        else if constexpr (std::is_object_v<T>) {
  688|  56.8k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  56.8k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4165|  56.8k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  56.8k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  56.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|  56.8k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  56.8k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  56.8k|        {
  662|  56.8k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   166k|        : m_fptr([](storage fn,
  743|   166k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   166k|              cvref<T> obj = *get<T>(fn);
  745|   166k|              if constexpr (std::is_void_v<R>) {
  746|   166k|                  obj(static_cast<decltype(args)>(args)...);
  747|   166k|              }
  748|   166k|              else {
  749|   166k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   166k|              }
  751|   166k|          }),
  752|   166k|          m_storage(std::addressof(f))
  753|   166k|    {
  754|   166k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   166k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   166k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   166k|              else {
  749|   166k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   166k|              }
  751|   166k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   166k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   166k|        else if constexpr (std::is_object_v<T>) {
  688|   166k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   166k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4174|   166k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   166k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   166k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|   166k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   166k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   166k|        {
  662|   166k|        }
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2048|   880k|{
 2049|   880k|    auto it = range.begin();
 2050|  1.52M|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 1.52M, False: 3.38k]
  ------------------
 2051|  1.52M|        const auto val =
 2052|  1.52M|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|  1.52M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  1.52M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.52M, False: 0]
  |  |  ------------------
  ------------------
 2054|  1.52M|            const auto cp = detail::decode_code_point_exhaustive(
 2055|  1.52M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|  1.52M|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 877k, False: 648k]
  ------------------
 2057|   877k|                return it;
 2058|   877k|            }
 2059|  1.52M|        }
 2060|   648k|        it = val.iterator;
 2061|   648k|    }
 2062|       |
 2063|  3.38k|    return it;
 2064|   880k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1886|  1.52M|{
 1887|  1.52M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  1.52M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.52M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1888|  1.52M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1889|       |
 1890|  1.52M|    auto it = range.begin();
 1891|  1.52M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1892|       |
 1893|  1.52M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  1.52M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.52M]
  |  |  ------------------
  ------------------
 1894|      0|        ++it;
 1895|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1896|      0|        return {it, {}};
 1897|      0|    }
 1898|       |
 1899|  1.52M|    if (len == 1) {
  ------------------
  |  Branch (1899:9): [True: 1.52M, False: 0]
  ------------------
 1900|  1.52M|        ++it;
 1901|  1.52M|        return {it, string_type(1, *range.begin())};
 1902|  1.52M|    }
 1903|       |
 1904|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1905|      0|    return {it, string_type{range.begin(), it}};
 1906|  1.52M|}
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1877|  1.52M|    {
 1878|  1.52M|        return !codepoint.empty();
 1879|  1.52M|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2069|   880k|{
 2070|   880k|    return read_until_code_point(range, std::not_fn(pred));
 2071|   880k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2939|   880k|{
 2940|   880k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 880k, False: 0]
  ------------------
 2941|   880k|        auto it = read_while_classic_space(range);
 2942|   880k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|   880k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   880k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.38k, False: 877k]
  |  |  ------------------
  ------------------
 2944|  3.38k|            return unexpected(e);
 2945|  3.38k|        }
 2946|       |
 2947|   877k|        return it;
 2948|   880k|    }
 2949|       |
 2950|      0|    return read_while_classic_space(range);
 2951|   880k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2104|   880k|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|       |        auto buf = make_contiguous_buffer(range);
 2109|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|       |        return ranges::next(range.begin(),
 2111|       |                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|   880k|    else {
 2114|   880k|        auto it = range.begin();
 2115|       |
 2116|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|       |            auto seg = get_contiguous_beginning(range);
 2118|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|       |                seg_it != seg.end()) {
 2120|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|       |            }
 2122|       |            ranges::advance(it, seg.size());
 2123|       |        }
 2124|       |
 2125|   880k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|   880k|            return detail::is_cp_space(cp);
 2127|   880k|        });
 2128|   880k|    }
 2129|   880k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   880k|        : m_fptr([](storage fn,
  743|   880k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   880k|              cvref<T> obj = *get<T>(fn);
  745|   880k|              if constexpr (std::is_void_v<R>) {
  746|   880k|                  obj(static_cast<decltype(args)>(args)...);
  747|   880k|              }
  748|   880k|              else {
  749|   880k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   880k|              }
  751|   880k|          }),
  752|   880k|          m_storage(std::addressof(f))
  753|   880k|    {
  754|   880k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  1.52M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.52M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.52M|              else {
  749|  1.52M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.52M|              }
  751|  1.52M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  1.52M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.52M|        else if constexpr (std::is_object_v<T>) {
  688|  1.52M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.52M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2125|  1.52M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  1.52M|            return detail::is_cp_space(cp);
 2127|  1.52M|        });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   880k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   880k|        {
  662|   880k|        }
_ZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2075|  1.43M|{
 2076|       |    if constexpr (ranges::contiguous_range<Range> &&
 2077|       |                  ranges::sized_range<Range> &&
 2078|  1.43M|                  std::is_same_v<detail::char_t<Range>, char>) {
 2079|  1.43M|        auto buf = make_contiguous_buffer(range);
 2080|  1.43M|        auto it = find_classic_space_narrow_fast(buf.view());
 2081|  1.43M|        return ranges::next(range.begin(),
 2082|  1.43M|                            ranges::distance(buf.view().begin(), it));
 2083|       |    }
 2084|       |    else {
 2085|       |        auto it = range.begin();
 2086|       |
 2087|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2088|       |            auto seg = get_contiguous_beginning(range);
 2089|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2090|       |                seg_it != seg.end()) {
 2091|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2092|       |            }
 2093|       |            ranges::advance(it, seg.size());
 2094|       |        }
 2095|       |
 2096|       |        return read_until_code_point(
 2097|       |            ranges::subrange{it, range.end()},
 2098|       |            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2099|       |    }
 2100|  1.43M|}
_ZN3scn2v34impl22make_contiguous_bufferIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 1670|  1.43M|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|  1.43M|                  ranges::sized_range<Range>) {
 1674|  1.43M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  1.43M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1675|       |    }
 1676|       |    else {
 1677|       |        return contiguous_range_factory{SCN_FWD(range)};
 1678|       |    }
 1679|  1.43M|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEETnPNS5_9enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISC_Esr6rangesE11sized_rangeISC_EEvE4typeELPv0EEEOSC_:
 1476|  1.43M|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1477|  1.43M|    {
 1478|  1.43M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEETnPNS5_9enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSD_:
 1564|  1.43M|    {
 1565|  1.43M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  1.43M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1566|  1.43M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEvOT_:
 1608|  1.43M|    {
 1609|  1.43M|        using value_t = ranges::range_value_t<Range>;
 1610|       |
 1611|       |        if constexpr (ranges::borrowed_range<Range> &&
 1612|       |                      ranges::contiguous_range<Range> &&
 1613|       |                      ranges::sized_range<Range>) {
 1614|       |            m_storage.reset();
 1615|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1616|       |        }
 1617|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1618|  1.43M|                                          std::basic_string<CharT>>) {
 1619|  1.43M|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  930|  1.43M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1620|  1.43M|            m_view = string_view_type{*m_storage};
 1621|       |        }
 1622|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1623|       |                                          typename detail::basic_scan_buffer<
 1624|       |                                              value_t>::forward_iterator> &&
 1625|       |                           ranges::common_range<Range>) {
 1626|       |            auto beg_seg = range.begin().contiguous_segment();
 1627|       |            auto end_seg = range.end().contiguous_segment();
 1628|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1629|       |                             detail::to_address(end_seg.end()))) {
 1630|       |                auto& str = m_storage.emplace();
 1631|       |                str.reserve(range.end().position() - range.begin().position());
 1632|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1633|       |                m_view = string_view_type{str};
 1634|       |                return;
 1635|       |            }
 1636|       |
 1637|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1638|       |                                                            end_seg.data());
 1639|       |            m_storage.reset();
 1640|       |        }
 1641|       |        else {
 1642|       |            auto& str = m_storage.emplace();
 1643|       |            if constexpr (ranges::sized_range<Range>) {
 1644|       |                str.reserve(range.size());
 1645|       |            }
 1646|       |            if constexpr (ranges::common_range<Range>) {
 1647|       |                std::copy(ranges::begin(range), ranges::end(range),
 1648|       |                          std::back_inserter(str));
 1649|       |            }
 1650|       |            else {
 1651|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1652|       |                     ++it) {
 1653|       |                    str.push_back(*it);
 1654|       |                }
 1655|       |            }
 1656|       |            m_view = string_view_type{str};
 1657|       |        }
 1658|  1.43M|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIfEET_S5_:
 4088|  1.03M|    {
 4089|  1.03M|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4089:13): [True: 102k, False: 936k]
  ------------------
 4090|   102k|            return std::copysign(value, T{-1.0});
 4091|   102k|        }
 4092|   936k|        return std::copysign(value, T{1.0});
 4093|  1.03M|    }
_ZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2075|   625k|{
 2076|       |    if constexpr (ranges::contiguous_range<Range> &&
 2077|       |                  ranges::sized_range<Range> &&
 2078|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2079|       |        auto buf = make_contiguous_buffer(range);
 2080|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2081|       |        return ranges::next(range.begin(),
 2082|       |                            ranges::distance(buf.view().begin(), it));
 2083|       |    }
 2084|   625k|    else {
 2085|   625k|        auto it = range.begin();
 2086|       |
 2087|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2088|       |            auto seg = get_contiguous_beginning(range);
 2089|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2090|       |                seg_it != seg.end()) {
 2091|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2092|       |            }
 2093|       |            ranges::advance(it, seg.size());
 2094|       |        }
 2095|       |
 2096|   625k|        return read_until_code_point(
 2097|   625k|            ranges::subrange{it, range.end()},
 2098|   625k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2099|   625k|    }
 2100|   625k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_:
  742|   625k|        : m_fptr([](storage fn,
  743|   625k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   625k|              cvref<T> obj = *get<T>(fn);
  745|   625k|              if constexpr (std::is_void_v<R>) {
  746|   625k|                  obj(static_cast<decltype(args)>(args)...);
  747|   625k|              }
  748|   625k|              else {
  749|   625k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   625k|              }
  751|   625k|          }),
  752|   625k|          m_storage(std::addressof(f))
  753|   625k|    {
  754|   625k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESU_Di:
  743|  1.18M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.18M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.18M|              else {
  749|  1.18M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.18M|              }
  751|  1.18M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  683|  1.18M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.18M|        else if constexpr (std::is_object_v<T>) {
  688|  1.18M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.18M|    }
_ZZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2098|  1.18M|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vISE_EEvE4typeELPv0EEEPSE_:
  660|   625k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   625k|        {
  662|   625k|        }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEETnPNS5_9enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSD_:
 1564|   625k|    {
 1565|   625k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   625k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1566|   625k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEvOT_:
 1608|   625k|    {
 1609|   625k|        using value_t = ranges::range_value_t<Range>;
 1610|       |
 1611|       |        if constexpr (ranges::borrowed_range<Range> &&
 1612|       |                      ranges::contiguous_range<Range> &&
 1613|       |                      ranges::sized_range<Range>) {
 1614|       |            m_storage.reset();
 1615|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1616|       |        }
 1617|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1618|   625k|                                          std::basic_string<CharT>>) {
 1619|   625k|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  930|   625k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1620|   625k|            m_view = string_view_type{*m_storage};
 1621|       |        }
 1622|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1623|       |                                          typename detail::basic_scan_buffer<
 1624|       |                                              value_t>::forward_iterator> &&
 1625|       |                           ranges::common_range<Range>) {
 1626|       |            auto beg_seg = range.begin().contiguous_segment();
 1627|       |            auto end_seg = range.end().contiguous_segment();
 1628|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1629|       |                             detail::to_address(end_seg.end()))) {
 1630|       |                auto& str = m_storage.emplace();
 1631|       |                str.reserve(range.end().position() - range.begin().position());
 1632|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1633|       |                m_view = string_view_type{str};
 1634|       |                return;
 1635|       |            }
 1636|       |
 1637|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1638|       |                                                            end_seg.data());
 1639|       |            m_storage.reset();
 1640|       |        }
 1641|       |        else {
 1642|       |            auto& str = m_storage.emplace();
 1643|       |            if constexpr (ranges::sized_range<Range>) {
 1644|       |                str.reserve(range.size());
 1645|       |            }
 1646|       |            if constexpr (ranges::common_range<Range>) {
 1647|       |                std::copy(ranges::begin(range), ranges::end(range),
 1648|       |                          std::back_inserter(str));
 1649|       |            }
 1650|       |            else {
 1651|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1652|       |                     ++it) {
 1653|       |                    str.push_back(*it);
 1654|       |                }
 1655|       |            }
 1656|       |            m_view = string_view_type{str};
 1657|       |        }
 1658|   625k|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIfEET_S5_:
 4088|   415k|    {
 4089|   415k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4089:13): [True: 1.73k, False: 413k]
  ------------------
 4090|  1.73k|            return std::copysign(value, T{-1.0});
 4091|  1.73k|        }
 4092|   413k|        return std::copysign(value, T{1.0});
 4093|   415k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIdEET_S5_:
 4088|  1.08M|    {
 4089|  1.08M|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4089:13): [True: 106k, False: 976k]
  ------------------
 4090|   106k|            return std::copysign(value, T{-1.0});
 4091|   106k|        }
 4092|   976k|        return std::copysign(value, T{1.0});
 4093|  1.08M|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIdEET_S5_:
 4088|   483k|    {
 4089|   483k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4089:13): [True: 1.76k, False: 481k]
  ------------------
 4090|  1.76k|            return std::copysign(value, T{-1.0});
 4091|  1.76k|        }
 4092|   481k|        return std::copysign(value, T{1.0});
 4093|   483k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIeEET_S5_:
 4088|  1.09M|    {
 4089|  1.09M|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4089:13): [True: 109k, False: 984k]
  ------------------
 4090|   109k|            return std::copysign(value, T{-1.0});
 4091|   109k|        }
 4092|   984k|        return std::copysign(value, T{1.0});
 4093|  1.09M|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIeEET_S5_:
 4088|   494k|    {
 4089|   494k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4089:13): [True: 1.77k, False: 492k]
  ------------------
 4090|  1.77k|            return std::copysign(value, T{-1.0});
 4091|  1.77k|        }
 4092|   492k|        return std::copysign(value, T{1.0});
 4093|   494k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5783|   461k|{
 5784|   461k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   461k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.62k, False: 456k]
  |  |  ------------------
  ------------------
 5785|  4.62k|        return unexpected(e);
 5786|  4.62k|    }
 5787|       |
 5788|   456k|    if (!is_required) {
  ------------------
  |  Branch (5788:9): [True: 0, False: 456k]
  ------------------
 5789|      0|        return range.begin();
 5790|      0|    }
 5791|       |
 5792|   456k|    return skip_classic_whitespace(range);
 5793|   456k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIfEENS0_13scan_expectedIPKcEERT_:
 5859|   148k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|   148k|                          basic_contiguous_scan_context<char_type>>) {
 5864|   148k|            auto rd = make_reader<T, char_type>();
 5865|   148k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|   148k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|   148k|    {
 5852|   148k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|   148k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   148k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   148k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   148k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.50k, False: 147k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.50k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.50k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.50k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.50k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.50k|    }                                                  \
  |  |  |  | 3667|   148k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   147k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|   147k|                        .transform_error(make_eof_scan_error));
 5854|   147k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|   148k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4140|   147k|    {
 4141|   147k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   147k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4142|       |
 4143|   147k|        float_reader<CharT> rd{};
 4144|   147k|        return read_impl<Range>(
 4145|   147k|            range, rd,
 4146|   147k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|   147k|                return r.read_source(SCN_FWD(args)...);
 4148|   147k|            },
 4149|   147k|            value);
 4150|   147k|    }
_ZN3scn2v34impl12float_readerIcEC2Ev:
 3646|   958k|    constexpr float_reader() = default;
_ZN3scn2v34impl17float_reader_baseC2Ev:
 3632|  1.43M|    constexpr float_reader_base() = default;
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|   147k|        : m_fptr([](storage fn,
  743|   147k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   147k|              cvref<T> obj = *get<T>(fn);
  745|   147k|              if constexpr (std::is_void_v<R>) {
  746|   147k|                  obj(static_cast<decltype(args)>(args)...);
  747|   147k|              }
  748|   147k|              else {
  749|   147k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   147k|              }
  751|   147k|          }),
  752|   147k|          m_storage(std::addressof(f))
  753|   147k|    {
  754|   147k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|   147k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   147k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   147k|              else {
  749|   147k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   147k|              }
  751|   147k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   147k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   147k|        else if constexpr (std::is_object_v<T>) {
  688|   147k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   147k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4146|   147k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|   147k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   147k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4148|   147k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   147k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   147k|        {
  662|   147k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 5859|   154k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|   154k|                          basic_contiguous_scan_context<char_type>>) {
 5864|   154k|            auto rd = make_reader<T, char_type>();
 5865|   154k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|   154k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|   154k|    {
 5852|   154k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|   154k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   154k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   154k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   154k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.73k, False: 153k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.73k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.73k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.73k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.73k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.73k|    }                                                  \
  |  |  |  | 3667|   154k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   153k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|   153k|                        .transform_error(make_eof_scan_error));
 5854|   153k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|   154k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4140|   153k|    {
 4141|   153k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   153k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4142|       |
 4143|   153k|        float_reader<CharT> rd{};
 4144|   153k|        return read_impl<Range>(
 4145|   153k|            range, rd,
 4146|   153k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|   153k|                return r.read_source(SCN_FWD(args)...);
 4148|   153k|            },
 4149|   153k|            value);
 4150|   153k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|   153k|        : m_fptr([](storage fn,
  743|   153k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   153k|              cvref<T> obj = *get<T>(fn);
  745|   153k|              if constexpr (std::is_void_v<R>) {
  746|   153k|                  obj(static_cast<decltype(args)>(args)...);
  747|   153k|              }
  748|   153k|              else {
  749|   153k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   153k|              }
  751|   153k|          }),
  752|   153k|          m_storage(std::addressof(f))
  753|   153k|    {
  754|   153k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|   153k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   153k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   153k|              else {
  749|   153k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   153k|              }
  751|   153k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   153k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   153k|        else if constexpr (std::is_object_v<T>) {
  688|   153k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   153k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4146|   153k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|   153k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   153k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4148|   153k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   153k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   153k|        {
  662|   153k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIeEENS0_13scan_expectedIPKcEERT_:
 5859|   157k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|   157k|                          basic_contiguous_scan_context<char_type>>) {
 5864|   157k|            auto rd = make_reader<T, char_type>();
 5865|   157k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|   157k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|   157k|    {
 5852|   157k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|   157k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   157k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   157k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.87k, False: 155k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.87k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.87k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.87k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.87k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.87k|    }                                                  \
  |  |  |  | 3667|   157k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   155k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|   155k|                        .transform_error(make_eof_scan_error));
 5854|   155k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|   157k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4140|   155k|    {
 4141|   155k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   155k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4142|       |
 4143|   155k|        float_reader<CharT> rd{};
 4144|   155k|        return read_impl<Range>(
 4145|   155k|            range, rd,
 4146|   155k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|   155k|                return r.read_source(SCN_FWD(args)...);
 4148|   155k|            },
 4149|   155k|            value);
 4150|   155k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|   155k|        : m_fptr([](storage fn,
  743|   155k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   155k|              cvref<T> obj = *get<T>(fn);
  745|   155k|              if constexpr (std::is_void_v<R>) {
  746|   155k|                  obj(static_cast<decltype(args)>(args)...);
  747|   155k|              }
  748|   155k|              else {
  749|   155k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   155k|              }
  751|   155k|          }),
  752|   155k|          m_storage(std::addressof(f))
  753|   155k|    {
  754|   155k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|   155k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   155k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   155k|              else {
  749|   155k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   155k|              }
  751|   155k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   155k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   155k|        else if constexpr (std::is_object_v<T>) {
  688|   155k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   155k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4146|   155k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|   155k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   155k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4148|   155k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   155k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   155k|        {
  662|   155k|        }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5783|   507k|{
 5784|   507k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   507k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.84k, False: 502k]
  |  |  ------------------
  ------------------
 5785|  4.84k|        return unexpected(e);
 5786|  4.84k|    }
 5787|       |
 5788|   502k|    if (!is_required) {
  ------------------
  |  Branch (5788:9): [True: 0, False: 502k]
  ------------------
 5789|      0|        return range.begin();
 5790|      0|    }
 5791|       |
 5792|   502k|    return skip_classic_whitespace(range);
 5793|   502k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5859|   162k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|   162k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|   162k|            auto rd = make_reader<T, char_type>();
 5869|   162k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 162k, False: 0]
  ------------------
 5870|   162k|                return impl(rd, range, value);
 5871|   162k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|   162k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|   162k|    {
 5852|   162k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|   162k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   162k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   162k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   162k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.59k, False: 161k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.59k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.59k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.59k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.59k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.59k|    }                                                  \
  |  |  |  | 3667|   162k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   161k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|   161k|                        .transform_error(make_eof_scan_error));
 5854|   161k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|   162k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4140|   161k|    {
 4141|   161k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   161k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4142|       |
 4143|   161k|        float_reader<CharT> rd{};
 4144|   161k|        return read_impl<Range>(
 4145|   161k|            range, rd,
 4146|   161k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|   161k|                return r.read_source(SCN_FWD(args)...);
 4148|   161k|            },
 4149|   161k|            value);
 4150|   161k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|   161k|        : m_fptr([](storage fn,
  743|   161k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   161k|              cvref<T> obj = *get<T>(fn);
  745|   161k|              if constexpr (std::is_void_v<R>) {
  746|   161k|                  obj(static_cast<decltype(args)>(args)...);
  747|   161k|              }
  748|   161k|              else {
  749|   161k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   161k|              }
  751|   161k|          }),
  752|   161k|          m_storage(std::addressof(f))
  753|   161k|    {
  754|   161k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|   161k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   161k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   161k|              else {
  749|   161k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   161k|              }
  751|   161k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   161k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   161k|        else if constexpr (std::is_object_v<T>) {
  688|   161k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   161k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4146|   161k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|   161k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   161k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4148|   161k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   161k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   161k|        {
  662|   161k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5859|   171k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|   171k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|   171k|            auto rd = make_reader<T, char_type>();
 5869|   171k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 171k, False: 0]
  ------------------
 5870|   171k|                return impl(rd, range, value);
 5871|   171k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|   171k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|   171k|    {
 5852|   171k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|   171k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   171k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   171k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   171k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.84k, False: 169k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.84k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.84k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.84k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.84k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.84k|    }                                                  \
  |  |  |  | 3667|   171k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   169k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|   169k|                        .transform_error(make_eof_scan_error));
 5854|   169k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|   171k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4140|   169k|    {
 4141|   169k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   169k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4142|       |
 4143|   169k|        float_reader<CharT> rd{};
 4144|   169k|        return read_impl<Range>(
 4145|   169k|            range, rd,
 4146|   169k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|   169k|                return r.read_source(SCN_FWD(args)...);
 4148|   169k|            },
 4149|   169k|            value);
 4150|   169k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|   169k|        : m_fptr([](storage fn,
  743|   169k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   169k|              cvref<T> obj = *get<T>(fn);
  745|   169k|              if constexpr (std::is_void_v<R>) {
  746|   169k|                  obj(static_cast<decltype(args)>(args)...);
  747|   169k|              }
  748|   169k|              else {
  749|   169k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   169k|              }
  751|   169k|          }),
  752|   169k|          m_storage(std::addressof(f))
  753|   169k|    {
  754|   169k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|   169k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   169k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   169k|              else {
  749|   169k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   169k|              }
  751|   169k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   169k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   169k|        else if constexpr (std::is_object_v<T>) {
  688|   169k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   169k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4146|   169k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|   169k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   169k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4148|   169k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   169k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   169k|        {
  662|   169k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5859|   173k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|   173k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|   173k|            auto rd = make_reader<T, char_type>();
 5869|   173k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 173k, False: 0]
  ------------------
 5870|   173k|                return impl(rd, range, value);
 5871|   173k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|   173k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|   173k|    {
 5852|   173k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|   173k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   173k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   173k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   173k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.97k, False: 171k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.97k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.97k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.97k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.97k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.97k|    }                                                  \
  |  |  |  | 3667|   173k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   171k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|   171k|                        .transform_error(make_eof_scan_error));
 5854|   171k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|   173k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4140|   171k|    {
 4141|   171k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   171k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4142|       |
 4143|   171k|        float_reader<CharT> rd{};
 4144|   171k|        return read_impl<Range>(
 4145|   171k|            range, rd,
 4146|   171k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|   171k|                return r.read_source(SCN_FWD(args)...);
 4148|   171k|            },
 4149|   171k|            value);
 4150|   171k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|   171k|        : m_fptr([](storage fn,
  743|   171k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   171k|              cvref<T> obj = *get<T>(fn);
  745|   171k|              if constexpr (std::is_void_v<R>) {
  746|   171k|                  obj(static_cast<decltype(args)>(args)...);
  747|   171k|              }
  748|   171k|              else {
  749|   171k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   171k|              }
  751|   171k|          }),
  752|   171k|          m_storage(std::addressof(f))
  753|   171k|    {
  754|   171k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|   171k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   171k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   171k|              else {
  749|   171k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   171k|              }
  751|   171k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   171k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   171k|        else if constexpr (std::is_object_v<T>) {
  688|   171k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   171k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4146|   171k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|   171k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   171k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4148|   171k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   171k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   171k|        {
  662|   171k|        }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISF_EEvE4typeELPv0EEEOSF_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2864|  1.11M|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  928|  1.11M|    static_cast<    \
  |  |  929|  1.11M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2865|  1.11M|          m_range(SCN_FWD(r)),
  ------------------
  |  |  930|  1.11M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2866|  1.11M|          m_current(m_range.begin())
 2867|  1.11M|    {
 2868|  1.11M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2871|  3.23M|    {
 2872|  3.23M|        return m_current;
 2873|  3.23M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2876|  2.12M|    {
 2877|  2.12M|        return m_range.end();
 2878|  2.12M|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2891|  1.01M|    {
 2892|  1.01M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|  1.01M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.01M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2893|  1.01M|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 2894|  1.01M|            if (it == nullptr) {
  ------------------
  |  Branch (2894:17): [True: 0, False: 1.01M]
  ------------------
 2895|      0|                it = end();
 2896|      0|            }
 2897|  1.01M|        }
 2898|  1.01M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  1.01M|    static_cast<    \
  |  |  929|  1.01M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2899|  1.01M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2881|  1.11M|    {
 2882|  1.11M|        return ranges::subrange{begin(), end()};
 2883|  1.11M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6025|  1.11M|    {
 6026|  1.11M|        const bool need_skipped_width =
 6027|  1.11M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 0, False: 1.11M]
  |  Branch (6027:33): [True: 0, False: 1.11M]
  ------------------
 6028|  1.11M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|  1.11M|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 0, False: 1.11M]
  ------------------
 6032|  1.11M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 0, False: 1.11M]
  ------------------
 6033|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6034|      0|                             need_skipped_width);
 6035|      0|        }
 6036|  1.11M|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 1.11M, False: 0]
  |  Branch (6036:56): [True: 1.11M, False: 0]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|  1.11M|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 0, False: 1.11M]
  ------------------
 6040|      0|                auto max_width_view = take_width(rng, specs.precision);
 6041|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|      0|                                  .transform_error(make_eof_scan_error));
 6043|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|      0|            }
 6045|  2.21M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|  1.11M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.11M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.11M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 13.0k, False: 1.09M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  13.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  13.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  13.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  13.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  13.0k|    }                                                  \
  |  |  |  | 3667|  1.11M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.09M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|  2.21M|                            make_eof_scan_error));
 6047|       |
 6048|  2.21M|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 0, False: 1.09M]
  ------------------
 6049|      0|                return result_type{
 6050|      0|                    it,
 6051|      0|                    calculate_text_width(make_contiguous_buffer(
 6052|      0|                                             ranges::subrange{rng.begin(), it})
 6053|      0|                                             .view())};
 6054|      0|            }
 6055|  1.09M|            return result_type{it, 0};
 6056|  2.21M|        }
 6057|       |
 6058|      0|        return result_type{rng.begin(), 0};
 6059|  1.11M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6067|  1.00M|    {
 6068|  1.00M|        const bool need_skipped_width =
 6069|  1.00M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6069:13): [True: 0, False: 1.00M]
  |  Branch (6069:33): [True: 0, False: 1.00M]
  ------------------
 6070|  1.00M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6071|       |
 6072|  1.00M|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6072:13): [True: 0, False: 1.00M]
  ------------------
 6073|  1.00M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6073:13): [True: 0, False: 1.00M]
  ------------------
 6074|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6074:17): [True: 0, False: 0]
  ------------------
 6075|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6075:17): [True: 0, False: 0]
  ------------------
 6076|      0|                return result_type{rng.begin(), 0};
 6077|      0|            }
 6078|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6079|      0|                             specs.fill, need_skipped_width);
 6080|      0|        }
 6081|  1.00M|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6081:13): [True: 1.00M, False: 0]
  ------------------
 6082|  1.00M|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6082:13): [True: 0, False: 1.00M]
  ------------------
 6083|  1.00M|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6083:15): [True: 0, False: 0]
  |  Branch (6083:35): [True: 0, False: 0]
  ------------------
 6084|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6084:15): [True: 0, False: 0]
  ------------------
 6085|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6085:15): [True: 0, False: 0]
  ------------------
 6086|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                const auto initial_width =
 6088|      0|                    specs.precision - prefix_width - value_width;
 6089|      0|                auto max_width_view = take_width(rng, initial_width);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6093|      0|            }
 6094|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|      0|                            make_eof_scan_error));
 6096|       |
 6097|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|      0|            return result_type{it, 0};
 6105|      0|        }
 6106|  1.00M|        return result_type{rng.begin(), 0};
 6107|  1.00M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIfEENS0_13scan_expectedIPKcEERT_:
 6181|   361k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|   361k|                          basic_contiguous_scan_context<char_type>>) {
 6186|   361k|            auto rd = make_reader<T, char_type>();
 6187|   361k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   361k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 361k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|   361k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   361k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|   361k|    {
 6113|   361k|        const bool need_skipped_width =
 6114|   361k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 361k]
  |  Branch (6114:33): [True: 0, False: 361k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   361k|        auto it = rng.begin();
 6118|   361k|        std::ptrdiff_t prefix_width = 0;
 6119|   361k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 361k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   361k|        else {
 6127|   361k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   361k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   361k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   361k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   361k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.94k, False: 357k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.94k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.94k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.94k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.94k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.94k|    }                                                  \
  |  |  |  | 3667|   361k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   357k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   357k|            std::tie(it, prefix_width) = prefix_result;
 6129|   357k|        }
 6130|   357k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   357k|        std::ptrdiff_t value_width = 0;
 6134|   357k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 357k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   357k|        else {
 6150|   357k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   357k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   357k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   357k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 28.7k, False: 328k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  28.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  28.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  28.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  28.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  28.7k|    }                                                  \
  |  | 3667|   357k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   357k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|   328k|                                             specs, value, loc));
 6152|       |
 6153|   328k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 328k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|   328k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|   328k|        std::ptrdiff_t postfix_width = 0;
 6162|   328k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 325k, False: 3.51k]
  ------------------
 6163|   325k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   325k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   325k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   325k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   325k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 325k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   325k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   325k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   325k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|   325k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|   325k|                                 value_width));
 6167|   325k|            std::tie(it, postfix_width) = postfix_result;
 6168|   325k|        }
 6169|       |
 6170|   328k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|   328k|                                                 value_width, postfix_width);
 6172|   328k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 328k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|   328k|        return it;
 6177|   328k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 6181|   373k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|   373k|                          basic_contiguous_scan_context<char_type>>) {
 6186|   373k|            auto rd = make_reader<T, char_type>();
 6187|   373k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   373k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 373k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|   373k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   373k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|   373k|    {
 6113|   373k|        const bool need_skipped_width =
 6114|   373k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 373k]
  |  Branch (6114:33): [True: 0, False: 373k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   373k|        auto it = rng.begin();
 6118|   373k|        std::ptrdiff_t prefix_width = 0;
 6119|   373k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 373k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   373k|        else {
 6127|   373k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   373k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   373k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   373k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   373k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.41k, False: 368k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.41k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.41k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.41k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.41k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.41k|    }                                                  \
  |  |  |  | 3667|   373k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   368k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   368k|            std::tie(it, prefix_width) = prefix_result;
 6129|   368k|        }
 6130|   368k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   368k|        std::ptrdiff_t value_width = 0;
 6134|   368k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 368k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   368k|        else {
 6150|   368k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   368k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   368k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   368k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 28.3k, False: 340k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  28.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  28.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  28.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  28.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  28.3k|    }                                                  \
  |  | 3667|   368k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   368k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|   340k|                                             specs, value, loc));
 6152|       |
 6153|   340k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 340k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|   340k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|   340k|        std::ptrdiff_t postfix_width = 0;
 6162|   340k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 336k, False: 3.94k]
  ------------------
 6163|   336k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   336k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   336k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   336k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   336k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 336k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   336k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   336k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   336k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|   336k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|   336k|                                 value_width));
 6167|   336k|            std::tie(it, postfix_width) = postfix_result;
 6168|   336k|        }
 6169|       |
 6170|   340k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|   340k|                                                 value_width, postfix_width);
 6172|   340k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 340k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|   340k|        return it;
 6177|   340k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIeEENS0_13scan_expectedIPKcEERT_:
 6181|   377k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|   377k|                          basic_contiguous_scan_context<char_type>>) {
 6186|   377k|            auto rd = make_reader<T, char_type>();
 6187|   377k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   377k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 377k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|   377k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   377k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|   377k|    {
 6113|   377k|        const bool need_skipped_width =
 6114|   377k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 377k]
  |  Branch (6114:33): [True: 0, False: 377k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   377k|        auto it = rng.begin();
 6118|   377k|        std::ptrdiff_t prefix_width = 0;
 6119|   377k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 377k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   377k|        else {
 6127|   377k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   377k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   377k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   377k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   377k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.69k, False: 372k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.69k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.69k|    }                                                  \
  |  |  |  | 3667|   377k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   372k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   372k|            std::tie(it, prefix_width) = prefix_result;
 6129|   372k|        }
 6130|   372k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   372k|        std::ptrdiff_t value_width = 0;
 6134|   372k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 372k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   372k|        else {
 6150|   372k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   372k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   372k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   372k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 28.0k, False: 344k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  28.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  28.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  28.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  28.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  28.0k|    }                                                  \
  |  | 3667|   372k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   372k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|   344k|                                             specs, value, loc));
 6152|       |
 6153|   344k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 344k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|   344k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|   344k|        std::ptrdiff_t postfix_width = 0;
 6162|   344k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 340k, False: 4.18k]
  ------------------
 6163|   340k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   340k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   340k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   340k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   340k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 340k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   340k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   340k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   340k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|   340k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|   340k|                                 value_width));
 6167|   340k|            std::tie(it, postfix_width) = postfix_result;
 6168|   340k|        }
 6169|       |
 6170|   344k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|   344k|                                                 value_width, postfix_width);
 6172|   344k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 344k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|   344k|        return it;
 6177|   344k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5783|   236k|{
 5784|   236k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   236k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 474, False: 236k]
  |  |  ------------------
  ------------------
 5785|    474|        return unexpected(e);
 5786|    474|    }
 5787|       |
 5788|   236k|    if (!is_required) {
  ------------------
  |  Branch (5788:9): [True: 0, False: 236k]
  ------------------
 5789|      0|        return range.begin();
 5790|      0|    }
 5791|       |
 5792|   236k|    return skip_classic_whitespace(range);
 5793|   236k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIfEENS0_13scan_expectedIPKwEERT_:
 5859|  68.1k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  68.1k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  68.1k|            auto rd = make_reader<T, char_type>();
 5865|  68.1k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  68.1k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|  68.1k|    {
 5852|  68.1k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  68.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  68.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  68.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  68.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 291, False: 67.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    291|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    291|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    291|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    291|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    291|    }                                                  \
  |  |  |  | 3667|  68.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  67.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  67.8k|                        .transform_error(make_eof_scan_error));
 5854|  67.8k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  68.1k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4140|  67.8k|    {
 4141|  67.8k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  67.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4142|       |
 4143|  67.8k|        float_reader<CharT> rd{};
 4144|  67.8k|        return read_impl<Range>(
 4145|  67.8k|            range, rd,
 4146|  67.8k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  67.8k|                return r.read_source(SCN_FWD(args)...);
 4148|  67.8k|            },
 4149|  67.8k|            value);
 4150|  67.8k|    }
_ZN3scn2v34impl12float_readerIwEC2Ev:
 3646|   471k|    constexpr float_reader() = default;
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  67.8k|        : m_fptr([](storage fn,
  743|  67.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  67.8k|              cvref<T> obj = *get<T>(fn);
  745|  67.8k|              if constexpr (std::is_void_v<R>) {
  746|  67.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  67.8k|              }
  748|  67.8k|              else {
  749|  67.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  67.8k|              }
  751|  67.8k|          }),
  752|  67.8k|          m_storage(std::addressof(f))
  753|  67.8k|    {
  754|  67.8k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  67.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  67.8k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  67.8k|              else {
  749|  67.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  67.8k|              }
  751|  67.8k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  67.8k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  67.8k|        else if constexpr (std::is_object_v<T>) {
  688|  67.8k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  67.8k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4146|  67.8k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  67.8k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  67.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4148|  67.8k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  67.8k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  67.8k|        {
  662|  67.8k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 5859|  83.0k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  83.0k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  83.0k|            auto rd = make_reader<T, char_type>();
 5865|  83.0k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  83.0k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|  83.0k|    {
 5852|  83.0k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  83.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  83.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  83.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  83.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 330, False: 82.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    330|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    330|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    330|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    330|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    330|    }                                                  \
  |  |  |  | 3667|  83.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  82.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  82.7k|                        .transform_error(make_eof_scan_error));
 5854|  82.7k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  83.0k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4140|  82.7k|    {
 4141|  82.7k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  82.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4142|       |
 4143|  82.7k|        float_reader<CharT> rd{};
 4144|  82.7k|        return read_impl<Range>(
 4145|  82.7k|            range, rd,
 4146|  82.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  82.7k|                return r.read_source(SCN_FWD(args)...);
 4148|  82.7k|            },
 4149|  82.7k|            value);
 4150|  82.7k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  82.7k|        : m_fptr([](storage fn,
  743|  82.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  82.7k|              cvref<T> obj = *get<T>(fn);
  745|  82.7k|              if constexpr (std::is_void_v<R>) {
  746|  82.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  82.7k|              }
  748|  82.7k|              else {
  749|  82.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  82.7k|              }
  751|  82.7k|          }),
  752|  82.7k|          m_storage(std::addressof(f))
  753|  82.7k|    {
  754|  82.7k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  82.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  82.7k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  82.7k|              else {
  749|  82.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  82.7k|              }
  751|  82.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  82.7k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  82.7k|        else if constexpr (std::is_object_v<T>) {
  688|  82.7k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  82.7k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4146|  82.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  82.7k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  82.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4148|  82.7k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  82.7k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  82.7k|        {
  662|  82.7k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIeEENS0_13scan_expectedIPKwEERT_:
 5859|  85.6k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  85.6k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  85.6k|            auto rd = make_reader<T, char_type>();
 5865|  85.6k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  85.6k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|  85.6k|    {
 5852|  85.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  85.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  85.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  85.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  85.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 363, False: 85.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    363|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    363|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    363|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    363|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    363|    }                                                  \
  |  |  |  | 3667|  85.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  85.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  85.3k|                        .transform_error(make_eof_scan_error));
 5854|  85.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  85.6k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4140|  85.3k|    {
 4141|  85.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  85.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4142|       |
 4143|  85.3k|        float_reader<CharT> rd{};
 4144|  85.3k|        return read_impl<Range>(
 4145|  85.3k|            range, rd,
 4146|  85.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  85.3k|                return r.read_source(SCN_FWD(args)...);
 4148|  85.3k|            },
 4149|  85.3k|            value);
 4150|  85.3k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  85.3k|        : m_fptr([](storage fn,
  743|  85.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  85.3k|              cvref<T> obj = *get<T>(fn);
  745|  85.3k|              if constexpr (std::is_void_v<R>) {
  746|  85.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  85.3k|              }
  748|  85.3k|              else {
  749|  85.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  85.3k|              }
  751|  85.3k|          }),
  752|  85.3k|          m_storage(std::addressof(f))
  753|  85.3k|    {
  754|  85.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  85.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  85.3k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  85.3k|              else {
  749|  85.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  85.3k|              }
  751|  85.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  85.3k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  85.3k|        else if constexpr (std::is_object_v<T>) {
  688|  85.3k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  85.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4146|  85.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  85.3k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  85.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4148|  85.3k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  85.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  85.3k|        {
  662|  85.3k|        }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISF_EEvE4typeELPv0EEEOSF_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2864|   645k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  928|   645k|    static_cast<    \
  |  |  929|   645k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2865|   645k|          m_range(SCN_FWD(r)),
  ------------------
  |  |  930|   645k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2866|   645k|          m_current(m_range.begin())
 2867|   645k|    {
 2868|   645k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2871|  1.73M|    {
 2872|  1.73M|        return m_current;
 2873|  1.73M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2876|  1.09M|    {
 2877|  1.09M|        return m_range.end();
 2878|  1.09M|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2891|   448k|    {
 2892|   448k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   448k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   448k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2893|   448k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 2894|   448k|            if (it == nullptr) {
  ------------------
  |  Branch (2894:17): [True: 0, False: 448k]
  ------------------
 2895|      0|                it = end();
 2896|      0|            }
 2897|   448k|        }
 2898|   448k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   448k|    static_cast<    \
  |  |  929|   448k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2899|   448k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2881|   645k|    {
 2882|   645k|        return ranges::subrange{begin(), end()};
 2883|   645k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6025|   645k|    {
 6026|   645k|        const bool need_skipped_width =
 6027|   645k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 0, False: 645k]
  |  Branch (6027:33): [True: 0, False: 645k]
  ------------------
 6028|   645k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|   645k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 0, False: 645k]
  ------------------
 6032|   645k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 0, False: 645k]
  ------------------
 6033|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6034|      0|                             need_skipped_width);
 6035|      0|        }
 6036|   645k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 645k, False: 0]
  |  Branch (6036:56): [True: 645k, False: 0]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|   645k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 0, False: 645k]
  ------------------
 6040|      0|                auto max_width_view = take_width(rng, specs.precision);
 6041|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|      0|                                  .transform_error(make_eof_scan_error));
 6043|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|      0|            }
 6045|  1.28M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|   645k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   645k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   645k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   645k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.87k, False: 642k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.87k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.87k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.87k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.87k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.87k|    }                                                  \
  |  |  |  | 3667|   645k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   642k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|  1.28M|                            make_eof_scan_error));
 6047|       |
 6048|  1.28M|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 0, False: 642k]
  ------------------
 6049|      0|                return result_type{
 6050|      0|                    it,
 6051|      0|                    calculate_text_width(make_contiguous_buffer(
 6052|      0|                                             ranges::subrange{rng.begin(), it})
 6053|      0|                                             .view())};
 6054|      0|            }
 6055|   642k|            return result_type{it, 0};
 6056|  1.28M|        }
 6057|       |
 6058|      0|        return result_type{rng.begin(), 0};
 6059|   645k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6067|   447k|    {
 6068|   447k|        const bool need_skipped_width =
 6069|   447k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6069:13): [True: 0, False: 447k]
  |  Branch (6069:33): [True: 0, False: 447k]
  ------------------
 6070|   447k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6071|       |
 6072|   447k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6072:13): [True: 0, False: 447k]
  ------------------
 6073|   447k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6073:13): [True: 0, False: 447k]
  ------------------
 6074|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6074:17): [True: 0, False: 0]
  ------------------
 6075|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6075:17): [True: 0, False: 0]
  ------------------
 6076|      0|                return result_type{rng.begin(), 0};
 6077|      0|            }
 6078|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6079|      0|                             specs.fill, need_skipped_width);
 6080|      0|        }
 6081|   447k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6081:13): [True: 447k, False: 0]
  ------------------
 6082|   447k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6082:13): [True: 0, False: 447k]
  ------------------
 6083|   447k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6083:15): [True: 0, False: 0]
  |  Branch (6083:35): [True: 0, False: 0]
  ------------------
 6084|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6084:15): [True: 0, False: 0]
  ------------------
 6085|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6085:15): [True: 0, False: 0]
  ------------------
 6086|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                const auto initial_width =
 6088|      0|                    specs.precision - prefix_width - value_width;
 6089|      0|                auto max_width_view = take_width(rng, initial_width);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6093|      0|            }
 6094|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|      0|                            make_eof_scan_error));
 6096|       |
 6097|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|      0|            return result_type{it, 0};
 6105|      0|        }
 6106|   447k|        return result_type{rng.begin(), 0};
 6107|   447k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIfEENS0_13scan_expectedIPKwEERT_:
 6181|   200k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|   200k|                          basic_contiguous_scan_context<char_type>>) {
 6186|   200k|            auto rd = make_reader<T, char_type>();
 6187|   200k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   200k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 200k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|   200k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   200k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|   200k|    {
 6113|   200k|        const bool need_skipped_width =
 6114|   200k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 200k]
  |  Branch (6114:33): [True: 0, False: 200k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   200k|        auto it = rng.begin();
 6118|   200k|        std::ptrdiff_t prefix_width = 0;
 6119|   200k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 200k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   200k|        else {
 6127|   200k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   200k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   200k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   200k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   200k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 896, False: 199k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    896|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    896|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    896|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    896|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    896|    }                                                  \
  |  |  |  | 3667|   200k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   199k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   199k|            std::tie(it, prefix_width) = prefix_result;
 6129|   199k|        }
 6130|   199k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   199k|        std::ptrdiff_t value_width = 0;
 6134|   199k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 199k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   199k|        else {
 6150|   199k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   199k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   199k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   199k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 64.5k, False: 134k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  64.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  64.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  64.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  64.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  64.5k|    }                                                  \
  |  | 3667|   199k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   199k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|   134k|                                             specs, value, loc));
 6152|       |
 6153|   134k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 134k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|   134k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|   134k|        std::ptrdiff_t postfix_width = 0;
 6162|   134k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 134k, False: 396]
  ------------------
 6163|   134k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   134k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   134k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   134k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 134k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   134k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   134k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   134k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|   134k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|   134k|                                 value_width));
 6167|   134k|            std::tie(it, postfix_width) = postfix_result;
 6168|   134k|        }
 6169|       |
 6170|   134k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|   134k|                                                 value_width, postfix_width);
 6172|   134k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 134k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|   134k|        return it;
 6177|   134k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 6181|   220k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|   220k|                          basic_contiguous_scan_context<char_type>>) {
 6186|   220k|            auto rd = make_reader<T, char_type>();
 6187|   220k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   220k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 220k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|   220k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   220k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|   220k|    {
 6113|   220k|        const bool need_skipped_width =
 6114|   220k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 220k]
  |  Branch (6114:33): [True: 0, False: 220k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   220k|        auto it = rng.begin();
 6118|   220k|        std::ptrdiff_t prefix_width = 0;
 6119|   220k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 220k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   220k|        else {
 6127|   220k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   220k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   220k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   220k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   220k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 964, False: 219k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    964|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    964|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    964|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    964|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    964|    }                                                  \
  |  |  |  | 3667|   220k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   219k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   219k|            std::tie(it, prefix_width) = prefix_result;
 6129|   219k|        }
 6130|   219k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   219k|        std::ptrdiff_t value_width = 0;
 6134|   219k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 219k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   219k|        else {
 6150|   219k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   219k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   219k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   219k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 64.4k, False: 155k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  64.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  64.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  64.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  64.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  64.4k|    }                                                  \
  |  | 3667|   219k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   219k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|   155k|                                             specs, value, loc));
 6152|       |
 6153|   155k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 155k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|   155k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|   155k|        std::ptrdiff_t postfix_width = 0;
 6162|   155k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 154k, False: 428]
  ------------------
 6163|   154k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   154k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   154k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   154k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   154k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 154k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   154k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   154k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   154k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|   154k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|   154k|                                 value_width));
 6167|   154k|            std::tie(it, postfix_width) = postfix_result;
 6168|   154k|        }
 6169|       |
 6170|   155k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|   155k|                                                 value_width, postfix_width);
 6172|   155k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 155k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|   155k|        return it;
 6177|   155k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIeEENS0_13scan_expectedIPKwEERT_:
 6181|   224k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|   224k|                          basic_contiguous_scan_context<char_type>>) {
 6186|   224k|            auto rd = make_reader<T, char_type>();
 6187|   224k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   224k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 224k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|   224k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   224k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|   224k|    {
 6113|   224k|        const bool need_skipped_width =
 6114|   224k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 224k]
  |  Branch (6114:33): [True: 0, False: 224k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   224k|        auto it = rng.begin();
 6118|   224k|        std::ptrdiff_t prefix_width = 0;
 6119|   224k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 224k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   224k|        else {
 6127|   224k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   224k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   224k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   224k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   224k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.01k, False: 223k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.01k|    }                                                  \
  |  |  |  | 3667|   224k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   223k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   223k|            std::tie(it, prefix_width) = prefix_result;
 6129|   223k|        }
 6130|   223k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   223k|        std::ptrdiff_t value_width = 0;
 6134|   223k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 223k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   223k|        else {
 6150|   223k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   223k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   223k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   223k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 64.4k, False: 158k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  64.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  64.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  64.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  64.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  64.4k|    }                                                  \
  |  | 3667|   223k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   223k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|   158k|                                             specs, value, loc));
 6152|       |
 6153|   158k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 158k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|   158k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|   158k|        std::ptrdiff_t postfix_width = 0;
 6162|   158k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 158k, False: 450]
  ------------------
 6163|   158k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   158k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   158k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   158k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   158k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 158k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   158k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   158k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   158k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|   158k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|   158k|                                 value_width));
 6167|   158k|            std::tie(it, postfix_width) = postfix_result;
 6168|   158k|        }
 6169|       |
 6170|   158k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|   158k|                                                 value_width, postfix_width);
 6172|   158k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 158k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|   158k|        return it;
 6177|   158k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5783|   236k|{
 5784|   236k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   236k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 474, False: 236k]
  |  |  ------------------
  ------------------
 5785|    474|        return unexpected(e);
 5786|    474|    }
 5787|       |
 5788|   236k|    if (!is_required) {
  ------------------
  |  Branch (5788:9): [True: 0, False: 236k]
  ------------------
 5789|      0|        return range.begin();
 5790|      0|    }
 5791|       |
 5792|   236k|    return skip_classic_whitespace(range);
 5793|   236k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5859|  67.9k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|  67.9k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|  67.9k|            auto rd = make_reader<T, char_type>();
 5869|  67.9k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 67.9k, False: 0]
  ------------------
 5870|  67.9k|                return impl(rd, range, value);
 5871|  67.9k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  67.9k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|  67.9k|    {
 5852|  67.9k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  67.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  67.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  67.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  67.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 291, False: 67.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    291|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    291|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    291|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    291|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    291|    }                                                  \
  |  |  |  | 3667|  67.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  67.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  67.7k|                        .transform_error(make_eof_scan_error));
 5854|  67.7k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  67.9k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4140|  67.7k|    {
 4141|  67.7k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  67.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4142|       |
 4143|  67.7k|        float_reader<CharT> rd{};
 4144|  67.7k|        return read_impl<Range>(
 4145|  67.7k|            range, rd,
 4146|  67.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  67.7k|                return r.read_source(SCN_FWD(args)...);
 4148|  67.7k|            },
 4149|  67.7k|            value);
 4150|  67.7k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  67.7k|        : m_fptr([](storage fn,
  743|  67.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  67.7k|              cvref<T> obj = *get<T>(fn);
  745|  67.7k|              if constexpr (std::is_void_v<R>) {
  746|  67.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  67.7k|              }
  748|  67.7k|              else {
  749|  67.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  67.7k|              }
  751|  67.7k|          }),
  752|  67.7k|          m_storage(std::addressof(f))
  753|  67.7k|    {
  754|  67.7k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  67.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  67.7k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  67.7k|              else {
  749|  67.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  67.7k|              }
  751|  67.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  67.7k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  67.7k|        else if constexpr (std::is_object_v<T>) {
  688|  67.7k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  67.7k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4146|  67.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  67.7k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  67.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4148|  67.7k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  67.7k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  67.7k|        {
  662|  67.7k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5859|  82.9k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|  82.9k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|  82.9k|            auto rd = make_reader<T, char_type>();
 5869|  82.9k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 82.9k, False: 0]
  ------------------
 5870|  82.9k|                return impl(rd, range, value);
 5871|  82.9k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  82.9k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|  82.9k|    {
 5852|  82.9k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  82.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  82.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  82.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  82.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 330, False: 82.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    330|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    330|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    330|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    330|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    330|    }                                                  \
  |  |  |  | 3667|  82.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  82.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  82.6k|                        .transform_error(make_eof_scan_error));
 5854|  82.6k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  82.9k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4140|  82.6k|    {
 4141|  82.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  82.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4142|       |
 4143|  82.6k|        float_reader<CharT> rd{};
 4144|  82.6k|        return read_impl<Range>(
 4145|  82.6k|            range, rd,
 4146|  82.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  82.6k|                return r.read_source(SCN_FWD(args)...);
 4148|  82.6k|            },
 4149|  82.6k|            value);
 4150|  82.6k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  82.6k|        : m_fptr([](storage fn,
  743|  82.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  82.6k|              cvref<T> obj = *get<T>(fn);
  745|  82.6k|              if constexpr (std::is_void_v<R>) {
  746|  82.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  82.6k|              }
  748|  82.6k|              else {
  749|  82.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  82.6k|              }
  751|  82.6k|          }),
  752|  82.6k|          m_storage(std::addressof(f))
  753|  82.6k|    {
  754|  82.6k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  82.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  82.6k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  82.6k|              else {
  749|  82.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  82.6k|              }
  751|  82.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  82.6k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  82.6k|        else if constexpr (std::is_object_v<T>) {
  688|  82.6k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  82.6k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4146|  82.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  82.6k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  82.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4148|  82.6k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  82.6k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  82.6k|        {
  662|  82.6k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5859|  85.5k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|  85.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|  85.5k|            auto rd = make_reader<T, char_type>();
 5869|  85.5k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 85.5k, False: 0]
  ------------------
 5870|  85.5k|                return impl(rd, range, value);
 5871|  85.5k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  85.5k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|  85.5k|    {
 5852|  85.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  85.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  85.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  85.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  85.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 363, False: 85.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    363|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    363|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    363|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    363|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    363|    }                                                  \
  |  |  |  | 3667|  85.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  85.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  85.2k|                        .transform_error(make_eof_scan_error));
 5854|  85.2k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  85.5k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4140|  85.2k|    {
 4141|  85.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  85.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4142|       |
 4143|  85.2k|        float_reader<CharT> rd{};
 4144|  85.2k|        return read_impl<Range>(
 4145|  85.2k|            range, rd,
 4146|  85.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  85.2k|                return r.read_source(SCN_FWD(args)...);
 4148|  85.2k|            },
 4149|  85.2k|            value);
 4150|  85.2k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  85.2k|        : m_fptr([](storage fn,
  743|  85.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  85.2k|              cvref<T> obj = *get<T>(fn);
  745|  85.2k|              if constexpr (std::is_void_v<R>) {
  746|  85.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  85.2k|              }
  748|  85.2k|              else {
  749|  85.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  85.2k|              }
  751|  85.2k|          }),
  752|  85.2k|          m_storage(std::addressof(f))
  753|  85.2k|    {
  754|  85.2k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  85.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  85.2k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  85.2k|              else {
  749|  85.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  85.2k|              }
  751|  85.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  85.2k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  85.2k|        else if constexpr (std::is_object_v<T>) {
  688|  85.2k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  85.2k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4146|  85.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  85.2k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  85.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4148|  85.2k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  85.2k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  85.2k|        {
  662|  85.2k|        }

LLVMFuzzerTestOneInput:
   54|  3.27k|{
   55|  3.27k|    scn::fuzz::run(data, size);
   56|  3.27k|    return 0;
   57|  3.27k|}
float_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   32|  3.27k|{
   33|  3.27k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (33:9): [True: 0, False: 3.27k]
  |  Branch (33:35): [True: 0, False: 3.27k]
  ------------------
   34|      0|        return;
   35|      0|    }
   36|       |
   37|  3.27k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   38|       |
   39|  3.27k|    const auto& f =
   40|  3.27k|        get_format_strings<char>("{}", "{:a}", "{:e}", "{:f}", "{:g}", "{:L}");
   41|  3.27k|    do_basic_run(sv, f);
   42|       |
   43|  3.27k|    const auto& wf = get_format_strings<wchar_t>(L"{}", L"{:a}", L"{:e}",
   44|  3.27k|                                                 L"{:f}", L"{:g}", L"{:L}");
   45|  3.27k|    do_basic_run(wsv_reinterpret, wf);
   46|  3.27k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (46:9): [True: 3.27k, False: 0]
  ------------------
   47|  3.27k|        do_basic_run(wsv_transcode, wf);
   48|  3.27k|    }
   49|  3.27k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  3.27k|{
   25|  3.27k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  3.27k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  3.27k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  3.27k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  3.27k|{
   25|  3.27k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  3.27k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  3.27k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  3.27k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  6.54k|{
   25|  6.54k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  6.54k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  6.54k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  6.54k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  6.54k|{
   25|  6.54k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  6.54k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  6.54k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  6.54k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|  3.27k|{
   52|  3.27k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|  3.27k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.27k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  3.27k|    string_buffer.resize(size);
   56|  3.27k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|  3.27k|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|  3.27k|    const auto wsv_reinterpret_size =
   61|  3.27k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 71, False: 3.20k]
  ------------------
   62|  3.27k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|  3.27k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|  3.27k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|  3.27k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|  3.27k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|  3.27k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|  3.27k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  3.27k|{
  122|  3.27k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  3.27k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  3.27k|    buf.resize(sizeof...(Args));
  125|  3.27k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  3.27k|    return buf;
  127|  3.27k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  107|  3.27k|{
  108|  3.27k|    if constexpr (std::is_same_v<CharT, char>) {
  109|  3.27k|        return format_string_view_buffer;
  110|       |    }
  111|       |    else {
  112|       |        return wformat_string_view_buffer;
  113|       |    }
  114|  3.27k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  3.27k|{
  185|  3.27k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  3.27k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  3.27k|                                   format_strings);
  188|  3.27k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  3.27k|{
  133|       |    // Regular scan
  134|  19.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 19.6k, False: 3.27k]
  ------------------
  135|  19.6k|        auto it = scn::ranges::begin(source);
  136|   230k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   230k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   230k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   230k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   230k|            auto result = scn::scan<T>(
  139|   230k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   230k|                scn::runtime_format(f));
  141|   230k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 19.6k, False: 210k]
  ------------------
  142|  19.6k|                break;
  143|  19.6k|            }
  144|   210k|            it = result->begin();
  145|   210k|        }
  146|  19.6k|    }
  147|       |
  148|       |    // scan localized
  149|  19.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 19.6k, False: 3.27k]
  ------------------
  150|  19.6k|        auto it = scn::ranges::begin(source);
  151|   230k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   230k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   230k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   230k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   230k|            auto result = scn::scan<T>(
  154|   230k|                global_locale,
  155|   230k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   230k|                scn::runtime_format(f));
  157|   230k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 19.6k, False: 210k]
  ------------------
  158|  19.6k|                break;
  159|  19.6k|            }
  160|   210k|            it = result->begin();
  161|   210k|        }
  162|  19.6k|    }
  163|       |
  164|       |    // scan_value
  165|  3.27k|    {
  166|  3.27k|        auto it = scn::ranges::begin(source);
  167|  49.5k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  49.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  49.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  49.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  49.5k|            auto result = scn::scan_value<T>(
  170|  49.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  49.5k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.27k, False: 46.2k]
  ------------------
  172|  3.27k|                break;
  173|  3.27k|            }
  174|  46.2k|            it = result->begin();
  175|  46.2k|        }
  176|  3.27k|    }
  177|  3.27k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  3.27k|{
  133|       |    // Regular scan
  134|  19.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 19.6k, False: 3.27k]
  ------------------
  135|  19.6k|        auto it = scn::ranges::begin(source);
  136|   238k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   238k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   238k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   238k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   238k|            auto result = scn::scan<T>(
  139|   238k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   238k|                scn::runtime_format(f));
  141|   238k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 19.6k, False: 218k]
  ------------------
  142|  19.6k|                break;
  143|  19.6k|            }
  144|   218k|            it = result->begin();
  145|   218k|        }
  146|  19.6k|    }
  147|       |
  148|       |    // scan localized
  149|  19.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 19.6k, False: 3.27k]
  ------------------
  150|  19.6k|        auto it = scn::ranges::begin(source);
  151|   238k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   238k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   238k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   238k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   238k|            auto result = scn::scan<T>(
  154|   238k|                global_locale,
  155|   238k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   238k|                scn::runtime_format(f));
  157|   238k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 19.6k, False: 218k]
  ------------------
  158|  19.6k|                break;
  159|  19.6k|            }
  160|   218k|            it = result->begin();
  161|   218k|        }
  162|  19.6k|    }
  163|       |
  164|       |    // scan_value
  165|  3.27k|    {
  166|  3.27k|        auto it = scn::ranges::begin(source);
  167|  51.6k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  51.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  51.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  51.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  51.6k|            auto result = scn::scan_value<T>(
  170|  51.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  51.6k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.27k, False: 48.3k]
  ------------------
  172|  3.27k|                break;
  173|  3.27k|            }
  174|  48.3k|            it = result->begin();
  175|  48.3k|        }
  176|  3.27k|    }
  177|  3.27k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  3.27k|{
  133|       |    // Regular scan
  134|  19.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 19.6k, False: 3.27k]
  ------------------
  135|  19.6k|        auto it = scn::ranges::begin(source);
  136|   241k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   241k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   241k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   241k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   241k|            auto result = scn::scan<T>(
  139|   241k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   241k|                scn::runtime_format(f));
  141|   241k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 19.6k, False: 221k]
  ------------------
  142|  19.6k|                break;
  143|  19.6k|            }
  144|   221k|            it = result->begin();
  145|   221k|        }
  146|  19.6k|    }
  147|       |
  148|       |    // scan localized
  149|  19.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 19.6k, False: 3.27k]
  ------------------
  150|  19.6k|        auto it = scn::ranges::begin(source);
  151|   241k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   241k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   241k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   241k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   241k|            auto result = scn::scan<T>(
  154|   241k|                global_locale,
  155|   241k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   241k|                scn::runtime_format(f));
  157|   241k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 19.6k, False: 221k]
  ------------------
  158|  19.6k|                break;
  159|  19.6k|            }
  160|   221k|            it = result->begin();
  161|   221k|        }
  162|  19.6k|    }
  163|       |
  164|       |    // scan_value
  165|  3.27k|    {
  166|  3.27k|        auto it = scn::ranges::begin(source);
  167|  52.6k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  52.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  52.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  52.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  52.6k|            auto result = scn::scan_value<T>(
  170|  52.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  52.6k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.27k, False: 49.3k]
  ------------------
  172|  3.27k|                break;
  173|  3.27k|            }
  174|  49.3k|            it = result->begin();
  175|  49.3k|        }
  176|  3.27k|    }
  177|  3.27k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  3.27k|{
  133|       |    // Regular scan
  134|  19.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 19.6k, False: 3.27k]
  ------------------
  135|  19.6k|        auto it = scn::ranges::begin(source);
  136|   267k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   267k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   267k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   267k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   267k|            auto result = scn::scan<T>(
  139|   267k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   267k|                scn::runtime_format(f));
  141|   267k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 19.6k, False: 248k]
  ------------------
  142|  19.6k|                break;
  143|  19.6k|            }
  144|   248k|            it = result->begin();
  145|   248k|        }
  146|  19.6k|    }
  147|       |
  148|       |    // scan localized
  149|  19.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 19.6k, False: 3.27k]
  ------------------
  150|  19.6k|        auto it = scn::ranges::begin(source);
  151|   267k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   267k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   267k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   267k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   267k|            auto result = scn::scan<T>(
  154|   267k|                global_locale,
  155|   267k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   267k|                scn::runtime_format(f));
  157|   267k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 19.6k, False: 248k]
  ------------------
  158|  19.6k|                break;
  159|  19.6k|            }
  160|   248k|            it = result->begin();
  161|   248k|        }
  162|  19.6k|    }
  163|       |
  164|       |    // scan_value
  165|  3.27k|    {
  166|  3.27k|        auto it = scn::ranges::begin(source);
  167|  54.2k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  54.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  54.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  54.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  54.2k|            auto result = scn::scan_value<T>(
  170|  54.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  54.2k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.27k, False: 50.9k]
  ------------------
  172|  3.27k|                break;
  173|  3.27k|            }
  174|  50.9k|            it = result->begin();
  175|  50.9k|        }
  176|  3.27k|    }
  177|  3.27k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  3.27k|{
  133|       |    // Regular scan
  134|  19.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 19.6k, False: 3.27k]
  ------------------
  135|  19.6k|        auto it = scn::ranges::begin(source);
  136|   281k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   281k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   281k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   281k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   281k|            auto result = scn::scan<T>(
  139|   281k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   281k|                scn::runtime_format(f));
  141|   281k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 19.6k, False: 261k]
  ------------------
  142|  19.6k|                break;
  143|  19.6k|            }
  144|   261k|            it = result->begin();
  145|   261k|        }
  146|  19.6k|    }
  147|       |
  148|       |    // scan localized
  149|  19.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 19.6k, False: 3.27k]
  ------------------
  150|  19.6k|        auto it = scn::ranges::begin(source);
  151|   281k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   281k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   281k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   281k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   281k|            auto result = scn::scan<T>(
  154|   281k|                global_locale,
  155|   281k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   281k|                scn::runtime_format(f));
  157|   281k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 19.6k, False: 261k]
  ------------------
  158|  19.6k|                break;
  159|  19.6k|            }
  160|   261k|            it = result->begin();
  161|   261k|        }
  162|  19.6k|    }
  163|       |
  164|       |    // scan_value
  165|  3.27k|    {
  166|  3.27k|        auto it = scn::ranges::begin(source);
  167|  57.2k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  57.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  57.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  57.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  57.2k|            auto result = scn::scan_value<T>(
  170|  57.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  57.2k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.27k, False: 53.9k]
  ------------------
  172|  3.27k|                break;
  173|  3.27k|            }
  174|  53.9k|            it = result->begin();
  175|  53.9k|        }
  176|  3.27k|    }
  177|  3.27k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  3.27k|{
  133|       |    // Regular scan
  134|  19.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 19.6k, False: 3.27k]
  ------------------
  135|  19.6k|        auto it = scn::ranges::begin(source);
  136|   283k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   283k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   283k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   283k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   283k|            auto result = scn::scan<T>(
  139|   283k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   283k|                scn::runtime_format(f));
  141|   283k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 19.6k, False: 264k]
  ------------------
  142|  19.6k|                break;
  143|  19.6k|            }
  144|   264k|            it = result->begin();
  145|   264k|        }
  146|  19.6k|    }
  147|       |
  148|       |    // scan localized
  149|  19.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 19.6k, False: 3.27k]
  ------------------
  150|  19.6k|        auto it = scn::ranges::begin(source);
  151|   283k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   283k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   283k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   283k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   283k|            auto result = scn::scan<T>(
  154|   283k|                global_locale,
  155|   283k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   283k|                scn::runtime_format(f));
  157|   283k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 19.6k, False: 264k]
  ------------------
  158|  19.6k|                break;
  159|  19.6k|            }
  160|   264k|            it = result->begin();
  161|   264k|        }
  162|  19.6k|    }
  163|       |
  164|       |    // scan_value
  165|  3.27k|    {
  166|  3.27k|        auto it = scn::ranges::begin(source);
  167|  57.8k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  57.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  57.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  57.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  57.8k|            auto result = scn::scan_value<T>(
  170|  57.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  57.8k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.27k, False: 54.5k]
  ------------------
  172|  3.27k|                break;
  173|  3.27k|            }
  174|  54.5k|            it = result->begin();
  175|  54.5k|        }
  176|  3.27k|    }
  177|  3.27k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   89|  3.27k|{
   90|  3.27k|    using char_type = ranges::range_value_t<Source>;
   91|  3.27k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  3.27k|    deque.clear();
   93|  3.27k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  3.27k|              std::back_inserter(deque));
   95|  3.27k|    return deque;
   96|  3.27k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   78|  3.27k|{
   79|  3.27k|    if constexpr (std::is_same_v<CharT, char>) {
   80|  3.27k|        return noncontiguous_buffer;
   81|       |    }
   82|       |    else {
   83|       |        return wnoncontiguous_buffer;
   84|       |    }
   85|  3.27k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  3.27k|{
  122|  3.27k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  3.27k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  3.27k|    buf.resize(sizeof...(Args));
  125|  3.27k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  3.27k|    return buf;
  127|  3.27k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  107|  3.27k|{
  108|       |    if constexpr (std::is_same_v<CharT, char>) {
  109|       |        return format_string_view_buffer;
  110|       |    }
  111|  3.27k|    else {
  112|  3.27k|        return wformat_string_view_buffer;
  113|  3.27k|    }
  114|  3.27k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  6.54k|{
  185|  6.54k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  6.54k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  6.54k|                                   format_strings);
  188|  6.54k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  6.54k|{
  133|       |    // Regular scan
  134|  39.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 39.2k, False: 6.54k]
  ------------------
  135|  39.2k|        auto it = scn::ranges::begin(source);
  136|   122k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   122k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   122k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   122k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   122k|            auto result = scn::scan<T>(
  139|   122k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   122k|                scn::runtime_format(f));
  141|   122k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 39.2k, False: 83.6k]
  ------------------
  142|  39.2k|                break;
  143|  39.2k|            }
  144|  83.6k|            it = result->begin();
  145|  83.6k|        }
  146|  39.2k|    }
  147|       |
  148|       |    // scan localized
  149|  39.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 39.2k, False: 6.54k]
  ------------------
  150|  39.2k|        auto it = scn::ranges::begin(source);
  151|   122k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   122k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   122k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   122k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   122k|            auto result = scn::scan<T>(
  154|   122k|                global_locale,
  155|   122k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   122k|                scn::runtime_format(f));
  157|   122k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 39.2k, False: 83.6k]
  ------------------
  158|  39.2k|                break;
  159|  39.2k|            }
  160|  83.6k|            it = result->begin();
  161|  83.6k|        }
  162|  39.2k|    }
  163|       |
  164|       |    // scan_value
  165|  6.54k|    {
  166|  6.54k|        auto it = scn::ranges::begin(source);
  167|  22.7k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  22.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  22.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  22.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  22.7k|            auto result = scn::scan_value<T>(
  170|  22.7k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  22.7k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 6.54k, False: 16.1k]
  ------------------
  172|  6.54k|                break;
  173|  6.54k|            }
  174|  16.1k|            it = result->begin();
  175|  16.1k|        }
  176|  6.54k|    }
  177|  6.54k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  6.54k|{
  133|       |    // Regular scan
  134|  39.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 39.2k, False: 6.54k]
  ------------------
  135|  39.2k|        auto it = scn::ranges::begin(source);
  136|   137k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   137k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   137k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   137k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   137k|            auto result = scn::scan<T>(
  139|   137k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   137k|                scn::runtime_format(f));
  141|   137k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 39.2k, False: 98.6k]
  ------------------
  142|  39.2k|                break;
  143|  39.2k|            }
  144|  98.6k|            it = result->begin();
  145|  98.6k|        }
  146|  39.2k|    }
  147|       |
  148|       |    // scan localized
  149|  39.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 39.2k, False: 6.54k]
  ------------------
  150|  39.2k|        auto it = scn::ranges::begin(source);
  151|   137k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   137k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   137k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   137k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   137k|            auto result = scn::scan<T>(
  154|   137k|                global_locale,
  155|   137k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   137k|                scn::runtime_format(f));
  157|   137k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 39.2k, False: 98.6k]
  ------------------
  158|  39.2k|                break;
  159|  39.2k|            }
  160|  98.6k|            it = result->begin();
  161|  98.6k|        }
  162|  39.2k|    }
  163|       |
  164|       |    // scan_value
  165|  6.54k|    {
  166|  6.54k|        auto it = scn::ranges::begin(source);
  167|  27.6k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  27.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  27.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  27.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  27.6k|            auto result = scn::scan_value<T>(
  170|  27.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  27.6k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 6.54k, False: 21.1k]
  ------------------
  172|  6.54k|                break;
  173|  6.54k|            }
  174|  21.1k|            it = result->begin();
  175|  21.1k|        }
  176|  6.54k|    }
  177|  6.54k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  6.54k|{
  133|       |    // Regular scan
  134|  39.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 39.2k, False: 6.54k]
  ------------------
  135|  39.2k|        auto it = scn::ranges::begin(source);
  136|   140k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   140k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   140k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   140k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   140k|            auto result = scn::scan<T>(
  139|   140k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   140k|                scn::runtime_format(f));
  141|   140k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 39.2k, False: 101k]
  ------------------
  142|  39.2k|                break;
  143|  39.2k|            }
  144|   101k|            it = result->begin();
  145|   101k|        }
  146|  39.2k|    }
  147|       |
  148|       |    // scan localized
  149|  39.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 39.2k, False: 6.54k]
  ------------------
  150|  39.2k|        auto it = scn::ranges::begin(source);
  151|   140k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   140k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   140k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   140k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   140k|            auto result = scn::scan<T>(
  154|   140k|                global_locale,
  155|   140k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   140k|                scn::runtime_format(f));
  157|   140k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 39.2k, False: 101k]
  ------------------
  158|  39.2k|                break;
  159|  39.2k|            }
  160|   101k|            it = result->begin();
  161|   101k|        }
  162|  39.2k|    }
  163|       |
  164|       |    // scan_value
  165|  6.54k|    {
  166|  6.54k|        auto it = scn::ranges::begin(source);
  167|  28.5k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  28.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  28.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  28.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  28.5k|            auto result = scn::scan_value<T>(
  170|  28.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  28.5k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 6.54k, False: 22.0k]
  ------------------
  172|  6.54k|                break;
  173|  6.54k|            }
  174|  22.0k|            it = result->begin();
  175|  22.0k|        }
  176|  6.54k|    }
  177|  6.54k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  6.54k|{
  133|       |    // Regular scan
  134|  39.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 39.2k, False: 6.54k]
  ------------------
  135|  39.2k|        auto it = scn::ranges::begin(source);
  136|   122k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   122k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   122k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   122k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   122k|            auto result = scn::scan<T>(
  139|   122k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   122k|                scn::runtime_format(f));
  141|   122k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 39.2k, False: 83.5k]
  ------------------
  142|  39.2k|                break;
  143|  39.2k|            }
  144|  83.5k|            it = result->begin();
  145|  83.5k|        }
  146|  39.2k|    }
  147|       |
  148|       |    // scan localized
  149|  39.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 39.2k, False: 6.54k]
  ------------------
  150|  39.2k|        auto it = scn::ranges::begin(source);
  151|   122k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   122k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   122k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   122k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   122k|            auto result = scn::scan<T>(
  154|   122k|                global_locale,
  155|   122k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   122k|                scn::runtime_format(f));
  157|   122k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 39.2k, False: 83.5k]
  ------------------
  158|  39.2k|                break;
  159|  39.2k|            }
  160|  83.5k|            it = result->begin();
  161|  83.5k|        }
  162|  39.2k|    }
  163|       |
  164|       |    // scan_value
  165|  6.54k|    {
  166|  6.54k|        auto it = scn::ranges::begin(source);
  167|  22.6k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  22.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  22.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  22.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  22.6k|            auto result = scn::scan_value<T>(
  170|  22.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  22.6k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 6.54k, False: 16.1k]
  ------------------
  172|  6.54k|                break;
  173|  6.54k|            }
  174|  16.1k|            it = result->begin();
  175|  16.1k|        }
  176|  6.54k|    }
  177|  6.54k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  6.54k|{
  133|       |    // Regular scan
  134|  39.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 39.2k, False: 6.54k]
  ------------------
  135|  39.2k|        auto it = scn::ranges::begin(source);
  136|   137k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   137k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   137k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   137k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   137k|            auto result = scn::scan<T>(
  139|   137k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   137k|                scn::runtime_format(f));
  141|   137k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 39.2k, False: 98.5k]
  ------------------
  142|  39.2k|                break;
  143|  39.2k|            }
  144|  98.5k|            it = result->begin();
  145|  98.5k|        }
  146|  39.2k|    }
  147|       |
  148|       |    // scan localized
  149|  39.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 39.2k, False: 6.54k]
  ------------------
  150|  39.2k|        auto it = scn::ranges::begin(source);
  151|   137k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   137k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   137k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   137k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   137k|            auto result = scn::scan<T>(
  154|   137k|                global_locale,
  155|   137k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   137k|                scn::runtime_format(f));
  157|   137k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 39.2k, False: 98.5k]
  ------------------
  158|  39.2k|                break;
  159|  39.2k|            }
  160|  98.5k|            it = result->begin();
  161|  98.5k|        }
  162|  39.2k|    }
  163|       |
  164|       |    // scan_value
  165|  6.54k|    {
  166|  6.54k|        auto it = scn::ranges::begin(source);
  167|  27.6k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  27.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  27.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  27.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  27.6k|            auto result = scn::scan_value<T>(
  170|  27.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  27.6k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 6.54k, False: 21.1k]
  ------------------
  172|  6.54k|                break;
  173|  6.54k|            }
  174|  21.1k|            it = result->begin();
  175|  21.1k|        }
  176|  6.54k|    }
  177|  6.54k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  6.54k|{
  133|       |    // Regular scan
  134|  39.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 39.2k, False: 6.54k]
  ------------------
  135|  39.2k|        auto it = scn::ranges::begin(source);
  136|   140k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   140k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   140k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   140k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   140k|            auto result = scn::scan<T>(
  139|   140k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   140k|                scn::runtime_format(f));
  141|   140k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 39.2k, False: 101k]
  ------------------
  142|  39.2k|                break;
  143|  39.2k|            }
  144|   101k|            it = result->begin();
  145|   101k|        }
  146|  39.2k|    }
  147|       |
  148|       |    // scan localized
  149|  39.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 39.2k, False: 6.54k]
  ------------------
  150|  39.2k|        auto it = scn::ranges::begin(source);
  151|   140k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   140k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   140k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   140k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   140k|            auto result = scn::scan<T>(
  154|   140k|                global_locale,
  155|   140k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   140k|                scn::runtime_format(f));
  157|   140k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 39.2k, False: 101k]
  ------------------
  158|  39.2k|                break;
  159|  39.2k|            }
  160|   101k|            it = result->begin();
  161|   101k|        }
  162|  39.2k|    }
  163|       |
  164|       |    // scan_value
  165|  6.54k|    {
  166|  6.54k|        auto it = scn::ranges::begin(source);
  167|  28.5k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  28.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  28.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  28.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  28.5k|            auto result = scn::scan_value<T>(
  170|  28.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  28.5k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 6.54k, False: 21.9k]
  ------------------
  172|  6.54k|                break;
  173|  6.54k|            }
  174|  21.9k|            it = result->begin();
  175|  21.9k|        }
  176|  6.54k|    }
  177|  6.54k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   89|  6.54k|{
   90|  6.54k|    using char_type = ranges::range_value_t<Source>;
   91|  6.54k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  6.54k|    deque.clear();
   93|  6.54k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  6.54k|              std::back_inserter(deque));
   95|  6.54k|    return deque;
   96|  6.54k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   78|  6.54k|{
   79|       |    if constexpr (std::is_same_v<CharT, char>) {
   80|       |        return noncontiguous_buffer;
   81|       |    }
   82|  6.54k|    else {
   83|  6.54k|        return wnoncontiguous_buffer;
   84|  6.54k|    }
   85|  6.54k|}

