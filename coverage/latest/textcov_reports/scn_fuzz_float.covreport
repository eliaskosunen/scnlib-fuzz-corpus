_ZN10fast_float10is_integerIcEEbT_:
   34|  4.99M|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   35|  4.99M|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (35:12): [True: 131k, False: 4.86M]
  |  Branch (35:27): [True: 383k, False: 4.47M]
  ------------------
   36|  4.99M|}
_ZN10fast_float26loop_parse_if_eight_digitsERPKcS1_Rm:
  224|   158k|                           uint64_t &i) {
  225|       |  // optimizes better than parse_if_eight_digits_unrolled() for UC = char.
  226|   609k|  while ((std::distance(p, pend) >= 8) &&
  ------------------
  |  Branch (226:10): [True: 499k, False: 110k]
  ------------------
  227|   609k|         is_made_of_eight_digits_fast(read8_to_u64(p))) {
  ------------------
  |  Branch (227:10): [True: 450k, False: 48.6k]
  ------------------
  228|   450k|    i = i * 100000000 +
  229|   450k|        parse_eight_digits_unrolled(read8_to_u64(
  230|   450k|            p)); // in rare cases, this will overflow, but that's ok
  231|   450k|    p += 8;
  232|   450k|  }
  233|   158k|}
_ZN10fast_float28is_made_of_eight_digits_fastEm:
  142|   499k|is_made_of_eight_digits_fast(uint64_t val) noexcept {
  143|   499k|  return !((((val + 0x4646464646464646) | (val - 0x3030303030303030)) &
  144|   499k|            0x8080808080808080));
  145|   499k|}
_ZN10fast_float12read8_to_u64IcEEmPKT_:
   48|  1.14M|read8_to_u64(UC const *chars) {
   49|  1.14M|  if (cpp20_and_in_constexpr() || !std::is_same<UC, char>::value) {
  ------------------
  |  Branch (49:7): [Folded - Ignored]
  |  Branch (49:35): [Folded - Ignored]
  ------------------
   50|      0|    uint64_t val = 0;
   51|      0|    for (int i = 0; i < 8; ++i) {
  ------------------
  |  Branch (51:21): [True: 0, False: 0]
  ------------------
   52|      0|      val |= uint64_t(uint8_t(*chars)) << (i * 8);
   53|      0|      ++chars;
   54|      0|    }
   55|      0|    return val;
   56|      0|  }
   57|  1.14M|  uint64_t val;
   58|  1.14M|  ::memcpy(&val, chars, sizeof(uint64_t));
   59|       |#if FASTFLOAT_IS_BIG_ENDIAN == 1
   60|       |  // Need to read as-if the number was in little-endian order.
   61|       |  val = byteswap(val);
   62|       |#endif
   63|  1.14M|  return val;
   64|  1.14M|}
_ZN10fast_float27parse_eight_digits_unrolledEm:
  120|   647k|parse_eight_digits_unrolled(uint64_t val) {
  121|   647k|  uint64_t const mask = 0x000000FF000000FF;
  122|   647k|  uint64_t const mul1 = 0x000F424000000064; // 100 + (1000000ULL << 32)
  123|   647k|  uint64_t const mul2 = 0x0000271000000001; // 1 + (10000ULL << 32)
  124|   647k|  val -= 0x3030303030303030;
  125|   647k|  val = (val * 10) + (val >> 8); // val = (val * 2561) >> 8;
  126|   647k|  val = (((val & mask) * mul1) + (((val >> 16) & mask) * mul2)) >> 32;
  127|   647k|  return uint32_t(val);
  128|   647k|}
_ZN10fast_float19parse_number_stringILb0EcEENS_22parsed_number_string_tIT0_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  285|   846k|                    parse_options_t<UC> options) noexcept {
  286|   846k|  chars_format const fmt = detail::adjust_for_feature_macros(options.format);
  287|   846k|  UC const decimal_point = options.decimal_point;
  288|       |
  289|   846k|  parsed_number_string_t<UC> answer;
  290|   846k|  answer.valid = false;
  291|   846k|  answer.too_many_digits = false;
  292|       |  // assume p < pend, so dereference without checks;
  293|   846k|  answer.negative = (*p == UC('-'));
  294|       |  // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  295|   846k|  if ((*p == UC('-')) || (uint64_t(fmt & chars_format::allow_leading_plus) &&
  ------------------
  |  Branch (295:7): [True: 0, False: 846k]
  |  Branch (295:27): [True: 0, False: 846k]
  ------------------
  296|   846k|                          !basic_json_fmt && *p == UC('+'))) {
  ------------------
  |  Branch (296:27): [Folded - Ignored]
  |  Branch (296:46): [True: 0, False: 0]
  ------------------
  297|      0|    ++p;
  298|      0|    if (p == pend) {
  ------------------
  |  Branch (298:9): [True: 0, False: 0]
  ------------------
  299|      0|      return report_parse_error<UC>(
  300|      0|          p, parse_error::missing_integer_or_dot_after_sign);
  301|      0|    }
  302|      0|    FASTFLOAT_IF_CONSTEXPR17(basic_json_fmt) {
  ------------------
  |  |   31|      0|#define FASTFLOAT_IF_CONSTEXPR17(x) if constexpr (x)
  ------------------
  303|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  304|      0|        return report_parse_error<UC>(p,
  305|      0|                                      parse_error::missing_integer_after_sign);
  306|      0|      }
  307|      0|    }
  308|      0|    else {
  309|      0|      if (!is_integer(*p) &&
  ------------------
  |  Branch (309:11): [True: 0, False: 0]
  ------------------
  310|      0|          (*p !=
  ------------------
  |  Branch (310:11): [True: 0, False: 0]
  ------------------
  311|      0|           decimal_point)) { // a sign must be followed by an integer or the dot
  312|      0|        return report_parse_error<UC>(
  313|      0|            p, parse_error::missing_integer_or_dot_after_sign);
  314|      0|      }
  315|      0|    }
  316|      0|  }
  317|   846k|  UC const *const start_digits = p;
  318|       |
  319|   846k|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  320|       |
  321|  4.45M|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (321:10): [True: 4.03M, False: 421k]
  |  Branch (321:25): [True: 3.60M, False: 424k]
  ------------------
  322|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  323|       |    // multiplication
  324|  3.60M|    i = 10 * i +
  325|  3.60M|        uint64_t(*p -
  326|  3.60M|                 UC('0')); // might overflow, we will handle the overflow later
  327|  3.60M|    ++p;
  328|  3.60M|  }
  329|   846k|  UC const *const end_of_integer_part = p;
  330|   846k|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  331|   846k|  answer.integer = span<UC const>(start_digits, size_t(digit_count));
  332|   846k|  FASTFLOAT_IF_CONSTEXPR17(basic_json_fmt) {
  ------------------
  |  |   31|   846k|#define FASTFLOAT_IF_CONSTEXPR17(x) if constexpr (x)
  ------------------
  333|       |    // at least 1 digit in integer part, without leading zeros
  334|       |    if (digit_count == 0) {
  335|       |      return report_parse_error<UC>(p, parse_error::no_digits_in_integer_part);
  336|       |    }
  337|       |    if ((start_digits[0] == UC('0') && digit_count > 1)) {
  338|       |      return report_parse_error<UC>(start_digits,
  339|       |                                    parse_error::leading_zeros_in_integer_part);
  340|       |    }
  341|       |  }
  342|       |
  343|   846k|  int64_t exponent = 0;
  344|   846k|  bool const has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (344:34): [True: 424k, False: 421k]
  |  Branch (344:49): [True: 158k, False: 265k]
  ------------------
  345|   846k|  if (has_decimal_point) {
  ------------------
  |  Branch (345:7): [True: 158k, False: 687k]
  ------------------
  346|   158k|    ++p;
  347|   158k|    UC const *before = p;
  348|       |    // can occur at most twice without overflowing, but let it occur more, since
  349|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  350|   158k|    loop_parse_if_eight_digits(p, pend, i);
  351|       |
  352|   669k|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (352:12): [True: 570k, False: 98.7k]
  |  Branch (352:27): [True: 510k, False: 60.2k]
  ------------------
  353|   510k|      uint8_t digit = uint8_t(*p - UC('0'));
  354|   510k|      ++p;
  355|   510k|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  356|   510k|    }
  357|   158k|    exponent = before - p;
  358|   158k|    answer.fraction = span<UC const>(before, size_t(p - before));
  359|   158k|    digit_count -= exponent;
  360|   158k|  }
  361|   846k|  FASTFLOAT_IF_CONSTEXPR17(basic_json_fmt) {
  ------------------
  |  |   31|   846k|#define FASTFLOAT_IF_CONSTEXPR17(x) if constexpr (x)
  ------------------
  362|       |    // at least 1 digit in fractional part
  363|       |    if (has_decimal_point && exponent == 0) {
  364|       |      return report_parse_error<UC>(p,
  365|       |                                    parse_error::no_digits_in_fractional_part);
  366|       |    }
  367|       |  }
  368|   846k|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (368:12): [True: 0, False: 846k]
  ------------------
  369|      0|    return report_parse_error<UC>(p, parse_error::no_digits_in_mantissa);
  370|      0|  }
  371|   846k|  int64_t exp_number = 0; // explicit exponential part
  372|   846k|  if ((uint64_t(fmt & chars_format::scientific) && (p != pend) &&
  ------------------
  |  Branch (372:8): [True: 727k, False: 118k]
  |  Branch (372:52): [True: 325k, False: 401k]
  ------------------
  373|   846k|       ((UC('e') == *p) || (UC('E') == *p))) ||
  ------------------
  |  Branch (373:9): [True: 73.3k, False: 252k]
  |  Branch (373:28): [True: 41.9k, False: 210k]
  ------------------
  374|   846k|      (uint64_t(fmt & detail::basic_fortran_fmt) && (p != pend) &&
  ------------------
  |  Branch (374:8): [True: 0, False: 731k]
  |  Branch (374:53): [True: 0, False: 0]
  ------------------
  375|   731k|       ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) ||
  ------------------
  |  Branch (375:9): [True: 0, False: 0]
  |  Branch (375:28): [True: 0, False: 0]
  |  Branch (375:47): [True: 0, False: 0]
  ------------------
  376|   115k|        (UC('D') == *p)))) {
  ------------------
  |  Branch (376:9): [True: 0, False: 0]
  ------------------
  377|   115k|    UC const *location_of_e = p;
  378|   115k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) ||
  ------------------
  |  Branch (378:9): [True: 73.3k, False: 41.9k]
  |  Branch (378:28): [True: 41.9k, False: 0]
  |  Branch (378:47): [True: 0, False: 0]
  ------------------
  379|   115k|        (UC('D') == *p)) {
  ------------------
  |  Branch (379:9): [True: 0, False: 0]
  ------------------
  380|   115k|      ++p;
  381|   115k|    }
  382|   115k|    bool neg_exp = false;
  383|   115k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (383:9): [True: 115k, False: 105]
  |  Branch (383:24): [True: 6.63k, False: 108k]
  ------------------
  384|  6.63k|      neg_exp = true;
  385|  6.63k|      ++p;
  386|   108k|    } else if ((p != pend) &&
  ------------------
  |  Branch (386:16): [True: 108k, False: 105]
  ------------------
  387|   108k|               (UC('+') ==
  ------------------
  |  Branch (387:16): [True: 26.7k, False: 81.7k]
  ------------------
  388|   108k|                *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  389|  26.7k|      ++p;
  390|  26.7k|    }
  391|   115k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (391:9): [True: 165, False: 115k]
  |  Branch (391:24): [True: 485, False: 114k]
  ------------------
  392|    650|      if (!uint64_t(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (392:11): [True: 0, False: 650]
  ------------------
  393|       |        // The exponential part is invalid for scientific notation, so it must
  394|       |        // be a trailing token for fixed notation. However, fixed notation is
  395|       |        // disabled, so report a scientific notation error.
  396|      0|        return report_parse_error<UC>(p, parse_error::missing_exponential_part);
  397|      0|      }
  398|       |      // Otherwise, we will be ignoring the 'e'.
  399|    650|      p = location_of_e;
  400|   114k|    } else {
  401|   361k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (401:14): [True: 276k, False: 84.8k]
  |  Branch (401:29): [True: 246k, False: 29.7k]
  ------------------
  402|   246k|        uint8_t digit = uint8_t(*p - UC('0'));
  403|   246k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (403:13): [True: 227k, False: 18.6k]
  ------------------
  404|   227k|          exp_number = 10 * exp_number + digit;
  405|   227k|        }
  406|   246k|        ++p;
  407|   246k|      }
  408|   114k|      if (neg_exp) {
  ------------------
  |  Branch (408:11): [True: 6.58k, False: 108k]
  ------------------
  409|  6.58k|        exp_number = -exp_number;
  410|  6.58k|      }
  411|   114k|      exponent += exp_number;
  412|   114k|    }
  413|   731k|  } else {
  414|       |    // If it scientific and not fixed, we have to bail out.
  415|   731k|    if (uint64_t(fmt & chars_format::scientific) &&
  ------------------
  |  Branch (415:9): [True: 612k, False: 118k]
  ------------------
  416|   731k|        !uint64_t(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (416:9): [True: 0, False: 612k]
  ------------------
  417|      0|      return report_parse_error<UC>(p, parse_error::missing_exponential_part);
  418|      0|    }
  419|   731k|  }
  420|   846k|  answer.lastmatch = p;
  421|   846k|  answer.valid = true;
  422|       |
  423|       |  // If we frequently had to deal with long strings of digits,
  424|       |  // we could extend our code by using a 128-bit integer instead
  425|       |  // of a 64-bit integer. However, this is uncommon.
  426|       |  //
  427|       |  // We can deal with up to 19 digits.
  428|   846k|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (428:7): [True: 144k, False: 702k]
  ------------------
  429|       |    // It is possible that the integer had an overflow.
  430|       |    // We have to handle the case where we have 0.0000somenumber.
  431|       |    // We need to be mindful of the case where we only have zeroes...
  432|       |    // E.g., 0.000000000...000.
  433|   144k|    UC const *start = start_digits;
  434|   629k|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (434:12): [True: 628k, False: 1.56k]
  |  Branch (434:32): [True: 477k, False: 150k]
  |  Branch (434:53): [True: 7.89k, False: 142k]
  ------------------
  435|   485k|      if (*start == UC('0')) {
  ------------------
  |  Branch (435:11): [True: 477k, False: 7.89k]
  ------------------
  436|   477k|        digit_count--;
  437|   477k|      }
  438|   485k|      start++;
  439|   485k|    }
  440|       |
  441|   144k|    if (digit_count > 19) {
  ------------------
  |  Branch (441:9): [True: 139k, False: 5.05k]
  ------------------
  442|   139k|      answer.too_many_digits = true;
  443|       |      // Let us start again, this time, avoiding overflows.
  444|       |      // We don't need to check if is_integer, since we use the
  445|       |      // pre-tokenized spans from above.
  446|   139k|      i = 0;
  447|   139k|      p = answer.integer.ptr;
  448|   139k|      UC const *int_end = p + answer.integer.len();
  449|   139k|      uint64_t const minimal_nineteen_digit_integer{1000000000000000000};
  450|  1.36M|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (450:14): [True: 1.32M, False: 35.1k]
  |  Branch (450:54): [True: 1.22M, False: 103k]
  ------------------
  451|  1.22M|        i = i * 10 + uint64_t(*p - UC('0'));
  452|  1.22M|        ++p;
  453|  1.22M|      }
  454|   139k|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (454:11): [True: 35.1k, False: 103k]
  ------------------
  455|  35.1k|        exponent = end_of_integer_part - p + exp_number;
  456|   103k|      } else { // We have a value with a fractional component.
  457|   103k|        p = answer.fraction.ptr;
  458|   103k|        UC const *frac_end = p + answer.fraction.len();
  459|  1.87M|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (459:16): [True: 1.77M, False: 103k]
  |  Branch (459:56): [True: 1.77M, False: 0]
  ------------------
  460|  1.77M|          i = i * 10 + uint64_t(*p - UC('0'));
  461|  1.77M|          ++p;
  462|  1.77M|        }
  463|   103k|        exponent = answer.fraction.ptr - p + exp_number;
  464|   103k|      }
  465|       |      // We have now corrected both exponent and i, to a truncated value
  466|   139k|    }
  467|   144k|  }
  468|   846k|  answer.exponent = exponent;
  469|   846k|  answer.mantissa = i;
  470|   846k|  return answer;
  471|   846k|}
_ZN10fast_float27parse_eight_digits_unrolledIcEEjPKT_:
  133|   197k|parse_eight_digits_unrolled(UC const *chars) noexcept {
  134|   197k|  if (cpp20_and_in_constexpr() || !has_simd_opt<UC>()) {
  ------------------
  |  Branch (134:7): [Folded - Ignored]
  |  Branch (134:35): [Folded - Ignored]
  ------------------
  135|   197k|    return parse_eight_digits_unrolled(read8_to_u64(chars)); // truncation okay
  136|   197k|  }
  137|      0|  return parse_eight_digits_unrolled(simd_read8_to_u64(chars));
  138|   197k|}
_ZN10fast_float10is_integerIDiEEbT_:
   34|   782k|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   35|   782k|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (35:12): [True: 147k, False: 634k]
  |  Branch (35:27): [True: 8.42k, False: 625k]
  ------------------
   36|   782k|}
_ZN10fast_float26loop_parse_if_eight_digitsIDiTnNSt3__19enable_ifIXntsr3std7is_sameIT_cEE5valueEiE4typeELi0EEEvRPKS3_S7_Rm:
  211|  7.05k|loop_parse_if_eight_digits(UC const *&p, UC const *const pend, uint64_t &i) {
  212|  7.05k|  if (!has_simd_opt<UC>()) {
  ------------------
  |  Branch (212:7): [Folded - Ignored]
  ------------------
  213|  7.05k|    return;
  214|  7.05k|  }
  215|      0|  while ((std::distance(p, pend) >= 8) &&
  ------------------
  |  Branch (215:10): [True: 0, False: 0]
  ------------------
  216|      0|         simd_parse_if_eight_digits_unrolled(
  ------------------
  |  Branch (216:10): [True: 0, False: 0]
  ------------------
  217|      0|             p, i)) { // in rare cases, this will overflow, but that's ok
  218|      0|    p += 8;
  219|      0|  }
  220|      0|}
_ZN10fast_float19parse_number_stringILb0EDiEENS_22parsed_number_string_tIT0_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  285|   438k|                    parse_options_t<UC> options) noexcept {
  286|   438k|  chars_format const fmt = detail::adjust_for_feature_macros(options.format);
  287|   438k|  UC const decimal_point = options.decimal_point;
  288|       |
  289|   438k|  parsed_number_string_t<UC> answer;
  290|   438k|  answer.valid = false;
  291|   438k|  answer.too_many_digits = false;
  292|       |  // assume p < pend, so dereference without checks;
  293|   438k|  answer.negative = (*p == UC('-'));
  294|       |  // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  295|   438k|  if ((*p == UC('-')) || (uint64_t(fmt & chars_format::allow_leading_plus) &&
  ------------------
  |  Branch (295:7): [True: 0, False: 438k]
  |  Branch (295:27): [True: 0, False: 438k]
  ------------------
  296|   438k|                          !basic_json_fmt && *p == UC('+'))) {
  ------------------
  |  Branch (296:27): [Folded - Ignored]
  |  Branch (296:46): [True: 0, False: 0]
  ------------------
  297|      0|    ++p;
  298|      0|    if (p == pend) {
  ------------------
  |  Branch (298:9): [True: 0, False: 0]
  ------------------
  299|      0|      return report_parse_error<UC>(
  300|      0|          p, parse_error::missing_integer_or_dot_after_sign);
  301|      0|    }
  302|      0|    FASTFLOAT_IF_CONSTEXPR17(basic_json_fmt) {
  ------------------
  |  |   31|      0|#define FASTFLOAT_IF_CONSTEXPR17(x) if constexpr (x)
  ------------------
  303|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  304|      0|        return report_parse_error<UC>(p,
  305|      0|                                      parse_error::missing_integer_after_sign);
  306|      0|      }
  307|      0|    }
  308|      0|    else {
  309|      0|      if (!is_integer(*p) &&
  ------------------
  |  Branch (309:11): [True: 0, False: 0]
  ------------------
  310|      0|          (*p !=
  ------------------
  |  Branch (310:11): [True: 0, False: 0]
  ------------------
  311|      0|           decimal_point)) { // a sign must be followed by an integer or the dot
  312|      0|        return report_parse_error<UC>(
  313|      0|            p, parse_error::missing_integer_or_dot_after_sign);
  314|      0|      }
  315|      0|    }
  316|      0|  }
  317|   438k|  UC const *const start_digits = p;
  318|       |
  319|   438k|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  320|       |
  321|   954k|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (321:10): [True: 664k, False: 289k]
  |  Branch (321:25): [True: 515k, False: 148k]
  ------------------
  322|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  323|       |    // multiplication
  324|   515k|    i = 10 * i +
  325|   515k|        uint64_t(*p -
  326|   515k|                 UC('0')); // might overflow, we will handle the overflow later
  327|   515k|    ++p;
  328|   515k|  }
  329|   438k|  UC const *const end_of_integer_part = p;
  330|   438k|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  331|   438k|  answer.integer = span<UC const>(start_digits, size_t(digit_count));
  332|   438k|  FASTFLOAT_IF_CONSTEXPR17(basic_json_fmt) {
  ------------------
  |  |   31|   438k|#define FASTFLOAT_IF_CONSTEXPR17(x) if constexpr (x)
  ------------------
  333|       |    // at least 1 digit in integer part, without leading zeros
  334|       |    if (digit_count == 0) {
  335|       |      return report_parse_error<UC>(p, parse_error::no_digits_in_integer_part);
  336|       |    }
  337|       |    if ((start_digits[0] == UC('0') && digit_count > 1)) {
  338|       |      return report_parse_error<UC>(start_digits,
  339|       |                                    parse_error::leading_zeros_in_integer_part);
  340|       |    }
  341|       |  }
  342|       |
  343|   438k|  int64_t exponent = 0;
  344|   438k|  bool const has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (344:34): [True: 148k, False: 289k]
  |  Branch (344:49): [True: 7.05k, False: 141k]
  ------------------
  345|   438k|  if (has_decimal_point) {
  ------------------
  |  Branch (345:7): [True: 7.05k, False: 431k]
  ------------------
  346|  7.05k|    ++p;
  347|  7.05k|    UC const *before = p;
  348|       |    // can occur at most twice without overflowing, but let it occur more, since
  349|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  350|  7.05k|    loop_parse_if_eight_digits(p, pend, i);
  351|       |
  352|  56.6k|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (352:12): [True: 51.7k, False: 4.94k]
  |  Branch (352:27): [True: 49.6k, False: 2.10k]
  ------------------
  353|  49.6k|      uint8_t digit = uint8_t(*p - UC('0'));
  354|  49.6k|      ++p;
  355|  49.6k|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  356|  49.6k|    }
  357|  7.05k|    exponent = before - p;
  358|  7.05k|    answer.fraction = span<UC const>(before, size_t(p - before));
  359|  7.05k|    digit_count -= exponent;
  360|  7.05k|  }
  361|   438k|  FASTFLOAT_IF_CONSTEXPR17(basic_json_fmt) {
  ------------------
  |  |   31|   438k|#define FASTFLOAT_IF_CONSTEXPR17(x) if constexpr (x)
  ------------------
  362|       |    // at least 1 digit in fractional part
  363|       |    if (has_decimal_point && exponent == 0) {
  364|       |      return report_parse_error<UC>(p,
  365|       |                                    parse_error::no_digits_in_fractional_part);
  366|       |    }
  367|       |  }
  368|   438k|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (368:12): [True: 0, False: 438k]
  ------------------
  369|      0|    return report_parse_error<UC>(p, parse_error::no_digits_in_mantissa);
  370|      0|  }
  371|   438k|  int64_t exp_number = 0; // explicit exponential part
  372|   438k|  if ((uint64_t(fmt & chars_format::scientific) && (p != pend) &&
  ------------------
  |  Branch (372:8): [True: 360k, False: 77.7k]
  |  Branch (372:52): [True: 143k, False: 217k]
  ------------------
  373|   438k|       ((UC('e') == *p) || (UC('E') == *p))) ||
  ------------------
  |  Branch (373:9): [True: 215, False: 143k]
  |  Branch (373:28): [True: 17.9k, False: 125k]
  ------------------
  374|   438k|      (uint64_t(fmt & detail::basic_fortran_fmt) && (p != pend) &&
  ------------------
  |  Branch (374:8): [True: 0, False: 420k]
  |  Branch (374:53): [True: 0, False: 0]
  ------------------
  375|   420k|       ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) ||
  ------------------
  |  Branch (375:9): [True: 0, False: 0]
  |  Branch (375:28): [True: 0, False: 0]
  |  Branch (375:47): [True: 0, False: 0]
  ------------------
  376|  18.1k|        (UC('D') == *p)))) {
  ------------------
  |  Branch (376:9): [True: 0, False: 0]
  ------------------
  377|  18.1k|    UC const *location_of_e = p;
  378|  18.1k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) ||
  ------------------
  |  Branch (378:9): [True: 215, False: 17.9k]
  |  Branch (378:28): [True: 17.9k, False: 0]
  |  Branch (378:47): [True: 0, False: 0]
  ------------------
  379|  18.1k|        (UC('D') == *p)) {
  ------------------
  |  Branch (379:9): [True: 0, False: 0]
  ------------------
  380|  18.1k|      ++p;
  381|  18.1k|    }
  382|  18.1k|    bool neg_exp = false;
  383|  18.1k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (383:9): [True: 18.1k, False: 20]
  |  Branch (383:24): [True: 3.40k, False: 14.7k]
  ------------------
  384|  3.40k|      neg_exp = true;
  385|  3.40k|      ++p;
  386|  14.7k|    } else if ((p != pend) &&
  ------------------
  |  Branch (386:16): [True: 14.7k, False: 20]
  ------------------
  387|  14.7k|               (UC('+') ==
  ------------------
  |  Branch (387:16): [True: 353, False: 14.3k]
  ------------------
  388|  14.7k|                *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  389|    353|      ++p;
  390|    353|    }
  391|  18.1k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (391:9): [True: 50, False: 18.1k]
  |  Branch (391:24): [True: 420, False: 17.7k]
  ------------------
  392|    470|      if (!uint64_t(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (392:11): [True: 0, False: 470]
  ------------------
  393|       |        // The exponential part is invalid for scientific notation, so it must
  394|       |        // be a trailing token for fixed notation. However, fixed notation is
  395|       |        // disabled, so report a scientific notation error.
  396|      0|        return report_parse_error<UC>(p, parse_error::missing_exponential_part);
  397|      0|      }
  398|       |      // Otherwise, we will be ignoring the 'e'.
  399|    470|      p = location_of_e;
  400|  17.7k|    } else {
  401|  60.2k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (401:14): [True: 47.8k, False: 12.4k]
  |  Branch (401:29): [True: 42.5k, False: 5.27k]
  ------------------
  402|  42.5k|        uint8_t digit = uint8_t(*p - UC('0'));
  403|  42.5k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (403:13): [True: 39.9k, False: 2.58k]
  ------------------
  404|  39.9k|          exp_number = 10 * exp_number + digit;
  405|  39.9k|        }
  406|  42.5k|        ++p;
  407|  42.5k|      }
  408|  17.7k|      if (neg_exp) {
  ------------------
  |  Branch (408:11): [True: 3.38k, False: 14.3k]
  ------------------
  409|  3.38k|        exp_number = -exp_number;
  410|  3.38k|      }
  411|  17.7k|      exponent += exp_number;
  412|  17.7k|    }
  413|   420k|  } else {
  414|       |    // If it scientific and not fixed, we have to bail out.
  415|   420k|    if (uint64_t(fmt & chars_format::scientific) &&
  ------------------
  |  Branch (415:9): [True: 342k, False: 77.7k]
  ------------------
  416|   420k|        !uint64_t(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (416:9): [True: 0, False: 342k]
  ------------------
  417|      0|      return report_parse_error<UC>(p, parse_error::missing_exponential_part);
  418|      0|    }
  419|   420k|  }
  420|   438k|  answer.lastmatch = p;
  421|   438k|  answer.valid = true;
  422|       |
  423|       |  // If we frequently had to deal with long strings of digits,
  424|       |  // we could extend our code by using a 128-bit integer instead
  425|       |  // of a 64-bit integer. However, this is uncommon.
  426|       |  //
  427|       |  // We can deal with up to 19 digits.
  428|   438k|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (428:7): [True: 2.49k, False: 435k]
  ------------------
  429|       |    // It is possible that the integer had an overflow.
  430|       |    // We have to handle the case where we have 0.0000somenumber.
  431|       |    // We need to be mindful of the case where we only have zeroes...
  432|       |    // E.g., 0.000000000...000.
  433|  2.49k|    UC const *start = start_digits;
  434|  4.08k|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (434:12): [True: 4.08k, False: 0]
  |  Branch (434:32): [True: 1.06k, False: 3.02k]
  |  Branch (434:53): [True: 532, False: 2.49k]
  ------------------
  435|  1.59k|      if (*start == UC('0')) {
  ------------------
  |  Branch (435:11): [True: 1.06k, False: 532]
  ------------------
  436|  1.06k|        digit_count--;
  437|  1.06k|      }
  438|  1.59k|      start++;
  439|  1.59k|    }
  440|       |
  441|  2.49k|    if (digit_count > 19) {
  ------------------
  |  Branch (441:9): [True: 2.25k, False: 236]
  ------------------
  442|  2.25k|      answer.too_many_digits = true;
  443|       |      // Let us start again, this time, avoiding overflows.
  444|       |      // We don't need to check if is_integer, since we use the
  445|       |      // pre-tokenized spans from above.
  446|  2.25k|      i = 0;
  447|  2.25k|      p = answer.integer.ptr;
  448|  2.25k|      UC const *int_end = p + answer.integer.len();
  449|  2.25k|      uint64_t const minimal_nineteen_digit_integer{1000000000000000000};
  450|  27.6k|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (450:14): [True: 26.7k, False: 906]
  |  Branch (450:54): [True: 25.4k, False: 1.34k]
  ------------------
  451|  25.4k|        i = i * 10 + uint64_t(*p - UC('0'));
  452|  25.4k|        ++p;
  453|  25.4k|      }
  454|  2.25k|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (454:11): [True: 906, False: 1.34k]
  ------------------
  455|    906|        exponent = end_of_integer_part - p + exp_number;
  456|  1.34k|      } else { // We have a value with a fractional component.
  457|  1.34k|        p = answer.fraction.ptr;
  458|  1.34k|        UC const *frac_end = p + answer.fraction.len();
  459|  19.5k|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (459:16): [True: 18.2k, False: 1.34k]
  |  Branch (459:56): [True: 18.2k, False: 0]
  ------------------
  460|  18.2k|          i = i * 10 + uint64_t(*p - UC('0'));
  461|  18.2k|          ++p;
  462|  18.2k|        }
  463|  1.34k|        exponent = answer.fraction.ptr - p + exp_number;
  464|  1.34k|      }
  465|       |      // We have now corrected both exponent and i, to a truncated value
  466|  2.25k|    }
  467|  2.49k|  }
  468|   438k|  answer.exponent = exponent;
  469|   438k|  answer.mantissa = i;
  470|   438k|  return answer;
  471|   438k|}
_ZN10fast_float27parse_eight_digits_unrolledIDiEEjPKT_:
  133|    332|parse_eight_digits_unrolled(UC const *chars) noexcept {
  134|    332|  if (cpp20_and_in_constexpr() || !has_simd_opt<UC>()) {
  ------------------
  |  Branch (134:7): [Folded - Ignored]
  |  Branch (134:35): [Folded - Ignored]
  ------------------
  135|    332|    return parse_eight_digits_unrolled(read8_to_u64(chars)); // truncation okay
  136|    332|  }
  137|      0|  return parse_eight_digits_unrolled(simd_read8_to_u64(chars));
  138|    332|}
_ZN10fast_float12read8_to_u64IDiEEmPKT_:
   48|    332|read8_to_u64(UC const *chars) {
   49|    332|  if (cpp20_and_in_constexpr() || !std::is_same<UC, char>::value) {
  ------------------
  |  Branch (49:7): [Folded - Ignored]
  |  Branch (49:35): [Folded - Ignored]
  ------------------
   50|    332|    uint64_t val = 0;
   51|  2.98k|    for (int i = 0; i < 8; ++i) {
  ------------------
  |  Branch (51:21): [True: 2.65k, False: 332]
  ------------------
   52|  2.65k|      val |= uint64_t(uint8_t(*chars)) << (i * 8);
   53|  2.65k|      ++chars;
   54|  2.65k|    }
   55|    332|    return val;
   56|    332|  }
   57|      0|  uint64_t val;
   58|      0|  ::memcpy(&val, chars, sizeof(uint64_t));
   59|       |#if FASTFLOAT_IS_BIG_ENDIAN == 1
   60|       |  // Need to read as-if the number was in little-endian order.
   61|       |  val = byteswap(val);
   62|       |#endif
   63|      0|  return val;
   64|    332|}

_ZN10fast_float6bigintC2Ev:
  438|  49.0k|  FASTFLOAT_CONSTEXPR20 bigint() : vec() {}
_ZN10fast_float8stackvecILt62EEC2Ev:
   45|   109k|  stackvec() = default;
_ZN10fast_float6bigint3mulEm:
  591|   173k|  FASTFLOAT_CONSTEXPR20 bool mul(limb y) noexcept { return small_mul(vec, y); }
_ZN10fast_float9small_mulILt62EEEbRNS_8stackvecIXT_EEEm:
  288|   257k|                                            limb y) noexcept {
  289|   257k|  limb carry = 0;
  290|  1.10M|  for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (290:26): [True: 844k, False: 257k]
  ------------------
  291|   844k|    vec[index] = scalar_mul(vec[index], y, carry);
  292|   844k|  }
  293|   257k|  if (carry != 0) {
  ------------------
  |  Branch (293:7): [True: 154k, False: 103k]
  ------------------
  294|   154k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  205|   154k|  {                                                                            \
  |  |  206|   154k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (206:9): [True: 0, False: 154k]
  |  |  ------------------
  |  |  207|   154k|      return false;                                                            \
  |  |  208|   154k|  }
  ------------------
  295|   154k|  }
  296|   257k|  return true;
  297|   257k|}
_ZNK10fast_float8stackvecILt62EE3lenEv:
   78|  2.05M|  constexpr size_t len() const noexcept { return length; }
_ZN10fast_float10scalar_mulEmmRm:
  235|   844k|scalar_mul(limb x, limb y, limb &carry) noexcept {
  236|   844k|#ifdef FASTFLOAT_64BIT_LIMB
  237|   844k|#if defined(__SIZEOF_INT128__)
  238|       |  // GCC and clang both define it as an extension.
  239|   844k|  __uint128_t z = __uint128_t(x) * __uint128_t(y) + __uint128_t(carry);
  240|   844k|  carry = limb(z >> limb_bits);
  241|   844k|  return limb(z);
  242|       |#else
  243|       |  // fallback, no native 128-bit integer multiplication with carry.
  244|       |  // on msvc, this optimizes identically, somehow.
  245|       |  value128 z = full_multiplication(x, y);
  246|       |  bool overflow;
  247|       |  z.low = scalar_add(z.low, carry, overflow);
  248|       |  z.high += uint64_t(overflow); // cannot overflow
  249|       |  carry = z.high;
  250|       |  return z.low;
  251|       |#endif
  252|       |#else
  253|       |  uint64_t z = uint64_t(x) * uint64_t(y) + uint64_t(carry);
  254|       |  carry = limb(z >> limb_bits);
  255|       |  return limb(z);
  256|       |#endif
  257|   844k|}
_ZN10fast_float8stackvecILt62EEixEm:
   56|  2.30M|  FASTFLOAT_CONSTEXPR14 limb &operator[](size_t index) noexcept {
   57|  2.30M|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  200|  2.30M|  { ((void)(x)); }
  ------------------
   58|  2.30M|    return data[index];
   59|  2.30M|  }
_ZN10fast_float8stackvecILt62EE8try_pushEm:
   91|   213k|  FASTFLOAT_CONSTEXPR14 bool try_push(limb value) noexcept {
   92|   213k|    if (len() < capacity()) {
  ------------------
  |  Branch (92:9): [True: 213k, False: 0]
  ------------------
   93|   213k|      push_unchecked(value);
   94|   213k|      return true;
   95|   213k|    } else {
   96|      0|      return false;
   97|      0|    }
   98|   213k|  }
_ZNK10fast_float8stackvecILt62EE8capacityEv:
   82|   251k|  constexpr size_t capacity() const noexcept { return size; }
_ZN10fast_float8stackvecILt62EE14push_uncheckedEm:
   85|   258k|  FASTFLOAT_CONSTEXPR14 void push_unchecked(limb value) noexcept {
   86|   258k|    data[length] = value;
   87|   258k|    length++;
   88|   258k|  }
_ZN10fast_float6bigint3addEm:
  593|   173k|  FASTFLOAT_CONSTEXPR20 bool add(limb y) noexcept { return small_add(vec, y); }
_ZN10fast_float9small_addILt62EEEbRNS_8stackvecIXT_EEEm:
  281|   173k|small_add(stackvec<size> &vec, limb y) noexcept {
  282|   173k|  return small_add_from(vec, y, 0);
  283|   173k|}
_ZN10fast_float14small_add_fromILt62EEEbRNS_8stackvecIXT_EEEmm:
  263|   173k|                                                 size_t start) noexcept {
  264|   173k|  size_t index = start;
  265|   173k|  limb carry = y;
  266|   173k|  bool overflow;
  267|   261k|  while (carry != 0 && index < vec.len()) {
  ------------------
  |  Branch (267:10): [True: 137k, False: 123k]
  |  Branch (267:24): [True: 88.5k, False: 49.0k]
  ------------------
  268|  88.5k|    vec[index] = scalar_add(vec[index], carry, overflow);
  269|  88.5k|    carry = limb(overflow);
  270|  88.5k|    index += 1;
  271|  88.5k|  }
  272|   173k|  if (carry != 0) {
  ------------------
  |  Branch (272:7): [True: 49.0k, False: 123k]
  ------------------
  273|  49.0k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  205|  49.0k|  {                                                                            \
  |  |  206|  49.0k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (206:9): [True: 0, False: 49.0k]
  |  |  ------------------
  |  |  207|  49.0k|      return false;                                                            \
  |  |  208|  49.0k|  }
  ------------------
  274|  49.0k|  }
  275|   173k|  return true;
  276|   173k|}
_ZN10fast_float10scalar_addEmmRb:
  215|   236k|scalar_add(limb x, limb y, bool &overflow) noexcept {
  216|   236k|  limb z;
  217|       |// gcc and clang
  218|   236k|#if defined(__has_builtin)
  219|   236k|#if __has_builtin(__builtin_add_overflow)
  220|   236k|  if (!cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (220:7): [Folded - Ignored]
  ------------------
  221|   236k|    overflow = __builtin_add_overflow(x, y, &z);
  222|   236k|    return z;
  223|   236k|  }
  224|      0|#endif
  225|      0|#endif
  226|       |
  227|       |  // generic, this still optimizes correctly on MSVC.
  228|      0|  z = x + y;
  229|      0|  overflow = z < x;
  230|      0|  return z;
  231|   236k|}
_ZN10fast_float6bigint5pow10Ej:
  630|  3.25k|  FASTFLOAT_CONSTEXPR20 bool pow10(uint32_t exp) noexcept {
  631|  3.25k|    FASTFLOAT_TRY(pow5(exp));
  ------------------
  |  |  205|  3.25k|  {                                                                            \
  |  |  206|  3.25k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (206:9): [True: 0, False: 3.25k]
  |  |  ------------------
  |  |  207|  3.25k|      return false;                                                            \
  |  |  208|  3.25k|  }
  ------------------
  632|  3.25k|    return pow2(exp);
  633|  3.25k|  }
_ZN10fast_float6bigint4pow5Ej:
  599|  49.0k|  FASTFLOAT_CONSTEXPR20 bool pow5(uint32_t exp) noexcept {
  600|       |    // multiply by a power of 5
  601|  49.0k|    size_t large_length = sizeof(large_power_of_5) / sizeof(limb);
  602|  49.0k|    limb_span large = limb_span(large_power_of_5, large_length);
  603|  52.6k|    while (exp >= large_step) {
  ------------------
  |  Branch (603:12): [True: 3.61k, False: 49.0k]
  ------------------
  604|  3.61k|      FASTFLOAT_TRY(large_mul(vec, large));
  ------------------
  |  |  205|  3.61k|  {                                                                            \
  |  |  206|  3.61k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (206:9): [True: 0, False: 3.61k]
  |  |  ------------------
  |  |  207|  3.61k|      return false;                                                            \
  |  |  208|  3.61k|  }
  ------------------
  605|  3.61k|      exp -= large_step;
  606|  3.61k|    }
  607|  49.0k|#ifdef FASTFLOAT_64BIT_LIMB
  608|  49.0k|    uint32_t small_step = 27;
  609|  49.0k|    limb max_native = 7450580596923828125UL;
  610|       |#else
  611|       |    uint32_t small_step = 13;
  612|       |    limb max_native = 1220703125U;
  613|       |#endif
  614|  72.6k|    while (exp >= small_step) {
  ------------------
  |  Branch (614:12): [True: 23.6k, False: 49.0k]
  ------------------
  615|  23.6k|      FASTFLOAT_TRY(small_mul(vec, max_native));
  ------------------
  |  |  205|  23.6k|  {                                                                            \
  |  |  206|  23.6k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (206:9): [True: 0, False: 23.6k]
  |  |  ------------------
  |  |  207|  23.6k|      return false;                                                            \
  |  |  208|  23.6k|  }
  ------------------
  616|  23.6k|      exp -= small_step;
  617|  23.6k|    }
  618|  49.0k|    if (exp != 0) {
  ------------------
  |  Branch (618:9): [True: 43.0k, False: 5.99k]
  ------------------
  619|       |      // Work around clang bug https://godbolt.org/z/zedh7rrhc
  620|       |      // This is similar to https://github.com/llvm/llvm-project/issues/47746,
  621|       |      // except the workaround described there don't work here
  622|  43.0k|      FASTFLOAT_TRY(small_mul(
  ------------------
  |  |  205|  43.0k|  {                                                                            \
  |  |  206|  43.0k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (206:9): [True: 0, False: 43.0k]
  |  |  ------------------
  |  |  207|  43.0k|      return false;                                                            \
  |  |  208|  43.0k|  }
  ------------------
  623|  43.0k|          vec, limb(((void)small_power_of_5[0], small_power_of_5[exp]))));
  624|  43.0k|    }
  625|       |
  626|  49.0k|    return true;
  627|  49.0k|  }
_ZN10fast_float9large_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  368|  3.61k|FASTFLOAT_CONSTEXPR20 bool large_mul(stackvec<size> &x, limb_span y) noexcept {
  369|  3.61k|  if (y.len() == 1) {
  ------------------
  |  Branch (369:7): [True: 0, False: 3.61k]
  ------------------
  370|      0|    FASTFLOAT_TRY(small_mul(x, y[0]));
  ------------------
  |  |  205|      0|  {                                                                            \
  |  |  206|      0|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (206:9): [True: 0, False: 0]
  |  |  ------------------
  |  |  207|      0|      return false;                                                            \
  |  |  208|      0|  }
  ------------------
  371|  3.61k|  } else {
  372|  3.61k|    FASTFLOAT_TRY(long_mul(x, y));
  ------------------
  |  |  205|  3.61k|  {                                                                            \
  |  |  206|  3.61k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (206:9): [True: 0, False: 3.61k]
  |  |  ------------------
  |  |  207|  3.61k|      return false;                                                            \
  |  |  208|  3.61k|  }
  ------------------
  373|  3.61k|  }
  374|  3.61k|  return true;
  375|  3.61k|}
_ZN10fast_float8long_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  340|  3.61k|FASTFLOAT_CONSTEXPR20 bool long_mul(stackvec<size> &x, limb_span y) noexcept {
  341|  3.61k|  limb_span xs = limb_span(x.data, x.len());
  342|  3.61k|  stackvec<size> z(xs);
  343|  3.61k|  limb_span zs = limb_span(z.data, z.len());
  344|       |
  345|  3.61k|  if (y.len() != 0) {
  ------------------
  |  Branch (345:7): [True: 3.61k, False: 0]
  ------------------
  346|  3.61k|    limb y0 = y[0];
  347|  3.61k|    FASTFLOAT_TRY(small_mul(x, y0));
  ------------------
  |  |  205|  3.61k|  {                                                                            \
  |  |  206|  3.61k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (206:9): [True: 0, False: 3.61k]
  |  |  ------------------
  |  |  207|  3.61k|      return false;                                                            \
  |  |  208|  3.61k|  }
  ------------------
  348|  18.0k|    for (size_t index = 1; index < y.len(); index++) {
  ------------------
  |  Branch (348:28): [True: 14.4k, False: 3.61k]
  ------------------
  349|  14.4k|      limb yi = y[index];
  350|  14.4k|      stackvec<size> zi;
  351|  14.4k|      if (yi != 0) {
  ------------------
  |  Branch (351:11): [True: 14.4k, False: 0]
  ------------------
  352|       |        // re-use the same buffer throughout
  353|  14.4k|        zi.set_len(0);
  354|  14.4k|        FASTFLOAT_TRY(zi.try_extend(zs));
  ------------------
  |  |  205|  14.4k|  {                                                                            \
  |  |  206|  14.4k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (206:9): [True: 0, False: 14.4k]
  |  |  ------------------
  |  |  207|  14.4k|      return false;                                                            \
  |  |  208|  14.4k|  }
  ------------------
  355|  14.4k|        FASTFLOAT_TRY(small_mul(zi, yi));
  ------------------
  |  |  205|  14.4k|  {                                                                            \
  |  |  206|  14.4k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (206:9): [True: 0, False: 14.4k]
  |  |  ------------------
  |  |  207|  14.4k|      return false;                                                            \
  |  |  208|  14.4k|  }
  ------------------
  356|  14.4k|        limb_span zis = limb_span(zi.data, zi.len());
  357|  14.4k|        FASTFLOAT_TRY(large_add_from(x, zis, index));
  ------------------
  |  |  205|  14.4k|  {                                                                            \
  |  |  206|  14.4k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (206:9): [True: 0, False: 14.4k]
  |  |  ------------------
  |  |  207|  14.4k|      return false;                                                            \
  |  |  208|  14.4k|  }
  ------------------
  358|  14.4k|      }
  359|  14.4k|    }
  360|  3.61k|  }
  361|       |
  362|  3.61k|  x.normalize();
  363|  3.61k|  return true;
  364|  3.61k|}
_ZN10fast_float8stackvecILt62EEC2ENS_4spanImEE:
   52|  3.61k|  FASTFLOAT_CONSTEXPR20 stackvec(limb_span s) {
   53|  3.61k|    FASTFLOAT_ASSERT(try_extend(s));
  ------------------
  |  |  195|  3.61k|  { ((void)(x)); }
  ------------------
   54|  3.61k|  }
_ZN10fast_float8stackvecILt62EE7set_lenEm:
   74|  53.3k|  FASTFLOAT_CONSTEXPR14 void set_len(size_t len) noexcept {
   75|  53.3k|    length = uint16_t(len);
   76|  53.3k|  }
_ZN10fast_float8stackvecILt62EE10try_extendENS_4spanImEE:
  108|  18.0k|  FASTFLOAT_CONSTEXPR20 bool try_extend(limb_span s) noexcept {
  109|  18.0k|    if (len() + s.len() <= capacity()) {
  ------------------
  |  Branch (109:9): [True: 18.0k, False: 0]
  ------------------
  110|  18.0k|      extend_unchecked(s);
  111|  18.0k|      return true;
  112|  18.0k|    } else {
  113|      0|      return false;
  114|      0|    }
  115|  18.0k|  }
_ZN10fast_float8stackvecILt62EE16extend_uncheckedENS_4spanImEE:
  101|  18.0k|  FASTFLOAT_CONSTEXPR20 void extend_unchecked(limb_span s) noexcept {
  102|  18.0k|    limb *ptr = data + length;
  103|  18.0k|    std::copy_n(s.ptr, s.len(), ptr);
  104|  18.0k|    set_len(len() + s.len());
  105|  18.0k|  }
_ZN10fast_float14large_add_fromILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEEm:
  303|  14.4k|                                          size_t start) noexcept {
  304|       |  // the effective x buffer is from `xstart..x.len()`, so exit early
  305|       |  // if we can't get that current range.
  306|  14.4k|  if (x.len() < start || y.len() > x.len() - start) {
  ------------------
  |  Branch (306:7): [True: 0, False: 14.4k]
  |  Branch (306:26): [True: 14.1k, False: 284]
  ------------------
  307|  14.1k|    FASTFLOAT_TRY(x.try_resize(y.len() + start, 0));
  ------------------
  |  |  205|  14.1k|  {                                                                            \
  |  |  206|  14.1k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (206:9): [True: 0, False: 14.1k]
  |  |  ------------------
  |  |  207|  14.1k|      return false;                                                            \
  |  |  208|  14.1k|  }
  ------------------
  308|  14.1k|  }
  309|       |
  310|  14.4k|  bool carry = false;
  311|   122k|  for (size_t index = 0; index < y.len(); index++) {
  ------------------
  |  Branch (311:26): [True: 107k, False: 14.4k]
  ------------------
  312|   107k|    limb xi = x[index + start];
  313|   107k|    limb yi = y[index];
  314|   107k|    bool c1 = false;
  315|   107k|    bool c2 = false;
  316|   107k|    xi = scalar_add(xi, yi, c1);
  317|   107k|    if (carry) {
  ------------------
  |  Branch (317:9): [True: 40.5k, False: 67.0k]
  ------------------
  318|  40.5k|      xi = scalar_add(xi, 1, c2);
  319|  40.5k|    }
  320|   107k|    x[index + start] = xi;
  321|   107k|    carry = c1 | c2;
  322|   107k|  }
  323|       |
  324|       |  // handle overflow
  325|  14.4k|  if (carry) {
  ------------------
  |  Branch (325:7): [True: 0, False: 14.4k]
  ------------------
  326|      0|    FASTFLOAT_TRY(small_add_from(x, 1, y.len() + start));
  ------------------
  |  |  205|      0|  {                                                                            \
  |  |  206|      0|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (206:9): [True: 0, False: 0]
  |  |  ------------------
  |  |  207|      0|      return false;                                                            \
  |  |  208|      0|  }
  ------------------
  327|      0|  }
  328|  14.4k|  return true;
  329|  14.4k|}
_ZN10fast_float8stackvecILt62EE10try_resizeEmm:
  134|  14.1k|  FASTFLOAT_CONSTEXPR20 bool try_resize(size_t new_len, limb value) noexcept {
  135|  14.1k|    if (new_len > capacity()) {
  ------------------
  |  Branch (135:9): [True: 0, False: 14.1k]
  ------------------
  136|      0|      return false;
  137|  14.1k|    } else {
  138|  14.1k|      resize_unchecked(new_len, value);
  139|  14.1k|      return true;
  140|  14.1k|    }
  141|  14.1k|  }
_ZN10fast_float8stackvecILt62EE16resize_uncheckedEmm:
  121|  14.1k|  void resize_unchecked(size_t new_len, limb value) noexcept {
  122|  14.1k|    if (new_len > len()) {
  ------------------
  |  Branch (122:9): [True: 14.1k, False: 0]
  ------------------
  123|  14.1k|      size_t count = new_len - len();
  124|  14.1k|      limb *first = data + len();
  125|  14.1k|      limb *last = first + count;
  126|  14.1k|      ::std::fill(first, last, value);
  127|  14.1k|      set_len(new_len);
  128|  14.1k|    } else {
  129|      0|      set_len(new_len);
  130|      0|    }
  131|  14.1k|  }
_ZN10fast_float8stackvecILt62EE9normalizeEv:
  157|  49.3k|  FASTFLOAT_CONSTEXPR14 void normalize() noexcept {
  158|  49.3k|    while (len() > 0 && rindex(0) == 0) {
  ------------------
  |  Branch (158:12): [True: 49.3k, False: 0]
  |  Branch (158:25): [True: 0, False: 49.3k]
  ------------------
  159|      0|      length--;
  160|      0|    }
  161|  49.3k|  }
_ZNK10fast_float8stackvecILt62EE6rindexEm:
   67|  58.7k|  FASTFLOAT_CONSTEXPR14 const limb &rindex(size_t index) const noexcept {
   68|  58.7k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  200|  58.7k|  { ((void)(x)); }
  ------------------
   69|  58.7k|    size_t rindex = length - index - 1;
   70|  58.7k|    return data[rindex];
   71|  58.7k|  }
_ZN10fast_float6bigint4pow2Ej:
  596|  48.9k|  FASTFLOAT_CONSTEXPR20 bool pow2(uint32_t exp) noexcept { return shl(exp); }
_ZN10fast_float6bigint3shlEm:
  558|  48.9k|  FASTFLOAT_CONSTEXPR20 bool shl(size_t n) noexcept {
  559|  48.9k|    size_t rem = n % limb_bits;
  560|  48.9k|    size_t div = n / limb_bits;
  561|  48.9k|    if (rem != 0) {
  ------------------
  |  Branch (561:9): [True: 45.8k, False: 3.07k]
  ------------------
  562|  45.8k|      FASTFLOAT_TRY(shl_bits(rem));
  ------------------
  |  |  205|  45.8k|  {                                                                            \
  |  |  206|  45.8k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (206:9): [True: 0, False: 45.8k]
  |  |  ------------------
  |  |  207|  45.8k|      return false;                                                            \
  |  |  208|  45.8k|  }
  ------------------
  563|  45.8k|    }
  564|  48.9k|    if (div != 0) {
  ------------------
  |  Branch (564:9): [True: 6.58k, False: 42.3k]
  ------------------
  565|  6.58k|      FASTFLOAT_TRY(shl_limbs(div));
  ------------------
  |  |  205|  6.58k|  {                                                                            \
  |  |  206|  6.58k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (206:9): [True: 0, False: 6.58k]
  |  |  ------------------
  |  |  207|  6.58k|      return false;                                                            \
  |  |  208|  6.58k|  }
  ------------------
  566|  6.58k|    }
  567|  48.9k|    return true;
  568|  48.9k|  }
_ZN10fast_float6bigint8shl_bitsEm:
  511|  45.8k|  FASTFLOAT_CONSTEXPR20 bool shl_bits(size_t n) noexcept {
  512|       |    // Internally, for each item, we shift left by n, and add the previous
  513|       |    // right shifted limb-bits.
  514|       |    // For example, we transform (for u8) shifted left 2, to:
  515|       |    //      b10100100 b01000010
  516|       |    //      b10 b10010001 b00001000
  517|  45.8k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  200|  45.8k|  { ((void)(x)); }
  ------------------
  518|  45.8k|    FASTFLOAT_DEBUG_ASSERT(n < sizeof(limb) * 8);
  ------------------
  |  |  200|  45.8k|  { ((void)(x)); }
  ------------------
  519|       |
  520|  45.8k|    size_t shl = n;
  521|  45.8k|    size_t shr = limb_bits - shl;
  522|  45.8k|    limb prev = 0;
  523|   156k|    for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (523:28): [True: 110k, False: 45.8k]
  ------------------
  524|   110k|      limb xi = vec[index];
  525|   110k|      vec[index] = (xi << shl) | (prev >> shr);
  526|   110k|      prev = xi;
  527|   110k|    }
  528|       |
  529|  45.8k|    limb carry = prev >> shr;
  530|  45.8k|    if (carry != 0) {
  ------------------
  |  Branch (530:9): [True: 9.62k, False: 36.2k]
  ------------------
  531|  9.62k|      return vec.try_push(carry);
  532|  9.62k|    }
  533|  36.2k|    return true;
  534|  45.8k|  }
_ZN10fast_float6bigint9shl_limbsEm:
  537|  6.58k|  FASTFLOAT_CONSTEXPR20 bool shl_limbs(size_t n) noexcept {
  538|  6.58k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  200|  6.58k|  { ((void)(x)); }
  ------------------
  539|  6.58k|    if (n + vec.len() > vec.capacity()) {
  ------------------
  |  Branch (539:9): [True: 0, False: 6.58k]
  ------------------
  540|      0|      return false;
  541|  6.58k|    } else if (!vec.is_empty()) {
  ------------------
  |  Branch (541:16): [True: 6.58k, False: 0]
  ------------------
  542|       |      // move limbs
  543|  6.58k|      limb *dst = vec.data + n;
  544|  6.58k|      limb const *src = vec.data;
  545|  6.58k|      std::copy_backward(src, src + vec.len(), dst + vec.len());
  546|       |      // fill in empty limbs
  547|  6.58k|      limb *first = vec.data;
  548|  6.58k|      limb *last = first + n;
  549|  6.58k|      ::std::fill(first, last, 0);
  550|  6.58k|      vec.set_len(n + vec.len());
  551|  6.58k|      return true;
  552|  6.58k|    } else {
  553|      0|      return true;
  554|      0|    }
  555|  6.58k|  }
_ZNK10fast_float8stackvecILt62EE8is_emptyEv:
   80|  9.84k|  constexpr bool is_empty() const noexcept { return length == 0; }
_ZNK10fast_float6bigint4hi64ERb:
  457|  3.25k|  FASTFLOAT_CONSTEXPR20 uint64_t hi64(bool &truncated) const noexcept {
  458|  3.25k|#ifdef FASTFLOAT_64BIT_LIMB
  459|  3.25k|    if (vec.len() == 0) {
  ------------------
  |  Branch (459:9): [True: 0, False: 3.25k]
  ------------------
  460|      0|      return empty_hi64(truncated);
  461|  3.25k|    } else if (vec.len() == 1) {
  ------------------
  |  Branch (461:16): [True: 949, False: 2.30k]
  ------------------
  462|    949|      return uint64_hi64(vec.rindex(0), truncated);
  463|  2.30k|    } else {
  464|  2.30k|      uint64_t result = uint64_hi64(vec.rindex(0), vec.rindex(1), truncated);
  465|  2.30k|      truncated |= vec.nonzero(2);
  466|  2.30k|      return result;
  467|  2.30k|    }
  468|       |#else
  469|       |    if (vec.len() == 0) {
  470|       |      return empty_hi64(truncated);
  471|       |    } else if (vec.len() == 1) {
  472|       |      return uint32_hi64(vec.rindex(0), truncated);
  473|       |    } else if (vec.len() == 2) {
  474|       |      return uint32_hi64(vec.rindex(0), vec.rindex(1), truncated);
  475|       |    } else {
  476|       |      uint64_t result =
  477|       |          uint32_hi64(vec.rindex(0), vec.rindex(1), vec.rindex(2), truncated);
  478|       |      truncated |= vec.nonzero(3);
  479|       |      return result;
  480|       |    }
  481|       |#endif
  482|  3.25k|  }
_ZN10fast_float11uint64_hi64EmRb:
  171|    949|uint64_hi64(uint64_t r0, bool &truncated) noexcept {
  172|    949|  truncated = false;
  173|    949|  int shl = leading_zeroes(r0);
  174|    949|  return r0 << shl;
  175|    949|}
_ZN10fast_float11uint64_hi64EmmRb:
  178|  2.30k|uint64_hi64(uint64_t r0, uint64_t r1, bool &truncated) noexcept {
  179|  2.30k|  int shl = leading_zeroes(r0);
  180|  2.30k|  if (shl == 0) {
  ------------------
  |  Branch (180:7): [True: 38, False: 2.27k]
  ------------------
  181|     38|    truncated = r1 != 0;
  182|     38|    return r0;
  183|  2.27k|  } else {
  184|  2.27k|    int shr = 64 - shl;
  185|  2.27k|    truncated = (r1 << shl) != 0;
  186|  2.27k|    return (r0 << shl) | (r1 >> shr);
  187|  2.27k|  }
  188|  2.30k|}
_ZNK10fast_float8stackvecILt62EE7nonzeroEm:
  146|  2.30k|  FASTFLOAT_CONSTEXPR14 bool nonzero(size_t index) const noexcept {
  147|  2.34k|    while (index < len()) {
  ------------------
  |  Branch (147:12): [True: 568, False: 1.78k]
  ------------------
  148|    568|      if (rindex(index) != 0) {
  ------------------
  |  Branch (148:11): [True: 528, False: 40]
  ------------------
  149|    528|        return true;
  150|    528|      }
  151|     40|      index++;
  152|     40|    }
  153|  1.78k|    return false;
  154|  2.30k|  }
_ZNK10fast_float6bigint10bit_lengthEv:
  586|  3.25k|  FASTFLOAT_CONSTEXPR20 int bit_length() const noexcept {
  587|  3.25k|    int lz = ctlz();
  588|  3.25k|    return int(limb_bits * vec.len()) - lz;
  589|  3.25k|  }
_ZNK10fast_float6bigint4ctlzEv:
  571|  3.25k|  FASTFLOAT_CONSTEXPR20 int ctlz() const noexcept {
  572|  3.25k|    if (vec.is_empty()) {
  ------------------
  |  Branch (572:9): [True: 0, False: 3.25k]
  ------------------
  573|      0|      return 0;
  574|  3.25k|    } else {
  575|  3.25k|#ifdef FASTFLOAT_64BIT_LIMB
  576|  3.25k|      return leading_zeroes(vec.rindex(0));
  577|       |#else
  578|       |      // no use defining a specialized leading_zeroes for a 32-bit type.
  579|       |      uint64_t r0 = vec.rindex(0);
  580|       |      return leading_zeroes(r0 << 32);
  581|       |#endif
  582|  3.25k|    }
  583|  3.25k|  }
_ZN10fast_float6bigintC2Em:
  445|  45.7k|  FASTFLOAT_CONSTEXPR20 bigint(uint64_t value) : vec() {
  446|  45.7k|#ifdef FASTFLOAT_64BIT_LIMB
  447|  45.7k|    vec.push_unchecked(value);
  448|       |#else
  449|       |    vec.push_unchecked(uint32_t(value));
  450|       |    vec.push_unchecked(uint32_t(value >> 32));
  451|       |#endif
  452|  45.7k|    vec.normalize();
  453|  45.7k|  }
_ZNK10fast_float6bigint7compareERKS0_:
  490|  45.7k|  FASTFLOAT_CONSTEXPR20 int compare(bigint const &other) const noexcept {
  491|  45.7k|    if (vec.len() > other.vec.len()) {
  ------------------
  |  Branch (491:9): [True: 0, False: 45.7k]
  ------------------
  492|      0|      return 1;
  493|  45.7k|    } else if (vec.len() < other.vec.len()) {
  ------------------
  |  Branch (493:16): [True: 0, False: 45.7k]
  ------------------
  494|      0|      return -1;
  495|  45.7k|    } else {
  496|  90.0k|      for (size_t index = vec.len(); index > 0; index--) {
  ------------------
  |  Branch (496:38): [True: 86.3k, False: 3.72k]
  ------------------
  497|  86.3k|        limb xi = vec[index - 1];
  498|  86.3k|        limb yi = other.vec[index - 1];
  499|  86.3k|        if (xi > yi) {
  ------------------
  |  Branch (499:13): [True: 11.5k, False: 74.7k]
  ------------------
  500|  11.5k|          return 1;
  501|  74.7k|        } else if (xi < yi) {
  ------------------
  |  Branch (501:20): [True: 30.5k, False: 44.2k]
  ------------------
  502|  30.5k|          return -1;
  503|  30.5k|        }
  504|  86.3k|      }
  505|  3.72k|      return 0;
  506|  45.7k|    }
  507|  45.7k|  }
_ZNK10fast_float8stackvecILt62EEixEm:
   61|   172k|  FASTFLOAT_CONSTEXPR14 const limb &operator[](size_t index) const noexcept {
   62|   172k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  200|   172k|  { ((void)(x)); }
  ------------------
   63|   172k|    return data[index];
   64|   172k|  }

_ZN10fast_float13compute_floatINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
  103|   190k|compute_float(int64_t q, uint64_t w) noexcept {
  104|   190k|  adjusted_mantissa answer;
  105|   190k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (105:7): [True: 3.37k, False: 187k]
  |  Branch (105:19): [True: 1.29k, False: 185k]
  ------------------
  106|  4.66k|    answer.power2 = 0;
  107|  4.66k|    answer.mantissa = 0;
  108|       |    // result should be zero
  109|  4.66k|    return answer;
  110|  4.66k|  }
  111|   185k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (111:7): [True: 7.46k, False: 178k]
  ------------------
  112|       |    // we want to get infinity:
  113|  7.46k|    answer.power2 = binary::infinite_power();
  114|  7.46k|    answer.mantissa = 0;
  115|  7.46k|    return answer;
  116|  7.46k|  }
  117|       |  // At this point in time q is in [powers::smallest_power_of_five,
  118|       |  // powers::largest_power_of_five].
  119|       |
  120|       |  // We want the most significant bit of i to be 1. Shift if needed.
  121|   178k|  int lz = leading_zeroes(w);
  122|   178k|  w <<= lz;
  123|       |
  124|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  125|       |  // 1. We need the implicit bit
  126|       |  // 2. We need an extra bit for rounding purposes
  127|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small,
  128|       |  // requiring a shift)
  129|       |
  130|   178k|  value128 product =
  131|   178k|      compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  132|       |  // The computed 'product' is always sufficient.
  133|       |  // Mathematical proof:
  134|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to
  135|       |  // appear) See script/mushtak_lemire.py
  136|       |
  137|       |  // The "compute_product_approximation" function can be slightly slower than a
  138|       |  // branchless approach: value128 product = compute_product(q, w); but in
  139|       |  // practice, we can win big with the compute_product_approximation if its
  140|       |  // additional branch is easily predicted. Which is best is data specific.
  141|   178k|  int upperbit = int(product.high >> 63);
  142|   178k|  int shift = upperbit + 64 - binary::mantissa_explicit_bits() - 3;
  143|       |
  144|   178k|  answer.mantissa = product.high >> shift;
  145|       |
  146|   178k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz -
  147|   178k|                          binary::minimum_exponent());
  148|   178k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (148:7): [True: 980, False: 177k]
  ------------------
  149|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  150|    980|    if (-answer.power2 + 1 >=
  ------------------
  |  Branch (150:9): [True: 88, False: 892]
  ------------------
  151|    980|        64) { // if we have more than 64 bits below the minimum exponent, you
  152|       |              // have a zero for sure.
  153|     88|      answer.power2 = 0;
  154|     88|      answer.mantissa = 0;
  155|       |      // result should be zero
  156|     88|      return answer;
  157|     88|    }
  158|       |    // next line is safe because -answer.power2 + 1 < 64
  159|    892|    answer.mantissa >>= -answer.power2 + 1;
  160|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  161|       |    // "round-to-even" only occurs for powers close to 0 in the 32-bit and
  162|       |    // and 64-bit case (with no more than 19 digits).
  163|    892|    answer.mantissa += (answer.mantissa & 1); // round up
  164|    892|    answer.mantissa >>= 1;
  165|       |    // There is a weird scenario where we don't have a subnormal but just.
  166|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  167|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  168|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  169|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  170|       |    // subnormal, but we can only know this after rounding.
  171|       |    // So we only declare a subnormal if we are smaller than the threshold.
  172|    892|    answer.power2 =
  173|    892|        (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits()))
  ------------------
  |  Branch (173:9): [True: 892, False: 0]
  ------------------
  174|    892|            ? 0
  175|    892|            : 1;
  176|    892|    return answer;
  177|    980|  }
  178|       |
  179|       |  // usually, we round *up*, but if we fall right in between and and we have an
  180|       |  // even basis, we need to round down
  181|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  182|   177k|  if ((product.low <= 1) && (q >= binary::min_exponent_round_to_even()) &&
  ------------------
  |  Branch (182:7): [True: 59.1k, False: 118k]
  |  Branch (182:29): [True: 57.4k, False: 1.65k]
  ------------------
  183|   177k|      (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (183:7): [True: 52.8k, False: 4.63k]
  ------------------
  184|   177k|      ((answer.mantissa & 3) == 1)) { // we may fall between two floats!
  ------------------
  |  Branch (184:7): [True: 7.75k, False: 45.0k]
  ------------------
  185|       |    // To be in-between two floats we need that in doing
  186|       |    //   answer.mantissa = product.high >> (upperbit + 64 -
  187|       |    //   binary::mantissa_explicit_bits() - 3);
  188|       |    // ... we dropped out only zeroes. But if this happened, then we can go
  189|       |    // back!!!
  190|  7.75k|    if ((answer.mantissa << shift) == product.high) {
  ------------------
  |  Branch (190:9): [True: 3.88k, False: 3.86k]
  ------------------
  191|  3.88k|      answer.mantissa &= ~uint64_t(1); // flip it so that we do not round up
  192|  3.88k|    }
  193|  7.75k|  }
  194|       |
  195|   177k|  answer.mantissa += (answer.mantissa & 1); // round up
  196|   177k|  answer.mantissa >>= 1;
  197|   177k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (197:7): [True: 10.9k, False: 166k]
  ------------------
  198|  10.9k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  199|  10.9k|    answer.power2++; // undo previous addition
  200|  10.9k|  }
  201|       |
  202|   177k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  203|   177k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (203:7): [True: 1.16k, False: 176k]
  ------------------
  204|  1.16k|    answer.power2 = binary::infinite_power();
  205|  1.16k|    answer.mantissa = 0;
  206|  1.16k|  }
  207|   177k|  return answer;
  208|   178k|}
_ZN10fast_float29compute_product_approximationILi26EEENS_8value128Elm:
   22|   197k|compute_product_approximation(int64_t q, uint64_t w) {
   23|   197k|  int const index = 2 * int(q - powers::smallest_power_of_five);
   24|       |  // For small values of q, e.g., q in [0,27], the answer is always exact
   25|       |  // because The line value128 firstproduct = full_multiplication(w,
   26|       |  // power_of_five_128[index]); gives the exact answer.
   27|   197k|  value128 firstproduct =
   28|   197k|      full_multiplication(w, powers::power_of_five_128[index]);
   29|   197k|  static_assert((bit_precision >= 0) && (bit_precision <= 64),
   30|   197k|                " precision should  be in (0,64]");
   31|   197k|  constexpr uint64_t precision_mask =
   32|   197k|      (bit_precision < 64) ? (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
  ------------------
  |  Branch (32:7): [Folded - Ignored]
  ------------------
   33|   197k|                           : uint64_t(0xFFFFFFFFFFFFFFFF);
   34|   197k|  if ((firstproduct.high & precision_mask) ==
  ------------------
  |  Branch (34:7): [True: 37.0k, False: 160k]
  ------------------
   35|   197k|      precision_mask) { // could further guard with  (lower + w < lower)
   36|       |    // regarding the second product, we only need secondproduct.high, but our
   37|       |    // expectation is that the compiler will optimize this extra work away if
   38|       |    // needed.
   39|  37.0k|    value128 secondproduct =
   40|  37.0k|        full_multiplication(w, powers::power_of_five_128[index + 1]);
   41|  37.0k|    firstproduct.low += secondproduct.high;
   42|  37.0k|    if (secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (42:9): [True: 26.9k, False: 10.1k]
  ------------------
   43|  26.9k|      firstproduct.high++;
   44|  26.9k|    }
   45|  37.0k|  }
   46|   197k|  return firstproduct;
   47|   197k|}
_ZN10fast_float6detail5powerEi:
   65|   398k|constexpr fastfloat_really_inline int32_t power(int32_t q) noexcept {
   66|   398k|  return (((152170 + 65536) * q) >> 16) + 63;
   67|   398k|}
_ZN10fast_float13compute_errorINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   88|  18.9k|compute_error(int64_t q, uint64_t w) noexcept {
   89|  18.9k|  int lz = leading_zeroes(w);
   90|  18.9k|  w <<= lz;
   91|  18.9k|  value128 product =
   92|  18.9k|      compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   93|  18.9k|  return compute_error_scaled<binary>(q, product.high, lz);
   94|  18.9k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIfEEEENS_17adjusted_mantissaElmi:
   74|  18.9k|compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept {
   75|  18.9k|  int hilz = int(w >> 63) ^ 1;
   76|  18.9k|  adjusted_mantissa answer;
   77|  18.9k|  answer.mantissa = w << hilz;
   78|  18.9k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   79|  18.9k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 +
   80|  18.9k|                          invalid_am_bias);
   81|  18.9k|  return answer;
   82|  18.9k|}
_ZN10fast_float13compute_floatINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
  103|   178k|compute_float(int64_t q, uint64_t w) noexcept {
  104|   178k|  adjusted_mantissa answer;
  105|   178k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (105:7): [True: 3.18k, False: 174k]
  |  Branch (105:19): [True: 371, False: 174k]
  ------------------
  106|  3.55k|    answer.power2 = 0;
  107|  3.55k|    answer.mantissa = 0;
  108|       |    // result should be zero
  109|  3.55k|    return answer;
  110|  3.55k|  }
  111|   174k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (111:7): [True: 3.86k, False: 170k]
  ------------------
  112|       |    // we want to get infinity:
  113|  3.86k|    answer.power2 = binary::infinite_power();
  114|  3.86k|    answer.mantissa = 0;
  115|  3.86k|    return answer;
  116|  3.86k|  }
  117|       |  // At this point in time q is in [powers::smallest_power_of_five,
  118|       |  // powers::largest_power_of_five].
  119|       |
  120|       |  // We want the most significant bit of i to be 1. Shift if needed.
  121|   170k|  int lz = leading_zeroes(w);
  122|   170k|  w <<= lz;
  123|       |
  124|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  125|       |  // 1. We need the implicit bit
  126|       |  // 2. We need an extra bit for rounding purposes
  127|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small,
  128|       |  // requiring a shift)
  129|       |
  130|   170k|  value128 product =
  131|   170k|      compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  132|       |  // The computed 'product' is always sufficient.
  133|       |  // Mathematical proof:
  134|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to
  135|       |  // appear) See script/mushtak_lemire.py
  136|       |
  137|       |  // The "compute_product_approximation" function can be slightly slower than a
  138|       |  // branchless approach: value128 product = compute_product(q, w); but in
  139|       |  // practice, we can win big with the compute_product_approximation if its
  140|       |  // additional branch is easily predicted. Which is best is data specific.
  141|   170k|  int upperbit = int(product.high >> 63);
  142|   170k|  int shift = upperbit + 64 - binary::mantissa_explicit_bits() - 3;
  143|       |
  144|   170k|  answer.mantissa = product.high >> shift;
  145|       |
  146|   170k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz -
  147|   170k|                          binary::minimum_exponent());
  148|   170k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (148:7): [True: 2.77k, False: 167k]
  ------------------
  149|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  150|  2.77k|    if (-answer.power2 + 1 >=
  ------------------
  |  Branch (150:9): [True: 88, False: 2.68k]
  ------------------
  151|  2.77k|        64) { // if we have more than 64 bits below the minimum exponent, you
  152|       |              // have a zero for sure.
  153|     88|      answer.power2 = 0;
  154|     88|      answer.mantissa = 0;
  155|       |      // result should be zero
  156|     88|      return answer;
  157|     88|    }
  158|       |    // next line is safe because -answer.power2 + 1 < 64
  159|  2.68k|    answer.mantissa >>= -answer.power2 + 1;
  160|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  161|       |    // "round-to-even" only occurs for powers close to 0 in the 32-bit and
  162|       |    // and 64-bit case (with no more than 19 digits).
  163|  2.68k|    answer.mantissa += (answer.mantissa & 1); // round up
  164|  2.68k|    answer.mantissa >>= 1;
  165|       |    // There is a weird scenario where we don't have a subnormal but just.
  166|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  167|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  168|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  169|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  170|       |    // subnormal, but we can only know this after rounding.
  171|       |    // So we only declare a subnormal if we are smaller than the threshold.
  172|  2.68k|    answer.power2 =
  173|  2.68k|        (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits()))
  ------------------
  |  Branch (173:9): [True: 2.68k, False: 0]
  ------------------
  174|  2.68k|            ? 0
  175|  2.68k|            : 1;
  176|  2.68k|    return answer;
  177|  2.77k|  }
  178|       |
  179|       |  // usually, we round *up*, but if we fall right in between and and we have an
  180|       |  // even basis, we need to round down
  181|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  182|   167k|  if ((product.low <= 1) && (q >= binary::min_exponent_round_to_even()) &&
  ------------------
  |  Branch (182:7): [True: 48.6k, False: 119k]
  |  Branch (182:29): [True: 27.3k, False: 21.3k]
  ------------------
  183|   167k|      (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (183:7): [True: 22.7k, False: 4.58k]
  ------------------
  184|   167k|      ((answer.mantissa & 3) == 1)) { // we may fall between two floats!
  ------------------
  |  Branch (184:7): [True: 4.81k, False: 17.9k]
  ------------------
  185|       |    // To be in-between two floats we need that in doing
  186|       |    //   answer.mantissa = product.high >> (upperbit + 64 -
  187|       |    //   binary::mantissa_explicit_bits() - 3);
  188|       |    // ... we dropped out only zeroes. But if this happened, then we can go
  189|       |    // back!!!
  190|  4.81k|    if ((answer.mantissa << shift) == product.high) {
  ------------------
  |  Branch (190:9): [True: 3.70k, False: 1.11k]
  ------------------
  191|  3.70k|      answer.mantissa &= ~uint64_t(1); // flip it so that we do not round up
  192|  3.70k|    }
  193|  4.81k|  }
  194|       |
  195|   167k|  answer.mantissa += (answer.mantissa & 1); // round up
  196|   167k|  answer.mantissa >>= 1;
  197|   167k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (197:7): [True: 10.1k, False: 157k]
  ------------------
  198|  10.1k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  199|  10.1k|    answer.power2++; // undo previous addition
  200|  10.1k|  }
  201|       |
  202|   167k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  203|   167k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (203:7): [True: 336, False: 167k]
  ------------------
  204|    336|    answer.power2 = binary::infinite_power();
  205|    336|    answer.mantissa = 0;
  206|    336|  }
  207|   167k|  return answer;
  208|   170k|}
_ZN10fast_float29compute_product_approximationILi55EEENS_8value128Elm:
   22|   200k|compute_product_approximation(int64_t q, uint64_t w) {
   23|   200k|  int const index = 2 * int(q - powers::smallest_power_of_five);
   24|       |  // For small values of q, e.g., q in [0,27], the answer is always exact
   25|       |  // because The line value128 firstproduct = full_multiplication(w,
   26|       |  // power_of_five_128[index]); gives the exact answer.
   27|   200k|  value128 firstproduct =
   28|   200k|      full_multiplication(w, powers::power_of_five_128[index]);
   29|   200k|  static_assert((bit_precision >= 0) && (bit_precision <= 64),
   30|   200k|                " precision should  be in (0,64]");
   31|   200k|  constexpr uint64_t precision_mask =
   32|   200k|      (bit_precision < 64) ? (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
  ------------------
  |  Branch (32:7): [Folded - Ignored]
  ------------------
   33|   200k|                           : uint64_t(0xFFFFFFFFFFFFFFFF);
   34|   200k|  if ((firstproduct.high & precision_mask) ==
  ------------------
  |  Branch (34:7): [True: 78.8k, False: 121k]
  ------------------
   35|   200k|      precision_mask) { // could further guard with  (lower + w < lower)
   36|       |    // regarding the second product, we only need secondproduct.high, but our
   37|       |    // expectation is that the compiler will optimize this extra work away if
   38|       |    // needed.
   39|  78.8k|    value128 secondproduct =
   40|  78.8k|        full_multiplication(w, powers::power_of_five_128[index + 1]);
   41|  78.8k|    firstproduct.low += secondproduct.high;
   42|  78.8k|    if (secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (42:9): [True: 24.5k, False: 54.3k]
  ------------------
   43|  24.5k|      firstproduct.high++;
   44|  24.5k|    }
   45|  78.8k|  }
   46|   200k|  return firstproduct;
   47|   200k|}
_ZN10fast_float13compute_errorINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   88|  30.0k|compute_error(int64_t q, uint64_t w) noexcept {
   89|  30.0k|  int lz = leading_zeroes(w);
   90|  30.0k|  w <<= lz;
   91|  30.0k|  value128 product =
   92|  30.0k|      compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   93|  30.0k|  return compute_error_scaled<binary>(q, product.high, lz);
   94|  30.0k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIdEEEENS_17adjusted_mantissaElmi:
   74|  30.0k|compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept {
   75|  30.0k|  int hilz = int(w >> 63) ^ 1;
   76|  30.0k|  adjusted_mantissa answer;
   77|  30.0k|  answer.mantissa = w << hilz;
   78|  30.0k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   79|  30.0k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 +
   80|  30.0k|                          invalid_am_bias);
   81|  30.0k|  return answer;
   82|  30.0k|}

_ZN10fast_float10digit_compIfcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  437|  18.9k|digit_comp(parsed_number_string_t<UC> &num, adjusted_mantissa am) noexcept {
  438|       |  // remove the invalid exponent bias
  439|  18.9k|  am.power2 -= invalid_am_bias;
  440|       |
  441|  18.9k|  int32_t sci_exp = scientific_exponent(num);
  442|  18.9k|  size_t max_digits = binary_format<T>::max_digits();
  443|  18.9k|  size_t digits = 0;
  444|  18.9k|  bigint bigmant;
  445|  18.9k|  parse_mantissa(bigmant, num, max_digits, digits);
  446|       |  // can't underflow, since digits is at most max_digits.
  447|  18.9k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  448|  18.9k|  if (exponent >= 0) {
  ------------------
  |  Branch (448:7): [True: 514, False: 18.4k]
  ------------------
  449|    514|    return positive_digit_comp<T>(bigmant, exponent);
  450|  18.4k|  } else {
  451|  18.4k|    return negative_digit_comp<T>(bigmant, am, exponent);
  452|  18.4k|  }
  453|  18.9k|}
_ZN10fast_float19scientific_exponentIcEEiRNS_22parsed_number_string_tIT_EE:
   43|  48.8k|scientific_exponent(parsed_number_string_t<UC> &num) noexcept {
   44|  48.8k|  uint64_t mantissa = num.mantissa;
   45|  48.8k|  int32_t exponent = int32_t(num.exponent);
   46|   244k|  while (mantissa >= 10000) {
  ------------------
  |  Branch (46:10): [True: 195k, False: 48.8k]
  ------------------
   47|   195k|    mantissa /= 10000;
   48|   195k|    exponent += 4;
   49|   195k|  }
   50|  97.7k|  while (mantissa >= 100) {
  ------------------
  |  Branch (50:10): [True: 48.8k, False: 48.8k]
  ------------------
   51|  48.8k|    mantissa /= 100;
   52|  48.8k|    exponent += 2;
   53|  48.8k|  }
   54|  48.8k|  while (mantissa >= 10) {
  ------------------
  |  Branch (54:10): [True: 0, False: 48.8k]
  ------------------
   55|      0|    mantissa /= 10;
   56|      0|    exponent += 1;
   57|      0|  }
   58|  48.8k|  return exponent;
   59|  48.8k|}
_ZN10fast_float14parse_mantissaIcEEvRNS_6bigintERNS_22parsed_number_string_tIT_EEmRm:
  262|  48.8k|               size_t max_digits, size_t &digits) noexcept {
  263|       |  // try to minimize the number of big integer and scalar multiplication.
  264|       |  // therefore, try to parse 8 digits at a time, and multiply by the largest
  265|       |  // scalar value (9 or 19 digits) for each step.
  266|  48.8k|  size_t counter = 0;
  267|  48.8k|  digits = 0;
  268|  48.8k|  limb value = 0;
  269|  48.8k|#ifdef FASTFLOAT_64BIT_LIMB
  270|  48.8k|  size_t step = 19;
  271|       |#else
  272|       |  size_t step = 9;
  273|       |#endif
  274|       |
  275|       |  // process all integer digits.
  276|  48.8k|  UC const *p = num.integer.ptr;
  277|  48.8k|  UC const *pend = p + num.integer.len();
  278|  48.8k|  skip_zeros(p, pend);
  279|       |  // process all digits, in increments of step per loop
  280|   108k|  while (p != pend) {
  ------------------
  |  Branch (280:10): [True: 60.3k, False: 48.5k]
  ------------------
  281|   102k|    while ((std::distance(p, pend) >= 8) && (step - counter >= 8) &&
  ------------------
  |  Branch (281:12): [True: 54.0k, False: 48.1k]
  |  Branch (281:45): [True: 42.0k, False: 11.9k]
  ------------------
  282|   102k|           (max_digits - digits >= 8)) {
  ------------------
  |  Branch (282:12): [True: 41.7k, False: 257]
  ------------------
  283|  41.7k|      parse_eight_digits(p, value, counter, digits);
  284|  41.7k|    }
  285|   188k|    while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (285:12): [True: 174k, False: 14.2k]
  |  Branch (285:30): [True: 128k, False: 45.8k]
  |  Branch (285:43): [True: 128k, False: 257]
  ------------------
  286|   128k|      parse_one_digit(p, value, counter, digits);
  287|   128k|    }
  288|  60.3k|    if (digits == max_digits) {
  ------------------
  |  Branch (288:9): [True: 257, False: 60.0k]
  ------------------
  289|       |      // add the temporary value, then check if we've truncated any digits
  290|    257|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  291|    257|      bool truncated = is_truncated(p, pend);
  292|    257|      if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (292:11): [True: 219, False: 38]
  ------------------
  293|    219|        truncated |= is_truncated(num.fraction);
  294|    219|      }
  295|    257|      if (truncated) {
  ------------------
  |  Branch (295:11): [True: 153, False: 104]
  ------------------
  296|    153|        round_up_bigint(result, digits);
  297|    153|      }
  298|    257|      return;
  299|  60.0k|    } else {
  300|  60.0k|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  301|  60.0k|      counter = 0;
  302|  60.0k|      value = 0;
  303|  60.0k|    }
  304|  60.3k|  }
  305|       |
  306|       |  // add our fraction digits, if they're available.
  307|  48.5k|  if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (307:7): [True: 45.7k, False: 2.83k]
  ------------------
  308|  45.7k|    p = num.fraction.ptr;
  309|  45.7k|    pend = p + num.fraction.len();
  310|  45.7k|    if (digits == 0) {
  ------------------
  |  Branch (310:9): [True: 2.75k, False: 43.0k]
  ------------------
  311|  2.75k|      skip_zeros(p, pend);
  312|  2.75k|    }
  313|       |    // process all digits, in increments of step per loop
  314|   152k|    while (p != pend) {
  ------------------
  |  Branch (314:12): [True: 110k, False: 42.8k]
  ------------------
  315|   265k|      while ((std::distance(p, pend) >= 8) && (step - counter >= 8) &&
  ------------------
  |  Branch (315:14): [True: 209k, False: 55.7k]
  |  Branch (315:47): [True: 156k, False: 52.9k]
  ------------------
  316|   265k|             (max_digits - digits >= 8)) {
  ------------------
  |  Branch (316:14): [True: 155k, False: 1.34k]
  ------------------
  317|   155k|        parse_eight_digits(p, value, counter, digits);
  318|   155k|      }
  319|   457k|      while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (319:14): [True: 391k, False: 65.8k]
  |  Branch (319:32): [True: 349k, False: 41.9k]
  |  Branch (319:45): [True: 347k, False: 2.30k]
  ------------------
  320|   347k|        parse_one_digit(p, value, counter, digits);
  321|   347k|      }
  322|   110k|      if (digits == max_digits) {
  ------------------
  |  Branch (322:11): [True: 2.87k, False: 107k]
  ------------------
  323|       |        // add the temporary value, then check if we've truncated any digits
  324|  2.87k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  325|  2.87k|        bool truncated = is_truncated(p, pend);
  326|  2.87k|        if (truncated) {
  ------------------
  |  Branch (326:13): [True: 2.03k, False: 849]
  ------------------
  327|  2.03k|          round_up_bigint(result, digits);
  328|  2.03k|        }
  329|  2.87k|        return;
  330|   107k|      } else {
  331|   107k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  332|   107k|        counter = 0;
  333|   107k|        value = 0;
  334|   107k|      }
  335|   110k|    }
  336|  45.7k|  }
  337|       |
  338|  45.7k|  if (counter != 0) {
  ------------------
  |  Branch (338:7): [True: 0, False: 45.7k]
  ------------------
  339|      0|    add_native(result, limb(powers_of_ten_uint64[counter]), value);
  340|      0|  }
  341|  45.7k|}
_ZN10fast_float10skip_zerosIcEEvRPKT_S3_:
  176|  51.6k|skip_zeros(UC const *&first, UC const *last) noexcept {
  177|  51.6k|  uint64_t val;
  178|  63.7k|  while (!cpp20_and_in_constexpr() &&
  ------------------
  |  Branch (178:10): [Folded - Ignored]
  ------------------
  179|  63.7k|         std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (179:10): [True: 29.9k, False: 33.7k]
  ------------------
  180|  29.9k|    ::memcpy(&val, first, sizeof(uint64_t));
  181|  29.9k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (181:9): [True: 17.8k, False: 12.1k]
  ------------------
  182|  17.8k|      break;
  183|  17.8k|    }
  184|  12.1k|    first += int_cmp_len<UC>();
  185|  12.1k|  }
  186|  95.9k|  while (first != last) {
  ------------------
  |  Branch (186:10): [True: 93.2k, False: 2.75k]
  ------------------
  187|  93.2k|    if (*first != UC('0')) {
  ------------------
  |  Branch (187:9): [True: 48.8k, False: 44.3k]
  ------------------
  188|  48.8k|      break;
  189|  48.8k|    }
  190|  44.3k|    first++;
  191|  44.3k|  }
  192|  51.6k|}
_ZN10fast_float18parse_eight_digitsIcEEvRPKT_RmS5_S5_:
  227|   197k|                   size_t &count) noexcept {
  228|   197k|  value = value * 100000000 + parse_eight_digits_unrolled(p);
  229|   197k|  p += 8;
  230|   197k|  counter += 8;
  231|   197k|  count += 8;
  232|   197k|}
_ZN10fast_float15parse_one_digitIcEEvRPKT_RmS5_S5_:
  237|   475k|                size_t &count) noexcept {
  238|   475k|  value = value * 10 + limb(*p - UC('0'));
  239|   475k|  p++;
  240|   475k|  counter++;
  241|   475k|  count++;
  242|   475k|}
_ZN10fast_float10add_nativeERNS_6bigintEmm:
  245|   173k|add_native(bigint &big, limb power, limb value) noexcept {
  246|   173k|  big.mul(power);
  247|   173k|  big.add(value);
  248|   173k|}
_ZN10fast_float12is_truncatedIcEEbPKT_S3_:
  198|  3.35k|is_truncated(UC const *first, UC const *last) noexcept {
  199|       |  // do 8-bit optimizations, can just compare to 8 literal 0s.
  200|  3.35k|  uint64_t val;
  201|  6.09k|  while (!cpp20_and_in_constexpr() &&
  ------------------
  |  Branch (201:10): [Folded - Ignored]
  ------------------
  202|  6.09k|         std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (202:10): [True: 3.80k, False: 2.28k]
  ------------------
  203|  3.80k|    ::memcpy(&val, first, sizeof(uint64_t));
  204|  3.80k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (204:9): [True: 1.06k, False: 2.74k]
  ------------------
  205|  1.06k|      return true;
  206|  1.06k|    }
  207|  2.74k|    first += int_cmp_len<UC>();
  208|  2.74k|  }
  209|  3.90k|  while (first != last) {
  ------------------
  |  Branch (209:10): [True: 2.81k, False: 1.08k]
  ------------------
  210|  2.81k|    if (*first != UC('0')) {
  ------------------
  |  Branch (210:9): [True: 1.19k, False: 1.61k]
  ------------------
  211|  1.19k|      return true;
  212|  1.19k|    }
  213|  1.61k|    ++first;
  214|  1.61k|  }
  215|  1.08k|  return false;
  216|  2.28k|}
_ZN10fast_float12is_truncatedIcEEbNS_4spanIKT_EE:
  220|    219|is_truncated(span<UC const> s) noexcept {
  221|    219|  return is_truncated(s.ptr, s.ptr + s.len());
  222|    219|}
_ZN10fast_float15round_up_bigintERNS_6bigintERm:
  251|  2.18k|round_up_bigint(bigint &big, size_t &count) noexcept {
  252|       |  // need to round-up the digits, but need to avoid rounding
  253|       |  // ....9999 to ...10000, which could cause a false halfway point.
  254|  2.18k|  add_native(big, 10, 1);
  255|  2.18k|  count++;
  256|  2.18k|}
_ZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEi:
  345|    514|positive_digit_comp(bigint &bigmant, int32_t exponent) noexcept {
  346|    514|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  195|    514|  { ((void)(x)); }
  ------------------
  347|    514|  adjusted_mantissa answer;
  348|    514|  bool truncated;
  349|    514|  answer.mantissa = bigmant.hi64(truncated);
  350|    514|  int bias = binary_format<T>::mantissa_explicit_bits() -
  351|    514|             binary_format<T>::minimum_exponent();
  352|    514|  answer.power2 = bigmant.bit_length() - 64 + bias;
  353|       |
  354|    514|  round<T>(answer, [truncated](adjusted_mantissa &a, int32_t shift) {
  355|    514|    round_nearest_tie_even(
  356|    514|        a, shift,
  357|    514|        [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  358|    514|          return is_above || (is_halfway && truncated) ||
  359|    514|                 (is_odd && is_halfway);
  360|    514|        });
  361|    514|  });
  362|       |
  363|    514|  return answer;
  364|    514|}
_ZN10fast_float5roundIfZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
  110|    514|                                                         callback cb) noexcept {
  111|    514|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
  112|    514|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (112:7): [True: 0, False: 514]
  ------------------
  113|       |    // have a denormal float
  114|      0|    int32_t shift = -am.power2 + 1;
  115|      0|    cb(am, std::min<int32_t>(shift, 64));
  116|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  117|      0|    am.power2 = (am.mantissa <
  ------------------
  |  Branch (117:17): [True: 0, False: 0]
  ------------------
  118|      0|                 (uint64_t(1) << binary_format<T>::mantissa_explicit_bits()))
  119|      0|                    ? 0
  120|      0|                    : 1;
  121|      0|    return;
  122|      0|  }
  123|       |
  124|       |  // have a normal float, use the default shift.
  125|    514|  cb(am, mantissa_shift);
  126|       |
  127|       |  // check for carry
  128|    514|  if (am.mantissa >=
  ------------------
  |  Branch (128:7): [True: 0, False: 514]
  ------------------
  129|    514|      (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  130|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  131|      0|    am.power2++;
  132|      0|  }
  133|       |
  134|       |  // check for infinite: we could have carried to an infinite power
  135|    514|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  136|    514|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (136:7): [True: 0, False: 514]
  ------------------
  137|      0|    am.power2 = binary_format<T>::infinite_power();
  138|      0|    am.mantissa = 0;
  139|      0|  }
  140|    514|}
_ZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  354|    514|  round<T>(answer, [truncated](adjusted_mantissa &a, int32_t shift) {
  355|    514|    round_nearest_tie_even(
  356|    514|        a, shift,
  357|    514|        [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  358|    514|          return is_above || (is_halfway && truncated) ||
  359|    514|                 (is_odd && is_halfway);
  360|    514|        });
  361|    514|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  145|    514|                       callback cb) noexcept {
  146|    514|  uint64_t const mask = (shift == 64) ? UINT64_MAX : (uint64_t(1) << shift) - 1;
  ------------------
  |  Branch (146:25): [True: 0, False: 514]
  ------------------
  147|    514|  uint64_t const halfway = (shift == 0) ? 0 : uint64_t(1) << (shift - 1);
  ------------------
  |  Branch (147:28): [True: 0, False: 514]
  ------------------
  148|    514|  uint64_t truncated_bits = am.mantissa & mask;
  149|    514|  bool is_above = truncated_bits > halfway;
  150|    514|  bool is_halfway = truncated_bits == halfway;
  151|       |
  152|       |  // shift digits into position
  153|    514|  if (shift == 64) {
  ------------------
  |  Branch (153:7): [True: 0, False: 514]
  ------------------
  154|      0|    am.mantissa = 0;
  155|    514|  } else {
  156|    514|    am.mantissa >>= shift;
  157|    514|  }
  158|    514|  am.power2 += shift;
  159|       |
  160|    514|  bool is_odd = (am.mantissa & 1) == 1;
  161|    514|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  162|    514|}
_ZZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  357|    514|        [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  358|    514|          return is_above || (is_halfway && truncated) ||
  ------------------
  |  Branch (358:18): [True: 74, False: 440]
  |  Branch (358:31): [True: 348, False: 92]
  |  Branch (358:45): [True: 58, False: 290]
  ------------------
  359|    514|                 (is_odd && is_halfway);
  ------------------
  |  Branch (359:19): [True: 56, False: 326]
  |  Branch (359:29): [True: 32, False: 24]
  ------------------
  360|    514|        });
_ZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_i:
  373|  18.4k|    bigint &bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  374|  18.4k|  bigint &real_digits = bigmant;
  375|  18.4k|  int32_t real_exp = exponent;
  376|       |
  377|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  378|  18.4k|  adjusted_mantissa am_b = am;
  379|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with
  380|       |  // -Wnoexcept-type.
  381|  18.4k|  round<T>(am_b,
  382|  18.4k|           [](adjusted_mantissa &a, int32_t shift) { round_down(a, shift); });
  383|  18.4k|  T b;
  384|  18.4k|  to_float(false, am_b, b);
  385|  18.4k|  adjusted_mantissa theor = to_extended_halfway(b);
  386|  18.4k|  bigint theor_digits(theor.mantissa);
  387|  18.4k|  int32_t theor_exp = theor.power2;
  388|       |
  389|       |  // scale real digits and theor digits to be same power.
  390|  18.4k|  int32_t pow2_exp = theor_exp - real_exp;
  391|  18.4k|  uint32_t pow5_exp = uint32_t(-real_exp);
  392|  18.4k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (392:7): [True: 18.4k, False: 0]
  ------------------
  393|  18.4k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  195|  18.4k|  { ((void)(x)); }
  ------------------
  394|  18.4k|  }
  395|  18.4k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (395:7): [True: 18.4k, False: 0]
  ------------------
  396|  18.4k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  195|  18.4k|  { ((void)(x)); }
  ------------------
  397|  18.4k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (397:14): [True: 0, False: 0]
  ------------------
  398|      0|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  195|      0|  { ((void)(x)); }
  ------------------
  399|      0|  }
  400|       |
  401|       |  // compare digits, and use it to director rounding
  402|  18.4k|  int ord = real_digits.compare(theor_digits);
  403|  18.4k|  adjusted_mantissa answer = am;
  404|  18.4k|  round<T>(answer, [ord](adjusted_mantissa &a, int32_t shift) {
  405|  18.4k|    round_nearest_tie_even(
  406|  18.4k|        a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  407|  18.4k|          (void)_;  // not needed, since we've done our comparison
  408|  18.4k|          (void)__; // not needed, since we've done our comparison
  409|  18.4k|          if (ord > 0) {
  410|  18.4k|            return true;
  411|  18.4k|          } else if (ord < 0) {
  412|  18.4k|            return false;
  413|  18.4k|          } else {
  414|  18.4k|            return is_odd;
  415|  18.4k|          }
  416|  18.4k|        });
  417|  18.4k|  });
  418|       |
  419|  18.4k|  return answer;
  420|  18.4k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
  110|  18.4k|                                                         callback cb) noexcept {
  111|  18.4k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
  112|  18.4k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (112:7): [True: 0, False: 18.4k]
  ------------------
  113|       |    // have a denormal float
  114|      0|    int32_t shift = -am.power2 + 1;
  115|      0|    cb(am, std::min<int32_t>(shift, 64));
  116|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  117|      0|    am.power2 = (am.mantissa <
  ------------------
  |  Branch (117:17): [True: 0, False: 0]
  ------------------
  118|      0|                 (uint64_t(1) << binary_format<T>::mantissa_explicit_bits()))
  119|      0|                    ? 0
  120|      0|                    : 1;
  121|      0|    return;
  122|      0|  }
  123|       |
  124|       |  // have a normal float, use the default shift.
  125|  18.4k|  cb(am, mantissa_shift);
  126|       |
  127|       |  // check for carry
  128|  18.4k|  if (am.mantissa >=
  ------------------
  |  Branch (128:7): [True: 0, False: 18.4k]
  ------------------
  129|  18.4k|      (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  130|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  131|      0|    am.power2++;
  132|      0|  }
  133|       |
  134|       |  // check for infinite: we could have carried to an infinite power
  135|  18.4k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  136|  18.4k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (136:7): [True: 0, False: 18.4k]
  ------------------
  137|      0|    am.power2 = binary_format<T>::infinite_power();
  138|      0|    am.mantissa = 0;
  139|      0|  }
  140|  18.4k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  382|  18.4k|           [](adjusted_mantissa &a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float10round_downERNS_17adjusted_mantissaEi:
  165|  45.7k|round_down(adjusted_mantissa &am, int32_t shift) noexcept {
  166|  45.7k|  if (shift == 64) {
  ------------------
  |  Branch (166:7): [True: 0, False: 45.7k]
  ------------------
  167|      0|    am.mantissa = 0;
  168|  45.7k|  } else {
  169|  45.7k|    am.mantissa >>= shift;
  170|  45.7k|  }
  171|  45.7k|  am.power2 += shift;
  172|  45.7k|}
_ZN10fast_float19to_extended_halfwayIfEENS_17adjusted_mantissaET_:
   99|  18.4k|to_extended_halfway(T value) noexcept {
  100|  18.4k|  adjusted_mantissa am = to_extended(value);
  101|  18.4k|  am.mantissa <<= 1;
  102|  18.4k|  am.mantissa += 1;
  103|  18.4k|  am.power2 -= 1;
  104|  18.4k|  return am;
  105|  18.4k|}
_ZN10fast_float11to_extendedIfEENS_17adjusted_mantissaET_:
   64|  18.4k|to_extended(T value) noexcept {
   65|  18.4k|  using equiv_uint = equiv_uint_t<T>;
   66|  18.4k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   67|  18.4k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   68|  18.4k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   69|       |
   70|  18.4k|  adjusted_mantissa am;
   71|  18.4k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() -
   72|  18.4k|                 binary_format<T>::minimum_exponent();
   73|  18.4k|  equiv_uint bits;
   74|       |#if FASTFLOAT_HAS_BIT_CAST
   75|       |  bits = std::bit_cast<equiv_uint>(value);
   76|       |#else
   77|  18.4k|  ::memcpy(&bits, &value, sizeof(T));
   78|  18.4k|#endif
   79|  18.4k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (79:7): [True: 0, False: 18.4k]
  ------------------
   80|       |    // denormal
   81|      0|    am.power2 = 1 - bias;
   82|      0|    am.mantissa = bits & mantissa_mask;
   83|  18.4k|  } else {
   84|       |    // normal
   85|  18.4k|    am.power2 = int32_t((bits & exponent_mask) >>
   86|  18.4k|                        binary_format<T>::mantissa_explicit_bits());
   87|  18.4k|    am.power2 -= bias;
   88|  18.4k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   89|  18.4k|  }
   90|       |
   91|  18.4k|  return am;
   92|  18.4k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
  110|  18.4k|                                                         callback cb) noexcept {
  111|  18.4k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
  112|  18.4k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (112:7): [True: 0, False: 18.4k]
  ------------------
  113|       |    // have a denormal float
  114|      0|    int32_t shift = -am.power2 + 1;
  115|      0|    cb(am, std::min<int32_t>(shift, 64));
  116|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  117|      0|    am.power2 = (am.mantissa <
  ------------------
  |  Branch (117:17): [True: 0, False: 0]
  ------------------
  118|      0|                 (uint64_t(1) << binary_format<T>::mantissa_explicit_bits()))
  119|      0|                    ? 0
  120|      0|                    : 1;
  121|      0|    return;
  122|      0|  }
  123|       |
  124|       |  // have a normal float, use the default shift.
  125|  18.4k|  cb(am, mantissa_shift);
  126|       |
  127|       |  // check for carry
  128|  18.4k|  if (am.mantissa >=
  ------------------
  |  Branch (128:7): [True: 0, False: 18.4k]
  ------------------
  129|  18.4k|      (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  130|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  131|      0|    am.power2++;
  132|      0|  }
  133|       |
  134|       |  // check for infinite: we could have carried to an infinite power
  135|  18.4k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  136|  18.4k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (136:7): [True: 0, False: 18.4k]
  ------------------
  137|      0|    am.power2 = binary_format<T>::infinite_power();
  138|      0|    am.mantissa = 0;
  139|      0|  }
  140|  18.4k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  404|  18.4k|  round<T>(answer, [ord](adjusted_mantissa &a, int32_t shift) {
  405|  18.4k|    round_nearest_tie_even(
  406|  18.4k|        a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  407|  18.4k|          (void)_;  // not needed, since we've done our comparison
  408|  18.4k|          (void)__; // not needed, since we've done our comparison
  409|  18.4k|          if (ord > 0) {
  410|  18.4k|            return true;
  411|  18.4k|          } else if (ord < 0) {
  412|  18.4k|            return false;
  413|  18.4k|          } else {
  414|  18.4k|            return is_odd;
  415|  18.4k|          }
  416|  18.4k|        });
  417|  18.4k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  145|  18.4k|                       callback cb) noexcept {
  146|  18.4k|  uint64_t const mask = (shift == 64) ? UINT64_MAX : (uint64_t(1) << shift) - 1;
  ------------------
  |  Branch (146:25): [True: 0, False: 18.4k]
  ------------------
  147|  18.4k|  uint64_t const halfway = (shift == 0) ? 0 : uint64_t(1) << (shift - 1);
  ------------------
  |  Branch (147:28): [True: 0, False: 18.4k]
  ------------------
  148|  18.4k|  uint64_t truncated_bits = am.mantissa & mask;
  149|  18.4k|  bool is_above = truncated_bits > halfway;
  150|  18.4k|  bool is_halfway = truncated_bits == halfway;
  151|       |
  152|       |  // shift digits into position
  153|  18.4k|  if (shift == 64) {
  ------------------
  |  Branch (153:7): [True: 0, False: 18.4k]
  ------------------
  154|      0|    am.mantissa = 0;
  155|  18.4k|  } else {
  156|  18.4k|    am.mantissa >>= shift;
  157|  18.4k|  }
  158|  18.4k|  am.power2 += shift;
  159|       |
  160|  18.4k|  bool is_odd = (am.mantissa & 1) == 1;
  161|  18.4k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  162|  18.4k|}
_ZZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  406|  18.4k|        a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  407|  18.4k|          (void)_;  // not needed, since we've done our comparison
  408|  18.4k|          (void)__; // not needed, since we've done our comparison
  409|  18.4k|          if (ord > 0) {
  ------------------
  |  Branch (409:15): [True: 210, False: 18.2k]
  ------------------
  410|    210|            return true;
  411|  18.2k|          } else if (ord < 0) {
  ------------------
  |  Branch (411:22): [True: 14.9k, False: 3.25k]
  ------------------
  412|  14.9k|            return false;
  413|  14.9k|          } else {
  414|  3.25k|            return is_odd;
  415|  3.25k|          }
  416|  18.4k|        });
_ZN10fast_float19scientific_exponentIDiEEiRNS_22parsed_number_string_tIT_EE:
   43|    184|scientific_exponent(parsed_number_string_t<UC> &num) noexcept {
   44|    184|  uint64_t mantissa = num.mantissa;
   45|    184|  int32_t exponent = int32_t(num.exponent);
   46|    920|  while (mantissa >= 10000) {
  ------------------
  |  Branch (46:10): [True: 736, False: 184]
  ------------------
   47|    736|    mantissa /= 10000;
   48|    736|    exponent += 4;
   49|    736|  }
   50|    368|  while (mantissa >= 100) {
  ------------------
  |  Branch (50:10): [True: 184, False: 184]
  ------------------
   51|    184|    mantissa /= 100;
   52|    184|    exponent += 2;
   53|    184|  }
   54|    184|  while (mantissa >= 10) {
  ------------------
  |  Branch (54:10): [True: 0, False: 184]
  ------------------
   55|      0|    mantissa /= 10;
   56|      0|    exponent += 1;
   57|      0|  }
   58|    184|  return exponent;
   59|    184|}
_ZN10fast_float14parse_mantissaIDiEEvRNS_6bigintERNS_22parsed_number_string_tIT_EEmRm:
  262|    184|               size_t max_digits, size_t &digits) noexcept {
  263|       |  // try to minimize the number of big integer and scalar multiplication.
  264|       |  // therefore, try to parse 8 digits at a time, and multiply by the largest
  265|       |  // scalar value (9 or 19 digits) for each step.
  266|    184|  size_t counter = 0;
  267|    184|  digits = 0;
  268|    184|  limb value = 0;
  269|    184|#ifdef FASTFLOAT_64BIT_LIMB
  270|    184|  size_t step = 19;
  271|       |#else
  272|       |  size_t step = 9;
  273|       |#endif
  274|       |
  275|       |  // process all integer digits.
  276|    184|  UC const *p = num.integer.ptr;
  277|    184|  UC const *pend = p + num.integer.len();
  278|    184|  skip_zeros(p, pend);
  279|       |  // process all digits, in increments of step per loop
  280|    418|  while (p != pend) {
  ------------------
  |  Branch (280:10): [True: 234, False: 184]
  ------------------
  281|    334|    while ((std::distance(p, pend) >= 8) && (step - counter >= 8) &&
  ------------------
  |  Branch (281:12): [True: 118, False: 216]
  |  Branch (281:45): [True: 100, False: 18]
  ------------------
  282|    334|           (max_digits - digits >= 8)) {
  ------------------
  |  Branch (282:12): [True: 100, False: 0]
  ------------------
  283|    100|      parse_eight_digits(p, value, counter, digits);
  284|    100|    }
  285|  1.47k|    while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (285:12): [True: 1.42k, False: 50]
  |  Branch (285:30): [True: 1.24k, False: 184]
  |  Branch (285:43): [True: 1.24k, False: 0]
  ------------------
  286|  1.24k|      parse_one_digit(p, value, counter, digits);
  287|  1.24k|    }
  288|    234|    if (digits == max_digits) {
  ------------------
  |  Branch (288:9): [True: 0, False: 234]
  ------------------
  289|       |      // add the temporary value, then check if we've truncated any digits
  290|      0|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  291|      0|      bool truncated = is_truncated(p, pend);
  292|      0|      if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (292:11): [True: 0, False: 0]
  ------------------
  293|      0|        truncated |= is_truncated(num.fraction);
  294|      0|      }
  295|      0|      if (truncated) {
  ------------------
  |  Branch (295:11): [True: 0, False: 0]
  ------------------
  296|      0|        round_up_bigint(result, digits);
  297|      0|      }
  298|      0|      return;
  299|    234|    } else {
  300|    234|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  301|    234|      counter = 0;
  302|    234|      value = 0;
  303|    234|    }
  304|    234|  }
  305|       |
  306|       |  // add our fraction digits, if they're available.
  307|    184|  if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (307:7): [True: 134, False: 50]
  ------------------
  308|    134|    p = num.fraction.ptr;
  309|    134|    pend = p + num.fraction.len();
  310|    134|    if (digits == 0) {
  ------------------
  |  Branch (310:9): [True: 0, False: 134]
  ------------------
  311|      0|      skip_zeros(p, pend);
  312|      0|    }
  313|       |    // process all digits, in increments of step per loop
  314|    348|    while (p != pend) {
  ------------------
  |  Branch (314:12): [True: 214, False: 134]
  ------------------
  315|    446|      while ((std::distance(p, pend) >= 8) && (step - counter >= 8) &&
  ------------------
  |  Branch (315:14): [True: 258, False: 188]
  |  Branch (315:47): [True: 232, False: 26]
  ------------------
  316|    446|             (max_digits - digits >= 8)) {
  ------------------
  |  Branch (316:14): [True: 232, False: 0]
  ------------------
  317|    232|        parse_eight_digits(p, value, counter, digits);
  318|    232|      }
  319|    948|      while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (319:14): [True: 868, False: 80]
  |  Branch (319:32): [True: 734, False: 134]
  |  Branch (319:45): [True: 734, False: 0]
  ------------------
  320|    734|        parse_one_digit(p, value, counter, digits);
  321|    734|      }
  322|    214|      if (digits == max_digits) {
  ------------------
  |  Branch (322:11): [True: 0, False: 214]
  ------------------
  323|       |        // add the temporary value, then check if we've truncated any digits
  324|      0|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  325|      0|        bool truncated = is_truncated(p, pend);
  326|      0|        if (truncated) {
  ------------------
  |  Branch (326:13): [True: 0, False: 0]
  ------------------
  327|      0|          round_up_bigint(result, digits);
  328|      0|        }
  329|      0|        return;
  330|    214|      } else {
  331|    214|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  332|    214|        counter = 0;
  333|    214|        value = 0;
  334|    214|      }
  335|    214|    }
  336|    134|  }
  337|       |
  338|    184|  if (counter != 0) {
  ------------------
  |  Branch (338:7): [True: 0, False: 184]
  ------------------
  339|      0|    add_native(result, limb(powers_of_ten_uint64[counter]), value);
  340|      0|  }
  341|    184|}
_ZN10fast_float10skip_zerosIDiEEvRPKT_S3_:
  176|    184|skip_zeros(UC const *&first, UC const *last) noexcept {
  177|    184|  uint64_t val;
  178|    184|  while (!cpp20_and_in_constexpr() &&
  ------------------
  |  Branch (178:10): [Folded - Ignored]
  ------------------
  179|    184|         std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (179:10): [True: 184, False: 0]
  ------------------
  180|    184|    ::memcpy(&val, first, sizeof(uint64_t));
  181|    184|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (181:9): [True: 184, False: 0]
  ------------------
  182|    184|      break;
  183|    184|    }
  184|      0|    first += int_cmp_len<UC>();
  185|      0|  }
  186|    220|  while (first != last) {
  ------------------
  |  Branch (186:10): [True: 220, False: 0]
  ------------------
  187|    220|    if (*first != UC('0')) {
  ------------------
  |  Branch (187:9): [True: 184, False: 36]
  ------------------
  188|    184|      break;
  189|    184|    }
  190|     36|    first++;
  191|     36|  }
  192|    184|}
_ZN10fast_float18parse_eight_digitsIDiEEvRPKT_RmS5_S5_:
  227|    332|                   size_t &count) noexcept {
  228|    332|  value = value * 100000000 + parse_eight_digits_unrolled(p);
  229|    332|  p += 8;
  230|    332|  counter += 8;
  231|    332|  count += 8;
  232|    332|}
_ZN10fast_float15parse_one_digitIDiEEvRPKT_RmS5_S5_:
  237|  1.97k|                size_t &count) noexcept {
  238|  1.97k|  value = value * 10 + limb(*p - UC('0'));
  239|  1.97k|  p++;
  240|  1.97k|  counter++;
  241|  1.97k|  count++;
  242|  1.97k|}
_ZN10fast_float10digit_compIdcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  437|  29.8k|digit_comp(parsed_number_string_t<UC> &num, adjusted_mantissa am) noexcept {
  438|       |  // remove the invalid exponent bias
  439|  29.8k|  am.power2 -= invalid_am_bias;
  440|       |
  441|  29.8k|  int32_t sci_exp = scientific_exponent(num);
  442|  29.8k|  size_t max_digits = binary_format<T>::max_digits();
  443|  29.8k|  size_t digits = 0;
  444|  29.8k|  bigint bigmant;
  445|  29.8k|  parse_mantissa(bigmant, num, max_digits, digits);
  446|       |  // can't underflow, since digits is at most max_digits.
  447|  29.8k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  448|  29.8k|  if (exponent >= 0) {
  ------------------
  |  Branch (448:7): [True: 2.69k, False: 27.1k]
  ------------------
  449|  2.69k|    return positive_digit_comp<T>(bigmant, exponent);
  450|  27.1k|  } else {
  451|  27.1k|    return negative_digit_comp<T>(bigmant, am, exponent);
  452|  27.1k|  }
  453|  29.8k|}
_ZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEi:
  345|  2.74k|positive_digit_comp(bigint &bigmant, int32_t exponent) noexcept {
  346|  2.74k|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  195|  2.74k|  { ((void)(x)); }
  ------------------
  347|  2.74k|  adjusted_mantissa answer;
  348|  2.74k|  bool truncated;
  349|  2.74k|  answer.mantissa = bigmant.hi64(truncated);
  350|  2.74k|  int bias = binary_format<T>::mantissa_explicit_bits() -
  351|  2.74k|             binary_format<T>::minimum_exponent();
  352|  2.74k|  answer.power2 = bigmant.bit_length() - 64 + bias;
  353|       |
  354|  2.74k|  round<T>(answer, [truncated](adjusted_mantissa &a, int32_t shift) {
  355|  2.74k|    round_nearest_tie_even(
  356|  2.74k|        a, shift,
  357|  2.74k|        [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  358|  2.74k|          return is_above || (is_halfway && truncated) ||
  359|  2.74k|                 (is_odd && is_halfway);
  360|  2.74k|        });
  361|  2.74k|  });
  362|       |
  363|  2.74k|  return answer;
  364|  2.74k|}
_ZN10fast_float5roundIdZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
  110|  2.74k|                                                         callback cb) noexcept {
  111|  2.74k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
  112|  2.74k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (112:7): [True: 0, False: 2.74k]
  ------------------
  113|       |    // have a denormal float
  114|      0|    int32_t shift = -am.power2 + 1;
  115|      0|    cb(am, std::min<int32_t>(shift, 64));
  116|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  117|      0|    am.power2 = (am.mantissa <
  ------------------
  |  Branch (117:17): [True: 0, False: 0]
  ------------------
  118|      0|                 (uint64_t(1) << binary_format<T>::mantissa_explicit_bits()))
  119|      0|                    ? 0
  120|      0|                    : 1;
  121|      0|    return;
  122|      0|  }
  123|       |
  124|       |  // have a normal float, use the default shift.
  125|  2.74k|  cb(am, mantissa_shift);
  126|       |
  127|       |  // check for carry
  128|  2.74k|  if (am.mantissa >=
  ------------------
  |  Branch (128:7): [True: 429, False: 2.31k]
  ------------------
  129|  2.74k|      (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  130|    429|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  131|    429|    am.power2++;
  132|    429|  }
  133|       |
  134|       |  // check for infinite: we could have carried to an infinite power
  135|  2.74k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  136|  2.74k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (136:7): [True: 0, False: 2.74k]
  ------------------
  137|      0|    am.power2 = binary_format<T>::infinite_power();
  138|      0|    am.mantissa = 0;
  139|      0|  }
  140|  2.74k|}
_ZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  354|  2.74k|  round<T>(answer, [truncated](adjusted_mantissa &a, int32_t shift) {
  355|  2.74k|    round_nearest_tie_even(
  356|  2.74k|        a, shift,
  357|  2.74k|        [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  358|  2.74k|          return is_above || (is_halfway && truncated) ||
  359|  2.74k|                 (is_odd && is_halfway);
  360|  2.74k|        });
  361|  2.74k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  145|  2.74k|                       callback cb) noexcept {
  146|  2.74k|  uint64_t const mask = (shift == 64) ? UINT64_MAX : (uint64_t(1) << shift) - 1;
  ------------------
  |  Branch (146:25): [True: 0, False: 2.74k]
  ------------------
  147|  2.74k|  uint64_t const halfway = (shift == 0) ? 0 : uint64_t(1) << (shift - 1);
  ------------------
  |  Branch (147:28): [True: 0, False: 2.74k]
  ------------------
  148|  2.74k|  uint64_t truncated_bits = am.mantissa & mask;
  149|  2.74k|  bool is_above = truncated_bits > halfway;
  150|  2.74k|  bool is_halfway = truncated_bits == halfway;
  151|       |
  152|       |  // shift digits into position
  153|  2.74k|  if (shift == 64) {
  ------------------
  |  Branch (153:7): [True: 0, False: 2.74k]
  ------------------
  154|      0|    am.mantissa = 0;
  155|  2.74k|  } else {
  156|  2.74k|    am.mantissa >>= shift;
  157|  2.74k|  }
  158|  2.74k|  am.power2 += shift;
  159|       |
  160|  2.74k|  bool is_odd = (am.mantissa & 1) == 1;
  161|  2.74k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  162|  2.74k|}
_ZZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  357|  2.74k|        [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  358|  2.74k|          return is_above || (is_halfway && truncated) ||
  ------------------
  |  Branch (358:18): [True: 479, False: 2.26k]
  |  Branch (358:31): [True: 1.58k, False: 677]
  |  Branch (358:45): [True: 615, False: 972]
  ------------------
  359|  2.74k|                 (is_odd && is_halfway);
  ------------------
  |  Branch (359:19): [True: 247, False: 1.40k]
  |  Branch (359:29): [True: 60, False: 187]
  ------------------
  360|  2.74k|        });
_ZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_i:
  373|  27.3k|    bigint &bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  374|  27.3k|  bigint &real_digits = bigmant;
  375|  27.3k|  int32_t real_exp = exponent;
  376|       |
  377|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  378|  27.3k|  adjusted_mantissa am_b = am;
  379|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with
  380|       |  // -Wnoexcept-type.
  381|  27.3k|  round<T>(am_b,
  382|  27.3k|           [](adjusted_mantissa &a, int32_t shift) { round_down(a, shift); });
  383|  27.3k|  T b;
  384|  27.3k|  to_float(false, am_b, b);
  385|  27.3k|  adjusted_mantissa theor = to_extended_halfway(b);
  386|  27.3k|  bigint theor_digits(theor.mantissa);
  387|  27.3k|  int32_t theor_exp = theor.power2;
  388|       |
  389|       |  // scale real digits and theor digits to be same power.
  390|  27.3k|  int32_t pow2_exp = theor_exp - real_exp;
  391|  27.3k|  uint32_t pow5_exp = uint32_t(-real_exp);
  392|  27.3k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (392:7): [True: 27.3k, False: 0]
  ------------------
  393|  27.3k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  195|  27.3k|  { ((void)(x)); }
  ------------------
  394|  27.3k|  }
  395|  27.3k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (395:7): [True: 2.51k, False: 24.8k]
  ------------------
  396|  2.51k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  195|  2.51k|  { ((void)(x)); }
  ------------------
  397|  24.8k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (397:14): [True: 24.7k, False: 74]
  ------------------
  398|  24.7k|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  195|  24.7k|  { ((void)(x)); }
  ------------------
  399|  24.7k|  }
  400|       |
  401|       |  // compare digits, and use it to director rounding
  402|  27.3k|  int ord = real_digits.compare(theor_digits);
  403|  27.3k|  adjusted_mantissa answer = am;
  404|  27.3k|  round<T>(answer, [ord](adjusted_mantissa &a, int32_t shift) {
  405|  27.3k|    round_nearest_tie_even(
  406|  27.3k|        a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  407|  27.3k|          (void)_;  // not needed, since we've done our comparison
  408|  27.3k|          (void)__; // not needed, since we've done our comparison
  409|  27.3k|          if (ord > 0) {
  410|  27.3k|            return true;
  411|  27.3k|          } else if (ord < 0) {
  412|  27.3k|            return false;
  413|  27.3k|          } else {
  414|  27.3k|            return is_odd;
  415|  27.3k|          }
  416|  27.3k|        });
  417|  27.3k|  });
  418|       |
  419|  27.3k|  return answer;
  420|  27.3k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
  110|  27.3k|                                                         callback cb) noexcept {
  111|  27.3k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
  112|  27.3k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (112:7): [True: 108, False: 27.2k]
  ------------------
  113|       |    // have a denormal float
  114|    108|    int32_t shift = -am.power2 + 1;
  115|    108|    cb(am, std::min<int32_t>(shift, 64));
  116|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  117|    108|    am.power2 = (am.mantissa <
  ------------------
  |  Branch (117:17): [True: 108, False: 0]
  ------------------
  118|    108|                 (uint64_t(1) << binary_format<T>::mantissa_explicit_bits()))
  119|    108|                    ? 0
  120|    108|                    : 1;
  121|    108|    return;
  122|    108|  }
  123|       |
  124|       |  // have a normal float, use the default shift.
  125|  27.2k|  cb(am, mantissa_shift);
  126|       |
  127|       |  // check for carry
  128|  27.2k|  if (am.mantissa >=
  ------------------
  |  Branch (128:7): [True: 0, False: 27.2k]
  ------------------
  129|  27.2k|      (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  130|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  131|      0|    am.power2++;
  132|      0|  }
  133|       |
  134|       |  // check for infinite: we could have carried to an infinite power
  135|  27.2k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  136|  27.2k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (136:7): [True: 0, False: 27.2k]
  ------------------
  137|      0|    am.power2 = binary_format<T>::infinite_power();
  138|      0|    am.mantissa = 0;
  139|      0|  }
  140|  27.2k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  382|  27.3k|           [](adjusted_mantissa &a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float19to_extended_halfwayIdEENS_17adjusted_mantissaET_:
   99|  27.3k|to_extended_halfway(T value) noexcept {
  100|  27.3k|  adjusted_mantissa am = to_extended(value);
  101|  27.3k|  am.mantissa <<= 1;
  102|  27.3k|  am.mantissa += 1;
  103|  27.3k|  am.power2 -= 1;
  104|  27.3k|  return am;
  105|  27.3k|}
_ZN10fast_float11to_extendedIdEENS_17adjusted_mantissaET_:
   64|  27.3k|to_extended(T value) noexcept {
   65|  27.3k|  using equiv_uint = equiv_uint_t<T>;
   66|  27.3k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   67|  27.3k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   68|  27.3k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   69|       |
   70|  27.3k|  adjusted_mantissa am;
   71|  27.3k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() -
   72|  27.3k|                 binary_format<T>::minimum_exponent();
   73|  27.3k|  equiv_uint bits;
   74|       |#if FASTFLOAT_HAS_BIT_CAST
   75|       |  bits = std::bit_cast<equiv_uint>(value);
   76|       |#else
   77|  27.3k|  ::memcpy(&bits, &value, sizeof(T));
   78|  27.3k|#endif
   79|  27.3k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (79:7): [True: 108, False: 27.2k]
  ------------------
   80|       |    // denormal
   81|    108|    am.power2 = 1 - bias;
   82|    108|    am.mantissa = bits & mantissa_mask;
   83|  27.2k|  } else {
   84|       |    // normal
   85|  27.2k|    am.power2 = int32_t((bits & exponent_mask) >>
   86|  27.2k|                        binary_format<T>::mantissa_explicit_bits());
   87|  27.2k|    am.power2 -= bias;
   88|  27.2k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   89|  27.2k|  }
   90|       |
   91|  27.3k|  return am;
   92|  27.3k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
  110|  27.3k|                                                         callback cb) noexcept {
  111|  27.3k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
  112|  27.3k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (112:7): [True: 108, False: 27.2k]
  ------------------
  113|       |    // have a denormal float
  114|    108|    int32_t shift = -am.power2 + 1;
  115|    108|    cb(am, std::min<int32_t>(shift, 64));
  116|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  117|    108|    am.power2 = (am.mantissa <
  ------------------
  |  Branch (117:17): [True: 108, False: 0]
  ------------------
  118|    108|                 (uint64_t(1) << binary_format<T>::mantissa_explicit_bits()))
  119|    108|                    ? 0
  120|    108|                    : 1;
  121|    108|    return;
  122|    108|  }
  123|       |
  124|       |  // have a normal float, use the default shift.
  125|  27.2k|  cb(am, mantissa_shift);
  126|       |
  127|       |  // check for carry
  128|  27.2k|  if (am.mantissa >=
  ------------------
  |  Branch (128:7): [True: 74, False: 27.1k]
  ------------------
  129|  27.2k|      (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  130|     74|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  131|     74|    am.power2++;
  132|     74|  }
  133|       |
  134|       |  // check for infinite: we could have carried to an infinite power
  135|  27.2k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  136|  27.2k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (136:7): [True: 0, False: 27.2k]
  ------------------
  137|      0|    am.power2 = binary_format<T>::infinite_power();
  138|      0|    am.mantissa = 0;
  139|      0|  }
  140|  27.2k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  404|  27.3k|  round<T>(answer, [ord](adjusted_mantissa &a, int32_t shift) {
  405|  27.3k|    round_nearest_tie_even(
  406|  27.3k|        a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  407|  27.3k|          (void)_;  // not needed, since we've done our comparison
  408|  27.3k|          (void)__; // not needed, since we've done our comparison
  409|  27.3k|          if (ord > 0) {
  410|  27.3k|            return true;
  411|  27.3k|          } else if (ord < 0) {
  412|  27.3k|            return false;
  413|  27.3k|          } else {
  414|  27.3k|            return is_odd;
  415|  27.3k|          }
  416|  27.3k|        });
  417|  27.3k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  145|  27.3k|                       callback cb) noexcept {
  146|  27.3k|  uint64_t const mask = (shift == 64) ? UINT64_MAX : (uint64_t(1) << shift) - 1;
  ------------------
  |  Branch (146:25): [True: 0, False: 27.3k]
  ------------------
  147|  27.3k|  uint64_t const halfway = (shift == 0) ? 0 : uint64_t(1) << (shift - 1);
  ------------------
  |  Branch (147:28): [True: 0, False: 27.3k]
  ------------------
  148|  27.3k|  uint64_t truncated_bits = am.mantissa & mask;
  149|  27.3k|  bool is_above = truncated_bits > halfway;
  150|  27.3k|  bool is_halfway = truncated_bits == halfway;
  151|       |
  152|       |  // shift digits into position
  153|  27.3k|  if (shift == 64) {
  ------------------
  |  Branch (153:7): [True: 0, False: 27.3k]
  ------------------
  154|      0|    am.mantissa = 0;
  155|  27.3k|  } else {
  156|  27.3k|    am.mantissa >>= shift;
  157|  27.3k|  }
  158|  27.3k|  am.power2 += shift;
  159|       |
  160|  27.3k|  bool is_odd = (am.mantissa & 1) == 1;
  161|  27.3k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  162|  27.3k|}
_ZZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  406|  27.3k|        a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  407|  27.3k|          (void)_;  // not needed, since we've done our comparison
  408|  27.3k|          (void)__; // not needed, since we've done our comparison
  409|  27.3k|          if (ord > 0) {
  ------------------
  |  Branch (409:15): [True: 11.3k, False: 16.0k]
  ------------------
  410|  11.3k|            return true;
  411|  16.0k|          } else if (ord < 0) {
  ------------------
  |  Branch (411:22): [True: 15.5k, False: 470]
  ------------------
  412|  15.5k|            return false;
  413|  15.5k|          } else {
  414|    470|            return is_odd;
  415|    470|          }
  416|  27.3k|        });
_ZN10fast_float10digit_compIdDiEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  437|    184|digit_comp(parsed_number_string_t<UC> &num, adjusted_mantissa am) noexcept {
  438|       |  // remove the invalid exponent bias
  439|    184|  am.power2 -= invalid_am_bias;
  440|       |
  441|    184|  int32_t sci_exp = scientific_exponent(num);
  442|    184|  size_t max_digits = binary_format<T>::max_digits();
  443|    184|  size_t digits = 0;
  444|    184|  bigint bigmant;
  445|    184|  parse_mantissa(bigmant, num, max_digits, digits);
  446|       |  // can't underflow, since digits is at most max_digits.
  447|    184|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  448|    184|  if (exponent >= 0) {
  ------------------
  |  Branch (448:7): [True: 50, False: 134]
  ------------------
  449|     50|    return positive_digit_comp<T>(bigmant, exponent);
  450|    134|  } else {
  451|    134|    return negative_digit_comp<T>(bigmant, am, exponent);
  452|    134|  }
  453|    184|}

_ZN10fast_float6detail25adjust_for_feature_macrosENS_12chars_formatE:
 1226|  2.56M|constexpr chars_format adjust_for_feature_macros(chars_format fmt) {
 1227|  2.56M|  return fmt
 1228|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS
 1229|       |         | chars_format::allow_leading_plus
 1230|       |#endif
 1231|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE
 1232|       |         | chars_format::skip_white_space
 1233|       |#endif
 1234|  2.56M|      ;
 1235|  2.56M|}
_ZN10fast_floatanENS_12chars_formatES0_:
 1191|  8.39M|constexpr chars_format operator&(chars_format lhs, chars_format rhs) noexcept {
 1192|  8.39M|  using int_type = std::underlying_type<chars_format>::type;
 1193|  8.39M|  return static_cast<chars_format>(static_cast<int_type>(lhs) &
 1194|  8.39M|                                   static_cast<int_type>(rhs));
 1195|  8.39M|}
_ZN10fast_float4spanIKcEC2Ev:
  289|  1.69M|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKcEC2EPS1_m:
  287|  1.00M|  constexpr span(T const *_ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanIKcE3lenEv:
  291|   337k|  constexpr size_t len() const noexcept { return length; }
_ZN10fast_float13binary_formatIfE22min_exponent_fast_pathEv:
  555|   609k|inline constexpr int binary_format<float>::min_exponent_fast_path() {
  556|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  557|       |  return 0;
  558|       |#else
  559|   609k|  return -10;
  560|   609k|#endif
  561|   609k|}
_ZN10fast_float13binary_formatIfE22max_exponent_fast_pathEv:
  623|   572k|inline constexpr int binary_format<float>::max_exponent_fast_path() {
  624|   572k|  return 10;
  625|   572k|}
_ZN10fast_float13binary_formatIfE22max_mantissa_fast_pathEv:
  633|   509k|inline constexpr uint64_t binary_format<float>::max_mantissa_fast_path() {
  634|   509k|  return uint64_t(2) << mantissa_explicit_bits();
  635|   509k|}
_ZN10fast_float13binary_formatIfE22mantissa_explicit_bitsEv:
  569|  1.36M|inline constexpr int binary_format<float>::mantissa_explicit_bits() {
  570|  1.36M|  return 23;
  571|  1.36M|}
_ZN10fast_float13binary_formatIfE18exact_power_of_tenEl:
  914|   488k|inline constexpr float binary_format<float>::exact_power_of_ten(int64_t power) {
  915|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  916|   488k|  return (void)powers_of_ten[0], powers_of_ten[power];
  917|   488k|}
_ZN10fast_float17adjusted_mantissaC2Ev:
  419|   466k|  adjusted_mantissa() = default;
_ZN10fast_float13binary_formatIfE21smallest_power_of_tenEv:
  932|   187k|template <> inline constexpr int binary_format<float>::smallest_power_of_ten() {
  933|   187k|  return -64;
  934|   187k|}
_ZN10fast_float13binary_formatIfE20largest_power_of_tenEv:
  923|   185k|template <> inline constexpr int binary_format<float>::largest_power_of_ten() {
  924|   185k|  return 38;
  925|   185k|}
_ZN10fast_float14leading_zeroesEm:
  339|   404k|leading_zeroes(uint64_t input_num) {
  340|   404k|  assert(input_num > 0);
  341|   404k|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (341:7): [Folded - Ignored]
  ------------------
  342|      0|    return leading_zeroes_generic(input_num);
  343|      0|  }
  344|       |#ifdef FASTFLOAT_VISUAL_STUDIO
  345|       |#if defined(_M_X64) || defined(_M_ARM64)
  346|       |  unsigned long leading_zero = 0;
  347|       |  // Search the mask data from most significant bit (MSB)
  348|       |  // to least significant bit (LSB) for a set bit (1).
  349|       |  _BitScanReverse64(&leading_zero, input_num);
  350|       |  return (int)(63 - leading_zero);
  351|       |#else
  352|       |  return leading_zeroes_generic(input_num);
  353|       |#endif
  354|       |#else
  355|   404k|  return __builtin_clzll(input_num);
  356|   404k|#endif
  357|   404k|}
_ZN10fast_float19full_multiplicationEmm:
  391|   514k|full_multiplication(uint64_t a, uint64_t b) {
  392|   514k|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (392:7): [Folded - Ignored]
  ------------------
  393|      0|    value128 answer;
  394|      0|    answer.low = umul128_generic(a, b, &answer.high);
  395|      0|    return answer;
  396|      0|  }
  397|   514k|  value128 answer;
  398|       |#if defined(_M_ARM64) && !defined(__MINGW32__)
  399|       |  // ARM64 has native support for 64-bit multiplications, no need to emulate
  400|       |  // But MinGW on ARM64 doesn't have native support for 64-bit multiplications
  401|       |  answer.high = __umulh(a, b);
  402|       |  answer.low = a * b;
  403|       |#elif defined(FASTFLOAT_32BIT) ||                                              \
  404|       |    (defined(_WIN64) && !defined(__clang__) && !defined(_M_ARM64))
  405|       |  answer.low = _umul128(a, b, &answer.high); // _umul128 not available on ARM64
  406|       |#elif defined(FASTFLOAT_64BIT) && defined(__SIZEOF_INT128__)
  407|       |  __uint128_t r = ((__uint128_t)a) * b;
  408|   514k|  answer.low = uint64_t(r);
  409|   514k|  answer.high = uint64_t(r >> 64);
  410|       |#else
  411|       |  answer.low = umul128_generic(a, b, &answer.high);
  412|       |#endif
  413|   514k|  return answer;
  414|   514k|}
_ZN10fast_float8value128C2Ev:
  305|   514k|  constexpr value128() : low(0), high(0) {}
_ZN10fast_float13binary_formatIfE16minimum_exponentEv:
  597|   216k|template <> inline constexpr int binary_format<float>::minimum_exponent() {
  598|   216k|  return -127;
  599|   216k|}
_ZN10fast_float13binary_formatIfE26min_exponent_round_to_evenEv:
  589|  59.1k|inline constexpr int binary_format<float>::min_exponent_round_to_even() {
  590|  59.1k|  return -17;
  591|  59.1k|}
_ZN10fast_float13binary_formatIfE26max_exponent_round_to_evenEv:
  579|  57.4k|inline constexpr int binary_format<float>::max_exponent_round_to_even() {
  580|  57.4k|  return 10;
  581|  57.4k|}
_ZNK10fast_float17adjusted_mantissaneERKS0_:
  425|   141k|  constexpr bool operator!=(adjusted_mantissa const &o) const {
  426|   141k|    return mantissa != o.mantissa || power2 != o.power2;
  ------------------
  |  Branch (426:12): [True: 49.0k, False: 92.2k]
  |  Branch (426:38): [True: 0, False: 92.2k]
  ------------------
  427|   141k|  }
_ZN10fast_float13binary_formatIfE10max_digitsEv:
  940|  18.9k|template <> inline constexpr size_t binary_format<float>::max_digits() {
  941|  18.9k|  return 114;
  942|  18.9k|}
impl.cpp:_ZN10fast_floatL11int_cmp_lenIcEEiv:
 1031|  84.6k|template <typename UC> static constexpr int int_cmp_len() {
 1032|  84.6k|  return sizeof(uint64_t) / sizeof(UC);
 1033|  84.6k|}
impl.cpp:_ZN10fast_floatL13int_cmp_zerosIcEEmv:
 1021|  33.7k|template <typename UC> static constexpr uint64_t int_cmp_zeros() {
 1022|  33.7k|  static_assert((sizeof(UC) == 1) || (sizeof(UC) == 2) || (sizeof(UC) == 4),
 1023|  33.7k|                "Unsupported character size");
 1024|  33.7k|  return (sizeof(UC) == 1) ? 0x3030303030303030
  ------------------
  |  Branch (1024:10): [Folded - Ignored]
  ------------------
 1025|  33.7k|         : (sizeof(UC) == 2)
  ------------------
  |  Branch (1025:12): [Folded - Ignored]
  ------------------
 1026|      0|             ? (uint64_t(UC('0')) << 48 | uint64_t(UC('0')) << 32 |
 1027|      0|                uint64_t(UC('0')) << 16 | UC('0'))
 1028|      0|             : (uint64_t(UC('0')) << 32 | UC('0'));
 1029|  33.7k|}
_ZN10fast_float4spanImEC2EPKmm:
  287|  70.7k|  constexpr span(T const *_ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanImE3lenEv:
  291|   230k|  constexpr size_t len() const noexcept { return length; }
_ZNK10fast_float4spanImEixEm:
  293|   125k|  FASTFLOAT_CONSTEXPR14 const T &operator[](size_t index) const noexcept {
  294|   125k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  200|   125k|  { ((void)(x)); }
  ------------------
  295|   125k|    return ptr[index];
  296|   125k|  }
_ZN10fast_float8to_floatIfEEvbNS_17adjusted_mantissaERT_:
  982|   140k|to_float(bool negative, adjusted_mantissa am, T &value) {
  983|   140k|  using equiv_uint = equiv_uint_t<T>;
  984|   140k|  equiv_uint word = equiv_uint(am.mantissa);
  985|   140k|  word = equiv_uint(word | equiv_uint(am.power2)
  986|   140k|                               << binary_format<T>::mantissa_explicit_bits());
  987|   140k|  word =
  988|   140k|      equiv_uint(word | equiv_uint(negative) << binary_format<T>::sign_index());
  989|       |#if FASTFLOAT_HAS_BIT_CAST
  990|       |  value = std::bit_cast<T>(word);
  991|       |#else
  992|   140k|  ::memcpy(&value, &word, sizeof(T));
  993|   140k|#endif
  994|   140k|}
_ZN10fast_float13binary_formatIfE10sign_indexEv:
  613|   140k|template <> inline constexpr int binary_format<float>::sign_index() {
  614|   140k|  return 31;
  615|   140k|}
_ZN10fast_float13binary_formatIfE14infinite_powerEv:
  605|   343k|template <> inline constexpr int binary_format<float>::infinite_power() {
  606|   343k|  return 0xFF;
  607|   343k|}
_ZN10fast_float15parse_options_tIcEC2ENS_12chars_formatEci:
   68|   846k|      : format(fmt), decimal_point(dot), base(b) {}
_ZN10fast_float4spanIKDiEC2Ev:
  289|   876k|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKDiEC2EPS1_m:
  287|   445k|  constexpr span(T const *_ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanIKDiE3lenEv:
  291|  3.92k|  constexpr size_t len() const noexcept { return length; }
impl.cpp:_ZN10fast_floatL11int_cmp_lenIDiEEiv:
 1031|    184|template <typename UC> static constexpr int int_cmp_len() {
 1032|    184|  return sizeof(uint64_t) / sizeof(UC);
 1033|    184|}
impl.cpp:_ZN10fast_floatL13int_cmp_zerosIDiEEmv:
 1021|    184|template <typename UC> static constexpr uint64_t int_cmp_zeros() {
 1022|    184|  static_assert((sizeof(UC) == 1) || (sizeof(UC) == 2) || (sizeof(UC) == 4),
 1023|    184|                "Unsupported character size");
 1024|    184|  return (sizeof(UC) == 1) ? 0x3030303030303030
  ------------------
  |  Branch (1024:10): [Folded - Ignored]
  ------------------
 1025|    184|         : (sizeof(UC) == 2)
  ------------------
  |  Branch (1025:12): [Folded - Ignored]
  ------------------
 1026|    184|             ? (uint64_t(UC('0')) << 48 | uint64_t(UC('0')) << 32 |
 1027|      0|                uint64_t(UC('0')) << 16 | UC('0'))
 1028|    184|             : (uint64_t(UC('0')) << 32 | UC('0'));
 1029|    184|}
_ZN10fast_float15parse_options_tIDiEC2ENS_12chars_formatEDii:
   68|   438k|      : format(fmt), decimal_point(dot), base(b) {}
_ZN10fast_float13binary_formatIdE22min_exponent_fast_pathEv:
  546|   675k|inline constexpr int binary_format<double>::min_exponent_fast_path() {
  547|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  548|       |  return 0;
  549|       |#else
  550|   675k|  return -22;
  551|   675k|#endif
  552|   675k|}
_ZN10fast_float13binary_formatIdE22max_exponent_fast_pathEv:
  618|   667k|inline constexpr int binary_format<double>::max_exponent_fast_path() {
  619|   667k|  return 22;
  620|   667k|}
_ZN10fast_float13binary_formatIdE22max_mantissa_fast_pathEv:
  628|   573k|inline constexpr uint64_t binary_format<double>::max_mantissa_fast_path() {
  629|   573k|  return uint64_t(2) << mantissa_explicit_bits();
  630|   573k|}
_ZN10fast_float13binary_formatIdE22mantissa_explicit_bitsEv:
  564|  1.48M|inline constexpr int binary_format<double>::mantissa_explicit_bits() {
  565|  1.48M|  return 52;
  566|  1.48M|}
_ZN10fast_float13binary_formatIdE18exact_power_of_tenEl:
  908|   569k|binary_format<double>::exact_power_of_ten(int64_t power) {
  909|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  910|   569k|  return (void)powers_of_ten[0], powers_of_ten[power];
  911|   569k|}
_ZN10fast_float13binary_formatIdE21smallest_power_of_tenEv:
  928|   174k|inline constexpr int binary_format<double>::smallest_power_of_ten() {
  929|   174k|  return -342;
  930|   174k|}
_ZN10fast_float13binary_formatIdE20largest_power_of_tenEv:
  919|   174k|template <> inline constexpr int binary_format<double>::largest_power_of_ten() {
  920|   174k|  return 308;
  921|   174k|}
_ZN10fast_float13binary_formatIdE16minimum_exponentEv:
  593|   230k|template <> inline constexpr int binary_format<double>::minimum_exponent() {
  594|   230k|  return -1023;
  595|   230k|}
_ZN10fast_float13binary_formatIdE26min_exponent_round_to_evenEv:
  584|  48.6k|inline constexpr int binary_format<double>::min_exponent_round_to_even() {
  585|  48.6k|  return -4;
  586|  48.6k|}
_ZN10fast_float13binary_formatIdE26max_exponent_round_to_evenEv:
  574|  27.3k|inline constexpr int binary_format<double>::max_exponent_round_to_even() {
  575|  27.3k|  return 23;
  576|  27.3k|}
_ZN10fast_float13binary_formatIdE10max_digitsEv:
  936|  30.0k|template <> inline constexpr size_t binary_format<double>::max_digits() {
  937|  30.0k|  return 769;
  938|  30.0k|}
_ZN10fast_float8to_floatIdEEvbNS_17adjusted_mantissaERT_:
  982|   133k|to_float(bool negative, adjusted_mantissa am, T &value) {
  983|   133k|  using equiv_uint = equiv_uint_t<T>;
  984|   133k|  equiv_uint word = equiv_uint(am.mantissa);
  985|   133k|  word = equiv_uint(word | equiv_uint(am.power2)
  986|   133k|                               << binary_format<T>::mantissa_explicit_bits());
  987|   133k|  word =
  988|   133k|      equiv_uint(word | equiv_uint(negative) << binary_format<T>::sign_index());
  989|       |#if FASTFLOAT_HAS_BIT_CAST
  990|       |  value = std::bit_cast<T>(word);
  991|       |#else
  992|   133k|  ::memcpy(&value, &word, sizeof(T));
  993|   133k|#endif
  994|   133k|}
_ZN10fast_float13binary_formatIdE10sign_indexEv:
  609|   133k|template <> inline constexpr int binary_format<double>::sign_index() {
  610|   133k|  return 63;
  611|   133k|}
_ZN10fast_float13binary_formatIdE14infinite_powerEv:
  601|   334k|template <> inline constexpr int binary_format<double>::infinite_power() {
  602|   334k|  return 0x7FF;
  603|   334k|}

_ZN10fast_float10from_charsIfciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   412k|           chars_format fmt /*= chars_format::general*/) noexcept {
  187|   412k|  return from_chars_caller<T>::call(first, last, value,
  188|   412k|                                    parse_options_t<UC>(fmt));
  189|   412k|}
_ZN10fast_float17from_chars_callerIfE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  144|   412k|       parse_options_t<UC> options) noexcept {
  145|   412k|    return from_chars_advanced(first, last, value, options);
  146|   412k|  }
_ZN10fast_float19from_chars_advancedIfcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  392|   412k|                    parse_options_t<UC> options) noexcept {
  393|   412k|  return from_chars_advanced_caller<
  394|   412k|      size_t(is_supported_float_type<T>::value) +
  395|   412k|      2 * size_t(is_supported_integer_type<T>::value)>::call(first, last, value,
  396|   412k|                                                             options);
  397|   412k|}
_ZN10fast_float26from_chars_advanced_callerILm1EE4callIfcEENS_19from_chars_result_tIT0_EEPKS4_S7_RT_NS_15parse_options_tIS4_EE:
  375|   412k|       parse_options_t<UC> options) noexcept {
  376|   412k|    return from_chars_float_advanced(first, last, value, options);
  377|   412k|  }
_ZN10fast_float25from_chars_float_advancedIfcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  287|   412k|                          parse_options_t<UC> options) noexcept {
  288|       |
  289|   412k|  static_assert(is_supported_float_type<T>::value,
  290|   412k|                "only some floating-point types are supported");
  291|   412k|  static_assert(is_supported_char_type<UC>::value,
  292|   412k|                "only char, wchar_t, char16_t and char32_t are supported");
  293|       |
  294|   412k|  chars_format const fmt = detail::adjust_for_feature_macros(options.format);
  295|       |
  296|   412k|  from_chars_result_t<UC> answer;
  297|   412k|  if (uint64_t(fmt & chars_format::skip_white_space)) {
  ------------------
  |  Branch (297:7): [True: 0, False: 412k]
  ------------------
  298|      0|    while ((first != last) && fast_float::is_space(*first)) {
  ------------------
  |  Branch (298:12): [True: 0, False: 0]
  |  Branch (298:31): [True: 0, False: 0]
  ------------------
  299|      0|      first++;
  300|      0|    }
  301|      0|  }
  302|   412k|  if (first == last) {
  ------------------
  |  Branch (302:7): [True: 0, False: 412k]
  ------------------
  303|      0|    answer.ec = std::errc::invalid_argument;
  304|      0|    answer.ptr = first;
  305|      0|    return answer;
  306|      0|  }
  307|   412k|  parsed_number_string_t<UC> pns =
  308|   412k|      uint64_t(fmt & detail::basic_json_fmt)
  ------------------
  |  Branch (308:7): [True: 0, False: 412k]
  ------------------
  309|   412k|          ? parse_number_string<true, UC>(first, last, options)
  310|   412k|          : parse_number_string<false, UC>(first, last, options);
  311|   412k|  if (!pns.valid) {
  ------------------
  |  Branch (311:7): [True: 0, False: 412k]
  ------------------
  312|      0|    if (uint64_t(fmt & chars_format::no_infnan)) {
  ------------------
  |  Branch (312:9): [True: 0, False: 0]
  ------------------
  313|      0|      answer.ec = std::errc::invalid_argument;
  314|      0|      answer.ptr = first;
  315|      0|      return answer;
  316|      0|    } else {
  317|      0|      return detail::parse_infnan(first, last, value, fmt);
  318|      0|    }
  319|      0|  }
  320|       |
  321|       |  // call overload that takes parsed_number_string_t directly.
  322|   412k|  return from_chars_advanced(pns, value);
  323|   412k|}
_ZN10fast_float19from_chars_advancedIfcEENS_19from_chars_result_tIT0_EERNS_22parsed_number_string_tIS2_EERT_:
  198|   412k|from_chars_advanced(parsed_number_string_t<UC> &pns, T &value) noexcept {
  199|       |
  200|   412k|  static_assert(is_supported_float_type<T>::value,
  201|   412k|                "only some floating-point types are supported");
  202|   412k|  static_assert(is_supported_char_type<UC>::value,
  203|   412k|                "only char, wchar_t, char16_t and char32_t are supported");
  204|       |
  205|   412k|  from_chars_result_t<UC> answer;
  206|       |
  207|   412k|  answer.ec = std::errc(); // be optimistic
  208|   412k|  answer.ptr = pns.lastmatch;
  209|       |  // The implementation of the Clinger's fast path is convoluted because
  210|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  211|       |  // selected on the thread.
  212|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest()
  213|       |  // returns true.
  214|   412k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent &&
  ------------------
  |  Branch (214:7): [True: 376k, False: 35.8k]
  ------------------
  215|   412k|      pns.exponent <= binary_format<T>::max_exponent_fast_path() &&
  ------------------
  |  Branch (215:7): [True: 354k, False: 22.1k]
  ------------------
  216|   412k|      !pns.too_many_digits) {
  ------------------
  |  Branch (216:7): [True: 318k, False: 36.5k]
  ------------------
  217|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  218|       |    // when the system rounds to the nearest float.
  219|       |    //
  220|       |    // We expect the next branch to almost always be selected.
  221|       |    // We could check it first (before the previous branch), but
  222|       |    // there might be performance advantages at having the check
  223|       |    // be last.
  224|   318k|    if (!cpp20_and_in_constexpr() && detail::rounds_to_nearest()) {
  ------------------
  |  Branch (224:9): [Folded - Ignored]
  |  Branch (224:38): [True: 318k, False: 0]
  ------------------
  225|       |      // We have that fegetround() == FE_TONEAREST.
  226|       |      // Next is Clinger's fast path.
  227|   318k|      if (pns.mantissa <= binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (227:11): [True: 297k, False: 20.6k]
  ------------------
  228|   297k|        value = T(pns.mantissa);
  229|   297k|        if (pns.exponent < 0) {
  ------------------
  |  Branch (229:13): [True: 6.71k, False: 290k]
  ------------------
  230|  6.71k|          value = value / binary_format<T>::exact_power_of_ten(-pns.exponent);
  231|   290k|        } else {
  232|   290k|          value = value * binary_format<T>::exact_power_of_ten(pns.exponent);
  233|   290k|        }
  234|   297k|        if (pns.negative) {
  ------------------
  |  Branch (234:13): [True: 0, False: 297k]
  ------------------
  235|      0|          value = -value;
  236|      0|        }
  237|   297k|        return answer;
  238|   297k|      }
  239|   318k|    } else {
  240|       |      // We do not have that fegetround() == FE_TONEAREST.
  241|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's
  242|       |      // proposal
  243|      0|      if (pns.exponent >= 0 &&
  ------------------
  |  Branch (243:11): [True: 0, False: 0]
  ------------------
  244|      0|          pns.mantissa <=
  ------------------
  |  Branch (244:11): [True: 0, False: 0]
  ------------------
  245|      0|              binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  246|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  247|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  248|      0|        if (pns.mantissa == 0) {
  ------------------
  |  Branch (248:13): [True: 0, False: 0]
  ------------------
  249|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (249:19): [True: 0, False: 0]
  ------------------
  250|      0|          return answer;
  251|      0|        }
  252|      0|#endif
  253|      0|        value = T(pns.mantissa) *
  254|      0|                binary_format<T>::exact_power_of_ten(pns.exponent);
  255|      0|        if (pns.negative) {
  ------------------
  |  Branch (255:13): [True: 0, False: 0]
  ------------------
  256|      0|          value = -value;
  257|      0|        }
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   318k|  }
  262|   115k|  adjusted_mantissa am =
  263|   115k|      compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  264|   115k|  if (pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (264:7): [True: 67.7k, False: 47.4k]
  |  Branch (264:30): [True: 67.7k, False: 0]
  ------------------
  265|  67.7k|    if (am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (265:9): [True: 18.9k, False: 48.7k]
  ------------------
  266|  18.9k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  267|  18.9k|    }
  268|  67.7k|  }
  269|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa)
  270|       |  // and we have an invalid power (am.power2 < 0), then we need to go the long
  271|       |  // way around again. This is very uncommon.
  272|   115k|  if (am.power2 < 0) {
  ------------------
  |  Branch (272:7): [True: 18.9k, False: 96.2k]
  ------------------
  273|  18.9k|    am = digit_comp<T>(pns, am);
  274|  18.9k|  }
  275|   115k|  to_float(pns.negative, am, value);
  276|       |  // Test for over/underflow.
  277|   115k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) ||
  ------------------
  |  Branch (277:8): [True: 112k, False: 2.76k]
  |  Branch (277:29): [True: 12.5k, False: 99.8k]
  |  Branch (277:49): [True: 821, False: 11.7k]
  ------------------
  278|   115k|      am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (278:7): [True: 4.10k, False: 110k]
  ------------------
  279|  4.92k|    answer.ec = std::errc::result_out_of_range;
  280|  4.92k|  }
  281|   115k|  return answer;
  282|   412k|}
_ZN10fast_float6detail17rounds_to_nearestEv:
   78|  1.08M|fastfloat_really_inline bool rounds_to_nearest() noexcept {
   79|       |  // https://lemire.me/blog/2020/06/26/gcc-not-nearest/
   80|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
   81|       |  return false;
   82|       |#endif
   83|       |  // See
   84|       |  // A fast function to check your floating-point rounding mode
   85|       |  // https://lemire.me/blog/2022/11/16/a-fast-function-to-check-your-floating-point-rounding-mode/
   86|       |  //
   87|       |  // This function is meant to be equivalent to :
   88|       |  // prior: #include <cfenv>
   89|       |  //  return fegetround() == FE_TONEAREST;
   90|       |  // However, it is expected to be much faster than the fegetround()
   91|       |  // function call.
   92|       |  //
   93|       |  // The volatile keyword prevents the compiler from computing the function
   94|       |  // at compile-time.
   95|       |  // There might be other ways to prevent compile-time optimizations (e.g.,
   96|       |  // asm). The value does not need to be std::numeric_limits<float>::min(), any
   97|       |  // small value so that 1 + x should round to 1 would do (after accounting for
   98|       |  // excess precision, as in 387 instructions).
   99|  1.08M|  static float volatile fmin = std::numeric_limits<float>::min();
  100|  1.08M|  float fmini = fmin; // we copy it so that it gets loaded at most once.
  101|       |//
  102|       |// Explanation:
  103|       |// Only when fegetround() == FE_TONEAREST do we have that
  104|       |// fmin + 1.0f == 1.0f - fmin.
  105|       |//
  106|       |// FE_UPWARD:
  107|       |//  fmin + 1.0f > 1
  108|       |//  1.0f - fmin == 1
  109|       |//
  110|       |// FE_DOWNWARD or  FE_TOWARDZERO:
  111|       |//  fmin + 1.0f == 1
  112|       |//  1.0f - fmin < 1
  113|       |//
  114|       |// Note: This may fail to be accurate if fast-math has been
  115|       |// enabled, as rounding conventions may not apply.
  116|       |#ifdef FASTFLOAT_VISUAL_STUDIO
  117|       |#pragma warning(push)
  118|       |//  todo: is there a VS warning?
  119|       |//  see
  120|       |//  https://stackoverflow.com/questions/46079446/is-there-a-warning-for-floating-point-equality-checking-in-visual-studio-2013
  121|       |#elif defined(__clang__)
  122|       |#pragma clang diagnostic push
  123|  1.08M|#pragma clang diagnostic ignored "-Wfloat-equal"
  124|       |#elif defined(__GNUC__)
  125|       |#pragma GCC diagnostic push
  126|       |#pragma GCC diagnostic ignored "-Wfloat-equal"
  127|       |#endif
  128|  1.08M|  return (fmini + 1.0f == 1.0f - fmini);
  129|       |#ifdef FASTFLOAT_VISUAL_STUDIO
  130|       |#pragma warning(pop)
  131|       |#elif defined(__clang__)
  132|       |#pragma clang diagnostic pop
  133|       |#elif defined(__GNUC__)
  134|       |#pragma GCC diagnostic pop
  135|       |#endif
  136|  1.08M|}
_ZN10fast_float10from_charsIfDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   196k|           chars_format fmt /*= chars_format::general*/) noexcept {
  187|   196k|  return from_chars_caller<T>::call(first, last, value,
  188|   196k|                                    parse_options_t<UC>(fmt));
  189|   196k|}
_ZN10fast_float17from_chars_callerIfE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  144|   196k|       parse_options_t<UC> options) noexcept {
  145|   196k|    return from_chars_advanced(first, last, value, options);
  146|   196k|  }
_ZN10fast_float19from_chars_advancedIfDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  392|   196k|                    parse_options_t<UC> options) noexcept {
  393|   196k|  return from_chars_advanced_caller<
  394|   196k|      size_t(is_supported_float_type<T>::value) +
  395|   196k|      2 * size_t(is_supported_integer_type<T>::value)>::call(first, last, value,
  396|   196k|                                                             options);
  397|   196k|}
_ZN10fast_float26from_chars_advanced_callerILm1EE4callIfDiEENS_19from_chars_result_tIT0_EEPKS4_S7_RT_NS_15parse_options_tIS4_EE:
  375|   196k|       parse_options_t<UC> options) noexcept {
  376|   196k|    return from_chars_float_advanced(first, last, value, options);
  377|   196k|  }
_ZN10fast_float25from_chars_float_advancedIfDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  287|   196k|                          parse_options_t<UC> options) noexcept {
  288|       |
  289|   196k|  static_assert(is_supported_float_type<T>::value,
  290|   196k|                "only some floating-point types are supported");
  291|   196k|  static_assert(is_supported_char_type<UC>::value,
  292|   196k|                "only char, wchar_t, char16_t and char32_t are supported");
  293|       |
  294|   196k|  chars_format const fmt = detail::adjust_for_feature_macros(options.format);
  295|       |
  296|   196k|  from_chars_result_t<UC> answer;
  297|   196k|  if (uint64_t(fmt & chars_format::skip_white_space)) {
  ------------------
  |  Branch (297:7): [True: 0, False: 196k]
  ------------------
  298|      0|    while ((first != last) && fast_float::is_space(*first)) {
  ------------------
  |  Branch (298:12): [True: 0, False: 0]
  |  Branch (298:31): [True: 0, False: 0]
  ------------------
  299|      0|      first++;
  300|      0|    }
  301|      0|  }
  302|   196k|  if (first == last) {
  ------------------
  |  Branch (302:7): [True: 0, False: 196k]
  ------------------
  303|      0|    answer.ec = std::errc::invalid_argument;
  304|      0|    answer.ptr = first;
  305|      0|    return answer;
  306|      0|  }
  307|   196k|  parsed_number_string_t<UC> pns =
  308|   196k|      uint64_t(fmt & detail::basic_json_fmt)
  ------------------
  |  Branch (308:7): [True: 0, False: 196k]
  ------------------
  309|   196k|          ? parse_number_string<true, UC>(first, last, options)
  310|   196k|          : parse_number_string<false, UC>(first, last, options);
  311|   196k|  if (!pns.valid) {
  ------------------
  |  Branch (311:7): [True: 0, False: 196k]
  ------------------
  312|      0|    if (uint64_t(fmt & chars_format::no_infnan)) {
  ------------------
  |  Branch (312:9): [True: 0, False: 0]
  ------------------
  313|      0|      answer.ec = std::errc::invalid_argument;
  314|      0|      answer.ptr = first;
  315|      0|      return answer;
  316|      0|    } else {
  317|      0|      return detail::parse_infnan(first, last, value, fmt);
  318|      0|    }
  319|      0|  }
  320|       |
  321|       |  // call overload that takes parsed_number_string_t directly.
  322|   196k|  return from_chars_advanced(pns, value);
  323|   196k|}
_ZN10fast_float19from_chars_advancedIfDiEENS_19from_chars_result_tIT0_EERNS_22parsed_number_string_tIS2_EERT_:
  198|   196k|from_chars_advanced(parsed_number_string_t<UC> &pns, T &value) noexcept {
  199|       |
  200|   196k|  static_assert(is_supported_float_type<T>::value,
  201|   196k|                "only some floating-point types are supported");
  202|   196k|  static_assert(is_supported_char_type<UC>::value,
  203|   196k|                "only char, wchar_t, char16_t and char32_t are supported");
  204|       |
  205|   196k|  from_chars_result_t<UC> answer;
  206|       |
  207|   196k|  answer.ec = std::errc(); // be optimistic
  208|   196k|  answer.ptr = pns.lastmatch;
  209|       |  // The implementation of the Clinger's fast path is convoluted because
  210|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  211|       |  // selected on the thread.
  212|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest()
  213|       |  // returns true.
  214|   196k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent &&
  ------------------
  |  Branch (214:7): [True: 195k, False: 1.81k]
  ------------------
  215|   196k|      pns.exponent <= binary_format<T>::max_exponent_fast_path() &&
  ------------------
  |  Branch (215:7): [True: 191k, False: 3.64k]
  ------------------
  216|   196k|      !pns.too_many_digits) {
  ------------------
  |  Branch (216:7): [True: 191k, False: 344]
  ------------------
  217|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  218|       |    // when the system rounds to the nearest float.
  219|       |    //
  220|       |    // We expect the next branch to almost always be selected.
  221|       |    // We could check it first (before the previous branch), but
  222|       |    // there might be performance advantages at having the check
  223|       |    // be last.
  224|   191k|    if (!cpp20_and_in_constexpr() && detail::rounds_to_nearest()) {
  ------------------
  |  Branch (224:9): [Folded - Ignored]
  |  Branch (224:38): [True: 191k, False: 0]
  ------------------
  225|       |      // We have that fegetround() == FE_TONEAREST.
  226|       |      // Next is Clinger's fast path.
  227|   191k|      if (pns.mantissa <= binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (227:11): [True: 190k, False: 574]
  ------------------
  228|   190k|        value = T(pns.mantissa);
  229|   190k|        if (pns.exponent < 0) {
  ------------------
  |  Branch (229:13): [True: 2.08k, False: 188k]
  ------------------
  230|  2.08k|          value = value / binary_format<T>::exact_power_of_ten(-pns.exponent);
  231|   188k|        } else {
  232|   188k|          value = value * binary_format<T>::exact_power_of_ten(pns.exponent);
  233|   188k|        }
  234|   190k|        if (pns.negative) {
  ------------------
  |  Branch (234:13): [True: 0, False: 190k]
  ------------------
  235|      0|          value = -value;
  236|      0|        }
  237|   190k|        return answer;
  238|   190k|      }
  239|   191k|    } else {
  240|       |      // We do not have that fegetround() == FE_TONEAREST.
  241|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's
  242|       |      // proposal
  243|      0|      if (pns.exponent >= 0 &&
  ------------------
  |  Branch (243:11): [True: 0, False: 0]
  ------------------
  244|      0|          pns.mantissa <=
  ------------------
  |  Branch (244:11): [True: 0, False: 0]
  ------------------
  245|      0|              binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  246|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  247|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  248|      0|        if (pns.mantissa == 0) {
  ------------------
  |  Branch (248:13): [True: 0, False: 0]
  ------------------
  249|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (249:19): [True: 0, False: 0]
  ------------------
  250|      0|          return answer;
  251|      0|        }
  252|      0|#endif
  253|      0|        value = T(pns.mantissa) *
  254|      0|                binary_format<T>::exact_power_of_ten(pns.exponent);
  255|      0|        if (pns.negative) {
  ------------------
  |  Branch (255:13): [True: 0, False: 0]
  ------------------
  256|      0|          value = -value;
  257|      0|        }
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   191k|  }
  262|  6.36k|  adjusted_mantissa am =
  263|  6.36k|      compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  264|  6.36k|  if (pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (264:7): [True: 1.12k, False: 5.24k]
  |  Branch (264:30): [True: 1.12k, False: 0]
  ------------------
  265|  1.12k|    if (am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (265:9): [True: 0, False: 1.12k]
  ------------------
  266|      0|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  267|      0|    }
  268|  1.12k|  }
  269|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa)
  270|       |  // and we have an invalid power (am.power2 < 0), then we need to go the long
  271|       |  // way around again. This is very uncommon.
  272|  6.36k|  if (am.power2 < 0) {
  ------------------
  |  Branch (272:7): [True: 0, False: 6.36k]
  ------------------
  273|      0|    am = digit_comp<T>(pns, am);
  274|      0|  }
  275|  6.36k|  to_float(pns.negative, am, value);
  276|       |  // Test for over/underflow.
  277|  6.36k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) ||
  ------------------
  |  Branch (277:8): [True: 5.76k, False: 602]
  |  Branch (277:29): [True: 3.72k, False: 2.04k]
  |  Branch (277:49): [True: 854, False: 2.87k]
  ------------------
  278|  6.36k|      am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (278:7): [True: 2.87k, False: 2.64k]
  ------------------
  279|  3.72k|    answer.ec = std::errc::result_out_of_range;
  280|  3.72k|  }
  281|  6.36k|  return answer;
  282|   196k|}
_ZN10fast_float10from_charsIdciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   433k|           chars_format fmt /*= chars_format::general*/) noexcept {
  187|   433k|  return from_chars_caller<T>::call(first, last, value,
  188|   433k|                                    parse_options_t<UC>(fmt));
  189|   433k|}
_ZN10fast_float17from_chars_callerIdE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  144|   433k|       parse_options_t<UC> options) noexcept {
  145|   433k|    return from_chars_advanced(first, last, value, options);
  146|   433k|  }
_ZN10fast_float19from_chars_advancedIdcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  392|   433k|                    parse_options_t<UC> options) noexcept {
  393|   433k|  return from_chars_advanced_caller<
  394|   433k|      size_t(is_supported_float_type<T>::value) +
  395|   433k|      2 * size_t(is_supported_integer_type<T>::value)>::call(first, last, value,
  396|   433k|                                                             options);
  397|   433k|}
_ZN10fast_float26from_chars_advanced_callerILm1EE4callIdcEENS_19from_chars_result_tIT0_EEPKS4_S7_RT_NS_15parse_options_tIS4_EE:
  375|   433k|       parse_options_t<UC> options) noexcept {
  376|   433k|    return from_chars_float_advanced(first, last, value, options);
  377|   433k|  }
_ZN10fast_float25from_chars_float_advancedIdcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  287|   433k|                          parse_options_t<UC> options) noexcept {
  288|       |
  289|   433k|  static_assert(is_supported_float_type<T>::value,
  290|   433k|                "only some floating-point types are supported");
  291|   433k|  static_assert(is_supported_char_type<UC>::value,
  292|   433k|                "only char, wchar_t, char16_t and char32_t are supported");
  293|       |
  294|   433k|  chars_format const fmt = detail::adjust_for_feature_macros(options.format);
  295|       |
  296|   433k|  from_chars_result_t<UC> answer;
  297|   433k|  if (uint64_t(fmt & chars_format::skip_white_space)) {
  ------------------
  |  Branch (297:7): [True: 0, False: 433k]
  ------------------
  298|      0|    while ((first != last) && fast_float::is_space(*first)) {
  ------------------
  |  Branch (298:12): [True: 0, False: 0]
  |  Branch (298:31): [True: 0, False: 0]
  ------------------
  299|      0|      first++;
  300|      0|    }
  301|      0|  }
  302|   433k|  if (first == last) {
  ------------------
  |  Branch (302:7): [True: 0, False: 433k]
  ------------------
  303|      0|    answer.ec = std::errc::invalid_argument;
  304|      0|    answer.ptr = first;
  305|      0|    return answer;
  306|      0|  }
  307|   433k|  parsed_number_string_t<UC> pns =
  308|   433k|      uint64_t(fmt & detail::basic_json_fmt)
  ------------------
  |  Branch (308:7): [True: 0, False: 433k]
  ------------------
  309|   433k|          ? parse_number_string<true, UC>(first, last, options)
  310|   433k|          : parse_number_string<false, UC>(first, last, options);
  311|   433k|  if (!pns.valid) {
  ------------------
  |  Branch (311:7): [True: 0, False: 433k]
  ------------------
  312|      0|    if (uint64_t(fmt & chars_format::no_infnan)) {
  ------------------
  |  Branch (312:9): [True: 0, False: 0]
  ------------------
  313|      0|      answer.ec = std::errc::invalid_argument;
  314|      0|      answer.ptr = first;
  315|      0|      return answer;
  316|      0|    } else {
  317|      0|      return detail::parse_infnan(first, last, value, fmt);
  318|      0|    }
  319|      0|  }
  320|       |
  321|       |  // call overload that takes parsed_number_string_t directly.
  322|   433k|  return from_chars_advanced(pns, value);
  323|   433k|}
_ZN10fast_float19from_chars_advancedIdcEENS_19from_chars_result_tIT0_EERNS_22parsed_number_string_tIS2_EERT_:
  198|   433k|from_chars_advanced(parsed_number_string_t<UC> &pns, T &value) noexcept {
  199|       |
  200|   433k|  static_assert(is_supported_float_type<T>::value,
  201|   433k|                "only some floating-point types are supported");
  202|   433k|  static_assert(is_supported_char_type<UC>::value,
  203|   433k|                "only char, wchar_t, char16_t and char32_t are supported");
  204|       |
  205|   433k|  from_chars_result_t<UC> answer;
  206|       |
  207|   433k|  answer.ec = std::errc(); // be optimistic
  208|   433k|  answer.ptr = pns.lastmatch;
  209|       |  // The implementation of the Clinger's fast path is convoluted because
  210|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  211|       |  // selected on the thread.
  212|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest()
  213|       |  // returns true.
  214|   433k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent &&
  ------------------
  |  Branch (214:7): [True: 427k, False: 5.99k]
  ------------------
  215|   433k|      pns.exponent <= binary_format<T>::max_exponent_fast_path() &&
  ------------------
  |  Branch (215:7): [True: 405k, False: 21.8k]
  ------------------
  216|   433k|      !pns.too_many_digits) {
  ------------------
  |  Branch (216:7): [True: 339k, False: 65.9k]
  ------------------
  217|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  218|       |    // when the system rounds to the nearest float.
  219|       |    //
  220|       |    // We expect the next branch to almost always be selected.
  221|       |    // We could check it first (before the previous branch), but
  222|       |    // there might be performance advantages at having the check
  223|       |    // be last.
  224|   339k|    if (!cpp20_and_in_constexpr() && detail::rounds_to_nearest()) {
  ------------------
  |  Branch (224:9): [Folded - Ignored]
  |  Branch (224:38): [True: 339k, False: 0]
  ------------------
  225|       |      // We have that fegetround() == FE_TONEAREST.
  226|       |      // Next is Clinger's fast path.
  227|   339k|      if (pns.mantissa <= binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (227:11): [True: 335k, False: 4.27k]
  ------------------
  228|   335k|        value = T(pns.mantissa);
  229|   335k|        if (pns.exponent < 0) {
  ------------------
  |  Branch (229:13): [True: 18.0k, False: 317k]
  ------------------
  230|  18.0k|          value = value / binary_format<T>::exact_power_of_ten(-pns.exponent);
  231|   317k|        } else {
  232|   317k|          value = value * binary_format<T>::exact_power_of_ten(pns.exponent);
  233|   317k|        }
  234|   335k|        if (pns.negative) {
  ------------------
  |  Branch (234:13): [True: 0, False: 335k]
  ------------------
  235|      0|          value = -value;
  236|      0|        }
  237|   335k|        return answer;
  238|   335k|      }
  239|   339k|    } else {
  240|       |      // We do not have that fegetround() == FE_TONEAREST.
  241|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's
  242|       |      // proposal
  243|      0|      if (pns.exponent >= 0 &&
  ------------------
  |  Branch (243:11): [True: 0, False: 0]
  ------------------
  244|      0|          pns.mantissa <=
  ------------------
  |  Branch (244:11): [True: 0, False: 0]
  ------------------
  245|      0|              binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  246|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  247|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  248|      0|        if (pns.mantissa == 0) {
  ------------------
  |  Branch (248:13): [True: 0, False: 0]
  ------------------
  249|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (249:19): [True: 0, False: 0]
  ------------------
  250|      0|          return answer;
  251|      0|        }
  252|      0|#endif
  253|      0|        value = T(pns.mantissa) *
  254|      0|                binary_format<T>::exact_power_of_ten(pns.exponent);
  255|      0|        if (pns.negative) {
  ------------------
  |  Branch (255:13): [True: 0, False: 0]
  ------------------
  256|      0|          value = -value;
  257|      0|        }
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   339k|  }
  262|  98.0k|  adjusted_mantissa am =
  263|  98.0k|      compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  264|  98.0k|  if (pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (264:7): [True: 71.2k, False: 26.7k]
  |  Branch (264:30): [True: 71.2k, False: 0]
  ------------------
  265|  71.2k|    if (am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (265:9): [True: 29.8k, False: 41.4k]
  ------------------
  266|  29.8k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  267|  29.8k|    }
  268|  71.2k|  }
  269|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa)
  270|       |  // and we have an invalid power (am.power2 < 0), then we need to go the long
  271|       |  // way around again. This is very uncommon.
  272|  98.0k|  if (am.power2 < 0) {
  ------------------
  |  Branch (272:7): [True: 29.8k, False: 68.1k]
  ------------------
  273|  29.8k|    am = digit_comp<T>(pns, am);
  274|  29.8k|  }
  275|  98.0k|  to_float(pns.negative, am, value);
  276|       |  // Test for over/underflow.
  277|  98.0k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) ||
  ------------------
  |  Branch (277:8): [True: 95.5k, False: 2.53k]
  |  Branch (277:29): [True: 7.75k, False: 87.7k]
  |  Branch (277:49): [True: 237, False: 7.51k]
  ------------------
  278|  98.0k|      am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (278:7): [True: 2.14k, False: 95.6k]
  ------------------
  279|  2.38k|    answer.ec = std::errc::result_out_of_range;
  280|  2.38k|  }
  281|  98.0k|  return answer;
  282|   433k|}
_ZN10fast_float10from_charsIdDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   241k|           chars_format fmt /*= chars_format::general*/) noexcept {
  187|   241k|  return from_chars_caller<T>::call(first, last, value,
  188|   241k|                                    parse_options_t<UC>(fmt));
  189|   241k|}
_ZN10fast_float17from_chars_callerIdE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  144|   241k|       parse_options_t<UC> options) noexcept {
  145|   241k|    return from_chars_advanced(first, last, value, options);
  146|   241k|  }
_ZN10fast_float19from_chars_advancedIdDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  392|   241k|                    parse_options_t<UC> options) noexcept {
  393|   241k|  return from_chars_advanced_caller<
  394|   241k|      size_t(is_supported_float_type<T>::value) +
  395|   241k|      2 * size_t(is_supported_integer_type<T>::value)>::call(first, last, value,
  396|   241k|                                                             options);
  397|   241k|}
_ZN10fast_float26from_chars_advanced_callerILm1EE4callIdDiEENS_19from_chars_result_tIT0_EEPKS4_S7_RT_NS_15parse_options_tIS4_EE:
  375|   241k|       parse_options_t<UC> options) noexcept {
  376|   241k|    return from_chars_float_advanced(first, last, value, options);
  377|   241k|  }
_ZN10fast_float25from_chars_float_advancedIdDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  287|   241k|                          parse_options_t<UC> options) noexcept {
  288|       |
  289|   241k|  static_assert(is_supported_float_type<T>::value,
  290|   241k|                "only some floating-point types are supported");
  291|   241k|  static_assert(is_supported_char_type<UC>::value,
  292|   241k|                "only char, wchar_t, char16_t and char32_t are supported");
  293|       |
  294|   241k|  chars_format const fmt = detail::adjust_for_feature_macros(options.format);
  295|       |
  296|   241k|  from_chars_result_t<UC> answer;
  297|   241k|  if (uint64_t(fmt & chars_format::skip_white_space)) {
  ------------------
  |  Branch (297:7): [True: 0, False: 241k]
  ------------------
  298|      0|    while ((first != last) && fast_float::is_space(*first)) {
  ------------------
  |  Branch (298:12): [True: 0, False: 0]
  |  Branch (298:31): [True: 0, False: 0]
  ------------------
  299|      0|      first++;
  300|      0|    }
  301|      0|  }
  302|   241k|  if (first == last) {
  ------------------
  |  Branch (302:7): [True: 0, False: 241k]
  ------------------
  303|      0|    answer.ec = std::errc::invalid_argument;
  304|      0|    answer.ptr = first;
  305|      0|    return answer;
  306|      0|  }
  307|   241k|  parsed_number_string_t<UC> pns =
  308|   241k|      uint64_t(fmt & detail::basic_json_fmt)
  ------------------
  |  Branch (308:7): [True: 0, False: 241k]
  ------------------
  309|   241k|          ? parse_number_string<true, UC>(first, last, options)
  310|   241k|          : parse_number_string<false, UC>(first, last, options);
  311|   241k|  if (!pns.valid) {
  ------------------
  |  Branch (311:7): [True: 0, False: 241k]
  ------------------
  312|      0|    if (uint64_t(fmt & chars_format::no_infnan)) {
  ------------------
  |  Branch (312:9): [True: 0, False: 0]
  ------------------
  313|      0|      answer.ec = std::errc::invalid_argument;
  314|      0|      answer.ptr = first;
  315|      0|      return answer;
  316|      0|    } else {
  317|      0|      return detail::parse_infnan(first, last, value, fmt);
  318|      0|    }
  319|      0|  }
  320|       |
  321|       |  // call overload that takes parsed_number_string_t directly.
  322|   241k|  return from_chars_advanced(pns, value);
  323|   241k|}
_ZN10fast_float19from_chars_advancedIdDiEENS_19from_chars_result_tIT0_EERNS_22parsed_number_string_tIS2_EERT_:
  198|   241k|from_chars_advanced(parsed_number_string_t<UC> &pns, T &value) noexcept {
  199|       |
  200|   241k|  static_assert(is_supported_float_type<T>::value,
  201|   241k|                "only some floating-point types are supported");
  202|   241k|  static_assert(is_supported_char_type<UC>::value,
  203|   241k|                "only char, wchar_t, char16_t and char32_t are supported");
  204|       |
  205|   241k|  from_chars_result_t<UC> answer;
  206|       |
  207|   241k|  answer.ec = std::errc(); // be optimistic
  208|   241k|  answer.ptr = pns.lastmatch;
  209|       |  // The implementation of the Clinger's fast path is convoluted because
  210|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  211|       |  // selected on the thread.
  212|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest()
  213|       |  // returns true.
  214|   241k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent &&
  ------------------
  |  Branch (214:7): [True: 239k, False: 1.85k]
  ------------------
  215|   241k|      pns.exponent <= binary_format<T>::max_exponent_fast_path() &&
  ------------------
  |  Branch (215:7): [True: 234k, False: 4.61k]
  ------------------
  216|   241k|      !pns.too_many_digits) {
  ------------------
  |  Branch (216:7): [True: 233k, False: 924]
  ------------------
  217|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  218|       |    // when the system rounds to the nearest float.
  219|       |    //
  220|       |    // We expect the next branch to almost always be selected.
  221|       |    // We could check it first (before the previous branch), but
  222|       |    // there might be performance advantages at having the check
  223|       |    // be last.
  224|   233k|    if (!cpp20_and_in_constexpr() && detail::rounds_to_nearest()) {
  ------------------
  |  Branch (224:9): [Folded - Ignored]
  |  Branch (224:38): [True: 233k, False: 0]
  ------------------
  225|       |      // We have that fegetround() == FE_TONEAREST.
  226|       |      // Next is Clinger's fast path.
  227|   233k|      if (pns.mantissa <= binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (227:11): [True: 233k, False: 252]
  ------------------
  228|   233k|        value = T(pns.mantissa);
  229|   233k|        if (pns.exponent < 0) {
  ------------------
  |  Branch (229:13): [True: 2.36k, False: 231k]
  ------------------
  230|  2.36k|          value = value / binary_format<T>::exact_power_of_ten(-pns.exponent);
  231|   231k|        } else {
  232|   231k|          value = value * binary_format<T>::exact_power_of_ten(pns.exponent);
  233|   231k|        }
  234|   233k|        if (pns.negative) {
  ------------------
  |  Branch (234:13): [True: 0, False: 233k]
  ------------------
  235|      0|          value = -value;
  236|      0|        }
  237|   233k|        return answer;
  238|   233k|      }
  239|   233k|    } else {
  240|       |      // We do not have that fegetround() == FE_TONEAREST.
  241|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's
  242|       |      // proposal
  243|      0|      if (pns.exponent >= 0 &&
  ------------------
  |  Branch (243:11): [True: 0, False: 0]
  ------------------
  244|      0|          pns.mantissa <=
  ------------------
  |  Branch (244:11): [True: 0, False: 0]
  ------------------
  245|      0|              binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  246|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  247|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  248|      0|        if (pns.mantissa == 0) {
  ------------------
  |  Branch (248:13): [True: 0, False: 0]
  ------------------
  249|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (249:19): [True: 0, False: 0]
  ------------------
  250|      0|          return answer;
  251|      0|        }
  252|      0|#endif
  253|      0|        value = T(pns.mantissa) *
  254|      0|                binary_format<T>::exact_power_of_ten(pns.exponent);
  255|      0|        if (pns.negative) {
  ------------------
  |  Branch (255:13): [True: 0, False: 0]
  ------------------
  256|      0|          value = -value;
  257|      0|        }
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   233k|  }
  262|  7.64k|  adjusted_mantissa am =
  263|  7.64k|      compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  264|  7.64k|  if (pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (264:7): [True: 1.13k, False: 6.51k]
  |  Branch (264:30): [True: 1.13k, False: 0]
  ------------------
  265|  1.13k|    if (am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (265:9): [True: 184, False: 950]
  ------------------
  266|    184|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  267|    184|    }
  268|  1.13k|  }
  269|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa)
  270|       |  // and we have an invalid power (am.power2 < 0), then we need to go the long
  271|       |  // way around again. This is very uncommon.
  272|  7.64k|  if (am.power2 < 0) {
  ------------------
  |  Branch (272:7): [True: 184, False: 7.46k]
  ------------------
  273|    184|    am = digit_comp<T>(pns, am);
  274|    184|  }
  275|  7.64k|  to_float(pns.negative, am, value);
  276|       |  // Test for over/underflow.
  277|  7.64k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) ||
  ------------------
  |  Branch (277:8): [True: 7.00k, False: 644]
  |  Branch (277:29): [True: 1.83k, False: 5.16k]
  |  Branch (277:49): [True: 198, False: 1.63k]
  ------------------
  278|  7.64k|      am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (278:7): [True: 1.63k, False: 5.80k]
  ------------------
  279|  1.83k|    answer.ec = std::errc::result_out_of_range;
  280|  1.83k|  }
  281|  7.64k|  return answer;
  282|   241k|}

_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIccEEDaSG_SQ_:
  880|  3.21M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIwcEEDaSG_SQ_:
  880|  1.82M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  880|  1.83M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v46detail39code_point_length_by_starting_code_unitIcEEmT_:
 4067|  2.94M|{
 4068|  2.94M|    if constexpr (sizeof(U) == 1) {
 4069|  2.94M|        return utf8_code_point_length_by_starting_code_unit(ch);
 4070|       |    }
 4071|       |    else if constexpr (sizeof(U) == 2) {
 4072|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4073|       |    }
 4074|       |    else {
 4075|       |        // utf-32
 4076|       |        static_assert(sizeof(U) == 4);
 4077|       |        SCN_UNUSED(ch);
 4078|       |        return 1;
 4079|       |    }
 4080|  2.94M|}
_ZN3scn2v46detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 4031|  2.94M|{
 4032|  2.94M|    static_assert(sizeof(U8) == 1);
 4033|       |
 4034|  2.94M|    SCN_GCC_COMPAT_PUSH
 4035|  2.94M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 4036|  2.94M|    constexpr char lengths[] =
 4037|  2.94M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 4038|  2.94M|        "\1\1\1\1\1\1\1\1"
 4039|  2.94M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 4040|       |                            // byte
 4041|  2.94M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 4042|  2.94M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 4043|  2.94M|        "\4";               // highest bits 11110 -> 4-byte cp
 4044|  2.94M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 4045|  2.94M|    SCN_GCC_COMPAT_POP
 4046|  2.94M|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4273|  2.65M|{
 4274|  2.65M|    if constexpr (sizeof(CharT) == 1) {
 4275|  2.65M|        return decode_utf8_code_point_exhaustive(input);
 4276|       |    }
 4277|       |    else if constexpr (sizeof(CharT) == 2) {
 4278|       |        return decode_utf16_code_point_exhaustive(input);
 4279|       |    }
 4280|       |    else {
 4281|       |        SCN_EXPECT(input.size() == 1);
 4282|       |        auto cp = static_cast<char32_t>(input.front());
 4283|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4284|       |            return invalid_code_point;
 4285|       |        }
 4286|       |        return cp;
 4287|       |    }
 4288|  2.65M|}
_ZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4086|  2.65M|{
 4087|  2.65M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  945|  2.65M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  2.65M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4088|       |
 4089|  2.65M|    const auto is_trailing_code_unit = [](char ch) {
 4090|  2.65M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4091|  2.65M|    };
 4092|       |
 4093|  2.65M|    if (input.size() == 1) {
  ------------------
  |  Branch (4093:9): [True: 2.59M, False: 60.9k]
  ------------------
 4094|  2.59M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (4094:13): [True: 707, False: 2.59M]
  ------------------
 4095|    707|            SCN_UNLIKELY_ATTR
 4096|    707|            return invalid_code_point;
 4097|    707|        }
 4098|  2.59M|        return static_cast<char32_t>(input[0]);
 4099|  2.59M|    }
 4100|       |
 4101|  60.9k|    if (input.size() == 2) {
  ------------------
  |  Branch (4101:9): [True: 55.9k, False: 4.99k]
  ------------------
 4102|  55.9k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (4102:13): [True: 142, False: 55.8k]
  ------------------
 4103|    142|            SCN_UNLIKELY_ATTR
 4104|    142|            return invalid_code_point;
 4105|    142|        }
 4106|  55.8k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (4106:13): [True: 4.46k, False: 51.3k]
  ------------------
 4107|  4.46k|            SCN_UNLIKELY_ATTR
 4108|  4.46k|            return invalid_code_point;
 4109|  4.46k|        }
 4110|       |
 4111|  51.3k|        char32_t cp{};
 4112|  51.3k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 4113|  51.3k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 4114|  51.3k|        return cp;
 4115|  55.8k|    }
 4116|       |
 4117|  4.99k|    if (input.size() == 3) {
  ------------------
  |  Branch (4117:9): [True: 2.30k, False: 2.69k]
  ------------------
 4118|  2.30k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (4118:13): [True: 161, False: 2.14k]
  ------------------
 4119|    161|            SCN_UNLIKELY_ATTR
 4120|    161|            return invalid_code_point;
 4121|    161|        }
 4122|  2.14k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4122:13): [True: 525, False: 1.62k]
  ------------------
 4123|  2.14k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (4123:13): [True: 818, False: 802]
  ------------------
 4124|  1.34k|            SCN_UNLIKELY_ATTR
 4125|  1.34k|            return invalid_code_point;
 4126|  1.34k|        }
 4127|       |
 4128|    802|        char32_t cp{};
 4129|    802|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 4130|    802|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 4131|    802|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 4132|    802|        return cp;
 4133|  2.14k|    }
 4134|       |
 4135|  2.69k|    if (input.size() == 4) {
  ------------------
  |  Branch (4135:9): [True: 2.69k, False: 0]
  ------------------
 4136|  2.69k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (4136:13): [True: 0, False: 2.69k]
  ------------------
 4137|      0|            SCN_UNLIKELY_ATTR
 4138|      0|            return invalid_code_point;
 4139|      0|        }
 4140|  2.69k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (4140:13): [True: 476, False: 2.21k]
  ------------------
 4141|    476|            SCN_UNLIKELY_ATTR
 4142|    476|            return invalid_code_point;
 4143|    476|        }
 4144|  2.21k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4144:13): [True: 528, False: 1.68k]
  ------------------
 4145|  2.21k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (4145:13): [True: 555, False: 1.13k]
  ------------------
 4146|  2.21k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (4146:13): [True: 828, False: 304]
  ------------------
 4147|  1.91k|            SCN_UNLIKELY_ATTR
 4148|  1.91k|            return invalid_code_point;
 4149|  1.91k|        }
 4150|       |
 4151|    304|        char32_t cp{};
 4152|    304|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 4153|    304|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 4154|    304|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 4155|    304|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 4156|    304|        return cp;
 4157|  2.21k|    }
 4158|       |
 4159|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 4160|       |    // gcc 7 thinks we'll get here, even when we won't
 4161|      0|    SCN_EXPECT(false);
  ------------------
  |  |  945|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4162|      0|#endif
 4163|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  908|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4164|      0|}
_ZZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 4089|  64.6k|    const auto is_trailing_code_unit = [](char ch) {
 4090|  64.6k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4091|  64.6k|    };
_ZN3scn2v46detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3959|  4.41M|{
 3960|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3961|       |                                          decltype(first), decltype(last)> &&
 3962|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3963|       |        return {first, last};
 3964|       |    }
 3965|  4.41M|    else {
 3966|  4.41M|        return {to_address(first), static_cast<size_t>(std::distance(
 3967|  4.41M|                                       to_address(first), to_address(last)))};
 3968|  4.41M|    }
 3969|  4.41M|}
_ZN3scn2v46detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  13.4M|{
  316|  13.4M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  951|  13.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  13.4M|}
_ZN3scn2v46detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  293|  21.7M|{
  294|  21.7M|    return p;
  295|  21.7M|}
_ZN3scn2v46detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3990|  6.92M|{
 3991|       |    if constexpr (std::is_constructible_v<
 3992|       |                      typename std::basic_string_view<CharT>::iterator,
 3993|       |                      decltype(it)> &&
 3994|  6.92M|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3995|  6.92M|        SCN_UNUSED(sv);
  ------------------
  |  |  930|  6.92M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3996|  6.92M|        return it;
 3997|       |    }
 3998|       |    else {
 3999|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 4000|       |    }
 4001|  6.92M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  94.2k|    {
 2869|  94.2k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  951|  94.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  94.2k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  94.2k|    {
 2850|  94.2k|        return decay_copy(t.begin());
 2851|  94.2k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 2093|  11.1M|{
 2094|  11.1M|    return SCN_FWD(t);
  ------------------
  |  |  951|  11.1M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  11.1M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  1.87M|    {
 2926|  1.87M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  951|  1.87M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  1.87M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  1.87M|    {
 2908|  1.87M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  951|  1.87M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  1.87M|    }
_ZN3scn2v44scanIJfENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9704|   136k|{
 9705|   136k|    auto result = make_scan_result<Source, Args...>();
 9706|   136k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  951|   136k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9707|   136k|                                   make_scan_args(result->values())));
 9708|   136k|    return result;
 9709|   136k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEEDav:
 9660|   301k|{
 9661|   301k|    return scan_result_type<Source, Args...>();
 9662|   301k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2Ev:
 1551|   301k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2Ev:
  426|   301k|        : m_value(T{}), m_has_value(true)
  427|   301k|    {
  428|   301k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2Ev:
 6610|   301k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2Ev:
 6453|   934k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2Ev:
 3459|   934k|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJfEEC2Ev:
 6384|  1.02M|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9645|   301k|{
 9646|   301k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  880|   301k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 30.6k, False: 271k]
  |  |  ------------------
  ------------------
 9647|  30.6k|        out = unexpected(in.error());
 9648|  30.6k|    }
 9649|   271k|    else {
 9650|   271k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  949|   271k|    static_cast<    \
  |  |  950|   271k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|   271k|    }
 9652|   301k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1739|   934k|    {
 1740|   934k|        return has_value();
 1741|   934k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.86M|    {
  490|  1.86M|        return m_has_value;
  491|  1.86M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1745|  91.8k|    {
 1746|  91.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  945|  91.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  91.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  91.8k|        return this->get_unexpected().error();
 1748|  91.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  91.8k|    {
  473|  91.8k|        return m_unexpected;
  474|  91.8k|    }
_ZNR3scn2v410unexpectedINS0_10scan_errorEE5errorEv:
  364|  14.4M|    {
  365|  14.4M|        return m_unexpected;
  366|  14.4M|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  349|  3.58M|        : m_unexpected(std::forward<Err>(e))
  350|  3.58M|    {
  351|  3.58M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  930|  3.58M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  3.58M|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  30.6k|        : base(unexpect, std::move(e.error())),
 1616|  30.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  30.6k|    {
 1618|  30.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  30.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  30.6k|          m_has_value(false)
  451|  30.6k|    {
  452|  30.6k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  358|  10.6M|        : m_unexpected(std::forward<Args>(args)...)
  359|  10.6M|    {
  360|  10.6M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  930|  10.6M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  10.6M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  30.6k|    {
 1316|  30.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEaSEOSC_:
 1556|  30.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorEvEaSEOSD_:
  902|  30.6k|    {
  903|  30.6k|        assign_common(std::move(other));
  904|  30.6k|        return *this;
  905|  30.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  30.6k|    {
  950|  30.6k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 30.6k, False: 0]
  ------------------
  951|  30.6k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 30.6k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  30.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  30.6k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.20M|    {
  490|  1.20M|        return m_has_value;
  491|  1.20M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   844k|    {
  456|   844k|        return m_value;
  457|   844k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  30.6k|    {
 1046|  30.6k|        this->destroy_value();
 1047|  30.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  30.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  30.6k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  30.6k|    {
  504|  30.6k|        scn::detail::construct_at(&get_unexpected(),
  505|  30.6k|                                  std::forward<Args>(args)...);
  506|  30.6k|        m_has_value = false;
  507|  30.6k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJS5_EEEPT_S7_DpOT0_:
  395|   551k|{
  396|   551k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   551k|        T(std::forward<Args>(args)...);
  398|   551k|}
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  30.6k|    {
  473|  30.6k|        return m_unexpected;
  474|  30.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  30.6k|    {
  481|  30.6k|        return std::move(m_unexpected);
  482|  30.6k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE9set_rangeIS9_EEvOT_:
 6484|   842k|    {
 6485|   842k|        m_range = std::forward<Other>(r);
 6486|   842k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1794|   842k|    {
 1795|   842k|        return value();
 1796|   842k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|   842k|    {
 1769|   842k|        SCN_EXPECT(has_value());
  ------------------
  |  |  945|   842k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   842k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   842k|        return this->get_value();
 1771|   842k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|   842k|    {
  456|   842k|        return m_value;
  457|   842k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9484|   421k|{
 9485|   421k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  951|   421k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9486|   421k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9421|   421k|{
 9422|   421k|    auto buffer = make_scan_buffer(range);
 9423|       |
 9424|   421k|    auto result = vscan_impl(buffer, format, args);
 9425|   421k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  880|   421k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 42.4k, False: 378k]
  |  |  ------------------
  ------------------
 9426|  42.4k|        return unexpected(result.error());
 9427|  42.4k|    }
 9428|   378k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  951|   378k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9429|   421k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 5380|   934k|{
 5381|   934k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|   934k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|   934k|                  "\n"
 5385|   934k|                  "Unsupported range type given as input to a scanning "
 5386|   934k|                  "function.\n"
 5387|   934k|                  "A range needs to have a character type (value type) "
 5388|   934k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|   934k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|   934k|                  "to be included.\n"
 5391|   934k|                  "See the scnlib documentation for more details.");
 5392|   934k|    static_assert(
 5393|   934k|        !std::is_same_v<T, custom_char_traits>,
 5394|   934k|        "\n"
 5395|   934k|        "Unsupported range type given as input to a scanning "
 5396|   934k|        "function.\n"
 5397|   934k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|   934k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|   934k|        "not supported.");
 5400|   934k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|   934k|                  "\n"
 5402|   934k|                  "Unsupported range type given as input to a scanning "
 5403|   934k|                  "function.\n"
 5404|   934k|                  "file_marker_found cannot be used as an "
 5405|   934k|                  "source range type to scn::scan.\n"
 5406|   934k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|   934k|                  "and do not provide an explicit source range, "
 5408|   934k|                  "or use scn::scan with a FILE* directly.");
 5409|   934k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|   934k|                  "\n"
 5411|   934k|                  "Unsupported range type given as input to a scanning "
 5412|   934k|                  "function.\n"
 5413|   934k|                  "In order to be scannable, a range needs to satisfy "
 5414|   934k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|   934k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|   934k|                  "\n"
 5417|   934k|                  "Unsupported range type given as input to a scanning "
 5418|   934k|                  "function.\n"
 5419|   934k|                  "A range needs to model forward_range and have a valid "
 5420|   934k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|   934k|                  "Examples of scannable ranges are std::string, "
 5422|   934k|                  "std::string_view, "
 5423|   934k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|   934k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|   934k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|   934k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5319|   934k|{
 5320|   934k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5321|   934k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5322|       |    }
 5323|       |    else {
 5324|       |        return invalid_char_type{};
 5325|       |    }
 5326|   934k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   934k|    {
 3000|   934k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  951|   934k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   934k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   934k|    {
 2981|   934k|        return t.data();
 2982|   934k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3382|   934k|    {
 3383|   934k|        return detail::to_address(ranges::begin(derived()));
 3384|   934k|    }
_ZN3scn2v46detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  8.31M|{
  316|  8.31M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  951|  8.31M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  8.31M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  1.77M|    {
 2869|  1.77M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  951|  1.77M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  1.77M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  1.77M|    {
 2850|  1.77M|        return decay_copy(t.begin());
 2851|  1.77M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3479|  23.7M|    {
 3480|  23.7M|        return m_iterator;
 3481|  23.7M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3338|   934k|    {
 3339|   934k|        return static_cast<const D&>(*this);
 3340|   934k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3074|   934k|    {
 3075|   934k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|   934k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3040|   934k|    {
 3041|   934k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  951|   934k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|   934k|    }
_ZN3scn2v46ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 2093|  5.36M|{
 2094|  5.36M|    return SCN_FWD(t);
  ------------------
  |  |  951|  5.36M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  5.36M|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3495|  5.80M|    {
 3496|  5.80M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3497|  5.80M|    }
_ZNK3scn2v48expectedIlNS0_10scan_errorEEcvbEv:
 1739|  13.4M|    {
 1740|  13.4M|        return has_value();
 1741|  13.4M|    }
_ZNK3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  489|  24.1M|    {
  490|  24.1M|        return m_has_value;
  491|  24.1M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5errorEv:
 1745|  1.12M|    {
 1746|  1.12M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  945|  1.12M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  1.12M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  1.12M|        return this->get_unexpected().error();
 1748|  1.12M|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  1.12M|    {
  473|  1.12M|        return m_unexpected;
  474|  1.12M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|  91.8k|        : base(unexpect, std::move(e.error())),
 1616|  91.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  91.8k|    {
 1618|  91.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|  91.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  91.8k|          m_has_value(false)
  451|  91.8k|    {
  452|  91.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   934k|    {
 1316|   934k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6714|   842k|{
 6715|       |    if constexpr (ranges::random_access_iterator<
 6716|   842k|                      ranges::iterator_t<SourceRange>>) {
 6717|   842k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6718|       |    }
 6719|       |    else {
 6720|       |        auto it = ranges::begin(source);
 6721|       |        while (n > 0) {
 6722|       |            --n;
 6723|       |            ++it;
 6724|       |        }
 6725|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6726|       |    }
 6727|   842k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  6.59M|    {
 2869|  6.59M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  951|  6.59M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  6.59M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  6.59M|    {
 2850|  6.59M|        return decay_copy(t.begin());
 2851|  6.59M|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 6701|   842k|{
 6702|   842k|    return ranges::end(source);
 6703|   842k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   842k|    {
 2926|   842k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  951|   842k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   842k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   842k|    {
 2908|   842k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  951|   842k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   842k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3483|  10.9M|    {
 3484|  10.9M|        return m_sentinel;
 3485|  10.9M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1794|  4.11M|    {
 1795|  4.11M|        return value();
 1796|  4.11M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1768|  9.51M|    {
 1769|  9.51M|        SCN_EXPECT(has_value());
  ------------------
  |  |  945|  9.51M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  9.51M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  9.51M|        return this->get_value();
 1771|  9.51M|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  455|  9.51M|    {
  456|  9.51M|        return m_value;
  457|  9.51M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|   842k|        : base(std::in_place, std::forward<U>(val)),
 1570|   842k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   842k|    {
 1572|   842k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|   842k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   842k|    {
  442|   842k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8782|   272k|    {
 8783|   272k|        return m_str;
 8784|   272k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJfEEEDaRNSt3__15tupleIJDpT0_EEE:
 6114|   585k|{
 6115|   585k|    detail::check_scan_arg_types<Args...>();
 6116|   585k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|   585k|}
_ZN3scn2v46detail20check_scan_arg_typesIJfEEEbv:
 5829|  1.02M|{
 5830|  1.02M|    constexpr bool default_constructible_constraint =
 5831|  1.02M|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5832|  1.02M|    static_assert(default_constructible_constraint,
 5833|  1.02M|                  "Scan argument types must be default constructible");
 5834|       |
 5835|  1.02M|    constexpr bool destructible_constraint =
 5836|  1.02M|        std::conjunction_v<std::is_destructible<Args>...>;
 5837|  1.02M|    static_assert(destructible_constraint,
 5838|  1.02M|                  "Scan argument types must be Destructible");
 5839|       |
 5840|  1.02M|    constexpr bool non_reference_constraint =
 5841|  1.02M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5842|  1.02M|    static_assert(non_reference_constraint,
 5843|  1.02M|                  "Scan argument types must not be references");
 5844|       |
 5845|  1.02M|    constexpr bool movable_constraint =
 5846|  1.02M|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5847|  1.02M|    static_assert(movable_constraint,
 5848|  1.02M|                  "Scan argument types must be move constructible");
 5849|       |
 5850|  1.02M|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5850:12): [Folded - Ignored]
  |  Branch (5850:48): [Folded - Ignored]
  ------------------
 5851|  1.02M|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5851:12): [Folded - Ignored]
  |  Branch (5851:40): [Folded - Ignored]
  ------------------
 5852|  1.02M|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJfEEC2ERNSt3__15tupleIJfEEE:
 6090|   585k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|   585k|    {
 6092|   585k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 6099|   585k|    {
 6100|   585k|        return {detail::make_arg<
 6101|   585k|            kind, Context,
 6102|   585k|            mapped_type_constant<remove_cvref_t<A>,
 6103|   585k|                                 typename Context::char_type>::value>(args)...};
 6104|   585k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE16EfvEEPvRT2_:
 5879|   585k|{
 5880|   585k|    return make_value<Context>(value).ref_value;
 5881|   585k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEfEEDaRT0_:
 5814|   647k|{
 5815|   647k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|   647k|                                  needs_context_tag>) {
 5819|   647k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  951|   647k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5820|       |    }
 5821|       |    else {
 5822|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|       |            value, context_tag<Context>{}));
 5824|       |    }
 5825|   647k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERf:
 5653|   647k|    {                                                                        \
 5654|   647k|        return val;                                                          \
 5655|   647k|    }
_ZN3scn2v46detail15make_value_implIfRfEEDaOT0_:
 5783|  1.02M|{
 5784|  1.02M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5785|  1.02M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5786|       |
 5787|  1.02M|    constexpr bool scannable_char =
 5788|  1.02M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5789|  1.02M|    static_assert(scannable_char,
 5790|  1.02M|                  "Cannot scan an argument of an unsupported character "
 5791|  1.02M|                  "type (i.e. char from a wchar_t source)");
 5792|       |
 5793|  1.02M|    constexpr bool scannable_const =
 5794|  1.02M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5795|  1.02M|    static_assert(scannable_const, "Cannot scan a const argument");
 5796|       |
 5797|  1.02M|    constexpr bool scannable_disabled =
 5798|  1.02M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5799|  1.02M|    static_assert(scannable_disabled,
 5800|  1.02M|                  "Cannot scan an argument that has been disabled by "
 5801|  1.02M|                  "flag (SCN_DISABLE_TYPE_*)");
 5802|       |
 5803|  1.02M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5804|  1.02M|    static_assert(
 5805|  1.02M|        scannable,
 5806|  1.02M|        "Cannot scan an argument. To make a type T scannable, provide "
 5807|  1.02M|        "a scn::scanner<T, CharT> specialization.");
 5808|       |
 5809|  1.02M|    return arg_value{arg};
 5810|  1.02M|}
_ZN3scn2v46detail9arg_valueC2IfEERT_:
 5596|  1.02M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5597|  1.02M|    {
 5598|  1.02M|    }
_ZNR3scn2v46detail25scan_result_value_storageIJfEE6valuesEv:
 6393|   932k|    {
 6394|   932k|        return m_values;
 6395|   932k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJfEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|   585k|        : basic_scan_args(store.desc, store.args.data())
 6141|   585k|    {
 6142|   585k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2EmPKPv:
 6192|  1.81M|        : m_desc(desc), m_builtin_values(data)
 6193|  1.81M|    {
 6194|  1.81M|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3464|  9.42M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  949|  9.42M|    static_cast<    \
  |  |  950|  9.42M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  949|  9.42M|    static_cast<    \
  |  |  950|  9.42M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  9.42M|    {
 3466|  9.42M|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 8443|  1.81M|{
 8444|  1.81M|    return s;
 8445|  1.81M|}
_ZN3scn2v46detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 8420|  1.81M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8777|   272k|        : m_str(r.str)
 8778|   272k|    {
 8779|   272k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1739|   301k|    {
 1740|   301k|        return has_value();
 1741|   301k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEptEv:
 1814|   844k|    {
 1815|   844k|        return &value();
 1816|   844k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|   844k|    {
 1769|   844k|        SCN_EXPECT(has_value());
  ------------------
  |  |  945|   844k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   844k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   844k|        return this->get_value();
 1771|   844k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 6473|   842k|    {
 6474|   842k|        return ranges::begin(m_range);
 6475|   842k|    }
_ZN3scn2v44scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9773|   136k|{
 9774|   136k|    auto result = make_scan_result<Source, Args...>();
 9775|   136k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  951|   136k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9776|   136k|                                   make_scan_args(result->values())));
 9777|   136k|    return result;
 9778|   136k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSI_16buffer_range_tagEcEEEE:
 9502|   421k|{
 9503|   421k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  951|   421k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9504|   421k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9437|   421k|{
 9438|   421k|#if !SCN_DISABLE_LOCALE
 9439|   421k|    auto buffer = detail::make_scan_buffer(range);
 9440|       |
 9441|   421k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9442|   421k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9443|   421k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9444|       |
 9445|   421k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  880|   421k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 42.4k, False: 378k]
  |  |  ------------------
  ------------------
 9446|  42.4k|        return unexpected(result.error());
 9447|  42.4k|    }
 9448|   378k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  951|   378k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9449|       |#else
 9450|       |    static_assert(dependent_false<Locale>::value,
 9451|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9452|       |
 9453|       |    return {};
 9454|       |#endif
 9455|   421k|}
_ZN3scn2v410scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 9814|  29.4k|{
 9815|  29.4k|    auto result = make_scan_result<Source, T>();
 9816|  29.4k|    fill_scan_result(
 9817|  29.4k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  951|  29.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9818|  29.4k|                            detail::make_arg<scan_context>(result->value())));
 9819|  29.4k|    return result;
 9820|  29.4k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9515|  91.7k|{
 9516|  91.7k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  951|  91.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9517|  91.7k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9461|  91.7k|{
 9462|  91.7k|    auto buffer = detail::make_scan_buffer(range);
 9463|       |
 9464|  91.7k|    auto result = detail::vscan_value_impl(buffer, arg);
 9465|  91.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  880|  91.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 7.06k, False: 84.6k]
  |  |  ------------------
  ------------------
 9466|  7.06k|        return unexpected(result.error());
 9467|  7.06k|    }
 9468|  84.6k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  951|  84.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9469|  91.7k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEfEENS0_14basic_scan_argIT_EERT0_:
 5864|  61.4k|{
 5865|  61.4k|    check_scan_arg_types<T>();
 5866|       |
 5867|  61.4k|    basic_scan_arg<Context> arg;
 5868|  61.4k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5869|  61.4k|    arg.m_value = make_value<Context>(value);
 5870|  61.4k|    return arg;
 5871|  61.4k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 5959|  2.01M|    constexpr basic_scan_arg() = default;
_ZN3scn2v46detail9arg_valueC2Ev:
 5593|  3.24M|    arg_value() = default;
_ZNR3scn2v46detail25scan_result_value_storageIJfEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6415|  93.6k|    {
 6416|  93.6k|        return std::get<0>(m_values);
 6417|  93.6k|    }
_ZN3scn2v44scanIJdENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9704|   141k|{
 9705|   141k|    auto result = make_scan_result<Source, Args...>();
 9706|   141k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  951|   141k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9707|   141k|                                   make_scan_args(result->values())));
 9708|   141k|    return result;
 9709|   141k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEEDav:
 9660|   313k|{
 9661|   313k|    return scan_result_type<Source, Args...>();
 9662|   313k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2Ev:
 1551|   313k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  426|   313k|        : m_value(T{}), m_has_value(true)
  427|   313k|    {
  428|   313k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2Ev:
 6610|   313k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJdEEC2Ev:
 6384|  1.10M|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9645|   313k|{
 9646|   313k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  880|   313k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 30.6k, False: 283k]
  |  |  ------------------
  ------------------
 9647|  30.6k|        out = unexpected(in.error());
 9648|  30.6k|    }
 9649|   283k|    else {
 9650|   283k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  949|   283k|    static_cast<    \
  |  |  950|   283k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|   283k|    }
 9652|   313k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  30.6k|        : base(unexpect, std::move(e.error())),
 1616|  30.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  30.6k|    {
 1618|  30.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  30.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  30.6k|          m_has_value(false)
  451|  30.6k|    {
  452|  30.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  30.6k|    {
 1316|  30.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEaSEOSC_:
 1556|  30.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorEvEaSEOSD_:
  902|  30.6k|    {
  903|  30.6k|        assign_common(std::move(other));
  904|  30.6k|        return *this;
  905|  30.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  30.6k|    {
  950|  30.6k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 30.6k, False: 0]
  ------------------
  951|  30.6k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 30.6k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  30.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  30.6k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.25M|    {
  490|  1.25M|        return m_has_value;
  491|  1.25M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   879k|    {
  456|   879k|        return m_value;
  457|   879k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  30.6k|    {
 1046|  30.6k|        this->destroy_value();
 1047|  30.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  30.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  30.6k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  30.6k|    {
  504|  30.6k|        scn::detail::construct_at(&get_unexpected(),
  505|  30.6k|                                  std::forward<Args>(args)...);
  506|  30.6k|        m_has_value = false;
  507|  30.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  30.6k|    {
  473|  30.6k|        return m_unexpected;
  474|  30.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  30.6k|    {
  481|  30.6k|        return std::move(m_unexpected);
  482|  30.6k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8782|   282k|    {
 8783|   282k|        return m_str;
 8784|   282k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJdEEEDaRNSt3__15tupleIJDpT0_EEE:
 6114|   612k|{
 6115|   612k|    detail::check_scan_arg_types<Args...>();
 6116|   612k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|   612k|}
_ZN3scn2v46detail20check_scan_arg_typesIJdEEEbv:
 5829|  1.10M|{
 5830|  1.10M|    constexpr bool default_constructible_constraint =
 5831|  1.10M|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5832|  1.10M|    static_assert(default_constructible_constraint,
 5833|  1.10M|                  "Scan argument types must be default constructible");
 5834|       |
 5835|  1.10M|    constexpr bool destructible_constraint =
 5836|  1.10M|        std::conjunction_v<std::is_destructible<Args>...>;
 5837|  1.10M|    static_assert(destructible_constraint,
 5838|  1.10M|                  "Scan argument types must be Destructible");
 5839|       |
 5840|  1.10M|    constexpr bool non_reference_constraint =
 5841|  1.10M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5842|  1.10M|    static_assert(non_reference_constraint,
 5843|  1.10M|                  "Scan argument types must not be references");
 5844|       |
 5845|  1.10M|    constexpr bool movable_constraint =
 5846|  1.10M|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5847|  1.10M|    static_assert(movable_constraint,
 5848|  1.10M|                  "Scan argument types must be move constructible");
 5849|       |
 5850|  1.10M|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5850:12): [Folded - Ignored]
  |  Branch (5850:48): [Folded - Ignored]
  ------------------
 5851|  1.10M|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5851:12): [Folded - Ignored]
  |  Branch (5851:40): [Folded - Ignored]
  ------------------
 5852|  1.10M|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJdEEC2ERNSt3__15tupleIJdEEE:
 6090|   612k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|   612k|    {
 6092|   612k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 6099|   612k|    {
 6100|   612k|        return {detail::make_arg<
 6101|   612k|            kind, Context,
 6102|   612k|            mapped_type_constant<remove_cvref_t<A>,
 6103|   612k|                                 typename Context::char_type>::value>(args)...};
 6104|   612k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE17EdvEEPvRT2_:
 5879|   612k|{
 5880|   612k|    return make_value<Context>(value).ref_value;
 5881|   612k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEdEEDaRT0_:
 5814|   677k|{
 5815|   677k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|   677k|                                  needs_context_tag>) {
 5819|   677k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  951|   677k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5820|       |    }
 5821|       |    else {
 5822|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|       |            value, context_tag<Context>{}));
 5824|       |    }
 5825|   677k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERd:
 5653|   677k|    {                                                                        \
 5654|   677k|        return val;                                                          \
 5655|   677k|    }
_ZN3scn2v46detail15make_value_implIdRdEEDaOT0_:
 5783|  1.10M|{
 5784|  1.10M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5785|  1.10M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5786|       |
 5787|  1.10M|    constexpr bool scannable_char =
 5788|  1.10M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5789|  1.10M|    static_assert(scannable_char,
 5790|  1.10M|                  "Cannot scan an argument of an unsupported character "
 5791|  1.10M|                  "type (i.e. char from a wchar_t source)");
 5792|       |
 5793|  1.10M|    constexpr bool scannable_const =
 5794|  1.10M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5795|  1.10M|    static_assert(scannable_const, "Cannot scan a const argument");
 5796|       |
 5797|  1.10M|    constexpr bool scannable_disabled =
 5798|  1.10M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5799|  1.10M|    static_assert(scannable_disabled,
 5800|  1.10M|                  "Cannot scan an argument that has been disabled by "
 5801|  1.10M|                  "flag (SCN_DISABLE_TYPE_*)");
 5802|       |
 5803|  1.10M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5804|  1.10M|    static_assert(
 5805|  1.10M|        scannable,
 5806|  1.10M|        "Cannot scan an argument. To make a type T scannable, provide "
 5807|  1.10M|        "a scn::scanner<T, CharT> specialization.");
 5808|       |
 5809|  1.10M|    return arg_value{arg};
 5810|  1.10M|}
_ZN3scn2v46detail9arg_valueC2IdEERT_:
 5596|  1.10M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5597|  1.10M|    {
 5598|  1.10M|    }
_ZNR3scn2v46detail25scan_result_value_storageIJdEE6valuesEv:
 6393|   998k|    {
 6394|   998k|        return m_values;
 6395|   998k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJdEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|   612k|        : basic_scan_args(store.desc, store.args.data())
 6141|   612k|    {
 6142|   612k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8777|   282k|        : m_str(r.str)
 8778|   282k|    {
 8779|   282k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1739|   313k|    {
 1740|   313k|        return has_value();
 1741|   313k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEptEv:
 1814|   879k|    {
 1815|   879k|        return &value();
 1816|   879k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|   879k|    {
 1769|   879k|        SCN_EXPECT(has_value());
  ------------------
  |  |  945|   879k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   879k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   879k|        return this->get_value();
 1771|   879k|    }
_ZN3scn2v44scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9773|   141k|{
 9774|   141k|    auto result = make_scan_result<Source, Args...>();
 9775|   141k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  951|   141k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9776|   141k|                                   make_scan_args(result->values())));
 9777|   141k|    return result;
 9778|   141k|}
_ZN3scn2v410scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 9814|  30.8k|{
 9815|  30.8k|    auto result = make_scan_result<Source, T>();
 9816|  30.8k|    fill_scan_result(
 9817|  30.8k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  951|  30.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9818|  30.8k|                            detail::make_arg<scan_context>(result->value())));
 9819|  30.8k|    return result;
 9820|  30.8k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEdEENS0_14basic_scan_argIT_EERT0_:
 5864|  64.8k|{
 5865|  64.8k|    check_scan_arg_types<T>();
 5866|       |
 5867|  64.8k|    basic_scan_arg<Context> arg;
 5868|  64.8k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5869|  64.8k|    arg.m_value = make_value<Context>(value);
 5870|  64.8k|    return arg;
 5871|  64.8k|}
_ZNR3scn2v46detail25scan_result_value_storageIJdEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6415|   103k|    {
 6416|   103k|        return std::get<0>(m_values);
 6417|   103k|    }
_ZN3scn2v44scanIJeENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9704|   143k|{
 9705|   143k|    auto result = make_scan_result<Source, Args...>();
 9706|   143k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  951|   143k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9707|   143k|                                   make_scan_args(result->values())));
 9708|   143k|    return result;
 9709|   143k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEEDav:
 9660|   318k|{
 9661|   318k|    return scan_result_type<Source, Args...>();
 9662|   318k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2Ev:
 1551|   318k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2Ev:
  426|   318k|        : m_value(T{}), m_has_value(true)
  427|   318k|    {
  428|   318k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2Ev:
 6610|   318k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJeEEC2Ev:
 6384|  1.12M|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9645|   318k|{
 9646|   318k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  880|   318k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 30.6k, False: 287k]
  |  |  ------------------
  ------------------
 9647|  30.6k|        out = unexpected(in.error());
 9648|  30.6k|    }
 9649|   287k|    else {
 9650|   287k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  949|   287k|    static_cast<    \
  |  |  950|   287k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|   287k|    }
 9652|   318k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  30.6k|        : base(unexpect, std::move(e.error())),
 1616|  30.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  30.6k|    {
 1618|  30.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  30.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  30.6k|          m_has_value(false)
  451|  30.6k|    {
  452|  30.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  30.6k|    {
 1316|  30.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEaSEOSC_:
 1556|  30.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorEvEaSEOSD_:
  902|  30.6k|    {
  903|  30.6k|        assign_common(std::move(other));
  904|  30.6k|        return *this;
  905|  30.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  30.6k|    {
  950|  30.6k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 30.6k, False: 0]
  ------------------
  951|  30.6k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 30.6k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  30.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  30.6k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.27M|    {
  490|  1.27M|        return m_has_value;
  491|  1.27M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   894k|    {
  456|   894k|        return m_value;
  457|   894k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  30.6k|    {
 1046|  30.6k|        this->destroy_value();
 1047|  30.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  30.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  30.6k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  30.6k|    {
  504|  30.6k|        scn::detail::construct_at(&get_unexpected(),
  505|  30.6k|                                  std::forward<Args>(args)...);
  506|  30.6k|        m_has_value = false;
  507|  30.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  30.6k|    {
  473|  30.6k|        return m_unexpected;
  474|  30.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  30.6k|    {
  481|  30.6k|        return std::move(m_unexpected);
  482|  30.6k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8782|   286k|    {
 8783|   286k|        return m_str;
 8784|   286k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJeEEEDaRNSt3__15tupleIJDpT0_EEE:
 6114|   620k|{
 6115|   620k|    detail::check_scan_arg_types<Args...>();
 6116|   620k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|   620k|}
_ZN3scn2v46detail20check_scan_arg_typesIJeEEEbv:
 5829|  1.12M|{
 5830|  1.12M|    constexpr bool default_constructible_constraint =
 5831|  1.12M|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5832|  1.12M|    static_assert(default_constructible_constraint,
 5833|  1.12M|                  "Scan argument types must be default constructible");
 5834|       |
 5835|  1.12M|    constexpr bool destructible_constraint =
 5836|  1.12M|        std::conjunction_v<std::is_destructible<Args>...>;
 5837|  1.12M|    static_assert(destructible_constraint,
 5838|  1.12M|                  "Scan argument types must be Destructible");
 5839|       |
 5840|  1.12M|    constexpr bool non_reference_constraint =
 5841|  1.12M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5842|  1.12M|    static_assert(non_reference_constraint,
 5843|  1.12M|                  "Scan argument types must not be references");
 5844|       |
 5845|  1.12M|    constexpr bool movable_constraint =
 5846|  1.12M|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5847|  1.12M|    static_assert(movable_constraint,
 5848|  1.12M|                  "Scan argument types must be move constructible");
 5849|       |
 5850|  1.12M|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5850:12): [Folded - Ignored]
  |  Branch (5850:48): [Folded - Ignored]
  ------------------
 5851|  1.12M|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5851:12): [Folded - Ignored]
  |  Branch (5851:40): [Folded - Ignored]
  ------------------
 5852|  1.12M|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJeEEC2ERNSt3__15tupleIJeEEE:
 6090|   620k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|   620k|    {
 6092|   620k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 6099|   620k|    {
 6100|   620k|        return {detail::make_arg<
 6101|   620k|            kind, Context,
 6102|   620k|            mapped_type_constant<remove_cvref_t<A>,
 6103|   620k|                                 typename Context::char_type>::value>(args)...};
 6104|   620k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE18EevEEPvRT2_:
 5879|   620k|{
 5880|   620k|    return make_value<Context>(value).ref_value;
 5881|   620k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEeEEDaRT0_:
 5814|   686k|{
 5815|   686k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|   686k|                                  needs_context_tag>) {
 5819|   686k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  951|   686k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5820|       |    }
 5821|       |    else {
 5822|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|       |            value, context_tag<Context>{}));
 5824|       |    }
 5825|   686k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERe:
 5653|   686k|    {                                                                        \
 5654|   686k|        return val;                                                          \
 5655|   686k|    }
_ZN3scn2v46detail15make_value_implIeReEEDaOT0_:
 5783|  1.12M|{
 5784|  1.12M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5785|  1.12M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5786|       |
 5787|  1.12M|    constexpr bool scannable_char =
 5788|  1.12M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5789|  1.12M|    static_assert(scannable_char,
 5790|  1.12M|                  "Cannot scan an argument of an unsupported character "
 5791|  1.12M|                  "type (i.e. char from a wchar_t source)");
 5792|       |
 5793|  1.12M|    constexpr bool scannable_const =
 5794|  1.12M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5795|  1.12M|    static_assert(scannable_const, "Cannot scan a const argument");
 5796|       |
 5797|  1.12M|    constexpr bool scannable_disabled =
 5798|  1.12M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5799|  1.12M|    static_assert(scannable_disabled,
 5800|  1.12M|                  "Cannot scan an argument that has been disabled by "
 5801|  1.12M|                  "flag (SCN_DISABLE_TYPE_*)");
 5802|       |
 5803|  1.12M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5804|  1.12M|    static_assert(
 5805|  1.12M|        scannable,
 5806|  1.12M|        "Cannot scan an argument. To make a type T scannable, provide "
 5807|  1.12M|        "a scn::scanner<T, CharT> specialization.");
 5808|       |
 5809|  1.12M|    return arg_value{arg};
 5810|  1.12M|}
_ZN3scn2v46detail9arg_valueC2IeEERT_:
 5596|  1.12M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5597|  1.12M|    {
 5598|  1.12M|    }
_ZNR3scn2v46detail25scan_result_value_storageIJeEE6valuesEv:
 6393|  1.01M|    {
 6394|  1.01M|        return m_values;
 6395|  1.01M|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJeEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|   620k|        : basic_scan_args(store.desc, store.args.data())
 6141|   620k|    {
 6142|   620k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8777|   286k|        : m_str(r.str)
 8778|   286k|    {
 8779|   286k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1739|   318k|    {
 1740|   318k|        return has_value();
 1741|   318k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEptEv:
 1814|   894k|    {
 1815|   894k|        return &value();
 1816|   894k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|   894k|    {
 1769|   894k|        SCN_EXPECT(has_value());
  ------------------
  |  |  945|   894k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   894k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   894k|        return this->get_value();
 1771|   894k|    }
_ZN3scn2v44scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9773|   143k|{
 9774|   143k|    auto result = make_scan_result<Source, Args...>();
 9775|   143k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  951|   143k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9776|   143k|                                   make_scan_args(result->values())));
 9777|   143k|    return result;
 9778|   143k|}
_ZN3scn2v410scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 9814|  31.4k|{
 9815|  31.4k|    auto result = make_scan_result<Source, T>();
 9816|  31.4k|    fill_scan_result(
 9817|  31.4k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  951|  31.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9818|  31.4k|                            detail::make_arg<scan_context>(result->value())));
 9819|  31.4k|    return result;
 9820|  31.4k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEeEENS0_14basic_scan_argIT_EERT0_:
 5864|  65.9k|{
 5865|  65.9k|    check_scan_arg_types<T>();
 5866|       |
 5867|  65.9k|    basic_scan_arg<Context> arg;
 5868|  65.9k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5869|  65.9k|    arg.m_value = make_value<Context>(value);
 5870|  65.9k|    return arg;
 5871|  65.9k|}
_ZNR3scn2v46detail25scan_result_value_storageIJeEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6415|   105k|    {
 6416|   105k|        return std::get<0>(m_values);
 6417|   105k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  91.8k|    {
 2869|  91.8k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  951|  91.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  91.8k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  91.8k|    {
 2850|  91.8k|        return decay_copy(t.begin());
 2851|  91.8k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 2093|  47.1M|{
 2094|  47.1M|    return SCN_FWD(t);
  ------------------
  |  |  951|  47.1M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  47.1M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  2.15M|    {
 2926|  2.15M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  951|  2.15M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  2.15M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  2.15M|    {
 2908|  2.15M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  951|  2.15M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  2.15M|    }
_ZN3scn2v44scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9704|   156k|{
 9705|   156k|    auto result = make_scan_result<Source, Args...>();
 9706|   156k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  951|   156k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9707|   156k|                                   make_scan_args(result->values())));
 9708|   156k|    return result;
 9709|   156k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEEDav:
 9660|   345k|{
 9661|   345k|    return scan_result_type<Source, Args...>();
 9662|   345k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2Ev:
 1551|   345k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2Ev:
  426|   345k|        : m_value(T{}), m_has_value(true)
  427|   345k|    {
  428|   345k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2Ev:
 6610|   345k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2Ev:
 6453|  1.07M|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2Ev:
 3459|  1.07M|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9645|   345k|{
 9646|   345k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  880|   345k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 30.6k, False: 314k]
  |  |  ------------------
  ------------------
 9647|  30.6k|        out = unexpected(in.error());
 9648|  30.6k|    }
 9649|   314k|    else {
 9650|   314k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  949|   314k|    static_cast<    \
  |  |  950|   314k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|   314k|    }
 9652|   345k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1739|  1.07M|    {
 1740|  1.07M|        return has_value();
 1741|  1.07M|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  489|  2.15M|    {
  490|  2.15M|        return m_has_value;
  491|  2.15M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1745|  91.8k|    {
 1746|  91.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  945|  91.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  91.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  91.8k|        return this->get_unexpected().error();
 1748|  91.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  91.8k|    {
  473|  91.8k|        return m_unexpected;
  474|  91.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  30.6k|        : base(unexpect, std::move(e.error())),
 1616|  30.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  30.6k|    {
 1618|  30.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  30.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  30.6k|          m_has_value(false)
  451|  30.6k|    {
  452|  30.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  30.6k|    {
 1316|  30.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEaSEOSI_:
 1556|  30.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorEvEaSEOSJ_:
  902|  30.6k|    {
  903|  30.6k|        assign_common(std::move(other));
  904|  30.6k|        return *this;
  905|  30.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  30.6k|    {
  950|  30.6k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 30.6k, False: 0]
  ------------------
  951|  30.6k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 30.6k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  30.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  30.6k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.38M|    {
  490|  1.38M|        return m_has_value;
  491|  1.38M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   973k|    {
  456|   973k|        return m_value;
  457|   973k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  30.6k|    {
 1046|  30.6k|        this->destroy_value();
 1047|  30.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  30.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  30.6k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  30.6k|    {
  504|  30.6k|        scn::detail::construct_at(&get_unexpected(),
  505|  30.6k|                                  std::forward<Args>(args)...);
  506|  30.6k|        m_has_value = false;
  507|  30.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  30.6k|    {
  473|  30.6k|        return m_unexpected;
  474|  30.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  30.6k|    {
  481|  30.6k|        return std::move(m_unexpected);
  482|  30.6k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE9set_rangeISF_EEvOT_:
 6484|   985k|    {
 6485|   985k|        m_range = std::forward<Other>(r);
 6486|   985k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1794|   985k|    {
 1795|   985k|        return value();
 1796|   985k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1768|   985k|    {
 1769|   985k|        SCN_EXPECT(has_value());
  ------------------
  |  |  945|   985k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   985k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   985k|        return this->get_value();
 1771|   985k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  455|   985k|    {
  456|   985k|        return m_value;
  457|   985k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9484|   488k|{
 9485|   488k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  951|   488k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9486|   488k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9421|   488k|{
 9422|   488k|    auto buffer = make_scan_buffer(range);
 9423|       |
 9424|   488k|    auto result = vscan_impl(buffer, format, args);
 9425|   488k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  880|   488k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 42.4k, False: 445k]
  |  |  ------------------
  ------------------
 9426|  42.4k|        return unexpected(result.error());
 9427|  42.4k|    }
 9428|   445k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  951|   445k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9429|   488k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5380|  1.07M|{
 5381|  1.07M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|  1.07M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|  1.07M|                  "\n"
 5385|  1.07M|                  "Unsupported range type given as input to a scanning "
 5386|  1.07M|                  "function.\n"
 5387|  1.07M|                  "A range needs to have a character type (value type) "
 5388|  1.07M|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|  1.07M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|  1.07M|                  "to be included.\n"
 5391|  1.07M|                  "See the scnlib documentation for more details.");
 5392|  1.07M|    static_assert(
 5393|  1.07M|        !std::is_same_v<T, custom_char_traits>,
 5394|  1.07M|        "\n"
 5395|  1.07M|        "Unsupported range type given as input to a scanning "
 5396|  1.07M|        "function.\n"
 5397|  1.07M|        "String types (std::basic_string, and std::basic_string_view) "
 5398|  1.07M|        "need to use std::char_traits. Strings with custom Traits are "
 5399|  1.07M|        "not supported.");
 5400|  1.07M|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|  1.07M|                  "\n"
 5402|  1.07M|                  "Unsupported range type given as input to a scanning "
 5403|  1.07M|                  "function.\n"
 5404|  1.07M|                  "file_marker_found cannot be used as an "
 5405|  1.07M|                  "source range type to scn::scan.\n"
 5406|  1.07M|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|  1.07M|                  "and do not provide an explicit source range, "
 5408|  1.07M|                  "or use scn::scan with a FILE* directly.");
 5409|  1.07M|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|  1.07M|                  "\n"
 5411|  1.07M|                  "Unsupported range type given as input to a scanning "
 5412|  1.07M|                  "function.\n"
 5413|  1.07M|                  "In order to be scannable, a range needs to satisfy "
 5414|  1.07M|                  "`forward_range`. `input_range` is not sufficient.");
 5415|  1.07M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|  1.07M|                  "\n"
 5417|  1.07M|                  "Unsupported range type given as input to a scanning "
 5418|  1.07M|                  "function.\n"
 5419|  1.07M|                  "A range needs to model forward_range and have a valid "
 5420|  1.07M|                  "character type (char or wchar_t) to be scannable.\n"
 5421|  1.07M|                  "Examples of scannable ranges are std::string, "
 5422|  1.07M|                  "std::string_view, "
 5423|  1.07M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|  1.07M|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|  1.07M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|  1.07M|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5350|  1.07M|{
 5351|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5352|       |        return file_marker_found{};
 5353|       |    }
 5354|       |    else if constexpr (!ranges::forward_range<Range>) {
 5355|       |        if constexpr (ranges::range<Range>) {
 5356|       |            return insufficient_range{};
 5357|       |        }
 5358|       |        else {
 5359|       |            return invalid_input_range{};
 5360|       |        }
 5361|       |    }
 5362|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5363|       |        return invalid_char_type{};
 5364|       |    }
 5365|  1.07M|    else {
 5366|  1.07M|        return make_forward_scan_buffer(r);
 5367|  1.07M|    }
 5368|  1.07M|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5184|  1.07M|{
 5185|  1.07M|    return basic_scan_forward_buffer_impl(range);
 5186|  1.07M|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4764|  1.07M|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  951|  1.07M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4765|  1.07M|          m_cursor(ranges::begin(*m_range))
 4766|  1.07M|    {
 4767|  1.07M|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4736|  1.07M|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4737|  1.07M|    {
 4738|  1.07M|    }
_ZN3scn2v46detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4427|  1.07M|        : m_current_view(sv), m_is_contiguous(false)
 4428|  1.07M|    {
 4429|  1.07M|    }
_ZN3scn2v46detail17basic_scan_bufferIcED2Ev:
 4340|  1.07M|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  2.06M|    {
 2869|  2.06M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  951|  2.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  2.06M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  2.06M|    {
 2850|  2.06M|        return decay_copy(t.begin());
 2851|  2.06M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3479|  3.04M|    {
 3480|  3.04M|        return m_iterator;
 3481|  3.04M|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4770|  13.8M|    {
 4771|  13.8M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4771:13): [True: 291k, False: 13.5M]
  ------------------
 4772|   291k|            return false;
 4773|   291k|        }
 4774|  13.5M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4775|  13.5M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  945|  13.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  13.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4776|  13.5M|        }
 4777|  13.5M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4777:13): [True: 12.4M, False: 1.06M]
  ------------------
 4778|  12.4M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4779|  12.4M|                                          this->m_current_view.begin(),
 4780|  12.4M|                                          this->m_current_view.end());
 4781|  12.4M|        }
 4782|  13.5M|        m_latest = *m_cursor;
 4783|  13.5M|        ++m_cursor;
 4784|  13.5M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4785|  13.5M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4786|  13.5M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  945|  13.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  13.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4787|  13.5M|        }
 4788|  13.5M|        return true;
 4789|  13.8M|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  40.9M|    {
 2926|  40.9M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  951|  40.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  40.9M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  40.9M|    {
 2908|  40.9M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  951|  40.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  40.9M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3483|  41.9M|    {
 3484|  41.9M|        return m_sentinel;
 3485|  41.9M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE4syncEl:
 4345|  1.07M|    {
 4346|  1.07M|        SCN_UNUSED(position);
  ------------------
  |  |  930|  1.07M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4347|  1.07M|        return true;
 4348|  1.07M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1615|  91.8k|        : base(unexpect, std::move(e.error())),
 1616|  91.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  91.8k|    {
 1618|  91.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  449|  91.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  91.8k|          m_has_value(false)
  451|  91.8k|    {
  452|  91.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.07M|    {
 1316|  1.07M|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6714|   985k|{
 6715|       |    if constexpr (ranges::random_access_iterator<
 6716|   985k|                      ranges::iterator_t<SourceRange>>) {
 6717|   985k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6718|       |    }
 6719|       |    else {
 6720|       |        auto it = ranges::begin(source);
 6721|       |        while (n > 0) {
 6722|       |            --n;
 6723|       |            ++it;
 6724|       |        }
 6725|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6726|       |    }
 6727|   985k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   985k|    {
 2869|   985k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  951|   985k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   985k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   985k|    {
 2850|   985k|        return decay_copy(t.begin());
 2851|   985k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 6701|   985k|{
 6702|   985k|    return ranges::end(source);
 6703|   985k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   985k|    {
 2926|   985k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  951|   985k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   985k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   985k|    {
 2908|   985k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  951|   985k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   985k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1569|   985k|        : base(std::in_place, std::forward<U>(val)),
 1570|   985k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   985k|    {
 1572|   985k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  440|   985k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   985k|    {
  442|   985k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8782|   313k|    {
 8783|   313k|        return m_str;
 8784|   313k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3464|  2.06M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  949|  2.06M|    static_cast<    \
  |  |  950|  2.06M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  949|  2.06M|    static_cast<    \
  |  |  950|  2.06M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  2.06M|    {
 3466|  2.06M|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8777|   313k|        : m_str(r.str)
 8778|   313k|    {
 8779|   313k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1739|   345k|    {
 1740|   345k|        return has_value();
 1741|   345k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1814|   973k|    {
 1815|   973k|        return &value();
 1816|   973k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|   973k|    {
 1769|   973k|        SCN_EXPECT(has_value());
  ------------------
  |  |  945|   973k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   973k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   973k|        return this->get_value();
 1771|   973k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 6473|   985k|    {
 6474|   985k|        return ranges::begin(m_range);
 6475|   985k|    }
_ZN3scn2v44scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9773|   156k|{
 9774|   156k|    auto result = make_scan_result<Source, Args...>();
 9775|   156k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  951|   156k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9776|   156k|                                   make_scan_args(result->values())));
 9777|   156k|    return result;
 9778|   156k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSN_16buffer_range_tagEcEEEE:
 9502|   488k|{
 9503|   488k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  951|   488k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9504|   488k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9437|   488k|{
 9438|   488k|#if !SCN_DISABLE_LOCALE
 9439|   488k|    auto buffer = detail::make_scan_buffer(range);
 9440|       |
 9441|   488k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9442|   488k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9443|   488k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9444|       |
 9445|   488k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  880|   488k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 42.4k, False: 445k]
  |  |  ------------------
  ------------------
 9446|  42.4k|        return unexpected(result.error());
 9447|  42.4k|    }
 9448|   445k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  951|   445k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9449|       |#else
 9450|       |    static_assert(dependent_false<Locale>::value,
 9451|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9452|       |
 9453|       |    return {};
 9454|       |#endif
 9455|   488k|}
_ZN3scn2v410scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 9814|  32.0k|{
 9815|  32.0k|    auto result = make_scan_result<Source, T>();
 9816|  32.0k|    fill_scan_result(
 9817|  32.0k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  951|  32.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9818|  32.0k|                            detail::make_arg<scan_context>(result->value())));
 9819|  32.0k|    return result;
 9820|  32.0k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9515|   100k|{
 9516|   100k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  951|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9517|   100k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9461|   100k|{
 9462|   100k|    auto buffer = detail::make_scan_buffer(range);
 9463|       |
 9464|   100k|    auto result = detail::vscan_value_impl(buffer, arg);
 9465|   100k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  880|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 7.06k, False: 93.4k]
  |  |  ------------------
  ------------------
 9466|  7.06k|        return unexpected(result.error());
 9467|  7.06k|    }
 9468|  93.4k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  951|  93.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9469|   100k|}
_ZN3scn2v44scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9704|   164k|{
 9705|   164k|    auto result = make_scan_result<Source, Args...>();
 9706|   164k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  951|   164k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9707|   164k|                                   make_scan_args(result->values())));
 9708|   164k|    return result;
 9709|   164k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEEDav:
 9660|   363k|{
 9661|   363k|    return scan_result_type<Source, Args...>();
 9662|   363k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2Ev:
 1551|   363k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  426|   363k|        : m_value(T{}), m_has_value(true)
  427|   363k|    {
  428|   363k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2Ev:
 6610|   363k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9645|   363k|{
 9646|   363k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  880|   363k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 30.6k, False: 333k]
  |  |  ------------------
  ------------------
 9647|  30.6k|        out = unexpected(in.error());
 9648|  30.6k|    }
 9649|   333k|    else {
 9650|   333k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  949|   333k|    static_cast<    \
  |  |  950|   333k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|   333k|    }
 9652|   363k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  30.6k|        : base(unexpect, std::move(e.error())),
 1616|  30.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  30.6k|    {
 1618|  30.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  30.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  30.6k|          m_has_value(false)
  451|  30.6k|    {
  452|  30.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  30.6k|    {
 1316|  30.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEaSEOSI_:
 1556|  30.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorEvEaSEOSJ_:
  902|  30.6k|    {
  903|  30.6k|        assign_common(std::move(other));
  904|  30.6k|        return *this;
  905|  30.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  30.6k|    {
  950|  30.6k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 30.6k, False: 0]
  ------------------
  951|  30.6k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 30.6k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  30.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  30.6k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.45M|    {
  490|  1.45M|        return m_has_value;
  491|  1.45M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.03M|    {
  456|  1.03M|        return m_value;
  457|  1.03M|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  30.6k|    {
 1046|  30.6k|        this->destroy_value();
 1047|  30.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  30.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  30.6k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  30.6k|    {
  504|  30.6k|        scn::detail::construct_at(&get_unexpected(),
  505|  30.6k|                                  std::forward<Args>(args)...);
  506|  30.6k|        m_has_value = false;
  507|  30.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  30.6k|    {
  473|  30.6k|        return m_unexpected;
  474|  30.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  30.6k|    {
  481|  30.6k|        return std::move(m_unexpected);
  482|  30.6k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8782|   329k|    {
 8783|   329k|        return m_str;
 8784|   329k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8777|   329k|        : m_str(r.str)
 8778|   329k|    {
 8779|   329k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1739|   363k|    {
 1740|   363k|        return has_value();
 1741|   363k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1814|  1.03M|    {
 1815|  1.03M|        return &value();
 1816|  1.03M|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|  1.03M|    {
 1769|  1.03M|        SCN_EXPECT(has_value());
  ------------------
  |  |  945|  1.03M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  1.03M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.03M|        return this->get_value();
 1771|  1.03M|    }
_ZN3scn2v44scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9773|   164k|{
 9774|   164k|    auto result = make_scan_result<Source, Args...>();
 9775|   164k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  951|   164k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9776|   164k|                                   make_scan_args(result->values())));
 9777|   164k|    return result;
 9778|   164k|}
_ZN3scn2v410scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 9814|  34.0k|{
 9815|  34.0k|    auto result = make_scan_result<Source, T>();
 9816|  34.0k|    fill_scan_result(
 9817|  34.0k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  951|  34.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9818|  34.0k|                            detail::make_arg<scan_context>(result->value())));
 9819|  34.0k|    return result;
 9820|  34.0k|}
_ZN3scn2v44scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9704|   166k|{
 9705|   166k|    auto result = make_scan_result<Source, Args...>();
 9706|   166k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  951|   166k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9707|   166k|                                   make_scan_args(result->values())));
 9708|   166k|    return result;
 9709|   166k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEEDav:
 9660|   368k|{
 9661|   368k|    return scan_result_type<Source, Args...>();
 9662|   368k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2Ev:
 1551|   368k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2Ev:
  426|   368k|        : m_value(T{}), m_has_value(true)
  427|   368k|    {
  428|   368k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2Ev:
 6610|   368k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9645|   368k|{
 9646|   368k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  880|   368k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 30.6k, False: 337k]
  |  |  ------------------
  ------------------
 9647|  30.6k|        out = unexpected(in.error());
 9648|  30.6k|    }
 9649|   337k|    else {
 9650|   337k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  949|   337k|    static_cast<    \
  |  |  950|   337k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|   337k|    }
 9652|   368k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  30.6k|        : base(unexpect, std::move(e.error())),
 1616|  30.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  30.6k|    {
 1618|  30.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  30.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  30.6k|          m_has_value(false)
  451|  30.6k|    {
  452|  30.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  30.6k|    {
 1316|  30.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEaSEOSI_:
 1556|  30.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorEvEaSEOSJ_:
  902|  30.6k|    {
  903|  30.6k|        assign_common(std::move(other));
  904|  30.6k|        return *this;
  905|  30.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  30.6k|    {
  950|  30.6k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 30.6k, False: 0]
  ------------------
  951|  30.6k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 30.6k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  30.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  30.6k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.47M|    {
  490|  1.47M|        return m_has_value;
  491|  1.47M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.04M|    {
  456|  1.04M|        return m_value;
  457|  1.04M|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  30.6k|    {
 1046|  30.6k|        this->destroy_value();
 1047|  30.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  30.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  30.6k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  30.6k|    {
  504|  30.6k|        scn::detail::construct_at(&get_unexpected(),
  505|  30.6k|                                  std::forward<Args>(args)...);
  506|  30.6k|        m_has_value = false;
  507|  30.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  30.6k|    {
  473|  30.6k|        return m_unexpected;
  474|  30.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  30.6k|    {
  481|  30.6k|        return std::move(m_unexpected);
  482|  30.6k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8782|   333k|    {
 8783|   333k|        return m_str;
 8784|   333k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8777|   333k|        : m_str(r.str)
 8778|   333k|    {
 8779|   333k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1739|   368k|    {
 1740|   368k|        return has_value();
 1741|   368k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1814|  1.04M|    {
 1815|  1.04M|        return &value();
 1816|  1.04M|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|  1.04M|    {
 1769|  1.04M|        SCN_EXPECT(has_value());
  ------------------
  |  |  945|  1.04M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  1.04M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.04M|        return this->get_value();
 1771|  1.04M|    }
_ZN3scn2v44scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9773|   166k|{
 9774|   166k|    auto result = make_scan_result<Source, Args...>();
 9775|   166k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  951|   166k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9776|   166k|                                   make_scan_args(result->values())));
 9777|   166k|    return result;
 9778|   166k|}
_ZN3scn2v410scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 9814|  34.4k|{
 9815|  34.4k|    auto result = make_scan_result<Source, T>();
 9816|  34.4k|    fill_scan_result(
 9817|  34.4k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  951|  34.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9818|  34.4k|                            detail::make_arg<scan_context>(result->value())));
 9819|  34.4k|    return result;
 9820|  34.4k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   188k|    {
 2869|   188k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  951|   188k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   188k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   188k|    {
 2850|   188k|        return decay_copy(t.begin());
 2851|   188k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 2093|  5.01M|{
 2094|  5.01M|    return SCN_FWD(t);
  ------------------
  |  |  951|  5.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  5.01M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  1.24M|    {
 2926|  1.24M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  951|  1.24M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  1.24M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  1.24M|    {
 2908|  1.24M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  951|  1.24M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  1.24M|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEEDav:
 9660|   189k|{
 9661|   189k|    return scan_result_type<Source, Args...>();
 9662|   189k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2Ev:
 1551|   189k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2Ev:
  426|   189k|        : m_value(T{}), m_has_value(true)
  427|   189k|    {
  428|   189k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2Ev:
 6610|   189k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2Ev:
 6453|   619k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2Ev:
 3459|   619k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9645|   189k|{
 9646|   189k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  880|   189k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 61.2k, False: 128k]
  |  |  ------------------
  ------------------
 9647|  61.2k|        out = unexpected(in.error());
 9648|  61.2k|    }
 9649|   128k|    else {
 9650|   128k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  949|   128k|    static_cast<    \
  |  |  950|   128k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|   128k|    }
 9652|   189k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1739|   619k|    {
 1740|   619k|        return has_value();
 1741|   619k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.23M|    {
  490|  1.23M|        return m_has_value;
  491|  1.23M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1745|   183k|    {
 1746|   183k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  945|   183k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   183k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   183k|        return this->get_unexpected().error();
 1748|   183k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   183k|    {
  473|   183k|        return m_unexpected;
  474|   183k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  61.2k|        : base(unexpect, std::move(e.error())),
 1616|  61.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  61.2k|    {
 1618|  61.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  61.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  61.2k|          m_has_value(false)
  451|  61.2k|    {
  452|  61.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  61.2k|    {
 1316|  61.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEaSEOSC_:
 1556|  61.2k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorEvEaSEOSD_:
  902|  61.2k|    {
  903|  61.2k|        assign_common(std::move(other));
  904|  61.2k|        return *this;
  905|  61.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  61.2k|    {
  950|  61.2k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 61.2k, False: 0]
  ------------------
  951|  61.2k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 61.2k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  61.2k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  61.2k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   757k|    {
  490|   757k|        return m_has_value;
  491|   757k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   445k|    {
  456|   445k|        return m_value;
  457|   445k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  61.2k|    {
 1046|  61.2k|        this->destroy_value();
 1047|  61.2k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  61.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  61.2k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  61.2k|    {
  504|  61.2k|        scn::detail::construct_at(&get_unexpected(),
  505|  61.2k|                                  std::forward<Args>(args)...);
  506|  61.2k|        m_has_value = false;
  507|  61.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  61.2k|    {
  473|  61.2k|        return m_unexpected;
  474|  61.2k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  61.2k|    {
  481|  61.2k|        return std::move(m_unexpected);
  482|  61.2k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE9set_rangeIS9_EEvOT_:
 6484|   435k|    {
 6485|   435k|        m_range = std::forward<Other>(r);
 6486|   435k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1794|   435k|    {
 1795|   435k|        return value();
 1796|   435k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|   435k|    {
 1769|   435k|        SCN_EXPECT(has_value());
  ------------------
  |  |  945|   435k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   435k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   435k|        return this->get_value();
 1771|   435k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|   435k|    {
  456|   435k|        return m_value;
  457|   435k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9421|   281k|{
 9422|   281k|    auto buffer = make_scan_buffer(range);
 9423|       |
 9424|   281k|    auto result = vscan_impl(buffer, format, args);
 9425|   281k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  880|   281k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 84.8k, False: 197k]
  |  |  ------------------
  ------------------
 9426|  84.8k|        return unexpected(result.error());
 9427|  84.8k|    }
 9428|   197k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  951|   197k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9429|   281k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 5380|   619k|{
 5381|   619k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|   619k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|   619k|                  "\n"
 5385|   619k|                  "Unsupported range type given as input to a scanning "
 5386|   619k|                  "function.\n"
 5387|   619k|                  "A range needs to have a character type (value type) "
 5388|   619k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|   619k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|   619k|                  "to be included.\n"
 5391|   619k|                  "See the scnlib documentation for more details.");
 5392|   619k|    static_assert(
 5393|   619k|        !std::is_same_v<T, custom_char_traits>,
 5394|   619k|        "\n"
 5395|   619k|        "Unsupported range type given as input to a scanning "
 5396|   619k|        "function.\n"
 5397|   619k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|   619k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|   619k|        "not supported.");
 5400|   619k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|   619k|                  "\n"
 5402|   619k|                  "Unsupported range type given as input to a scanning "
 5403|   619k|                  "function.\n"
 5404|   619k|                  "file_marker_found cannot be used as an "
 5405|   619k|                  "source range type to scn::scan.\n"
 5406|   619k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|   619k|                  "and do not provide an explicit source range, "
 5408|   619k|                  "or use scn::scan with a FILE* directly.");
 5409|   619k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|   619k|                  "\n"
 5411|   619k|                  "Unsupported range type given as input to a scanning "
 5412|   619k|                  "function.\n"
 5413|   619k|                  "In order to be scannable, a range needs to satisfy "
 5414|   619k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|   619k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|   619k|                  "\n"
 5417|   619k|                  "Unsupported range type given as input to a scanning "
 5418|   619k|                  "function.\n"
 5419|   619k|                  "A range needs to model forward_range and have a valid "
 5420|   619k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|   619k|                  "Examples of scannable ranges are std::string, "
 5422|   619k|                  "std::string_view, "
 5423|   619k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|   619k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|   619k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|   619k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5319|   619k|{
 5320|   619k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5321|   619k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5322|       |    }
 5323|       |    else {
 5324|       |        return invalid_char_type{};
 5325|       |    }
 5326|   619k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   619k|    {
 3000|   619k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  951|   619k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   619k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   619k|    {
 2981|   619k|        return t.data();
 2982|   619k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3382|   619k|    {
 3383|   619k|        return detail::to_address(ranges::begin(derived()));
 3384|   619k|    }
_ZN3scn2v46detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  2.93M|{
  316|  2.93M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  951|  2.93M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  2.93M|}
_ZN3scn2v46detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  293|  2.93M|{
  294|  2.93M|    return p;
  295|  2.93M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  1.05M|    {
 2869|  1.05M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  951|  1.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  1.05M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  1.05M|    {
 2850|  1.05M|        return decay_copy(t.begin());
 2851|  1.05M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3479|  22.8M|    {
 3480|  22.8M|        return m_iterator;
 3481|  22.8M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3338|   619k|    {
 3339|   619k|        return static_cast<const D&>(*this);
 3340|   619k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3074|   619k|    {
 3075|   619k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|   619k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3040|   619k|    {
 3041|   619k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  951|   619k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|   619k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3495|  3.23M|    {
 3496|  3.23M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3497|  3.23M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|   183k|        : base(unexpect, std::move(e.error())),
 1616|   183k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   183k|    {
 1618|   183k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|   183k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   183k|          m_has_value(false)
  451|   183k|    {
  452|   183k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   619k|    {
 1316|   619k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6714|   435k|{
 6715|       |    if constexpr (ranges::random_access_iterator<
 6716|   435k|                      ranges::iterator_t<SourceRange>>) {
 6717|   435k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6718|       |    }
 6719|       |    else {
 6720|       |        auto it = ranges::begin(source);
 6721|       |        while (n > 0) {
 6722|       |            --n;
 6723|       |            ++it;
 6724|       |        }
 6725|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6726|       |    }
 6727|   435k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  2.09M|    {
 2869|  2.09M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  951|  2.09M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  2.09M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  2.09M|    {
 2850|  2.09M|        return decay_copy(t.begin());
 2851|  2.09M|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 6701|   435k|{
 6702|   435k|    return ranges::end(source);
 6703|   435k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   435k|    {
 2926|   435k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  951|   435k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   435k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   435k|    {
 2908|   435k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  951|   435k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   435k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3483|  12.7M|    {
 3484|  12.7M|        return m_sentinel;
 3485|  12.7M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|   435k|        : base(std::in_place, std::forward<U>(val)),
 1570|   435k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   435k|    {
 1572|   435k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|   435k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   435k|    {
  442|   435k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8782|   173k|    {
 8783|   173k|        return m_str;
 8784|   173k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJfEEEDaRNSt3__15tupleIJDpT0_EEE:
 6114|   346k|{
 6115|   346k|    detail::check_scan_arg_types<Args...>();
 6116|   346k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|   346k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJfEEC2ERNSt3__15tupleIJfEEE:
 6090|   346k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|   346k|    {
 6092|   346k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 6099|   346k|    {
 6100|   346k|        return {detail::make_arg<
 6101|   346k|            kind, Context,
 6102|   346k|            mapped_type_constant<remove_cvref_t<A>,
 6103|   346k|                                 typename Context::char_type>::value>(args)...};
 6104|   346k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE16EfvEEPvRT2_:
 5879|   346k|{
 5880|   346k|    return make_value<Context>(value).ref_value;
 5881|   346k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEfEEDaRT0_:
 5814|   378k|{
 5815|   378k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|   378k|                                  needs_context_tag>) {
 5819|   378k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  951|   378k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5820|       |    }
 5821|       |    else {
 5822|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|       |            value, context_tag<Context>{}));
 5824|       |    }
 5825|   378k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERf:
 5653|   378k|    {                                                                        \
 5654|   378k|        return val;                                                          \
 5655|   378k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJfEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|   346k|        : basic_scan_args(store.desc, store.args.data())
 6141|   346k|    {
 6142|   346k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2EmPKPv:
 6192|  1.12M|        : m_desc(desc), m_builtin_values(data)
 6193|  1.12M|    {
 6194|  1.12M|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3464|  8.31M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  949|  8.31M|    static_cast<    \
  |  |  950|  8.31M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  949|  8.31M|    static_cast<    \
  |  |  950|  8.31M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  8.31M|    {
 3466|  8.31M|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 8448|  1.12M|{
 8449|  1.12M|    return s;
 8450|  1.12M|}
_ZN3scn2v46detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 8420|  1.12M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8777|   173k|        : m_str(r.str)
 8778|   173k|    {
 8779|   173k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1739|   189k|    {
 1740|   189k|        return has_value();
 1741|   189k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEptEv:
 1814|   445k|    {
 1815|   445k|        return &value();
 1816|   445k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|   445k|    {
 1769|   445k|        SCN_EXPECT(has_value());
  ------------------
  |  |  945|   445k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   445k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   445k|        return this->get_value();
 1771|   445k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 6473|   435k|    {
 6474|   435k|        return ranges::begin(m_range);
 6475|   435k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9437|   281k|{
 9438|   281k|#if !SCN_DISABLE_LOCALE
 9439|   281k|    auto buffer = detail::make_scan_buffer(range);
 9440|       |
 9441|   281k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9442|   281k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9443|   281k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9444|       |
 9445|   281k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  880|   281k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 84.8k, False: 197k]
  |  |  ------------------
  ------------------
 9446|  84.8k|        return unexpected(result.error());
 9447|  84.8k|    }
 9448|   197k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  951|   197k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9449|       |#else
 9450|       |    static_assert(dependent_false<Locale>::value,
 9451|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9452|       |
 9453|       |    return {};
 9454|       |#endif
 9455|   281k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9461|  55.5k|{
 9462|  55.5k|    auto buffer = detail::make_scan_buffer(range);
 9463|       |
 9464|  55.5k|    auto result = detail::vscan_value_impl(buffer, arg);
 9465|  55.5k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  880|  55.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 14.1k, False: 41.4k]
  |  |  ------------------
  ------------------
 9466|  14.1k|        return unexpected(result.error());
 9467|  14.1k|    }
 9468|  41.4k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  951|  41.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9469|  55.5k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEfEENS0_14basic_scan_argIT_EERT0_:
 5864|  32.1k|{
 5865|  32.1k|    check_scan_arg_types<T>();
 5866|       |
 5867|  32.1k|    basic_scan_arg<Context> arg;
 5868|  32.1k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5869|  32.1k|    arg.m_value = make_value<Context>(value);
 5870|  32.1k|    return arg;
 5871|  32.1k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 5959|  1.23M|    constexpr basic_scan_arg() = default;
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEEDav:
 9660|   212k|{
 9661|   212k|    return scan_result_type<Source, Args...>();
 9662|   212k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2Ev:
 1551|   212k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  426|   212k|        : m_value(T{}), m_has_value(true)
  427|   212k|    {
  428|   212k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2Ev:
 6610|   212k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9645|   212k|{
 9646|   212k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  880|   212k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 61.2k, False: 151k]
  |  |  ------------------
  ------------------
 9647|  61.2k|        out = unexpected(in.error());
 9648|  61.2k|    }
 9649|   151k|    else {
 9650|   151k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  949|   151k|    static_cast<    \
  |  |  950|   151k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|   151k|    }
 9652|   212k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  61.2k|        : base(unexpect, std::move(e.error())),
 1616|  61.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  61.2k|    {
 1618|  61.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  61.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  61.2k|          m_has_value(false)
  451|  61.2k|    {
  452|  61.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  61.2k|    {
 1316|  61.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEaSEOSC_:
 1556|  61.2k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorEvEaSEOSD_:
  902|  61.2k|    {
  903|  61.2k|        assign_common(std::move(other));
  904|  61.2k|        return *this;
  905|  61.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  61.2k|    {
  950|  61.2k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 61.2k, False: 0]
  ------------------
  951|  61.2k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 61.2k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  61.2k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  61.2k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   850k|    {
  490|   850k|        return m_has_value;
  491|   850k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   515k|    {
  456|   515k|        return m_value;
  457|   515k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  61.2k|    {
 1046|  61.2k|        this->destroy_value();
 1047|  61.2k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  61.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  61.2k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  61.2k|    {
  504|  61.2k|        scn::detail::construct_at(&get_unexpected(),
  505|  61.2k|                                  std::forward<Args>(args)...);
  506|  61.2k|        m_has_value = false;
  507|  61.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  61.2k|    {
  473|  61.2k|        return m_unexpected;
  474|  61.2k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  61.2k|    {
  481|  61.2k|        return std::move(m_unexpected);
  482|  61.2k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8782|   193k|    {
 8783|   193k|        return m_str;
 8784|   193k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJdEEEDaRNSt3__15tupleIJDpT0_EEE:
 6114|   386k|{
 6115|   386k|    detail::check_scan_arg_types<Args...>();
 6116|   386k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|   386k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJdEEC2ERNSt3__15tupleIJdEEE:
 6090|   386k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|   386k|    {
 6092|   386k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 6099|   386k|    {
 6100|   386k|        return {detail::make_arg<
 6101|   386k|            kind, Context,
 6102|   386k|            mapped_type_constant<remove_cvref_t<A>,
 6103|   386k|                                 typename Context::char_type>::value>(args)...};
 6104|   386k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE17EdvEEPvRT2_:
 5879|   386k|{
 5880|   386k|    return make_value<Context>(value).ref_value;
 5881|   386k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEdEEDaRT0_:
 5814|   425k|{
 5815|   425k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|   425k|                                  needs_context_tag>) {
 5819|   425k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  951|   425k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5820|       |    }
 5821|       |    else {
 5822|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|       |            value, context_tag<Context>{}));
 5824|       |    }
 5825|   425k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERd:
 5653|   425k|    {                                                                        \
 5654|   425k|        return val;                                                          \
 5655|   425k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJdEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|   386k|        : basic_scan_args(store.desc, store.args.data())
 6141|   386k|    {
 6142|   386k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8777|   193k|        : m_str(r.str)
 8778|   193k|    {
 8779|   193k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1739|   212k|    {
 1740|   212k|        return has_value();
 1741|   212k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEptEv:
 1814|   515k|    {
 1815|   515k|        return &value();
 1816|   515k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|   515k|    {
 1769|   515k|        SCN_EXPECT(has_value());
  ------------------
  |  |  945|   515k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   515k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   515k|        return this->get_value();
 1771|   515k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEdEENS0_14basic_scan_argIT_EERT0_:
 5864|  38.7k|{
 5865|  38.7k|    check_scan_arg_types<T>();
 5866|       |
 5867|  38.7k|    basic_scan_arg<Context> arg;
 5868|  38.7k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5869|  38.7k|    arg.m_value = make_value<Context>(value);
 5870|  38.7k|    return arg;
 5871|  38.7k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEEDav:
 9660|   217k|{
 9661|   217k|    return scan_result_type<Source, Args...>();
 9662|   217k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2Ev:
 1551|   217k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2Ev:
  426|   217k|        : m_value(T{}), m_has_value(true)
  427|   217k|    {
  428|   217k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2Ev:
 6610|   217k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9645|   217k|{
 9646|   217k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  880|   217k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 61.2k, False: 155k]
  |  |  ------------------
  ------------------
 9647|  61.2k|        out = unexpected(in.error());
 9648|  61.2k|    }
 9649|   155k|    else {
 9650|   155k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  949|   155k|    static_cast<    \
  |  |  950|   155k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|   155k|    }
 9652|   217k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  61.2k|        : base(unexpect, std::move(e.error())),
 1616|  61.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  61.2k|    {
 1618|  61.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  61.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  61.2k|          m_has_value(false)
  451|  61.2k|    {
  452|  61.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  61.2k|    {
 1316|  61.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEaSEOSC_:
 1556|  61.2k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorEvEaSEOSD_:
  902|  61.2k|    {
  903|  61.2k|        assign_common(std::move(other));
  904|  61.2k|        return *this;
  905|  61.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  61.2k|    {
  950|  61.2k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 61.2k, False: 0]
  ------------------
  951|  61.2k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 61.2k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  61.2k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  61.2k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   868k|    {
  490|   868k|        return m_has_value;
  491|   868k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   528k|    {
  456|   528k|        return m_value;
  457|   528k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  61.2k|    {
 1046|  61.2k|        this->destroy_value();
 1047|  61.2k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  61.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  61.2k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  61.2k|    {
  504|  61.2k|        scn::detail::construct_at(&get_unexpected(),
  505|  61.2k|                                  std::forward<Args>(args)...);
  506|  61.2k|        m_has_value = false;
  507|  61.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  61.2k|    {
  473|  61.2k|        return m_unexpected;
  474|  61.2k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  61.2k|    {
  481|  61.2k|        return std::move(m_unexpected);
  482|  61.2k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8782|   197k|    {
 8783|   197k|        return m_str;
 8784|   197k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJeEEEDaRNSt3__15tupleIJDpT0_EEE:
 6114|   394k|{
 6115|   394k|    detail::check_scan_arg_types<Args...>();
 6116|   394k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|   394k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJeEEC2ERNSt3__15tupleIJeEEE:
 6090|   394k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|   394k|    {
 6092|   394k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 6099|   394k|    {
 6100|   394k|        return {detail::make_arg<
 6101|   394k|            kind, Context,
 6102|   394k|            mapped_type_constant<remove_cvref_t<A>,
 6103|   394k|                                 typename Context::char_type>::value>(args)...};
 6104|   394k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE18EevEEPvRT2_:
 5879|   394k|{
 5880|   394k|    return make_value<Context>(value).ref_value;
 5881|   394k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEeEEDaRT0_:
 5814|   434k|{
 5815|   434k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|   434k|                                  needs_context_tag>) {
 5819|   434k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  951|   434k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5820|       |    }
 5821|       |    else {
 5822|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|       |            value, context_tag<Context>{}));
 5824|       |    }
 5825|   434k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERe:
 5653|   434k|    {                                                                        \
 5654|   434k|        return val;                                                          \
 5655|   434k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJeEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|   394k|        : basic_scan_args(store.desc, store.args.data())
 6141|   394k|    {
 6142|   394k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8777|   197k|        : m_str(r.str)
 8778|   197k|    {
 8779|   197k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1739|   217k|    {
 1740|   217k|        return has_value();
 1741|   217k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEptEv:
 1814|   528k|    {
 1815|   528k|        return &value();
 1816|   528k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|   528k|    {
 1769|   528k|        SCN_EXPECT(has_value());
  ------------------
  |  |  945|   528k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   528k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   528k|        return this->get_value();
 1771|   528k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEeEENS0_14basic_scan_argIT_EERT0_:
 5864|  40.0k|{
 5865|  40.0k|    check_scan_arg_types<T>();
 5866|       |
 5867|  40.0k|    basic_scan_arg<Context> arg;
 5868|  40.0k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5869|  40.0k|    arg.m_value = make_value<Context>(value);
 5870|  40.0k|    return arg;
 5871|  40.0k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   183k|    {
 2869|   183k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  951|   183k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   183k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   183k|    {
 2850|   183k|        return decay_copy(t.begin());
 2851|   183k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 2093|  12.4M|{
 2094|  12.4M|    return SCN_FWD(t);
  ------------------
  |  |  951|  12.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  12.4M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  1.23M|    {
 2926|  1.23M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  951|  1.23M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  1.23M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  1.23M|    {
 2908|  1.23M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  951|  1.23M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  1.23M|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEEDav:
 9660|   189k|{
 9661|   189k|    return scan_result_type<Source, Args...>();
 9662|   189k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2Ev:
 1551|   189k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2Ev:
  426|   189k|        : m_value(T{}), m_has_value(true)
  427|   189k|    {
  428|   189k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2Ev:
 6610|   189k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2Ev:
 6453|   618k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2Ev:
 3459|   618k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9645|   189k|{
 9646|   189k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  880|   189k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 61.2k, False: 128k]
  |  |  ------------------
  ------------------
 9647|  61.2k|        out = unexpected(in.error());
 9648|  61.2k|    }
 9649|   128k|    else {
 9650|   128k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  949|   128k|    static_cast<    \
  |  |  950|   128k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|   128k|    }
 9652|   189k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1739|   618k|    {
 1740|   618k|        return has_value();
 1741|   618k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.23M|    {
  490|  1.23M|        return m_has_value;
  491|  1.23M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1745|   183k|    {
 1746|   183k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  945|   183k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   183k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   183k|        return this->get_unexpected().error();
 1748|   183k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   183k|    {
  473|   183k|        return m_unexpected;
  474|   183k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  61.2k|        : base(unexpect, std::move(e.error())),
 1616|  61.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  61.2k|    {
 1618|  61.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  61.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  61.2k|          m_has_value(false)
  451|  61.2k|    {
  452|  61.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  61.2k|    {
 1316|  61.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEaSEOSI_:
 1556|  61.2k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorEvEaSEOSJ_:
  902|  61.2k|    {
  903|  61.2k|        assign_common(std::move(other));
  904|  61.2k|        return *this;
  905|  61.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  61.2k|    {
  950|  61.2k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 61.2k, False: 0]
  ------------------
  951|  61.2k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 61.2k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  61.2k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  61.2k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   757k|    {
  490|   757k|        return m_has_value;
  491|   757k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   445k|    {
  456|   445k|        return m_value;
  457|   445k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  61.2k|    {
 1046|  61.2k|        this->destroy_value();
 1047|  61.2k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  61.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  61.2k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  61.2k|    {
  504|  61.2k|        scn::detail::construct_at(&get_unexpected(),
  505|  61.2k|                                  std::forward<Args>(args)...);
  506|  61.2k|        m_has_value = false;
  507|  61.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  61.2k|    {
  473|  61.2k|        return m_unexpected;
  474|  61.2k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  61.2k|    {
  481|  61.2k|        return std::move(m_unexpected);
  482|  61.2k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE9set_rangeISF_EEvOT_:
 6484|   435k|    {
 6485|   435k|        m_range = std::forward<Other>(r);
 6486|   435k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1794|   435k|    {
 1795|   435k|        return value();
 1796|   435k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1768|   435k|    {
 1769|   435k|        SCN_EXPECT(has_value());
  ------------------
  |  |  945|   435k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   435k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   435k|        return this->get_value();
 1771|   435k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  455|   435k|    {
  456|   435k|        return m_value;
  457|   435k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9421|   281k|{
 9422|   281k|    auto buffer = make_scan_buffer(range);
 9423|       |
 9424|   281k|    auto result = vscan_impl(buffer, format, args);
 9425|   281k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  880|   281k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 84.8k, False: 196k]
  |  |  ------------------
  ------------------
 9426|  84.8k|        return unexpected(result.error());
 9427|  84.8k|    }
 9428|   196k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  951|   196k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9429|   281k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5380|   618k|{
 5381|   618k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|   618k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|   618k|                  "\n"
 5385|   618k|                  "Unsupported range type given as input to a scanning "
 5386|   618k|                  "function.\n"
 5387|   618k|                  "A range needs to have a character type (value type) "
 5388|   618k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|   618k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|   618k|                  "to be included.\n"
 5391|   618k|                  "See the scnlib documentation for more details.");
 5392|   618k|    static_assert(
 5393|   618k|        !std::is_same_v<T, custom_char_traits>,
 5394|   618k|        "\n"
 5395|   618k|        "Unsupported range type given as input to a scanning "
 5396|   618k|        "function.\n"
 5397|   618k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|   618k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|   618k|        "not supported.");
 5400|   618k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|   618k|                  "\n"
 5402|   618k|                  "Unsupported range type given as input to a scanning "
 5403|   618k|                  "function.\n"
 5404|   618k|                  "file_marker_found cannot be used as an "
 5405|   618k|                  "source range type to scn::scan.\n"
 5406|   618k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|   618k|                  "and do not provide an explicit source range, "
 5408|   618k|                  "or use scn::scan with a FILE* directly.");
 5409|   618k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|   618k|                  "\n"
 5411|   618k|                  "Unsupported range type given as input to a scanning "
 5412|   618k|                  "function.\n"
 5413|   618k|                  "In order to be scannable, a range needs to satisfy "
 5414|   618k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|   618k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|   618k|                  "\n"
 5417|   618k|                  "Unsupported range type given as input to a scanning "
 5418|   618k|                  "function.\n"
 5419|   618k|                  "A range needs to model forward_range and have a valid "
 5420|   618k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|   618k|                  "Examples of scannable ranges are std::string, "
 5422|   618k|                  "std::string_view, "
 5423|   618k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|   618k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|   618k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|   618k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5350|   618k|{
 5351|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5352|       |        return file_marker_found{};
 5353|       |    }
 5354|       |    else if constexpr (!ranges::forward_range<Range>) {
 5355|       |        if constexpr (ranges::range<Range>) {
 5356|       |            return insufficient_range{};
 5357|       |        }
 5358|       |        else {
 5359|       |            return invalid_input_range{};
 5360|       |        }
 5361|       |    }
 5362|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5363|       |        return invalid_char_type{};
 5364|       |    }
 5365|   618k|    else {
 5366|   618k|        return make_forward_scan_buffer(r);
 5367|   618k|    }
 5368|   618k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5184|   618k|{
 5185|   618k|    return basic_scan_forward_buffer_impl(range);
 5186|   618k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4764|   618k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  951|   618k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4765|   618k|          m_cursor(ranges::begin(*m_range))
 4766|   618k|    {
 4767|   618k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4736|   618k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4737|   618k|    {
 4738|   618k|    }
_ZN3scn2v46detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4427|   618k|        : m_current_view(sv), m_is_contiguous(false)
 4428|   618k|    {
 4429|   618k|    }
_ZN3scn2v46detail17basic_scan_bufferIwED2Ev:
 4340|   618k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  1.05M|    {
 2869|  1.05M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  951|  1.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  1.05M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  1.05M|    {
 2850|  1.05M|        return decay_copy(t.begin());
 2851|  1.05M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3479|  1.48M|    {
 3480|  1.48M|        return m_iterator;
 3481|  1.48M|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4770|  3.16M|    {
 4771|  3.16M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4771:13): [True: 205k, False: 2.95M]
  ------------------
 4772|   205k|            return false;
 4773|   205k|        }
 4774|  2.95M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4775|  2.95M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  945|  2.95M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  2.95M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4776|  2.95M|        }
 4777|  2.95M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4777:13): [True: 2.34M, False: 616k]
  ------------------
 4778|  2.34M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4779|  2.34M|                                          this->m_current_view.begin(),
 4780|  2.34M|                                          this->m_current_view.end());
 4781|  2.34M|        }
 4782|  2.95M|        m_latest = *m_cursor;
 4783|  2.95M|        ++m_cursor;
 4784|  2.95M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4785|  2.95M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4786|  2.95M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  945|  2.95M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  2.95M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4787|  2.95M|        }
 4788|  2.95M|        return true;
 4789|  3.16M|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  9.08M|    {
 2926|  9.08M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  951|  9.08M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  9.08M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  9.08M|    {
 2908|  9.08M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  951|  9.08M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  9.08M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3483|  9.51M|    {
 3484|  9.51M|        return m_sentinel;
 3485|  9.51M|    }
_ZN3scn2v46detail17basic_scan_bufferIwE4syncEl:
 4345|   618k|    {
 4346|   618k|        SCN_UNUSED(position);
  ------------------
  |  |  930|   618k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4347|   618k|        return true;
 4348|   618k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1615|   183k|        : base(unexpect, std::move(e.error())),
 1616|   183k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   183k|    {
 1618|   183k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  449|   183k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   183k|          m_has_value(false)
  451|   183k|    {
  452|   183k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   618k|    {
 1316|   618k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6714|   435k|{
 6715|       |    if constexpr (ranges::random_access_iterator<
 6716|   435k|                      ranges::iterator_t<SourceRange>>) {
 6717|   435k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6718|       |    }
 6719|       |    else {
 6720|       |        auto it = ranges::begin(source);
 6721|       |        while (n > 0) {
 6722|       |            --n;
 6723|       |            ++it;
 6724|       |        }
 6725|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6726|       |    }
 6727|   435k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   435k|    {
 2869|   435k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  951|   435k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   435k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   435k|    {
 2850|   435k|        return decay_copy(t.begin());
 2851|   435k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 6701|   435k|{
 6702|   435k|    return ranges::end(source);
 6703|   435k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   435k|    {
 2926|   435k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  951|   435k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   435k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   435k|    {
 2908|   435k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  951|   435k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   435k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1569|   435k|        : base(std::in_place, std::forward<U>(val)),
 1570|   435k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   435k|    {
 1572|   435k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  440|   435k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   435k|    {
  442|   435k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8782|   173k|    {
 8783|   173k|        return m_str;
 8784|   173k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3464|  1.05M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  949|  1.05M|    static_cast<    \
  |  |  950|  1.05M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  949|  1.05M|    static_cast<    \
  |  |  950|  1.05M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  1.05M|    {
 3466|  1.05M|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8777|   173k|        : m_str(r.str)
 8778|   173k|    {
 8779|   173k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1739|   189k|    {
 1740|   189k|        return has_value();
 1741|   189k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1814|   445k|    {
 1815|   445k|        return &value();
 1816|   445k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|   445k|    {
 1769|   445k|        SCN_EXPECT(has_value());
  ------------------
  |  |  945|   445k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   445k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   445k|        return this->get_value();
 1771|   445k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 6473|   435k|    {
 6474|   435k|        return ranges::begin(m_range);
 6475|   435k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9437|   281k|{
 9438|   281k|#if !SCN_DISABLE_LOCALE
 9439|   281k|    auto buffer = detail::make_scan_buffer(range);
 9440|       |
 9441|   281k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9442|   281k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9443|   281k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9444|       |
 9445|   281k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  880|   281k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 84.8k, False: 196k]
  |  |  ------------------
  ------------------
 9446|  84.8k|        return unexpected(result.error());
 9447|  84.8k|    }
 9448|   196k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  951|   196k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9449|       |#else
 9450|       |    static_assert(dependent_false<Locale>::value,
 9451|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9452|       |
 9453|       |    return {};
 9454|       |#endif
 9455|   281k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9461|  55.4k|{
 9462|  55.4k|    auto buffer = detail::make_scan_buffer(range);
 9463|       |
 9464|  55.4k|    auto result = detail::vscan_value_impl(buffer, arg);
 9465|  55.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  880|  55.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 14.1k, False: 41.3k]
  |  |  ------------------
  ------------------
 9466|  14.1k|        return unexpected(result.error());
 9467|  14.1k|    }
 9468|  41.3k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  951|  41.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9469|  55.4k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEEDav:
 9660|   212k|{
 9661|   212k|    return scan_result_type<Source, Args...>();
 9662|   212k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2Ev:
 1551|   212k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  426|   212k|        : m_value(T{}), m_has_value(true)
  427|   212k|    {
  428|   212k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2Ev:
 6610|   212k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9645|   212k|{
 9646|   212k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  880|   212k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 61.2k, False: 151k]
  |  |  ------------------
  ------------------
 9647|  61.2k|        out = unexpected(in.error());
 9648|  61.2k|    }
 9649|   151k|    else {
 9650|   151k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  949|   151k|    static_cast<    \
  |  |  950|   151k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|   151k|    }
 9652|   212k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  61.2k|        : base(unexpect, std::move(e.error())),
 1616|  61.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  61.2k|    {
 1618|  61.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  61.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  61.2k|          m_has_value(false)
  451|  61.2k|    {
  452|  61.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  61.2k|    {
 1316|  61.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEaSEOSI_:
 1556|  61.2k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorEvEaSEOSJ_:
  902|  61.2k|    {
  903|  61.2k|        assign_common(std::move(other));
  904|  61.2k|        return *this;
  905|  61.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  61.2k|    {
  950|  61.2k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 61.2k, False: 0]
  ------------------
  951|  61.2k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 61.2k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  61.2k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  61.2k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   849k|    {
  490|   849k|        return m_has_value;
  491|   849k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   514k|    {
  456|   514k|        return m_value;
  457|   514k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  61.2k|    {
 1046|  61.2k|        this->destroy_value();
 1047|  61.2k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  61.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  61.2k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  61.2k|    {
  504|  61.2k|        scn::detail::construct_at(&get_unexpected(),
  505|  61.2k|                                  std::forward<Args>(args)...);
  506|  61.2k|        m_has_value = false;
  507|  61.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  61.2k|    {
  473|  61.2k|        return m_unexpected;
  474|  61.2k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  61.2k|    {
  481|  61.2k|        return std::move(m_unexpected);
  482|  61.2k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8782|   193k|    {
 8783|   193k|        return m_str;
 8784|   193k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8777|   193k|        : m_str(r.str)
 8778|   193k|    {
 8779|   193k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1739|   212k|    {
 1740|   212k|        return has_value();
 1741|   212k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1814|   514k|    {
 1815|   514k|        return &value();
 1816|   514k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|   514k|    {
 1769|   514k|        SCN_EXPECT(has_value());
  ------------------
  |  |  945|   514k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   514k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   514k|        return this->get_value();
 1771|   514k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEEDav:
 9660|   216k|{
 9661|   216k|    return scan_result_type<Source, Args...>();
 9662|   216k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2Ev:
 1551|   216k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2Ev:
  426|   216k|        : m_value(T{}), m_has_value(true)
  427|   216k|    {
  428|   216k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2Ev:
 6610|   216k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9645|   216k|{
 9646|   216k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  880|   216k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 61.2k, False: 155k]
  |  |  ------------------
  ------------------
 9647|  61.2k|        out = unexpected(in.error());
 9648|  61.2k|    }
 9649|   155k|    else {
 9650|   155k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  949|   155k|    static_cast<    \
  |  |  950|   155k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|   155k|    }
 9652|   216k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  61.2k|        : base(unexpect, std::move(e.error())),
 1616|  61.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  61.2k|    {
 1618|  61.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  61.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  61.2k|          m_has_value(false)
  451|  61.2k|    {
  452|  61.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  61.2k|    {
 1316|  61.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEaSEOSI_:
 1556|  61.2k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorEvEaSEOSJ_:
  902|  61.2k|    {
  903|  61.2k|        assign_common(std::move(other));
  904|  61.2k|        return *this;
  905|  61.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  61.2k|    {
  950|  61.2k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 61.2k, False: 0]
  ------------------
  951|  61.2k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 61.2k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  61.2k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  61.2k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   867k|    {
  490|   867k|        return m_has_value;
  491|   867k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   528k|    {
  456|   528k|        return m_value;
  457|   528k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  61.2k|    {
 1046|  61.2k|        this->destroy_value();
 1047|  61.2k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  61.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  61.2k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  61.2k|    {
  504|  61.2k|        scn::detail::construct_at(&get_unexpected(),
  505|  61.2k|                                  std::forward<Args>(args)...);
  506|  61.2k|        m_has_value = false;
  507|  61.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  61.2k|    {
  473|  61.2k|        return m_unexpected;
  474|  61.2k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  61.2k|    {
  481|  61.2k|        return std::move(m_unexpected);
  482|  61.2k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8782|   196k|    {
 8783|   196k|        return m_str;
 8784|   196k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8777|   196k|        : m_str(r.str)
 8778|   196k|    {
 8779|   196k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1739|   216k|    {
 1740|   216k|        return has_value();
 1741|   216k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1814|   528k|    {
 1815|   528k|        return &value();
 1816|   528k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|   528k|    {
 1769|   528k|        SCN_EXPECT(has_value());
  ------------------
  |  |  945|   528k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   528k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   528k|        return this->get_value();
 1771|   528k|    }
_ZN3scn2v410scan_errorC2ENS1_4codeEPKc:
 3740|  3.65M|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3741|  3.65M|    {
 3742|  3.65M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  930|  3.65M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3743|  3.65M|    }
_ZNK3scn2v410scan_error4codeEv:
 3752|   285k|    {
 3753|   285k|        return m_code;
 3754|   285k|    }
_ZNK3scn2v410scan_error3msgEv:
 3757|  2.55k|    {
 3758|  2.55k|        return m_msg;
 3759|  2.55k|    }
_ZN3scn2v46detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3975|   807k|{
 3976|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3977|       |                                          const CharT*, const CharT*>) {
 3978|       |        return {first, last};
 3979|       |    }
 3980|   807k|    else {
 3981|   807k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3982|   807k|    }
 3983|   807k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3479|  48.2M|    {
 3480|  48.2M|        return m_iterator;
 3481|  48.2M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3479|  26.0M|    {
 3480|  26.0M|        return m_iterator;
 3481|  26.0M|    }
_ZNK3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE9has_valueEv:
  571|  18.8M|    {
  572|  18.8M|        return m_has_value;
  573|  18.8M|    }
_ZNR3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE14get_unexpectedEv:
  554|  3.86M|    {
  555|  3.86M|        return m_unexpected;
  556|  3.86M|    }
_ZNR3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1745|   439k|    {
 1746|   439k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  945|   439k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   439k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   439k|        return this->get_unexpected().error();
 1748|   439k|    }
_ZN3scn2v46detail12specs_setterC2ERNS1_12format_specsE:
 7014|  2.33M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v46detail12specs_setter7on_typeENS1_17presentation_typeE:
 7058|  1.71M|    {
 7059|  1.71M|        m_specs.type = type;
 7060|  1.71M|    }
_ZNK3scn2v46detail12specs_setter9get_errorEv:
 7131|  2.33M|    {
 7132|  2.33M|        return m_error;
 7133|  2.33M|    }
_ZN3scn2v46detail21unexpected_scan_errorENS0_10scan_error4codeEPKc:
 3917|  3.60M|{
 3918|  3.60M|    return unexpected(scan_error{c, m});
 3919|  3.60M|}
_ZN3scn2v46detail11is_cp_spaceEDi:
 4307|  4.98M|{
 4308|       |    // Pattern_White_Space property
 4309|  4.98M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4309:13): [True: 4.77M, False: 217k]
  |  Branch (4309:27): [True: 783k, False: 3.98M]
  ------------------
 4310|  4.98M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4310:12): [True: 52.1k, False: 4.15M]
  ------------------
 4311|  4.98M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4311:12): [True: 52.9k, False: 4.09M]
  ------------------
 4312|  4.98M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4312:12): [True: 4.41k, False: 4.09M]
  ------------------
 4313|  4.98M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4313:12): [True: 18.4k, False: 4.07M]
  ------------------
 4314|  4.98M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4314:12): [True: 1.03M, False: 3.04M]
  ------------------
 4315|  4.98M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4315:12): [True: 308, False: 3.04M]
  ------------------
 4316|  4.98M|}
_ZN3scn2v46detail25get_category_for_arg_typeENS1_8arg_typeE:
 7814|   626k|{
 7815|   626k|    switch (type) {
 7816|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7816:9): [True: 0, False: 626k]
  ------------------
 7817|      0|            return arg_type_category::none;
 7818|       |
 7819|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7819:9): [True: 0, False: 626k]
  ------------------
 7820|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7820:9): [True: 0, False: 626k]
  ------------------
 7821|      0|        case arg_type::int_type:
  ------------------
  |  Branch (7821:9): [True: 0, False: 626k]
  ------------------
 7822|      0|        case arg_type::long_type:
  ------------------
  |  Branch (7822:9): [True: 0, False: 626k]
  ------------------
 7823|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (7823:9): [True: 0, False: 626k]
  ------------------
 7824|      0|            return arg_type_category::integer;
 7825|       |
 7826|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7826:9): [True: 0, False: 626k]
  ------------------
 7827|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7827:9): [True: 0, False: 626k]
  ------------------
 7828|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (7828:9): [True: 0, False: 626k]
  ------------------
 7829|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (7829:9): [True: 0, False: 626k]
  ------------------
 7830|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (7830:9): [True: 0, False: 626k]
  ------------------
 7831|      0|            return arg_type_category::unsigned_integer;
 7832|       |
 7833|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7833:9): [True: 0, False: 626k]
  ------------------
 7834|      0|            return arg_type_category::pointer;
 7835|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7835:9): [True: 0, False: 626k]
  ------------------
 7836|      0|            return arg_type_category::boolean;
 7837|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7837:9): [True: 0, False: 626k]
  ------------------
 7838|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7838:9): [True: 0, False: 626k]
  ------------------
 7839|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7839:9): [True: 0, False: 626k]
  ------------------
 7840|      0|            return arg_type_category::character;
 7841|       |
 7842|   192k|        case arg_type::float_type:
  ------------------
  |  Branch (7842:9): [True: 192k, False: 433k]
  ------------------
 7843|   407k|        case arg_type::double_type:
  ------------------
  |  Branch (7843:9): [True: 214k, False: 412k]
  ------------------
 7844|   626k|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7844:9): [True: 219k, False: 407k]
  ------------------
 7845|   626k|            return arg_type_category::floating;
 7846|       |
 7847|      0|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7847:9): [True: 0, False: 626k]
  ------------------
 7848|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7848:9): [True: 0, False: 626k]
  ------------------
 7849|      0|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7849:9): [True: 0, False: 626k]
  ------------------
 7850|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7850:9): [True: 0, False: 626k]
  ------------------
 7851|      0|            return arg_type_category::string;
 7852|       |
 7853|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7853:9): [True: 0, False: 626k]
  ------------------
 7854|      0|            return arg_type_category::custom;
 7855|       |
 7856|      0|            SCN_CLANG_PUSH
 7857|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7858|      0|        default:
  ------------------
  |  Branch (7858:9): [True: 0, False: 626k]
  ------------------
 7859|      0|            SCN_ENSURE(false);
  ------------------
  |  |  946|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  942|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7860|   626k|            SCN_UNREACHABLE;
  ------------------
  |  |  908|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7861|   626k|            SCN_CLANG_POP
 7862|   626k|    }
 7863|       |
 7864|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  908|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7865|   626k|}
_ZNO3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1755|  3.42M|    {
 1756|  3.42M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  945|  3.42M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  3.42M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  3.42M|        return std::move(this->get_unexpected().error());
 1758|  3.42M|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3040|  2.69M|    {
 3041|  2.69M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  951|  2.69M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  2.69M|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSE_:
 3074|  2.69M|    {
 3075|  2.69M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  2.69M|    }
_ZN3scn2v46ranges6detail6ssize_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISE_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSE_:
 3097|  2.69M|    {
 3098|  2.69M|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 3099|  2.69M|    }
_ZNK3scn2v46ranges6detail6ssize_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSE_:
 3106|  2.69M|    {
 3107|  2.69M|        return fn::impl(std::forward<T>(t));
 3108|  2.69M|    }
_ZN3scn2v46detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7944|  2.33M|{
 7945|  2.33M|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7945:9): [True: 1.71M, False: 626k]
  ------------------
 7946|  2.33M|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (7946:10): [True: 0, False: 1.71M]
  ------------------
 7947|  1.71M|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (7947:10): [True: 0, False: 1.71M]
  ------------------
 7948|      0|        SCN_UNLIKELY_ATTR
 7949|      0|        return handler.on_error("Invalid type specifier for float type");
 7950|      0|    }
 7951|  2.33M|}
_ZNK3scn2v48expectedIvNS0_10scan_errorEEcvbEv:
 1739|  14.9M|    {
 1740|  14.9M|        return has_value();
 1741|  14.9M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4472|   310M|    {
 4473|   310M|        assert(m_begin);
 4474|   310M|        return m_end == nullptr;
 4475|   310M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4489|  4.03M|    {
 4490|  4.03M|        if (!stores_parent()) {
  ------------------
  |  Branch (4490:13): [True: 0, False: 4.03M]
  ------------------
 4491|      0|            return make_string_view_from_pointers(
 4492|      0|                static_cast<const CharT*>(m_begin) + position(),
 4493|      0|                static_cast<const CharT*>(m_end));
 4494|      0|        }
 4495|  4.03M|        return parent()->get_segment_starting_at(position());
 4496|  4.03M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4483|   173M|    {
 4484|   173M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  945|   173M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   173M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4485|   173M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4486|   173M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4376|  4.03M|    {
 4377|  4.03M|        if (SCN_UNLIKELY(
  ------------------
  |  |  880|  4.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 1.73M, False: 2.29M]
  |  |  ------------------
  ------------------
 4378|  4.03M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4379|  1.73M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4380|  1.73M|        }
 4381|  2.29M|        const auto start = pos - m_putback_buffer.size();
 4382|  2.29M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  945|  2.29M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  2.29M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4383|  2.29M|        return m_current_view.substr(start);
 4384|  2.29M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4478|  2.82M|    {
 4479|  2.82M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  945|  2.82M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  2.82M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4480|  2.82M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4481|  2.82M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4467|  7.41M|    {
 4468|  7.41M|        return m_position;
 4469|  7.41M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE13is_contiguousEv:
 4398|  3.23M|    {
 4399|  3.23M|        return m_is_contiguous;
 4400|  3.23M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4472|  84.7M|    {
 4473|  84.7M|        assert(m_begin);
 4474|  84.7M|        return m_end == nullptr;
 4475|  84.7M|    }
_ZN3scn2v46detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3975|   418k|{
 3976|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3977|       |                                          const CharT*, const CharT*>) {
 3978|       |        return {first, last};
 3979|       |    }
 3980|   418k|    else {
 3981|   418k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3982|   418k|    }
 3983|   418k|}
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4489|  1.49M|    {
 4490|  1.49M|        if (!stores_parent()) {
  ------------------
  |  Branch (4490:13): [True: 0, False: 1.49M]
  ------------------
 4491|      0|            return make_string_view_from_pointers(
 4492|      0|                static_cast<const CharT*>(m_begin) + position(),
 4493|      0|                static_cast<const CharT*>(m_end));
 4494|      0|        }
 4495|  1.49M|        return parent()->get_segment_starting_at(position());
 4496|  1.49M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4483|  45.3M|    {
 4484|  45.3M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  945|  45.3M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  45.3M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4485|  45.3M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4486|  45.3M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4376|  1.49M|    {
 4377|  1.49M|        if (SCN_UNLIKELY(
  ------------------
  |  |  880|  1.49M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 855k, False: 639k]
  |  |  ------------------
  ------------------
 4378|  1.49M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4379|   855k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4380|   855k|        }
 4381|   639k|        const auto start = pos - m_putback_buffer.size();
 4382|   639k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  945|   639k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   639k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4383|   639k|        return m_current_view.substr(start);
 4384|   639k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4478|  1.62M|    {
 4479|  1.62M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  945|  1.62M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  1.62M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4480|  1.62M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4481|  1.62M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4467|  3.28M|    {
 4468|  3.28M|        return m_position;
 4469|  3.28M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE13is_contiguousEv:
 4398|  1.85M|    {
 4399|  1.85M|        return m_is_contiguous;
 4400|  1.85M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3333|  5.49M|    {
 3334|  5.49M|        return static_cast<D&>(*this);
 3335|  5.49M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3374|  5.49M|    {
 3375|  5.49M|        return detail::to_address(ranges::begin(derived()));
 3376|  5.49M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3333|  1.43M|    {
 3334|  1.43M|        return static_cast<D&>(*this);
 3335|  1.43M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3374|  1.43M|    {
 3375|  1.43M|        return detail::to_address(ranges::begin(derived()));
 3376|  1.43M|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5rangeEv:
 8979|   775k|    {
 8980|   775k|        return ranges::subrange{begin(), end()};
 8981|   775k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE3endEv:
 8971|   775k|    {
 8972|   775k|        return ranges::default_sentinel;
 8973|   775k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3464|  11.7M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  949|  11.7M|    static_cast<    \
  |  |  950|  11.7M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  949|  11.7M|    static_cast<    \
  |  |  950|  11.7M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  11.7M|    {
 3466|  11.7M|    }
_ZN3scn2v46detail10locale_refC2Ev:
 8798|  4.97M|    constexpr locale_ref() = default;
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|  1.07M|    {
 1979|  1.07M|        return detail::transform_error_impl(std::move(*this),
 1980|  1.07M|                                            std::forward<F>(f));
 1981|  1.07M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|  1.07M|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  1.07M|    else {
 1472|  1.07M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  1.07M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  879|  1.07M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (879:25): [True: 1.05M, False: 19.6k]
  |  |  ------------------
  ------------------
 1474|  1.07M|                   ? result(*std::forward<Exp>(exp))
 1475|  1.07M|                   : result(unexpect,
 1476|  19.6k|                            trivial_invoke(std::forward<F>(f),
 1477|  19.6k|                                           std::forward<Exp>(exp).error()));
 1478|  1.07M|    }
 1479|  1.07M|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  11.4M|    {
  490|  11.4M|        return m_has_value;
  491|  11.4M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|  3.84M|    {
 1805|  3.84M|        return std::move(value());
 1806|  3.84M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|  4.41M|    {
 1769|  4.41M|        SCN_EXPECT(has_value());
  ------------------
  |  |  945|  4.41M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  4.41M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  4.41M|        return this->get_value();
 1771|  4.41M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  4.41M|    {
  456|  4.41M|        return m_value;
  457|  4.41M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1569|  4.71M|        : base(std::in_place, std::forward<U>(val)),
 1570|  4.71M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  4.71M|    {
 1572|  4.71M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  4.71M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  4.71M|    {
  442|  4.71M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  6.07M|    {
 1316|  6.07M|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1349|  46.5k|{
 1350|  46.5k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1351|  46.5k|}
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1755|  54.9k|    {
 1756|  54.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  945|  54.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  54.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  54.9k|        return std::move(this->get_unexpected().error());
 1758|  54.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  74.8k|    {
  473|  74.8k|        return m_unexpected;
  474|  74.8k|    }
_ZNR3scn2v410unexpectedINS0_4impl9eof_errorEE5errorEv:
  364|   465k|    {
  365|   465k|        return m_unexpected;
  366|   465k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1625|  1.07M|        : base(unexpect, std::forward<Args>(args)...),
 1626|  1.07M|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  1.07M|    {
 1628|  1.07M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  1.30M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.30M|          m_has_value(false)
  451|  1.30M|    {
  452|  1.30M|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5rangeEv:
 8979|   452k|    {
 8980|   452k|        return ranges::subrange{begin(), end()};
 8981|   452k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE3endEv:
 8971|   452k|    {
 8972|   452k|        return ranges::default_sentinel;
 8973|   452k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3464|  6.32M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  949|  6.32M|    static_cast<    \
  |  |  950|  6.32M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  949|  6.32M|    static_cast<    \
  |  |  950|  6.32M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  6.32M|    {
 3466|  6.32M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|   618k|    {
 1979|   618k|        return detail::transform_error_impl(std::move(*this),
 1980|   618k|                                            std::forward<F>(f));
 1981|   618k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|   618k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   618k|    else {
 1472|   618k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   618k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  879|   618k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (879:25): [True: 614k, False: 4.63k]
  |  |  ------------------
  ------------------
 1474|   618k|                   ? result(*std::forward<Exp>(exp))
 1475|   618k|                   : result(unexpect,
 1476|  4.63k|                            trivial_invoke(std::forward<F>(f),
 1477|  4.63k|                                           std::forward<Exp>(exp).error()));
 1478|   618k|    }
 1479|   618k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  5.97M|    {
  490|  5.97M|        return m_has_value;
  491|  5.97M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|  2.17M|    {
 1805|  2.17M|        return std::move(value());
 1806|  2.17M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|  2.20M|    {
 1769|  2.20M|        SCN_EXPECT(has_value());
  ------------------
  |  |  945|  2.20M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  2.20M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.20M|        return this->get_value();
 1771|  2.20M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  2.20M|    {
  456|  2.20M|        return m_value;
  457|  2.20M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1569|  2.23M|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.23M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.23M|    {
 1572|  2.23M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  2.23M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.23M|    {
  442|  2.23M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  3.52M|    {
 1316|  3.52M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1755|  64.0k|    {
 1756|  64.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  945|  64.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  64.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  64.0k|        return std::move(this->get_unexpected().error());
 1758|  64.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  66.9k|    {
  473|  66.9k|        return m_unexpected;
  474|  66.9k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1625|   791k|        : base(unexpect, std::forward<Args>(args)...),
 1626|   791k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|   791k|    {
 1628|   791k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  1.29M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.29M|          m_has_value(false)
  451|  1.29M|    {
  452|  1.29M|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  349|  3.60M|        : m_unexpected(std::forward<Err>(e))
  350|  3.60M|    {
  351|  3.60M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  930|  3.60M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  3.60M|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1615|   839k|        : base(unexpect, std::move(e.error())),
 1616|   839k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   839k|    {
 1618|   839k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  449|   839k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   839k|          m_has_value(false)
  451|   839k|    {
  452|   839k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  8.93M|    {
 1316|  8.93M|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1615|   207k|        : base(unexpect, std::move(e.error())),
 1616|   207k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   207k|    {
 1618|   207k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|  1.11M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.11M|          m_has_value(false)
  451|  1.11M|    {
  452|  1.11M|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  5.28M|    {
 1316|  5.28M|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1569|  4.11M|        : base(std::in_place, std::forward<U>(val)),
 1570|  4.11M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  4.11M|    {
 1572|  4.11M|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  4.11M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  4.11M|    {
  442|  4.11M|    }
_ZNK3scn2v48expectedIPKcNS0_10scan_errorEEcvbEv:
 1739|  6.19M|    {
 1740|  6.19M|        return has_value();
 1741|  6.19M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  489|  9.73M|    {
  490|  9.73M|        return m_has_value;
  491|  9.73M|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5errorEv:
 1745|   247k|    {
 1746|   247k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  945|   247k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   247k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   247k|        return this->get_unexpected().error();
 1748|   247k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   247k|    {
  473|   247k|        return m_unexpected;
  474|   247k|    }
_ZNO3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1804|  2.65M|    {
 1805|  2.65M|        return std::move(value());
 1806|  2.65M|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1768|  3.29M|    {
 1769|  3.29M|        SCN_EXPECT(has_value());
  ------------------
  |  |  945|  3.29M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  3.29M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  3.29M|        return this->get_value();
 1771|  3.29M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  455|  3.29M|    {
  456|  3.29M|        return m_value;
  457|  3.29M|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1615|   408k|        : base(unexpect, std::move(e.error())),
 1616|   408k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   408k|    {
 1618|   408k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|  1.10M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.10M|          m_has_value(false)
  451|  1.10M|    {
  452|  1.10M|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  3.53M|    {
 1316|  3.53M|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1569|  2.42M|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.42M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.42M|    {
 1572|  2.42M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  2.42M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.42M|    {
  442|  2.42M|    }
_ZNK3scn2v48expectedIPKwNS0_10scan_errorEEcvbEv:
 1739|  4.14M|    {
 1740|  4.14M|        return has_value();
 1741|  4.14M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  489|  6.53M|    {
  490|  6.53M|        return m_has_value;
  491|  6.53M|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5errorEv:
 1745|   491k|    {
 1746|   491k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  945|   491k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   491k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   491k|        return this->get_unexpected().error();
 1748|   491k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   491k|    {
  473|   491k|        return m_unexpected;
  474|   491k|    }
_ZNO3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1804|  1.58M|    {
 1805|  1.58M|        return std::move(value());
 1806|  1.58M|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1768|  1.89M|    {
 1769|  1.89M|        SCN_EXPECT(has_value());
  ------------------
  |  |  945|  1.89M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  1.89M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.89M|        return this->get_value();
 1771|  1.89M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  455|  1.89M|    {
  456|  1.89M|        return m_value;
  457|  1.89M|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|   934k|    {
 1979|   934k|        return detail::transform_error_impl(std::move(*this),
 1980|   934k|                                            std::forward<F>(f));
 1981|   934k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|   934k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   934k|    else {
 1472|   934k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   934k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  879|   934k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (879:25): [True: 918k, False: 15.9k]
  |  |  ------------------
  ------------------
 1474|   934k|                   ? result(*std::forward<Exp>(exp))
 1475|   934k|                   : result(unexpect,
 1476|  15.9k|                            trivial_invoke(std::forward<F>(f),
 1477|  15.9k|                                           std::forward<Exp>(exp).error()));
 1478|   934k|    }
 1479|   934k|}
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  3.56M|    {
  490|  3.56M|        return m_has_value;
  491|  3.56M|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|   918k|    {
 1805|   918k|        return std::move(value());
 1806|   918k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|  1.22M|    {
 1769|  1.22M|        SCN_EXPECT(has_value());
  ------------------
  |  |  945|  1.22M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  1.22M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.22M|        return this->get_value();
 1771|  1.22M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  1.22M|    {
  456|  1.22M|        return m_value;
  457|  1.22M|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1755|  15.9k|    {
 1756|  15.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  945|  15.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  15.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  15.9k|        return std::move(this->get_unexpected().error());
 1758|  15.9k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  22.4k|    {
  473|  22.4k|        return m_unexpected;
  474|  22.4k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1625|   904k|        : base(unexpect, std::forward<Args>(args)...),
 1626|   904k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|   904k|    {
 1628|   904k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5beginEv:
 8963|  2.25M|    {
 8964|  2.25M|        return m_current;
 8965|  2.25M|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE6localeEv:
 8856|  1.43M|    {
 8857|  1.43M|        return m_locale;
 8858|  1.43M|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2ES7_NS1_10locale_refE:
 8862|  1.43M|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  949|  1.43M|    static_cast<    \
  |  |  950|  1.43M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  949|  1.43M|    static_cast<    \
  |  |  950|  1.43M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8863|  1.43M|    {
 8864|  1.43M|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   836k|    {
 3000|   836k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  951|   836k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   836k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   836k|    {
 2981|   836k|        return t.data();
 2982|   836k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|   229k|        : base(unexpect, std::move(e.error())),
 1616|   229k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   229k|    {
 1618|   229k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1569|  58.5k|        : base(std::in_place, std::forward<U>(val)),
 1570|  58.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  58.5k|    {
 1572|  58.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  440|  58.5k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  58.5k|    {
  442|  58.5k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5beginEv:
 8963|  1.21M|    {
 8964|  1.21M|        return m_current;
 8965|  1.21M|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE6localeEv:
 8856|   904k|    {
 8857|   904k|        return m_locale;
 8858|   904k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2ES7_NS1_10locale_refE:
 8862|   904k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  949|   904k|    static_cast<    \
  |  |  950|   904k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  949|   904k|    static_cast<    \
  |  |  950|   904k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8863|   904k|    {
 8864|   904k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|   501k|        : base(unexpect, std::move(e.error())),
 1616|   501k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   501k|    {
 1618|   501k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1615|  3.86M|        : base(unexpect, std::move(e.error())),
 1616|  3.86M|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  3.86M|    {
 1618|  3.86M|    }
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  548|  3.86M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  549|  3.86M|          m_has_value(false)
  550|  3.86M|    {
  551|  3.86M|    }
_ZN3scn2v46detail26expected_default_ctor_baseIvNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  3.86M|    {
 1316|  3.86M|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2Ev:
 1551|  12.5M|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2Ev:
  528|  12.5M|        : m_deferred_init(), m_has_value(true)
  529|  12.5M|    {
  530|  12.5M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4558|  9.37M|    {
 4559|  9.37M|        return x.is_at_end();
 4560|  9.37M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4602|  23.3M|    {
 4603|  23.3M|        if (m_end) {
  ------------------
  |  Branch (4603:13): [True: 0, False: 23.3M]
  ------------------
 4604|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4605|      0|        }
 4606|  23.3M|        if (!m_begin) {
  ------------------
  |  Branch (4606:13): [True: 0, False: 23.3M]
  ------------------
 4607|      0|            return true;
 4608|      0|        }
 4609|  23.3M|        return !read_at_position();
 4610|  23.3M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4582|   101M|    {
 4583|   101M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  945|   101M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   101M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4584|       |
 4585|   101M|        if (!stores_parent()) {
  ------------------
  |  Branch (4585:13): [True: 0, False: 101M]
  ------------------
 4586|      0|            return true;
 4587|      0|        }
 4588|       |
 4589|   101M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  879|   101M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (879:25): [True: 87.8M, False: 13.8M]
  |  |  ------------------
  ------------------
 4590|  87.8M|            return true;
 4591|  87.8M|        }
 4592|       |
 4593|  27.3M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4593:16): [True: 13.8M, False: 13.5M]
  ------------------
 4594|  13.8M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4594:17): [True: 291k, False: 13.5M]
  ------------------
 4595|   291k|                return false;
 4596|   291k|            }
 4597|  13.8M|        }
 4598|  13.5M|        return true;
 4599|  13.8M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4517|  26.2M|    {
 4518|  26.2M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  945|  26.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  26.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4519|       |
 4520|  26.2M|        if (!stores_parent()) {
  ------------------
  |  Branch (4520:13): [True: 0, False: 26.2M]
  ------------------
 4521|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4522|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  945|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4523|      0|            return *ptr;
 4524|      0|        }
 4525|       |
 4526|  26.2M|        auto res = read_at_position();
 4527|  26.2M|        SCN_EXPECT(res);
  ------------------
  |  |  945|  26.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  26.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4528|  26.2M|        return parent()->get_character_at(m_position);
 4529|  26.2M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16get_character_atEl:
 4387|  26.2M|    {
 4388|  26.2M|        if (SCN_UNLIKELY(
  ------------------
  |  |  880|  26.2M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 16.3M, False: 9.90M]
  |  |  ------------------
  ------------------
 4389|  26.2M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4390|  16.3M|            return m_putback_buffer[pos];
 4391|  16.3M|        }
 4392|  9.90M|        const auto start = pos - m_putback_buffer.size();
 4393|  9.90M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  945|  9.90M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  9.90M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4394|  9.90M|        return m_current_view[start];
 4395|  9.90M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1569|  6.84M|        : base(std::in_place, std::forward<U>(val)),
 1570|  6.84M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  6.84M|    {
 1572|  6.84M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  6.84M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  6.84M|    {
  442|  6.84M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  6.91M|    {
 1316|  6.91M|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  349|   156k|        : m_unexpected(std::forward<Err>(e))
  350|   156k|    {
  351|   156k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  930|   156k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|   156k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|  74.8k|        : base(unexpect, std::move(e.error())),
 1616|  74.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  74.8k|    {
 1618|  74.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  74.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  74.8k|          m_has_value(false)
  451|  74.8k|    {
  452|  74.8k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  358|   233k|        : m_unexpected(std::forward<Args>(args)...)
  359|   233k|    {
  360|   233k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  930|   233k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|   233k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4503|  51.9M|    {
 4504|  51.9M|        ++m_position;
 4505|  51.9M|        (void)read_at_position();
 4506|  51.9M|        return *this;
 4507|  51.9M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1739|  3.01M|    {
 1740|  3.01M|        return has_value();
 1741|  3.01M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1794|   572k|    {
 1795|   572k|        return value();
 1796|   572k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4552|  25.0M|    {
 4553|  25.0M|        return !(lhs == rhs);
 4554|  25.0M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4547|  27.7M|    {
 4548|  27.7M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4548:16): [True: 27.7M, False: 0]
  |  Branch (4548:46): [True: 3.53M, False: 24.2M]
  ------------------
 4549|  27.7M|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  349|  76.5k|        : m_unexpected(std::forward<Err>(e))
  350|  76.5k|    {
  351|  76.5k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  930|  76.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  76.5k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|  14.8k|        : base(unexpect, std::move(e.error())),
 1616|  14.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  14.8k|    {
 1618|  14.8k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|  14.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.8k|          m_has_value(false)
  451|  14.8k|    {
  452|  14.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.46M|    {
 1316|  1.46M|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|  1.45M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.45M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.45M|    {
 1572|  1.45M|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  440|  1.45M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.45M|    {
  442|  1.45M|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1739|  1.46M|    {
 1740|  1.46M|        return has_value();
 1741|  1.46M|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  489|  2.93M|    {
  490|  2.93M|        return m_has_value;
  491|  2.93M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1745|  14.8k|    {
 1746|  14.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  945|  14.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  14.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  14.8k|        return this->get_unexpected().error();
 1748|  14.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.8k|    {
  473|  14.8k|        return m_unexpected;
  474|  14.8k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|  1.45M|    {
 1805|  1.45M|        return std::move(value());
 1806|  1.45M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|  1.45M|    {
 1769|  1.45M|        SCN_EXPECT(has_value());
  ------------------
  |  |  945|  1.45M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  1.45M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.45M|        return this->get_value();
 1771|  1.45M|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.45M|    {
  456|  1.45M|        return m_value;
  457|  1.45M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3483|  33.2M|    {
 3484|  33.2M|        return m_sentinel;
 3485|  33.2M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  349|  65.3k|        : m_unexpected(std::forward<Err>(e))
  350|  65.3k|    {
  351|  65.3k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  930|  65.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  65.3k|    }
_ZNR3scn2v410unexpectedINS0_4impl11parse_errorEE5errorEv:
  364|  13.0M|    {
  365|  13.0M|        return m_unexpected;
  366|  13.0M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  358|  3.55M|        : m_unexpected(std::forward<Args>(args)...)
  359|  3.55M|    {
  360|  3.55M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  930|  3.55M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  3.55M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  349|  15.7M|        : m_unexpected(std::forward<Err>(e))
  350|  15.7M|    {
  351|  15.7M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  930|  15.7M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  15.7M|    }
_ZNR3scn2v410unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  364|  15.7M|    {
  365|  15.7M|        return m_unexpected;
  366|  15.7M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  358|  15.7M|        : m_unexpected(std::forward<Args>(args)...)
  359|  15.7M|    {
  360|  15.7M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  930|  15.7M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  15.7M|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1349|   154k|{
 1350|   154k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1351|   154k|}
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  349|  3.33M|        : m_unexpected(std::forward<Err>(e))
  350|  3.33M|    {
  351|  3.33M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  930|  3.33M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  3.33M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1745|  19.8k|    {
 1746|  19.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  945|  19.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  19.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  19.8k|        return this->get_unexpected().error();
 1748|  19.8k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|  1.10M|        : base(unexpect, std::move(e.error())),
 1616|  1.10M|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  1.10M|    {
 1618|  1.10M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  1.13M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.13M|          m_has_value(false)
  451|  1.13M|    {
  452|  1.13M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  11.7M|    {
 1316|  11.7M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1569|   577k|        : base(std::in_place, std::forward<U>(val)),
 1570|   577k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   577k|    {
 1572|   577k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  440|   577k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   577k|    {
  442|   577k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|  5.95M|        : base(unexpect, std::move(e.error())),
 1616|  5.95M|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  5.95M|    {
 1618|  5.95M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|  5.95M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  5.95M|          m_has_value(false)
  451|  5.95M|    {
  452|  5.95M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1739|  12.8M|    {
 1740|  12.8M|        return has_value();
 1741|  12.8M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  489|  22.7M|    {
  490|  22.7M|        return m_has_value;
  491|  22.7M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1745|  3.01M|    {
 1746|  3.01M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  945|  3.01M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  3.01M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  3.01M|        return this->get_unexpected().error();
 1748|  3.01M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  472|  3.01M|    {
  473|  3.01M|        return m_unexpected;
  474|  3.01M|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1569|  1.16M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.16M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.16M|    {
 1572|  1.16M|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  440|  1.16M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.16M|    {
  442|  1.16M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.16M|    {
 1316|  1.16M|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSE_IXsr3stdE16is_convertible_vISG_SB_EEvE4typeELSK_0EEEONS0_10unexpectedISF_EE:
 1615|    279|        : base(unexpect, std::move(e.error())),
 1616|    279|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    279|    {
 1618|    279|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  449|    279|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    279|          m_has_value(false)
  451|    279|    {
  452|    279|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1794|  3.00M|    {
 1795|  3.00M|        return value();
 1796|  3.00M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|  5.79M|    {
 1769|  5.79M|        SCN_EXPECT(has_value());
  ------------------
  |  |  945|  5.79M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  5.79M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  5.79M|        return this->get_value();
 1771|  5.79M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  455|  5.79M|    {
  456|  5.79M|        return m_value;
  457|  5.79M|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1739|   104k|    {
 1740|   104k|        return has_value();
 1741|   104k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  489|  2.32M|    {
  490|  2.32M|        return m_has_value;
  491|  2.32M|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|  1.05M|    {
 1805|  1.05M|        return std::move(value());
 1806|  1.05M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|  1.16M|    {
 1769|  1.16M|        SCN_EXPECT(has_value());
  ------------------
  |  |  945|  1.16M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  1.16M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.16M|        return this->get_value();
 1771|  1.16M|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  455|  1.16M|    {
  456|  1.16M|        return m_value;
  457|  1.16M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|  2.82M|    {
 1979|  2.82M|        return detail::transform_error_impl(std::move(*this),
 1980|  2.82M|                                            std::forward<F>(f));
 1981|  2.82M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|  2.82M|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  2.82M|    else {
 1472|  2.82M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  2.82M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  879|  2.82M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (879:25): [True: 2.78M, False: 35.3k]
  |  |  ------------------
  ------------------
 1474|  2.82M|                   ? result(*std::forward<Exp>(exp))
 1475|  2.82M|                   : result(unexpect,
 1476|  35.3k|                            trivial_invoke(std::forward<F>(f),
 1477|  35.3k|                                           std::forward<Exp>(exp).error()));
 1478|  2.82M|    }
 1479|  2.82M|}
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1569|  4.10M|        : base(std::in_place, std::forward<U>(val)),
 1570|  4.10M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  4.10M|    {
 1572|  4.10M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  4.10M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  4.10M|    {
  442|  4.10M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1625|  35.3k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  35.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  35.3k|    {
 1628|  35.3k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|  2.78M|    {
 1805|  2.78M|        return std::move(value());
 1806|  2.78M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1739|  7.12M|    {
 1740|  7.12M|        return has_value();
 1741|  7.12M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  489|  11.2M|    {
  490|  11.2M|        return m_has_value;
  491|  11.2M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1745|   303k|    {
 1746|   303k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  945|   303k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   303k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   303k|        return this->get_unexpected().error();
 1748|   303k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   303k|    {
  473|   303k|        return m_unexpected;
  474|   303k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|  3.03M|    {
 1805|  3.03M|        return std::move(value());
 1806|  3.03M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|  3.78M|    {
 1769|  3.78M|        SCN_EXPECT(has_value());
  ------------------
  |  |  945|  3.78M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  3.78M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  3.78M|        return this->get_value();
 1771|  3.78M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  455|  3.78M|    {
  456|  3.78M|        return m_value;
  457|  3.78M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3479|  1.22M|    {
 3480|  1.22M|        return m_iterator;
 3481|  1.22M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3483|  1.22M|    {
 3484|  1.22M|        return m_sentinel;
 3485|  1.22M|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3464|   941k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  949|   941k|    static_cast<    \
  |  |  950|   941k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  949|   941k|    static_cast<    \
  |  |  950|   941k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   941k|    {
 3466|   941k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4569|  14.0M|    {
 4570|  14.0M|        return !x.is_at_end();
 4571|  14.0M|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|  22.4k|        : base(unexpect, std::move(e.error())),
 1616|  22.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  22.4k|    {
 1618|  22.4k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  22.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  22.4k|          m_has_value(false)
  451|  22.4k|    {
  452|  22.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  2.31M|    {
 1316|  2.31M|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1569|  2.29M|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.29M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.29M|    {
 1572|  2.29M|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  2.29M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.29M|    {
  442|  2.29M|    }
_ZNK3scn2v48expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1739|  1.38M|    {
 1740|  1.38M|        return has_value();
 1741|  1.38M|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1794|   305k|    {
 1795|   305k|        return value();
 1796|   305k|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  11.4k|        : base(unexpect, std::move(e.error())),
 1616|  11.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  11.4k|    {
 1618|  11.4k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  449|  11.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  11.4k|          m_has_value(false)
  451|  11.4k|    {
  452|  11.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.23M|    {
 1316|  1.23M|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|  1.22M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.22M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.22M|    {
 1572|  1.22M|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  440|  1.22M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.22M|    {
  442|  1.22M|    }
_ZNK3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1739|  1.23M|    {
 1740|  1.23M|        return has_value();
 1741|  1.23M|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  489|  2.47M|    {
  490|  2.47M|        return m_has_value;
  491|  2.47M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1745|  11.4k|    {
 1746|  11.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  945|  11.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  11.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  11.4k|        return this->get_unexpected().error();
 1748|  11.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  11.4k|    {
  473|  11.4k|        return m_unexpected;
  474|  11.4k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|  1.22M|    {
 1805|  1.22M|        return std::move(value());
 1806|  1.22M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|  1.22M|    {
 1769|  1.22M|        SCN_EXPECT(has_value());
  ------------------
  |  |  945|  1.22M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  1.22M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.22M|        return this->get_value();
 1771|  1.22M|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.22M|    {
  456|  1.22M|        return m_value;
  457|  1.22M|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1745|  6.56k|    {
 1746|  6.56k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  945|  6.56k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  6.56k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  6.56k|        return this->get_unexpected().error();
 1748|  6.56k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|   950k|        : base(unexpect, std::move(e.error())),
 1616|   950k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   950k|    {
 1618|   950k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|   950k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   950k|          m_has_value(false)
  451|   950k|    {
  452|   950k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  5.25M|    {
 1316|  5.25M|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1569|   309k|        : base(std::in_place, std::forward<U>(val)),
 1570|   309k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   309k|    {
 1572|   309k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  440|   309k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   309k|    {
  442|   309k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  3.60M|        : base(unexpect, std::move(e.error())),
 1616|  3.60M|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  3.60M|    {
 1618|  3.60M|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|  3.60M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  3.60M|          m_has_value(false)
  451|  3.60M|    {
  452|  3.60M|    }
_ZNK3scn2v48expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1739|  6.17M|    {
 1740|  6.17M|        return has_value();
 1741|  6.17M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  489|  10.5M|    {
  490|  10.5M|        return m_has_value;
  491|  10.5M|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1745|  2.52M|    {
 1746|  2.52M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  945|  2.52M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  2.52M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  2.52M|        return this->get_unexpected().error();
 1748|  2.52M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  472|  2.52M|    {
  473|  2.52M|        return m_unexpected;
  474|  2.52M|    }
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1569|   949k|        : base(std::in_place, std::forward<U>(val)),
 1570|   949k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   949k|    {
 1572|   949k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  440|   949k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   949k|    {
  442|   949k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   951k|    {
 1316|   951k|    }
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|  1.78k|        : base(unexpect, std::move(e.error())),
 1616|  1.78k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  1.78k|    {
 1618|  1.78k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|  1.78k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.78k|          m_has_value(false)
  451|  1.78k|    {
  452|  1.78k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1794|   977k|    {
 1795|   977k|        return value();
 1796|   977k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|   977k|    {
 1769|   977k|        SCN_EXPECT(has_value());
  ------------------
  |  |  945|   977k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   977k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   977k|        return this->get_value();
 1771|   977k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  455|   977k|    {
  456|   977k|        return m_value;
  457|   977k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1739|  33.5k|    {
 1740|  33.5k|        return has_value();
 1741|  33.5k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  489|  1.90M|    {
  490|  1.90M|        return m_has_value;
  491|  1.90M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5errorEv:
 1745|  1.69k|    {
 1746|  1.69k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  945|  1.69k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  1.69k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  1.69k|        return this->get_unexpected().error();
 1748|  1.69k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE14get_unexpectedEv:
  472|  1.69k|    {
  473|  1.69k|        return m_unexpected;
  474|  1.69k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|  1.69k|        : base(unexpect, std::move(e.error())),
 1616|  1.69k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  1.69k|    {
 1618|  1.69k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  449|  1.69k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.69k|          m_has_value(false)
  451|  1.69k|    {
  452|  1.69k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  8.53k|    {
 1316|  8.53k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|   924k|    {
 1805|   924k|        return std::move(value());
 1806|   924k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|   949k|    {
 1769|   949k|        SCN_EXPECT(has_value());
  ------------------
  |  |  945|   949k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   949k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   949k|        return this->get_value();
 1771|   949k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  455|   949k|    {
  456|   949k|        return m_value;
  457|   949k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1569|   395k|        : base(std::in_place, std::forward<U>(val)),
 1570|   395k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   395k|    {
 1572|   395k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|   395k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   395k|    {
  442|   395k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1569|  6.83k|        : base(std::in_place, std::forward<U>(val)),
 1570|  6.83k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  6.83k|    {
 1572|  6.83k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  440|  6.83k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  6.83k|    {
  442|  6.83k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|  8.53k|    {
 1979|  8.53k|        return detail::transform_error_impl(std::move(*this),
 1980|  8.53k|                                            std::forward<F>(f));
 1981|  8.53k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSG_OT0_:
 1461|  8.53k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  8.53k|    else {
 1472|  8.53k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  8.53k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  879|  8.53k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (879:25): [True: 6.83k, False: 1.69k]
  |  |  ------------------
  ------------------
 1474|  8.53k|                   ? result(*std::forward<Exp>(exp))
 1475|  8.53k|                   : result(unexpect,
 1476|  1.69k|                            trivial_invoke(std::forward<F>(f),
 1477|  1.69k|                                           std::forward<Exp>(exp).error()));
 1478|  8.53k|    }
 1479|  8.53k|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  489|  17.0k|    {
  490|  17.0k|        return m_has_value;
  491|  17.0k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|  6.83k|    {
 1805|  6.83k|        return std::move(value());
 1806|  6.83k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|  6.83k|    {
 1769|  6.83k|        SCN_EXPECT(has_value());
  ------------------
  |  |  945|  6.83k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  6.83k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  6.83k|        return this->get_value();
 1771|  6.83k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  455|  6.83k|    {
  456|  6.83k|        return m_value;
  457|  6.83k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|  6.83k|        : base(std::in_place, std::forward<U>(val)),
 1570|  6.83k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  6.83k|    {
 1572|  6.83k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  440|  6.83k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  6.83k|    {
  442|  6.83k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  8.53k|    {
 1316|  8.53k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5errorEv:
 1755|  1.69k|    {
 1756|  1.69k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  945|  1.69k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  1.69k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  1.69k|        return std::move(this->get_unexpected().error());
 1758|  1.69k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE14get_unexpectedEv:
  472|  1.69k|    {
  473|  1.69k|        return m_unexpected;
  474|  1.69k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1625|  1.69k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  1.69k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  1.69k|    {
 1628|  1.69k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  449|  1.69k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.69k|          m_has_value(false)
  451|  1.69k|    {
  452|  1.69k|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1739|  8.53k|    {
 1740|  8.53k|        return has_value();
 1741|  8.53k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  489|  17.0k|    {
  490|  17.0k|        return m_has_value;
  491|  17.0k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5errorEv:
 1745|  1.69k|    {
 1746|  1.69k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  945|  1.69k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  1.69k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  1.69k|        return this->get_unexpected().error();
 1748|  1.69k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  1.69k|    {
  473|  1.69k|        return m_unexpected;
  474|  1.69k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|  6.83k|    {
 1805|  6.83k|        return std::move(value());
 1806|  6.83k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|  6.83k|    {
 1769|  6.83k|        SCN_EXPECT(has_value());
  ------------------
  |  |  945|  6.83k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  6.83k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  6.83k|        return this->get_value();
 1771|  6.83k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  455|  6.83k|    {
  456|  6.83k|        return m_value;
  457|  6.83k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|  3.08M|    {
 3000|  3.08M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  951|  3.08M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|  3.08M|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|  3.08M|    {
 2981|  3.08M|        return t.data();
 2982|  3.08M|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1569|  7.99M|        : base(std::in_place, std::forward<U>(val)),
 1570|  7.99M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  7.99M|    {
 1572|  7.99M|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  440|  7.99M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  7.99M|    {
  442|  7.99M|    }
_ZNO3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS7_v:
 1804|  5.39M|    {
 1805|  5.39M|        return std::move(value());
 1806|  5.39M|    }
_ZN3scn2v46detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1349|  3.42M|{
 1350|  3.42M|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1351|  3.42M|}
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1978|  1.05M|    {
 1979|  1.05M|        return detail::transform_error_impl(std::move(*this),
 1980|  1.05M|                                            std::forward<F>(f));
 1981|  1.05M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSI_OT0_:
 1461|  1.05M|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  1.05M|    else {
 1472|  1.05M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  1.05M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  879|  1.05M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (879:25): [True: 1.05M, False: 0]
  |  |  ------------------
  ------------------
 1474|  1.05M|                   ? result(*std::forward<Exp>(exp))
 1475|  1.05M|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|  1.05M|    }
 1479|  1.05M|}
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1569|  1.05M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.05M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.05M|    {
 1572|  1.05M|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  440|  1.05M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.05M|    {
  442|  1.05M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.05M|    {
 1316|  1.05M|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1739|  1.05M|    {
 1740|  1.05M|        return has_value();
 1741|  1.05M|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  2.11M|    {
  490|  2.11M|        return m_has_value;
  491|  2.11M|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|  1.05M|    {
 1805|  1.05M|        return std::move(value());
 1806|  1.05M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|  1.05M|    {
 1769|  1.05M|        SCN_EXPECT(has_value());
  ------------------
  |  |  945|  1.05M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  1.05M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.05M|        return this->get_value();
 1771|  1.05M|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.05M|    {
  456|  1.05M|        return m_value;
  457|  1.05M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1964|  1.05M|    {
 1965|  1.05M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1966|  1.05M|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSI_OT0_:
 1461|  1.05M|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  1.05M|    else {
 1472|  1.05M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  1.05M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  879|  1.05M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (879:25): [True: 0, False: 1.05M]
  |  |  ------------------
  ------------------
 1474|  1.05M|                   ? result(*std::forward<Exp>(exp))
 1475|  1.05M|                   : result(unexpect,
 1476|  1.05M|                            trivial_invoke(std::forward<F>(f),
 1477|  1.05M|                                           std::forward<Exp>(exp).error()));
 1478|  1.05M|    }
 1479|  1.05M|}
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1794|   748k|    {
 1795|   748k|        return value();
 1796|   748k|    }
_ZZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3935|   252k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1814|   104k|    {
 1815|   104k|        return &value();
 1816|   104k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2868|   749k|    {
 2869|   749k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  951|   749k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   749k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2849|   749k|    {
 2850|   749k|        return decay_copy(t.begin());
 2851|   749k|    }
_ZN3scn2v46ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEu7__decayIT_EOS8_:
 2093|   749k|{
 2094|   749k|    return SCN_FWD(t);
  ------------------
  |  |  951|   749k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|   749k|}
_ZZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3935|   456k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1978|   918k|    {
 1979|   918k|        return detail::transform_error_impl(std::move(*this),
 1980|   918k|                                            std::forward<F>(f));
 1981|   918k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1461|   918k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   918k|    else {
 1472|   918k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   918k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  879|   918k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (879:25): [True: 918k, False: 0]
  |  |  ------------------
  ------------------
 1474|   918k|                   ? result(*std::forward<Exp>(exp))
 1475|   918k|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|   918k|    }
 1479|   918k|}
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|   918k|        : base(std::in_place, std::forward<U>(val)),
 1570|   918k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   918k|    {
 1572|   918k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  440|   918k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   918k|    {
  442|   918k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   918k|    {
 1316|   918k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1739|   918k|    {
 1740|   918k|        return has_value();
 1741|   918k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.83M|    {
  490|  1.83M|        return m_has_value;
  491|  1.83M|    }
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|   918k|    {
 1805|   918k|        return std::move(value());
 1806|   918k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|   918k|    {
 1769|   918k|        SCN_EXPECT(has_value());
  ------------------
  |  |  945|   918k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   918k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   918k|        return this->get_value();
 1771|   918k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   918k|    {
  456|   918k|        return m_value;
  457|   918k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1964|   888k|    {
 1965|   888k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1966|   888k|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|   888k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   888k|    else {
 1472|   888k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   888k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  879|   888k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (879:25): [True: 0, False: 888k]
  |  |  ------------------
  ------------------
 1474|   888k|                   ? result(*std::forward<Exp>(exp))
 1475|   888k|                   : result(unexpect,
 1476|   888k|                            trivial_invoke(std::forward<F>(f),
 1477|   888k|                                           std::forward<Exp>(exp).error()));
 1478|   888k|    }
 1479|   888k|}
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IRS3_vEEOT_:
 1569|  56.7k|        : base(std::in_place, std::forward<U>(val)),
 1570|  56.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  56.7k|    {
 1572|  56.7k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  440|  56.7k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  56.7k|    {
  442|  56.7k|    }
_ZN3scn2v413scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3910|   888k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  949|   888k|    static_cast<    \
  |  |  950|   888k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|   888k|    {
 3912|   888k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1794|   631k|    {
 1795|   631k|        return value();
 1796|   631k|    }
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1814|  24.9k|    {
 1815|  24.9k|        return &value();
 1816|  24.9k|    }
_ZN3scn2v413scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3910|  1.05M|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  949|  1.05M|    static_cast<    \
  |  |  950|  1.05M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|  1.05M|    {
 3912|  1.05M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4558|  5.21M|    {
 4559|  5.21M|        return x.is_at_end();
 4560|  5.21M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4602|  8.27M|    {
 4603|  8.27M|        if (m_end) {
  ------------------
  |  Branch (4603:13): [True: 0, False: 8.27M]
  ------------------
 4604|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4605|      0|        }
 4606|  8.27M|        if (!m_begin) {
  ------------------
  |  Branch (4606:13): [True: 0, False: 8.27M]
  ------------------
 4607|      0|            return true;
 4608|      0|        }
 4609|  8.27M|        return !read_at_position();
 4610|  8.27M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4582|  26.3M|    {
 4583|  26.3M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  945|  26.3M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  26.3M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4584|       |
 4585|  26.3M|        if (!stores_parent()) {
  ------------------
  |  Branch (4585:13): [True: 0, False: 26.3M]
  ------------------
 4586|      0|            return true;
 4587|      0|        }
 4588|       |
 4589|  26.3M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  879|  26.3M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (879:25): [True: 23.1M, False: 3.16M]
  |  |  ------------------
  ------------------
 4590|  23.1M|            return true;
 4591|  23.1M|        }
 4592|       |
 4593|  6.12M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4593:16): [True: 3.16M, False: 2.95M]
  ------------------
 4594|  3.16M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4594:17): [True: 205k, False: 2.95M]
  ------------------
 4595|   205k|                return false;
 4596|   205k|            }
 4597|  3.16M|        }
 4598|  2.95M|        return true;
 4599|  3.16M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE15chars_availableEv:
 4356|  34.1M|    {
 4357|  34.1M|        return m_putback_buffer.size() + m_current_view.size();
 4358|  34.1M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4517|  8.22M|    {
 4518|  8.22M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  945|  8.22M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  8.22M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4519|       |
 4520|  8.22M|        if (!stores_parent()) {
  ------------------
  |  Branch (4520:13): [True: 0, False: 8.22M]
  ------------------
 4521|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4522|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  945|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4523|      0|            return *ptr;
 4524|      0|        }
 4525|       |
 4526|  8.22M|        auto res = read_at_position();
 4527|  8.22M|        SCN_EXPECT(res);
  ------------------
  |  |  945|  8.22M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  8.22M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4528|  8.22M|        return parent()->get_character_at(m_position);
 4529|  8.22M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16get_character_atEl:
 4387|  8.22M|    {
 4388|  8.22M|        if (SCN_UNLIKELY(
  ------------------
  |  |  880|  8.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 6.94M, False: 1.28M]
  |  |  ------------------
  ------------------
 4389|  8.22M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4390|  6.94M|            return m_putback_buffer[pos];
 4391|  6.94M|        }
 4392|  1.28M|        const auto start = pos - m_putback_buffer.size();
 4393|  1.28M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  945|  1.28M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  1.28M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4394|  1.28M|        return m_current_view[start];
 4395|  1.28M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1569|  3.63M|        : base(std::in_place, std::forward<U>(val)),
 1570|  3.63M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  3.63M|    {
 1572|  3.63M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  3.63M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  3.63M|    {
  442|  3.63M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  3.69M|    {
 1316|  3.69M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|  66.9k|        : base(unexpect, std::move(e.error())),
 1616|  66.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  66.9k|    {
 1618|  66.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  66.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  66.9k|          m_has_value(false)
  451|  66.9k|    {
  452|  66.9k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4503|  9.85M|    {
 4504|  9.85M|        ++m_position;
 4505|  9.85M|        (void)read_at_position();
 4506|  9.85M|        return *this;
 4507|  9.85M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1739|  1.45M|    {
 1740|  1.45M|        return has_value();
 1741|  1.45M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1794|  28.7k|    {
 1795|  28.7k|        return value();
 1796|  28.7k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4552|  4.06M|    {
 4553|  4.06M|        return !(lhs == rhs);
 4554|  4.06M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4547|  5.48M|    {
 4548|  5.48M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4548:16): [True: 5.48M, False: 0]
  |  Branch (4548:46): [True: 1.72M, False: 3.75M]
  ------------------
 4549|  5.48M|    }
_ZN3scn2v46detail39code_point_length_by_starting_code_unitIwEEmT_:
 4067|  2.97M|{
 4068|       |    if constexpr (sizeof(U) == 1) {
 4069|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 4070|       |    }
 4071|       |    else if constexpr (sizeof(U) == 2) {
 4072|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4073|       |    }
 4074|  2.97M|    else {
 4075|       |        // utf-32
 4076|  2.97M|        static_assert(sizeof(U) == 4);
 4077|  2.97M|        SCN_UNUSED(ch);
  ------------------
  |  |  930|  2.97M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4078|  2.97M|        return 1;
 4079|  2.97M|    }
 4080|  2.97M|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4273|  2.97M|{
 4274|       |    if constexpr (sizeof(CharT) == 1) {
 4275|       |        return decode_utf8_code_point_exhaustive(input);
 4276|       |    }
 4277|       |    else if constexpr (sizeof(CharT) == 2) {
 4278|       |        return decode_utf16_code_point_exhaustive(input);
 4279|       |    }
 4280|  2.97M|    else {
 4281|  2.97M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  945|  2.97M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  2.97M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4282|  2.97M|        auto cp = static_cast<char32_t>(input.front());
 4283|  2.97M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  880|  2.97M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 182k, False: 2.78M]
  |  |  ------------------
  ------------------
 4284|   182k|            return invalid_code_point;
 4285|   182k|        }
 4286|  2.78M|        return cp;
 4287|  2.97M|    }
 4288|  2.97M|}
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|  3.43k|        : base(unexpect, std::move(e.error())),
 1616|  3.43k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  3.43k|    {
 1618|  3.43k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|  3.43k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  3.43k|          m_has_value(false)
  451|  3.43k|    {
  452|  3.43k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   761k|    {
 1316|   761k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|   758k|        : base(std::in_place, std::forward<U>(val)),
 1570|   758k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   758k|    {
 1572|   758k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  440|   758k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   758k|    {
  442|   758k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1739|   761k|    {
 1740|   761k|        return has_value();
 1741|   761k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.52M|    {
  490|  1.52M|        return m_has_value;
  491|  1.52M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1745|  3.43k|    {
 1746|  3.43k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  945|  3.43k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  3.43k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  3.43k|        return this->get_unexpected().error();
 1748|  3.43k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  3.43k|    {
  473|  3.43k|        return m_unexpected;
  474|  3.43k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|   758k|    {
 1805|   758k|        return std::move(value());
 1806|   758k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|   758k|    {
 1769|   758k|        SCN_EXPECT(has_value());
  ------------------
  |  |  945|   758k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   758k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   758k|        return this->get_value();
 1771|   758k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  455|   758k|    {
  456|   758k|        return m_value;
  457|   758k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3483|  13.5M|    {
 3484|  13.5M|        return m_sentinel;
 3485|  13.5M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1745|  2.87k|    {
 1746|  2.87k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  945|  2.87k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  2.87k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  2.87k|        return this->get_unexpected().error();
 1748|  2.87k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|   676k|        : base(unexpect, std::move(e.error())),
 1616|   676k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   676k|    {
 1618|   676k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|   735k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   735k|          m_has_value(false)
  451|   735k|    {
  452|   735k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  6.39M|    {
 1316|  6.39M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1569|  28.7k|        : base(std::in_place, std::forward<U>(val)),
 1570|  28.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  28.7k|    {
 1572|  28.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  440|  28.7k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  28.7k|    {
  442|  28.7k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|  3.59M|        : base(unexpect, std::move(e.error())),
 1616|  3.59M|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  3.59M|    {
 1618|  3.59M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|  3.59M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  3.59M|          m_has_value(false)
  451|  3.59M|    {
  452|  3.59M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1739|  7.00M|    {
 1740|  7.00M|        return has_value();
 1741|  7.00M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  489|  12.3M|    {
  490|  12.3M|        return m_has_value;
  491|  12.3M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1745|  2.08M|    {
 1746|  2.08M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  945|  2.08M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  2.08M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  2.08M|        return this->get_unexpected().error();
 1748|  2.08M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  472|  2.08M|    {
  473|  2.08M|        return m_unexpected;
  474|  2.08M|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1569|   629k|        : base(std::in_place, std::forward<U>(val)),
 1570|   629k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   629k|    {
 1572|   629k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  440|   629k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   629k|    {
  442|   629k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   629k|    {
 1316|   629k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSE_IXsr3stdE16is_convertible_vISG_SB_EEvE4typeELSK_0EEEONS0_10unexpectedISF_EE:
 1615|     72|        : base(unexpect, std::move(e.error())),
 1616|     72|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|     72|    {
 1618|     72|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  449|     72|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|     72|          m_has_value(false)
  451|     72|    {
  452|     72|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1794|   939k|    {
 1795|   939k|        return value();
 1796|   939k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|  2.50M|    {
 1769|  2.50M|        SCN_EXPECT(has_value());
  ------------------
  |  |  945|  2.50M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  2.50M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.50M|        return this->get_value();
 1771|  2.50M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  455|  2.50M|    {
  456|  2.50M|        return m_value;
  457|  2.50M|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1739|  15.3k|    {
 1740|  15.3k|        return has_value();
 1741|  15.3k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  489|  1.25M|    {
  490|  1.25M|        return m_has_value;
  491|  1.25M|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|   614k|    {
 1805|   614k|        return std::move(value());
 1806|   614k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|   629k|    {
 1769|   629k|        SCN_EXPECT(has_value());
  ------------------
  |  |  945|   629k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   629k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   629k|        return this->get_value();
 1771|   629k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  455|   629k|    {
  456|   629k|        return m_value;
  457|   629k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|  1.62M|    {
 1979|  1.62M|        return detail::transform_error_impl(std::move(*this),
 1980|  1.62M|                                            std::forward<F>(f));
 1981|  1.62M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|  1.62M|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  1.62M|    else {
 1472|  1.62M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  1.62M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  879|  1.62M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (879:25): [True: 1.56M, False: 59.4k]
  |  |  ------------------
  ------------------
 1474|  1.62M|                   ? result(*std::forward<Exp>(exp))
 1475|  1.62M|                   : result(unexpect,
 1476|  59.4k|                            trivial_invoke(std::forward<F>(f),
 1477|  59.4k|                                           std::forward<Exp>(exp).error()));
 1478|  1.62M|    }
 1479|  1.62M|}
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1569|  2.02M|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.02M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.02M|    {
 1572|  2.02M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  2.02M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.02M|    {
  442|  2.02M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1625|  59.4k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  59.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  59.4k|    {
 1628|  59.4k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|  1.56M|    {
 1805|  1.56M|        return std::move(value());
 1806|  1.56M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1739|  4.14M|    {
 1740|  4.14M|        return has_value();
 1741|  4.14M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  489|  6.61M|    {
  490|  6.61M|        return m_has_value;
  491|  6.61M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1745|   678k|    {
 1746|   678k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  945|   678k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   678k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   678k|        return this->get_unexpected().error();
 1748|   678k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   678k|    {
  473|   678k|        return m_unexpected;
  474|   678k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|  1.48M|    {
 1805|  1.48M|        return std::move(value());
 1806|  1.48M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|  1.79M|    {
 1769|  1.79M|        SCN_EXPECT(has_value());
  ------------------
  |  |  945|  1.79M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  1.79M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.79M|        return this->get_value();
 1771|  1.79M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.79M|    {
  456|  1.79M|        return m_value;
  457|  1.79M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3479|   477k|    {
 3480|   477k|        return m_iterator;
 3481|   477k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3483|   477k|    {
 3484|   477k|        return m_sentinel;
 3485|   477k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3464|   438k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  949|   438k|    static_cast<    \
  |  |  950|   438k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  949|   438k|    static_cast<    \
  |  |  950|   438k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   438k|    {
 3466|   438k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4569|  3.06M|    {
 4570|  3.06M|        return !x.is_at_end();
 4571|  3.06M|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|  65.0k|        : base(unexpect, std::move(e.error())),
 1616|  65.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  65.0k|    {
 1618|  65.0k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  65.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  65.0k|          m_has_value(false)
  451|  65.0k|    {
  452|  65.0k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  3.08M|    {
 1316|  3.08M|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1569|  3.02M|        : base(std::in_place, std::forward<U>(val)),
 1570|  3.02M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  3.02M|    {
 1572|  3.02M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  3.02M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  3.02M|    {
  442|  3.02M|    }
_ZNK3scn2v48expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1739|   839k|    {
 1740|   839k|        return has_value();
 1741|   839k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  5.34M|    {
  490|  5.34M|        return m_has_value;
  491|  5.34M|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1794|  12.4k|    {
 1795|  12.4k|        return value();
 1796|  12.4k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|  2.19M|    {
 1769|  2.19M|        SCN_EXPECT(has_value());
  ------------------
  |  |  945|  2.19M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  2.19M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.19M|        return this->get_value();
 1771|  2.19M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  2.19M|    {
  456|  2.19M|        return m_value;
  457|  2.19M|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  3.43k|        : base(unexpect, std::move(e.error())),
 1616|  3.43k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  3.43k|    {
 1618|  3.43k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  449|  3.43k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  3.43k|          m_has_value(false)
  451|  3.43k|    {
  452|  3.43k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   762k|    {
 1316|   762k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|   758k|        : base(std::in_place, std::forward<U>(val)),
 1570|   758k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   758k|    {
 1572|   758k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  440|   758k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   758k|    {
  442|   758k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|   619k|    {
 1979|   619k|        return detail::transform_error_impl(std::move(*this),
 1980|   619k|                                            std::forward<F>(f));
 1981|   619k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|   619k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   619k|    else {
 1472|   619k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   619k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  879|   619k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (879:25): [True: 614k, False: 4.63k]
  |  |  ------------------
  ------------------
 1474|   619k|                   ? result(*std::forward<Exp>(exp))
 1475|   619k|                   : result(unexpect,
 1476|  4.63k|                            trivial_invoke(std::forward<F>(f),
 1477|  4.63k|                                           std::forward<Exp>(exp).error()));
 1478|   619k|    }
 1479|   619k|}
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|  2.18M|    {
 1805|  2.18M|        return std::move(value());
 1806|  2.18M|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1755|  64.2k|    {
 1756|  64.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  945|  64.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  64.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  64.2k|        return std::move(this->get_unexpected().error());
 1758|  64.2k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  65.0k|    {
  473|  65.0k|        return m_unexpected;
  474|  65.0k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1625|   697k|        : base(unexpect, std::forward<Args>(args)...),
 1626|   697k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|   697k|    {
 1628|   697k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1739|   762k|    {
 1740|   762k|        return has_value();
 1741|   762k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.52M|    {
  490|  1.52M|        return m_has_value;
  491|  1.52M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1745|  3.43k|    {
 1746|  3.43k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  945|  3.43k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  3.43k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  3.43k|        return this->get_unexpected().error();
 1748|  3.43k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  3.43k|    {
  473|  3.43k|        return m_unexpected;
  474|  3.43k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|   758k|    {
 1805|   758k|        return std::move(value());
 1806|   758k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|   758k|    {
 1769|   758k|        SCN_EXPECT(has_value());
  ------------------
  |  |  945|   758k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   758k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   758k|        return this->get_value();
 1771|   758k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  455|   758k|    {
  456|   758k|        return m_value;
  457|   758k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1745|    732|    {
 1746|    732|        SCN_EXPECT(!has_value());
  ------------------
  |  |  945|    732|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|    732|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|    732|        return this->get_unexpected().error();
 1748|    732|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|   674k|        : base(unexpect, std::move(e.error())),
 1616|   674k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   674k|    {
 1618|   674k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|   734k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   734k|          m_has_value(false)
  451|   734k|    {
  452|   734k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  5.06M|    {
 1316|  5.06M|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1569|  12.4k|        : base(std::in_place, std::forward<U>(val)),
 1570|  12.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  12.4k|    {
 1572|  12.4k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  440|  12.4k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  12.4k|    {
  442|  12.4k|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  2.60M|        : base(unexpect, std::move(e.error())),
 1616|  2.60M|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  2.60M|    {
 1618|  2.60M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|  2.60M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  2.60M|          m_has_value(false)
  451|  2.60M|    {
  452|  2.60M|    }
_ZNK3scn2v48expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1739|  5.68M|    {
 1740|  5.68M|        return has_value();
 1741|  5.68M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  489|  10.2M|    {
  490|  10.2M|        return m_has_value;
  491|  10.2M|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1745|  1.98M|    {
 1746|  1.98M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  945|  1.98M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  1.98M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  1.98M|        return this->get_unexpected().error();
 1748|  1.98M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  472|  1.98M|    {
  473|  1.98M|        return m_unexpected;
  474|  1.98M|    }
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1569|   620k|        : base(std::in_place, std::forward<U>(val)),
 1570|   620k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   620k|    {
 1572|   620k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  440|   620k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   620k|    {
  442|   620k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   620k|    {
 1316|   620k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|     24|        : base(unexpect, std::move(e.error())),
 1616|     24|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|     24|    {
 1618|     24|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|     24|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|     24|          m_has_value(false)
  451|     24|    {
  452|     24|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1794|   300k|    {
 1795|   300k|        return value();
 1796|   300k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|  1.86M|    {
 1769|  1.86M|        SCN_EXPECT(has_value());
  ------------------
  |  |  945|  1.86M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  1.86M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.86M|        return this->get_value();
 1771|  1.86M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  455|  1.86M|    {
  456|  1.86M|        return m_value;
  457|  1.86M|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1739|  5.46k|    {
 1740|  5.46k|        return has_value();
 1741|  5.46k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  489|  1.24M|    {
  490|  1.24M|        return m_has_value;
  491|  1.24M|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|   614k|    {
 1805|   614k|        return std::move(value());
 1806|   614k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|   620k|    {
 1769|   620k|        SCN_EXPECT(has_value());
  ------------------
  |  |  945|   620k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   620k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   620k|        return this->get_value();
 1771|   620k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  455|   620k|    {
  456|   620k|        return m_value;
  457|   620k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|  1.62M|    {
 1979|  1.62M|        return detail::transform_error_impl(std::move(*this),
 1980|  1.62M|                                            std::forward<F>(f));
 1981|  1.62M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|  1.62M|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  1.62M|    else {
 1472|  1.62M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  1.62M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  879|  1.62M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (879:25): [True: 1.56M, False: 59.6k]
  |  |  ------------------
  ------------------
 1474|  1.62M|                   ? result(*std::forward<Exp>(exp))
 1475|  1.62M|                   : result(unexpect,
 1476|  59.6k|                            trivial_invoke(std::forward<F>(f),
 1477|  59.6k|                                           std::forward<Exp>(exp).error()));
 1478|  1.62M|    }
 1479|  1.62M|}
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1569|  1.71M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.71M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.71M|    {
 1572|  1.71M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  1.71M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.71M|    {
  442|  1.71M|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1625|  59.6k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  59.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  59.6k|    {
 1628|  59.6k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|  1.56M|    {
 1805|  1.56M|        return std::move(value());
 1806|  1.56M|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|  1.43M|    {
 3000|  1.43M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  951|  1.43M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|  1.43M|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|  1.43M|    {
 2981|  1.43M|        return t.data();
 2982|  1.43M|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1978|   614k|    {
 1979|   614k|        return detail::transform_error_impl(std::move(*this),
 1980|   614k|                                            std::forward<F>(f));
 1981|   614k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSI_OT0_:
 1461|   614k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   614k|    else {
 1472|   614k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   614k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  879|   614k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (879:25): [True: 614k, False: 0]
  |  |  ------------------
  ------------------
 1474|   614k|                   ? result(*std::forward<Exp>(exp))
 1475|   614k|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|   614k|    }
 1479|   614k|}
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1569|   614k|        : base(std::in_place, std::forward<U>(val)),
 1570|   614k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   614k|    {
 1572|   614k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  440|   614k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   614k|    {
  442|   614k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   614k|    {
 1316|   614k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1739|   614k|    {
 1740|   614k|        return has_value();
 1741|   614k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.22M|    {
  490|  1.22M|        return m_has_value;
  491|  1.22M|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|   614k|    {
 1805|   614k|        return std::move(value());
 1806|   614k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|   614k|    {
 1769|   614k|        SCN_EXPECT(has_value());
  ------------------
  |  |  945|   614k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   614k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   614k|        return this->get_value();
 1771|   614k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   614k|    {
  456|   614k|        return m_value;
  457|   614k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1964|   786k|    {
 1965|   786k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1966|   786k|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSI_OT0_:
 1461|   786k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   786k|    else {
 1472|   786k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   786k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  879|   786k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (879:25): [True: 0, False: 786k]
  |  |  ------------------
  ------------------
 1474|   786k|                   ? result(*std::forward<Exp>(exp))
 1475|   786k|                   : result(unexpect,
 1476|   786k|                            trivial_invoke(std::forward<F>(f),
 1477|   786k|                                           std::forward<Exp>(exp).error()));
 1478|   786k|    }
 1479|   786k|}
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1794|   310k|    {
 1795|   310k|        return value();
 1796|   310k|    }
_ZZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3935|   121k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1814|  15.2k|    {
 1815|  15.2k|        return &value();
 1816|  15.2k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2868|   492k|    {
 2869|   492k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  951|   492k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   492k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2849|   492k|    {
 2850|   492k|        return decay_copy(t.begin());
 2851|   492k|    }
_ZN3scn2v46ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEu7__decayIT_EOS8_:
 2093|   492k|{
 2094|   492k|    return SCN_FWD(t);
  ------------------
  |  |  951|   492k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|   492k|}
_ZZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3935|   274k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1978|   614k|    {
 1979|   614k|        return detail::transform_error_impl(std::move(*this),
 1980|   614k|                                            std::forward<F>(f));
 1981|   614k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1461|   614k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   614k|    else {
 1472|   614k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   614k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  879|   614k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (879:25): [True: 614k, False: 0]
  |  |  ------------------
  ------------------
 1474|   614k|                   ? result(*std::forward<Exp>(exp))
 1475|   614k|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|   614k|    }
 1479|   614k|}
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|   614k|        : base(std::in_place, std::forward<U>(val)),
 1570|   614k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   614k|    {
 1572|   614k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  440|   614k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   614k|    {
  442|   614k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   614k|    {
 1316|   614k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1739|   614k|    {
 1740|   614k|        return has_value();
 1741|   614k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.22M|    {
  490|  1.22M|        return m_has_value;
  491|  1.22M|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|   614k|    {
 1805|   614k|        return std::move(value());
 1806|   614k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|   614k|    {
 1769|   614k|        SCN_EXPECT(has_value());
  ------------------
  |  |  945|   614k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   614k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   614k|        return this->get_value();
 1771|   614k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   614k|    {
  456|   614k|        return m_value;
  457|   614k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1964|   693k|    {
 1965|   693k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1966|   693k|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSH_OT0_:
 1461|   693k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   693k|    else {
 1472|   693k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   693k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  879|   693k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (879:25): [True: 0, False: 693k]
  |  |  ------------------
  ------------------
 1474|   693k|                   ? result(*std::forward<Exp>(exp))
 1475|   693k|                   : result(unexpect,
 1476|   693k|                            trivial_invoke(std::forward<F>(f),
 1477|   693k|                                           std::forward<Exp>(exp).error()));
 1478|   693k|    }
 1479|   693k|}
_ZN3scn2v413scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3910|   693k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  949|   693k|    static_cast<    \
  |  |  950|   693k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|   693k|    {
 3912|   693k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1794|   311k|    {
 1795|   311k|        return value();
 1796|   311k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1814|  5.44k|    {
 1815|  5.44k|        return &value();
 1816|  5.44k|    }
_ZN3scn2v413scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3910|   786k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  949|   786k|    static_cast<    \
  |  |  950|   786k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|   786k|    {
 3912|   786k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE15chars_availableEv:
 4356|   131M|    {
 4357|   131M|        return m_putback_buffer.size() + m_current_view.size();
 4358|   131M|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2ImvEEOT_:
 1569|  98.2k|        : base(std::in_place, std::forward<U>(val)),
 1570|  98.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  98.2k|    {
 1572|  98.2k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJmEvEENSt3__110in_place_tEDpOT_:
  440|  98.2k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  98.2k|    {
  442|  98.2k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4sizeEv:
 6181|  1.81M|    {
 6182|  1.81M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  880|  1.81M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 1.81M]
  |  |  ------------------
  ------------------
 6183|      0|            return max_size();
 6184|      0|        }
 6185|       |
 6186|  1.81M|        return static_cast<std::size_t>(m_desc &
 6187|  1.81M|                                        ((1 << detail::packed_arg_bits) - 1));
 6188|  1.81M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE9is_packedEv:
 6207|  3.63M|    {
 6208|  3.63M|        return (m_desc & detail::is_unpacked_bit) == 0;
 6209|  3.63M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE3getEm:
 6149|  1.81M|    {
 6150|  1.81M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  880|  1.81M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 1.81M]
  |  |  ------------------
  ------------------
 6151|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  879|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (879:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6152|      0|                return m_args[id];
 6153|      0|            }
 6154|      0|            return {};
 6155|      0|        }
 6156|       |
 6157|  1.81M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  880|  1.81M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 1.81M]
  |  |  ------------------
  ------------------
 6158|      0|            return {};
 6159|      0|        }
 6160|       |
 6161|  1.81M|        const auto t = type(id);
 6162|  1.81M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  880|  1.81M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 1.81M]
  |  |  ------------------
  ------------------
 6163|      0|            return {};
 6164|      0|        }
 6165|       |
 6166|  1.81M|        basic_scan_arg<Context> arg;
 6167|  1.81M|        arg.m_type = t;
 6168|  1.81M|        if (is_only_builtin()) {
  ------------------
  |  Branch (6168:13): [True: 1.81M, False: 0]
  ------------------
 6169|  1.81M|            arg.m_value.ref_value = m_builtin_values[id];
 6170|  1.81M|        }
 6171|      0|        else {
 6172|      0|            arg.m_value = m_values[id];
 6173|      0|        }
 6174|  1.81M|        return arg;
 6175|  1.81M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4typeEm:
 6216|  1.81M|    {
 6217|       |        // First (0th) index is size, types start after that
 6218|  1.81M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6219|  1.81M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6220|  1.81M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6221|  1.81M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE15is_only_builtinEv:
 6211|  1.81M|    {
 6212|  1.81M|        return (m_desc & detail::has_custom_types_bit) == 0;
 6213|  1.81M|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEcvbEv:
 5965|  3.44M|    {
 5966|  3.44M|        return m_type != detail::arg_type::none_type;
 5967|  3.44M|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9323|   275k|{
 9324|   275k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  951|   275k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|   275k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|   275k|{
 9225|   275k|#define SCN_VISIT(Type)                                                \
 9226|   275k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|   275k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|   275k|    }                                                                  \
 9229|   275k|    else {                                                             \
 9230|   275k|        return vis(monostate_val);                                     \
 9231|   275k|    }
 9232|       |
 9233|   275k|    monostate monostate_val{};
 9234|       |
 9235|   275k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 275k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 275k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 275k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 275k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 275k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 275k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 275k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 275k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 275k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 275k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 275k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 275k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 275k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 275k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 275k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|  88.2k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 88.2k, False: 186k]
  ------------------
 9267|  88.2k|            SCN_VISIT(float);
  ------------------
  |  | 9226|  88.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  88.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  88.2k|    }                                                                  \
  |  | 9229|  88.2k|    else {                                                             \
  |  | 9230|  88.2k|        return vis(monostate_val);                                     \
  |  | 9231|  88.2k|    }
  ------------------
 9268|   180k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 92.4k, False: 182k]
  ------------------
 9269|   180k|            SCN_VISIT(double);
  ------------------
  |  | 9226|   180k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   180k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   180k|    }                                                                  \
  |  | 9229|   180k|    else {                                                             \
  |  | 9230|   180k|        return vis(monostate_val);                                     \
  |  | 9231|   180k|    }
  ------------------
 9270|   275k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 94.4k, False: 180k]
  ------------------
 9271|   275k|            SCN_VISIT(long double);
  ------------------
  |  | 9226|   275k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   275k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   275k|    }                                                                  \
  |  | 9229|   275k|    else {                                                             \
  |  | 9230|   275k|        return vis(monostate_val);                                     \
  |  | 9231|   275k|    }
  ------------------
 9272|   275k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 275k]
  ------------------
 9273|   275k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|   275k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   275k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   275k|    }                                                                  \
  |  | 9229|   275k|    else {                                                             \
  |  | 9230|   275k|        return vis(monostate_val);                                     \
  |  | 9231|   275k|    }
  ------------------
 9274|   275k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 0, False: 275k]
  ------------------
 9275|   275k|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|   275k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   275k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   275k|    }                                                                  \
  |  | 9229|   275k|    else {                                                             \
  |  | 9230|   275k|        return vis(monostate_val);                                     \
  |  | 9231|   275k|    }
  ------------------
 9276|   275k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 275k]
  ------------------
 9277|   275k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|   275k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   275k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   275k|    }                                                                  \
  |  | 9229|   275k|    else {                                                             \
  |  | 9230|   275k|        return vis(monostate_val);                                     \
  |  | 9231|   275k|    }
  ------------------
 9278|   275k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 275k]
  ------------------
 9279|   275k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|   275k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   275k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   275k|    }                                                                  \
  |  | 9229|   275k|    else {                                                             \
  |  | 9230|   275k|        return vis(monostate_val);                                     \
  |  | 9231|   275k|    }
  ------------------
 9280|   275k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 275k]
  ------------------
 9281|   275k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|   275k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   275k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   275k|    }                                                                  \
  |  | 9229|   275k|    else {                                                             \
  |  | 9230|   275k|        return vis(monostate_val);                                     \
  |  | 9231|   275k|    }
  ------------------
 9282|   275k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 275k]
  ------------------
 9283|   275k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|   275k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   275k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   275k|    }                                                                  \
  |  | 9229|   275k|    else {                                                             \
  |  | 9230|   275k|        return vis(monostate_val);                                     \
  |  | 9231|   275k|    }
  ------------------
 9284|       |
 9285|   275k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 0, False: 275k]
  ------------------
 9286|   275k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|   275k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|   275k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 275k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 275k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|   275k|            SCN_CLANG_POP
 9303|   275k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  946|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  942|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  908|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6010|  4.88M|{
 6011|  4.88M|    return arg.m_type;
 6012|  4.88M|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6022|  2.01M|{
 6023|  2.01M|    return arg.m_value;
 6024|  2.01M|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcEC2ENS2_17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 8947|   775k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  949|   775k|    static_cast<    \
  |  |  950|   775k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|   775k|    {
 8949|   775k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE3getEv:
 4690|  1.07M|{
 4691|  1.07M|    if (is_contiguous()) {
  ------------------
  |  Branch (4691:9): [True: 0, False: 1.07M]
  ------------------
 4692|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4693|      0|                                ranges::default_sentinel};
 4694|      0|    }
 4695|  1.07M|    return ranges::subrange{forward_iterator{this, 0},
 4696|  1.07M|                            ranges::default_sentinel};
 4697|  1.07M|}
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4453|  1.07M|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4454|  1.07M|    {
 4455|  1.07M|        SCN_EXPECT(parent);
  ------------------
  |  |  945|  1.07M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  1.07M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|  1.07M|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  945|  1.07M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  1.07M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4457|  1.07M|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9323|   301k|{
 9324|   301k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  951|   301k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|   301k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|   301k|{
 9225|   301k|#define SCN_VISIT(Type)                                                \
 9226|   301k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|   301k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|   301k|    }                                                                  \
 9229|   301k|    else {                                                             \
 9230|   301k|        return vis(monostate_val);                                     \
 9231|   301k|    }
 9232|       |
 9233|   301k|    monostate monostate_val{};
 9234|       |
 9235|   301k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 301k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 301k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 301k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 301k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 301k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 301k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 301k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 301k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 301k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 301k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 301k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 301k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 301k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 301k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 301k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|  96.0k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 96.0k, False: 205k]
  ------------------
 9267|  96.0k|            SCN_VISIT(float);
  ------------------
  |  | 9226|  96.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  96.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  96.0k|    }                                                                  \
  |  | 9229|  96.0k|    else {                                                             \
  |  | 9230|  96.0k|        return vis(monostate_val);                                     \
  |  | 9231|  96.0k|    }
  ------------------
 9268|   198k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 102k, False: 199k]
  ------------------
 9269|   198k|            SCN_VISIT(double);
  ------------------
  |  | 9226|   198k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   198k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   198k|    }                                                                  \
  |  | 9229|   198k|    else {                                                             \
  |  | 9230|   198k|        return vis(monostate_val);                                     \
  |  | 9231|   198k|    }
  ------------------
 9270|   301k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 103k, False: 198k]
  ------------------
 9271|   301k|            SCN_VISIT(long double);
  ------------------
  |  | 9226|   301k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   301k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   301k|    }                                                                  \
  |  | 9229|   301k|    else {                                                             \
  |  | 9230|   301k|        return vis(monostate_val);                                     \
  |  | 9231|   301k|    }
  ------------------
 9272|   301k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 301k]
  ------------------
 9273|   301k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|   301k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   301k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   301k|    }                                                                  \
  |  | 9229|   301k|    else {                                                             \
  |  | 9230|   301k|        return vis(monostate_val);                                     \
  |  | 9231|   301k|    }
  ------------------
 9274|   301k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 0, False: 301k]
  ------------------
 9275|   301k|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|   301k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   301k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   301k|    }                                                                  \
  |  | 9229|   301k|    else {                                                             \
  |  | 9230|   301k|        return vis(monostate_val);                                     \
  |  | 9231|   301k|    }
  ------------------
 9276|   301k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 301k]
  ------------------
 9277|   301k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|   301k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   301k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   301k|    }                                                                  \
  |  | 9229|   301k|    else {                                                             \
  |  | 9230|   301k|        return vis(monostate_val);                                     \
  |  | 9231|   301k|    }
  ------------------
 9278|   301k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 301k]
  ------------------
 9279|   301k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|   301k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   301k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   301k|    }                                                                  \
  |  | 9229|   301k|    else {                                                             \
  |  | 9230|   301k|        return vis(monostate_val);                                     \
  |  | 9231|   301k|    }
  ------------------
 9280|   301k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 301k]
  ------------------
 9281|   301k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|   301k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   301k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   301k|    }                                                                  \
  |  | 9229|   301k|    else {                                                             \
  |  | 9230|   301k|        return vis(monostate_val);                                     \
  |  | 9231|   301k|    }
  ------------------
 9282|   301k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 301k]
  ------------------
 9283|   301k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|   301k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   301k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   301k|    }                                                                  \
  |  | 9229|   301k|    else {                                                             \
  |  | 9230|   301k|        return vis(monostate_val);                                     \
  |  | 9231|   301k|    }
  ------------------
 9284|       |
 9285|   301k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 0, False: 301k]
  ------------------
 9286|   301k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|   301k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|   301k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 301k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 301k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|   301k|            SCN_CLANG_POP
 9303|   301k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  946|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  942|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  908|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v424basic_scan_parse_contextIcEC2IONS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSF_11char_traitsIcEEEEi:
 6279|   658k|        : m_format{format},
 6280|   658k|          m_next_arg_id{next_arg_id},
 6281|   658k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6281:27): [Folded - Ignored]
  ------------------
 6282|   658k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6282:27): [Folded - Ignored]
  ------------------
 6283|       |          m_is_borrowed(
 6284|   658k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6284:16): [Folded - Ignored]
  |  Branch (6284:41): [Folded - Ignored]
  ------------------
 6285|   658k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6285:15): [Folded - Ignored]
  ------------------
 6286|   658k|    {
 6287|   658k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|   658k|    {
 3075|   658k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|   658k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3040|   658k|    {
 3041|   658k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  951|   658k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|   658k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7795|   658k|{
 7796|   658k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7797|   658k|    handler.check_args_exhausted();
 7798|   658k|    return handler.get_error();
 7799|   658k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7760|   658k|{
 7761|       |    // TODO: memchr fast path with a larger (> 32) format string
 7762|       |
 7763|   658k|    auto begin = format.data();
 7764|   658k|    auto it = begin;
 7765|   658k|    const auto end = format.data() + format.size();
 7766|       |
 7767|  1.24M|    while (it != end) {
  ------------------
  |  Branch (7767:12): [True: 658k, False: 588k]
  ------------------
 7768|   658k|        const auto ch = *it++;
 7769|   658k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7769:13): [True: 658k, False: 0]
  ------------------
 7770|   658k|            handler.on_literal_text(begin, it - 1);
 7771|       |
 7772|   658k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7773|   658k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7773:17): [True: 70.6k, False: 588k]
  ------------------
 7774|  70.6k|                return;
 7775|  70.6k|            }
 7776|   658k|        }
 7777|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7777:18): [True: 0, False: 0]
  ------------------
 7778|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  Branch (880:45): [True: 0, False: 0]
  |  |  |  Branch (880:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7779|      0|                handler.on_error("Unmatched '}' in format string");
 7780|      0|                return;
 7781|      0|            }
 7782|       |
 7783|      0|            handler.on_literal_text(begin, it);
 7784|      0|            begin = ++it;
 7785|      0|        }
 7786|   658k|    }
 7787|       |
 7788|   588k|    handler.on_literal_text(begin, end);
 7789|   588k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 7692|   658k|{
 7693|   658k|    struct id_adapter {
 7694|   658k|        constexpr void operator()()
 7695|   658k|        {
 7696|   658k|            arg_id = handler.on_arg_id();
 7697|   658k|        }
 7698|   658k|        constexpr void operator()(std::size_t id)
 7699|   658k|        {
 7700|   658k|            arg_id = handler.on_arg_id(id);
 7701|   658k|        }
 7702|       |
 7703|   658k|        constexpr void on_error(const char* msg)
 7704|   658k|        {
 7705|   658k|            SCN_UNLIKELY_ATTR
 7706|   658k|            handler.on_error(msg);
 7707|   658k|        }
 7708|       |
 7709|   658k|        Handler& handler;
 7710|   658k|        std::size_t arg_id;
 7711|   658k|    };
 7712|       |
 7713|   658k|    ++begin;
 7714|   658k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|   658k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 658k]
  |  |  ------------------
  ------------------
 7715|      0|        handler.on_error("Unexpected end of replacement field");
 7716|      0|        return begin;
 7717|      0|    }
 7718|       |
 7719|   658k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7719:9): [True: 0, False: 658k]
  ------------------
 7720|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7721|      0|    }
 7722|   658k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7722:14): [True: 0, False: 658k]
  ------------------
 7723|      0|        handler.on_literal_text(begin, begin + 1);
 7724|      0|    }
 7725|   658k|    else {
 7726|   658k|        auto adapter = id_adapter{handler, 0};
 7727|   658k|        begin = parse_arg_id(begin, end, adapter);
 7728|       |
 7729|   658k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|   658k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 658k]
  |  |  ------------------
  ------------------
 7730|      0|            handler.on_error("Missing '}' in format string");
 7731|      0|            return begin;
 7732|      0|        }
 7733|       |
 7734|   658k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7734:13): [True: 0, False: 658k]
  ------------------
 7735|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7736|      0|        }
 7737|   658k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7737:18): [True: 658k, False: 0]
  ------------------
 7738|   658k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  880|   658k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 658k]
  |  |  ------------------
  ------------------
 7739|      0|                handler.on_error("Unexpected end of replacement field");
 7740|      0|                return begin;
 7741|      0|            }
 7742|   658k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7743|   658k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  880|  1.31M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 658k]
  |  |  |  Branch (880:45): [True: 0, False: 658k]
  |  |  |  Branch (880:45): [True: 0, False: 658k]
  |  |  ------------------
  ------------------
 7744|      0|                handler.on_error("Unknown format specifier");
 7745|      0|                return begin;
 7746|      0|            }
 7747|   658k|        }
 7748|      0|        else {
 7749|      0|            SCN_UNLIKELY_ATTR
 7750|      0|            handler.on_error("Missing '}' in format string");
 7751|      0|            return begin;
 7752|      0|        }
 7753|   658k|    }
 7754|   658k|    return begin + 1;
 7755|   658k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE3argEm:
 8846|  1.43M|    {
 8847|  1.43M|        return m_args.get(id);
 8848|  1.43M|    }
_ZN3scn2v424basic_scan_parse_contextIcE11next_arg_idEv:
 6314|  1.43M|    {
 6315|  1.43M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  880|  1.43M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 1.43M]
  |  |  ------------------
  ------------------
 6316|      0|            on_error(
 6317|      0|                "Cannot switch from manual to automatic argument indexing");
 6318|      0|            return 0;
 6319|      0|        }
 6320|       |
 6321|  1.43M|        auto id = static_cast<size_t>(m_next_arg_id++);
 6322|  1.43M|        do_check_arg_id(id);
 6323|  1.43M|        return id;
 6324|  1.43M|    }
_ZN3scn2v424basic_scan_parse_contextIcE15do_check_arg_idEm:
 6808|  1.43M|{
 6809|  1.43M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6809:9): [Folded - Ignored]
  ------------------
 6810|  1.43M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6810:10): [Folded - Ignored]
  |  Branch (6810:22): [Folded - Ignored]
  ------------------
 6811|       |        // The cast below will cause an error on gcc pre-12
 6812|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6813|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6813:13): [True: 0, False: 0]
  ------------------
 6814|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6815|      0|            SCN_UNLIKELY_ATTR
 6816|      0|            on_error("Argument not found");
 6817|      0|        }
 6818|      0|    }
 6819|  1.43M|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7193|   658k|{
 7194|   658k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  945|   658k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   658k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7195|   658k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7195:9): [True: 658k, False: 0]
  |  Branch (7195:26): [True: 0, False: 658k]
  ------------------
 7196|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7197|      0|    }
 7198|       |
 7199|   658k|    handler();
 7200|   658k|    return begin;
 7201|   658k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7695|   658k|        {
 7696|   658k|            arg_id = handler.on_arg_id();
 7697|   658k|        }
_ZN3scn2v424basic_scan_parse_contextIcE10advance_toEPKc:
 6309|  1.43M|    {
 6310|  1.43M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6311|  1.43M|    }
_ZNK3scn2v424basic_scan_parse_contextIcE5beginEv:
 6298|  2.86M|    {
 6299|  2.86M|        return m_format.data();
 6300|  2.86M|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7872|   658k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  951|   658k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7873|   658k|    {
 7874|   658k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  945|   658k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   658k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7875|   658k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7608|   658k|{
 7609|   658k|    auto do_presentation = [&]() -> const CharT* {
 7610|   658k|        if (*begin == CharT{'['}) {
 7611|   658k|            auto set = parse_presentation_set(begin, end, handler);
 7612|   658k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7613|       |                // clang-format off
 7614|   658k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7615|       |                // clang-format on
 7616|   658k|                return begin;
 7617|   658k|            }
 7618|   658k|            handler.on_character_set_string(set);
 7619|   658k|            return begin;
 7620|   658k|        }
 7621|   658k|        if (*begin == CharT{'/'}) {
 7622|   658k|            return parse_presentation_regex(begin, end, handler);
 7623|   658k|        }
 7624|   658k|        presentation_type type = parse_presentation_type(*begin++);
 7625|   658k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7626|   658k|            handler.on_error("Invalid type specifier in format string");
 7627|   658k|            return begin;
 7628|   658k|        }
 7629|   658k|        handler.on_type(type);
 7630|   658k|        return begin;
 7631|   658k|    };
 7632|       |
 7633|   658k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7633:9): [True: 658k, False: 0]
  |  Branch (7633:28): [True: 658k, False: 0]
  ------------------
 7634|   658k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7634:9): [True: 658k, False: 0]
  |  Branch (7634:36): [True: 475k, False: 183k]
  ------------------
 7635|   475k|        return do_presentation();
 7636|   475k|    }
 7637|       |
 7638|   183k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|   183k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 183k]
  |  |  ------------------
  ------------------
 7639|      0|        handler.on_error("Unexpected end of format string");
 7640|      0|        return begin;
 7641|      0|    }
 7642|       |
 7643|   183k|    begin = parse_align(begin, end, handler);
 7644|   183k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|   183k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 183k]
  |  |  ------------------
  ------------------
 7645|      0|        handler.on_error("Unexpected end of format string");
 7646|      0|        return begin;
 7647|      0|    }
 7648|       |
 7649|   183k|    begin = parse_width(begin, end, handler);
 7650|   183k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|   183k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 183k]
  |  |  ------------------
  ------------------
 7651|      0|        handler.on_error("Unexpected end of format string");
 7652|      0|        return begin;
 7653|      0|    }
 7654|       |
 7655|   183k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7655:9): [True: 0, False: 183k]
  ------------------
 7656|      0|        ++begin;
 7657|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7658|      0|            handler.on_error("Unexpected end of format string");
 7659|      0|            return begin;
 7660|      0|        }
 7661|      0|        begin = parse_precision(begin, end, handler);
 7662|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7663|      0|            handler.on_error("Unexpected end of format string");
 7664|      0|            return begin;
 7665|      0|        }
 7666|      0|    }
 7667|       |
 7668|   183k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7668:9): [True: 183k, False: 0]
  ------------------
 7669|   183k|        handler.on_localized();
 7670|   183k|        ++begin;
 7671|   183k|    }
 7672|   183k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|   183k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 183k]
  |  |  ------------------
  ------------------
 7673|      0|        handler.on_error("Unexpected end of format string");
 7674|      0|        return begin;
 7675|      0|    }
 7676|       |
 7677|   183k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7677:9): [True: 183k, False: 0]
  |  Branch (7677:25): [True: 0, False: 183k]
  ------------------
 7678|      0|        do_presentation();
 7679|      0|    }
 7680|   183k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|   183k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 183k]
  |  |  ------------------
  ------------------
 7681|      0|        handler.on_error("Unexpected end of format string");
 7682|      0|        return begin;
 7683|      0|    }
 7684|       |
 7685|   183k|    return begin;
 7686|   183k|}
_ZN3scn2v46detail15is_ascii_letterIcEEbT_:
 7257|  1.43M|{
 7258|  1.43M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7258:13): [True: 1.02M, False: 404k]
  |  Branch (7258:33): [True: 1.02M, False: 0]
  ------------------
 7259|  1.43M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7259:13): [True: 404k, False: 0]
  |  Branch (7259:33): [True: 404k, False: 0]
  ------------------
 7260|  1.43M|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7609|   475k|    auto do_presentation = [&]() -> const CharT* {
 7610|   475k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7610:13): [True: 0, False: 475k]
  ------------------
 7611|      0|            auto set = parse_presentation_set(begin, end, handler);
 7612|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7613|       |                // clang-format off
 7614|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7615|       |                // clang-format on
 7616|      0|                return begin;
 7617|      0|            }
 7618|      0|            handler.on_character_set_string(set);
 7619|      0|            return begin;
 7620|      0|        }
 7621|   475k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7621:13): [True: 0, False: 475k]
  ------------------
 7622|      0|            return parse_presentation_regex(begin, end, handler);
 7623|      0|        }
 7624|   475k|        presentation_type type = parse_presentation_type(*begin++);
 7625|   475k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  880|   475k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 475k]
  |  |  ------------------
  ------------------
 7626|      0|            handler.on_error("Invalid type specifier in format string");
 7627|      0|            return begin;
 7628|      0|        }
 7629|   475k|        handler.on_type(type);
 7630|   475k|        return begin;
 7631|   475k|    };
_ZN3scn2v46detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 7205|  1.02M|{
 7206|  1.02M|    switch (type) {
 7207|      0|        case 'b':
  ------------------
  |  Branch (7207:9): [True: 0, False: 1.02M]
  ------------------
 7208|      0|        case 'B':
  ------------------
  |  Branch (7208:9): [True: 0, False: 1.02M]
  ------------------
 7209|      0|            return presentation_type::int_binary;
 7210|      0|        case 'd':
  ------------------
  |  Branch (7210:9): [True: 0, False: 1.02M]
  ------------------
 7211|      0|            return presentation_type::int_decimal;
 7212|      0|        case 'i':
  ------------------
  |  Branch (7212:9): [True: 0, False: 1.02M]
  ------------------
 7213|      0|            return presentation_type::int_generic;
 7214|      0|        case 'u':
  ------------------
  |  Branch (7214:9): [True: 0, False: 1.02M]
  ------------------
 7215|      0|            return presentation_type::int_unsigned_decimal;
 7216|      0|        case 'o':
  ------------------
  |  Branch (7216:9): [True: 0, False: 1.02M]
  ------------------
 7217|      0|            return presentation_type::int_octal;
 7218|      0|        case 'x':
  ------------------
  |  Branch (7218:9): [True: 0, False: 1.02M]
  ------------------
 7219|      0|        case 'X':
  ------------------
  |  Branch (7219:9): [True: 0, False: 1.02M]
  ------------------
 7220|      0|            return presentation_type::int_hex;
 7221|      0|        case 'r':
  ------------------
  |  Branch (7221:9): [True: 0, False: 1.02M]
  ------------------
 7222|      0|        case 'R':
  ------------------
  |  Branch (7222:9): [True: 0, False: 1.02M]
  ------------------
 7223|      0|            return presentation_type::int_arbitrary_base;
 7224|   438k|        case 'a':
  ------------------
  |  Branch (7224:9): [True: 438k, False: 591k]
  ------------------
 7225|   438k|        case 'A':
  ------------------
  |  Branch (7225:9): [True: 0, False: 1.02M]
  ------------------
 7226|   438k|            return presentation_type::float_hex;
 7227|  43.0k|        case 'e':
  ------------------
  |  Branch (7227:9): [True: 43.0k, False: 986k]
  ------------------
 7228|  43.0k|        case 'E':
  ------------------
  |  Branch (7228:9): [True: 0, False: 1.02M]
  ------------------
 7229|  43.0k|            return presentation_type::float_scientific;
 7230|   213k|        case 'f':
  ------------------
  |  Branch (7230:9): [True: 213k, False: 816k]
  ------------------
 7231|   213k|        case 'F':
  ------------------
  |  Branch (7231:9): [True: 0, False: 1.02M]
  ------------------
 7232|   213k|            return presentation_type::float_fixed;
 7233|   334k|        case 'g':
  ------------------
  |  Branch (7233:9): [True: 334k, False: 694k]
  ------------------
 7234|   334k|        case 'G':
  ------------------
  |  Branch (7234:9): [True: 0, False: 1.02M]
  ------------------
 7235|   334k|            return presentation_type::float_general;
 7236|      0|        case 's':
  ------------------
  |  Branch (7236:9): [True: 0, False: 1.02M]
  ------------------
 7237|      0|            return presentation_type::string;
 7238|      0|        case 'c':
  ------------------
  |  Branch (7238:9): [True: 0, False: 1.02M]
  ------------------
 7239|      0|            return presentation_type::character;
 7240|      0|        case '?':
  ------------------
  |  Branch (7240:9): [True: 0, False: 1.02M]
  ------------------
 7241|      0|            return presentation_type::escaped_character;
 7242|      0|        case 'p':
  ------------------
  |  Branch (7242:9): [True: 0, False: 1.02M]
  ------------------
 7243|      0|            return presentation_type::pointer;
 7244|      0|        case '[':
  ------------------
  |  Branch (7244:9): [True: 0, False: 1.02M]
  ------------------
 7245|      0|        case '/':
  ------------------
  |  Branch (7245:9): [True: 0, False: 1.02M]
  ------------------
 7246|       |            // Should be handled by parse_presentation_set and
 7247|       |            // parse_presentation_regex
 7248|      0|            SCN_EXPECT(false);
  ------------------
  |  |  945|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7249|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  908|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7250|      0|        default:
  ------------------
  |  Branch (7250:9): [True: 0, False: 1.02M]
  ------------------
 7251|      0|            return presentation_type::none;
 7252|  1.02M|    }
 7253|  1.02M|}
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7282|   183k|{
 7283|   183k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  945|   183k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   183k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7284|       |
 7285|   183k|    auto check_align = [](wchar_t ch) {
 7286|   183k|        switch (ch) {
 7287|   183k|            case L'<':
 7288|   183k|                return align_type::left;
 7289|   183k|            case L'>':
 7290|   183k|                return align_type::right;
 7291|   183k|            case L'^':
 7292|   183k|                return align_type::center;
 7293|   183k|            default:
 7294|   183k|                return align_type::none;
 7295|   183k|        }
 7296|   183k|    };
 7297|       |
 7298|   183k|    auto potential_fill_len = code_point_length(begin, end);
 7299|   183k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  880|   366k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 183k]
  |  |  |  Branch (880:45): [True: 0, False: 183k]
  |  |  |  Branch (880:45): [True: 0, False: 183k]
  |  |  ------------------
  ------------------
 7300|   183k|                     std::distance(begin, end) < potential_fill_len)) {
 7301|      0|        handler.on_error("Invalid encoding in fill character");
 7302|      0|        return begin;
 7303|      0|    }
 7304|       |
 7305|   183k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7306|       |
 7307|   183k|    auto potential_fill = std::basic_string_view<CharT>{
 7308|   183k|        begin, static_cast<size_t>(potential_fill_len)};
 7309|   183k|    const auto begin_before_fill = begin;
 7310|   183k|    begin += potential_fill_len;
 7311|       |
 7312|   183k|    if (begin == end) {
  ------------------
  |  Branch (7312:9): [True: 0, False: 183k]
  ------------------
 7313|      0|        return begin_before_fill;
 7314|      0|    }
 7315|       |
 7316|   183k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7317|   183k|    const auto begin_after_fill = begin;
 7318|   183k|    ++begin;
 7319|       |
 7320|   183k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7320:9): [True: 183k, False: 0]
  ------------------
 7321|   183k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  880|   183k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 183k]
  |  |  ------------------
  ------------------
 7322|      0|            handler.on_error("Invalid fill character '{' in format string");
 7323|      0|            return begin;
 7324|      0|        }
 7325|   183k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7325:13): [True: 0, False: 183k]
  ------------------
 7326|      0|            return begin_before_fill;
 7327|      0|        }
 7328|   183k|    }
 7329|       |
 7330|   183k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7330:9): [True: 183k, False: 0]
  ------------------
 7331|   183k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7331:13): [True: 0, False: 183k]
  ------------------
 7332|      0|            handler.on_align(potential_align_on_fill);
 7333|      0|            return begin_after_fill;
 7334|      0|        }
 7335|   183k|        return begin_before_fill;
 7336|   183k|    }
 7337|       |
 7338|      0|    handler.on_fill(potential_fill);
 7339|      0|    handler.on_align(potential_align_after_fill);
 7340|      0|    return begin;
 7341|   183k|}
_ZN3scn2v46detail17code_point_lengthIcEEiPKT_S5_:
 7264|   404k|{
 7265|   404k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  945|   404k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   404k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7266|       |    if constexpr (sizeof(CharT) != 1) {
 7267|       |        return 1;
 7268|       |    }
 7269|   404k|    else {
 7270|   404k|        const auto lengths =
 7271|   404k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7272|   404k|            "\3\4";
 7273|   404k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7274|   404k|        return len;
 7275|   404k|    }
 7276|   404k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7285|   366k|    auto check_align = [](wchar_t ch) {
 7286|   366k|        switch (ch) {
 7287|      0|            case L'<':
  ------------------
  |  Branch (7287:13): [True: 0, False: 366k]
  ------------------
 7288|      0|                return align_type::left;
 7289|      0|            case L'>':
  ------------------
  |  Branch (7289:13): [True: 0, False: 366k]
  ------------------
 7290|      0|                return align_type::right;
 7291|      0|            case L'^':
  ------------------
  |  Branch (7291:13): [True: 0, False: 366k]
  ------------------
 7292|      0|                return align_type::center;
 7293|   366k|            default:
  ------------------
  |  Branch (7293:13): [True: 366k, False: 0]
  ------------------
 7294|   366k|                return align_type::none;
 7295|   366k|        }
 7296|   366k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7347|   183k|{
 7348|   183k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  945|   183k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   183k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7349|       |
 7350|   183k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7350:9): [True: 183k, False: 0]
  |  Branch (7350:33): [True: 0, False: 183k]
  ------------------
 7351|      0|        int width = parse_simple_int(begin, end);
 7352|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  879|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (879:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7353|      0|            handler.on_width(width);
 7354|      0|        }
 7355|      0|        else {
 7356|      0|            handler.on_error("Invalid field width");
 7357|      0|            return begin;
 7358|      0|        }
 7359|      0|    }
 7360|   183k|    return begin;
 7361|   183k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEE12on_localizedEv:
 7878|   183k|    {
 7879|   183k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7880|   183k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7880:13): [True: 183k, False: 0]
  ------------------
 7881|   183k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7881:13): [True: 183k, False: 0]
  ------------------
 7882|   183k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7882:13): [True: 0, False: 183k]
  ------------------
 7883|   183k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7883:13): [True: 0, False: 0]
  ------------------
 7884|      0|            SCN_UNLIKELY_ATTR
 7885|       |            // clang-format off
 7886|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7887|       |            // clang-format on
 7888|      0|        }
 7889|       |
 7890|   183k|        Handler::on_localized();
 7891|   183k|    }
_ZN3scn2v46detail12specs_setter12on_localizedILb1EEEvv:
 7027|   626k|    {
 7028|   626k|        if constexpr (!SCN_DISABLE_LOCALE) {
 7029|   626k|            m_specs.localized = true;
 7030|       |        }
 7031|       |        else {
 7032|       |            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 7033|       |        }
 7034|   626k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9323|   658k|{
 9324|   658k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  951|   658k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|   658k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|   658k|{
 9225|   658k|#define SCN_VISIT(Type)                                                \
 9226|   658k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|   658k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|   658k|    }                                                                  \
 9229|   658k|    else {                                                             \
 9230|   658k|        return vis(monostate_val);                                     \
 9231|   658k|    }
 9232|       |
 9233|   658k|    monostate monostate_val{};
 9234|       |
 9235|   658k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 658k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 658k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 658k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 658k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 658k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 658k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 658k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 658k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 658k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 658k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 658k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 658k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 658k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 658k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 658k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|   213k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 213k, False: 445k]
  ------------------
 9267|   213k|            SCN_VISIT(float);
  ------------------
  |  | 9226|   213k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   213k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   213k|    }                                                                  \
  |  | 9229|   213k|    else {                                                             \
  |  | 9230|   213k|        return vis(monostate_val);                                     \
  |  | 9231|   213k|    }
  ------------------
 9268|   434k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 221k, False: 437k]
  ------------------
 9269|   434k|            SCN_VISIT(double);
  ------------------
  |  | 9226|   434k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   434k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   434k|    }                                                                  \
  |  | 9229|   434k|    else {                                                             \
  |  | 9230|   434k|        return vis(monostate_val);                                     \
  |  | 9231|   434k|    }
  ------------------
 9270|   658k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 224k, False: 434k]
  ------------------
 9271|   658k|            SCN_VISIT(long double);
  ------------------
  |  | 9226|   658k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   658k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   658k|    }                                                                  \
  |  | 9229|   658k|    else {                                                             \
  |  | 9230|   658k|        return vis(monostate_val);                                     \
  |  | 9231|   658k|    }
  ------------------
 9272|   658k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 658k]
  ------------------
 9273|   658k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|   658k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   658k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   658k|    }                                                                  \
  |  | 9229|   658k|    else {                                                             \
  |  | 9230|   658k|        return vis(monostate_val);                                     \
  |  | 9231|   658k|    }
  ------------------
 9274|   658k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 0, False: 658k]
  ------------------
 9275|   658k|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|   658k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   658k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   658k|    }                                                                  \
  |  | 9229|   658k|    else {                                                             \
  |  | 9230|   658k|        return vis(monostate_val);                                     \
  |  | 9231|   658k|    }
  ------------------
 9276|   658k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 658k]
  ------------------
 9277|   658k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|   658k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   658k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   658k|    }                                                                  \
  |  | 9229|   658k|    else {                                                             \
  |  | 9230|   658k|        return vis(monostate_val);                                     \
  |  | 9231|   658k|    }
  ------------------
 9278|   658k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 658k]
  ------------------
 9279|   658k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|   658k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   658k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   658k|    }                                                                  \
  |  | 9229|   658k|    else {                                                             \
  |  | 9230|   658k|        return vis(monostate_val);                                     \
  |  | 9231|   658k|    }
  ------------------
 9280|   658k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 658k]
  ------------------
 9281|   658k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|   658k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   658k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   658k|    }                                                                  \
  |  | 9229|   658k|    else {                                                             \
  |  | 9230|   658k|        return vis(monostate_val);                                     \
  |  | 9231|   658k|    }
  ------------------
 9282|   658k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 658k]
  ------------------
 9283|   658k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|   658k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   658k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   658k|    }                                                                  \
  |  | 9229|   658k|    else {                                                             \
  |  | 9230|   658k|        return vis(monostate_val);                                     \
  |  | 9231|   658k|    }
  ------------------
 9284|       |
 9285|   658k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 0, False: 658k]
  ------------------
 9286|   658k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|   658k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|   658k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 658k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 658k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|   658k|            SCN_CLANG_POP
 9303|   658k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  946|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  942|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  908|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v424basic_scan_parse_contextIcEC2IRNS0_6detail17basic_scan_bufferIcEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEi:
 6279|   775k|        : m_format{format},
 6280|   775k|          m_next_arg_id{next_arg_id},
 6281|   775k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6281:27): [Folded - Ignored]
  ------------------
 6282|   775k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6282:27): [Folded - Ignored]
  ------------------
 6283|       |          m_is_borrowed(
 6284|   775k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6284:16): [Folded - Ignored]
  |  Branch (6284:41): [Folded - Ignored]
  ------------------
 6285|   775k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6285:15): [Folded - Ignored]
  ------------------
 6286|   775k|    {
 6287|   775k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7795|   775k|{
 7796|   775k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7797|   775k|    handler.check_args_exhausted();
 7798|   775k|    return handler.get_error();
 7799|   775k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7760|   775k|{
 7761|       |    // TODO: memchr fast path with a larger (> 32) format string
 7762|       |
 7763|   775k|    auto begin = format.data();
 7764|   775k|    auto it = begin;
 7765|   775k|    const auto end = format.data() + format.size();
 7766|       |
 7767|  1.48M|    while (it != end) {
  ------------------
  |  Branch (7767:12): [True: 775k, False: 704k]
  ------------------
 7768|   775k|        const auto ch = *it++;
 7769|   775k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7769:13): [True: 775k, False: 0]
  ------------------
 7770|   775k|            handler.on_literal_text(begin, it - 1);
 7771|       |
 7772|   775k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7773|   775k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7773:17): [True: 70.6k, False: 704k]
  ------------------
 7774|  70.6k|                return;
 7775|  70.6k|            }
 7776|   775k|        }
 7777|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7777:18): [True: 0, False: 0]
  ------------------
 7778|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  Branch (880:45): [True: 0, False: 0]
  |  |  |  Branch (880:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7779|      0|                handler.on_error("Unmatched '}' in format string");
 7780|      0|                return;
 7781|      0|            }
 7782|       |
 7783|      0|            handler.on_literal_text(begin, it);
 7784|      0|            begin = ++it;
 7785|      0|        }
 7786|   775k|    }
 7787|       |
 7788|   704k|    handler.on_literal_text(begin, end);
 7789|   704k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE10advance_toENS2_17basic_scan_bufferIcE16forward_iteratorE:
 8985|   704k|    {
 8986|   704k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  949|   704k|    static_cast<    \
  |  |  950|   704k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8987|   704k|    }
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 7692|   775k|{
 7693|   775k|    struct id_adapter {
 7694|   775k|        constexpr void operator()()
 7695|   775k|        {
 7696|   775k|            arg_id = handler.on_arg_id();
 7697|   775k|        }
 7698|   775k|        constexpr void operator()(std::size_t id)
 7699|   775k|        {
 7700|   775k|            arg_id = handler.on_arg_id(id);
 7701|   775k|        }
 7702|       |
 7703|   775k|        constexpr void on_error(const char* msg)
 7704|   775k|        {
 7705|   775k|            SCN_UNLIKELY_ATTR
 7706|   775k|            handler.on_error(msg);
 7707|   775k|        }
 7708|       |
 7709|   775k|        Handler& handler;
 7710|   775k|        std::size_t arg_id;
 7711|   775k|    };
 7712|       |
 7713|   775k|    ++begin;
 7714|   775k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|   775k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 775k]
  |  |  ------------------
  ------------------
 7715|      0|        handler.on_error("Unexpected end of replacement field");
 7716|      0|        return begin;
 7717|      0|    }
 7718|       |
 7719|   775k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7719:9): [True: 0, False: 775k]
  ------------------
 7720|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7721|      0|    }
 7722|   775k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7722:14): [True: 0, False: 775k]
  ------------------
 7723|      0|        handler.on_literal_text(begin, begin + 1);
 7724|      0|    }
 7725|   775k|    else {
 7726|   775k|        auto adapter = id_adapter{handler, 0};
 7727|   775k|        begin = parse_arg_id(begin, end, adapter);
 7728|       |
 7729|   775k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|   775k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 775k]
  |  |  ------------------
  ------------------
 7730|      0|            handler.on_error("Missing '}' in format string");
 7731|      0|            return begin;
 7732|      0|        }
 7733|       |
 7734|   775k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7734:13): [True: 0, False: 775k]
  ------------------
 7735|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7736|      0|        }
 7737|   775k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7737:18): [True: 775k, False: 0]
  ------------------
 7738|   775k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  880|   775k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 775k]
  |  |  ------------------
  ------------------
 7739|      0|                handler.on_error("Unexpected end of replacement field");
 7740|      0|                return begin;
 7741|      0|            }
 7742|   775k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7743|   775k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  880|  1.55M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 775k]
  |  |  |  Branch (880:45): [True: 0, False: 775k]
  |  |  |  Branch (880:45): [True: 0, False: 775k]
  |  |  ------------------
  ------------------
 7744|      0|                handler.on_error("Unknown format specifier");
 7745|      0|                return begin;
 7746|      0|            }
 7747|   775k|        }
 7748|      0|        else {
 7749|      0|            SCN_UNLIKELY_ATTR
 7750|      0|            handler.on_error("Missing '}' in format string");
 7751|      0|            return begin;
 7752|      0|        }
 7753|   775k|    }
 7754|   775k|    return begin + 1;
 7755|   775k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7193|   775k|{
 7194|   775k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  945|   775k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   775k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7195|   775k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7195:9): [True: 775k, False: 0]
  |  Branch (7195:26): [True: 0, False: 775k]
  ------------------
 7196|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7197|      0|    }
 7198|       |
 7199|   775k|    handler();
 7200|   775k|    return begin;
 7201|   775k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7695|   775k|        {
 7696|   775k|            arg_id = handler.on_arg_id();
 7697|   775k|        }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7872|   775k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  951|   775k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7873|   775k|    {
 7874|   775k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  945|   775k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   775k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7875|   775k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7608|   775k|{
 7609|   775k|    auto do_presentation = [&]() -> const CharT* {
 7610|   775k|        if (*begin == CharT{'['}) {
 7611|   775k|            auto set = parse_presentation_set(begin, end, handler);
 7612|   775k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7613|       |                // clang-format off
 7614|   775k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7615|       |                // clang-format on
 7616|   775k|                return begin;
 7617|   775k|            }
 7618|   775k|            handler.on_character_set_string(set);
 7619|   775k|            return begin;
 7620|   775k|        }
 7621|   775k|        if (*begin == CharT{'/'}) {
 7622|   775k|            return parse_presentation_regex(begin, end, handler);
 7623|   775k|        }
 7624|   775k|        presentation_type type = parse_presentation_type(*begin++);
 7625|   775k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7626|   775k|            handler.on_error("Invalid type specifier in format string");
 7627|   775k|            return begin;
 7628|   775k|        }
 7629|   775k|        handler.on_type(type);
 7630|   775k|        return begin;
 7631|   775k|    };
 7632|       |
 7633|   775k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7633:9): [True: 775k, False: 0]
  |  Branch (7633:28): [True: 775k, False: 0]
  ------------------
 7634|   775k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7634:9): [True: 775k, False: 0]
  |  Branch (7634:36): [True: 554k, False: 221k]
  ------------------
 7635|   554k|        return do_presentation();
 7636|   554k|    }
 7637|       |
 7638|   221k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|   221k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 221k]
  |  |  ------------------
  ------------------
 7639|      0|        handler.on_error("Unexpected end of format string");
 7640|      0|        return begin;
 7641|      0|    }
 7642|       |
 7643|   221k|    begin = parse_align(begin, end, handler);
 7644|   221k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|   221k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 221k]
  |  |  ------------------
  ------------------
 7645|      0|        handler.on_error("Unexpected end of format string");
 7646|      0|        return begin;
 7647|      0|    }
 7648|       |
 7649|   221k|    begin = parse_width(begin, end, handler);
 7650|   221k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|   221k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 221k]
  |  |  ------------------
  ------------------
 7651|      0|        handler.on_error("Unexpected end of format string");
 7652|      0|        return begin;
 7653|      0|    }
 7654|       |
 7655|   221k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7655:9): [True: 0, False: 221k]
  ------------------
 7656|      0|        ++begin;
 7657|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7658|      0|            handler.on_error("Unexpected end of format string");
 7659|      0|            return begin;
 7660|      0|        }
 7661|      0|        begin = parse_precision(begin, end, handler);
 7662|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7663|      0|            handler.on_error("Unexpected end of format string");
 7664|      0|            return begin;
 7665|      0|        }
 7666|      0|    }
 7667|       |
 7668|   221k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7668:9): [True: 221k, False: 0]
  ------------------
 7669|   221k|        handler.on_localized();
 7670|   221k|        ++begin;
 7671|   221k|    }
 7672|   221k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|   221k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 221k]
  |  |  ------------------
  ------------------
 7673|      0|        handler.on_error("Unexpected end of format string");
 7674|      0|        return begin;
 7675|      0|    }
 7676|       |
 7677|   221k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7677:9): [True: 221k, False: 0]
  |  Branch (7677:25): [True: 0, False: 221k]
  ------------------
 7678|      0|        do_presentation();
 7679|      0|    }
 7680|   221k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|   221k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 221k]
  |  |  ------------------
  ------------------
 7681|      0|        handler.on_error("Unexpected end of format string");
 7682|      0|        return begin;
 7683|      0|    }
 7684|       |
 7685|   221k|    return begin;
 7686|   221k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 7609|   554k|    auto do_presentation = [&]() -> const CharT* {
 7610|   554k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7610:13): [True: 0, False: 554k]
  ------------------
 7611|      0|            auto set = parse_presentation_set(begin, end, handler);
 7612|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7613|       |                // clang-format off
 7614|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7615|       |                // clang-format on
 7616|      0|                return begin;
 7617|      0|            }
 7618|      0|            handler.on_character_set_string(set);
 7619|      0|            return begin;
 7620|      0|        }
 7621|   554k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7621:13): [True: 0, False: 554k]
  ------------------
 7622|      0|            return parse_presentation_regex(begin, end, handler);
 7623|      0|        }
 7624|   554k|        presentation_type type = parse_presentation_type(*begin++);
 7625|   554k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  880|   554k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 554k]
  |  |  ------------------
  ------------------
 7626|      0|            handler.on_error("Invalid type specifier in format string");
 7627|      0|            return begin;
 7628|      0|        }
 7629|   554k|        handler.on_type(type);
 7630|   554k|        return begin;
 7631|   554k|    };
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7282|   221k|{
 7283|   221k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  945|   221k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   221k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7284|       |
 7285|   221k|    auto check_align = [](wchar_t ch) {
 7286|   221k|        switch (ch) {
 7287|   221k|            case L'<':
 7288|   221k|                return align_type::left;
 7289|   221k|            case L'>':
 7290|   221k|                return align_type::right;
 7291|   221k|            case L'^':
 7292|   221k|                return align_type::center;
 7293|   221k|            default:
 7294|   221k|                return align_type::none;
 7295|   221k|        }
 7296|   221k|    };
 7297|       |
 7298|   221k|    auto potential_fill_len = code_point_length(begin, end);
 7299|   221k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  880|   442k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 221k]
  |  |  |  Branch (880:45): [True: 0, False: 221k]
  |  |  |  Branch (880:45): [True: 0, False: 221k]
  |  |  ------------------
  ------------------
 7300|   221k|                     std::distance(begin, end) < potential_fill_len)) {
 7301|      0|        handler.on_error("Invalid encoding in fill character");
 7302|      0|        return begin;
 7303|      0|    }
 7304|       |
 7305|   221k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7306|       |
 7307|   221k|    auto potential_fill = std::basic_string_view<CharT>{
 7308|   221k|        begin, static_cast<size_t>(potential_fill_len)};
 7309|   221k|    const auto begin_before_fill = begin;
 7310|   221k|    begin += potential_fill_len;
 7311|       |
 7312|   221k|    if (begin == end) {
  ------------------
  |  Branch (7312:9): [True: 0, False: 221k]
  ------------------
 7313|      0|        return begin_before_fill;
 7314|      0|    }
 7315|       |
 7316|   221k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7317|   221k|    const auto begin_after_fill = begin;
 7318|   221k|    ++begin;
 7319|       |
 7320|   221k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7320:9): [True: 221k, False: 0]
  ------------------
 7321|   221k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  880|   221k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 221k]
  |  |  ------------------
  ------------------
 7322|      0|            handler.on_error("Invalid fill character '{' in format string");
 7323|      0|            return begin;
 7324|      0|        }
 7325|   221k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7325:13): [True: 0, False: 221k]
  ------------------
 7326|      0|            return begin_before_fill;
 7327|      0|        }
 7328|   221k|    }
 7329|       |
 7330|   221k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7330:9): [True: 221k, False: 0]
  ------------------
 7331|   221k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7331:13): [True: 0, False: 221k]
  ------------------
 7332|      0|            handler.on_align(potential_align_on_fill);
 7333|      0|            return begin_after_fill;
 7334|      0|        }
 7335|   221k|        return begin_before_fill;
 7336|   221k|    }
 7337|       |
 7338|      0|    handler.on_fill(potential_fill);
 7339|      0|    handler.on_align(potential_align_after_fill);
 7340|      0|    return begin;
 7341|   221k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 7285|   442k|    auto check_align = [](wchar_t ch) {
 7286|   442k|        switch (ch) {
 7287|      0|            case L'<':
  ------------------
  |  Branch (7287:13): [True: 0, False: 442k]
  ------------------
 7288|      0|                return align_type::left;
 7289|      0|            case L'>':
  ------------------
  |  Branch (7289:13): [True: 0, False: 442k]
  ------------------
 7290|      0|                return align_type::right;
 7291|      0|            case L'^':
  ------------------
  |  Branch (7291:13): [True: 0, False: 442k]
  ------------------
 7292|      0|                return align_type::center;
 7293|   442k|            default:
  ------------------
  |  Branch (7293:13): [True: 442k, False: 0]
  ------------------
 7294|   442k|                return align_type::none;
 7295|   442k|        }
 7296|   442k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7347|   221k|{
 7348|   221k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  945|   221k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   221k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7349|       |
 7350|   221k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7350:9): [True: 221k, False: 0]
  |  Branch (7350:33): [True: 0, False: 221k]
  ------------------
 7351|      0|        int width = parse_simple_int(begin, end);
 7352|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  879|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (879:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7353|      0|            handler.on_width(width);
 7354|      0|        }
 7355|      0|        else {
 7356|      0|            handler.on_error("Invalid field width");
 7357|      0|            return begin;
 7358|      0|        }
 7359|      0|    }
 7360|   221k|    return begin;
 7361|   221k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE12on_localizedEv:
 7878|   221k|    {
 7879|   221k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7880|   221k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7880:13): [True: 221k, False: 0]
  ------------------
 7881|   221k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7881:13): [True: 221k, False: 0]
  ------------------
 7882|   221k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7882:13): [True: 0, False: 221k]
  ------------------
 7883|   221k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7883:13): [True: 0, False: 0]
  ------------------
 7884|      0|            SCN_UNLIKELY_ATTR
 7885|       |            // clang-format off
 7886|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7887|       |            // clang-format on
 7888|      0|        }
 7889|       |
 7890|   221k|        Handler::on_localized();
 7891|   221k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerIS5_EEEEDcOT_:
 9323|   775k|{
 9324|   775k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  951|   775k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|   775k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|   775k|{
 9225|   775k|#define SCN_VISIT(Type)                                                \
 9226|   775k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|   775k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|   775k|    }                                                                  \
 9229|   775k|    else {                                                             \
 9230|   775k|        return vis(monostate_val);                                     \
 9231|   775k|    }
 9232|       |
 9233|   775k|    monostate monostate_val{};
 9234|       |
 9235|   775k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 775k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 775k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 775k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 775k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 775k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 775k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 775k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 775k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 775k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 775k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 775k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 775k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 775k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 775k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 775k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|   248k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 248k, False: 526k]
  ------------------
 9267|   248k|            SCN_VISIT(float);
  ------------------
  |  | 9226|   248k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   248k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   248k|    }                                                                  \
  |  | 9229|   248k|    else {                                                             \
  |  | 9230|   248k|        return vis(monostate_val);                                     \
  |  | 9231|   248k|    }
  ------------------
 9268|   510k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 261k, False: 513k]
  ------------------
 9269|   510k|            SCN_VISIT(double);
  ------------------
  |  | 9226|   510k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   510k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   510k|    }                                                                  \
  |  | 9229|   510k|    else {                                                             \
  |  | 9230|   510k|        return vis(monostate_val);                                     \
  |  | 9231|   510k|    }
  ------------------
 9270|   775k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 264k, False: 510k]
  ------------------
 9271|   775k|            SCN_VISIT(long double);
  ------------------
  |  | 9226|   775k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   775k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   775k|    }                                                                  \
  |  | 9229|   775k|    else {                                                             \
  |  | 9230|   775k|        return vis(monostate_val);                                     \
  |  | 9231|   775k|    }
  ------------------
 9272|   775k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 775k]
  ------------------
 9273|   775k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|   775k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   775k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   775k|    }                                                                  \
  |  | 9229|   775k|    else {                                                             \
  |  | 9230|   775k|        return vis(monostate_val);                                     \
  |  | 9231|   775k|    }
  ------------------
 9274|   775k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 0, False: 775k]
  ------------------
 9275|   775k|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|   775k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   775k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   775k|    }                                                                  \
  |  | 9229|   775k|    else {                                                             \
  |  | 9230|   775k|        return vis(monostate_val);                                     \
  |  | 9231|   775k|    }
  ------------------
 9276|   775k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 775k]
  ------------------
 9277|   775k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|   775k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   775k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   775k|    }                                                                  \
  |  | 9229|   775k|    else {                                                             \
  |  | 9230|   775k|        return vis(monostate_val);                                     \
  |  | 9231|   775k|    }
  ------------------
 9278|   775k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 775k]
  ------------------
 9279|   775k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|   775k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   775k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   775k|    }                                                                  \
  |  | 9229|   775k|    else {                                                             \
  |  | 9230|   775k|        return vis(monostate_val);                                     \
  |  | 9231|   775k|    }
  ------------------
 9280|   775k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 775k]
  ------------------
 9281|   775k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|   775k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   775k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   775k|    }                                                                  \
  |  | 9229|   775k|    else {                                                             \
  |  | 9230|   775k|        return vis(monostate_val);                                     \
  |  | 9231|   775k|    }
  ------------------
 9282|   775k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 775k]
  ------------------
 9283|   775k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|   775k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   775k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   775k|    }                                                                  \
  |  | 9229|   775k|    else {                                                             \
  |  | 9230|   775k|        return vis(monostate_val);                                     \
  |  | 9231|   775k|    }
  ------------------
 9284|       |
 9285|   775k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 0, False: 775k]
  ------------------
 9286|   775k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|   775k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|   775k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 775k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 775k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|   775k|            SCN_CLANG_POP
 9303|   775k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  946|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  942|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  908|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v46detail17basic_scan_bufferIcE8sync_allEv:
 4351|  91.8k|    {
 4352|  91.8k|        return sync(0);
 4353|  91.8k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4sizeEv:
 6181|  1.12M|    {
 6182|  1.12M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  880|  1.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 1.12M]
  |  |  ------------------
  ------------------
 6183|      0|            return max_size();
 6184|      0|        }
 6185|       |
 6186|  1.12M|        return static_cast<std::size_t>(m_desc &
 6187|  1.12M|                                        ((1 << detail::packed_arg_bits) - 1));
 6188|  1.12M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE9is_packedEv:
 6207|  2.25M|    {
 6208|  2.25M|        return (m_desc & detail::is_unpacked_bit) == 0;
 6209|  2.25M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE3getEm:
 6149|  1.12M|    {
 6150|  1.12M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  880|  1.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 1.12M]
  |  |  ------------------
  ------------------
 6151|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  879|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (879:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6152|      0|                return m_args[id];
 6153|      0|            }
 6154|      0|            return {};
 6155|      0|        }
 6156|       |
 6157|  1.12M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  880|  1.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 1.12M]
  |  |  ------------------
  ------------------
 6158|      0|            return {};
 6159|      0|        }
 6160|       |
 6161|  1.12M|        const auto t = type(id);
 6162|  1.12M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  880|  1.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 1.12M]
  |  |  ------------------
  ------------------
 6163|      0|            return {};
 6164|      0|        }
 6165|       |
 6166|  1.12M|        basic_scan_arg<Context> arg;
 6167|  1.12M|        arg.m_type = t;
 6168|  1.12M|        if (is_only_builtin()) {
  ------------------
  |  Branch (6168:13): [True: 1.12M, False: 0]
  ------------------
 6169|  1.12M|            arg.m_value.ref_value = m_builtin_values[id];
 6170|  1.12M|        }
 6171|      0|        else {
 6172|      0|            arg.m_value = m_values[id];
 6173|      0|        }
 6174|  1.12M|        return arg;
 6175|  1.12M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4typeEm:
 6216|  1.12M|    {
 6217|       |        // First (0th) index is size, types start after that
 6218|  1.12M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6219|  1.12M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6220|  1.12M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6221|  1.12M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE15is_only_builtinEv:
 6211|  1.12M|    {
 6212|  1.12M|        return (m_desc & detail::has_custom_types_bit) == 0;
 6213|  1.12M|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEcvbEv:
 5965|  2.14M|    {
 5966|  2.14M|        return m_type != detail::arg_type::none_type;
 5967|  2.14M|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9323|   166k|{
 9324|   166k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  951|   166k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|   166k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|   166k|{
 9225|   166k|#define SCN_VISIT(Type)                                                \
 9226|   166k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|   166k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|   166k|    }                                                                  \
 9229|   166k|    else {                                                             \
 9230|   166k|        return vis(monostate_val);                                     \
 9231|   166k|    }
 9232|       |
 9233|   166k|    monostate monostate_val{};
 9234|       |
 9235|   166k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 166k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 166k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 166k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 166k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 166k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 166k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 166k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 166k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 166k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 166k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 166k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 166k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 166k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 166k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 166k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|  48.3k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 48.3k, False: 118k]
  ------------------
 9267|  48.3k|            SCN_VISIT(float);
  ------------------
  |  | 9226|  48.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  48.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  48.3k|    }                                                                  \
  |  | 9229|  48.3k|    else {                                                             \
  |  | 9230|  48.3k|        return vis(monostate_val);                                     \
  |  | 9231|  48.3k|    }
  ------------------
 9268|   106k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 58.2k, False: 108k]
  ------------------
 9269|   106k|            SCN_VISIT(double);
  ------------------
  |  | 9226|   106k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   106k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   106k|    }                                                                  \
  |  | 9229|   106k|    else {                                                             \
  |  | 9230|   106k|        return vis(monostate_val);                                     \
  |  | 9231|   106k|    }
  ------------------
 9270|   166k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 60.1k, False: 106k]
  ------------------
 9271|   166k|            SCN_VISIT(long double);
  ------------------
  |  | 9226|   166k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   166k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   166k|    }                                                                  \
  |  | 9229|   166k|    else {                                                             \
  |  | 9230|   166k|        return vis(monostate_val);                                     \
  |  | 9231|   166k|    }
  ------------------
 9272|   166k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 166k]
  ------------------
 9273|   166k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|   166k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   166k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   166k|    }                                                                  \
  |  | 9229|   166k|    else {                                                             \
  |  | 9230|   166k|        return vis(monostate_val);                                     \
  |  | 9231|   166k|    }
  ------------------
 9274|   166k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 0, False: 166k]
  ------------------
 9275|   166k|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|   166k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   166k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   166k|    }                                                                  \
  |  | 9229|   166k|    else {                                                             \
  |  | 9230|   166k|        return vis(monostate_val);                                     \
  |  | 9231|   166k|    }
  ------------------
 9276|   166k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 166k]
  ------------------
 9277|   166k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|   166k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   166k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   166k|    }                                                                  \
  |  | 9229|   166k|    else {                                                             \
  |  | 9230|   166k|        return vis(monostate_val);                                     \
  |  | 9231|   166k|    }
  ------------------
 9278|   166k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 166k]
  ------------------
 9279|   166k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|   166k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   166k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   166k|    }                                                                  \
  |  | 9229|   166k|    else {                                                             \
  |  | 9230|   166k|        return vis(monostate_val);                                     \
  |  | 9231|   166k|    }
  ------------------
 9280|   166k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 166k]
  ------------------
 9281|   166k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|   166k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   166k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   166k|    }                                                                  \
  |  | 9229|   166k|    else {                                                             \
  |  | 9230|   166k|        return vis(monostate_val);                                     \
  |  | 9231|   166k|    }
  ------------------
 9282|   166k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 166k]
  ------------------
 9283|   166k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|   166k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   166k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   166k|    }                                                                  \
  |  | 9229|   166k|    else {                                                             \
  |  | 9230|   166k|        return vis(monostate_val);                                     \
  |  | 9231|   166k|    }
  ------------------
 9284|       |
 9285|   166k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 0, False: 166k]
  ------------------
 9286|   166k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|   166k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|   166k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 166k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 166k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|   166k|            SCN_CLANG_POP
 9303|   166k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  946|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  942|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  908|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6010|  3.04M|{
 6011|  3.04M|    return arg.m_type;
 6012|  3.04M|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6022|  1.23M|{
 6023|  1.23M|    return arg.m_value;
 6024|  1.23M|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwEC2ENS2_17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 8947|   452k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  949|   452k|    static_cast<    \
  |  |  950|   452k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|   452k|    {
 8949|   452k|    }
_ZN3scn2v424basic_scan_parse_contextIwEC2IONS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSF_11char_traitsIwEEEEi:
 6279|   452k|        : m_format{format},
 6280|   452k|          m_next_arg_id{next_arg_id},
 6281|   452k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6281:27): [Folded - Ignored]
  ------------------
 6282|   452k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6282:27): [Folded - Ignored]
  ------------------
 6283|       |          m_is_borrowed(
 6284|   452k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6284:16): [Folded - Ignored]
  |  Branch (6284:41): [Folded - Ignored]
  ------------------
 6285|   452k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6285:15): [Folded - Ignored]
  ------------------
 6286|   452k|    {
 6287|   452k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|   452k|    {
 3075|   452k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|   452k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3040|   452k|    {
 3041|   452k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  951|   452k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|   452k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7795|   452k|{
 7796|   452k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7797|   452k|    handler.check_args_exhausted();
 7798|   452k|    return handler.get_error();
 7799|   452k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7760|   452k|{
 7761|       |    // TODO: memchr fast path with a larger (> 32) format string
 7762|       |
 7763|   452k|    auto begin = format.data();
 7764|   452k|    auto it = begin;
 7765|   452k|    const auto end = format.data() + format.size();
 7766|       |
 7767|   763k|    while (it != end) {
  ------------------
  |  Branch (7767:12): [True: 452k, False: 311k]
  ------------------
 7768|   452k|        const auto ch = *it++;
 7769|   452k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7769:13): [True: 452k, False: 0]
  ------------------
 7770|   452k|            handler.on_literal_text(begin, it - 1);
 7771|       |
 7772|   452k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7773|   452k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7773:17): [True: 141k, False: 311k]
  ------------------
 7774|   141k|                return;
 7775|   141k|            }
 7776|   452k|        }
 7777|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7777:18): [True: 0, False: 0]
  ------------------
 7778|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  Branch (880:45): [True: 0, False: 0]
  |  |  |  Branch (880:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7779|      0|                handler.on_error("Unmatched '}' in format string");
 7780|      0|                return;
 7781|      0|            }
 7782|       |
 7783|      0|            handler.on_literal_text(begin, it);
 7784|      0|            begin = ++it;
 7785|      0|        }
 7786|   452k|    }
 7787|       |
 7788|   311k|    handler.on_literal_text(begin, end);
 7789|   311k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 7692|   452k|{
 7693|   452k|    struct id_adapter {
 7694|   452k|        constexpr void operator()()
 7695|   452k|        {
 7696|   452k|            arg_id = handler.on_arg_id();
 7697|   452k|        }
 7698|   452k|        constexpr void operator()(std::size_t id)
 7699|   452k|        {
 7700|   452k|            arg_id = handler.on_arg_id(id);
 7701|   452k|        }
 7702|       |
 7703|   452k|        constexpr void on_error(const char* msg)
 7704|   452k|        {
 7705|   452k|            SCN_UNLIKELY_ATTR
 7706|   452k|            handler.on_error(msg);
 7707|   452k|        }
 7708|       |
 7709|   452k|        Handler& handler;
 7710|   452k|        std::size_t arg_id;
 7711|   452k|    };
 7712|       |
 7713|   452k|    ++begin;
 7714|   452k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|   452k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 452k]
  |  |  ------------------
  ------------------
 7715|      0|        handler.on_error("Unexpected end of replacement field");
 7716|      0|        return begin;
 7717|      0|    }
 7718|       |
 7719|   452k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7719:9): [True: 0, False: 452k]
  ------------------
 7720|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7721|      0|    }
 7722|   452k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7722:14): [True: 0, False: 452k]
  ------------------
 7723|      0|        handler.on_literal_text(begin, begin + 1);
 7724|      0|    }
 7725|   452k|    else {
 7726|   452k|        auto adapter = id_adapter{handler, 0};
 7727|   452k|        begin = parse_arg_id(begin, end, adapter);
 7728|       |
 7729|   452k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|   452k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 452k]
  |  |  ------------------
  ------------------
 7730|      0|            handler.on_error("Missing '}' in format string");
 7731|      0|            return begin;
 7732|      0|        }
 7733|       |
 7734|   452k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7734:13): [True: 0, False: 452k]
  ------------------
 7735|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7736|      0|        }
 7737|   452k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7737:18): [True: 452k, False: 0]
  ------------------
 7738|   452k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  880|   452k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 452k]
  |  |  ------------------
  ------------------
 7739|      0|                handler.on_error("Unexpected end of replacement field");
 7740|      0|                return begin;
 7741|      0|            }
 7742|   452k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7743|   452k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  880|   905k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 452k]
  |  |  |  Branch (880:45): [True: 0, False: 452k]
  |  |  |  Branch (880:45): [True: 0, False: 452k]
  |  |  ------------------
  ------------------
 7744|      0|                handler.on_error("Unknown format specifier");
 7745|      0|                return begin;
 7746|      0|            }
 7747|   452k|        }
 7748|      0|        else {
 7749|      0|            SCN_UNLIKELY_ATTR
 7750|      0|            handler.on_error("Missing '}' in format string");
 7751|      0|            return begin;
 7752|      0|        }
 7753|   452k|    }
 7754|   452k|    return begin + 1;
 7755|   452k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE3argEm:
 8846|   904k|    {
 8847|   904k|        return m_args.get(id);
 8848|   904k|    }
_ZN3scn2v424basic_scan_parse_contextIwE11next_arg_idEv:
 6314|   904k|    {
 6315|   904k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  880|   904k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 904k]
  |  |  ------------------
  ------------------
 6316|      0|            on_error(
 6317|      0|                "Cannot switch from manual to automatic argument indexing");
 6318|      0|            return 0;
 6319|      0|        }
 6320|       |
 6321|   904k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6322|   904k|        do_check_arg_id(id);
 6323|   904k|        return id;
 6324|   904k|    }
_ZN3scn2v424basic_scan_parse_contextIwE15do_check_arg_idEm:
 6808|   904k|{
 6809|   904k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6809:9): [Folded - Ignored]
  ------------------
 6810|   904k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6810:10): [Folded - Ignored]
  |  Branch (6810:22): [Folded - Ignored]
  ------------------
 6811|       |        // The cast below will cause an error on gcc pre-12
 6812|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6813|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6813:13): [True: 0, False: 0]
  ------------------
 6814|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6815|      0|            SCN_UNLIKELY_ATTR
 6816|      0|            on_error("Argument not found");
 6817|      0|        }
 6818|      0|    }
 6819|   904k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7193|   452k|{
 7194|   452k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  945|   452k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   452k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7195|   452k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7195:9): [True: 452k, False: 0]
  |  Branch (7195:26): [True: 0, False: 452k]
  ------------------
 7196|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7197|      0|    }
 7198|       |
 7199|   452k|    handler();
 7200|   452k|    return begin;
 7201|   452k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7695|   452k|        {
 7696|   452k|            arg_id = handler.on_arg_id();
 7697|   452k|        }
_ZN3scn2v424basic_scan_parse_contextIwE10advance_toEPKw:
 6309|   904k|    {
 6310|   904k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6311|   904k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE3getEv:
 4690|   618k|{
 4691|   618k|    if (is_contiguous()) {
  ------------------
  |  Branch (4691:9): [True: 0, False: 618k]
  ------------------
 4692|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4693|      0|                                ranges::default_sentinel};
 4694|      0|    }
 4695|   618k|    return ranges::subrange{forward_iterator{this, 0},
 4696|   618k|                            ranges::default_sentinel};
 4697|   618k|}
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4453|   618k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4454|   618k|    {
 4455|   618k|        SCN_EXPECT(parent);
  ------------------
  |  |  945|   618k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   618k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|   618k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  945|   618k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   618k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4457|   618k|    }
_ZNK3scn2v424basic_scan_parse_contextIwE5beginEv:
 6298|  1.80M|    {
 6299|  1.80M|        return m_format.data();
 6300|  1.80M|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7872|   452k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  951|   452k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7873|   452k|    {
 7874|   452k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  945|   452k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   452k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7875|   452k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7608|   452k|{
 7609|   452k|    auto do_presentation = [&]() -> const CharT* {
 7610|   452k|        if (*begin == CharT{'['}) {
 7611|   452k|            auto set = parse_presentation_set(begin, end, handler);
 7612|   452k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7613|       |                // clang-format off
 7614|   452k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7615|       |                // clang-format on
 7616|   452k|                return begin;
 7617|   452k|            }
 7618|   452k|            handler.on_character_set_string(set);
 7619|   452k|            return begin;
 7620|   452k|        }
 7621|   452k|        if (*begin == CharT{'/'}) {
 7622|   452k|            return parse_presentation_regex(begin, end, handler);
 7623|   452k|        }
 7624|   452k|        presentation_type type = parse_presentation_type(*begin++);
 7625|   452k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7626|   452k|            handler.on_error("Invalid type specifier in format string");
 7627|   452k|            return begin;
 7628|   452k|        }
 7629|   452k|        handler.on_type(type);
 7630|   452k|        return begin;
 7631|   452k|    };
 7632|       |
 7633|   452k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7633:9): [True: 452k, False: 0]
  |  Branch (7633:28): [True: 452k, False: 0]
  ------------------
 7634|   452k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7634:9): [True: 452k, False: 0]
  |  Branch (7634:36): [True: 341k, False: 111k]
  ------------------
 7635|   341k|        return do_presentation();
 7636|   341k|    }
 7637|       |
 7638|   111k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 111k]
  |  |  ------------------
  ------------------
 7639|      0|        handler.on_error("Unexpected end of format string");
 7640|      0|        return begin;
 7641|      0|    }
 7642|       |
 7643|   111k|    begin = parse_align(begin, end, handler);
 7644|   111k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 111k]
  |  |  ------------------
  ------------------
 7645|      0|        handler.on_error("Unexpected end of format string");
 7646|      0|        return begin;
 7647|      0|    }
 7648|       |
 7649|   111k|    begin = parse_width(begin, end, handler);
 7650|   111k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 111k]
  |  |  ------------------
  ------------------
 7651|      0|        handler.on_error("Unexpected end of format string");
 7652|      0|        return begin;
 7653|      0|    }
 7654|       |
 7655|   111k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7655:9): [True: 0, False: 111k]
  ------------------
 7656|      0|        ++begin;
 7657|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7658|      0|            handler.on_error("Unexpected end of format string");
 7659|      0|            return begin;
 7660|      0|        }
 7661|      0|        begin = parse_precision(begin, end, handler);
 7662|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7663|      0|            handler.on_error("Unexpected end of format string");
 7664|      0|            return begin;
 7665|      0|        }
 7666|      0|    }
 7667|       |
 7668|   111k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7668:9): [True: 111k, False: 0]
  ------------------
 7669|   111k|        handler.on_localized();
 7670|   111k|        ++begin;
 7671|   111k|    }
 7672|   111k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 111k]
  |  |  ------------------
  ------------------
 7673|      0|        handler.on_error("Unexpected end of format string");
 7674|      0|        return begin;
 7675|      0|    }
 7676|       |
 7677|   111k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7677:9): [True: 111k, False: 0]
  |  Branch (7677:25): [True: 0, False: 111k]
  ------------------
 7678|      0|        do_presentation();
 7679|      0|    }
 7680|   111k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 111k]
  |  |  ------------------
  ------------------
 7681|      0|        handler.on_error("Unexpected end of format string");
 7682|      0|        return begin;
 7683|      0|    }
 7684|       |
 7685|   111k|    return begin;
 7686|   111k|}
_ZN3scn2v46detail15is_ascii_letterIwEEbT_:
 7257|   904k|{
 7258|   904k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7258:13): [True: 682k, False: 222k]
  |  Branch (7258:33): [True: 682k, False: 0]
  ------------------
 7259|   904k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7259:13): [True: 222k, False: 0]
  |  Branch (7259:33): [True: 222k, False: 0]
  ------------------
 7260|   904k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7609|   341k|    auto do_presentation = [&]() -> const CharT* {
 7610|   341k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7610:13): [True: 0, False: 341k]
  ------------------
 7611|      0|            auto set = parse_presentation_set(begin, end, handler);
 7612|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7613|       |                // clang-format off
 7614|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7615|       |                // clang-format on
 7616|      0|                return begin;
 7617|      0|            }
 7618|      0|            handler.on_character_set_string(set);
 7619|      0|            return begin;
 7620|      0|        }
 7621|   341k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7621:13): [True: 0, False: 341k]
  ------------------
 7622|      0|            return parse_presentation_regex(begin, end, handler);
 7623|      0|        }
 7624|   341k|        presentation_type type = parse_presentation_type(*begin++);
 7625|   341k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  880|   341k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 341k]
  |  |  ------------------
  ------------------
 7626|      0|            handler.on_error("Invalid type specifier in format string");
 7627|      0|            return begin;
 7628|      0|        }
 7629|   341k|        handler.on_type(type);
 7630|   341k|        return begin;
 7631|   341k|    };
_ZN3scn2v46detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 7205|   682k|{
 7206|   682k|    switch (type) {
 7207|      0|        case 'b':
  ------------------
  |  Branch (7207:9): [True: 0, False: 682k]
  ------------------
 7208|      0|        case 'B':
  ------------------
  |  Branch (7208:9): [True: 0, False: 682k]
  ------------------
 7209|      0|            return presentation_type::int_binary;
 7210|      0|        case 'd':
  ------------------
  |  Branch (7210:9): [True: 0, False: 682k]
  ------------------
 7211|      0|            return presentation_type::int_decimal;
 7212|      0|        case 'i':
  ------------------
  |  Branch (7212:9): [True: 0, False: 682k]
  ------------------
 7213|      0|            return presentation_type::int_generic;
 7214|      0|        case 'u':
  ------------------
  |  Branch (7214:9): [True: 0, False: 682k]
  ------------------
 7215|      0|            return presentation_type::int_unsigned_decimal;
 7216|      0|        case 'o':
  ------------------
  |  Branch (7216:9): [True: 0, False: 682k]
  ------------------
 7217|      0|            return presentation_type::int_octal;
 7218|      0|        case 'x':
  ------------------
  |  Branch (7218:9): [True: 0, False: 682k]
  ------------------
 7219|      0|        case 'X':
  ------------------
  |  Branch (7219:9): [True: 0, False: 682k]
  ------------------
 7220|      0|            return presentation_type::int_hex;
 7221|      0|        case 'r':
  ------------------
  |  Branch (7221:9): [True: 0, False: 682k]
  ------------------
 7222|      0|        case 'R':
  ------------------
  |  Branch (7222:9): [True: 0, False: 682k]
  ------------------
 7223|      0|            return presentation_type::int_arbitrary_base;
 7224|   244k|        case 'a':
  ------------------
  |  Branch (7224:9): [True: 244k, False: 438k]
  ------------------
 7225|   244k|        case 'A':
  ------------------
  |  Branch (7225:9): [True: 0, False: 682k]
  ------------------
 7226|   244k|            return presentation_type::float_hex;
 7227|  59.0k|        case 'e':
  ------------------
  |  Branch (7227:9): [True: 59.0k, False: 623k]
  ------------------
 7228|  59.0k|        case 'E':
  ------------------
  |  Branch (7228:9): [True: 0, False: 682k]
  ------------------
 7229|  59.0k|            return presentation_type::float_scientific;
 7230|   173k|        case 'f':
  ------------------
  |  Branch (7230:9): [True: 173k, False: 509k]
  ------------------
 7231|   173k|        case 'F':
  ------------------
  |  Branch (7231:9): [True: 0, False: 682k]
  ------------------
 7232|   173k|            return presentation_type::float_fixed;
 7233|   205k|        case 'g':
  ------------------
  |  Branch (7233:9): [True: 205k, False: 477k]
  ------------------
 7234|   205k|        case 'G':
  ------------------
  |  Branch (7234:9): [True: 0, False: 682k]
  ------------------
 7235|   205k|            return presentation_type::float_general;
 7236|      0|        case 's':
  ------------------
  |  Branch (7236:9): [True: 0, False: 682k]
  ------------------
 7237|      0|            return presentation_type::string;
 7238|      0|        case 'c':
  ------------------
  |  Branch (7238:9): [True: 0, False: 682k]
  ------------------
 7239|      0|            return presentation_type::character;
 7240|      0|        case '?':
  ------------------
  |  Branch (7240:9): [True: 0, False: 682k]
  ------------------
 7241|      0|            return presentation_type::escaped_character;
 7242|      0|        case 'p':
  ------------------
  |  Branch (7242:9): [True: 0, False: 682k]
  ------------------
 7243|      0|            return presentation_type::pointer;
 7244|      0|        case '[':
  ------------------
  |  Branch (7244:9): [True: 0, False: 682k]
  ------------------
 7245|      0|        case '/':
  ------------------
  |  Branch (7245:9): [True: 0, False: 682k]
  ------------------
 7246|       |            // Should be handled by parse_presentation_set and
 7247|       |            // parse_presentation_regex
 7248|      0|            SCN_EXPECT(false);
  ------------------
  |  |  945|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7249|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  908|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7250|      0|        default:
  ------------------
  |  Branch (7250:9): [True: 0, False: 682k]
  ------------------
 7251|      0|            return presentation_type::none;
 7252|   682k|    }
 7253|   682k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7282|   111k|{
 7283|   111k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  945|   111k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   111k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7284|       |
 7285|   111k|    auto check_align = [](wchar_t ch) {
 7286|   111k|        switch (ch) {
 7287|   111k|            case L'<':
 7288|   111k|                return align_type::left;
 7289|   111k|            case L'>':
 7290|   111k|                return align_type::right;
 7291|   111k|            case L'^':
 7292|   111k|                return align_type::center;
 7293|   111k|            default:
 7294|   111k|                return align_type::none;
 7295|   111k|        }
 7296|   111k|    };
 7297|       |
 7298|   111k|    auto potential_fill_len = code_point_length(begin, end);
 7299|   111k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  880|   222k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 111k]
  |  |  |  Branch (880:45): [True: 0, False: 111k]
  |  |  |  Branch (880:45): [True: 0, False: 111k]
  |  |  ------------------
  ------------------
 7300|   111k|                     std::distance(begin, end) < potential_fill_len)) {
 7301|      0|        handler.on_error("Invalid encoding in fill character");
 7302|      0|        return begin;
 7303|      0|    }
 7304|       |
 7305|   111k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7306|       |
 7307|   111k|    auto potential_fill = std::basic_string_view<CharT>{
 7308|   111k|        begin, static_cast<size_t>(potential_fill_len)};
 7309|   111k|    const auto begin_before_fill = begin;
 7310|   111k|    begin += potential_fill_len;
 7311|       |
 7312|   111k|    if (begin == end) {
  ------------------
  |  Branch (7312:9): [True: 0, False: 111k]
  ------------------
 7313|      0|        return begin_before_fill;
 7314|      0|    }
 7315|       |
 7316|   111k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7317|   111k|    const auto begin_after_fill = begin;
 7318|   111k|    ++begin;
 7319|       |
 7320|   111k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7320:9): [True: 111k, False: 0]
  ------------------
 7321|   111k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  880|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 111k]
  |  |  ------------------
  ------------------
 7322|      0|            handler.on_error("Invalid fill character '{' in format string");
 7323|      0|            return begin;
 7324|      0|        }
 7325|   111k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7325:13): [True: 0, False: 111k]
  ------------------
 7326|      0|            return begin_before_fill;
 7327|      0|        }
 7328|   111k|    }
 7329|       |
 7330|   111k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7330:9): [True: 111k, False: 0]
  ------------------
 7331|   111k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7331:13): [True: 0, False: 111k]
  ------------------
 7332|      0|            handler.on_align(potential_align_on_fill);
 7333|      0|            return begin_after_fill;
 7334|      0|        }
 7335|   111k|        return begin_before_fill;
 7336|   111k|    }
 7337|       |
 7338|      0|    handler.on_fill(potential_fill);
 7339|      0|    handler.on_align(potential_align_after_fill);
 7340|      0|    return begin;
 7341|   111k|}
_ZN3scn2v46detail17code_point_lengthIwEEiPKT_S5_:
 7264|   222k|{
 7265|   222k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  945|   222k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   222k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7266|   222k|    if constexpr (sizeof(CharT) != 1) {
 7267|   222k|        return 1;
 7268|       |    }
 7269|       |    else {
 7270|       |        const auto lengths =
 7271|       |            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7272|       |            "\3\4";
 7273|       |        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7274|       |        return len;
 7275|       |    }
 7276|   222k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7285|   222k|    auto check_align = [](wchar_t ch) {
 7286|   222k|        switch (ch) {
 7287|      0|            case L'<':
  ------------------
  |  Branch (7287:13): [True: 0, False: 222k]
  ------------------
 7288|      0|                return align_type::left;
 7289|      0|            case L'>':
  ------------------
  |  Branch (7289:13): [True: 0, False: 222k]
  ------------------
 7290|      0|                return align_type::right;
 7291|      0|            case L'^':
  ------------------
  |  Branch (7291:13): [True: 0, False: 222k]
  ------------------
 7292|      0|                return align_type::center;
 7293|   222k|            default:
  ------------------
  |  Branch (7293:13): [True: 222k, False: 0]
  ------------------
 7294|   222k|                return align_type::none;
 7295|   222k|        }
 7296|   222k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7347|   111k|{
 7348|   111k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  945|   111k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   111k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7349|       |
 7350|   111k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7350:9): [True: 111k, False: 0]
  |  Branch (7350:33): [True: 0, False: 111k]
  ------------------
 7351|      0|        int width = parse_simple_int(begin, end);
 7352|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  879|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (879:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7353|      0|            handler.on_width(width);
 7354|      0|        }
 7355|      0|        else {
 7356|      0|            handler.on_error("Invalid field width");
 7357|      0|            return begin;
 7358|      0|        }
 7359|      0|    }
 7360|   111k|    return begin;
 7361|   111k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEE12on_localizedEv:
 7878|   111k|    {
 7879|   111k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7880|   111k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7880:13): [True: 111k, False: 0]
  ------------------
 7881|   111k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7881:13): [True: 111k, False: 0]
  ------------------
 7882|   111k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7882:13): [True: 0, False: 111k]
  ------------------
 7883|   111k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7883:13): [True: 0, False: 0]
  ------------------
 7884|      0|            SCN_UNLIKELY_ATTR
 7885|       |            // clang-format off
 7886|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7887|       |            // clang-format on
 7888|      0|        }
 7889|       |
 7890|   111k|        Handler::on_localized();
 7891|   111k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9323|   452k|{
 9324|   452k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  951|   452k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|   452k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|   452k|{
 9225|   452k|#define SCN_VISIT(Type)                                                \
 9226|   452k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|   452k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|   452k|    }                                                                  \
 9229|   452k|    else {                                                             \
 9230|   452k|        return vis(monostate_val);                                     \
 9231|   452k|    }
 9232|       |
 9233|   452k|    monostate monostate_val{};
 9234|       |
 9235|   452k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 452k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 452k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 452k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 452k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 452k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 452k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 452k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 452k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 452k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 452k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 452k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 452k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 452k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 452k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 452k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|   141k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 141k, False: 311k]
  ------------------
 9267|   141k|            SCN_VISIT(float);
  ------------------
  |  | 9226|   141k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   141k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   141k|    }                                                                  \
  |  | 9229|   141k|    else {                                                             \
  |  | 9230|   141k|        return vis(monostate_val);                                     \
  |  | 9231|   141k|    }
  ------------------
 9268|   295k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 154k, False: 298k]
  ------------------
 9269|   295k|            SCN_VISIT(double);
  ------------------
  |  | 9226|   295k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   295k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   295k|    }                                                                  \
  |  | 9229|   295k|    else {                                                             \
  |  | 9230|   295k|        return vis(monostate_val);                                     \
  |  | 9231|   295k|    }
  ------------------
 9270|   452k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 157k, False: 295k]
  ------------------
 9271|   452k|            SCN_VISIT(long double);
  ------------------
  |  | 9226|   452k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   452k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   452k|    }                                                                  \
  |  | 9229|   452k|    else {                                                             \
  |  | 9230|   452k|        return vis(monostate_val);                                     \
  |  | 9231|   452k|    }
  ------------------
 9272|   452k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 452k]
  ------------------
 9273|   452k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|   452k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   452k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   452k|    }                                                                  \
  |  | 9229|   452k|    else {                                                             \
  |  | 9230|   452k|        return vis(monostate_val);                                     \
  |  | 9231|   452k|    }
  ------------------
 9274|   452k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 0, False: 452k]
  ------------------
 9275|   452k|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|   452k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   452k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   452k|    }                                                                  \
  |  | 9229|   452k|    else {                                                             \
  |  | 9230|   452k|        return vis(monostate_val);                                     \
  |  | 9231|   452k|    }
  ------------------
 9276|   452k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 452k]
  ------------------
 9277|   452k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|   452k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   452k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   452k|    }                                                                  \
  |  | 9229|   452k|    else {                                                             \
  |  | 9230|   452k|        return vis(monostate_val);                                     \
  |  | 9231|   452k|    }
  ------------------
 9278|   452k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 452k]
  ------------------
 9279|   452k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|   452k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   452k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   452k|    }                                                                  \
  |  | 9229|   452k|    else {                                                             \
  |  | 9230|   452k|        return vis(monostate_val);                                     \
  |  | 9231|   452k|    }
  ------------------
 9280|   452k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 452k]
  ------------------
 9281|   452k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|   452k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   452k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   452k|    }                                                                  \
  |  | 9229|   452k|    else {                                                             \
  |  | 9230|   452k|        return vis(monostate_val);                                     \
  |  | 9231|   452k|    }
  ------------------
 9282|   452k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 452k]
  ------------------
 9283|   452k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|   452k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   452k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   452k|    }                                                                  \
  |  | 9229|   452k|    else {                                                             \
  |  | 9230|   452k|        return vis(monostate_val);                                     \
  |  | 9231|   452k|    }
  ------------------
 9284|       |
 9285|   452k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 0, False: 452k]
  ------------------
 9286|   452k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|   452k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|   452k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 452k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 452k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|   452k|            SCN_CLANG_POP
 9303|   452k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  946|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  942|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  908|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9323|   166k|{
 9324|   166k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  951|   166k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|   166k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|   166k|{
 9225|   166k|#define SCN_VISIT(Type)                                                \
 9226|   166k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|   166k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|   166k|    }                                                                  \
 9229|   166k|    else {                                                             \
 9230|   166k|        return vis(monostate_val);                                     \
 9231|   166k|    }
 9232|       |
 9233|   166k|    monostate monostate_val{};
 9234|       |
 9235|   166k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 166k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 166k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 166k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 166k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 166k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 166k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 166k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 166k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 166k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 166k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 166k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 166k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 166k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 166k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 166k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|  48.2k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 48.2k, False: 118k]
  ------------------
 9267|  48.2k|            SCN_VISIT(float);
  ------------------
  |  | 9226|  48.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  48.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  48.2k|    }                                                                  \
  |  | 9229|  48.2k|    else {                                                             \
  |  | 9230|  48.2k|        return vis(monostate_val);                                     \
  |  | 9231|  48.2k|    }
  ------------------
 9268|   106k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 58.1k, False: 108k]
  ------------------
 9269|   106k|            SCN_VISIT(double);
  ------------------
  |  | 9226|   106k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   106k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   106k|    }                                                                  \
  |  | 9229|   106k|    else {                                                             \
  |  | 9230|   106k|        return vis(monostate_val);                                     \
  |  | 9231|   106k|    }
  ------------------
 9270|   166k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 60.0k, False: 106k]
  ------------------
 9271|   166k|            SCN_VISIT(long double);
  ------------------
  |  | 9226|   166k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   166k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   166k|    }                                                                  \
  |  | 9229|   166k|    else {                                                             \
  |  | 9230|   166k|        return vis(monostate_val);                                     \
  |  | 9231|   166k|    }
  ------------------
 9272|   166k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 166k]
  ------------------
 9273|   166k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|   166k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   166k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   166k|    }                                                                  \
  |  | 9229|   166k|    else {                                                             \
  |  | 9230|   166k|        return vis(monostate_val);                                     \
  |  | 9231|   166k|    }
  ------------------
 9274|   166k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 0, False: 166k]
  ------------------
 9275|   166k|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|   166k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   166k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   166k|    }                                                                  \
  |  | 9229|   166k|    else {                                                             \
  |  | 9230|   166k|        return vis(monostate_val);                                     \
  |  | 9231|   166k|    }
  ------------------
 9276|   166k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 166k]
  ------------------
 9277|   166k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|   166k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   166k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   166k|    }                                                                  \
  |  | 9229|   166k|    else {                                                             \
  |  | 9230|   166k|        return vis(monostate_val);                                     \
  |  | 9231|   166k|    }
  ------------------
 9278|   166k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 166k]
  ------------------
 9279|   166k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|   166k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   166k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   166k|    }                                                                  \
  |  | 9229|   166k|    else {                                                             \
  |  | 9230|   166k|        return vis(monostate_val);                                     \
  |  | 9231|   166k|    }
  ------------------
 9280|   166k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 166k]
  ------------------
 9281|   166k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|   166k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   166k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   166k|    }                                                                  \
  |  | 9229|   166k|    else {                                                             \
  |  | 9230|   166k|        return vis(monostate_val);                                     \
  |  | 9231|   166k|    }
  ------------------
 9282|   166k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 166k]
  ------------------
 9283|   166k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|   166k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   166k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   166k|    }                                                                  \
  |  | 9229|   166k|    else {                                                             \
  |  | 9230|   166k|        return vis(monostate_val);                                     \
  |  | 9231|   166k|    }
  ------------------
 9284|       |
 9285|   166k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 0, False: 166k]
  ------------------
 9286|   166k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|   166k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|   166k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 166k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 166k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|   166k|            SCN_CLANG_POP
 9303|   166k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  946|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  942|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  908|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v424basic_scan_parse_contextIwEC2IRNS0_6detail17basic_scan_bufferIwEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEi:
 6279|   452k|        : m_format{format},
 6280|   452k|          m_next_arg_id{next_arg_id},
 6281|   452k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6281:27): [Folded - Ignored]
  ------------------
 6282|   452k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6282:27): [Folded - Ignored]
  ------------------
 6283|       |          m_is_borrowed(
 6284|   452k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6284:16): [Folded - Ignored]
  |  Branch (6284:41): [Folded - Ignored]
  ------------------
 6285|   452k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6285:15): [Folded - Ignored]
  ------------------
 6286|   452k|    {
 6287|   452k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7795|   452k|{
 7796|   452k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7797|   452k|    handler.check_args_exhausted();
 7798|   452k|    return handler.get_error();
 7799|   452k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7760|   452k|{
 7761|       |    // TODO: memchr fast path with a larger (> 32) format string
 7762|       |
 7763|   452k|    auto begin = format.data();
 7764|   452k|    auto it = begin;
 7765|   452k|    const auto end = format.data() + format.size();
 7766|       |
 7767|   763k|    while (it != end) {
  ------------------
  |  Branch (7767:12): [True: 452k, False: 310k]
  ------------------
 7768|   452k|        const auto ch = *it++;
 7769|   452k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7769:13): [True: 452k, False: 0]
  ------------------
 7770|   452k|            handler.on_literal_text(begin, it - 1);
 7771|       |
 7772|   452k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7773|   452k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7773:17): [True: 141k, False: 310k]
  ------------------
 7774|   141k|                return;
 7775|   141k|            }
 7776|   452k|        }
 7777|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7777:18): [True: 0, False: 0]
  ------------------
 7778|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  Branch (880:45): [True: 0, False: 0]
  |  |  |  Branch (880:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7779|      0|                handler.on_error("Unmatched '}' in format string");
 7780|      0|                return;
 7781|      0|            }
 7782|       |
 7783|      0|            handler.on_literal_text(begin, it);
 7784|      0|            begin = ++it;
 7785|      0|        }
 7786|   452k|    }
 7787|       |
 7788|   310k|    handler.on_literal_text(begin, end);
 7789|   310k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE10advance_toENS2_17basic_scan_bufferIwE16forward_iteratorE:
 8985|   310k|    {
 8986|   310k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  949|   310k|    static_cast<    \
  |  |  950|   310k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8987|   310k|    }
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 7692|   452k|{
 7693|   452k|    struct id_adapter {
 7694|   452k|        constexpr void operator()()
 7695|   452k|        {
 7696|   452k|            arg_id = handler.on_arg_id();
 7697|   452k|        }
 7698|   452k|        constexpr void operator()(std::size_t id)
 7699|   452k|        {
 7700|   452k|            arg_id = handler.on_arg_id(id);
 7701|   452k|        }
 7702|       |
 7703|   452k|        constexpr void on_error(const char* msg)
 7704|   452k|        {
 7705|   452k|            SCN_UNLIKELY_ATTR
 7706|   452k|            handler.on_error(msg);
 7707|   452k|        }
 7708|       |
 7709|   452k|        Handler& handler;
 7710|   452k|        std::size_t arg_id;
 7711|   452k|    };
 7712|       |
 7713|   452k|    ++begin;
 7714|   452k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|   452k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 452k]
  |  |  ------------------
  ------------------
 7715|      0|        handler.on_error("Unexpected end of replacement field");
 7716|      0|        return begin;
 7717|      0|    }
 7718|       |
 7719|   452k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7719:9): [True: 0, False: 452k]
  ------------------
 7720|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7721|      0|    }
 7722|   452k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7722:14): [True: 0, False: 452k]
  ------------------
 7723|      0|        handler.on_literal_text(begin, begin + 1);
 7724|      0|    }
 7725|   452k|    else {
 7726|   452k|        auto adapter = id_adapter{handler, 0};
 7727|   452k|        begin = parse_arg_id(begin, end, adapter);
 7728|       |
 7729|   452k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|   452k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 452k]
  |  |  ------------------
  ------------------
 7730|      0|            handler.on_error("Missing '}' in format string");
 7731|      0|            return begin;
 7732|      0|        }
 7733|       |
 7734|   452k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7734:13): [True: 0, False: 452k]
  ------------------
 7735|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7736|      0|        }
 7737|   452k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7737:18): [True: 452k, False: 0]
  ------------------
 7738|   452k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  880|   452k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 452k]
  |  |  ------------------
  ------------------
 7739|      0|                handler.on_error("Unexpected end of replacement field");
 7740|      0|                return begin;
 7741|      0|            }
 7742|   452k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7743|   452k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  880|   904k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 452k]
  |  |  |  Branch (880:45): [True: 0, False: 452k]
  |  |  |  Branch (880:45): [True: 0, False: 452k]
  |  |  ------------------
  ------------------
 7744|      0|                handler.on_error("Unknown format specifier");
 7745|      0|                return begin;
 7746|      0|            }
 7747|   452k|        }
 7748|      0|        else {
 7749|      0|            SCN_UNLIKELY_ATTR
 7750|      0|            handler.on_error("Missing '}' in format string");
 7751|      0|            return begin;
 7752|      0|        }
 7753|   452k|    }
 7754|   452k|    return begin + 1;
 7755|   452k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7193|   452k|{
 7194|   452k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  945|   452k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   452k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7195|   452k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7195:9): [True: 452k, False: 0]
  |  Branch (7195:26): [True: 0, False: 452k]
  ------------------
 7196|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7197|      0|    }
 7198|       |
 7199|   452k|    handler();
 7200|   452k|    return begin;
 7201|   452k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7695|   452k|        {
 7696|   452k|            arg_id = handler.on_arg_id();
 7697|   452k|        }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7872|   452k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  951|   452k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7873|   452k|    {
 7874|   452k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  945|   452k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   452k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7875|   452k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7608|   452k|{
 7609|   452k|    auto do_presentation = [&]() -> const CharT* {
 7610|   452k|        if (*begin == CharT{'['}) {
 7611|   452k|            auto set = parse_presentation_set(begin, end, handler);
 7612|   452k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7613|       |                // clang-format off
 7614|   452k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7615|       |                // clang-format on
 7616|   452k|                return begin;
 7617|   452k|            }
 7618|   452k|            handler.on_character_set_string(set);
 7619|   452k|            return begin;
 7620|   452k|        }
 7621|   452k|        if (*begin == CharT{'/'}) {
 7622|   452k|            return parse_presentation_regex(begin, end, handler);
 7623|   452k|        }
 7624|   452k|        presentation_type type = parse_presentation_type(*begin++);
 7625|   452k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7626|   452k|            handler.on_error("Invalid type specifier in format string");
 7627|   452k|            return begin;
 7628|   452k|        }
 7629|   452k|        handler.on_type(type);
 7630|   452k|        return begin;
 7631|   452k|    };
 7632|       |
 7633|   452k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7633:9): [True: 452k, False: 0]
  |  Branch (7633:28): [True: 452k, False: 0]
  ------------------
 7634|   452k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7634:9): [True: 452k, False: 0]
  |  Branch (7634:36): [True: 341k, False: 110k]
  ------------------
 7635|   341k|        return do_presentation();
 7636|   341k|    }
 7637|       |
 7638|   110k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 110k]
  |  |  ------------------
  ------------------
 7639|      0|        handler.on_error("Unexpected end of format string");
 7640|      0|        return begin;
 7641|      0|    }
 7642|       |
 7643|   110k|    begin = parse_align(begin, end, handler);
 7644|   110k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 110k]
  |  |  ------------------
  ------------------
 7645|      0|        handler.on_error("Unexpected end of format string");
 7646|      0|        return begin;
 7647|      0|    }
 7648|       |
 7649|   110k|    begin = parse_width(begin, end, handler);
 7650|   110k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 110k]
  |  |  ------------------
  ------------------
 7651|      0|        handler.on_error("Unexpected end of format string");
 7652|      0|        return begin;
 7653|      0|    }
 7654|       |
 7655|   110k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7655:9): [True: 0, False: 110k]
  ------------------
 7656|      0|        ++begin;
 7657|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7658|      0|            handler.on_error("Unexpected end of format string");
 7659|      0|            return begin;
 7660|      0|        }
 7661|      0|        begin = parse_precision(begin, end, handler);
 7662|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7663|      0|            handler.on_error("Unexpected end of format string");
 7664|      0|            return begin;
 7665|      0|        }
 7666|      0|    }
 7667|       |
 7668|   110k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7668:9): [True: 110k, False: 0]
  ------------------
 7669|   110k|        handler.on_localized();
 7670|   110k|        ++begin;
 7671|   110k|    }
 7672|   110k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 110k]
  |  |  ------------------
  ------------------
 7673|      0|        handler.on_error("Unexpected end of format string");
 7674|      0|        return begin;
 7675|      0|    }
 7676|       |
 7677|   110k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7677:9): [True: 110k, False: 0]
  |  Branch (7677:25): [True: 0, False: 110k]
  ------------------
 7678|      0|        do_presentation();
 7679|      0|    }
 7680|   110k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  880|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 110k]
  |  |  ------------------
  ------------------
 7681|      0|        handler.on_error("Unexpected end of format string");
 7682|      0|        return begin;
 7683|      0|    }
 7684|       |
 7685|   110k|    return begin;
 7686|   110k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 7609|   341k|    auto do_presentation = [&]() -> const CharT* {
 7610|   341k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7610:13): [True: 0, False: 341k]
  ------------------
 7611|      0|            auto set = parse_presentation_set(begin, end, handler);
 7612|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7613|       |                // clang-format off
 7614|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7615|       |                // clang-format on
 7616|      0|                return begin;
 7617|      0|            }
 7618|      0|            handler.on_character_set_string(set);
 7619|      0|            return begin;
 7620|      0|        }
 7621|   341k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7621:13): [True: 0, False: 341k]
  ------------------
 7622|      0|            return parse_presentation_regex(begin, end, handler);
 7623|      0|        }
 7624|   341k|        presentation_type type = parse_presentation_type(*begin++);
 7625|   341k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  880|   341k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 341k]
  |  |  ------------------
  ------------------
 7626|      0|            handler.on_error("Invalid type specifier in format string");
 7627|      0|            return begin;
 7628|      0|        }
 7629|   341k|        handler.on_type(type);
 7630|   341k|        return begin;
 7631|   341k|    };
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7282|   110k|{
 7283|   110k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  945|   110k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   110k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7284|       |
 7285|   110k|    auto check_align = [](wchar_t ch) {
 7286|   110k|        switch (ch) {
 7287|   110k|            case L'<':
 7288|   110k|                return align_type::left;
 7289|   110k|            case L'>':
 7290|   110k|                return align_type::right;
 7291|   110k|            case L'^':
 7292|   110k|                return align_type::center;
 7293|   110k|            default:
 7294|   110k|                return align_type::none;
 7295|   110k|        }
 7296|   110k|    };
 7297|       |
 7298|   110k|    auto potential_fill_len = code_point_length(begin, end);
 7299|   110k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  880|   221k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 110k]
  |  |  |  Branch (880:45): [True: 0, False: 110k]
  |  |  |  Branch (880:45): [True: 0, False: 110k]
  |  |  ------------------
  ------------------
 7300|   110k|                     std::distance(begin, end) < potential_fill_len)) {
 7301|      0|        handler.on_error("Invalid encoding in fill character");
 7302|      0|        return begin;
 7303|      0|    }
 7304|       |
 7305|   110k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7306|       |
 7307|   110k|    auto potential_fill = std::basic_string_view<CharT>{
 7308|   110k|        begin, static_cast<size_t>(potential_fill_len)};
 7309|   110k|    const auto begin_before_fill = begin;
 7310|   110k|    begin += potential_fill_len;
 7311|       |
 7312|   110k|    if (begin == end) {
  ------------------
  |  Branch (7312:9): [True: 0, False: 110k]
  ------------------
 7313|      0|        return begin_before_fill;
 7314|      0|    }
 7315|       |
 7316|   110k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7317|   110k|    const auto begin_after_fill = begin;
 7318|   110k|    ++begin;
 7319|       |
 7320|   110k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7320:9): [True: 110k, False: 0]
  ------------------
 7321|   110k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  880|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 110k]
  |  |  ------------------
  ------------------
 7322|      0|            handler.on_error("Invalid fill character '{' in format string");
 7323|      0|            return begin;
 7324|      0|        }
 7325|   110k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7325:13): [True: 0, False: 110k]
  ------------------
 7326|      0|            return begin_before_fill;
 7327|      0|        }
 7328|   110k|    }
 7329|       |
 7330|   110k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7330:9): [True: 110k, False: 0]
  ------------------
 7331|   110k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7331:13): [True: 0, False: 110k]
  ------------------
 7332|      0|            handler.on_align(potential_align_on_fill);
 7333|      0|            return begin_after_fill;
 7334|      0|        }
 7335|   110k|        return begin_before_fill;
 7336|   110k|    }
 7337|       |
 7338|      0|    handler.on_fill(potential_fill);
 7339|      0|    handler.on_align(potential_align_after_fill);
 7340|      0|    return begin;
 7341|   110k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 7285|   221k|    auto check_align = [](wchar_t ch) {
 7286|   221k|        switch (ch) {
 7287|      0|            case L'<':
  ------------------
  |  Branch (7287:13): [True: 0, False: 221k]
  ------------------
 7288|      0|                return align_type::left;
 7289|      0|            case L'>':
  ------------------
  |  Branch (7289:13): [True: 0, False: 221k]
  ------------------
 7290|      0|                return align_type::right;
 7291|      0|            case L'^':
  ------------------
  |  Branch (7291:13): [True: 0, False: 221k]
  ------------------
 7292|      0|                return align_type::center;
 7293|   221k|            default:
  ------------------
  |  Branch (7293:13): [True: 221k, False: 0]
  ------------------
 7294|   221k|                return align_type::none;
 7295|   221k|        }
 7296|   221k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7347|   110k|{
 7348|   110k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  945|   110k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   110k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7349|       |
 7350|   110k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7350:9): [True: 110k, False: 0]
  |  Branch (7350:33): [True: 0, False: 110k]
  ------------------
 7351|      0|        int width = parse_simple_int(begin, end);
 7352|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  879|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (879:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7353|      0|            handler.on_width(width);
 7354|      0|        }
 7355|      0|        else {
 7356|      0|            handler.on_error("Invalid field width");
 7357|      0|            return begin;
 7358|      0|        }
 7359|      0|    }
 7360|   110k|    return begin;
 7361|   110k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE12on_localizedEv:
 7878|   110k|    {
 7879|   110k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7880|   110k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7880:13): [True: 110k, False: 0]
  ------------------
 7881|   110k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7881:13): [True: 110k, False: 0]
  ------------------
 7882|   110k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7882:13): [True: 0, False: 110k]
  ------------------
 7883|   110k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7883:13): [True: 0, False: 0]
  ------------------
 7884|      0|            SCN_UNLIKELY_ATTR
 7885|       |            // clang-format off
 7886|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7887|       |            // clang-format on
 7888|      0|        }
 7889|       |
 7890|   110k|        Handler::on_localized();
 7891|   110k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerIS5_EEEEDcOT_:
 9323|   452k|{
 9324|   452k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  951|   452k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|   452k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|   452k|{
 9225|   452k|#define SCN_VISIT(Type)                                                \
 9226|   452k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|   452k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|   452k|    }                                                                  \
 9229|   452k|    else {                                                             \
 9230|   452k|        return vis(monostate_val);                                     \
 9231|   452k|    }
 9232|       |
 9233|   452k|    monostate monostate_val{};
 9234|       |
 9235|   452k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 452k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 452k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 452k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 452k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 452k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 452k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 452k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 452k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 452k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 452k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 452k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 452k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 452k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 452k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 452k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|   141k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 141k, False: 311k]
  ------------------
 9267|   141k|            SCN_VISIT(float);
  ------------------
  |  | 9226|   141k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   141k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   141k|    }                                                                  \
  |  | 9229|   141k|    else {                                                             \
  |  | 9230|   141k|        return vis(monostate_val);                                     \
  |  | 9231|   141k|    }
  ------------------
 9268|   295k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 154k, False: 298k]
  ------------------
 9269|   295k|            SCN_VISIT(double);
  ------------------
  |  | 9226|   295k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   295k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   295k|    }                                                                  \
  |  | 9229|   295k|    else {                                                             \
  |  | 9230|   295k|        return vis(monostate_val);                                     \
  |  | 9231|   295k|    }
  ------------------
 9270|   452k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 156k, False: 295k]
  ------------------
 9271|   452k|            SCN_VISIT(long double);
  ------------------
  |  | 9226|   452k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   452k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   452k|    }                                                                  \
  |  | 9229|   452k|    else {                                                             \
  |  | 9230|   452k|        return vis(monostate_val);                                     \
  |  | 9231|   452k|    }
  ------------------
 9272|   452k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 452k]
  ------------------
 9273|   452k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|   452k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   452k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   452k|    }                                                                  \
  |  | 9229|   452k|    else {                                                             \
  |  | 9230|   452k|        return vis(monostate_val);                                     \
  |  | 9231|   452k|    }
  ------------------
 9274|   452k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 0, False: 452k]
  ------------------
 9275|   452k|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|   452k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   452k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   452k|    }                                                                  \
  |  | 9229|   452k|    else {                                                             \
  |  | 9230|   452k|        return vis(monostate_val);                                     \
  |  | 9231|   452k|    }
  ------------------
 9276|   452k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 452k]
  ------------------
 9277|   452k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|   452k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   452k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   452k|    }                                                                  \
  |  | 9229|   452k|    else {                                                             \
  |  | 9230|   452k|        return vis(monostate_val);                                     \
  |  | 9231|   452k|    }
  ------------------
 9278|   452k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 452k]
  ------------------
 9279|   452k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|   452k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   452k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   452k|    }                                                                  \
  |  | 9229|   452k|    else {                                                             \
  |  | 9230|   452k|        return vis(monostate_val);                                     \
  |  | 9231|   452k|    }
  ------------------
 9280|   452k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 452k]
  ------------------
 9281|   452k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|   452k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   452k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   452k|    }                                                                  \
  |  | 9229|   452k|    else {                                                             \
  |  | 9230|   452k|        return vis(monostate_val);                                     \
  |  | 9231|   452k|    }
  ------------------
 9282|   452k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 452k]
  ------------------
 9283|   452k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|   452k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   452k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   452k|    }                                                                  \
  |  | 9229|   452k|    else {                                                             \
  |  | 9230|   452k|        return vis(monostate_val);                                     \
  |  | 9231|   452k|    }
  ------------------
 9284|       |
 9285|   452k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 0, False: 452k]
  ------------------
 9286|   452k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|   452k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|   452k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 452k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 452k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|   452k|            SCN_CLANG_POP
 9303|   452k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  946|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  942|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  908|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v46detail17basic_scan_bufferIwE8sync_allEv:
 4351|   183k|    {
 4352|   183k|        return sync(0);
 4353|   183k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 6135|   192k|    constexpr basic_scan_args() = default;
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 6135|   111k|    constexpr basic_scan_args() = default;

_ZN3scn2v44scanIJfENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  86.6k|{
   89|  86.6k|    auto result = make_scan_result<Source, Args...>();
   90|  86.6k|    fill_scan_result(result,
   91|  86.6k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  951|  86.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  86.6k|                           make_scan_args<wscan_context>(result->values())));
   93|  86.6k|    return result;
   94|  86.6k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   43|   281k|{
   44|   281k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  951|   281k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   281k|}
_ZN3scn2v44scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  86.6k|{
  131|  86.6k|    auto result = make_scan_result<Source, Args...>();
  132|  86.6k|    fill_scan_result(result,
  133|  86.6k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  951|  86.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  86.6k|                           make_scan_args<wscan_context>(result->values())));
  135|  86.6k|    return result;
  136|  86.6k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeETnPvLPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT0_OSF_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSK_16buffer_range_tagEwEEEE:
   59|   281k|{
   60|   281k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  951|   281k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   281k|}
_ZN3scn2v410scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  16.1k|{
  171|  16.1k|    auto result = make_scan_result<Source, T>();
  172|  16.1k|    fill_scan_result(
  173|  16.1k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  951|  16.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  16.1k|                            detail::make_arg<wscan_context>(result->value())));
  175|  16.1k|    return result;
  176|  16.1k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   71|  55.5k|{
   72|  55.5k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  951|  55.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  55.5k|}
_ZN3scn2v44scanIJdENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  96.6k|{
   89|  96.6k|    auto result = make_scan_result<Source, Args...>();
   90|  96.6k|    fill_scan_result(result,
   91|  96.6k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  951|  96.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  96.6k|                           make_scan_args<wscan_context>(result->values())));
   93|  96.6k|    return result;
   94|  96.6k|}
_ZN3scn2v44scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  96.6k|{
  131|  96.6k|    auto result = make_scan_result<Source, Args...>();
  132|  96.6k|    fill_scan_result(result,
  133|  96.6k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  951|  96.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  96.6k|                           make_scan_args<wscan_context>(result->values())));
  135|  96.6k|    return result;
  136|  96.6k|}
_ZN3scn2v410scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  19.4k|{
  171|  19.4k|    auto result = make_scan_result<Source, T>();
  172|  19.4k|    fill_scan_result(
  173|  19.4k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  951|  19.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  19.4k|                            detail::make_arg<wscan_context>(result->value())));
  175|  19.4k|    return result;
  176|  19.4k|}
_ZN3scn2v44scanIJeENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  98.5k|{
   89|  98.5k|    auto result = make_scan_result<Source, Args...>();
   90|  98.5k|    fill_scan_result(result,
   91|  98.5k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  951|  98.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  98.5k|                           make_scan_args<wscan_context>(result->values())));
   93|  98.5k|    return result;
   94|  98.5k|}
_ZN3scn2v44scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  98.5k|{
  131|  98.5k|    auto result = make_scan_result<Source, Args...>();
  132|  98.5k|    fill_scan_result(result,
  133|  98.5k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  951|  98.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  98.5k|                           make_scan_args<wscan_context>(result->values())));
  135|  98.5k|    return result;
  136|  98.5k|}
_ZN3scn2v410scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  20.0k|{
  171|  20.0k|    auto result = make_scan_result<Source, T>();
  172|  20.0k|    fill_scan_result(
  173|  20.0k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  951|  20.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  20.0k|                            detail::make_arg<wscan_context>(result->value())));
  175|  20.0k|    return result;
  176|  20.0k|}
_ZN3scn2v44scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  86.6k|{
   89|  86.6k|    auto result = make_scan_result<Source, Args...>();
   90|  86.6k|    fill_scan_result(result,
   91|  86.6k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  951|  86.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  86.6k|                           make_scan_args<wscan_context>(result->values())));
   93|  86.6k|    return result;
   94|  86.6k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   43|   281k|{
   44|   281k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  951|   281k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   281k|}
_ZN3scn2v44scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  86.6k|{
  131|  86.6k|    auto result = make_scan_result<Source, Args...>();
  132|  86.6k|    fill_scan_result(result,
  133|  86.6k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  951|  86.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  86.6k|                           make_scan_args<wscan_context>(result->values())));
  135|  86.6k|    return result;
  136|  86.6k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeETnPvLPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT0_OSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSP_16buffer_range_tagEwEEEE:
   59|   281k|{
   60|   281k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  951|   281k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   281k|}
_ZN3scn2v410scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  16.0k|{
  171|  16.0k|    auto result = make_scan_result<Source, T>();
  172|  16.0k|    fill_scan_result(
  173|  16.0k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  951|  16.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  16.0k|                            detail::make_arg<wscan_context>(result->value())));
  175|  16.0k|    return result;
  176|  16.0k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   71|  55.4k|{
   72|  55.4k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  951|  55.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  55.4k|}
_ZN3scn2v44scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  96.5k|{
   89|  96.5k|    auto result = make_scan_result<Source, Args...>();
   90|  96.5k|    fill_scan_result(result,
   91|  96.5k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  951|  96.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  96.5k|                           make_scan_args<wscan_context>(result->values())));
   93|  96.5k|    return result;
   94|  96.5k|}
_ZN3scn2v44scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  96.5k|{
  131|  96.5k|    auto result = make_scan_result<Source, Args...>();
  132|  96.5k|    fill_scan_result(result,
  133|  96.5k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  951|  96.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  96.5k|                           make_scan_args<wscan_context>(result->values())));
  135|  96.5k|    return result;
  136|  96.5k|}
_ZN3scn2v410scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  19.3k|{
  171|  19.3k|    auto result = make_scan_result<Source, T>();
  172|  19.3k|    fill_scan_result(
  173|  19.3k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  951|  19.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  19.3k|                            detail::make_arg<wscan_context>(result->value())));
  175|  19.3k|    return result;
  176|  19.3k|}
_ZN3scn2v44scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  98.4k|{
   89|  98.4k|    auto result = make_scan_result<Source, Args...>();
   90|  98.4k|    fill_scan_result(result,
   91|  98.4k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  951|  98.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  98.4k|                           make_scan_args<wscan_context>(result->values())));
   93|  98.4k|    return result;
   94|  98.4k|}
_ZN3scn2v44scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  98.4k|{
  131|  98.4k|    auto result = make_scan_result<Source, Args...>();
  132|  98.4k|    fill_scan_result(result,
  133|  98.4k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  951|  98.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  98.4k|                           make_scan_args<wscan_context>(result->values())));
  135|  98.4k|    return result;
  136|  98.4k|}
_ZN3scn2v410scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  20.0k|{
  171|  20.0k|    auto result = make_scan_result<Source, T>();
  172|  20.0k|    fill_scan_result(
  173|  20.0k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  951|  20.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  20.0k|                            detail::make_arg<wscan_context>(result->value())));
  175|  20.0k|    return result;
  176|  20.0k|}

_ZN3scn2v46detail10locale_refC2INSt3__16localeEEERKT_:
  307|  1.47M|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  308|  1.47M|{
  309|  1.47M|    static_assert(std::is_same_v<Locale, std::locale>);
  310|  1.47M|}
_ZNK3scn2v46detail10locale_ref3getINSt3__16localeEEET_v:
  314|   618k|{
  315|   618k|    static_assert(std::is_same_v<Locale, std::locale>);
  316|   618k|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (316:12): [True: 309k, False: 309k]
  ------------------
  317|   618k|                    : std::locale{};
  318|   618k|}
_ZN3scn2v44impl12float_readerIcE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1095|   602k|{
 1096|   602k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1097|   602k|                                  m_nan_payload_buffer, value);
 1098|   602k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  879|   602k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (879:25): [True: 585k, False: 16.5k]
  |  |  ------------------
  ------------------
 1099|   585k|        value = this->setsign(value);
 1100|   585k|        return n;
 1101|   585k|    }
 1102|       |
 1103|  16.5k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (1103:9): [True: 4.77k, False: 11.7k]
  ------------------
 1104|  16.5k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1104:9): [True: 1.09k, False: 3.67k]
  ------------------
 1105|  1.09k|        return detail::unexpected_scan_error(
 1106|  1.09k|            scan_error::value_negative_overflow, n.error().msg());
 1107|  1.09k|    }
 1108|  15.4k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (1108:9): [True: 937, False: 14.4k]
  ------------------
 1109|  15.4k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1109:9): [True: 110, False: 827]
  ------------------
 1110|    110|        return detail::unexpected_scan_error(
 1111|    110|            scan_error::value_negative_underflow, n.error().msg());
 1112|    110|    }
 1113|  15.3k|    return n;
 1114|  15.4k|}
_ZN3scn2v44impl12float_readerIwE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1095|   290k|{
 1096|   290k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1097|   290k|                                  m_nan_payload_buffer, value);
 1098|   290k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  879|   290k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (879:25): [True: 256k, False: 34.5k]
  |  |  ------------------
  ------------------
 1099|   256k|        value = this->setsign(value);
 1100|   256k|        return n;
 1101|   256k|    }
 1102|       |
 1103|  34.5k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (1103:9): [True: 2.96k, False: 31.5k]
  ------------------
 1104|  34.5k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1104:9): [True: 104, False: 2.86k]
  ------------------
 1105|    104|        return detail::unexpected_scan_error(
 1106|    104|            scan_error::value_negative_overflow, n.error().msg());
 1107|    104|    }
 1108|  34.4k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (1108:9): [True: 866, False: 33.5k]
  ------------------
 1109|  34.4k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1109:9): [True: 50, False: 816]
  ------------------
 1110|     50|        return detail::unexpected_scan_error(
 1111|     50|            scan_error::value_negative_underflow, n.error().msg());
 1112|     50|    }
 1113|  34.3k|    return n;
 1114|  34.4k|}
_ZN3scn2v44impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1095|   630k|{
 1096|   630k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1097|   630k|                                  m_nan_payload_buffer, value);
 1098|   630k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  879|   630k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (879:25): [True: 616k, False: 14.1k]
  |  |  ------------------
  ------------------
 1099|   616k|        value = this->setsign(value);
 1100|   616k|        return n;
 1101|   616k|    }
 1102|       |
 1103|  14.1k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (1103:9): [True: 2.48k, False: 11.6k]
  ------------------
 1104|  14.1k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1104:9): [True: 640, False: 1.84k]
  ------------------
 1105|    640|        return detail::unexpected_scan_error(
 1106|    640|            scan_error::value_negative_overflow, n.error().msg());
 1107|    640|    }
 1108|  13.4k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (1108:9): [True: 309, False: 13.1k]
  ------------------
 1109|  13.4k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1109:9): [True: 93, False: 216]
  ------------------
 1110|     93|        return detail::unexpected_scan_error(
 1111|     93|            scan_error::value_negative_underflow, n.error().msg());
 1112|     93|    }
 1113|  13.3k|    return n;
 1114|  13.4k|}
_ZN3scn2v44impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1095|   335k|{
 1096|   335k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1097|   335k|                                  m_nan_payload_buffer, value);
 1098|   335k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  879|   335k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (879:25): [True: 302k, False: 33.1k]
  |  |  ------------------
  ------------------
 1099|   302k|        value = this->setsign(value);
 1100|   302k|        return n;
 1101|   302k|    }
 1102|       |
 1103|  33.1k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (1103:9): [True: 1.71k, False: 31.4k]
  ------------------
 1104|  33.1k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1104:9): [True: 104, False: 1.61k]
  ------------------
 1105|    104|        return detail::unexpected_scan_error(
 1106|    104|            scan_error::value_negative_overflow, n.error().msg());
 1107|    104|    }
 1108|  33.0k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (1108:9): [True: 206, False: 32.8k]
  ------------------
 1109|  33.0k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1109:9): [True: 18, False: 188]
  ------------------
 1110|     18|        return detail::unexpected_scan_error(
 1111|     18|            scan_error::value_negative_underflow, n.error().msg());
 1112|     18|    }
 1113|  33.0k|    return n;
 1114|  33.0k|}
_ZN3scn2v44impl12float_readerIcE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1095|   637k|{
 1096|   637k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1097|   637k|                                  m_nan_payload_buffer, value);
 1098|   637k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  879|   637k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (879:25): [True: 625k, False: 12.3k]
  |  |  ------------------
  ------------------
 1099|   625k|        value = this->setsign(value);
 1100|   625k|        return n;
 1101|   625k|    }
 1102|       |
 1103|  12.3k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (1103:9): [True: 595, False: 11.7k]
  ------------------
 1104|  12.3k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1104:9): [True: 252, False: 343]
  ------------------
 1105|    252|        return detail::unexpected_scan_error(
 1106|    252|            scan_error::value_negative_overflow, n.error().msg());
 1107|    252|    }
 1108|  12.1k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (1108:9): [True: 100, False: 12.0k]
  ------------------
 1109|  12.1k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1109:9): [True: 40, False: 60]
  ------------------
 1110|     40|        return detail::unexpected_scan_error(
 1111|     40|            scan_error::value_negative_underflow, n.error().msg());
 1112|     40|    }
 1113|  12.0k|    return n;
 1114|  12.1k|}
_ZN3scn2v44impl12float_readerIwE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1095|   343k|{
 1096|   343k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1097|   343k|                                  m_nan_payload_buffer, value);
 1098|   343k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  879|   343k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (879:25): [True: 311k, False: 31.9k]
  |  |  ------------------
  ------------------
 1099|   311k|        value = this->setsign(value);
 1100|   311k|        return n;
 1101|   311k|    }
 1102|       |
 1103|  31.9k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (1103:9): [True: 146, False: 31.8k]
  ------------------
 1104|  31.9k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1104:9): [True: 32, False: 114]
  ------------------
 1105|     32|        return detail::unexpected_scan_error(
 1106|     32|            scan_error::value_negative_overflow, n.error().msg());
 1107|     32|    }
 1108|  31.9k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (1108:9): [True: 82, False: 31.8k]
  ------------------
 1109|  31.9k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1109:9): [True: 18, False: 64]
  ------------------
 1110|     18|        return detail::unexpected_scan_error(
 1111|     18|            scan_error::value_negative_underflow, n.error().msg());
 1112|     18|    }
 1113|  31.9k|    return n;
 1114|  31.9k|}
_ZN3scn2v44impl19parse_integer_valueIcmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1353|  6.83k|{
 1354|  6.83k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  945|  6.83k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  6.83k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1355|  6.83k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  945|  6.83k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  6.83k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1356|  6.83k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  945|  6.83k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  6.83k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1357|  6.83k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  945|  6.83k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  6.83k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1358|       |
 1359|  6.83k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1359:9): [True: 108, False: 6.72k]
  ------------------
 1360|    108|        SCN_UNLIKELY_ATTR
 1361|    108|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1362|    108|                                             "Invalid integer value");
 1363|    108|    }
 1364|       |
 1365|       |    // Skip leading zeroes
 1366|  6.72k|    auto start = source.data();
 1367|  6.72k|    const auto end = source.data() + source.size();
 1368|  6.72k|    {
 1369|  70.4k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1369:16): [True: 69.9k, False: 498]
  ------------------
 1370|  69.9k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1370:17): [True: 6.22k, False: 63.7k]
  ------------------
 1371|  6.22k|                break;
 1372|  6.22k|            }
 1373|  69.9k|        }
 1374|  6.72k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  880|  12.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 498, False: 6.22k]
  |  |  |  Branch (880:45): [True: 498, False: 6.22k]
  |  |  |  Branch (880:45): [True: 0, False: 6.22k]
  |  |  ------------------
  ------------------
 1375|    498|            value = 0;
 1376|    498|            return ranges::next(source.begin(),
 1377|    498|                                ranges::distance(source.data(), start));
 1378|    498|        }
 1379|  6.72k|    }
 1380|       |
 1381|  6.22k|    if constexpr (std::is_same_v<CharT, char>) {
 1382|  6.22k|        if (base == 10) {
  ------------------
  |  Branch (1382:13): [True: 6.22k, False: 0]
  ------------------
 1383|  6.22k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3940|  6.22k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  6.22k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  6.22k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|  6.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 462, False: 5.76k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    462|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    462|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    462|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    462|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    462|    }                                                  \
  |  |  |  | 3939|  6.22k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|  5.76k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1384|  5.76k|                             detail::make_string_view_from_pointers(start, end),
 1385|  5.76k|                             value, sign == sign_type::minus_sign));
 1386|  5.76k|            return ranges::next(source.begin(),
 1387|  5.76k|                                ranges::distance(source.data(), ptr));
 1388|  6.22k|        }
 1389|  6.22k|    }
 1390|       |
 1391|  6.22k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3940|  6.22k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  6.22k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  6.22k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|  6.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 6.22k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  6.22k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|  6.22k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1392|  6.22k|                     detail::make_string_view_from_pointers(start, end), value,
 1393|  6.22k|                     base, sign == sign_type::minus_sign));
 1394|  6.22k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1395|  6.22k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2103|   421k|{
 2104|   421k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2105|   421k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2111|   488k|{
 2112|   488k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2113|   488k|    return sync_after_vscan(source, n);
 2114|   488k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2121|   281k|{
 2122|   281k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2123|   281k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2129|   281k|{
 2130|   281k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2131|   281k|    return sync_after_vscan(source, n);
 2132|   281k|}
_ZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  206|   836k|{
  207|   836k|    return find_classic_impl(
  208|   836k|        source, [](char ch) { return is_ascii_space(ch); },
  209|   836k|        [](char32_t cp) { return detail::is_cp_space(cp); });
  210|   836k|}
_ZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  214|  2.00M|{
  215|  2.00M|    return find_classic_impl(
  216|  2.00M|        source, [](char ch) { return !is_ascii_space(ch); },
  217|  2.00M|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  218|  2.00M|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2072|   421k|{
 2073|   421k|    return vscan_internal(source, format, args);
 2074|   421k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2078|   488k|{
 2079|   488k|    auto n = vscan_internal(source, format, args);
 2080|   488k|    return sync_after_vscan(source, n);
 2081|   488k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2086|   281k|{
 2087|   281k|    return vscan_internal(source, format, args);
 2088|   281k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2092|   281k|{
 2093|   281k|    auto n = vscan_internal(source, format, args);
 2094|   281k|    return sync_after_vscan(source, n);
 2095|   281k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2158|  91.7k|{
 2159|  91.7k|    return vscan_value_internal(source, arg);
 2160|  91.7k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2163|   100k|{
 2164|   100k|    auto n = vscan_value_internal(source, arg);
 2165|   100k|    return sync_after_vscan(source, n);
 2166|   100k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2171|  55.5k|{
 2172|  55.5k|    return vscan_value_internal(source, arg);
 2173|  55.5k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2177|  55.4k|{
 2178|  55.4k|    auto n = vscan_value_internal(source, arg);
 2179|  55.4k|    return sync_after_vscan(source, n);
 2180|  55.4k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113maxdigits_u64Ei:
 1203|  6.22k|{
 1204|  6.22k|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  |  945|  6.22k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  6.22k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1205|  6.22k|    return maxdigits_u64_table[static_cast<size_t>(base)];
 1206|  6.22k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112min_safe_u64Ei:
 1247|     66|{
 1248|     66|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  |  945|     66|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|     66|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1249|     66|    return min_safe_u64_table[static_cast<size_t>(base)];
 1250|     66|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122check_integer_overflowImEEbmmib:
 1257|  6.22k|{
 1258|  6.22k|    auto max_digits = maxdigits_u64(base);
 1259|  6.22k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1259:9): [True: 396, False: 5.83k]
  ------------------
 1260|    396|        return true;
 1261|    396|    }
 1262|  5.83k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1262:9): [True: 66, False: 5.76k]
  |  Branch (1262:39): [True: 66, False: 0]
  ------------------
 1263|     66|        return true;
 1264|     66|    }
 1265|       |    if constexpr (!std::is_same_v<T, uint64_t>) {
 1266|       |        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
 1267|       |                      static_cast<uint64_t>(is_negative)) {
 1268|       |            SCN_UNLIKELY_ATTR
 1269|       |            return true;
 1270|       |        }
 1271|       |    }
 1272|       |
 1273|  5.76k|    return false;
 1274|  5.83k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112store_resultImEET_mb:
 1278|  5.76k|{
 1279|  5.76k|    if (is_negative) {
  ------------------
  |  Branch (1279:9): [True: 0, False: 5.76k]
  ------------------
 1280|      0|        SCN_MSVC_PUSH
 1281|      0|        SCN_MSVC_IGNORE(4146)
 1282|      0|        return static_cast<T>(
 1283|      0|            -std::numeric_limits<T>::max() -
 1284|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
 1285|      0|        SCN_MSVC_POP
 1286|      0|    }
 1287|       |
 1288|  5.76k|    return static_cast<T>(u64val);
 1289|  5.76k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121get_eight_digits_wordEPKc:
 1141|  7.59k|{
 1142|  7.59k|    uint64_t val{};
 1143|  7.59k|    std::memcpy(&val, input, sizeof(uint64_t));
 1144|       |    if constexpr (SCN_IS_BIG_ENDIAN) {
 1145|       |        val = byteswap(val);
 1146|       |    }
 1147|  7.59k|    return val;
 1148|  7.59k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_140parse_eight_decimal_digits_unrolled_fastEm:
 1151|  3.76k|{
 1152|  3.76k|    constexpr uint64_t mask = 0x000000FF000000FF;
 1153|  3.76k|    constexpr uint64_t mul1 = 0x000F424000000064;  // 100 + (1000000ULL << 32)
 1154|  3.76k|    constexpr uint64_t mul2 = 0x0000271000000001;  // 1 + (10000ULL << 32)
 1155|  3.76k|    word -= 0x3030303030303030;
 1156|  3.76k|    word = (word * 10) + (word >> 8);  // val = (val * 2561) >> 8;
 1157|  3.76k|    word = (((word & mask) * mul1) + (((word >> 16) & mask) * mul2)) >> 32;
 1158|  3.76k|    return static_cast<uint32_t>(word);
 1159|  3.76k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_141is_word_made_of_eight_decimal_digits_fastEm:
 1162|  3.82k|{
 1163|  3.82k|    return !((((word + 0x4646464646464646) | (word - 0x3030303030303030)) &
 1164|  3.82k|              0x8080808080808080));
 1165|  3.82k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|   836k|{
  131|   836k|    auto it = source.begin();
  132|       |
  133|  2.76M|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 2.22M, False: 543k]
  ------------------
  134|  2.22M|        auto sv =
  135|  2.22M|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|  2.22M|                .substr(0, 8);
  137|       |
  138|  2.22M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 2.16M, False: 60.3k]
  ------------------
  139|  2.16M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|  2.16M|            it = detail::make_string_view_iterator(source, tmp_it);
  141|  2.16M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 269k, False: 1.89M]
  ------------------
  142|   269k|                break;
  143|   269k|            }
  144|  1.89M|            continue;
  145|  2.16M|        }
  146|       |
  147|   199k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 163k, False: 36.0k]
  ------------------
  148|   163k|            auto tmp =
  149|   163k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|   163k|            auto res = get_next_code_point(tmp);
  151|   163k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 24.2k, False: 139k]
  ------------------
  152|  24.2k|                return it;
  153|  24.2k|            }
  154|   139k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|   139k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|   139k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  946|   139k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  942|   139k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|   139k|        }
  158|  60.3k|    }
  159|       |
  160|   812k|    return detail::make_string_view_iterator(source, it);
  161|   836k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  117|  3.44M|{
  118|  3.44M|    static_assert(sizeof(*source.data()) == 1);
  119|  3.44M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  945|  3.44M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  3.44M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  120|  3.44M|    uint64_t word{};
  121|  3.44M|    std::memcpy(&word, source.data(), source.size());
  122|       |
  123|  3.44M|    return has_byte_greater(word, 127) != 0;
  124|  3.44M|}
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  208|  13.2M|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  209|   163k|        [](char32_t cp) { return detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|  2.00M|{
  131|  2.00M|    auto it = source.begin();
  132|       |
  133|  2.18M|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 1.22M, False: 956k]
  ------------------
  134|  1.22M|        auto sv =
  135|  1.22M|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|  1.22M|                .substr(0, 8);
  137|       |
  138|  1.22M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 1.14M, False: 79.2k]
  ------------------
  139|  1.14M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|  1.14M|            it = detail::make_string_view_iterator(source, tmp_it);
  141|  1.14M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 973k, False: 172k]
  ------------------
  142|   973k|                break;
  143|   973k|            }
  144|   172k|            continue;
  145|  1.14M|        }
  146|       |
  147|   141k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 135k, False: 6.43k]
  ------------------
  148|   135k|            auto tmp =
  149|   135k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|   135k|            auto res = get_next_code_point(tmp);
  151|   135k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 72.7k, False: 62.4k]
  ------------------
  152|  72.7k|                return it;
  153|  72.7k|            }
  154|  62.4k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|  62.4k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|  62.4k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  946|  62.4k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  942|  62.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  62.4k|        }
  158|  79.2k|    }
  159|       |
  160|  1.93M|    return detail::make_string_view_iterator(source, it);
  161|  2.00M|}
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  216|  1.73M|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  217|   135k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113dispatch_implIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  988|   602k|{
  989|   602k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (989:9): [True: 3.27k, False: 599k]
  ------------------
  990|  3.27k|        if constexpr (std::numeric_limits<T>::has_infinity) {
  991|  3.27k|            value = std::numeric_limits<T>::infinity();
  992|  3.27k|            return std::strlen("inf");
  993|       |        }
  994|       |        else {
  995|       |            return detail::unexpected_scan_error(
  996|       |                scan_error::invalid_scanned_value,
  997|       |                "Type doesn't support infinities");
  998|       |        }
  999|  3.27k|    }
 1000|   602k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1000:9): [True: 2.90k, False: 599k]
  ------------------
 1001|  2.90k|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1002|  2.90k|            value = std::numeric_limits<T>::infinity();
 1003|  2.90k|            return std::strlen("infinity");
 1004|       |        }
 1005|       |        else {
 1006|       |            return detail::unexpected_scan_error(
 1007|       |                scan_error::invalid_scanned_value,
 1008|       |                "Type doesn't support infinities");
 1009|       |        }
 1010|  2.90k|    }
 1011|   602k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1011:9): [True: 25.6k, False: 576k]
  ------------------
 1012|  25.6k|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1013|  25.6k|            value = std::numeric_limits<T>::quiet_NaN();
 1014|  25.6k|            return std::strlen("nan");
 1015|       |        }
 1016|       |        else {
 1017|       |            return detail::unexpected_scan_error(
 1018|       |                scan_error::invalid_scanned_value,
 1019|       |                "Type doesn't support quiet NaNs");
 1020|       |        }
 1021|  25.6k|    }
 1022|   602k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1022:9): [True: 2.78k, False: 599k]
  ------------------
 1023|  2.78k|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1024|  2.78k|            value = std::numeric_limits<T>::quiet_NaN();
 1025|       |
 1026|  2.78k|            if constexpr (std::numeric_limits<T>::is_iec559) {
 1027|       |                // TODO: 128-bit payloads
 1028|  2.78k|                std::uint64_t payload{};
 1029|  2.78k|                if (auto result = reader_impl_for_int<CharT>{}.read_default(
  ------------------
  |  Branch (1029:26): [True: 2.08k, False: 698]
  ------------------
 1030|  2.78k|                        nan_payload.view(), payload, {})) {
 1031|  2.08k|                    apply_nan_payload(value, payload);
 1032|  2.08k|                }
 1033|    698|                else if (result.error().code() ==
  ------------------
  |  Branch (1033:26): [True: 154, False: 544]
  ------------------
 1034|    698|                         scan_error::value_positive_overflow) {
 1035|    154|                    apply_nan_payload(
 1036|    154|                        value, std::numeric_limits<std::uint64_t>::max());
 1037|    154|                }
 1038|  2.78k|            }
 1039|       |
 1040|  2.78k|            return static_cast<std::ptrdiff_t>(std::strlen("nan()") +
 1041|  2.78k|                                               nan_payload.view().size());
 1042|       |        }
 1043|       |        else {
 1044|       |            return detail::unexpected_scan_error(
 1045|       |                scan_error::invalid_scanned_value,
 1046|       |                "Type doesn't support quiet NaNs");
 1047|       |        }
 1048|  2.78k|    }
 1049|       |
 1050|   602k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  945|   602k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   602k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1051|   567k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1051:9): [True: 122k, False: 445k]
  ------------------
 1052|   122k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  880|   122k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 2.98k, False: 119k]
  |  |  ------------------
  ------------------
 1053|  2.98k|            return detail::unexpected_scan_error(
 1054|  2.98k|                scan_error::invalid_scanned_value,
 1055|  2.98k|                "Invalid floating-point digit");
 1056|  2.98k|        }
 1057|   122k|    }
 1058|   564k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  880|   564k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 7.83k, False: 556k]
  |  |  ------------------
  ------------------
 1059|  7.83k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1060|  7.83k|                                             "Invalid floating-point digit");
 1061|  7.83k|    }
 1062|       |
 1063|   556k|#if !SCN_DISABLE_FAST_FLOAT
 1064|       |    if constexpr (std::is_same_v<T, long double>) {
 1065|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1066|       |            // If double == long double (true on Windows),
 1067|       |            // use fast_float with double
 1068|       |            double tmp{};
 1069|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1070|       |            value = tmp;
 1071|       |            return ret;
 1072|       |        }
 1073|       |        else {
 1074|       |            // long doubles aren't supported by fast_float ->
 1075|       |            // fall back to from_chars or strtod
 1076|       |            return fast_float_fallback(data, value);
 1077|       |        }
 1078|       |    }
 1079|   556k|    else {
 1080|       |        // Default to fast_float
 1081|   556k|        return fast_float_impl<CharT, T>{data}(value);
 1082|   556k|    }
 1083|       |#else
 1084|       |    static_assert(SCN_HAS_FLOAT_CHARCONV,
 1085|       |                  "SCN_DISABLE_FAST_FLOAT needs std::from_chars for floats");
 1086|       |
 1087|       |    return fast_float_fallback(data, value);
 1088|       |#endif
 1089|   556k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117apply_nan_payloadIfEEvRT_m:
  971|  2.24k|{
  972|       |    if constexpr (!std::is_same_v<F, long double> ||
  973|       |                  !std::is_same_v<float_nan_traits_for_long_double,
  974|  2.24k|                                  nil_float_nan_traits>) {
  975|  2.24k|        using traits = float_nan_traits<F>;
  976|  2.24k|        typename traits::repr bits{};
  977|  2.24k|        std::memcpy(&bits, &value, sizeof(bits));
  978|  2.24k|        traits::apply(bits, payload);
  979|  2.24k|        std::memcpy(&value, &bits, sizeof(bits));
  980|  2.24k|    }
  981|  2.24k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116float_nan_traitsIfE5applyERNS4_4reprEm:
  822|  2.24k|    {
  823|  2.24k|        SCN_EXPECT(r.quiet_nan == 1);
  ------------------
  |  |  945|  2.24k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  2.24k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  824|  2.24k|        SCN_EXPECT(r.exponent == 0xff);
  ------------------
  |  |  945|  2.24k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  2.24k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  825|  2.24k|        r.mantissa = payload;
  826|  2.24k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_115fast_float_implIcfEC2ENS2_14impl_init_dataIcEE:
  741|   556k|        : fast_float_impl_base{data.base()}, m_input(data.input)
  742|   556k|    {
  743|   556k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_114impl_init_dataIcE4baseEv:
  368|  2.03M|    {
  369|  2.03M|        return {kind, options};
  370|  2.03M|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_115fast_float_implIcfEclERf:
  746|   556k|    {
  747|   556k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (747:13): [True: 119k, False: 437k]
  ------------------
  748|   556k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (748:13): [True: 24.8k, False: 412k]
  ------------------
  749|       |            // fast_float doesn't support hexfloats
  750|   143k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  751|   143k|                                              value);
  752|   143k|        }
  753|       |
  754|   412k|        const auto flags = get_flags();
  755|   412k|        const auto view = get_view();
  756|   412k|        const auto result = fast_float::from_chars(
  757|   412k|            view.data(), view.data() + view.size(), value, flags);
  758|       |
  759|   412k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  880|   412k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 412k]
  |  |  ------------------
  ------------------
  760|      0|            return detail::unexpected_scan_error(
  761|      0|                scan_error::invalid_scanned_value,
  762|      0|                "fast_float: invalid_argument");
  763|      0|        }
  764|   412k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  880|   412k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 4.92k, False: 407k]
  |  |  ------------------
  ------------------
  765|       |            // may just be very large: fall back
  766|  4.92k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  767|  4.92k|                                              value);
  768|  4.92k|        }
  769|       |
  770|   407k|        return result.ptr - view.data();
  771|   412k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_119fast_float_fallbackIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  701|   148k|{
  702|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  703|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  704|       |        return from_chars_impl<T>{data}(value);
  705|       |    }
  706|       |    else
  707|       |#endif
  708|   148k|    {
  709|   148k|#if !SCN_DISABLE_STRTOD
  710|   148k|        return strtod_impl<CharT, T>{data}(value);
  711|       |#else
  712|       |        return detail::unexpected_scan_error(
  713|       |            scan_error::invalid_scanned_value,
  714|       |            "fast_float failed, and fallbacks are disabled");
  715|       |#endif
  716|   148k|    }
  717|   148k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcfEC2ENS2_14impl_init_dataIcEE:
  551|   148k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  552|   148k|    {
  553|   148k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfEC2ENS2_9impl_baseE:
  382|   215k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcfEclERf:
  556|   148k|    {
  557|   148k|        return this->parse(value, this->get_null_terminated_source(m_input),
  558|   148k|                           generic_strtod);
  559|   148k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIcPFfPKcPPcEEENS0_13scan_expectedIlEERfPKT_T0_:
  388|   148k|    {
  389|   148k|        CharT* end{};
  390|   148k|        errno = 0;
  391|   148k|        value = strtod_cb(src, &end);
  392|   148k|        const auto saved_errno = errno;
  393|   148k|        auto chars_read = end - src;
  394|       |
  395|   148k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3930|   148k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  880|   148k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 5.70k, False: 143k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  5.70k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  5.70k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  5.70k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  5.70k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  5.70k|    }
  ------------------
  396|       |
  397|   143k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (397:13): [True: 118k, False: 24.6k]
  ------------------
  398|   143k|            chars_read >= 2) {
  ------------------
  |  Branch (398:13): [True: 118k, False: 0]
  ------------------
  399|   118k|            chars_read -= 2;
  400|   118k|        }
  401|       |
  402|   143k|        return chars_read;
  403|   148k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE11check_errorElif:
  431|   215k|    {
  432|   215k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (432:13): [True: 86.2k, False: 129k]
  |  Branch (432:37): [True: 0, False: 86.2k]
  ------------------
  433|      0|            SCN_UNLIKELY_ATTR
  434|      0|            return detail::unexpected_scan_error(
  435|      0|                scan_error::invalid_scanned_value,
  436|      0|                "strtod failed: No conversion");
  437|      0|        }
  438|       |
  439|   215k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (439:13): [True: 25.2k, False: 190k]
  ------------------
  440|   215k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (440:13): [True: 0, False: 25.2k]
  ------------------
  441|      0|            SCN_UNLIKELY_ATTR
  442|      0|            return detail::unexpected_scan_error(
  443|      0|                scan_error::invalid_scanned_value,
  444|      0|                "Hexfloats disallowed by format string");
  445|      0|        }
  446|       |
  447|   215k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (447:13): [True: 9.55k, False: 206k]
  |  Branch (447:34): [True: 1.80k, False: 7.75k]
  ------------------
  448|  1.80k|            SCN_UNLIKELY_ATTR
  449|  1.80k|            return detail::unexpected_scan_error(
  450|  1.80k|                scan_error::value_positive_underflow,
  451|  1.80k|                "strtod failed: underflow");
  452|  1.80k|        }
  453|       |
  454|   213k|        SCN_GCC_COMPAT_PUSH
  455|   213k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  456|       |
  457|   213k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (457:13): [True: 213k, False: 0]
  ------------------
  458|   213k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (458:13): [True: 213k, False: 0]
  ------------------
  459|   213k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (459:13): [True: 7.73k, False: 206k]
  ------------------
  460|  7.73k|            SCN_UNLIKELY_ATTR
  461|  7.73k|            return detail::unexpected_scan_error(
  462|  7.73k|                scan_error::value_positive_overflow, "strtod failed: overflow");
  463|  7.73k|        }
  464|       |
  465|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  466|       |
  467|   206k|            return {};
  468|   213k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113is_float_zeroEf:
  343|   225k|{
  344|   225k|    return f == 0.0f || f == -0.0f;
  ------------------
  |  Branch (344:12): [True: 88.0k, False: 137k]
  |  Branch (344:25): [True: 0, False: 137k]
  ------------------
  345|   225k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  408|   148k|    {
  409|   148k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (409:13): [True: 144k, False: 4.18k]
  ------------------
  410|       |            // TODO: call float_reader::read_source?
  411|   144k|            auto first_space = read_until_classic_space(input.view());
  412|   144k|            input.assign(
  413|   144k|                std::basic_string<CharT>{input.view().begin(), first_space});
  414|   144k|        }
  415|       |
  416|   148k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (416:13): [True: 119k, False: 29.7k]
  ------------------
  417|   119k|            if constexpr (std::is_same_v<CharT, char>) {
  418|   119k|                input.get_allocated_string().insert(0, "0x");
  419|       |            }
  420|       |            else {
  421|       |                input.get_allocated_string().insert(0, L"0x");
  422|       |            }
  423|   119k|        }
  424|       |
  425|   148k|        return input.get_allocated_string().c_str();
  426|   148k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcfE14generic_strtodEPKcPPc:
  563|   148k|    {
  564|   148k|        if constexpr (std::is_same_v<CharT, char>) {
  565|   148k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  566|       |        }
  567|       |        else {
  568|       |            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  569|       |        }
  570|   148k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE21generic_narrow_strtodEPKcPPc:
  471|   148k|    {
  472|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  473|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  474|       |        if constexpr (std::is_same_v<T, float>) {
  475|       |            return ::strtof_l(str, str_end, cloc);
  476|       |        }
  477|       |        else if constexpr (std::is_same_v<T, double>) {
  478|       |            return ::strtod_l(str, str_end, cloc);
  479|       |        }
  480|       |        else if constexpr (std::is_same_v<T, long double>) {
  481|       |            return ::strtold_l(str, str_end, cloc);
  482|       |        }
  483|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  484|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  485|       |        if constexpr (std::is_same_v<T, float>) {
  486|       |            return ::_strtof_l(str, str_end, cloc);
  487|       |        }
  488|       |        else if constexpr (std::is_same_v<T, double>) {
  489|       |            return ::_strtod_l(str, str_end, cloc);
  490|       |        }
  491|       |        else if constexpr (std::is_same_v<T, long double>) {
  492|       |            return ::_strtold_l(str, str_end, cloc);
  493|       |        }
  494|       |#else
  495|   148k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  496|   148k|        if constexpr (std::is_same_v<T, float>) {
  497|   148k|            return std::strtof(str, str_end);
  498|       |        }
  499|       |        else if constexpr (std::is_same_v<T, double>) {
  500|       |            return std::strtod(str, str_end);
  501|       |        }
  502|       |        else if constexpr (std::is_same_v<T, long double>) {
  503|       |            return std::strtold(str, str_end);
  504|       |        }
  505|   148k|#endif
  506|   148k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_120fast_float_impl_base9get_flagsEv:
  723|  1.28M|    {
  724|  1.28M|        unsigned format_flags{};
  725|  1.28M|        if ((m_options & float_reader_base::allow_fixed) != 0) {
  ------------------
  |  Branch (725:13): [True: 1.27M, False: 10.6k]
  ------------------
  726|  1.27M|            format_flags |=
  727|  1.27M|                static_cast<unsigned>(fast_float::chars_format::fixed);
  728|  1.27M|        }
  729|  1.28M|        if ((m_options & float_reader_base::allow_scientific) != 0) {
  ------------------
  |  Branch (729:13): [True: 1.08M, False: 196k]
  ------------------
  730|  1.08M|            format_flags |=
  731|  1.08M|                static_cast<unsigned>(fast_float::chars_format::scientific);
  732|  1.08M|        }
  733|       |
  734|  1.28M|        return static_cast<fast_float::chars_format>(format_flags);
  735|  1.28M|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_115fast_float_implIcfE8get_viewEv:
  775|   412k|    {
  776|   412k|        if constexpr (sizeof(CharT) == 1) {
  777|   412k|            return m_input.view();
  778|       |        }
  779|       |        else if constexpr (sizeof(CharT) == 2) {
  780|       |            return std::u16string_view{
  781|       |                reinterpret_cast<const char16_t*>(m_input.view().data()),
  782|       |                m_input.view().size()};
  783|       |        }
  784|       |        else {
  785|       |            return std::u32string_view{
  786|       |                reinterpret_cast<const char32_t*>(m_input.view().data()),
  787|       |                m_input.view().size()};
  788|       |        }
  789|   412k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113dispatch_implIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  988|   290k|{
  989|   290k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (989:9): [True: 0, False: 290k]
  ------------------
  990|      0|        if constexpr (std::numeric_limits<T>::has_infinity) {
  991|      0|            value = std::numeric_limits<T>::infinity();
  992|      0|            return std::strlen("inf");
  993|       |        }
  994|       |        else {
  995|       |            return detail::unexpected_scan_error(
  996|       |                scan_error::invalid_scanned_value,
  997|       |                "Type doesn't support infinities");
  998|       |        }
  999|      0|    }
 1000|   290k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1000:9): [True: 0, False: 290k]
  ------------------
 1001|      0|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1002|      0|            value = std::numeric_limits<T>::infinity();
 1003|      0|            return std::strlen("infinity");
 1004|       |        }
 1005|       |        else {
 1006|       |            return detail::unexpected_scan_error(
 1007|       |                scan_error::invalid_scanned_value,
 1008|       |                "Type doesn't support infinities");
 1009|       |        }
 1010|      0|    }
 1011|   290k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1011:9): [True: 0, False: 290k]
  ------------------
 1012|      0|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1013|      0|            value = std::numeric_limits<T>::quiet_NaN();
 1014|      0|            return std::strlen("nan");
 1015|       |        }
 1016|       |        else {
 1017|       |            return detail::unexpected_scan_error(
 1018|       |                scan_error::invalid_scanned_value,
 1019|       |                "Type doesn't support quiet NaNs");
 1020|       |        }
 1021|      0|    }
 1022|   290k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1022:9): [True: 0, False: 290k]
  ------------------
 1023|      0|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1024|      0|            value = std::numeric_limits<T>::quiet_NaN();
 1025|       |
 1026|      0|            if constexpr (std::numeric_limits<T>::is_iec559) {
 1027|       |                // TODO: 128-bit payloads
 1028|      0|                std::uint64_t payload{};
 1029|      0|                if (auto result = reader_impl_for_int<CharT>{}.read_default(
  ------------------
  |  Branch (1029:26): [True: 0, False: 0]
  ------------------
 1030|      0|                        nan_payload.view(), payload, {})) {
 1031|      0|                    apply_nan_payload(value, payload);
 1032|      0|                }
 1033|      0|                else if (result.error().code() ==
  ------------------
  |  Branch (1033:26): [True: 0, False: 0]
  ------------------
 1034|      0|                         scan_error::value_positive_overflow) {
 1035|      0|                    apply_nan_payload(
 1036|      0|                        value, std::numeric_limits<std::uint64_t>::max());
 1037|      0|                }
 1038|      0|            }
 1039|       |
 1040|      0|            return static_cast<std::ptrdiff_t>(std::strlen("nan()") +
 1041|      0|                                               nan_payload.view().size());
 1042|       |        }
 1043|       |        else {
 1044|       |            return detail::unexpected_scan_error(
 1045|       |                scan_error::invalid_scanned_value,
 1046|       |                "Type doesn't support quiet NaNs");
 1047|       |        }
 1048|      0|    }
 1049|       |
 1050|   290k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  945|   290k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   290k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1051|   290k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1051:9): [True: 71.6k, False: 219k]
  ------------------
 1052|  71.6k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  880|  71.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 8.95k, False: 62.7k]
  |  |  ------------------
  ------------------
 1053|  8.95k|            return detail::unexpected_scan_error(
 1054|  8.95k|                scan_error::invalid_scanned_value,
 1055|  8.95k|                "Invalid floating-point digit");
 1056|  8.95k|        }
 1057|  71.6k|    }
 1058|   281k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  880|   281k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 21.7k, False: 260k]
  |  |  ------------------
  ------------------
 1059|  21.7k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1060|  21.7k|                                             "Invalid floating-point digit");
 1061|  21.7k|    }
 1062|       |
 1063|   260k|#if !SCN_DISABLE_FAST_FLOAT
 1064|       |    if constexpr (std::is_same_v<T, long double>) {
 1065|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1066|       |            // If double == long double (true on Windows),
 1067|       |            // use fast_float with double
 1068|       |            double tmp{};
 1069|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1070|       |            value = tmp;
 1071|       |            return ret;
 1072|       |        }
 1073|       |        else {
 1074|       |            // long doubles aren't supported by fast_float ->
 1075|       |            // fall back to from_chars or strtod
 1076|       |            return fast_float_fallback(data, value);
 1077|       |        }
 1078|       |    }
 1079|   260k|    else {
 1080|       |        // Default to fast_float
 1081|   260k|        return fast_float_impl<CharT, T>{data}(value);
 1082|   260k|    }
 1083|       |#else
 1084|       |    static_assert(SCN_HAS_FLOAT_CHARCONV,
 1085|       |                  "SCN_DISABLE_FAST_FLOAT needs std::from_chars for floats");
 1086|       |
 1087|       |    return fast_float_fallback(data, value);
 1088|       |#endif
 1089|   260k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_115fast_float_implIwfEC2ENS2_14impl_init_dataIwEE:
  741|   260k|        : fast_float_impl_base{data.base()}, m_input(data.input)
  742|   260k|    {
  743|   260k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_114impl_init_dataIwE4baseEv:
  368|  1.00M|    {
  369|  1.00M|        return {kind, options};
  370|  1.00M|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_115fast_float_implIwfEclERf:
  746|   260k|    {
  747|   260k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (747:13): [True: 62.6k, False: 197k]
  ------------------
  748|   260k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (748:13): [True: 482, False: 196k]
  ------------------
  749|       |            // fast_float doesn't support hexfloats
  750|  63.1k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  751|  63.1k|                                              value);
  752|  63.1k|        }
  753|       |
  754|   196k|        const auto flags = get_flags();
  755|   196k|        const auto view = get_view();
  756|   196k|        const auto result = fast_float::from_chars(
  757|   196k|            view.data(), view.data() + view.size(), value, flags);
  758|       |
  759|   196k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  880|   196k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 196k]
  |  |  ------------------
  ------------------
  760|      0|            return detail::unexpected_scan_error(
  761|      0|                scan_error::invalid_scanned_value,
  762|      0|                "fast_float: invalid_argument");
  763|      0|        }
  764|   196k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  880|   196k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 3.72k, False: 193k]
  |  |  ------------------
  ------------------
  765|       |            // may just be very large: fall back
  766|  3.72k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  767|  3.72k|                                              value);
  768|  3.72k|        }
  769|       |
  770|   193k|        return result.ptr - view.data();
  771|   196k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_119fast_float_fallbackIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  701|  66.8k|{
  702|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  703|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  704|       |        return from_chars_impl<T>{data}(value);
  705|       |    }
  706|       |    else
  707|       |#endif
  708|  66.8k|    {
  709|  66.8k|#if !SCN_DISABLE_STRTOD
  710|  66.8k|        return strtod_impl<CharT, T>{data}(value);
  711|       |#else
  712|       |        return detail::unexpected_scan_error(
  713|       |            scan_error::invalid_scanned_value,
  714|       |            "fast_float failed, and fallbacks are disabled");
  715|       |#endif
  716|  66.8k|    }
  717|  66.8k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwfEC2ENS2_14impl_init_dataIwEE:
  551|  66.8k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  552|  66.8k|    {
  553|  66.8k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwfEclERf:
  556|  66.8k|    {
  557|  66.8k|        return this->parse(value, this->get_null_terminated_source(m_input),
  558|  66.8k|                           generic_strtod);
  559|  66.8k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIwPFfPKwPPwEEENS0_13scan_expectedIlEERfPKT_T0_:
  388|  66.8k|    {
  389|  66.8k|        CharT* end{};
  390|  66.8k|        errno = 0;
  391|  66.8k|        value = strtod_cb(src, &end);
  392|  66.8k|        const auto saved_errno = errno;
  393|  66.8k|        auto chars_read = end - src;
  394|       |
  395|  66.8k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3930|  66.8k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  880|  66.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 3.83k, False: 63.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  3.83k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  3.83k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  3.83k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  3.83k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  3.83k|    }
  ------------------
  396|       |
  397|  63.0k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (397:13): [True: 62.5k, False: 482]
  ------------------
  398|  63.0k|            chars_read >= 2) {
  ------------------
  |  Branch (398:13): [True: 62.5k, False: 0]
  ------------------
  399|  62.5k|            chars_read -= 2;
  400|  62.5k|        }
  401|       |
  402|  63.0k|        return chars_read;
  403|  66.8k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  408|  66.8k|    {
  409|  66.8k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (409:13): [True: 64.4k, False: 2.43k]
  ------------------
  410|       |            // TODO: call float_reader::read_source?
  411|  64.4k|            auto first_space = read_until_classic_space(input.view());
  412|  64.4k|            input.assign(
  413|  64.4k|                std::basic_string<CharT>{input.view().begin(), first_space});
  414|  64.4k|        }
  415|       |
  416|  66.8k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (416:13): [True: 62.6k, False: 4.20k]
  ------------------
  417|       |            if constexpr (std::is_same_v<CharT, char>) {
  418|       |                input.get_allocated_string().insert(0, "0x");
  419|       |            }
  420|  62.6k|            else {
  421|  62.6k|                input.get_allocated_string().insert(0, L"0x");
  422|  62.6k|            }
  423|  62.6k|        }
  424|       |
  425|  66.8k|        return input.get_allocated_string().c_str();
  426|  66.8k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwfE14generic_strtodEPKwPPw:
  563|  66.8k|    {
  564|       |        if constexpr (std::is_same_v<CharT, char>) {
  565|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  566|       |        }
  567|  66.8k|        else {
  568|  66.8k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  569|  66.8k|        }
  570|  66.8k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE19generic_wide_strtodEPKwPPw:
  509|  66.8k|    {
  510|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  511|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  512|       |        if constexpr (std::is_same_v<T, float>) {
  513|       |            return ::wcstof_l(str, str_end, cloc);
  514|       |        }
  515|       |        else if constexpr (std::is_same_v<T, double>) {
  516|       |            return ::wcstod_l(str, str_end, cloc);
  517|       |        }
  518|       |        else if constexpr (std::is_same_v<T, long double>) {
  519|       |            return ::wcstold_l(str, str_end, cloc);
  520|       |        }
  521|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  522|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  523|       |        if constexpr (std::is_same_v<T, float>) {
  524|       |            return ::_wcstof_l(str, str_end, cloc);
  525|       |        }
  526|       |        else if constexpr (std::is_same_v<T, double>) {
  527|       |            return ::_wcstod_l(str, str_end, cloc);
  528|       |        }
  529|       |        else if constexpr (std::is_same_v<T, long double>) {
  530|       |            return ::_wcstold_l(str, str_end, cloc);
  531|       |        }
  532|       |#else
  533|  66.8k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  534|  66.8k|        if constexpr (std::is_same_v<T, float>) {
  535|  66.8k|            return std::wcstof(str, str_end);
  536|       |        }
  537|       |        else if constexpr (std::is_same_v<T, double>) {
  538|       |            return std::wcstod(str, str_end);
  539|       |        }
  540|       |        else if constexpr (std::is_same_v<T, long double>) {
  541|       |            return std::wcstold(str, str_end);
  542|       |        }
  543|  66.8k|#endif
  544|  66.8k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_115fast_float_implIwfE8get_viewEv:
  775|   196k|    {
  776|       |        if constexpr (sizeof(CharT) == 1) {
  777|       |            return m_input.view();
  778|       |        }
  779|       |        else if constexpr (sizeof(CharT) == 2) {
  780|       |            return std::u16string_view{
  781|       |                reinterpret_cast<const char16_t*>(m_input.view().data()),
  782|       |                m_input.view().size()};
  783|       |        }
  784|   196k|        else {
  785|   196k|            return std::u32string_view{
  786|   196k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
  787|   196k|                m_input.view().size()};
  788|   196k|        }
  789|   196k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  988|   630k|{
  989|   630k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (989:9): [True: 3.70k, False: 626k]
  ------------------
  990|  3.70k|        if constexpr (std::numeric_limits<T>::has_infinity) {
  991|  3.70k|            value = std::numeric_limits<T>::infinity();
  992|  3.70k|            return std::strlen("inf");
  993|       |        }
  994|       |        else {
  995|       |            return detail::unexpected_scan_error(
  996|       |                scan_error::invalid_scanned_value,
  997|       |                "Type doesn't support infinities");
  998|       |        }
  999|  3.70k|    }
 1000|   630k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1000:9): [True: 3.07k, False: 627k]
  ------------------
 1001|  3.07k|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1002|  3.07k|            value = std::numeric_limits<T>::infinity();
 1003|  3.07k|            return std::strlen("infinity");
 1004|       |        }
 1005|       |        else {
 1006|       |            return detail::unexpected_scan_error(
 1007|       |                scan_error::invalid_scanned_value,
 1008|       |                "Type doesn't support infinities");
 1009|       |        }
 1010|  3.07k|    }
 1011|   630k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1011:9): [True: 26.1k, False: 604k]
  ------------------
 1012|  26.1k|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1013|  26.1k|            value = std::numeric_limits<T>::quiet_NaN();
 1014|  26.1k|            return std::strlen("nan");
 1015|       |        }
 1016|       |        else {
 1017|       |            return detail::unexpected_scan_error(
 1018|       |                scan_error::invalid_scanned_value,
 1019|       |                "Type doesn't support quiet NaNs");
 1020|       |        }
 1021|  26.1k|    }
 1022|   630k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1022:9): [True: 2.85k, False: 627k]
  ------------------
 1023|  2.85k|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1024|  2.85k|            value = std::numeric_limits<T>::quiet_NaN();
 1025|       |
 1026|  2.85k|            if constexpr (std::numeric_limits<T>::is_iec559) {
 1027|       |                // TODO: 128-bit payloads
 1028|  2.85k|                std::uint64_t payload{};
 1029|  2.85k|                if (auto result = reader_impl_for_int<CharT>{}.read_default(
  ------------------
  |  Branch (1029:26): [True: 2.08k, False: 768]
  ------------------
 1030|  2.85k|                        nan_payload.view(), payload, {})) {
 1031|  2.08k|                    apply_nan_payload(value, payload);
 1032|  2.08k|                }
 1033|    768|                else if (result.error().code() ==
  ------------------
  |  Branch (1033:26): [True: 154, False: 614]
  ------------------
 1034|    768|                         scan_error::value_positive_overflow) {
 1035|    154|                    apply_nan_payload(
 1036|    154|                        value, std::numeric_limits<std::uint64_t>::max());
 1037|    154|                }
 1038|  2.85k|            }
 1039|       |
 1040|  2.85k|            return static_cast<std::ptrdiff_t>(std::strlen("nan()") +
 1041|  2.85k|                                               nan_payload.view().size());
 1042|       |        }
 1043|       |        else {
 1044|       |            return detail::unexpected_scan_error(
 1045|       |                scan_error::invalid_scanned_value,
 1046|       |                "Type doesn't support quiet NaNs");
 1047|       |        }
 1048|  2.85k|    }
 1049|       |
 1050|   630k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  945|   630k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   630k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1051|   594k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1051:9): [True: 126k, False: 468k]
  ------------------
 1052|   126k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  880|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 3.03k, False: 122k]
  |  |  ------------------
  ------------------
 1053|  3.03k|            return detail::unexpected_scan_error(
 1054|  3.03k|                scan_error::invalid_scanned_value,
 1055|  3.03k|                "Invalid floating-point digit");
 1056|  3.03k|        }
 1057|   126k|    }
 1058|   591k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  880|   591k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 8.26k, False: 583k]
  |  |  ------------------
  ------------------
 1059|  8.26k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1060|  8.26k|                                             "Invalid floating-point digit");
 1061|  8.26k|    }
 1062|       |
 1063|   583k|#if !SCN_DISABLE_FAST_FLOAT
 1064|       |    if constexpr (std::is_same_v<T, long double>) {
 1065|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1066|       |            // If double == long double (true on Windows),
 1067|       |            // use fast_float with double
 1068|       |            double tmp{};
 1069|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1070|       |            value = tmp;
 1071|       |            return ret;
 1072|       |        }
 1073|       |        else {
 1074|       |            // long doubles aren't supported by fast_float ->
 1075|       |            // fall back to from_chars or strtod
 1076|       |            return fast_float_fallback(data, value);
 1077|       |        }
 1078|       |    }
 1079|   583k|    else {
 1080|       |        // Default to fast_float
 1081|   583k|        return fast_float_impl<CharT, T>{data}(value);
 1082|   583k|    }
 1083|       |#else
 1084|       |    static_assert(SCN_HAS_FLOAT_CHARCONV,
 1085|       |                  "SCN_DISABLE_FAST_FLOAT needs std::from_chars for floats");
 1086|       |
 1087|       |    return fast_float_fallback(data, value);
 1088|       |#endif
 1089|   583k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117apply_nan_payloadIdEEvRT_m:
  971|  2.24k|{
  972|       |    if constexpr (!std::is_same_v<F, long double> ||
  973|       |                  !std::is_same_v<float_nan_traits_for_long_double,
  974|  2.24k|                                  nil_float_nan_traits>) {
  975|  2.24k|        using traits = float_nan_traits<F>;
  976|  2.24k|        typename traits::repr bits{};
  977|  2.24k|        std::memcpy(&bits, &value, sizeof(bits));
  978|  2.24k|        traits::apply(bits, payload);
  979|  2.24k|        std::memcpy(&value, &bits, sizeof(bits));
  980|  2.24k|    }
  981|  2.24k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116float_nan_traitsIdE5applyERNS4_4reprEm:
  856|  2.24k|    {
  857|  2.24k|        SCN_EXPECT(r.quiet_nan == 1);
  ------------------
  |  |  945|  2.24k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  2.24k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  858|  2.24k|        SCN_EXPECT(r.exponent == (1u << 11u) - 1u);
  ------------------
  |  |  945|  2.24k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  2.24k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  859|  2.24k|        r.mantissa0 = payload >> 32;
  860|  2.24k|        r.mantissa1 = payload;
  861|  2.24k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_115fast_float_implIcdEC2ENS2_14impl_init_dataIcEE:
  741|   583k|        : fast_float_impl_base{data.base()}, m_input(data.input)
  742|   583k|    {
  743|   583k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_115fast_float_implIcdEclERd:
  746|   583k|    {
  747|   583k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (747:13): [True: 122k, False: 460k]
  ------------------
  748|   583k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (748:13): [True: 26.4k, False: 433k]
  ------------------
  749|       |            // fast_float doesn't support hexfloats
  750|   149k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  751|   149k|                                              value);
  752|   149k|        }
  753|       |
  754|   433k|        const auto flags = get_flags();
  755|   433k|        const auto view = get_view();
  756|   433k|        const auto result = fast_float::from_chars(
  757|   433k|            view.data(), view.data() + view.size(), value, flags);
  758|       |
  759|   433k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  880|   433k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 433k]
  |  |  ------------------
  ------------------
  760|      0|            return detail::unexpected_scan_error(
  761|      0|                scan_error::invalid_scanned_value,
  762|      0|                "fast_float: invalid_argument");
  763|      0|        }
  764|   433k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  880|   433k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 2.38k, False: 431k]
  |  |  ------------------
  ------------------
  765|       |            // may just be very large: fall back
  766|  2.38k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  767|  2.38k|                                              value);
  768|  2.38k|        }
  769|       |
  770|   431k|        return result.ptr - view.data();
  771|   433k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_119fast_float_fallbackIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  701|   151k|{
  702|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  703|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  704|       |        return from_chars_impl<T>{data}(value);
  705|       |    }
  706|       |    else
  707|       |#endif
  708|   151k|    {
  709|   151k|#if !SCN_DISABLE_STRTOD
  710|   151k|        return strtod_impl<CharT, T>{data}(value);
  711|       |#else
  712|       |        return detail::unexpected_scan_error(
  713|       |            scan_error::invalid_scanned_value,
  714|       |            "fast_float failed, and fallbacks are disabled");
  715|       |#endif
  716|   151k|    }
  717|   151k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcdEC2ENS2_14impl_init_dataIcEE:
  551|   151k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  552|   151k|    {
  553|   151k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdEC2ENS2_9impl_baseE:
  382|   216k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcdEclERd:
  556|   151k|    {
  557|   151k|        return this->parse(value, this->get_null_terminated_source(m_input),
  558|   151k|                           generic_strtod);
  559|   151k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIcPFdPKcPPcEEENS0_13scan_expectedIlEERdPKT_T0_:
  388|   151k|    {
  389|   151k|        CharT* end{};
  390|   151k|        errno = 0;
  391|   151k|        value = strtod_cb(src, &end);
  392|   151k|        const auto saved_errno = errno;
  393|   151k|        auto chars_read = end - src;
  394|       |
  395|   151k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3930|   151k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  880|   151k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 2.79k, False: 148k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  2.79k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  2.79k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  2.79k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  2.79k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  2.79k|    }
  ------------------
  396|       |
  397|   148k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (397:13): [True: 122k, False: 26.4k]
  ------------------
  398|   148k|            chars_read >= 2) {
  ------------------
  |  Branch (398:13): [True: 122k, False: 0]
  ------------------
  399|   122k|            chars_read -= 2;
  400|   122k|        }
  401|       |
  402|   148k|        return chars_read;
  403|   151k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE11check_errorElid:
  431|   216k|    {
  432|   216k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (432:13): [True: 85.5k, False: 131k]
  |  Branch (432:37): [True: 0, False: 85.5k]
  ------------------
  433|      0|            SCN_UNLIKELY_ATTR
  434|      0|            return detail::unexpected_scan_error(
  435|      0|                scan_error::invalid_scanned_value,
  436|      0|                "strtod failed: No conversion");
  437|      0|        }
  438|       |
  439|   216k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (439:13): [True: 26.9k, False: 189k]
  ------------------
  440|   216k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (440:13): [True: 0, False: 26.9k]
  ------------------
  441|      0|            SCN_UNLIKELY_ATTR
  442|      0|            return detail::unexpected_scan_error(
  443|      0|                scan_error::invalid_scanned_value,
  444|      0|                "Hexfloats disallowed by format string");
  445|      0|        }
  446|       |
  447|   216k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (447:13): [True: 4.72k, False: 212k]
  |  Branch (447:34): [True: 515, False: 4.20k]
  ------------------
  448|    515|            SCN_UNLIKELY_ATTR
  449|    515|            return detail::unexpected_scan_error(
  450|    515|                scan_error::value_positive_underflow,
  451|    515|                "strtod failed: underflow");
  452|    515|        }
  453|       |
  454|   216k|        SCN_GCC_COMPAT_PUSH
  455|   216k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  456|       |
  457|   216k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (457:13): [True: 216k, False: 0]
  ------------------
  458|   216k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (458:13): [True: 216k, False: 0]
  ------------------
  459|   216k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (459:13): [True: 4.20k, False: 212k]
  ------------------
  460|  4.20k|            SCN_UNLIKELY_ATTR
  461|  4.20k|            return detail::unexpected_scan_error(
  462|  4.20k|                scan_error::value_positive_overflow, "strtod failed: overflow");
  463|  4.20k|        }
  464|       |
  465|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  466|       |
  467|   212k|            return {};
  468|   216k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113is_float_zeroEd:
  347|   221k|{
  348|   221k|    return d == 0.0 || d == -0.0;
  ------------------
  |  Branch (348:12): [True: 86.1k, False: 135k]
  |  Branch (348:24): [True: 0, False: 135k]
  ------------------
  349|   221k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  408|   151k|    {
  409|   151k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (409:13): [True: 148k, False: 3.08k]
  ------------------
  410|       |            // TODO: call float_reader::read_source?
  411|   148k|            auto first_space = read_until_classic_space(input.view());
  412|   148k|            input.assign(
  413|   148k|                std::basic_string<CharT>{input.view().begin(), first_space});
  414|   148k|        }
  415|       |
  416|   151k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (416:13): [True: 122k, False: 28.8k]
  ------------------
  417|   122k|            if constexpr (std::is_same_v<CharT, char>) {
  418|   122k|                input.get_allocated_string().insert(0, "0x");
  419|       |            }
  420|       |            else {
  421|       |                input.get_allocated_string().insert(0, L"0x");
  422|       |            }
  423|   122k|        }
  424|       |
  425|   151k|        return input.get_allocated_string().c_str();
  426|   151k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcdE14generic_strtodEPKcPPc:
  563|   151k|    {
  564|   151k|        if constexpr (std::is_same_v<CharT, char>) {
  565|   151k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  566|       |        }
  567|       |        else {
  568|       |            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  569|       |        }
  570|   151k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE21generic_narrow_strtodEPKcPPc:
  471|   151k|    {
  472|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  473|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  474|       |        if constexpr (std::is_same_v<T, float>) {
  475|       |            return ::strtof_l(str, str_end, cloc);
  476|       |        }
  477|       |        else if constexpr (std::is_same_v<T, double>) {
  478|       |            return ::strtod_l(str, str_end, cloc);
  479|       |        }
  480|       |        else if constexpr (std::is_same_v<T, long double>) {
  481|       |            return ::strtold_l(str, str_end, cloc);
  482|       |        }
  483|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  484|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  485|       |        if constexpr (std::is_same_v<T, float>) {
  486|       |            return ::_strtof_l(str, str_end, cloc);
  487|       |        }
  488|       |        else if constexpr (std::is_same_v<T, double>) {
  489|       |            return ::_strtod_l(str, str_end, cloc);
  490|       |        }
  491|       |        else if constexpr (std::is_same_v<T, long double>) {
  492|       |            return ::_strtold_l(str, str_end, cloc);
  493|       |        }
  494|       |#else
  495|   151k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  496|       |        if constexpr (std::is_same_v<T, float>) {
  497|       |            return std::strtof(str, str_end);
  498|       |        }
  499|   151k|        else if constexpr (std::is_same_v<T, double>) {
  500|   151k|            return std::strtod(str, str_end);
  501|       |        }
  502|       |        else if constexpr (std::is_same_v<T, long double>) {
  503|       |            return std::strtold(str, str_end);
  504|       |        }
  505|   151k|#endif
  506|   151k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_115fast_float_implIcdE8get_viewEv:
  775|   433k|    {
  776|   433k|        if constexpr (sizeof(CharT) == 1) {
  777|   433k|            return m_input.view();
  778|       |        }
  779|       |        else if constexpr (sizeof(CharT) == 2) {
  780|       |            return std::u16string_view{
  781|       |                reinterpret_cast<const char16_t*>(m_input.view().data()),
  782|       |                m_input.view().size()};
  783|       |        }
  784|       |        else {
  785|       |            return std::u32string_view{
  786|       |                reinterpret_cast<const char32_t*>(m_input.view().data()),
  787|       |                m_input.view().size()};
  788|       |        }
  789|   433k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  988|   335k|{
  989|   335k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (989:9): [True: 0, False: 335k]
  ------------------
  990|      0|        if constexpr (std::numeric_limits<T>::has_infinity) {
  991|      0|            value = std::numeric_limits<T>::infinity();
  992|      0|            return std::strlen("inf");
  993|       |        }
  994|       |        else {
  995|       |            return detail::unexpected_scan_error(
  996|       |                scan_error::invalid_scanned_value,
  997|       |                "Type doesn't support infinities");
  998|       |        }
  999|      0|    }
 1000|   335k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1000:9): [True: 0, False: 335k]
  ------------------
 1001|      0|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1002|      0|            value = std::numeric_limits<T>::infinity();
 1003|      0|            return std::strlen("infinity");
 1004|       |        }
 1005|       |        else {
 1006|       |            return detail::unexpected_scan_error(
 1007|       |                scan_error::invalid_scanned_value,
 1008|       |                "Type doesn't support infinities");
 1009|       |        }
 1010|      0|    }
 1011|   335k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1011:9): [True: 0, False: 335k]
  ------------------
 1012|      0|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1013|      0|            value = std::numeric_limits<T>::quiet_NaN();
 1014|      0|            return std::strlen("nan");
 1015|       |        }
 1016|       |        else {
 1017|       |            return detail::unexpected_scan_error(
 1018|       |                scan_error::invalid_scanned_value,
 1019|       |                "Type doesn't support quiet NaNs");
 1020|       |        }
 1021|      0|    }
 1022|   335k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1022:9): [True: 0, False: 335k]
  ------------------
 1023|      0|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1024|      0|            value = std::numeric_limits<T>::quiet_NaN();
 1025|       |
 1026|      0|            if constexpr (std::numeric_limits<T>::is_iec559) {
 1027|       |                // TODO: 128-bit payloads
 1028|      0|                std::uint64_t payload{};
 1029|      0|                if (auto result = reader_impl_for_int<CharT>{}.read_default(
  ------------------
  |  Branch (1029:26): [True: 0, False: 0]
  ------------------
 1030|      0|                        nan_payload.view(), payload, {})) {
 1031|      0|                    apply_nan_payload(value, payload);
 1032|      0|                }
 1033|      0|                else if (result.error().code() ==
  ------------------
  |  Branch (1033:26): [True: 0, False: 0]
  ------------------
 1034|      0|                         scan_error::value_positive_overflow) {
 1035|      0|                    apply_nan_payload(
 1036|      0|                        value, std::numeric_limits<std::uint64_t>::max());
 1037|      0|                }
 1038|      0|            }
 1039|       |
 1040|      0|            return static_cast<std::ptrdiff_t>(std::strlen("nan()") +
 1041|      0|                                               nan_payload.view().size());
 1042|       |        }
 1043|       |        else {
 1044|       |            return detail::unexpected_scan_error(
 1045|       |                scan_error::invalid_scanned_value,
 1046|       |                "Type doesn't support quiet NaNs");
 1047|       |        }
 1048|      0|    }
 1049|       |
 1050|   335k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  945|   335k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   335k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1051|   335k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1051:9): [True: 71.6k, False: 264k]
  ------------------
 1052|  71.6k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  880|  71.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 8.96k, False: 62.7k]
  |  |  ------------------
  ------------------
 1053|  8.96k|            return detail::unexpected_scan_error(
 1054|  8.96k|                scan_error::invalid_scanned_value,
 1055|  8.96k|                "Invalid floating-point digit");
 1056|  8.96k|        }
 1057|  71.6k|    }
 1058|   326k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  880|   326k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 22.2k, False: 304k]
  |  |  ------------------
  ------------------
 1059|  22.2k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1060|  22.2k|                                             "Invalid floating-point digit");
 1061|  22.2k|    }
 1062|       |
 1063|   304k|#if !SCN_DISABLE_FAST_FLOAT
 1064|       |    if constexpr (std::is_same_v<T, long double>) {
 1065|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1066|       |            // If double == long double (true on Windows),
 1067|       |            // use fast_float with double
 1068|       |            double tmp{};
 1069|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1070|       |            value = tmp;
 1071|       |            return ret;
 1072|       |        }
 1073|       |        else {
 1074|       |            // long doubles aren't supported by fast_float ->
 1075|       |            // fall back to from_chars or strtod
 1076|       |            return fast_float_fallback(data, value);
 1077|       |        }
 1078|       |    }
 1079|   304k|    else {
 1080|       |        // Default to fast_float
 1081|   304k|        return fast_float_impl<CharT, T>{data}(value);
 1082|   304k|    }
 1083|       |#else
 1084|       |    static_assert(SCN_HAS_FLOAT_CHARCONV,
 1085|       |                  "SCN_DISABLE_FAST_FLOAT needs std::from_chars for floats");
 1086|       |
 1087|       |    return fast_float_fallback(data, value);
 1088|       |#endif
 1089|   304k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_115fast_float_implIwdEC2ENS2_14impl_init_dataIwEE:
  741|   304k|        : fast_float_impl_base{data.base()}, m_input(data.input)
  742|   304k|    {
  743|   304k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_115fast_float_implIwdEclERd:
  746|   304k|    {
  747|   304k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (747:13): [True: 62.6k, False: 241k]
  ------------------
  748|   304k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (748:13): [True: 482, False: 241k]
  ------------------
  749|       |            // fast_float doesn't support hexfloats
  750|  63.1k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  751|  63.1k|                                              value);
  752|  63.1k|        }
  753|       |
  754|   241k|        const auto flags = get_flags();
  755|   241k|        const auto view = get_view();
  756|   241k|        const auto result = fast_float::from_chars(
  757|   241k|            view.data(), view.data() + view.size(), value, flags);
  758|       |
  759|   241k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  880|   241k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 241k]
  |  |  ------------------
  ------------------
  760|      0|            return detail::unexpected_scan_error(
  761|      0|                scan_error::invalid_scanned_value,
  762|      0|                "fast_float: invalid_argument");
  763|      0|        }
  764|   241k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  880|   241k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 1.83k, False: 239k]
  |  |  ------------------
  ------------------
  765|       |            // may just be very large: fall back
  766|  1.83k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  767|  1.83k|                                              value);
  768|  1.83k|        }
  769|       |
  770|   239k|        return result.ptr - view.data();
  771|   241k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_119fast_float_fallbackIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  701|  64.9k|{
  702|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  703|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  704|       |        return from_chars_impl<T>{data}(value);
  705|       |    }
  706|       |    else
  707|       |#endif
  708|  64.9k|    {
  709|  64.9k|#if !SCN_DISABLE_STRTOD
  710|  64.9k|        return strtod_impl<CharT, T>{data}(value);
  711|       |#else
  712|       |        return detail::unexpected_scan_error(
  713|       |            scan_error::invalid_scanned_value,
  714|       |            "fast_float failed, and fallbacks are disabled");
  715|       |#endif
  716|  64.9k|    }
  717|  64.9k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwdEC2ENS2_14impl_init_dataIwEE:
  551|  64.9k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  552|  64.9k|    {
  553|  64.9k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwdEclERd:
  556|  64.9k|    {
  557|  64.9k|        return this->parse(value, this->get_null_terminated_source(m_input),
  558|  64.9k|                           generic_strtod);
  559|  64.9k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIwPFdPKwPPwEEENS0_13scan_expectedIlEERdPKT_T0_:
  388|  64.9k|    {
  389|  64.9k|        CharT* end{};
  390|  64.9k|        errno = 0;
  391|  64.9k|        value = strtod_cb(src, &end);
  392|  64.9k|        const auto saved_errno = errno;
  393|  64.9k|        auto chars_read = end - src;
  394|       |
  395|  64.9k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3930|  64.9k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  880|  64.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 1.92k, False: 63.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  1.92k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  1.92k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.92k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.92k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  1.92k|    }
  ------------------
  396|       |
  397|  63.0k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (397:13): [True: 62.5k, False: 482]
  ------------------
  398|  63.0k|            chars_read >= 2) {
  ------------------
  |  Branch (398:13): [True: 62.5k, False: 0]
  ------------------
  399|  62.5k|            chars_read -= 2;
  400|  62.5k|        }
  401|       |
  402|  63.0k|        return chars_read;
  403|  64.9k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  408|  64.9k|    {
  409|  64.9k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (409:13): [True: 63.4k, False: 1.49k]
  ------------------
  410|       |            // TODO: call float_reader::read_source?
  411|  63.4k|            auto first_space = read_until_classic_space(input.view());
  412|  63.4k|            input.assign(
  413|  63.4k|                std::basic_string<CharT>{input.view().begin(), first_space});
  414|  63.4k|        }
  415|       |
  416|  64.9k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (416:13): [True: 62.6k, False: 2.31k]
  ------------------
  417|       |            if constexpr (std::is_same_v<CharT, char>) {
  418|       |                input.get_allocated_string().insert(0, "0x");
  419|       |            }
  420|  62.6k|            else {
  421|  62.6k|                input.get_allocated_string().insert(0, L"0x");
  422|  62.6k|            }
  423|  62.6k|        }
  424|       |
  425|  64.9k|        return input.get_allocated_string().c_str();
  426|  64.9k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwdE14generic_strtodEPKwPPw:
  563|  64.9k|    {
  564|       |        if constexpr (std::is_same_v<CharT, char>) {
  565|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  566|       |        }
  567|  64.9k|        else {
  568|  64.9k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  569|  64.9k|        }
  570|  64.9k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE19generic_wide_strtodEPKwPPw:
  509|  64.9k|    {
  510|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  511|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  512|       |        if constexpr (std::is_same_v<T, float>) {
  513|       |            return ::wcstof_l(str, str_end, cloc);
  514|       |        }
  515|       |        else if constexpr (std::is_same_v<T, double>) {
  516|       |            return ::wcstod_l(str, str_end, cloc);
  517|       |        }
  518|       |        else if constexpr (std::is_same_v<T, long double>) {
  519|       |            return ::wcstold_l(str, str_end, cloc);
  520|       |        }
  521|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  522|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  523|       |        if constexpr (std::is_same_v<T, float>) {
  524|       |            return ::_wcstof_l(str, str_end, cloc);
  525|       |        }
  526|       |        else if constexpr (std::is_same_v<T, double>) {
  527|       |            return ::_wcstod_l(str, str_end, cloc);
  528|       |        }
  529|       |        else if constexpr (std::is_same_v<T, long double>) {
  530|       |            return ::_wcstold_l(str, str_end, cloc);
  531|       |        }
  532|       |#else
  533|  64.9k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  534|       |        if constexpr (std::is_same_v<T, float>) {
  535|       |            return std::wcstof(str, str_end);
  536|       |        }
  537|  64.9k|        else if constexpr (std::is_same_v<T, double>) {
  538|  64.9k|            return std::wcstod(str, str_end);
  539|       |        }
  540|       |        else if constexpr (std::is_same_v<T, long double>) {
  541|       |            return std::wcstold(str, str_end);
  542|       |        }
  543|  64.9k|#endif
  544|  64.9k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_115fast_float_implIwdE8get_viewEv:
  775|   241k|    {
  776|       |        if constexpr (sizeof(CharT) == 1) {
  777|       |            return m_input.view();
  778|       |        }
  779|       |        else if constexpr (sizeof(CharT) == 2) {
  780|       |            return std::u16string_view{
  781|       |                reinterpret_cast<const char16_t*>(m_input.view().data()),
  782|       |                m_input.view().size()};
  783|       |        }
  784|   241k|        else {
  785|   241k|            return std::u32string_view{
  786|   241k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
  787|   241k|                m_input.view().size()};
  788|   241k|        }
  789|   241k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113dispatch_implIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  988|   637k|{
  989|   637k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (989:9): [True: 3.83k, False: 633k]
  ------------------
  990|  3.83k|        if constexpr (std::numeric_limits<T>::has_infinity) {
  991|  3.83k|            value = std::numeric_limits<T>::infinity();
  992|  3.83k|            return std::strlen("inf");
  993|       |        }
  994|       |        else {
  995|       |            return detail::unexpected_scan_error(
  996|       |                scan_error::invalid_scanned_value,
  997|       |                "Type doesn't support infinities");
  998|       |        }
  999|  3.83k|    }
 1000|   637k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1000:9): [True: 3.21k, False: 634k]
  ------------------
 1001|  3.21k|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1002|  3.21k|            value = std::numeric_limits<T>::infinity();
 1003|  3.21k|            return std::strlen("infinity");
 1004|       |        }
 1005|       |        else {
 1006|       |            return detail::unexpected_scan_error(
 1007|       |                scan_error::invalid_scanned_value,
 1008|       |                "Type doesn't support infinities");
 1009|       |        }
 1010|  3.21k|    }
 1011|   637k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1011:9): [True: 26.3k, False: 611k]
  ------------------
 1012|  26.3k|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1013|  26.3k|            value = std::numeric_limits<T>::quiet_NaN();
 1014|  26.3k|            return std::strlen("nan");
 1015|       |        }
 1016|       |        else {
 1017|       |            return detail::unexpected_scan_error(
 1018|       |                scan_error::invalid_scanned_value,
 1019|       |                "Type doesn't support quiet NaNs");
 1020|       |        }
 1021|  26.3k|    }
 1022|   637k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1022:9): [True: 2.88k, False: 634k]
  ------------------
 1023|  2.88k|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1024|  2.88k|            value = std::numeric_limits<T>::quiet_NaN();
 1025|       |
 1026|  2.88k|            if constexpr (std::numeric_limits<T>::is_iec559) {
 1027|       |                // TODO: 128-bit payloads
 1028|  2.88k|                std::uint64_t payload{};
 1029|  2.88k|                if (auto result = reader_impl_for_int<CharT>{}.read_default(
  ------------------
  |  Branch (1029:26): [True: 2.08k, False: 800]
  ------------------
 1030|  2.88k|                        nan_payload.view(), payload, {})) {
 1031|  2.08k|                    apply_nan_payload(value, payload);
 1032|  2.08k|                }
 1033|    800|                else if (result.error().code() ==
  ------------------
  |  Branch (1033:26): [True: 154, False: 646]
  ------------------
 1034|    800|                         scan_error::value_positive_overflow) {
 1035|    154|                    apply_nan_payload(
 1036|    154|                        value, std::numeric_limits<std::uint64_t>::max());
 1037|    154|                }
 1038|  2.88k|            }
 1039|       |
 1040|  2.88k|            return static_cast<std::ptrdiff_t>(std::strlen("nan()") +
 1041|  2.88k|                                               nan_payload.view().size());
 1042|       |        }
 1043|       |        else {
 1044|       |            return detail::unexpected_scan_error(
 1045|       |                scan_error::invalid_scanned_value,
 1046|       |                "Type doesn't support quiet NaNs");
 1047|       |        }
 1048|  2.88k|    }
 1049|       |
 1050|   637k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  945|   637k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   637k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1051|   601k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1051:9): [True: 126k, False: 475k]
  ------------------
 1052|   126k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  880|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 3.11k, False: 123k]
  |  |  ------------------
  ------------------
 1053|  3.11k|            return detail::unexpected_scan_error(
 1054|  3.11k|                scan_error::invalid_scanned_value,
 1055|  3.11k|                "Invalid floating-point digit");
 1056|  3.11k|        }
 1057|   126k|    }
 1058|   598k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  880|   598k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 8.55k, False: 589k]
  |  |  ------------------
  ------------------
 1059|  8.55k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1060|  8.55k|                                             "Invalid floating-point digit");
 1061|  8.55k|    }
 1062|       |
 1063|   589k|#if !SCN_DISABLE_FAST_FLOAT
 1064|   589k|    if constexpr (std::is_same_v<T, long double>) {
 1065|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1066|       |            // If double == long double (true on Windows),
 1067|       |            // use fast_float with double
 1068|       |            double tmp{};
 1069|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1070|       |            value = tmp;
 1071|       |            return ret;
 1072|       |        }
 1073|   589k|        else {
 1074|       |            // long doubles aren't supported by fast_float ->
 1075|       |            // fall back to from_chars or strtod
 1076|   589k|            return fast_float_fallback(data, value);
 1077|   589k|        }
 1078|       |    }
 1079|       |    else {
 1080|       |        // Default to fast_float
 1081|       |        return fast_float_impl<CharT, T>{data}(value);
 1082|       |    }
 1083|       |#else
 1084|       |    static_assert(SCN_HAS_FLOAT_CHARCONV,
 1085|       |                  "SCN_DISABLE_FAST_FLOAT needs std::from_chars for floats");
 1086|       |
 1087|       |    return fast_float_fallback(data, value);
 1088|       |#endif
 1089|   589k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117apply_nan_payloadIeEEvRT_m:
  971|  2.24k|{
  972|       |    if constexpr (!std::is_same_v<F, long double> ||
  973|       |                  !std::is_same_v<float_nan_traits_for_long_double,
  974|  2.24k|                                  nil_float_nan_traits>) {
  975|  2.24k|        using traits = float_nan_traits<F>;
  976|  2.24k|        typename traits::repr bits{};
  977|  2.24k|        std::memcpy(&bits, &value, sizeof(bits));
  978|  2.24k|        traits::apply(bits, payload);
  979|  2.24k|        std::memcpy(&value, &bits, sizeof(bits));
  980|  2.24k|    }
  981|  2.24k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_120float_nan_traits_x875applyERNS3_4reprEm:
  896|  2.24k|    {
  897|  2.24k|        SCN_EXPECT(r.quiet_nan == 1);
  ------------------
  |  |  945|  2.24k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  2.24k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  898|  2.24k|        SCN_EXPECT(r.exponent == (1u << 15u) - 1u);
  ------------------
  |  |  945|  2.24k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  2.24k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  899|  2.24k|        r.mantissa0 = payload >> 32;
  900|  2.24k|        r.mantissa1 = payload;
  901|  2.24k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_119fast_float_fallbackIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  701|   589k|{
  702|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  703|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  704|       |        return from_chars_impl<T>{data}(value);
  705|       |    }
  706|       |    else
  707|       |#endif
  708|   589k|    {
  709|   589k|#if !SCN_DISABLE_STRTOD
  710|   589k|        return strtod_impl<CharT, T>{data}(value);
  711|       |#else
  712|       |        return detail::unexpected_scan_error(
  713|       |            scan_error::invalid_scanned_value,
  714|       |            "fast_float failed, and fallbacks are disabled");
  715|       |#endif
  716|   589k|    }
  717|   589k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIceEC2ENS2_14impl_init_dataIcEE:
  551|   589k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  552|   589k|    {
  553|   589k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeEC2ENS2_9impl_baseE:
  382|   901k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIceEclERe:
  556|   589k|    {
  557|   589k|        return this->parse(value, this->get_null_terminated_source(m_input),
  558|   589k|                           generic_strtod);
  559|   589k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIcPFePKcPPcEEENS0_13scan_expectedIlEERePKT_T0_:
  388|   589k|    {
  389|   589k|        CharT* end{};
  390|   589k|        errno = 0;
  391|   589k|        value = strtod_cb(src, &end);
  392|   589k|        const auto saved_errno = errno;
  393|   589k|        auto chars_read = end - src;
  394|       |
  395|   589k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3930|   589k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  880|   589k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 695, False: 589k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    695|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|    695|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    695|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    695|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|    695|    }
  ------------------
  396|       |
  397|   589k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (397:13): [True: 123k, False: 465k]
  ------------------
  398|   589k|            chars_read >= 2) {
  ------------------
  |  Branch (398:13): [True: 123k, False: 0]
  ------------------
  399|   123k|            chars_read -= 2;
  400|   123k|        }
  401|       |
  402|   589k|        return chars_read;
  403|   589k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE11check_errorElie:
  431|   901k|    {
  432|   901k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (432:13): [True: 405k, False: 496k]
  |  Branch (432:37): [True: 0, False: 405k]
  ------------------
  433|      0|            SCN_UNLIKELY_ATTR
  434|      0|            return detail::unexpected_scan_error(
  435|      0|                scan_error::invalid_scanned_value,
  436|      0|                "strtod failed: No conversion");
  437|      0|        }
  438|       |
  439|   901k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (439:13): [True: 27.0k, False: 874k]
  ------------------
  440|   901k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (440:13): [True: 0, False: 27.0k]
  ------------------
  441|      0|            SCN_UNLIKELY_ATTR
  442|      0|            return detail::unexpected_scan_error(
  443|      0|                scan_error::invalid_scanned_value,
  444|      0|                "Hexfloats disallowed by format string");
  445|      0|        }
  446|       |
  447|   901k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (447:13): [True: 923, False: 900k]
  |  Branch (447:34): [True: 182, False: 741]
  ------------------
  448|    182|            SCN_UNLIKELY_ATTR
  449|    182|            return detail::unexpected_scan_error(
  450|    182|                scan_error::value_positive_underflow,
  451|    182|                "strtod failed: underflow");
  452|    182|        }
  453|       |
  454|   901k|        SCN_GCC_COMPAT_PUSH
  455|   901k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  456|       |
  457|   901k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (457:13): [True: 901k, False: 0]
  ------------------
  458|   901k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (458:13): [True: 901k, False: 0]
  ------------------
  459|   901k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (459:13): [True: 741, False: 900k]
  ------------------
  460|    741|            SCN_UNLIKELY_ATTR
  461|    741|            return detail::unexpected_scan_error(
  462|    741|                scan_error::value_positive_overflow, "strtod failed: overflow");
  463|    741|        }
  464|       |
  465|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  466|       |
  467|   900k|            return {};
  468|   901k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113is_float_zeroEe:
  351|   902k|{
  352|   902k|    return ld == 0.0L || ld == -0.0L;
  ------------------
  |  Branch (352:12): [True: 405k, False: 497k]
  |  Branch (352:26): [True: 0, False: 497k]
  ------------------
  353|   902k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  408|   589k|    {
  409|   589k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (409:13): [True: 543k, False: 46.7k]
  ------------------
  410|       |            // TODO: call float_reader::read_source?
  411|   543k|            auto first_space = read_until_classic_space(input.view());
  412|   543k|            input.assign(
  413|   543k|                std::basic_string<CharT>{input.view().begin(), first_space});
  414|   543k|        }
  415|       |
  416|   589k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (416:13): [True: 123k, False: 466k]
  ------------------
  417|   123k|            if constexpr (std::is_same_v<CharT, char>) {
  418|   123k|                input.get_allocated_string().insert(0, "0x");
  419|       |            }
  420|       |            else {
  421|       |                input.get_allocated_string().insert(0, L"0x");
  422|       |            }
  423|   123k|        }
  424|       |
  425|   589k|        return input.get_allocated_string().c_str();
  426|   589k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIceE14generic_strtodEPKcPPc:
  563|   589k|    {
  564|   589k|        if constexpr (std::is_same_v<CharT, char>) {
  565|   589k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  566|       |        }
  567|       |        else {
  568|       |            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  569|       |        }
  570|   589k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE21generic_narrow_strtodEPKcPPc:
  471|   589k|    {
  472|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  473|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  474|       |        if constexpr (std::is_same_v<T, float>) {
  475|       |            return ::strtof_l(str, str_end, cloc);
  476|       |        }
  477|       |        else if constexpr (std::is_same_v<T, double>) {
  478|       |            return ::strtod_l(str, str_end, cloc);
  479|       |        }
  480|       |        else if constexpr (std::is_same_v<T, long double>) {
  481|       |            return ::strtold_l(str, str_end, cloc);
  482|       |        }
  483|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  484|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  485|       |        if constexpr (std::is_same_v<T, float>) {
  486|       |            return ::_strtof_l(str, str_end, cloc);
  487|       |        }
  488|       |        else if constexpr (std::is_same_v<T, double>) {
  489|       |            return ::_strtod_l(str, str_end, cloc);
  490|       |        }
  491|       |        else if constexpr (std::is_same_v<T, long double>) {
  492|       |            return ::_strtold_l(str, str_end, cloc);
  493|       |        }
  494|       |#else
  495|   589k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  496|       |        if constexpr (std::is_same_v<T, float>) {
  497|       |            return std::strtof(str, str_end);
  498|       |        }
  499|       |        else if constexpr (std::is_same_v<T, double>) {
  500|       |            return std::strtod(str, str_end);
  501|       |        }
  502|   589k|        else if constexpr (std::is_same_v<T, long double>) {
  503|   589k|            return std::strtold(str, str_end);
  504|   589k|        }
  505|   589k|#endif
  506|   589k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113dispatch_implIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  988|   343k|{
  989|   343k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (989:9): [True: 0, False: 343k]
  ------------------
  990|      0|        if constexpr (std::numeric_limits<T>::has_infinity) {
  991|      0|            value = std::numeric_limits<T>::infinity();
  992|      0|            return std::strlen("inf");
  993|       |        }
  994|       |        else {
  995|       |            return detail::unexpected_scan_error(
  996|       |                scan_error::invalid_scanned_value,
  997|       |                "Type doesn't support infinities");
  998|       |        }
  999|      0|    }
 1000|   343k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1000:9): [True: 0, False: 343k]
  ------------------
 1001|      0|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1002|      0|            value = std::numeric_limits<T>::infinity();
 1003|      0|            return std::strlen("infinity");
 1004|       |        }
 1005|       |        else {
 1006|       |            return detail::unexpected_scan_error(
 1007|       |                scan_error::invalid_scanned_value,
 1008|       |                "Type doesn't support infinities");
 1009|       |        }
 1010|      0|    }
 1011|   343k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1011:9): [True: 0, False: 343k]
  ------------------
 1012|      0|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1013|      0|            value = std::numeric_limits<T>::quiet_NaN();
 1014|      0|            return std::strlen("nan");
 1015|       |        }
 1016|       |        else {
 1017|       |            return detail::unexpected_scan_error(
 1018|       |                scan_error::invalid_scanned_value,
 1019|       |                "Type doesn't support quiet NaNs");
 1020|       |        }
 1021|      0|    }
 1022|   343k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1022:9): [True: 0, False: 343k]
  ------------------
 1023|      0|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1024|      0|            value = std::numeric_limits<T>::quiet_NaN();
 1025|       |
 1026|      0|            if constexpr (std::numeric_limits<T>::is_iec559) {
 1027|       |                // TODO: 128-bit payloads
 1028|      0|                std::uint64_t payload{};
 1029|      0|                if (auto result = reader_impl_for_int<CharT>{}.read_default(
  ------------------
  |  Branch (1029:26): [True: 0, False: 0]
  ------------------
 1030|      0|                        nan_payload.view(), payload, {})) {
 1031|      0|                    apply_nan_payload(value, payload);
 1032|      0|                }
 1033|      0|                else if (result.error().code() ==
  ------------------
  |  Branch (1033:26): [True: 0, False: 0]
  ------------------
 1034|      0|                         scan_error::value_positive_overflow) {
 1035|      0|                    apply_nan_payload(
 1036|      0|                        value, std::numeric_limits<std::uint64_t>::max());
 1037|      0|                }
 1038|      0|            }
 1039|       |
 1040|      0|            return static_cast<std::ptrdiff_t>(std::strlen("nan()") +
 1041|      0|                                               nan_payload.view().size());
 1042|       |        }
 1043|       |        else {
 1044|       |            return detail::unexpected_scan_error(
 1045|       |                scan_error::invalid_scanned_value,
 1046|       |                "Type doesn't support quiet NaNs");
 1047|       |        }
 1048|      0|    }
 1049|       |
 1050|   343k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  945|   343k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   343k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1051|   343k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1051:9): [True: 71.7k, False: 271k]
  ------------------
 1052|  71.7k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  880|  71.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 8.98k, False: 62.7k]
  |  |  ------------------
  ------------------
 1053|  8.98k|            return detail::unexpected_scan_error(
 1054|  8.98k|                scan_error::invalid_scanned_value,
 1055|  8.98k|                "Invalid floating-point digit");
 1056|  8.98k|        }
 1057|  71.7k|    }
 1058|   334k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  880|   334k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 22.7k, False: 311k]
  |  |  ------------------
  ------------------
 1059|  22.7k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1060|  22.7k|                                             "Invalid floating-point digit");
 1061|  22.7k|    }
 1062|       |
 1063|   311k|#if !SCN_DISABLE_FAST_FLOAT
 1064|   311k|    if constexpr (std::is_same_v<T, long double>) {
 1065|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1066|       |            // If double == long double (true on Windows),
 1067|       |            // use fast_float with double
 1068|       |            double tmp{};
 1069|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1070|       |            value = tmp;
 1071|       |            return ret;
 1072|       |        }
 1073|   311k|        else {
 1074|       |            // long doubles aren't supported by fast_float ->
 1075|       |            // fall back to from_chars or strtod
 1076|   311k|            return fast_float_fallback(data, value);
 1077|   311k|        }
 1078|       |    }
 1079|       |    else {
 1080|       |        // Default to fast_float
 1081|       |        return fast_float_impl<CharT, T>{data}(value);
 1082|       |    }
 1083|       |#else
 1084|       |    static_assert(SCN_HAS_FLOAT_CHARCONV,
 1085|       |                  "SCN_DISABLE_FAST_FLOAT needs std::from_chars for floats");
 1086|       |
 1087|       |    return fast_float_fallback(data, value);
 1088|       |#endif
 1089|   311k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_119fast_float_fallbackIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  701|   311k|{
  702|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  703|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  704|       |        return from_chars_impl<T>{data}(value);
  705|       |    }
  706|       |    else
  707|       |#endif
  708|   311k|    {
  709|   311k|#if !SCN_DISABLE_STRTOD
  710|   311k|        return strtod_impl<CharT, T>{data}(value);
  711|       |#else
  712|       |        return detail::unexpected_scan_error(
  713|       |            scan_error::invalid_scanned_value,
  714|       |            "fast_float failed, and fallbacks are disabled");
  715|       |#endif
  716|   311k|    }
  717|   311k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIweEC2ENS2_14impl_init_dataIwEE:
  551|   311k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  552|   311k|    {
  553|   311k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIweEclERe:
  556|   311k|    {
  557|   311k|        return this->parse(value, this->get_null_terminated_source(m_input),
  558|   311k|                           generic_strtod);
  559|   311k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIwPFePKwPPwEEENS0_13scan_expectedIlEERePKT_T0_:
  388|   311k|    {
  389|   311k|        CharT* end{};
  390|   311k|        errno = 0;
  391|   311k|        value = strtod_cb(src, &end);
  392|   311k|        const auto saved_errno = errno;
  393|   311k|        auto chars_read = end - src;
  394|       |
  395|   311k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3930|   311k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  880|   311k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 228, False: 311k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    228|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|    228|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    228|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    228|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|    228|    }
  ------------------
  396|       |
  397|   311k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (397:13): [True: 62.6k, False: 248k]
  ------------------
  398|   311k|            chars_read >= 2) {
  ------------------
  |  Branch (398:13): [True: 62.6k, False: 0]
  ------------------
  399|  62.6k|            chars_read -= 2;
  400|  62.6k|        }
  401|       |
  402|   311k|        return chars_read;
  403|   311k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  408|   311k|    {
  409|   311k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (409:13): [True: 304k, False: 6.97k]
  ------------------
  410|       |            // TODO: call float_reader::read_source?
  411|   304k|            auto first_space = read_until_classic_space(input.view());
  412|   304k|            input.assign(
  413|   304k|                std::basic_string<CharT>{input.view().begin(), first_space});
  414|   304k|        }
  415|       |
  416|   311k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (416:13): [True: 62.6k, False: 249k]
  ------------------
  417|       |            if constexpr (std::is_same_v<CharT, char>) {
  418|       |                input.get_allocated_string().insert(0, "0x");
  419|       |            }
  420|  62.6k|            else {
  421|  62.6k|                input.get_allocated_string().insert(0, L"0x");
  422|  62.6k|            }
  423|  62.6k|        }
  424|       |
  425|   311k|        return input.get_allocated_string().c_str();
  426|   311k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIweE14generic_strtodEPKwPPw:
  563|   311k|    {
  564|       |        if constexpr (std::is_same_v<CharT, char>) {
  565|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  566|       |        }
  567|   311k|        else {
  568|   311k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  569|   311k|        }
  570|   311k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE19generic_wide_strtodEPKwPPw:
  509|   311k|    {
  510|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  511|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  512|       |        if constexpr (std::is_same_v<T, float>) {
  513|       |            return ::wcstof_l(str, str_end, cloc);
  514|       |        }
  515|       |        else if constexpr (std::is_same_v<T, double>) {
  516|       |            return ::wcstod_l(str, str_end, cloc);
  517|       |        }
  518|       |        else if constexpr (std::is_same_v<T, long double>) {
  519|       |            return ::wcstold_l(str, str_end, cloc);
  520|       |        }
  521|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  522|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  523|       |        if constexpr (std::is_same_v<T, float>) {
  524|       |            return ::_wcstof_l(str, str_end, cloc);
  525|       |        }
  526|       |        else if constexpr (std::is_same_v<T, double>) {
  527|       |            return ::_wcstod_l(str, str_end, cloc);
  528|       |        }
  529|       |        else if constexpr (std::is_same_v<T, long double>) {
  530|       |            return ::_wcstold_l(str, str_end, cloc);
  531|       |        }
  532|       |#else
  533|   311k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  534|       |        if constexpr (std::is_same_v<T, float>) {
  535|       |            return std::wcstof(str, str_end);
  536|       |        }
  537|       |        else if constexpr (std::is_same_v<T, double>) {
  538|       |            return std::wcstod(str, str_end);
  539|       |        }
  540|   311k|        else if constexpr (std::is_same_v<T, long double>) {
  541|   311k|            return std::wcstold(str, str_end);
  542|   311k|        }
  543|   311k|#endif
  544|   311k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_131parse_decimal_integer_fast_implEPKcS4_Rm:
 1183|  6.22k|{
 1184|  6.22k|    loop_parse_if_eight_decimal_digits(begin, end, val);
 1185|       |
 1186|  22.4k|    while (begin != end) {
  ------------------
  |  Branch (1186:12): [True: 16.3k, False: 6.03k]
  ------------------
 1187|  16.3k|        const auto digit = char_to_int(*begin);
 1188|  16.3k|        if (digit >= 10) {
  ------------------
  |  Branch (1188:13): [True: 198, False: 16.1k]
  ------------------
 1189|    198|            break;
 1190|    198|        }
 1191|  16.1k|        val = 10ull * val + static_cast<uint64_t>(digit);
 1192|  16.1k|        ++begin;
 1193|  16.1k|    }
 1194|       |
 1195|  6.22k|    return begin;
 1196|  6.22k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_134loop_parse_if_eight_decimal_digitsERPKcS4_Rm:
 1170|  6.22k|{
 1171|  6.22k|    while (
 1172|  9.99k|        std::distance(p, end) >= 8 &&
  ------------------
  |  Branch (1172:9): [True: 3.82k, False: 6.16k]
  ------------------
 1173|  9.99k|        is_word_made_of_eight_decimal_digits_fast(get_eight_digits_word(p))) {
  ------------------
  |  Branch (1173:9): [True: 3.76k, False: 66]
  ------------------
 1174|  3.76k|        val = val * 100'000'000 + parse_eight_decimal_digits_unrolled_fast(
 1175|  3.76k|                                      get_eight_digits_word(p));
 1176|  3.76k|        p += 8;
 1177|  3.76k|    }
 1178|  6.22k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126parse_decimal_integer_fastImEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1295|  6.22k|{
 1296|  6.22k|    uint64_t u64val{};
 1297|  6.22k|    auto ptr = parse_decimal_integer_fast_impl(
 1298|  6.22k|        input.data(), input.data() + input.size(), u64val);
 1299|       |
 1300|  6.22k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1301|  6.22k|    if (SCN_UNLIKELY(
  ------------------
  |  |  880|  6.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 462, False: 5.76k]
  |  |  ------------------
  ------------------
 1302|  6.22k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1303|    462|        return detail::unexpected_scan_error(
 1304|    462|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1304:13): [True: 0, False: 462]
  ------------------
 1305|    462|                        : scan_error::value_positive_overflow,
 1306|    462|            "Integer overflow");
 1307|    462|    }
 1308|       |
 1309|  5.76k|    val = store_result<T>(u64val, is_negative);
 1310|  5.76k|    return ptr;
 1311|  6.22k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 1969|   976k|{
 1970|   976k|    const auto argcount = args.size();
 1971|   976k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1971:9): [True: 201k, False: 775k]
  |  Branch (1971:60): [True: 201k, False: 0]
  ------------------
 1972|   201k|        auto arg = args.get(0);
 1973|   201k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  949|   201k|    static_cast<    \
  |  |  950|   201k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1974|   201k|    }
 1975|       |
 1976|   775k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (1976:9): [True: 0, False: 775k]
  ------------------
 1977|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 1978|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  949|      0|    static_cast<    \
  |  |  950|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1979|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  949|      0|    static_cast<    \
  |  |  950|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1980|      0|        return vscan_parse_format_string(format, handler);
 1981|      0|    }
 1982|       |
 1983|   775k|    SCN_UNLIKELY_ATTR
 1984|   775k|    {
 1985|   775k|        auto handler = format_handler<false, CharT>{
 1986|   775k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  949|   775k|    static_cast<    \
  |  |  950|   775k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  949|   775k|    static_cast<    \
  |  |  950|   775k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1987|   775k|        return vscan_parse_format_string(format, handler);
 1988|   775k|    }
 1989|   775k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1517|  1.81M|{
 1518|  1.81M|    if (format.size() != 2) {
  ------------------
  |  Branch (1518:9): [True: 1.43M, False: 384k]
  ------------------
 1519|  1.43M|        return false;
 1520|  1.43M|    }
 1521|   384k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1521:12): [True: 384k, False: 0]
  |  Branch (1521:39): [True: 384k, False: 0]
  ------------------
 1522|  1.81M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 1550|   301k|{
 1551|   301k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  880|   301k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 301k]
  |  |  ------------------
  ------------------
 1552|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1553|      0|                                             "Argument #0 not found");
 1554|      0|    }
 1555|       |
 1556|   301k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  879|   301k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (879:25): [True: 0, False: 301k]
  |  |  ------------------
  ------------------
 1557|      0|        auto reader = impl::default_arg_reader<
 1558|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1559|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  949|      0|    static_cast<    \
  |  |  950|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1560|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1561|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1562|      0|    }
 1563|       |
 1564|   301k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 1565|   301k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  949|   301k|    static_cast<    \
  |  |  950|   301k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1566|   301k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|   301k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   301k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   301k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|   301k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 21.2k, False: 280k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  21.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  21.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  21.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  21.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  21.2k|    }                                                  \
  |  |  |  | 3939|   301k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|   280k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1567|   280k|    return it.position();
 1568|   301k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSL_10locale_refEm:
 1793|   658k|        : format_handler_base{argcount},
 1794|   658k|          parse_ctx{source_tag<Source&&>, format},
 1795|   658k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  951|   658k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  949|   658k|    static_cast<    \
  |  |  950|   658k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  949|   658k|    static_cast<    \
  |  |  950|   658k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1796|   658k|    {
 1797|   658k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_baseC2Em:
 1611|  2.33M|    format_handler_base(size_t argcount) : args_count(argcount)
 1612|  2.33M|    {
 1613|  2.33M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  880|  2.33M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 2.33M]
  |  |  ------------------
  ------------------
 1614|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1615|      0|        }
 1616|  2.33M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSD_10locale_refE:
 1744|   658k|        : contiguous_ctx(source, args, loc)
 1745|   658k|    {
 1746|   658k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1934|   658k|{
 1935|   658k|    const auto beg = handler.get_ctx().begin();
 1936|   658k|    detail::parse_format_string<false>(format, handler);
 1937|   658k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  880|   658k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 70.6k, False: 588k]
  |  |  ------------------
  ------------------
 1938|  70.6k|        return unexpected(err.error());
 1939|  70.6k|    }
 1940|   588k|    return ranges::distance(beg, handler.get_ctx().begin());
 1941|   658k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 1918|  4.47M|    {
 1919|  4.47M|        return ctx.get();
 1920|  4.47M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1749|  4.47M|    {
 1750|  4.47M|        return contiguous_ctx;
 1751|  4.47M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1800|  1.24M|    {
 1801|  1.24M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1801:16): [True: 0, False: 1.24M]
  ------------------
 1802|      0|            auto it = get_ctx().begin();
 1803|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1803:17): [True: 0, False: 0]
  ------------------
 1804|      0|                SCN_UNLIKELY_ATTR
 1805|      0|                return on_error(
 1806|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1807|      0|            }
 1808|       |
 1809|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1810|      0|                    detail::make_string_view_from_pointers(begin, end));
 1811|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1811:17): [True: 0, False: 0]
  ------------------
 1812|      0|                SCN_UNLIKELY_ATTR
 1813|      0|                return on_error({scan_error::invalid_format_string,
 1814|      0|                                 "Invalid encoding in format string"});
 1815|      0|            }
 1816|      0|            else if (is_space) {
  ------------------
  |  Branch (1816:22): [True: 0, False: 0]
  ------------------
 1817|       |                // Skip all whitespace in input
 1818|      0|                get_ctx().advance_to(
 1819|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1820|       |                // And, skip all whitespace in the format string
 1821|      0|                auto begin_it = impl::read_while_classic_space(
 1822|      0|                    detail::make_string_view_from_pointers(
 1823|      0|                        detail::to_address(after_space_it),
 1824|      0|                        detail::to_address(end)));
 1825|       |                // (-1 because of the for loop ++begin)
 1826|      0|                begin = detail::to_address(begin_it) - 1;
 1827|      0|                continue;
 1828|      0|            }
 1829|       |
 1830|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1830:17): [True: 0, False: 0]
  ------------------
 1831|      0|                SCN_UNLIKELY_ATTR
 1832|      0|                return on_error({scan_error::invalid_literal,
 1833|      0|                                 "Unexpected literal character in source"});
 1834|      0|            }
 1835|      0|            get_ctx().advance_to(ranges::next(it));
 1836|      0|        }
 1837|  1.24M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1660|   424k|    {
 1661|   424k|        error = unexpected(err);
 1662|   424k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEmNS1_14format_handlerILb1EcEEEEDaRT_T0_RT1_:
 1572|   658k|{
 1573|   658k|    auto arg = ctx.arg(id);
 1574|   658k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  880|   658k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 658k]
  |  |  ------------------
  ------------------
 1575|      0|        handler.on_error("Failed to find argument with ID");
 1576|      0|    }
 1577|   658k|    return arg;
 1578|   658k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1686|  2.33M|    {
 1687|  2.33M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  880|  2.33M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 2.33M]
  |  |  ------------------
  ------------------
 1688|      0|            on_error({scan_error::invalid_format_string,
 1689|      0|                      "Argument ID out-of-range"});
 1690|      0|            return;
 1691|      0|        }
 1692|       |
 1693|  2.33M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  880|  2.33M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 2.33M]
  |  |  ------------------
  ------------------
 1694|      0|            on_error({scan_error::invalid_format_string,
 1695|      0|                      "Argument with this ID has already been scanned"});
 1696|      0|        }
 1697|       |
 1698|  2.33M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  879|  2.33M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (879:25): [True: 2.33M, False: 0]
  |  |  ------------------
  ------------------
 1699|  2.33M|            visited_args_lower64 |= (1ull << id);
 1700|  2.33M|            return;
 1701|  2.33M|        }
 1702|       |
 1703|      0|        id -= 64;
 1704|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1705|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1670|  2.33M|    {
 1671|  2.33M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  880|  2.33M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 2.33M]
  |  |  ------------------
  ------------------
 1672|      0|            on_error({scan_error::invalid_format_string,
 1673|      0|                      "Argument ID out-of-range"});
 1674|      0|            return false;
 1675|      0|        }
 1676|       |
 1677|  2.33M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  879|  2.33M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (879:25): [True: 2.33M, False: 0]
  |  |  ------------------
  ------------------
 1678|  2.33M|            return (visited_args_lower64 >> id) & 1ull;
 1679|  2.33M|        }
 1680|       |
 1681|      0|        id -= 64;
 1682|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1683|  2.33M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1840|   658k|    {
 1841|   658k|        return parse_ctx.next_arg_id();
 1842|   658k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1880|   658k|    {
 1881|   658k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1882|   658k|        set_arg_as_visited(arg_id);
 1883|       |
 1884|   658k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1884:13): [True: 0, False: 658k]
  ------------------
 1885|      0|            parse_ctx.advance_to(begin);
 1886|      0|            on_visit_scan_arg(
 1887|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1888|      0|                    parse_ctx, get_custom_ctx()},
 1889|      0|                arg);
 1890|      0|            return parse_ctx.begin();
 1891|      0|        }
 1892|       |
 1893|   658k|        auto specs = detail::format_specs{};
 1894|   658k|        detail::specs_checker<specs_handler<context_type>> handler{
 1895|   658k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1896|   658k|            detail::get_arg_type(arg)};
 1897|       |
 1898|   658k|        begin = detail::parse_format_specs(begin, end, handler);
 1899|   658k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1899:13): [True: 0, False: 658k]
  |  Branch (1899:29): [True: 0, False: 658k]
  ------------------
 1900|      0|            SCN_UNLIKELY_ATTR
 1901|      0|            on_error({scan_error::invalid_format_string,
 1902|      0|                      "Missing '}' in format string"});
 1903|      0|            return parse_ctx.begin();
 1904|      0|        }
 1905|   658k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  880|   658k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 658k]
  |  |  ------------------
  ------------------
 1906|      0|            return parse_ctx.begin();
 1907|      0|        }
 1908|   658k|        parse_ctx.advance_to(begin);
 1909|       |
 1910|   658k|        on_visit_scan_arg(
 1911|   658k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1912|   658k|                                           get_ctx().locale()},
 1913|   658k|            arg);
 1914|   658k|        return parse_ctx.begin();
 1915|   658k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERSB_:
 1590|   658k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1591|   658k|    {
 1592|   658k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEcEEEE:
 1851|   658k|    {
 1852|   658k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1852:13): [True: 0, False: 658k]
  |  Branch (1852:13): [True: 0, False: 658k]
  |  Branch (1852:29): [True: 0, False: 658k]
  ------------------
 1853|      0|            SCN_UNLIKELY_ATTR
 1854|      0|            return;
 1855|      0|        }
 1856|       |
 1857|   658k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  951|   658k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1858|   658k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  880|   658k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 70.6k, False: 588k]
  |  |  ------------------
  ------------------
 1859|  70.6k|            on_error(r.error());
 1860|  70.6k|        }
 1861|   588k|        else {
 1862|   588k|            get_ctx().advance_to(*r);
 1863|   588k|        }
 1864|   658k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1619|  2.33M|    {
 1620|  2.33M|        {
 1621|  2.33M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1621:45): [True: 0, False: 2.33M]
  ------------------
 1622|  2.33M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1622:35): [True: 0, False: 2.33M]
  ------------------
 1623|  2.33M|                                      ? std::numeric_limits<uint64_t>::max()
 1624|  2.33M|                                      : (1ull << args_count_lower64) - 1;
 1625|       |
 1626|  2.33M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1626:17): [True: 0, False: 2.33M]
  ------------------
 1627|      0|                return on_error({scan_error::invalid_format_string,
 1628|      0|                                 "Argument list not exhausted"});
 1629|      0|            }
 1630|  2.33M|        }
 1631|       |
 1632|  2.33M|        if (args_count < 64) {
  ------------------
  |  Branch (1632:13): [True: 2.33M, False: 0]
  ------------------
 1633|  2.33M|            return;
 1634|  2.33M|        }
 1635|       |
 1636|      0|        auto last_args_count = args_count - 64;
 1637|      0|        for (auto it = visited_args_upper.begin();
 1638|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1638:14): [True: 0, False: 0]
  ------------------
 1639|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1639:17): [True: 0, False: 0]
  ------------------
 1640|      0|                return on_error({scan_error::invalid_format_string,
 1641|      0|                                 "Argument list not exhausted"});
 1642|      0|            }
 1643|      0|            last_args_count -= 8;
 1644|      0|        }
 1645|       |
 1646|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1647|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1647:13): [True: 0, False: 0]
  ------------------
 1648|      0|            return on_error({scan_error::invalid_format_string,
 1649|      0|                             "Argument list not exhausted"});
 1650|      0|        }
 1651|      0|    }
impl.cpp:_ZNK3scn2v412_GLOBAL__N_119format_handler_base9get_errorEv:
 1665|  9.35M|    {
 1666|  9.35M|        return error;
 1667|  9.35M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEcEEEENS5_10locale_refEm:
 1793|   775k|        : format_handler_base{argcount},
 1794|   775k|          parse_ctx{source_tag<Source&&>, format},
 1795|   775k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  951|   775k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  949|   775k|    static_cast<    \
  |  |  950|   775k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  949|   775k|    static_cast<    \
  |  |  950|   775k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1796|   775k|    {
 1797|   775k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEcEEEENS4_10locale_refE:
 1720|   775k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  949|   775k|    static_cast<    \
  |  |  950|   775k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1721|   775k|    {
 1722|   775k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1934|   775k|{
 1935|   775k|    const auto beg = handler.get_ctx().begin();
 1936|   775k|    detail::parse_format_string<false>(format, handler);
 1937|   775k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  880|   775k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 70.6k, False: 704k]
  |  |  ------------------
  ------------------
 1938|  70.6k|        return unexpected(err.error());
 1939|  70.6k|    }
 1940|   704k|    return ranges::distance(beg, handler.get_ctx().begin());
 1941|   775k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 1918|  5.28M|    {
 1919|  5.28M|        return ctx.get();
 1920|  5.28M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1725|  5.28M|    {
 1726|  5.28M|        return ctx;
 1727|  5.28M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1800|  1.48M|    {
 1801|  1.48M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1801:16): [True: 0, False: 1.48M]
  ------------------
 1802|      0|            auto it = get_ctx().begin();
 1803|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1803:17): [True: 0, False: 0]
  ------------------
 1804|      0|                SCN_UNLIKELY_ATTR
 1805|      0|                return on_error(
 1806|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1807|      0|            }
 1808|       |
 1809|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1810|      0|                    detail::make_string_view_from_pointers(begin, end));
 1811|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1811:17): [True: 0, False: 0]
  ------------------
 1812|      0|                SCN_UNLIKELY_ATTR
 1813|      0|                return on_error({scan_error::invalid_format_string,
 1814|      0|                                 "Invalid encoding in format string"});
 1815|      0|            }
 1816|      0|            else if (is_space) {
  ------------------
  |  Branch (1816:22): [True: 0, False: 0]
  ------------------
 1817|       |                // Skip all whitespace in input
 1818|      0|                get_ctx().advance_to(
 1819|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1820|       |                // And, skip all whitespace in the format string
 1821|      0|                auto begin_it = impl::read_while_classic_space(
 1822|      0|                    detail::make_string_view_from_pointers(
 1823|      0|                        detail::to_address(after_space_it),
 1824|      0|                        detail::to_address(end)));
 1825|       |                // (-1 because of the for loop ++begin)
 1826|      0|                begin = detail::to_address(begin_it) - 1;
 1827|      0|                continue;
 1828|      0|            }
 1829|       |
 1830|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1830:17): [True: 0, False: 0]
  ------------------
 1831|      0|                SCN_UNLIKELY_ATTR
 1832|      0|                return on_error({scan_error::invalid_literal,
 1833|      0|                                 "Unexpected literal character in source"});
 1834|      0|            }
 1835|      0|            get_ctx().advance_to(ranges::next(it));
 1836|      0|        }
 1837|  1.48M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEmNS1_14format_handlerILb0EcEEEEDaRT_T0_RT1_:
 1572|   775k|{
 1573|   775k|    auto arg = ctx.arg(id);
 1574|   775k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  880|   775k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 775k]
  |  |  ------------------
  ------------------
 1575|      0|        handler.on_error("Failed to find argument with ID");
 1576|      0|    }
 1577|   775k|    return arg;
 1578|   775k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1840|   775k|    {
 1841|   775k|        return parse_ctx.next_arg_id();
 1842|   775k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1880|   775k|    {
 1881|   775k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1882|   775k|        set_arg_as_visited(arg_id);
 1883|       |
 1884|   775k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1884:13): [True: 0, False: 775k]
  ------------------
 1885|      0|            parse_ctx.advance_to(begin);
 1886|      0|            on_visit_scan_arg(
 1887|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1888|      0|                    parse_ctx, get_custom_ctx()},
 1889|      0|                arg);
 1890|      0|            return parse_ctx.begin();
 1891|      0|        }
 1892|       |
 1893|   775k|        auto specs = detail::format_specs{};
 1894|   775k|        detail::specs_checker<specs_handler<context_type>> handler{
 1895|   775k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1896|   775k|            detail::get_arg_type(arg)};
 1897|       |
 1898|   775k|        begin = detail::parse_format_specs(begin, end, handler);
 1899|   775k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1899:13): [True: 0, False: 775k]
  |  Branch (1899:29): [True: 0, False: 775k]
  ------------------
 1900|      0|            SCN_UNLIKELY_ATTR
 1901|      0|            on_error({scan_error::invalid_format_string,
 1902|      0|                      "Missing '}' in format string"});
 1903|      0|            return parse_ctx.begin();
 1904|      0|        }
 1905|   775k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  880|   775k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 775k]
  |  |  ------------------
  ------------------
 1906|      0|            return parse_ctx.begin();
 1907|      0|        }
 1908|   775k|        parse_ctx.advance_to(begin);
 1909|       |
 1910|   775k|        on_visit_scan_arg(
 1911|   775k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1912|   775k|                                           get_ctx().locale()},
 1913|   775k|            arg);
 1914|   775k|        return parse_ctx.begin();
 1915|   775k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2ERNS4_12format_specsERNS0_24basic_scan_parse_contextIcEERS6_:
 1590|   775k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1591|   775k|    {
 1592|   775k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 1851|   775k|    {
 1852|   775k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1852:13): [True: 0, False: 775k]
  |  Branch (1852:13): [True: 0, False: 775k]
  |  Branch (1852:29): [True: 0, False: 775k]
  ------------------
 1853|      0|            SCN_UNLIKELY_ATTR
 1854|      0|            return;
 1855|      0|        }
 1856|       |
 1857|   775k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  951|   775k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1858|   775k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  880|   775k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 70.6k, False: 704k]
  |  |  ------------------
  ------------------
 1859|  70.6k|            on_error(r.error());
 1860|  70.6k|        }
 1861|   704k|        else {
 1862|   704k|            get_ctx().advance_to(*r);
 1863|   704k|        }
 1864|   775k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 1949|   842k|{
 1950|   842k|    const auto argcount = args.size();
 1951|   842k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1951:9): [True: 183k, False: 658k]
  |  Branch (1951:60): [True: 183k, False: 0]
  ------------------
 1952|   183k|        auto arg = args.get(0);
 1953|   183k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  949|   183k|    static_cast<    \
  |  |  950|   183k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1954|   183k|    }
 1955|       |
 1956|   658k|    auto handler = format_handler<true, CharT>{
 1957|   658k|        ranges::subrange<const CharT*>{source.data(),
 1958|   658k|                                       source.data() + source.size()},
 1959|   658k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  949|   658k|    static_cast<    \
  |  |  950|   658k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  949|   658k|    static_cast<    \
  |  |  950|   658k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1960|   658k|    return vscan_parse_format_string(format, handler);
 1961|   842k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 1530|   275k|{
 1531|   275k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  880|   275k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 275k]
  |  |  ------------------
  ------------------
 1532|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1533|      0|                                             "Argument #0 not found");
 1534|      0|    }
 1535|       |
 1536|   275k|    auto reader =
 1537|   275k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1538|   275k|            ranges::subrange<const CharT*>{source.data(),
 1539|   275k|                                           source.data() + source.size()},
 1540|   275k|            SCN_MOVE(args), loc};
  ------------------
  |  |  949|   275k|    static_cast<    \
  |  |  950|   275k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1541|   275k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|   275k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   275k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   275k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|   275k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 21.2k, False: 253k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  21.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  21.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  21.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  21.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  21.2k|    }                                                  \
  |  |  |  | 3939|   275k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|   253k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1542|   253k|    return ranges::distance(source.data(), it);
 1543|   275k|}
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIcEEEENS0_13scan_expectedIlEERT_S7_:
 2049|  1.07M|{
 2050|  1.07M|    if (SCN_LIKELY(result)) {
  ------------------
  |  |  879|  1.07M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (879:25): [True: 985k, False: 91.8k]
  |  |  ------------------
  ------------------
 2051|   985k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  |  880|   985k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 985k]
  |  |  ------------------
  ------------------
 2052|      0|            return detail::unexpected_scan_error(
 2053|      0|                scan_error::invalid_source_state,
 2054|      0|                "Failed to sync with underlying source");
 2055|      0|        }
 2056|   985k|    }
 2057|  91.8k|    else {
 2058|  91.8k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  |  880|  91.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 91.8k]
  |  |  ------------------
  ------------------
 2059|      0|            return detail::unexpected_scan_error(
 2060|      0|                scan_error::invalid_source_state,
 2061|      0|                "Failed to sync with underlying source");
 2062|      0|        }
 2063|  91.8k|    }
 2064|  1.07M|    return result;
 2065|  1.07M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 1949|   563k|{
 1950|   563k|    const auto argcount = args.size();
 1951|   563k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1951:9): [True: 111k, False: 452k]
  |  Branch (1951:60): [True: 111k, False: 0]
  ------------------
 1952|   111k|        auto arg = args.get(0);
 1953|   111k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  949|   111k|    static_cast<    \
  |  |  950|   111k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1954|   111k|    }
 1955|       |
 1956|   452k|    auto handler = format_handler<true, CharT>{
 1957|   452k|        ranges::subrange<const CharT*>{source.data(),
 1958|   452k|                                       source.data() + source.size()},
 1959|   452k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  949|   452k|    static_cast<    \
  |  |  950|   452k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  949|   452k|    static_cast<    \
  |  |  950|   452k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1960|   452k|    return vscan_parse_format_string(format, handler);
 1961|   563k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1517|  1.12M|{
 1518|  1.12M|    if (format.size() != 2) {
  ------------------
  |  Branch (1518:9): [True: 904k, False: 222k]
  ------------------
 1519|   904k|        return false;
 1520|   904k|    }
 1521|   222k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1521:12): [True: 222k, False: 0]
  |  Branch (1521:39): [True: 222k, False: 0]
  ------------------
 1522|  1.12M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 1530|   166k|{
 1531|   166k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  880|   166k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 166k]
  |  |  ------------------
  ------------------
 1532|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1533|      0|                                             "Argument #0 not found");
 1534|      0|    }
 1535|       |
 1536|   166k|    auto reader =
 1537|   166k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1538|   166k|            ranges::subrange<const CharT*>{source.data(),
 1539|   166k|                                           source.data() + source.size()},
 1540|   166k|            SCN_MOVE(args), loc};
  ------------------
  |  |  949|   166k|    static_cast<    \
  |  |  950|   166k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1541|   166k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|   166k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   166k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   166k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|   166k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 42.4k, False: 124k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  42.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  42.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  42.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  42.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  42.4k|    }                                                  \
  |  |  |  | 3939|   166k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1542|   124k|    return ranges::distance(source.data(), it);
 1543|   166k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSL_10locale_refEm:
 1793|   452k|        : format_handler_base{argcount},
 1794|   452k|          parse_ctx{source_tag<Source&&>, format},
 1795|   452k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  951|   452k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  949|   452k|    static_cast<    \
  |  |  950|   452k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  949|   452k|    static_cast<    \
  |  |  950|   452k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1796|   452k|    {
 1797|   452k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSD_10locale_refE:
 1744|   452k|        : contiguous_ctx(source, args, loc)
 1745|   452k|    {
 1746|   452k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1934|   452k|{
 1935|   452k|    const auto beg = handler.get_ctx().begin();
 1936|   452k|    detail::parse_format_string<false>(format, handler);
 1937|   452k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  880|   452k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 141k, False: 311k]
  |  |  ------------------
  ------------------
 1938|   141k|        return unexpected(err.error());
 1939|   141k|    }
 1940|   311k|    return ranges::distance(beg, handler.get_ctx().begin());
 1941|   452k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 1918|  2.88M|    {
 1919|  2.88M|        return ctx.get();
 1920|  2.88M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1749|  2.88M|    {
 1750|  2.88M|        return contiguous_ctx;
 1751|  2.88M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1800|   763k|    {
 1801|   763k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1801:16): [True: 0, False: 763k]
  ------------------
 1802|      0|            auto it = get_ctx().begin();
 1803|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1803:17): [True: 0, False: 0]
  ------------------
 1804|      0|                SCN_UNLIKELY_ATTR
 1805|      0|                return on_error(
 1806|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1807|      0|            }
 1808|       |
 1809|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1810|      0|                    detail::make_string_view_from_pointers(begin, end));
 1811|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1811:17): [True: 0, False: 0]
  ------------------
 1812|      0|                SCN_UNLIKELY_ATTR
 1813|      0|                return on_error({scan_error::invalid_format_string,
 1814|      0|                                 "Invalid encoding in format string"});
 1815|      0|            }
 1816|      0|            else if (is_space) {
  ------------------
  |  Branch (1816:22): [True: 0, False: 0]
  ------------------
 1817|       |                // Skip all whitespace in input
 1818|      0|                get_ctx().advance_to(
 1819|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1820|       |                // And, skip all whitespace in the format string
 1821|      0|                auto begin_it = impl::read_while_classic_space(
 1822|      0|                    detail::make_string_view_from_pointers(
 1823|      0|                        detail::to_address(after_space_it),
 1824|      0|                        detail::to_address(end)));
 1825|       |                // (-1 because of the for loop ++begin)
 1826|      0|                begin = detail::to_address(begin_it) - 1;
 1827|      0|                continue;
 1828|      0|            }
 1829|       |
 1830|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1830:17): [True: 0, False: 0]
  ------------------
 1831|      0|                SCN_UNLIKELY_ATTR
 1832|      0|                return on_error({scan_error::invalid_literal,
 1833|      0|                                 "Unexpected literal character in source"});
 1834|      0|            }
 1835|      0|            get_ctx().advance_to(ranges::next(it));
 1836|      0|        }
 1837|   763k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEmNS1_14format_handlerILb1EwEEEEDaRT_T0_RT1_:
 1572|   452k|{
 1573|   452k|    auto arg = ctx.arg(id);
 1574|   452k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  880|   452k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 452k]
  |  |  ------------------
  ------------------
 1575|      0|        handler.on_error("Failed to find argument with ID");
 1576|      0|    }
 1577|   452k|    return arg;
 1578|   452k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1840|   452k|    {
 1841|   452k|        return parse_ctx.next_arg_id();
 1842|   452k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1880|   452k|    {
 1881|   452k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1882|   452k|        set_arg_as_visited(arg_id);
 1883|       |
 1884|   452k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1884:13): [True: 0, False: 452k]
  ------------------
 1885|      0|            parse_ctx.advance_to(begin);
 1886|      0|            on_visit_scan_arg(
 1887|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1888|      0|                    parse_ctx, get_custom_ctx()},
 1889|      0|                arg);
 1890|      0|            return parse_ctx.begin();
 1891|      0|        }
 1892|       |
 1893|   452k|        auto specs = detail::format_specs{};
 1894|   452k|        detail::specs_checker<specs_handler<context_type>> handler{
 1895|   452k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1896|   452k|            detail::get_arg_type(arg)};
 1897|       |
 1898|   452k|        begin = detail::parse_format_specs(begin, end, handler);
 1899|   452k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1899:13): [True: 0, False: 452k]
  |  Branch (1899:29): [True: 0, False: 452k]
  ------------------
 1900|      0|            SCN_UNLIKELY_ATTR
 1901|      0|            on_error({scan_error::invalid_format_string,
 1902|      0|                      "Missing '}' in format string"});
 1903|      0|            return parse_ctx.begin();
 1904|      0|        }
 1905|   452k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  880|   452k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 452k]
  |  |  ------------------
  ------------------
 1906|      0|            return parse_ctx.begin();
 1907|      0|        }
 1908|   452k|        parse_ctx.advance_to(begin);
 1909|       |
 1910|   452k|        on_visit_scan_arg(
 1911|   452k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1912|   452k|                                           get_ctx().locale()},
 1913|   452k|            arg);
 1914|   452k|        return parse_ctx.begin();
 1915|   452k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERSB_:
 1590|   452k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1591|   452k|    {
 1592|   452k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEwEEEE:
 1851|   452k|    {
 1852|   452k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1852:13): [True: 0, False: 452k]
  |  Branch (1852:13): [True: 0, False: 452k]
  |  Branch (1852:29): [True: 0, False: 452k]
  ------------------
 1853|      0|            SCN_UNLIKELY_ATTR
 1854|      0|            return;
 1855|      0|        }
 1856|       |
 1857|   452k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  951|   452k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1858|   452k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  880|   452k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 141k, False: 311k]
  |  |  ------------------
  ------------------
 1859|   141k|            on_error(r.error());
 1860|   141k|        }
 1861|   311k|        else {
 1862|   311k|            get_ctx().advance_to(*r);
 1863|   311k|        }
 1864|   452k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 1969|   563k|{
 1970|   563k|    const auto argcount = args.size();
 1971|   563k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1971:9): [True: 110k, False: 452k]
  |  Branch (1971:60): [True: 110k, False: 0]
  ------------------
 1972|   110k|        auto arg = args.get(0);
 1973|   110k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  949|   110k|    static_cast<    \
  |  |  950|   110k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1974|   110k|    }
 1975|       |
 1976|   452k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (1976:9): [True: 0, False: 452k]
  ------------------
 1977|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 1978|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  949|      0|    static_cast<    \
  |  |  950|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1979|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  949|      0|    static_cast<    \
  |  |  950|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1980|      0|        return vscan_parse_format_string(format, handler);
 1981|      0|    }
 1982|       |
 1983|   452k|    SCN_UNLIKELY_ATTR
 1984|   452k|    {
 1985|   452k|        auto handler = format_handler<false, CharT>{
 1986|   452k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  949|   452k|    static_cast<    \
  |  |  950|   452k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  949|   452k|    static_cast<    \
  |  |  950|   452k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1987|   452k|        return vscan_parse_format_string(format, handler);
 1988|   452k|    }
 1989|   452k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 1550|   166k|{
 1551|   166k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  880|   166k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 166k]
  |  |  ------------------
  ------------------
 1552|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1553|      0|                                             "Argument #0 not found");
 1554|      0|    }
 1555|       |
 1556|   166k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  879|   166k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (879:25): [True: 0, False: 166k]
  |  |  ------------------
  ------------------
 1557|      0|        auto reader = impl::default_arg_reader<
 1558|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1559|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  949|      0|    static_cast<    \
  |  |  950|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1560|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1561|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1562|      0|    }
 1563|       |
 1564|   166k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 1565|   166k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  949|   166k|    static_cast<    \
  |  |  950|   166k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1566|   166k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|   166k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   166k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   166k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|   166k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 42.4k, False: 124k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  42.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  42.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  42.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  42.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  42.4k|    }                                                  \
  |  |  |  | 3939|   166k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1567|   124k|    return it.position();
 1568|   166k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEwEEEENS5_10locale_refEm:
 1793|   452k|        : format_handler_base{argcount},
 1794|   452k|          parse_ctx{source_tag<Source&&>, format},
 1795|   452k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  951|   452k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  949|   452k|    static_cast<    \
  |  |  950|   452k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  949|   452k|    static_cast<    \
  |  |  950|   452k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1796|   452k|    {
 1797|   452k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEwEEEENS4_10locale_refE:
 1720|   452k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  949|   452k|    static_cast<    \
  |  |  950|   452k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1721|   452k|    {
 1722|   452k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1934|   452k|{
 1935|   452k|    const auto beg = handler.get_ctx().begin();
 1936|   452k|    detail::parse_format_string<false>(format, handler);
 1937|   452k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  880|   452k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 141k, False: 310k]
  |  |  ------------------
  ------------------
 1938|   141k|        return unexpected(err.error());
 1939|   141k|    }
 1940|   310k|    return ranges::distance(beg, handler.get_ctx().begin());
 1941|   452k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 1918|  2.88M|    {
 1919|  2.88M|        return ctx.get();
 1920|  2.88M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1725|  2.88M|    {
 1726|  2.88M|        return ctx;
 1727|  2.88M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1800|   763k|    {
 1801|   763k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1801:16): [True: 0, False: 763k]
  ------------------
 1802|      0|            auto it = get_ctx().begin();
 1803|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1803:17): [True: 0, False: 0]
  ------------------
 1804|      0|                SCN_UNLIKELY_ATTR
 1805|      0|                return on_error(
 1806|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1807|      0|            }
 1808|       |
 1809|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1810|      0|                    detail::make_string_view_from_pointers(begin, end));
 1811|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1811:17): [True: 0, False: 0]
  ------------------
 1812|      0|                SCN_UNLIKELY_ATTR
 1813|      0|                return on_error({scan_error::invalid_format_string,
 1814|      0|                                 "Invalid encoding in format string"});
 1815|      0|            }
 1816|      0|            else if (is_space) {
  ------------------
  |  Branch (1816:22): [True: 0, False: 0]
  ------------------
 1817|       |                // Skip all whitespace in input
 1818|      0|                get_ctx().advance_to(
 1819|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1820|       |                // And, skip all whitespace in the format string
 1821|      0|                auto begin_it = impl::read_while_classic_space(
 1822|      0|                    detail::make_string_view_from_pointers(
 1823|      0|                        detail::to_address(after_space_it),
 1824|      0|                        detail::to_address(end)));
 1825|       |                // (-1 because of the for loop ++begin)
 1826|      0|                begin = detail::to_address(begin_it) - 1;
 1827|      0|                continue;
 1828|      0|            }
 1829|       |
 1830|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1830:17): [True: 0, False: 0]
  ------------------
 1831|      0|                SCN_UNLIKELY_ATTR
 1832|      0|                return on_error({scan_error::invalid_literal,
 1833|      0|                                 "Unexpected literal character in source"});
 1834|      0|            }
 1835|      0|            get_ctx().advance_to(ranges::next(it));
 1836|      0|        }
 1837|   763k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEmNS1_14format_handlerILb0EwEEEEDaRT_T0_RT1_:
 1572|   452k|{
 1573|   452k|    auto arg = ctx.arg(id);
 1574|   452k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  880|   452k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 452k]
  |  |  ------------------
  ------------------
 1575|      0|        handler.on_error("Failed to find argument with ID");
 1576|      0|    }
 1577|   452k|    return arg;
 1578|   452k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1840|   452k|    {
 1841|   452k|        return parse_ctx.next_arg_id();
 1842|   452k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1880|   452k|    {
 1881|   452k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1882|   452k|        set_arg_as_visited(arg_id);
 1883|       |
 1884|   452k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1884:13): [True: 0, False: 452k]
  ------------------
 1885|      0|            parse_ctx.advance_to(begin);
 1886|      0|            on_visit_scan_arg(
 1887|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1888|      0|                    parse_ctx, get_custom_ctx()},
 1889|      0|                arg);
 1890|      0|            return parse_ctx.begin();
 1891|      0|        }
 1892|       |
 1893|   452k|        auto specs = detail::format_specs{};
 1894|   452k|        detail::specs_checker<specs_handler<context_type>> handler{
 1895|   452k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1896|   452k|            detail::get_arg_type(arg)};
 1897|       |
 1898|   452k|        begin = detail::parse_format_specs(begin, end, handler);
 1899|   452k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1899:13): [True: 0, False: 452k]
  |  Branch (1899:29): [True: 0, False: 452k]
  ------------------
 1900|      0|            SCN_UNLIKELY_ATTR
 1901|      0|            on_error({scan_error::invalid_format_string,
 1902|      0|                      "Missing '}' in format string"});
 1903|      0|            return parse_ctx.begin();
 1904|      0|        }
 1905|   452k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  880|   452k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 452k]
  |  |  ------------------
  ------------------
 1906|      0|            return parse_ctx.begin();
 1907|      0|        }
 1908|   452k|        parse_ctx.advance_to(begin);
 1909|       |
 1910|   452k|        on_visit_scan_arg(
 1911|   452k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1912|   452k|                                           get_ctx().locale()},
 1913|   452k|            arg);
 1914|   452k|        return parse_ctx.begin();
 1915|   452k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2ERNS4_12format_specsERNS0_24basic_scan_parse_contextIwEERS6_:
 1590|   452k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1591|   452k|    {
 1592|   452k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 1851|   452k|    {
 1852|   452k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1852:13): [True: 0, False: 452k]
  |  Branch (1852:13): [True: 0, False: 452k]
  |  Branch (1852:29): [True: 0, False: 452k]
  ------------------
 1853|      0|            SCN_UNLIKELY_ATTR
 1854|      0|            return;
 1855|      0|        }
 1856|       |
 1857|   452k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  951|   452k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1858|   452k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  880|   452k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 141k, False: 310k]
  |  |  ------------------
  ------------------
 1859|   141k|            on_error(r.error());
 1860|   141k|        }
 1861|   310k|        else {
 1862|   310k|            get_ctx().advance_to(*r);
 1863|   310k|        }
 1864|   452k|    }
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIwEEEENS0_13scan_expectedIlEERT_S7_:
 2049|   618k|{
 2050|   618k|    if (SCN_LIKELY(result)) {
  ------------------
  |  |  879|   618k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (879:25): [True: 435k, False: 183k]
  |  |  ------------------
  ------------------
 2051|   435k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  |  880|   435k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 435k]
  |  |  ------------------
  ------------------
 2052|      0|            return detail::unexpected_scan_error(
 2053|      0|                scan_error::invalid_source_state,
 2054|      0|                "Failed to sync with underlying source");
 2055|      0|        }
 2056|   435k|    }
 2057|   183k|    else {
 2058|   183k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  |  880|   183k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 183k]
  |  |  ------------------
  ------------------
 2059|      0|            return detail::unexpected_scan_error(
 2060|      0|                scan_error::invalid_source_state,
 2061|      0|                "Failed to sync with underlying source");
 2062|      0|        }
 2063|   183k|    }
 2064|   618k|    return result;
 2065|   618k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 1995|  91.7k|{
 1996|  91.7k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  951|  91.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1997|  91.7k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 1995|   100k|{
 1996|   100k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  951|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1997|   100k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 1995|  55.5k|{
 1996|  55.5k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  951|  55.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1997|  55.5k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 1995|  55.4k|{
 1996|  55.4k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  951|  55.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1997|  55.4k|}

_ZN3scn2v44impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1461|  2.35k|{
 1462|  2.35k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1463|       |
 1464|  2.35k|    if constexpr (sizeof(SourceCharT) == 1) {
 1465|       |        if constexpr (sizeof(DestCharT) == 2) {
 1466|       |            std::u32string tmp;
 1467|       |            transcode_to_string_impl_to32(src, tmp);
 1468|       |            return transcode_to_string_impl_32to16<false>(
 1469|       |                std::u32string_view{tmp}, dest);
 1470|       |        }
 1471|  2.35k|        else if constexpr (sizeof(DestCharT) == 4) {
 1472|  2.35k|            return transcode_to_string_impl_to32(src, dest);
 1473|  2.35k|        }
 1474|       |    }
 1475|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1476|       |        if constexpr (sizeof(DestCharT) == 1) {
 1477|       |            std::u32string tmp;
 1478|       |            transcode_to_string_impl_to32(src, tmp);
 1479|       |            return transcode_to_string_impl_32to8<false>(
 1480|       |                std::u32string_view{tmp}, dest);
 1481|       |        }
 1482|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1483|       |            return trasncode_to_string_impl_to32(src, dest);
 1484|       |        }
 1485|       |    }
 1486|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1487|       |        if constexpr (sizeof(DestCharT) == 1) {
 1488|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1489|       |        }
 1490|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1491|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1492|       |        }
 1493|       |    }
 1494|       |
 1495|  2.35k|    SCN_EXPECT(false);
  ------------------
  |  |  945|  2.35k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  2.35k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  908|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1497|  2.35k|}
_ZN3scn2v44impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1354|  2.35k|{
 1355|  2.35k|    static_assert(sizeof(DestCharT) == 4);
 1356|       |
 1357|  2.35k|    auto it = src.begin();
 1358|   667k|    while (it != src.end()) {
  ------------------
  |  Branch (1358:12): [True: 665k, False: 2.35k]
  ------------------
 1359|   665k|        auto res = get_next_code_point(
 1360|   665k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1361|   665k|                                                                 src.end()));
 1362|   665k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  880|   665k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 1.96k, False: 663k]
  |  |  ------------------
  ------------------
 1363|  1.96k|            dest.push_back(DestCharT{0xfffd});
 1364|  1.96k|        }
 1365|   663k|        else {
 1366|   663k|            dest.push_back(res.value);
 1367|   663k|        }
 1368|   665k|        it = detail::make_string_view_iterator(src, res.iterator);
 1369|   665k|    }
 1370|  2.35k|}
_ZN3scn2v44impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1278|   964k|{
 1279|   964k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  945|   964k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   964k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1280|       |
 1281|   964k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1282|   964k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  880|   964k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 27.2k, False: 937k]
  |  |  ------------------
  ------------------
 1283|  27.2k|        return {get_start_for_next_code_point(input),
 1284|  27.2k|                detail::invalid_code_point};
 1285|  27.2k|    }
 1286|   937k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  880|   937k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 3.64k, False: 933k]
  |  |  ------------------
  ------------------
 1287|  3.64k|        return {input.end(), detail::invalid_code_point};
 1288|  3.64k|    }
 1289|       |
 1290|   933k|    return {input.begin() + len,
 1291|   933k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1292|   937k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1264|  27.2k|{
 1265|  27.2k|    auto it = input.begin();
 1266|   169k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 161k, False: 7.48k]
  ------------------
 1267|   161k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 19.8k, False: 142k]
  ------------------
 1268|  19.8k|            break;
 1269|  19.8k|        }
 1270|   161k|    }
 1271|  27.2k|    return it;
 1272|  27.2k|}
_ZN3scn2v44impl11parse_errorC2ENS2_4codeE:
  807|  29.0M|    constexpr parse_error(code c) : m_code(c)
  808|  29.0M|    {
  809|  29.0M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  930|  29.0M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  29.0M|    }
_ZN3scn2v44impleqENS1_11parse_errorES2_:
  822|  13.1M|    {
  823|  13.1M|        return a.m_code == b.m_code;
  824|  13.1M|    }
_ZN3scn2v44implneENS1_11parse_errorES2_:
  826|  3.42M|    {
  827|  3.42M|        return !(a == b);
  828|  3.42M|    }
_ZN3scn2v44impl16clocale_restorerC2Ei:
 1825|  1.33M|    clocale_restorer(int cat) : m_category(cat)
 1826|  1.33M|    {
 1827|  1.33M|        const auto loc = std::setlocale(cat, nullptr);
 1828|  1.33M|        std::strcpy(m_locbuf, loc);
 1829|  1.33M|    }
_ZN3scn2v44impl16clocale_restorerD2Ev:
 1831|  1.33M|    {
 1832|       |        // Restore locale to what it was before
 1833|  1.33M|        std::setlocale(m_category, m_locbuf);
 1834|  1.33M|    }
_ZN3scn2v44impl25set_clocale_classic_guardC2Ei:
 1854|  1.33M|    set_clocale_classic_guard(int cat) : m_restorer(cat)
 1855|  1.33M|    {
 1856|  1.33M|        std::setlocale(cat, "C");
 1857|  1.33M|    }
_ZNK3scn2v44impl20reader_error_handlercvbEv:
 3050|  2.33M|    {
 3051|  2.33M|        return m_msg == nullptr;
 3052|  2.33M|    }
_ZN3scn2v44impl17float_reader_baseC2Ej:
 3686|  2.30M|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v44impl14is_ascii_spaceEc:
  457|  15.0M|{
  458|  15.0M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  15.0M|        static_cast<unsigned char>(ch))];
  460|  15.0M|}
_ZN3scn2v44impl13is_ascii_charEc:
  468|   174k|{
  469|   174k|    return static_cast<unsigned char>(ch) <= 127;
  470|   174k|}
_ZN3scn2v44impl16has_byte_greaterEmh:
  538|  3.44M|{
  539|  3.44M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  3.44M|}
_ZN3scn2v44implntENS1_9eof_errorE:
  783|  10.8M|{
  784|  10.8M|    return e != eof_error::good;
  785|  10.8M|}
_ZN3scn2v44impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  46.5k|{
  798|  46.5k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  945|  46.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  46.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  46.5k|    return scan_error{scan_error::end_of_input, "EOF"};
  800|  46.5k|}
_ZN3scn2v44impl20make_eof_parse_errorENS1_9eof_errorE:
  844|   219k|{
  845|   219k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  945|   219k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   219k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|   219k|    return parse_error::eof;
  847|   219k|}
_ZN3scn2v44impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|  3.42M|{
  854|  3.42M|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 3.42M]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|  3.42M|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 80.3k, False: 3.34M]
  ------------------
  859|  80.3k|        return detail::unexpected_scan_error(scan_error::end_of_input, "EOF");
  860|  80.3k|    }
  861|       |
  862|  3.34M|    return detail::unexpected_scan_error(code, msg);
  863|  3.42M|}
_ZN3scn2v44impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  3.42M|{
  868|  3.42M|    return [code, msg](parse_error err) {
  869|  3.42M|        assert(err != parse_error::good);
  870|  3.42M|        return make_scan_error_from_parse_error(err, code, msg).error();
  871|  3.42M|    };
  872|  3.42M|}
_ZN3scn2v44impl17fast_streq_nocaseEPKcS3_m:
 2319|  2.40M|{
 2320|  2.40M|    unsigned char running_diff{0};
 2321|  9.04M|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2321:24): [True: 6.64M, False: 2.40M]
  ------------------
 2322|  6.64M|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2323|  6.64M|    }
 2324|  2.40M|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2324:12): [True: 76.4k, False: 2.33M]
  |  Branch (2324:33): [True: 18.1k, False: 2.31M]
  ------------------
 2325|  2.40M|}
_ZN3scn2v44impl11char_to_intEc:
 3239|  18.2M|{
 3240|  18.2M|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3241|  18.2M|}
_ZN3scn2v44impl11char_to_intEw:
 3243|  3.40M|{
 3244|  3.40M|#if WCHAR_MIN < 0
 3245|  3.40M|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3245:9): [True: 3.38M, False: 15.0k]
  |  Branch (3245:20): [True: 2.16M, False: 1.22M]
  ------------------
 3246|       |#else
 3247|       |    if (ch <= 255) {
 3248|       |#endif
 3249|  2.16M|        return char_to_int(static_cast<char>(ch));
 3250|  2.16M|    }
 3251|  1.23M|    return 255;
 3252|  3.40M|}
_ZN3scn2v44impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6046|  1.91M|{
 6047|  1.91M|    if (specs.width != 0) {
  ------------------
  |  Branch (6047:9): [True: 0, False: 1.91M]
  ------------------
 6048|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6048:13): [True: 0, False: 0]
  ------------------
 6049|      0|            return detail::unexpected_scan_error(
 6050|      0|                scan_error::length_too_short,
 6051|      0|                "Scanned value too narrow, width did not exceed what "
 6052|      0|                "was specified in the format string");
 6053|      0|        }
 6054|      0|    }
 6055|  1.91M|    if (specs.precision != 0) {
  ------------------
  |  Branch (6055:9): [True: 0, False: 1.91M]
  ------------------
 6056|       |        // Ensured by take_width_view
 6057|      0|        SCN_ENSURE(prefix_width + value_width + postfix_width <=
  ------------------
  |  |  946|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  942|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6058|      0|                   specs.precision);
 6059|      0|    }
 6060|  1.91M|    return {};
 6061|  1.91M|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  2.71M|    {
  304|  2.71M|        ranges::advance(x, n);
  305|  2.71M|        return x;
  306|  2.71M|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  2.71M|    {
  268|  2.71M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  2.71M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  2.71M|    {
  151|  2.71M|        i += n;
  152|  2.71M|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  3.22M|    {
  108|  3.22M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  3.22M|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  3.22M|    {
   87|  3.22M|        return s - i;
   88|  3.22M|    }
_ZNK3scn2v46ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  2.00M|    {
  304|  2.00M|        ranges::advance(x, n);
  305|  2.00M|        return x;
  306|  2.00M|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  2.00M|    {
  268|  2.00M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  2.00M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  2.00M|    {
  151|  2.00M|        i += n;
  152|  2.00M|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   576k|    {
  108|   576k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   576k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   576k|    {
   87|   576k|        return s - i;
   88|   576k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5beginEv:
 2992|  1.90M|    {
 2993|  1.90M|        return m_current;
 2994|  1.90M|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5beginEv:
 2992|  1.21M|    {
 2993|  1.21M|        return m_current;
 2994|  1.21M|    }
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  981|  1.07M|{
  982|       |    if constexpr (ranges::contiguous_range<Range> &&
  983|       |                  ranges::sized_range<Range>) {
  984|       |        return true;
  985|       |    }
  986|       |    else if constexpr (std::is_same_v<
  987|       |                           ranges::const_iterator_t<Range>,
  988|       |                           typename detail::basic_scan_buffer<
  989|  1.07M|                               detail::char_t<Range>>::forward_iterator>) {
  990|  1.07M|        auto beg = r.begin();
  991|  1.07M|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (991:13): [True: 1.07M, False: 0]
  ------------------
  992|  1.07M|            return false;
  993|  1.07M|        }
  994|       |        if constexpr (ranges::common_range<Range>) {
  995|       |            return beg.contiguous_segment().end() ==
  996|       |                   ranges::end(r).contiguous_segment().end();
  997|       |        }
  998|      0|        else {
  999|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (999:17): [True: 0, False: 0]
  ------------------
 1000|      0|                return beg.contiguous_segment().end() ==
 1001|      0|                       beg.parent()->current_view().end();
 1002|      0|            }
 1003|      0|            return true;
 1004|      0|        }
 1005|       |    }
 1006|       |    else {
 1007|       |        return false;
 1008|       |    }
 1009|  1.07M|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1955|  2.82M|{
 1956|  2.82M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  945|  2.82M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  2.82M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|  2.82M|    else {
 1967|  2.82M|        auto it = range.begin();
 1968|  2.82M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 1.73M, False: 1.08M]
  ------------------
 1969|  1.73M|            return ranges::next(it, count);
 1970|  1.73M|        }
 1971|       |
 1972|  4.30M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 3.25M, False: 1.05M]
  ------------------
 1973|  3.25M|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 35.3k, False: 3.21M]
  ------------------
 1974|  35.3k|                return unexpected(eof_error::eof);
 1975|  35.3k|            }
 1976|  3.25M|        }
 1977|       |
 1978|  1.05M|        return it;
 1979|  1.08M|    }
 1980|  2.82M|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1095|  2.82M|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|  2.82M|                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|  2.82M|        else {
 1107|  2.82M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1107:17): [True: 2.82M, False: 0]
  ------------------
 1108|  2.82M|                return static_cast<size_t>(
 1109|  2.82M|                    r.begin().parent()->chars_available() -
 1110|  2.82M|                    r.begin().position());
 1111|  2.82M|            }
 1112|      0|            return r.begin().contiguous_segment().size();
 1113|  2.82M|        }
 1114|       |    }
 1115|       |    else {
 1116|       |        return 0;
 1117|       |    }
 1118|  2.82M|}
_ZNK3scn2v44impl12function_refIFbcES3_EclEc:
  762|  28.2M|    {
  763|  28.2M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  951|  28.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  28.2M|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  2.58M|        : m_fptr([](storage fn,
  743|  2.58M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.58M|              cvref<T> obj = *get<T>(fn);
  745|  2.58M|              if constexpr (std::is_void_v<R>) {
  746|  2.58M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.58M|              }
  748|  2.58M|              else {
  749|  2.58M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.58M|              }
  751|  2.58M|          }),
  752|  2.58M|          m_storage(std::addressof(f))
  753|  2.58M|    {
  754|  2.58M|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEcE_clESK_c:
  743|  14.1M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  14.1M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  14.1M|              else {
  749|  14.1M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  14.1M|              }
  751|  14.1M|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  14.1M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  14.1M|        else if constexpr (std::is_object_v<T>) {
  688|  14.1M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  14.1M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  2.58M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.58M|        {
  662|  2.58M|        }
_ZNK3scn2v44impl12function_refIFbDiES3_EclEDi:
  762|  8.53M|    {
  763|  8.53M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  951|  8.53M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  8.53M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  2.18M|        : m_fptr([](storage fn,
  743|  2.18M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.18M|              cvref<T> obj = *get<T>(fn);
  745|  2.18M|              if constexpr (std::is_void_v<R>) {
  746|  2.18M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.18M|              }
  748|  2.18M|              else {
  749|  2.18M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.18M|              }
  751|  2.18M|          }),
  752|  2.18M|          m_storage(std::addressof(f))
  753|  2.18M|    {
  754|  2.18M|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|  3.84M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.84M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  3.84M|              else {
  749|  3.84M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.84M|              }
  751|  3.84M|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  3.84M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  3.84M|        else if constexpr (std::is_object_v<T>) {
  688|  3.84M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  3.84M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  2.18M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.18M|        {
  662|  2.18M|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_b:
 6074|   775k|    {
 6075|   775k|        const bool need_skipped_width =
 6076|   775k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6076:13): [True: 0, False: 775k]
  |  Branch (6076:33): [True: 0, False: 775k]
  ------------------
 6077|   775k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6078|       |
 6079|       |        // Read prefix
 6080|   775k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6080:13): [True: 0, False: 775k]
  ------------------
 6081|   775k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6081:13): [True: 0, False: 775k]
  ------------------
 6082|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6083|      0|                             need_skipped_width);
 6084|      0|        }
 6085|   775k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6085:13): [True: 775k, False: 0]
  |  Branch (6085:56): [True: 775k, False: 0]
  ------------------
 6086|       |            // Default alignment:
 6087|       |            // Skip preceding whitespace, if required by the reader
 6088|   775k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6088:17): [True: 0, False: 775k]
  ------------------
 6089|      0|                auto max_width_view = take_width(rng, specs.precision);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6093|      0|            }
 6094|  1.53M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|   775k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   775k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   775k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|   775k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 14.8k, False: 760k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  14.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  14.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  14.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  14.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  14.8k|    }                                                  \
  |  |  |  | 3939|   775k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|   760k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|  1.53M|                            make_eof_scan_error));
 6096|       |
 6097|  1.53M|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 760k]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|   760k|            return result_type{it, 0};
 6105|  1.53M|        }
 6106|       |
 6107|      0|        return result_type{rng.begin(), 0};
 6108|   775k|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2074|  2.06M|{
 2075|  2.06M|    return read_until_code_unit(range, std::not_fn(pred));
 2076|  2.06M|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2055|  2.06M|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|  2.06M|    else {
 2060|  2.06M|        auto first = range.begin();
 2061|  11.4M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 11.4M, False: 27.1k]
  ------------------
 2062|  11.4M|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 2.03M, False: 9.38M]
  ------------------
 2063|  2.03M|                return first;
 2064|  2.03M|            }
 2065|  11.4M|        }
 2066|  27.1k|        return first;
 2067|  2.06M|    }
 2068|  2.06M|}
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  1.81M|    {
  108|  1.81M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  1.81M|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  1.81M|    {
   94|  1.81M|        iter_difference_t<I> counter{0};
   95|  18.3M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 16.5M, False: 1.81M]
  ------------------
   96|  16.5M|            ++i;
   97|  16.5M|            ++counter;
   98|  16.5M|        }
   99|  1.81M|        return counter;
  100|  1.81M|    }
_ZZN3scn2v44impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|  3.42M|    return [code, msg](parse_error err) {
  869|  3.42M|        assert(err != parse_error::good);
  870|  3.42M|        return make_scan_error_from_parse_error(err, code, msg).error();
  871|  3.42M|    };
_ZN3scn2v44impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1878|   397k|    {
 1879|   397k|        auto stdloc = loc.get<std::locale>();
 1880|   397k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1881|   397k|        grouping = numpunct.grouping();
 1882|   397k|        thousands_sep =
 1883|   397k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1883:13): [True: 0, False: 397k]
  ------------------
 1884|   397k|        decimal_point = numpunct.decimal_point();
 1885|   397k|    }
_ZN3scn2v44impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1815|   397k|{
 1816|   397k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1816:9): [True: 397k, False: 0]
  ------------------
 1817|   397k|        return std::use_facet<Facet>(stdloc);
 1818|   397k|    }
 1819|      0|    stdloc = std::locale(stdloc, new Facet{});
 1820|      0|    return std::use_facet<Facet>(stdloc);
 1821|   397k|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1944|  3.01M|{
 1945|  3.01M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  880|  3.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 19.8k, False: 2.99M]
  |  |  ------------------
  ------------------
 1946|  19.8k|        return unexpected(e);
 1947|  19.8k|    }
 1948|       |
 1949|  2.99M|    return ranges::next(range.begin());
 1950|  3.01M|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|  4.38M|{
  951|  4.38M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  880|  4.38M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 39.5k, False: 4.35M]
  |  |  ------------------
  ------------------
  952|  39.5k|        return eof_error::eof;
  953|  39.5k|    }
  954|  4.35M|    return eof_error::good;
  955|  4.38M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|  6.12M|{
  945|  6.12M|    return is_range_eof(r.begin(), r.end());
  946|  6.12M|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|  6.12M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  6.12M|    {
  938|  6.12M|        return begin == end;
  939|  6.12M|    }
  940|  6.12M|}
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|  2.99M|    {
  296|  2.99M|        ++x;
  297|  2.99M|        return x;
  298|  2.99M|    }
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3257|  1.16M|{
 3258|  1.16M|    auto r = read_one_of_code_unit(range, "+-");
 3259|  1.16M|    if (!r) {
  ------------------
  |  Branch (3259:9): [True: 881k, False: 281k]
  ------------------
 3260|   881k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3260:13): [True: 880k, False: 279]
  ------------------
 3261|   880k|            return std::pair{range.begin(), sign_type::default_sign};
 3262|   880k|        }
 3263|    279|        return unexpected(eof_error::eof);
 3264|   881k|    }
 3265|       |
 3266|   281k|    auto& it = *r;
 3267|   281k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3267:9): [True: 117k, False: 163k]
  ------------------
 3268|   117k|        return std::pair{it, sign_type::minus_sign};
 3269|   117k|    }
 3270|   163k|    return std::pair{it, sign_type::plus_sign};
 3271|   281k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2371|  2.01M|{
 2372|  2.01M|    auto it = read_code_unit(range);
 2373|  2.01M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  880|  2.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 11.4k, False: 2.00M]
  |  |  ------------------
  ------------------
 2374|  11.4k|        return unexpected(make_eof_parse_error(it.error()));
 2375|  11.4k|    }
 2376|       |
 2377|  3.77M|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 3.77M, False: 1.61M]
  ------------------
 2378|  3.77M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 386k, False: 3.39M]
  ------------------
 2379|   386k|            return *it;
 2380|   386k|        }
 2381|  3.77M|    }
 2382|       |
 2383|  1.61M|    return unexpected(parse_error::error);
 2384|  2.00M|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2330|  2.82M|{
 2331|  2.82M|    using char_type = detail::char_t<Range>;
 2332|       |
 2333|       |    if constexpr (ranges::contiguous_range<Range> &&
 2334|       |                  std::is_same_v<char_type, char>) {
 2335|       |        if (range.size() < str.size()) {
 2336|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2337|       |        }
 2338|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2339|       |            return unexpected(parse_error::error);
 2340|       |        }
 2341|       |        return ranges::next(range.begin(), str.size());
 2342|       |    }
 2343|  2.82M|    else {
 2344|  2.82M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|  2.82M|            if (ch < 'A' || ch > 'Z') {
 2346|  2.82M|                return ch;
 2347|  2.82M|            }
 2348|  2.82M|            return static_cast<char_type>(ch +
 2349|  2.82M|                                          static_cast<char_type>('a' - 'A'));
 2350|  2.82M|        };
 2351|       |
 2352|  2.82M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|  2.82M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  2.82M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  2.82M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|  2.82M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 35.3k, False: 2.78M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  35.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  35.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  35.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  35.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  35.3k|    }                                                  \
  |  |  |  | 3939|  2.82M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|  2.78M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2353|  2.78M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2354|  2.78M|                        .transform_error(make_eof_parse_error));
 2355|       |
 2356|  2.78M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  880|  2.78M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 2.68M, False: 102k]
  |  |  ------------------
  ------------------
 2357|  2.78M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2358|  2.78M|                    return ascii_tolower(a) ==
 2359|  2.78M|                           static_cast<detail::char_t<Range>>(b);
 2360|  2.78M|                }))) {
 2361|  2.68M|            return unexpected(parse_error::error);
 2362|  2.68M|        }
 2363|       |
 2364|   102k|        return it;
 2365|  2.78M|    }
 2366|  2.82M|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlcE_clEc:
 2344|  3.21M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|  3.21M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2345:17): [True: 2.89M, False: 322k]
  |  Branch (2345:29): [True: 260k, False: 62.8k]
  ------------------
 2346|  3.15M|                return ch;
 2347|  3.15M|            }
 2348|  62.8k|            return static_cast<char_type>(ch +
 2349|  62.8k|                                          static_cast<char_type>('a' - 'A'));
 2350|  3.21M|        };
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2245|   999k|{
 2246|   999k|    auto it = read_code_unit(range);
 2247|   999k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  880|   999k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 8.42k, False: 990k]
  |  |  ------------------
  ------------------
 2248|  8.42k|        return unexpected(make_eof_parse_error(it.error()));
 2249|  8.42k|    }
 2250|       |
 2251|   990k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  880|   990k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 804k, False: 186k]
  |  |  ------------------
  ------------------
 2252|   990k|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|   804k|        return unexpected(parse_error::error);
 2254|   804k|    }
 2255|       |
 2256|   186k|    return *it;
 2257|   990k|}
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 2094|  2.05M|{
 2095|  2.05M|    auto it = read_while_code_unit(range, pred);
 2096|  2.05M|    if (it == range.begin()) {
  ------------------
  |  Branch (2096:9): [True: 841k, False: 1.21M]
  ------------------
 2097|   841k|        return unexpected(parse_error::error);
 2098|   841k|    }
 2099|  1.21M|    return it;
 2100|  2.05M|}
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1719|   941k|    {
 1720|   941k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|   941k|                           ranges::common_range<Range>) {
 1737|   941k|            auto beg_seg = range.begin().contiguous_segment();
 1738|   941k|            auto end_seg = range.end().contiguous_segment();
 1739|   941k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  880|   941k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 140k, False: 801k]
  |  |  ------------------
  ------------------
 1740|   941k|                             detail::to_address(end_seg.end()))) {
 1741|   140k|                auto& str = m_storage.emplace();
 1742|   140k|                str.reserve(range.end().position() - range.begin().position());
 1743|   140k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|   140k|                m_view = string_view_type{str};
 1745|   140k|                return;
 1746|   140k|            }
 1747|       |
 1748|   801k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|   801k|                                                            end_seg.data());
 1750|   801k|            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   941k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIcE4viewEv:
 1680|  6.42M|    {
 1681|  6.42M|        return m_view;
 1682|  6.42M|    }
_ZN3scn2v44impl24contiguous_range_factoryIcED2Ev:
 1670|  3.95M|    ~contiguous_range_factory() = default;
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_bll:
 6116|   693k|    {
 6117|   693k|        const bool need_skipped_width =
 6118|   693k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6118:13): [True: 0, False: 693k]
  |  Branch (6118:33): [True: 0, False: 693k]
  ------------------
 6119|   693k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6120|       |
 6121|   693k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6121:13): [True: 0, False: 693k]
  ------------------
 6122|   693k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6122:13): [True: 0, False: 693k]
  ------------------
 6123|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6124:17): [True: 0, False: 0]
  ------------------
 6125|      0|                return result_type{rng.begin(), 0};
 6126|      0|            }
 6127|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6128|      0|                             specs.fill, need_skipped_width);
 6129|      0|        }
 6130|   693k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6130:13): [True: 693k, False: 0]
  ------------------
 6131|   693k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6131:13): [True: 0, False: 693k]
  ------------------
 6132|   693k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6132:15): [True: 0, False: 0]
  |  Branch (6132:35): [True: 0, False: 0]
  ------------------
 6133|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6133:15): [True: 0, False: 0]
  ------------------
 6134|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6134:15): [True: 0, False: 0]
  ------------------
 6135|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                const auto initial_width =
 6137|      0|                    specs.precision - prefix_width - value_width;
 6138|      0|                auto max_width_view = take_width(rng, initial_width);
 6139|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6140|      0|                                  .transform_error(make_eof_scan_error));
 6141|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6142|      0|            }
 6143|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|                            make_eof_scan_error));
 6145|       |
 6146|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return result_type{
 6148|      0|                    it,
 6149|      0|                    calculate_text_width(make_contiguous_buffer(
 6150|      0|                                             ranges::subrange{rng.begin(), it})
 6151|      0|                                             .view())};
 6152|      0|            }
 6153|      0|            return result_type{it, 0};
 6154|      0|        }
 6155|   693k|        return result_type{rng.begin(), 0};
 6156|   693k|    }
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1944|  1.37M|{
 1945|  1.37M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  880|  1.37M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 4.86k, False: 1.36M]
  |  |  ------------------
  ------------------
 1946|  4.86k|        return unexpected(e);
 1947|  4.86k|    }
 1948|       |
 1949|  1.36M|    return ranges::next(range.begin());
 1950|  1.37M|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  950|  2.58M|{
  951|  2.58M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  880|  2.58M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 20.7k, False: 2.56M]
  |  |  ------------------
  ------------------
  952|  20.7k|        return eof_error::eof;
  953|  20.7k|    }
  954|  2.56M|    return eof_error::good;
  955|  2.58M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  944|  2.58M|{
  945|  2.58M|    return is_range_eof(r.begin(), r.end());
  946|  2.58M|}
_ZN3scn2v44impl12is_range_eofIPKcS4_EEbT_T0_:
  928|  2.59M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  2.59M|    {
  938|  2.59M|        return begin == end;
  939|  2.59M|    }
  940|  2.59M|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  1.37M|    {
  296|  1.37M|        ++x;
  297|  1.37M|        return x;
  298|  1.37M|    }
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3257|   943k|{
 3258|   943k|    auto r = read_one_of_code_unit(range, "+-");
 3259|   943k|    if (!r) {
  ------------------
  |  Branch (3259:9): [True: 715k, False: 228k]
  ------------------
 3260|   715k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3260:13): [True: 714k, False: 90]
  ------------------
 3261|   714k|            return std::pair{range.begin(), sign_type::default_sign};
 3262|   714k|        }
 3263|     90|        return unexpected(eof_error::eof);
 3264|   715k|    }
 3265|       |
 3266|   228k|    auto& it = *r;
 3267|   228k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3267:9): [True: 105k, False: 122k]
  ------------------
 3268|   105k|        return std::pair{it, sign_type::minus_sign};
 3269|   105k|    }
 3270|   122k|    return std::pair{it, sign_type::plus_sign};
 3271|   228k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2371|  1.09M|{
 2372|  1.09M|    auto it = read_code_unit(range);
 2373|  1.09M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  880|  1.09M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 2.04k, False: 1.08M]
  |  |  ------------------
  ------------------
 2374|  2.04k|        return unexpected(make_eof_parse_error(it.error()));
 2375|  2.04k|    }
 2376|       |
 2377|  2.04M|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 2.04M, False: 836k]
  ------------------
 2378|  2.04M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 253k, False: 1.78M]
  ------------------
 2379|   253k|            return *it;
 2380|   253k|        }
 2381|  2.04M|    }
 2382|       |
 2383|   836k|    return unexpected(parse_error::error);
 2384|  1.08M|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3343|  6.83k|{
 3344|  6.83k|    switch (base) {
 3345|      0|        case 2:
  ------------------
  |  Branch (3345:9): [True: 0, False: 6.83k]
  ------------------
 3346|       |            // allow 0b/0B
 3347|      0|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3348|      0|                    false};
 3349|       |
 3350|      0|        case 8: {
  ------------------
  |  Branch (3350:9): [True: 0, False: 6.83k]
  ------------------
 3351|       |            // allow 0o/0O/0
 3352|      0|            bool zero_parsed = false;
 3353|      0|            auto it = apply_opt(
 3354|      0|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3355|      0|            return {it, 8, zero_parsed};
 3356|      0|        }
 3357|       |
 3358|      0|        case 16:
  ------------------
  |  Branch (3358:9): [True: 0, False: 6.83k]
  ------------------
 3359|       |            // allow 0x/0X
 3360|      0|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3361|      0|                    false};
 3362|       |
 3363|      0|        case 0:
  ------------------
  |  Branch (3363:9): [True: 0, False: 6.83k]
  ------------------
 3364|       |            // detect base
 3365|      0|            return parse_integer_base_prefix_for_detection(range);
 3366|       |
 3367|  6.83k|        default:
  ------------------
  |  Branch (3367:9): [True: 6.83k, False: 0]
  ------------------
 3368|       |            // no base prefix allowed
 3369|  6.83k|            return {range.begin(), base, false};
 3370|  6.83k|    }
 3371|  6.83k|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2330|  2.44M|{
 2331|  2.44M|    using char_type = detail::char_t<Range>;
 2332|       |
 2333|       |    if constexpr (ranges::contiguous_range<Range> &&
 2334|  2.44M|                  std::is_same_v<char_type, char>) {
 2335|  2.44M|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2335:13): [True: 35.2k, False: 2.40M]
  ------------------
 2336|  35.2k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2337|  35.2k|        }
 2338|  2.40M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2338:13): [True: 2.31M, False: 94.6k]
  ------------------
 2339|  2.31M|            return unexpected(parse_error::error);
 2340|  2.31M|        }
 2341|  94.6k|        return ranges::next(range.begin(), str.size());
 2342|       |    }
 2343|       |    else {
 2344|       |        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|       |            if (ch < 'A' || ch > 'Z') {
 2346|       |                return ch;
 2347|       |            }
 2348|       |            return static_cast<char_type>(ch +
 2349|       |                                          static_cast<char_type>('a' - 'A'));
 2350|       |        };
 2351|       |
 2352|       |        SCN_TRY(it, read_exactly_n_code_units(
 2353|       |                        range, static_cast<std::ptrdiff_t>(str.size()))
 2354|       |                        .transform_error(make_eof_parse_error));
 2355|       |
 2356|       |        if (SCN_UNLIKELY(!std::equal(
 2357|       |                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2358|       |                    return ascii_tolower(a) ==
 2359|       |                           static_cast<detail::char_t<Range>>(b);
 2360|       |                }))) {
 2361|       |            return unexpected(parse_error::error);
 2362|       |        }
 2363|       |
 2364|       |        return it;
 2365|       |    }
 2366|  2.44M|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2245|   283k|{
 2246|   283k|    auto it = read_code_unit(range);
 2247|   283k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  880|   283k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 2.82k, False: 280k]
  |  |  ------------------
  ------------------
 2248|  2.82k|        return unexpected(make_eof_parse_error(it.error()));
 2249|  2.82k|    }
 2250|       |
 2251|   280k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  880|   280k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 227k, False: 52.4k]
  |  |  ------------------
  ------------------
 2252|   280k|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|   227k|        return unexpected(parse_error::error);
 2254|   227k|    }
 2255|       |
 2256|  52.4k|    return *it;
 2257|   280k|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3410|  6.83k|{
 3411|  6.83k|    using char_type = detail::char_t<Range>;
 3412|       |
 3413|  6.83k|    if constexpr (ranges::contiguous_range<Range>) {
 3414|  6.83k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  880|  6.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 6.83k]
  |  |  ------------------
  ------------------
 3415|      0|            return detail::unexpected_scan_error(
 3416|      0|                scan_error::invalid_scanned_value,
 3417|      0|                "Failed to parse integer: No digits found");
 3418|      0|        }
 3419|  6.83k|        return range.end();
 3420|       |    }
 3421|       |    else {
 3422|       |        return read_while1_code_unit(range,
 3423|       |                                     [&](char_type ch) noexcept {
 3424|       |                                         return char_to_int(ch) < base;
 3425|       |                                     })
 3426|       |            .transform_error(map_parse_error_to_scan_error(
 3427|       |                scan_error::invalid_scanned_value,
 3428|       |                "Failed to parse integer: No digits found"));
 3429|       |    }
 3430|  6.83k|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|  6.83k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|  6.83k|                  ranges::sized_range<Range>) {
 1785|  6.83k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  951|  6.83k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|  6.83k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1587|  6.83k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|  6.83k|    {
 1589|  6.83k|    }
_ZNK3scn2v44impl19string_view_wrapperIcE4viewEv:
 1601|  3.54M|    {
 1602|  3.54M|        return sv;
 1603|  3.54M|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2074|   520k|{
 2075|   520k|    return read_until_code_unit(range, std::not_fn(pred));
 2076|   520k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2055|   520k|{
 2056|   520k|    if constexpr (ranges::common_range<Range>) {
 2057|   520k|        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|       |    else {
 2060|       |        auto first = range.begin();
 2061|       |        for (; first != range.end(); ++first) {
 2062|       |            if (pred(*first)) {
 2063|       |                return first;
 2064|       |            }
 2065|       |        }
 2066|       |        return first;
 2067|       |    }
 2068|   520k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3065|   930k|{
 3066|   930k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 930k, False: 0]
  ------------------
 3067|   930k|        auto it = read_while_classic_space(range);
 3068|   930k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|   930k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  880|   930k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 11.9k, False: 918k]
  |  |  ------------------
  ------------------
 3070|  11.9k|            return unexpected(e);
 3071|  11.9k|        }
 3072|       |
 3073|   918k|        return it;
 3074|   930k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|   930k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2215|   930k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|   930k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|   930k|        auto buf = make_contiguous_buffer(range);
 2220|   930k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|   930k|        return ranges::next(range.begin(),
 2222|   930k|                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|       |    else {
 2225|       |        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|       |            return detail::is_cp_space(cp);
 2238|       |        });
 2239|       |    }
 2240|   930k|}
_ZN3scn2v44impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|   930k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|   930k|                  ranges::sized_range<Range>) {
 1785|   930k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  951|   930k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|   930k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1587|   930k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|   930k|    {
 1589|   930k|    }
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  2.85M|    {
  304|  2.85M|        ranges::advance(x, n);
  305|  2.85M|        return x;
  306|  2.85M|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  3.79M|    {
  268|  3.79M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  3.79M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  3.79M|    {
  181|  18.1M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 14.3M, False: 3.79M]
  ------------------
  182|  14.3M|            ++i;
  183|  14.3M|        }
  184|  3.79M|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIfEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6226|   248k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|       |                          basic_contiguous_scan_context<char_type>>) {
 6231|       |            auto rd = make_reader<T, char_type>();
 6232|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6233|       |            return impl(rd, range, value);
 6234|       |        }
 6235|   248k|        else if constexpr (!detail::is_type_disabled<T>) {
 6236|   248k|            auto rd = make_reader<T, char_type>();
 6237|   248k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   248k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  880|   248k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 0, False: 248k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6238|       |
 6239|   248k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6239:17): [True: 248k, False: 0]
  |  Branch (6239:50): [True: 0, False: 0]
  ------------------
 6240|   248k|                specs.width != 0) {
  ------------------
  |  Branch (6240:17): [True: 0, False: 0]
  ------------------
 6241|   248k|                return impl(rd, range, value);
 6242|   248k|            }
 6243|       |
 6244|      0|            auto crange = get_as_contiguous(range);
 6245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            return ranges::next(range.begin(),
 6247|      0|                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|   248k|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3155|  1.43M|    {
 3156|  1.43M|        reader_error_handler eh{};
 3157|  1.43M|        get_derived().check_specs_impl(specs, eh);
 3158|  1.43M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  880|  1.43M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 1.43M]
  |  |  ------------------
  ------------------
 3159|      0|            return detail::unexpected_scan_error(
 3160|      0|                scan_error::invalid_format_string, eh.m_msg);
 3161|      0|        }
 3162|  1.43M|        return {};
 3163|  1.43M|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3167|  1.43M|    {
 3168|  1.43M|        return static_cast<Derived&>(*this);
 3169|  1.43M|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4177|  1.43M|    {
 4178|  1.43M|        detail::check_float_type_specs(specs, eh);
 4179|  1.43M|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6161|   248k|    {
 6162|   248k|        const bool need_skipped_width =
 6163|   248k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 248k]
  |  Branch (6163:33): [True: 0, False: 248k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|   248k|        auto it = rng.begin();
 6167|   248k|        std::ptrdiff_t prefix_width = 0;
 6168|   248k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 248k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|   248k|        else {
 6176|   248k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   248k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   248k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   248k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|   248k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 4.47k, False: 244k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.47k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.47k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.47k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.47k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.47k|    }                                                  \
  |  |  |  | 3939|   248k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|   244k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|   244k|            std::tie(it, prefix_width) = prefix_result;
 6178|   244k|        }
 6179|   244k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|   244k|        std::ptrdiff_t value_width = 0;
 6183|   244k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 244k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|   244k|        else {
 6199|   244k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   244k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   244k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  880|   244k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 19.0k, False: 225k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  19.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  19.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  19.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  19.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  19.0k|    }                                                  \
  |  | 3939|   244k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  951|   244k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|   225k|                                             specs, value, loc));
 6201|       |
 6202|   225k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 225k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|   225k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|   225k|        std::ptrdiff_t postfix_width = 0;
 6211|   225k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 221k, False: 3.58k]
  ------------------
 6212|   221k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   221k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   221k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   221k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|   221k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 221k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   221k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|   221k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|   221k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|   221k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|   221k|                                 value_width));
 6216|   221k|            std::tie(it, postfix_width) = postfix_result;
 6217|   221k|        }
 6218|       |
 6219|   225k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   225k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  880|   225k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 0, False: 225k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|   225k|            specs, prefix_width, value_width, postfix_width));
 6221|   225k|        return it;
 6222|   225k|    }
_ZNK3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3150|  3.28M|    {
 3151|  3.28M|        return true;
 3152|  3.28M|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4249|  1.40M|    {
 4250|  1.40M|        unsigned options{};
 4251|  1.40M|        if (specs.localized) {
  ------------------
  |  Branch (4251:13): [True: 397k, False: 1.01M]
  ------------------
 4252|   397k|            options |= float_reader_base::allow_thsep;
 4253|   397k|        }
 4254|       |
 4255|  1.40M|        SCN_GCC_COMPAT_PUSH
 4256|  1.40M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4257|       |
 4258|  1.40M|        switch (specs.type) {
 4259|   210k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4259:13): [True: 210k, False: 1.19M]
  ------------------
 4260|   210k|                return options | float_reader_base::allow_fixed;
 4261|       |
 4262|  41.3k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4262:13): [True: 41.3k, False: 1.36M]
  ------------------
 4263|  41.3k|                return options | float_reader_base::allow_scientific;
 4264|       |
 4265|   429k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4265:13): [True: 429k, False: 978k]
  ------------------
 4266|   429k|                return options | float_reader_base::allow_hex;
 4267|       |
 4268|   329k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4268:13): [True: 329k, False: 1.07M]
  ------------------
 4269|   329k|                return options | float_reader_base::allow_scientific |
 4270|   329k|                       float_reader_base::allow_fixed;
 4271|       |
 4272|   397k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4272:13): [True: 397k, False: 1.01M]
  ------------------
 4273|   397k|                return options | float_reader_base::allow_scientific |
 4274|   397k|                       float_reader_base::allow_fixed |
 4275|   397k|                       float_reader_base::allow_hex;
 4276|       |
 4277|      0|            default:
  ------------------
  |  Branch (4277:13): [True: 0, False: 1.40M]
  ------------------
 4278|      0|                SCN_EXPECT(false);
  ------------------
  |  |  945|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4279|  1.40M|                SCN_UNREACHABLE;
  ------------------
  |  |  908|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4280|  1.40M|        }
 4281|       |
 4282|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4283|  1.40M|    }
_ZN3scn2v44impl12float_readerIcEC2Ej:
 3701|  1.40M|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v44impl35localized_number_formatting_optionsIcEC2Ev:
 1869|  1.97M|    localized_number_formatting_options() = default;
_ZN3scn2v44impl24contiguous_range_factoryIcEC2Ev:
 1630|  3.95M|    contiguous_range_factory() = default;
_ZN3scn2v44impl12float_readerIcE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3732|   602k|    {
 3733|   602k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  945|   602k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   602k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3734|       |
 3735|   602k|        const std::ptrdiff_t sign_len =
 3736|   602k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3736:13): [True: 150k, False: 452k]
  ------------------
 3737|       |
 3738|   602k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3940|   602k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   602k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   602k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|   602k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 16.5k, False: 585k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  16.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  16.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  16.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  16.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  16.5k|    }                                                  \
  |  |  |  | 3939|   602k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|   585k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3739|   585k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3740|   602k|    }
_ZN3scn2v44impl12float_readerIcE17handle_separatorsEv:
 4089|  1.87M|    {
 4090|  1.87M|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4090:13): [True: 1.87M, False: 0]
  ------------------
 4091|  1.87M|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4091:13): [True: 1.87M, False: 0]
  ------------------
 4092|  1.87M|            return;
 4093|  1.87M|        }
 4094|       |
 4095|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4096|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4096:13): [True: 0, False: 0]
  ------------------
 4097|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4097:27): [True: 0, False: 0]
  ------------------
 4098|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4098:21): [True: 0, False: 0]
  ------------------
 4099|      0|                    ch = CharT{'.'};
 4100|      0|                }
 4101|      0|            }
 4102|      0|        }
 4103|       |
 4104|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4104:13): [True: 0, False: 0]
  ------------------
 4105|      0|            return;
 4106|      0|        }
 4107|       |
 4108|      0|        auto first =
 4109|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4110|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4110:13): [True: 0, False: 0]
  ------------------
 4111|      0|            return;
 4112|      0|        }
 4113|       |
 4114|      0|        m_thsep_indices.push_back(
 4115|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4116|       |
 4117|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4117:31): [True: 0, False: 0]
  ------------------
 4118|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4118:17): [True: 0, False: 0]
  ------------------
 4119|      0|                *first++ = std::move(*it);
 4120|      0|            }
 4121|      0|            else {
 4122|      0|                m_thsep_indices.push_back(
 4123|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4124|      0|            }
 4125|      0|        }
 4126|       |
 4127|      0|        str.erase(first, str.end());
 4128|      0|    }
_ZNK3scn2v44impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1685|  2.14M|    {
 1686|  2.14M|        return m_storage.has_value();
 1687|  2.14M|    }
_ZNR3scn2v44impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1690|  1.25M|    {
 1691|  1.25M|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  945|  1.25M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  1.25M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1692|  1.25M|        return *m_storage;
 1693|  1.25M|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4202|   244k|    {
 4203|   244k|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|   244k|#if !SCN_DISABLE_LOCALE
 4206|   244k|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 68.4k, False: 176k]
  ------------------
 4207|  68.4k|            return read_impl<Range>(
 4208|  68.4k|                range, rd,
 4209|  68.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  68.4k|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|  68.4k|                },
 4212|  68.4k|                value, loc);
 4213|  68.4k|        }
 4214|   176k|#endif
 4215|       |
 4216|   176k|        return read_impl<Range>(
 4217|   176k|            range, rd,
 4218|   176k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   176k|                return r.read_source(SCN_FWD(args)...);
 4220|   176k|            },
 4221|   176k|            value);
 4222|   244k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4238|   339k|    {
 4239|   339k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|   339k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  880|   339k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 21.6k, False: 317k]
  |  |  ------------------
  ------------------
 4241|  21.6k|            return unexpected(r.error());
 4242|  21.6k|        }
 4243|       |
 4244|   317k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   317k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   317k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   317k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|   317k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 3.11k, False: 314k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  3.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  3.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  3.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  3.11k|    }                                                  \
  |  |  |  | 3939|   317k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|   314k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|   314k|        return ranges::next(range.begin(), n);
 4246|   317k|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|  1.05M|    {
  763|  1.05M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  951|  1.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.05M|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  68.4k|        : m_fptr([](storage fn,
  743|  68.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  68.4k|              cvref<T> obj = *get<T>(fn);
  745|  68.4k|              if constexpr (std::is_void_v<R>) {
  746|  68.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  68.4k|              }
  748|  68.4k|              else {
  749|  68.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  68.4k|              }
  751|  68.4k|          }),
  752|  68.4k|          m_storage(std::addressof(f))
  753|  68.4k|    {
  754|  68.4k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  68.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  68.4k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  68.4k|              else {
  749|  68.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  68.4k|              }
  751|  68.4k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  68.4k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  68.4k|        else if constexpr (std::is_object_v<T>) {
  688|  68.4k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  68.4k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4209|  68.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  68.4k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  951|  68.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|  68.4k|                },
_ZN3scn2v44impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3720|   217k|    {
 3721|   217k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3722|   217k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  879|   217k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (879:25): [True: 0, False: 217k]
  |  |  ------------------
  ------------------
 3723|      0|            m_locale_options.thousands_sep = CharT{0};
 3724|      0|        }
 3725|       |
 3726|   217k|        return read_source_impl(range);
 3727|   217k|    }
_ZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3746|  1.05M|    {
 3747|  1.05M|        SCN_TRY(sign_result,
  ------------------
  |  | 3940|  1.05M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.05M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.05M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|  1.05M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 1.05M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  1.05M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|  1.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3748|  1.05M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3749|  1.05M|        auto it = sign_result.first;
 3750|  1.05M|        m_sign = sign_result.second;
 3751|       |
 3752|  1.05M|        auto digits_begin = it;
 3753|  1.05M|        auto r = ranges::subrange{it, range.end()};
 3754|       |        if constexpr (ranges::contiguous_range<Range> &&
 3755|       |                      ranges::sized_range<Range>) {
 3756|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3757|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3758|       |                SCN_TRY_ASSIGN(
 3759|       |                    it,
 3760|       |                    do_read_source_impl(
 3761|       |                        r,
 3762|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3763|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3764|       |            }
 3765|       |            else {
 3766|       |                auto cb = [&](const auto& rr)
 3767|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3768|       |                    auto res = read_all(rr);
 3769|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3770|       |                        return detail::unexpected_scan_error(
 3771|       |                            scan_error::invalid_scanned_value,
 3772|       |                            "Invalid float value");
 3773|       |                    }
 3774|       |                    return res;
 3775|       |                };
 3776|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3777|       |            }
 3778|       |        }
 3779|  1.05M|        else {
 3780|  1.05M|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3935|  1.05M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  1.05M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  880|  1.05M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 67.1k, False: 990k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  67.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  67.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  67.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  67.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  67.1k|    }                                                  \
  |  | 3939|  1.05M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  951|  1.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3781|   990k|                it,
 3782|   990k|                do_read_source_impl(
 3783|   990k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3784|   990k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3785|   990k|        }
 3786|       |
 3787|  1.05M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  945|  1.05M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  1.05M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3788|       |
 3789|   990k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3789:13): [True: 984k, False: 5.54k]
  |  Branch (3789:48): [True: 979k, False: 4.79k]
  ------------------
 3790|   990k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3790:13): [True: 940k, False: 39.5k]
  ------------------
 3791|   990k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3791:13): [True: 936k, False: 4.29k]
  ------------------
 3792|   936k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3793|   936k|        }
 3794|       |
 3795|   990k|        handle_separators();
 3796|       |
 3797|   990k|        return it;
 3798|  1.05M|    }
_ZN3scn2v44impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 4032|  1.05M|    {
 4033|  1.05M|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4034|  1.05M|        const bool allowed_nonhex =
 4035|  1.05M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4036|  1.05M|             ~static_cast<unsigned>(allow_hex)) != 0;
 4037|       |
 4038|  1.05M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4038:39): [True: 1.04M, False: 10.3k]
  |  Branch (4038:45): [True: 0, False: 1.04M]
  ------------------
 4039|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4040|      0|                scan_error::invalid_scanned_value,
 4041|      0|                "Invalid infinite floating-point value"));
 4042|      0|        }
 4043|  1.05M|        else if (r) {
  ------------------
  |  Branch (4043:18): [True: 10.3k, False: 1.04M]
  ------------------
 4044|  10.3k|            return *r;
 4045|  10.3k|        }
 4046|       |
 4047|  1.04M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4047:39): [True: 1.00M, False: 43.8k]
  |  Branch (4047:45): [True: 1.49k, False: 1.00M]
  ------------------
 4048|  1.49k|            return unexpected(r.error());
 4049|  1.49k|        }
 4050|  1.04M|        else if (r) {
  ------------------
  |  Branch (4050:18): [True: 43.8k, False: 1.00M]
  ------------------
 4051|  43.8k|            return *r;
 4052|  43.8k|        }
 4053|       |
 4054|  1.00M|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4054:13): [True: 708k, False: 292k]
  |  Branch (4054:28): [True: 222k, False: 486k]
  ------------------
 4055|       |            // only hex allowed:
 4056|       |            // prefix "0x" allowed, not required
 4057|   222k|            auto it = range.begin();
 4058|       |
 4059|   222k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4059:22): [True: 12.6k, False: 210k]
  ------------------
 4060|  12.6k|                m_kind = float_kind::hex_with_prefix;
 4061|  12.6k|                it = *r;
 4062|  12.6k|            }
 4063|   210k|            else {
 4064|   210k|                m_kind = float_kind::hex_without_prefix;
 4065|   210k|            }
 4066|       |
 4067|   222k|            return read_hex(ranges::subrange{it, range.end()});
 4068|   222k|        }
 4069|   779k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4069:13): [True: 292k, False: 486k]
  |  Branch (4069:29): [True: 292k, False: 0]
  ------------------
 4070|       |            // only nonhex allowed:
 4071|       |            // no prefix allowed
 4072|   292k|            m_kind = float_kind::generic;
 4073|   292k|            return read_regular_float(range);
 4074|   292k|        }
 4075|       |        // both hex and nonhex allowed:
 4076|       |        // check for "0x" prefix -> hex,
 4077|       |        // regular otherwise
 4078|       |
 4079|   486k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  880|   486k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 29.6k, False: 456k]
  |  |  ------------------
  ------------------
 4080|  29.6k|            m_kind = float_kind::hex_with_prefix;
 4081|  29.6k|            return read_hex(ranges::subrange{*r, range.end()});
 4082|  29.6k|        }
 4083|       |
 4084|   456k|        m_kind = float_kind::generic;
 4085|   456k|        return read_regular(range);
 4086|   486k|    }
_ZN3scn2v44impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3840|  1.05M|    {
 3841|  1.05M|        auto it = range.begin();
 3842|  1.05M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3842:73): [True: 1.04M, False: 10.3k]
  ------------------
 3843|  1.04M|            return unexpected(r.error());
 3844|  1.04M|        }
 3845|  10.3k|        else {
 3846|  10.3k|            it = *r;
 3847|  10.3k|        }
 3848|       |
 3849|  10.3k|        if (auto r = read_matching_string_classic_nocase(
 3850|  10.3k|                ranges::subrange{it, range.end()}, "inity");
 3851|  10.3k|            !r) {
  ------------------
  |  Branch (3851:13): [True: 5.54k, False: 4.79k]
  ------------------
 3852|  5.54k|            m_kind = float_kind::inf_short;
 3853|  5.54k|            return it;
 3854|  5.54k|        }
 3855|  4.79k|        else {
 3856|  4.79k|            m_kind = float_kind::inf_long;
 3857|  4.79k|            return *r;
 3858|  4.79k|        }
 3859|  10.3k|    }
_ZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3863|  1.04M|    {
 3864|  1.04M|        auto it = range.begin();
 3865|  1.04M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3865:73): [True: 1.00M, False: 45.3k]
  ------------------
 3866|  1.00M|            return r.transform_error(map_parse_error_to_scan_error(
 3867|  1.00M|                scan_error::invalid_scanned_value,
 3868|  1.00M|                "Invalid floating-point NaN value"));
 3869|  1.00M|        }
 3870|  45.3k|        else {
 3871|  45.3k|            it = *r;
 3872|  45.3k|        }
 3873|       |
 3874|  45.3k|        if (auto r =
 3875|  45.3k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3876|  45.3k|            !r) {
  ------------------
  |  Branch (3876:13): [True: 39.5k, False: 5.78k]
  ------------------
 3877|  39.5k|            m_kind = float_kind::nan_simple;
 3878|  39.5k|            return it;
 3879|  39.5k|        }
 3880|  5.78k|        else {
 3881|  5.78k|            it = *r;
 3882|  5.78k|        }
 3883|       |
 3884|  5.78k|        auto payload_beg_it = it;
 3885|  5.78k|        it = read_while_code_unit(
 3886|  5.78k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3887|  5.78k|                return is_ascii_char(ch) &&
 3888|  5.78k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3889|  5.78k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3890|  5.78k|            });
 3891|  5.78k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3892|       |
 3893|  5.78k|        m_kind = float_kind::nan_with_payload;
 3894|  5.78k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3894:18): [True: 4.29k, False: 1.49k]
  ------------------
 3895|  5.78k|                                             ')')) {
 3896|  4.29k|            return *r;
 3897|  4.29k|        }
 3898|  1.49k|        return detail::unexpected_scan_error(
 3899|  1.49k|            scan_error::invalid_scanned_value,
 3900|  1.49k|            "Invalid floating-point NaN payload");
 3901|  5.78k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|  5.78k|        : m_fptr([](storage fn,
  743|  5.78k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.78k|              cvref<T> obj = *get<T>(fn);
  745|  5.78k|              if constexpr (std::is_void_v<R>) {
  746|  5.78k|                  obj(static_cast<decltype(args)>(args)...);
  747|  5.78k|              }
  748|  5.78k|              else {
  749|  5.78k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.78k|              }
  751|  5.78k|          }),
  752|  5.78k|          m_storage(std::addressof(f))
  753|  5.78k|    {
  754|  5.78k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  88.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  88.0k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  88.0k|              else {
  749|  88.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  88.0k|              }
  751|  88.0k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_EUlcE_EEDaNS3_7storageE:
  683|  88.0k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  88.0k|        else if constexpr (std::is_object_v<T>) {
  688|  88.0k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  88.0k|    }
_ZZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlcE_clEc:
 3886|  88.0k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3887|  88.0k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3887:24): [True: 87.9k, False: 83]
  ------------------
 3888|  88.0k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3888:26): [True: 83.3k, False: 4.65k]
  |  Branch (3888:39): [True: 75.3k, False: 7.96k]
  |  Branch (3888:54): [True: 2.67k, False: 9.94k]
  |  Branch (3888:67): [True: 2.59k, False: 83]
  ------------------
 3889|  87.9k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3889:26): [True: 5.37k, False: 4.65k]
  |  Branch (3889:39): [True: 2.53k, False: 2.84k]
  |  Branch (3889:53): [True: 2.72k, False: 4.77k]
  ------------------
 3890|  88.0k|            });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  5.78k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  5.78k|        {
  662|  5.78k|        }
_ZN3scn2v44impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3833|   708k|    {
 3834|   708k|        return read_matching_string_classic_nocase(range, "0x");
 3835|   708k|    }
_ZN3scn2v44impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3934|   252k|    {
 3935|   252k|        auto it = range.begin();
 3936|       |
 3937|   252k|        std::ptrdiff_t digits_count = 0;
 3938|   252k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3939|   252k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  880|   252k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 8.34k, False: 244k]
  |  |  ------------------
  ------------------
 3940|  8.34k|            return r.transform_error(map_parse_error_to_scan_error(
 3941|  8.34k|                scan_error::invalid_scanned_value,
 3942|  8.34k|                "Invalid hexadecimal floating-point value"));
 3943|  8.34k|        }
 3944|   244k|        else {
 3945|   244k|            digits_count += ranges::distance(it, *r);
 3946|   244k|            it = *r;
 3947|   244k|        }
 3948|       |
 3949|   244k|        m_integral_part_length = digits_count;
 3950|   244k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3950:18): [True: 37.5k, False: 206k]
  ------------------
 3951|   244k|                                             m_locale_options.decimal_point)) {
 3952|  37.5k|            it = *r;
 3953|  37.5k|        }
 3954|       |
 3955|   244k|        if (auto r =
  ------------------
  |  Branch (3955:18): [True: 33.8k, False: 210k]
  ------------------
 3956|   244k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3957|  33.8k|            digits_count += ranges::distance(it, *r);
 3958|  33.8k|            it = *r;
 3959|  33.8k|        }
 3960|       |
 3961|   244k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  880|   244k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 244k]
  |  |  ------------------
  ------------------
 3962|      0|            return detail::unexpected_scan_error(
 3963|      0|                scan_error::invalid_scanned_value,
 3964|      0|                "No significand digits in hexfloat");
 3965|      0|        }
 3966|       |
 3967|   244k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3968|       |
 3969|   244k|        return it;
 3970|   244k|    }
_ZN3scn2v44impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3818|   496k|    {
 3819|   496k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  880|   496k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 496k]
  |  |  |  Branch (880:45): [True: 0, False: 496k]
  |  |  |  Branch (880:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3820|   496k|                         thsep_allowed)) {
 3821|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3822|      0|                return char_to_int(ch) < 16 ||
 3823|      0|                       ch == m_locale_options.thousands_sep;
 3824|      0|            });
 3825|      0|        }
 3826|       |
 3827|   496k|        return read_while1_code_unit(
 3828|   496k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3829|   496k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|   496k|        : m_fptr([](storage fn,
  743|   496k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   496k|              cvref<T> obj = *get<T>(fn);
  745|   496k|              if constexpr (std::is_void_v<R>) {
  746|   496k|                  obj(static_cast<decltype(args)>(args)...);
  747|   496k|              }
  748|   496k|              else {
  749|   496k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   496k|              }
  751|   496k|          }),
  752|   496k|          m_storage(std::addressof(f))
  753|   496k|    {
  754|   496k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  2.68M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.68M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.68M|              else {
  749|  2.68M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.68M|              }
  751|  2.68M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  2.68M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  2.68M|        else if constexpr (std::is_object_v<T>) {
  688|  2.68M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.68M|    }
_ZZN3scn2v44impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3828|  2.68M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   496k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   496k|        {
  662|   496k|        }
_ZN3scn2v44impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3906|   853k|    {
 3907|   853k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3907:18): [True: 104k, False: 749k]
  ------------------
 3908|   104k|            auto beg_exp_it = range.begin();
 3909|   104k|            auto it = *r;
 3910|       |
 3911|   104k|            if (auto r_sign =
  ------------------
  |  Branch (3911:22): [True: 104k, False: 279]
  ------------------
 3912|   104k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3913|   104k|                it = r_sign->first;
 3914|   104k|            }
 3915|       |
 3916|   104k|            if (auto r_exp = read_while1_code_unit(
 3917|   104k|                    ranges::subrange{it, range.end()},
 3918|   104k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3919|   104k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  880|   104k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 1.77k, False: 103k]
  |  |  ------------------
  ------------------
 3920|  1.77k|                it = beg_exp_it;
 3921|  1.77k|            }
 3922|   103k|            else {
 3923|   103k|                it = *r_exp;
 3924|   103k|            }
 3925|       |
 3926|   104k|            return it;
 3927|   104k|        }
 3928|   749k|        return range.begin();
 3929|   853k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|   104k|        : m_fptr([](storage fn,
  743|   104k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   104k|              cvref<T> obj = *get<T>(fn);
  745|   104k|              if constexpr (std::is_void_v<R>) {
  746|   104k|                  obj(static_cast<decltype(args)>(args)...);
  747|   104k|              }
  748|   104k|              else {
  749|   104k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   104k|              }
  751|   104k|          }),
  752|   104k|          m_storage(std::addressof(f))
  753|   104k|    {
  754|   104k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES15_c:
  743|   332k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   332k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   332k|              else {
  749|   332k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   332k|              }
  751|   332k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|   332k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   332k|        else if constexpr (std::is_object_v<T>) {
  688|   332k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   332k|    }
_ZZN3scn2v44impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlcE_clEc:
 3918|   332k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|   104k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   104k|        {
  662|   104k|        }
_ZN3scn2v44impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3975|   749k|    {
 3976|   749k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3977|   749k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3977:35): [True: 643k, False: 106k]
  |  Branch (3977:50): [True: 20.0k, False: 622k]
  ------------------
 3978|       |
 3979|   749k|        auto it = ranges::begin(range);
 3980|   749k|        std::ptrdiff_t digits_count = 0;
 3981|       |
 3982|   749k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3983|   749k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  880|   749k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 45.4k, False: 703k]
  |  |  ------------------
  ------------------
 3984|  45.4k|            return r.transform_error(
 3985|  45.4k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3986|  45.4k|                                              "Invalid floating-point value"));
 3987|  45.4k|        }
 3988|   703k|        else {
 3989|   703k|            digits_count += ranges::distance(it, *r);
 3990|   703k|            it = *r;
 3991|   703k|        }
 3992|       |
 3993|   703k|        m_integral_part_length = digits_count;
 3994|   703k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3994:18): [True: 138k, False: 565k]
  ------------------
 3995|   703k|                                             m_locale_options.decimal_point)) {
 3996|   138k|            it = *r;
 3997|   138k|        }
 3998|       |
 3999|   703k|        if (auto r =
  ------------------
  |  Branch (3999:18): [True: 128k, False: 575k]
  ------------------
 4000|   703k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4001|   128k|            digits_count += ranges::distance(it, *r);
 4002|   128k|            it = *r;
 4003|   128k|        }
 4004|       |
 4005|   703k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  880|   703k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 703k]
  |  |  ------------------
  ------------------
 4006|      0|            return detail::unexpected_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "No significand digits in float");
 4009|      0|        }
 4010|       |
 4011|   703k|        auto beg_exp_it = it;
 4012|   703k|        if (allowed_exp) {
  ------------------
  |  Branch (4012:13): [True: 609k, False: 94.1k]
  ------------------
 4013|   609k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4014|   609k|        }
 4015|   703k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4015:13): [True: 19.2k, False: 684k]
  |  Branch (4015:29): [True: 11.9k, False: 7.35k]
  ------------------
 4016|  11.9k|            return detail::unexpected_scan_error(
 4017|  11.9k|                scan_error::invalid_scanned_value,
 4018|  11.9k|                "No exponent given to scientific float");
 4019|  11.9k|        }
 4020|       |
 4021|   692k|        m_kind =
 4022|   692k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4022:13): [True: 589k, False: 102k]
  ------------------
 4023|       |
 4024|   692k|        return it;
 4025|   703k|    }
_ZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3803|  1.45M|    {
 3804|  1.45M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  880|  1.45M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 1.45M]
  |  |  |  Branch (880:45): [True: 0, False: 1.45M]
  |  |  |  Branch (880:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3805|  1.45M|                         thsep_allowed)) {
 3806|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3807|      0|                return char_to_int(ch) < 10 ||
 3808|      0|                       ch == m_locale_options.thousands_sep;
 3809|      0|            });
 3810|      0|        }
 3811|       |
 3812|  1.45M|        return read_while1_code_unit(
 3813|  1.45M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3814|  1.45M|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|  1.45M|        : m_fptr([](storage fn,
  743|  1.45M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.45M|              cvref<T> obj = *get<T>(fn);
  745|  1.45M|              if constexpr (std::is_void_v<R>) {
  746|  1.45M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.45M|              }
  748|  1.45M|              else {
  749|  1.45M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.45M|              }
  751|  1.45M|          }),
  752|  1.45M|          m_storage(std::addressof(f))
  753|  1.45M|    {
  754|  1.45M|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  8.30M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  8.30M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  8.30M|              else {
  749|  8.30M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  8.30M|              }
  751|  8.30M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  8.30M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  8.30M|        else if constexpr (std::is_object_v<T>) {
  688|  8.30M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  8.30M|    }
_ZZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3813|  8.30M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  1.45M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.45M|        {
  662|  1.45M|        }
_ZN3scn2v44impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSG_:
 1675|   941k|    {
 1676|   941k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  951|   941k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|   941k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  68.4k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  68.4k|        {
  662|  68.4k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   176k|        : m_fptr([](storage fn,
  743|   176k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   176k|              cvref<T> obj = *get<T>(fn);
  745|   176k|              if constexpr (std::is_void_v<R>) {
  746|   176k|                  obj(static_cast<decltype(args)>(args)...);
  747|   176k|              }
  748|   176k|              else {
  749|   176k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   176k|              }
  751|   176k|          }),
  752|   176k|          m_storage(std::addressof(f))
  753|   176k|    {
  754|   176k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   176k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   176k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   176k|              else {
  749|   176k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   176k|              }
  751|   176k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   176k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   176k|        else if constexpr (std::is_object_v<T>) {
  688|   176k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   176k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4218|   176k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   176k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  951|   176k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|   176k|            },
_ZN3scn2v44impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3706|   840k|    {
 3707|   840k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  880|   840k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 840k]
  |  |  ------------------
  ------------------
 3708|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3709|      0|                classic_with_thsep_tag{}};
 3710|      0|        }
 3711|       |
 3712|   840k|        return read_source_impl(range);
 3713|   840k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   176k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   176k|        {
  662|   176k|        }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4202|   210k|    {
 4203|   210k|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|   210k|#if !SCN_DISABLE_LOCALE
 4206|   210k|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 57.9k, False: 152k]
  ------------------
 4207|  57.9k|            return read_impl<Range>(
 4208|  57.9k|                range, rd,
 4209|  57.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  57.9k|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|  57.9k|                },
 4212|  57.9k|                value, loc);
 4213|  57.9k|        }
 4214|   152k|#endif
 4215|       |
 4216|   152k|        return read_impl<Range>(
 4217|   152k|            range, rd,
 4218|   152k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   152k|                return r.read_source(SCN_FWD(args)...);
 4220|   152k|            },
 4221|   152k|            value);
 4222|   210k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4238|   297k|    {
 4239|   297k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|   297k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  880|   297k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 12.3k, False: 284k]
  |  |  ------------------
  ------------------
 4241|  12.3k|            return unexpected(r.error());
 4242|  12.3k|        }
 4243|       |
 4244|   284k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   284k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   284k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   284k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|   284k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 13.4k, False: 271k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  13.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  13.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  13.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  13.4k|    }                                                  \
  |  |  |  | 3939|   284k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|   271k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|   271k|        return ranges::next(range.begin(), n);
 4246|   284k|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|   918k|    {
  763|   918k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  951|   918k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   918k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  57.9k|        : m_fptr([](storage fn,
  743|  57.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  57.9k|              cvref<T> obj = *get<T>(fn);
  745|  57.9k|              if constexpr (std::is_void_v<R>) {
  746|  57.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  57.9k|              }
  748|  57.9k|              else {
  749|  57.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  57.9k|              }
  751|  57.9k|          }),
  752|  57.9k|          m_storage(std::addressof(f))
  753|  57.9k|    {
  754|  57.9k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  57.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  57.9k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  57.9k|              else {
  749|  57.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  57.9k|              }
  751|  57.9k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  57.9k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  57.9k|        else if constexpr (std::is_object_v<T>) {
  688|  57.9k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  57.9k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4209|  57.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  57.9k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  951|  57.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|  57.9k|                },
_ZN3scn2v44impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3720|   180k|    {
 3721|   180k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3722|   180k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  879|   180k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (879:25): [True: 0, False: 180k]
  |  |  ------------------
  ------------------
 3723|      0|            m_locale_options.thousands_sep = CharT{0};
 3724|      0|        }
 3725|       |
 3726|   180k|        return read_source_impl(range);
 3727|   180k|    }
_ZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3746|   918k|    {
 3747|   918k|        SCN_TRY(sign_result,
  ------------------
  |  | 3940|   918k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   918k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   918k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|   918k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 918k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   918k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|   918k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3748|   918k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3749|   918k|        auto it = sign_result.first;
 3750|   918k|        m_sign = sign_result.second;
 3751|       |
 3752|   918k|        auto digits_begin = it;
 3753|   918k|        auto r = ranges::subrange{it, range.end()};
 3754|       |        if constexpr (ranges::contiguous_range<Range> &&
 3755|   918k|                      ranges::sized_range<Range>) {
 3756|   918k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  880|  1.83M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 918k]
  |  |  |  Branch (880:45): [True: 0, False: 918k]
  |  |  |  Branch (880:45): [True: 0, False: 918k]
  |  |  ------------------
  ------------------
 3757|   918k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3758|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|      0|    }                                                  \
  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3759|      0|                    it,
 3760|      0|                    do_read_source_impl(
 3761|      0|                        r,
 3762|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3763|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3764|      0|            }
 3765|   918k|            else {
 3766|   918k|                auto cb = [&](const auto& rr)
 3767|   918k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3768|   918k|                    auto res = read_all(rr);
 3769|   918k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3770|   918k|                        return detail::unexpected_scan_error(
 3771|   918k|                            scan_error::invalid_scanned_value,
 3772|   918k|                            "Invalid float value");
 3773|   918k|                    }
 3774|   918k|                    return res;
 3775|   918k|                };
 3776|   918k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3935|   918k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   918k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  880|   918k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 38.0k, False: 880k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  38.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  38.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  38.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  38.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  38.0k|    }                                                  \
  |  | 3939|   918k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  951|   918k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3777|   880k|            }
 3778|       |        }
 3779|       |        else {
 3780|       |            SCN_TRY_ASSIGN(
 3781|       |                it,
 3782|       |                do_read_source_impl(
 3783|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3784|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3785|       |        }
 3786|       |
 3787|   918k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  945|   918k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   918k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3788|       |
 3789|   880k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3789:13): [True: 874k, False: 5.26k]
  |  Branch (3789:48): [True: 870k, False: 4.40k]
  ------------------
 3790|   880k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3790:13): [True: 831k, False: 38.6k]
  ------------------
 3791|   880k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3791:13): [True: 827k, False: 4.23k]
  ------------------
 3792|   827k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3793|   827k|        }
 3794|       |
 3795|   880k|        handle_separators();
 3796|       |
 3797|   880k|        return it;
 3798|   918k|    }
_ZN3scn2v44impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3840|   918k|    {
 3841|   918k|        auto it = range.begin();
 3842|   918k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3842:73): [True: 908k, False: 9.66k]
  ------------------
 3843|   908k|            return unexpected(r.error());
 3844|   908k|        }
 3845|  9.66k|        else {
 3846|  9.66k|            it = *r;
 3847|  9.66k|        }
 3848|       |
 3849|  9.66k|        if (auto r = read_matching_string_classic_nocase(
 3850|  9.66k|                ranges::subrange{it, range.end()}, "inity");
 3851|  9.66k|            !r) {
  ------------------
  |  Branch (3851:13): [True: 5.26k, False: 4.40k]
  ------------------
 3852|  5.26k|            m_kind = float_kind::inf_short;
 3853|  5.26k|            return it;
 3854|  5.26k|        }
 3855|  4.40k|        else {
 3856|  4.40k|            m_kind = float_kind::inf_long;
 3857|  4.40k|            return *r;
 3858|  4.40k|        }
 3859|  9.66k|    }
_ZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3863|   908k|    {
 3864|   908k|        auto it = range.begin();
 3865|   908k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3865:73): [True: 864k, False: 44.3k]
  ------------------
 3866|   864k|            return r.transform_error(map_parse_error_to_scan_error(
 3867|   864k|                scan_error::invalid_scanned_value,
 3868|   864k|                "Invalid floating-point NaN value"));
 3869|   864k|        }
 3870|  44.3k|        else {
 3871|  44.3k|            it = *r;
 3872|  44.3k|        }
 3873|       |
 3874|  44.3k|        if (auto r =
 3875|  44.3k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3876|  44.3k|            !r) {
  ------------------
  |  Branch (3876:13): [True: 38.6k, False: 5.69k]
  ------------------
 3877|  38.6k|            m_kind = float_kind::nan_simple;
 3878|  38.6k|            return it;
 3879|  38.6k|        }
 3880|  5.69k|        else {
 3881|  5.69k|            it = *r;
 3882|  5.69k|        }
 3883|       |
 3884|  5.69k|        auto payload_beg_it = it;
 3885|  5.69k|        it = read_while_code_unit(
 3886|  5.69k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3887|  5.69k|                return is_ascii_char(ch) &&
 3888|  5.69k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3889|  5.69k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3890|  5.69k|            });
 3891|  5.69k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3892|       |
 3893|  5.69k|        m_kind = float_kind::nan_with_payload;
 3894|  5.69k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3894:18): [True: 4.23k, False: 1.45k]
  ------------------
 3895|  5.69k|                                             ')')) {
 3896|  4.23k|            return *r;
 3897|  4.23k|        }
 3898|  1.45k|        return detail::unexpected_scan_error(
 3899|  1.45k|            scan_error::invalid_scanned_value,
 3900|  1.45k|            "Invalid floating-point NaN payload");
 3901|  5.69k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|  5.69k|        : m_fptr([](storage fn,
  743|  5.69k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.69k|              cvref<T> obj = *get<T>(fn);
  745|  5.69k|              if constexpr (std::is_void_v<R>) {
  746|  5.69k|                  obj(static_cast<decltype(args)>(args)...);
  747|  5.69k|              }
  748|  5.69k|              else {
  749|  5.69k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.69k|              }
  751|  5.69k|          }),
  752|  5.69k|          m_storage(std::addressof(f))
  753|  5.69k|    {
  754|  5.69k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|  86.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  86.6k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  86.6k|              else {
  749|  86.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  86.6k|              }
  751|  86.6k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_EUlcE_EEDaNS3_7storageE:
  683|  86.6k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  86.6k|        else if constexpr (std::is_object_v<T>) {
  688|  86.6k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  86.6k|    }
_ZZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlcE_clEc:
 3886|  86.6k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3887|  86.6k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3887:24): [True: 86.5k, False: 83]
  ------------------
 3888|  86.6k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3888:26): [True: 81.9k, False: 4.57k]
  |  Branch (3888:39): [True: 74.0k, False: 7.96k]
  |  Branch (3888:54): [True: 2.67k, False: 9.86k]
  |  Branch (3888:67): [True: 2.58k, False: 83]
  ------------------
 3889|  86.5k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3889:26): [True: 5.37k, False: 4.57k]
  |  Branch (3889:39): [True: 2.53k, False: 2.84k]
  |  Branch (3889:53): [True: 2.72k, False: 4.69k]
  ------------------
 3890|  86.6k|            });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  5.69k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  5.69k|        {
  662|  5.69k|        }
_ZN3scn2v44impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|   606k|    {
 3834|   606k|        return read_matching_string_classic_nocase(range, "0x");
 3835|   606k|    }
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2094|   515k|{
 2095|   515k|    auto it = read_while_code_unit(range, pred);
 2096|   515k|    if (it == range.begin()) {
  ------------------
  |  Branch (2096:9): [True: 219k, False: 296k]
  ------------------
 2097|   219k|        return unexpected(parse_error::error);
 2098|   219k|    }
 2099|   296k|    return it;
 2100|   515k|}
_ZN3scn2v44impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3906|   148k|    {
 3907|   148k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3907:18): [True: 25.0k, False: 123k]
  ------------------
 3908|  25.0k|            auto beg_exp_it = range.begin();
 3909|  25.0k|            auto it = *r;
 3910|       |
 3911|  25.0k|            if (auto r_sign =
  ------------------
  |  Branch (3911:22): [True: 24.9k, False: 90]
  ------------------
 3912|  25.0k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3913|  24.9k|                it = r_sign->first;
 3914|  24.9k|            }
 3915|       |
 3916|  25.0k|            if (auto r_exp = read_while1_code_unit(
 3917|  25.0k|                    ranges::subrange{it, range.end()},
 3918|  25.0k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3919|  25.0k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  880|  25.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 652, False: 24.3k]
  |  |  ------------------
  ------------------
 3920|    652|                it = beg_exp_it;
 3921|    652|            }
 3922|  24.3k|            else {
 3923|  24.3k|                it = *r_exp;
 3924|  24.3k|            }
 3925|       |
 3926|  25.0k|            return it;
 3927|  25.0k|        }
 3928|   123k|        return range.begin();
 3929|   148k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_:
  742|  25.0k|        : m_fptr([](storage fn,
  743|  25.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  25.0k|              cvref<T> obj = *get<T>(fn);
  745|  25.0k|              if constexpr (std::is_void_v<R>) {
  746|  25.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  25.0k|              }
  748|  25.0k|              else {
  749|  25.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  25.0k|              }
  751|  25.0k|          }),
  752|  25.0k|          m_storage(std::addressof(f))
  753|  25.0k|    {
  754|  25.0k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEcE_clES12_c:
  743|  72.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  72.3k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  72.3k|              else {
  749|  72.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  72.3k|              }
  751|  72.3k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|  72.3k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  72.3k|        else if constexpr (std::is_object_v<T>) {
  688|  72.3k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  72.3k|    }
_ZZN3scn2v44impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlcE_clEc:
 3918|  72.3k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|  25.0k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  25.0k|        {
  662|  25.0k|        }
_ZN3scn2v44impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3975|   257k|    {
 3976|   257k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3977|   257k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3977:35): [True: 160k, False: 96.9k]
  |  Branch (3977:50): [True: 18.7k, False: 141k]
  ------------------
 3978|       |
 3979|   257k|        auto it = ranges::begin(range);
 3980|   257k|        std::ptrdiff_t digits_count = 0;
 3981|       |
 3982|   257k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3983|   257k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  880|   257k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 24.1k, False: 232k]
  |  |  ------------------
  ------------------
 3984|  24.1k|            return r.transform_error(
 3985|  24.1k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3986|  24.1k|                                              "Invalid floating-point value"));
 3987|  24.1k|        }
 3988|   232k|        else {
 3989|   232k|            digits_count += ranges::distance(it, *r);
 3990|   232k|            it = *r;
 3991|   232k|        }
 3992|       |
 3993|   232k|        m_integral_part_length = digits_count;
 3994|   232k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3994:18): [True: 42.5k, False: 190k]
  ------------------
 3995|   232k|                                             m_locale_options.decimal_point)) {
 3996|  42.5k|            it = *r;
 3997|  42.5k|        }
 3998|       |
 3999|   232k|        if (auto r =
  ------------------
  |  Branch (3999:18): [True: 38.6k, False: 194k]
  ------------------
 4000|   232k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4001|  38.6k|            digits_count += ranges::distance(it, *r);
 4002|  38.6k|            it = *r;
 4003|  38.6k|        }
 4004|       |
 4005|   232k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  880|   232k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 232k]
  |  |  ------------------
  ------------------
 4006|      0|            return detail::unexpected_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "No significand digits in float");
 4009|      0|        }
 4010|       |
 4011|   232k|        auto beg_exp_it = it;
 4012|   232k|        if (allowed_exp) {
  ------------------
  |  Branch (4012:13): [True: 148k, False: 84.5k]
  ------------------
 4013|   148k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4014|   148k|        }
 4015|   232k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4015:13): [True: 17.4k, False: 215k]
  |  Branch (4015:29): [True: 11.6k, False: 5.82k]
  ------------------
 4016|  11.6k|            return detail::unexpected_scan_error(
 4017|  11.6k|                scan_error::invalid_scanned_value,
 4018|  11.6k|                "No exponent given to scientific float");
 4019|  11.6k|        }
 4020|       |
 4021|   221k|        m_kind =
 4022|   221k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4022:13): [True: 196k, False: 24.3k]
  ------------------
 4023|       |
 4024|   221k|        return it;
 4025|   232k|    }
_ZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3803|   490k|    {
 3804|   490k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  880|   490k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 490k]
  |  |  |  Branch (880:45): [True: 0, False: 490k]
  |  |  |  Branch (880:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3805|   490k|                         thsep_allowed)) {
 3806|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3807|      0|                return char_to_int(ch) < 10 ||
 3808|      0|                       ch == m_locale_options.thousands_sep;
 3809|      0|            });
 3810|      0|        }
 3811|       |
 3812|   490k|        return read_while1_code_unit(
 3813|   490k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3814|   490k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|   490k|        : m_fptr([](storage fn,
  743|   490k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   490k|              cvref<T> obj = *get<T>(fn);
  745|   490k|              if constexpr (std::is_void_v<R>) {
  746|   490k|                  obj(static_cast<decltype(args)>(args)...);
  747|   490k|              }
  748|   490k|              else {
  749|   490k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   490k|              }
  751|   490k|          }),
  752|   490k|          m_storage(std::addressof(f))
  753|   490k|    {
  754|   490k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|  2.53M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.53M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.53M|              else {
  749|  2.53M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.53M|              }
  751|  2.53M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  683|  2.53M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  2.53M|        else if constexpr (std::is_object_v<T>) {
  688|  2.53M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.53M|    }
_ZZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3813|  2.53M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   490k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   490k|        {
  662|   490k|        }
_ZN3scn2v44impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 4032|   918k|    {
 4033|   918k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4034|   918k|        const bool allowed_nonhex =
 4035|   918k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4036|   918k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4037|       |
 4038|   918k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4038:39): [True: 908k, False: 9.66k]
  |  Branch (4038:45): [True: 0, False: 908k]
  ------------------
 4039|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4040|      0|                scan_error::invalid_scanned_value,
 4041|      0|                "Invalid infinite floating-point value"));
 4042|      0|        }
 4043|   918k|        else if (r) {
  ------------------
  |  Branch (4043:18): [True: 9.66k, False: 908k]
  ------------------
 4044|  9.66k|            return *r;
 4045|  9.66k|        }
 4046|       |
 4047|   908k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4047:39): [True: 865k, False: 42.8k]
  |  Branch (4047:45): [True: 1.45k, False: 864k]
  ------------------
 4048|  1.45k|            return unexpected(r.error());
 4049|  1.45k|        }
 4050|   906k|        else if (r) {
  ------------------
  |  Branch (4050:18): [True: 42.8k, False: 864k]
  ------------------
 4051|  42.8k|            return *r;
 4052|  42.8k|        }
 4053|       |
 4054|   864k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4054:13): [True: 606k, False: 257k]
  |  Branch (4054:28): [True: 183k, False: 423k]
  ------------------
 4055|       |            // only hex allowed:
 4056|       |            // prefix "0x" allowed, not required
 4057|   183k|            auto it = range.begin();
 4058|       |
 4059|   183k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4059:22): [True: 10.3k, False: 172k]
  ------------------
 4060|  10.3k|                m_kind = float_kind::hex_with_prefix;
 4061|  10.3k|                it = *r;
 4062|  10.3k|            }
 4063|   172k|            else {
 4064|   172k|                m_kind = float_kind::hex_without_prefix;
 4065|   172k|            }
 4066|       |
 4067|   183k|            return read_hex(ranges::subrange{it, range.end()});
 4068|   183k|        }
 4069|   681k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4069:13): [True: 257k, False: 423k]
  |  Branch (4069:29): [True: 257k, False: 0]
  ------------------
 4070|       |            // only nonhex allowed:
 4071|       |            // no prefix allowed
 4072|   257k|            m_kind = float_kind::generic;
 4073|   257k|            return read_regular_float(range);
 4074|   257k|        }
 4075|       |        // both hex and nonhex allowed:
 4076|       |        // check for "0x" prefix -> hex,
 4077|       |        // regular otherwise
 4078|       |
 4079|   423k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  880|   423k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 25.8k, False: 398k]
  |  |  ------------------
  ------------------
 4080|  25.8k|            m_kind = float_kind::hex_with_prefix;
 4081|  25.8k|            return read_hex(ranges::subrange{*r, range.end()});
 4082|  25.8k|        }
 4083|       |
 4084|   398k|        m_kind = float_kind::generic;
 4085|   398k|        return read_regular(range);
 4086|   423k|    }
_ZZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3767|   606k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3768|   606k|                    auto res = read_all(rr);
 3769|   606k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  880|   606k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 794, False: 606k]
  |  |  ------------------
  ------------------
 3770|    794|                        return detail::unexpected_scan_error(
 3771|    794|                            scan_error::invalid_scanned_value,
 3772|    794|                            "Invalid float value");
 3773|    794|                    }
 3774|   606k|                    return res;
 3775|   606k|                };
_ZN3scn2v44impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1937|   606k|{
 1938|   606k|    return ranges::next(range.begin(), range.end());
 1939|   606k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|   606k|    {
  313|   606k|        ranges::advance(x, bound);
  314|   606k|        return x;
  315|   606k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|   606k|    {
  275|   606k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|   606k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|   606k|    {
  190|   606k|        i = std::move(bound);
  191|   606k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1675|   833k|    {
 1676|   833k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  951|   833k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|   833k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1719|   833k|    {
 1720|   833k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|   833k|                      ranges::sized_range<Range>) {
 1725|   833k|            m_storage.reset();
 1726|   833k|            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   833k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  57.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  57.9k|        {
  662|  57.9k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   152k|        : m_fptr([](storage fn,
  743|   152k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   152k|              cvref<T> obj = *get<T>(fn);
  745|   152k|              if constexpr (std::is_void_v<R>) {
  746|   152k|                  obj(static_cast<decltype(args)>(args)...);
  747|   152k|              }
  748|   152k|              else {
  749|   152k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   152k|              }
  751|   152k|          }),
  752|   152k|          m_storage(std::addressof(f))
  753|   152k|    {
  754|   152k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   152k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   152k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   152k|              else {
  749|   152k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   152k|              }
  751|   152k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   152k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   152k|        else if constexpr (std::is_object_v<T>) {
  688|   152k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   152k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4218|   152k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   152k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  951|   152k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|   152k|            },
_ZN3scn2v44impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3706|   737k|    {
 3707|   737k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  880|   737k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 737k]
  |  |  ------------------
  ------------------
 3708|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3709|      0|                classic_with_thsep_tag{}};
 3710|      0|        }
 3711|       |
 3712|   737k|        return read_source_impl(range);
 3713|   737k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   152k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   152k|        {
  662|   152k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIdEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6226|   261k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|       |                          basic_contiguous_scan_context<char_type>>) {
 6231|       |            auto rd = make_reader<T, char_type>();
 6232|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6233|       |            return impl(rd, range, value);
 6234|       |        }
 6235|   261k|        else if constexpr (!detail::is_type_disabled<T>) {
 6236|   261k|            auto rd = make_reader<T, char_type>();
 6237|   261k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   261k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  880|   261k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 0, False: 261k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6238|       |
 6239|   261k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6239:17): [True: 261k, False: 0]
  |  Branch (6239:50): [True: 0, False: 0]
  ------------------
 6240|   261k|                specs.width != 0) {
  ------------------
  |  Branch (6240:17): [True: 0, False: 0]
  ------------------
 6241|   261k|                return impl(rd, range, value);
 6242|   261k|            }
 6243|       |
 6244|      0|            auto crange = get_as_contiguous(range);
 6245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            return ranges::next(range.begin(),
 6247|      0|                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|   261k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6161|   261k|    {
 6162|   261k|        const bool need_skipped_width =
 6163|   261k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 261k]
  |  Branch (6163:33): [True: 0, False: 261k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|   261k|        auto it = rng.begin();
 6167|   261k|        std::ptrdiff_t prefix_width = 0;
 6168|   261k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 261k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|   261k|        else {
 6176|   261k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   261k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   261k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   261k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|   261k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 5.02k, False: 256k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  5.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  5.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  5.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  5.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  5.02k|    }                                                  \
  |  |  |  | 3939|   261k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|   256k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|   256k|            std::tie(it, prefix_width) = prefix_result;
 6178|   256k|        }
 6179|   256k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|   256k|        std::ptrdiff_t value_width = 0;
 6183|   256k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 256k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|   256k|        else {
 6199|   256k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   256k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   256k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  880|   256k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 18.5k, False: 238k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  18.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  18.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  18.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  18.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  18.5k|    }                                                  \
  |  | 3939|   256k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  951|   256k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|   238k|                                             specs, value, loc));
 6201|       |
 6202|   238k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 238k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|   238k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|   238k|        std::ptrdiff_t postfix_width = 0;
 6211|   238k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 234k, False: 4.01k]
  ------------------
 6212|   234k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   234k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   234k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   234k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|   234k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 234k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   234k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|   234k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|   234k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|   234k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|   234k|                                 value_width));
 6216|   234k|            std::tie(it, postfix_width) = postfix_result;
 6217|   234k|        }
 6218|       |
 6219|   238k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   238k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  880|   238k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 0, False: 238k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|   238k|            specs, prefix_width, value_width, postfix_width));
 6221|   238k|        return it;
 6222|   238k|    }
_ZN3scn2v44impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3732|   630k|    {
 3733|   630k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  945|   630k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   630k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3734|       |
 3735|   630k|        const std::ptrdiff_t sign_len =
 3736|   630k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3736:13): [True: 157k, False: 472k]
  ------------------
 3737|       |
 3738|   630k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3940|   630k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   630k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   630k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|   630k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 14.1k, False: 616k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  14.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  14.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  14.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  14.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  14.1k|    }                                                  \
  |  |  |  | 3939|   630k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|   616k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3739|   616k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3740|   630k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4202|   256k|    {
 4203|   256k|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|   256k|#if !SCN_DISABLE_LOCALE
 4206|   256k|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 73.7k, False: 182k]
  ------------------
 4207|  73.7k|            return read_impl<Range>(
 4208|  73.7k|                range, rd,
 4209|  73.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  73.7k|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|  73.7k|                },
 4212|  73.7k|                value, loc);
 4213|  73.7k|        }
 4214|   182k|#endif
 4215|       |
 4216|   182k|        return read_impl<Range>(
 4217|   182k|            range, rd,
 4218|   182k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   182k|                return r.read_source(SCN_FWD(args)...);
 4220|   182k|            },
 4221|   182k|            value);
 4222|   256k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4238|   357k|    {
 4239|   357k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|   357k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  880|   357k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 22.4k, False: 334k]
  |  |  ------------------
  ------------------
 4241|  22.4k|            return unexpected(r.error());
 4242|  22.4k|        }
 4243|       |
 4244|   334k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   334k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   334k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   334k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|   334k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 1.52k, False: 333k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.52k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.52k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.52k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.52k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.52k|    }                                                  \
  |  |  |  | 3939|   334k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|   333k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|   333k|        return ranges::next(range.begin(), n);
 4246|   334k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  73.7k|        : m_fptr([](storage fn,
  743|  73.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  73.7k|              cvref<T> obj = *get<T>(fn);
  745|  73.7k|              if constexpr (std::is_void_v<R>) {
  746|  73.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  73.7k|              }
  748|  73.7k|              else {
  749|  73.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  73.7k|              }
  751|  73.7k|          }),
  752|  73.7k|          m_storage(std::addressof(f))
  753|  73.7k|    {
  754|  73.7k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  73.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  73.7k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  73.7k|              else {
  749|  73.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  73.7k|              }
  751|  73.7k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  73.7k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  73.7k|        else if constexpr (std::is_object_v<T>) {
  688|  73.7k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  73.7k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4209|  73.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  73.7k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  951|  73.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|  73.7k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  73.7k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  73.7k|        {
  662|  73.7k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   182k|        : m_fptr([](storage fn,
  743|   182k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   182k|              cvref<T> obj = *get<T>(fn);
  745|   182k|              if constexpr (std::is_void_v<R>) {
  746|   182k|                  obj(static_cast<decltype(args)>(args)...);
  747|   182k|              }
  748|   182k|              else {
  749|   182k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   182k|              }
  751|   182k|          }),
  752|   182k|          m_storage(std::addressof(f))
  753|   182k|    {
  754|   182k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   182k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   182k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   182k|              else {
  749|   182k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   182k|              }
  751|   182k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   182k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   182k|        else if constexpr (std::is_object_v<T>) {
  688|   182k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   182k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4218|   182k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   182k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  951|   182k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|   182k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   182k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   182k|        {
  662|   182k|        }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4202|   217k|    {
 4203|   217k|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|   217k|#if !SCN_DISABLE_LOCALE
 4206|   217k|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 60.6k, False: 156k]
  ------------------
 4207|  60.6k|            return read_impl<Range>(
 4208|  60.6k|                range, rd,
 4209|  60.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  60.6k|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|  60.6k|                },
 4212|  60.6k|                value, loc);
 4213|  60.6k|        }
 4214|   156k|#endif
 4215|       |
 4216|   156k|        return read_impl<Range>(
 4217|   156k|            range, rd,
 4218|   156k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   156k|                return r.read_source(SCN_FWD(args)...);
 4220|   156k|            },
 4221|   156k|            value);
 4222|   217k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4238|   308k|    {
 4239|   308k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|   308k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  880|   308k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 12.6k, False: 295k]
  |  |  ------------------
  ------------------
 4241|  12.6k|            return unexpected(r.error());
 4242|  12.6k|        }
 4243|       |
 4244|   295k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   295k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   295k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   295k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|   295k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 12.5k, False: 283k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  12.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  12.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  12.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  12.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  12.5k|    }                                                  \
  |  |  |  | 3939|   295k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|   283k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|   283k|        return ranges::next(range.begin(), n);
 4246|   295k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  60.6k|        : m_fptr([](storage fn,
  743|  60.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  60.6k|              cvref<T> obj = *get<T>(fn);
  745|  60.6k|              if constexpr (std::is_void_v<R>) {
  746|  60.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  60.6k|              }
  748|  60.6k|              else {
  749|  60.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  60.6k|              }
  751|  60.6k|          }),
  752|  60.6k|          m_storage(std::addressof(f))
  753|  60.6k|    {
  754|  60.6k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  60.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  60.6k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  60.6k|              else {
  749|  60.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  60.6k|              }
  751|  60.6k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  60.6k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  60.6k|        else if constexpr (std::is_object_v<T>) {
  688|  60.6k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  60.6k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4209|  60.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  60.6k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  951|  60.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|  60.6k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  60.6k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  60.6k|        {
  662|  60.6k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   156k|        : m_fptr([](storage fn,
  743|   156k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   156k|              cvref<T> obj = *get<T>(fn);
  745|   156k|              if constexpr (std::is_void_v<R>) {
  746|   156k|                  obj(static_cast<decltype(args)>(args)...);
  747|   156k|              }
  748|   156k|              else {
  749|   156k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   156k|              }
  751|   156k|          }),
  752|   156k|          m_storage(std::addressof(f))
  753|   156k|    {
  754|   156k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   156k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   156k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   156k|              else {
  749|   156k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   156k|              }
  751|   156k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   156k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   156k|        else if constexpr (std::is_object_v<T>) {
  688|   156k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   156k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4218|   156k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   156k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  951|   156k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|   156k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   156k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   156k|        {
  662|   156k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIeEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6226|   264k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|       |                          basic_contiguous_scan_context<char_type>>) {
 6231|       |            auto rd = make_reader<T, char_type>();
 6232|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6233|       |            return impl(rd, range, value);
 6234|       |        }
 6235|   264k|        else if constexpr (!detail::is_type_disabled<T>) {
 6236|   264k|            auto rd = make_reader<T, char_type>();
 6237|   264k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   264k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  880|   264k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 0, False: 264k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6238|       |
 6239|   264k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6239:17): [True: 264k, False: 0]
  |  Branch (6239:50): [True: 0, False: 0]
  ------------------
 6240|   264k|                specs.width != 0) {
  ------------------
  |  Branch (6240:17): [True: 0, False: 0]
  ------------------
 6241|   264k|                return impl(rd, range, value);
 6242|   264k|            }
 6243|       |
 6244|      0|            auto crange = get_as_contiguous(range);
 6245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            return ranges::next(range.begin(),
 6247|      0|                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|   264k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6161|   264k|    {
 6162|   264k|        const bool need_skipped_width =
 6163|   264k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 264k]
  |  Branch (6163:33): [True: 0, False: 264k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|   264k|        auto it = rng.begin();
 6167|   264k|        std::ptrdiff_t prefix_width = 0;
 6168|   264k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 264k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|   264k|        else {
 6176|   264k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   264k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   264k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   264k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|   264k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 5.33k, False: 259k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  5.33k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  5.33k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  5.33k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  5.33k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  5.33k|    }                                                  \
  |  |  |  | 3939|   264k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|   259k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|   259k|            std::tie(it, prefix_width) = prefix_result;
 6178|   259k|        }
 6179|   259k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|   259k|        std::ptrdiff_t value_width = 0;
 6183|   259k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 259k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|   259k|        else {
 6199|   259k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   259k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   259k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  880|   259k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 18.2k, False: 241k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  18.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  18.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  18.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  18.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  18.2k|    }                                                  \
  |  | 3939|   259k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  951|   259k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|   241k|                                             specs, value, loc));
 6201|       |
 6202|   241k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 241k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|   241k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|   241k|        std::ptrdiff_t postfix_width = 0;
 6211|   241k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 237k, False: 4.27k]
  ------------------
 6212|   237k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   237k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   237k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   237k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|   237k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 237k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   237k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|   237k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|   237k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|   237k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|   237k|                                 value_width));
 6216|   237k|            std::tie(it, postfix_width) = postfix_result;
 6217|   237k|        }
 6218|       |
 6219|   241k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   241k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  880|   241k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 0, False: 241k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|   241k|            specs, prefix_width, value_width, postfix_width));
 6221|   241k|        return it;
 6222|   241k|    }
_ZN3scn2v44impl12float_readerIcE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3732|   637k|    {
 3733|   637k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  945|   637k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   637k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3734|       |
 3735|   637k|        const std::ptrdiff_t sign_len =
 3736|   637k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3736:13): [True: 162k, False: 475k]
  ------------------
 3737|       |
 3738|   637k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3940|   637k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   637k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   637k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|   637k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 12.3k, False: 625k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  12.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  12.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  12.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  12.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  12.3k|    }                                                  \
  |  |  |  | 3939|   637k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|   625k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3739|   625k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3740|   637k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4202|   259k|    {
 4203|   259k|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|   259k|#if !SCN_DISABLE_LOCALE
 4206|   259k|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 74.9k, False: 184k]
  ------------------
 4207|  74.9k|            return read_impl<Range>(
 4208|  74.9k|                range, rd,
 4209|  74.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  74.9k|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|  74.9k|                },
 4212|  74.9k|                value, loc);
 4213|  74.9k|        }
 4214|   184k|#endif
 4215|       |
 4216|   184k|        return read_impl<Range>(
 4217|   184k|            range, rd,
 4218|   184k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   184k|                return r.read_source(SCN_FWD(args)...);
 4220|   184k|            },
 4221|   184k|            value);
 4222|   259k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4238|   361k|    {
 4239|   361k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|   361k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  880|   361k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 23.1k, False: 338k]
  |  |  ------------------
  ------------------
 4241|  23.1k|            return unexpected(r.error());
 4242|  23.1k|        }
 4243|       |
 4244|   338k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   338k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   338k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   338k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|   338k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 437, False: 337k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    437|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    437|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    437|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    437|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    437|    }                                                  \
  |  |  |  | 3939|   338k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|   337k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|   337k|        return ranges::next(range.begin(), n);
 4246|   338k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  74.9k|        : m_fptr([](storage fn,
  743|  74.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  74.9k|              cvref<T> obj = *get<T>(fn);
  745|  74.9k|              if constexpr (std::is_void_v<R>) {
  746|  74.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  74.9k|              }
  748|  74.9k|              else {
  749|  74.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  74.9k|              }
  751|  74.9k|          }),
  752|  74.9k|          m_storage(std::addressof(f))
  753|  74.9k|    {
  754|  74.9k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  74.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  74.9k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  74.9k|              else {
  749|  74.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  74.9k|              }
  751|  74.9k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  74.9k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  74.9k|        else if constexpr (std::is_object_v<T>) {
  688|  74.9k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  74.9k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4209|  74.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  74.9k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  951|  74.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|  74.9k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  74.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  74.9k|        {
  662|  74.9k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   184k|        : m_fptr([](storage fn,
  743|   184k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   184k|              cvref<T> obj = *get<T>(fn);
  745|   184k|              if constexpr (std::is_void_v<R>) {
  746|   184k|                  obj(static_cast<decltype(args)>(args)...);
  747|   184k|              }
  748|   184k|              else {
  749|   184k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   184k|              }
  751|   184k|          }),
  752|   184k|          m_storage(std::addressof(f))
  753|   184k|    {
  754|   184k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   184k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   184k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   184k|              else {
  749|   184k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   184k|              }
  751|   184k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   184k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   184k|        else if constexpr (std::is_object_v<T>) {
  688|   184k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   184k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4218|   184k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   184k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  951|   184k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|   184k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   184k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   184k|        {
  662|   184k|        }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4202|   219k|    {
 4203|   219k|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|   219k|#if !SCN_DISABLE_LOCALE
 4206|   219k|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 61.8k, False: 158k]
  ------------------
 4207|  61.8k|            return read_impl<Range>(
 4208|  61.8k|                range, rd,
 4209|  61.8k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  61.8k|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|  61.8k|                },
 4212|  61.8k|                value, loc);
 4213|  61.8k|        }
 4214|   158k|#endif
 4215|       |
 4216|   158k|        return read_impl<Range>(
 4217|   158k|            range, rd,
 4218|   158k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   158k|                return r.read_source(SCN_FWD(args)...);
 4220|   158k|            },
 4221|   158k|            value);
 4222|   219k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4238|   312k|    {
 4239|   312k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|   312k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  880|   312k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 12.9k, False: 299k]
  |  |  ------------------
  ------------------
 4241|  12.9k|            return unexpected(r.error());
 4242|  12.9k|        }
 4243|       |
 4244|   299k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   299k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   299k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   299k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|   299k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 11.9k, False: 287k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  11.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  11.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  11.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  11.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  11.9k|    }                                                  \
  |  |  |  | 3939|   299k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|   287k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|   287k|        return ranges::next(range.begin(), n);
 4246|   299k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  61.8k|        : m_fptr([](storage fn,
  743|  61.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  61.8k|              cvref<T> obj = *get<T>(fn);
  745|  61.8k|              if constexpr (std::is_void_v<R>) {
  746|  61.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  61.8k|              }
  748|  61.8k|              else {
  749|  61.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  61.8k|              }
  751|  61.8k|          }),
  752|  61.8k|          m_storage(std::addressof(f))
  753|  61.8k|    {
  754|  61.8k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  61.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  61.8k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  61.8k|              else {
  749|  61.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  61.8k|              }
  751|  61.8k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  61.8k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  61.8k|        else if constexpr (std::is_object_v<T>) {
  688|  61.8k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  61.8k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4209|  61.8k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  61.8k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  951|  61.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|  61.8k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  61.8k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  61.8k|        {
  662|  61.8k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   158k|        : m_fptr([](storage fn,
  743|   158k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   158k|              cvref<T> obj = *get<T>(fn);
  745|   158k|              if constexpr (std::is_void_v<R>) {
  746|   158k|                  obj(static_cast<decltype(args)>(args)...);
  747|   158k|              }
  748|   158k|              else {
  749|   158k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   158k|              }
  751|   158k|          }),
  752|   158k|          m_storage(std::addressof(f))
  753|   158k|    {
  754|   158k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   158k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   158k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   158k|              else {
  749|   158k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   158k|              }
  751|   158k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   158k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   158k|        else if constexpr (std::is_object_v<T>) {
  688|   158k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   158k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4218|   158k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   158k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  951|   158k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|   158k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   158k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   158k|        {
  662|   158k|        }
_ZN3scn2v44impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1039|  1.07M|{
 1040|       |    if constexpr (ranges::contiguous_range<Range> &&
 1041|       |                  ranges::sized_range<Range>) {
 1042|       |        return r;
 1043|       |    }
 1044|       |    else if constexpr (std::is_same_v<
 1045|       |                           ranges::const_iterator_t<Range>,
 1046|       |                           typename detail::basic_scan_buffer<
 1047|  1.07M|                               detail::char_t<Range>>::forward_iterator>) {
 1048|       |        if constexpr (ranges::common_range<Range>) {
 1049|       |            auto seg = r.begin().contiguous_segment();
 1050|       |            auto dist =
 1051|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1052|       |            return seg.substr(0, std::min(seg.size(), dist));
 1053|       |        }
 1054|  1.07M|        else {
 1055|  1.07M|            return r.begin().contiguous_segment();
 1056|  1.07M|        }
 1057|       |    }
 1058|       |    else {
 1059|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1060|       |    }
 1061|  1.07M|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2159|   944k|{
 2160|   944k|    auto it = range.begin();
 2161|  1.74M|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 1.73M, False: 15.3k]
  ------------------
 2162|  1.73M|        const auto val =
 2163|  1.73M|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  1.73M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  879|  1.73M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (879:25): [True: 1.71M, False: 12.4k]
  |  |  ------------------
  ------------------
 2165|  1.71M|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  1.71M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  1.71M|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 928k, False: 789k]
  ------------------
 2168|   928k|                return it;
 2169|   928k|            }
 2170|  1.71M|        }
 2171|   801k|        it = val.iterator;
 2172|   801k|    }
 2173|       |
 2174|  15.3k|    return it;
 2175|   944k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|  1.73M|{
 1998|  1.73M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  945|  1.73M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  1.73M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  1.73M|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  1.73M|    auto it = range.begin();
 2002|  1.73M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  1.73M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  880|  1.73M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 12.4k, False: 1.71M]
  |  |  ------------------
  ------------------
 2005|  12.4k|        ++it;
 2006|  12.4k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|  12.4k|        return {it, {}};
 2008|  12.4k|    }
 2009|       |
 2010|  1.71M|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 1.70M, False: 18.2k]
  ------------------
 2011|  1.70M|        ++it;
 2012|  1.70M|        return {it, string_type(1, *range.begin())};
 2013|  1.70M|    }
 2014|       |
 2015|  18.2k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|  18.2k|    return {it, string_type{range.begin(), it}};
 2017|  1.71M|}
_ZN3scn2v44impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1264|  12.4k|{
 1265|  12.4k|    auto it = input.begin();
 1266|  86.4k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 85.1k, False: 1.37k]
  ------------------
 1267|  85.1k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 11.0k, False: 74.0k]
  ------------------
 1268|  11.0k|            break;
 1269|  11.0k|        }
 1270|  85.1k|    }
 1271|  12.4k|    return it;
 1272|  12.4k|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  18.2k|    {
  283|  18.2k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  18.2k|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  18.2k|    {
  252|  18.2k|        constexpr iter_difference_t<I> zero{0};
  253|  18.2k|        iter_difference_t<I> counter{0};
  254|       |
  255|  55.2k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 38.0k, False: 17.2k]
  |  Branch (255:30): [True: 37.0k, False: 1.01k]
  ------------------
  256|  37.0k|            ++i;
  257|  37.0k|            ++counter;
  258|  37.0k|        }
  259|       |
  260|  18.2k|        return counter;
  261|  18.2k|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1988|  1.73M|    {
 1989|  1.73M|        return !codepoint.empty();
 1990|  1.73M|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2180|   944k|{
 2181|   944k|    return read_until_code_point(range, std::not_fn(pred));
 2182|   944k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3065|  1.07M|{
 3066|  1.07M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 1.07M, False: 0]
  ------------------
 3067|  1.07M|        auto it = read_while_classic_space(range);
 3068|  1.07M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|  1.07M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  880|  1.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 15.3k, False: 1.05M]
  |  |  ------------------
  ------------------
 3070|  15.3k|            return unexpected(e);
 3071|  15.3k|        }
 3072|       |
 3073|  1.05M|        return it;
 3074|  1.07M|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|  1.07M|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2215|  1.07M|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|  1.07M|    else {
 2225|  1.07M|        auto it = range.begin();
 2226|       |
 2227|  1.07M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|  1.07M|            auto seg = get_contiguous_beginning(range);
 2229|  1.07M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|  1.07M|                seg_it != seg.end()) {
  ------------------
  |  Branch (2230:17): [True: 128k, False: 944k]
  ------------------
 2231|   128k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|   128k|            }
 2233|   944k|            ranges::advance(it, seg.size());
 2234|   944k|        }
 2235|       |
 2236|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  1.07M|            return detail::is_cp_space(cp);
 2238|  1.07M|        });
 2239|  1.07M|    }
 2240|  1.07M|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   944k|        : m_fptr([](storage fn,
  743|   944k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   944k|              cvref<T> obj = *get<T>(fn);
  745|   944k|              if constexpr (std::is_void_v<R>) {
  746|   944k|                  obj(static_cast<decltype(args)>(args)...);
  747|   944k|              }
  748|   944k|              else {
  749|   944k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   944k|              }
  751|   944k|          }),
  752|   944k|          m_storage(std::addressof(f))
  753|   944k|    {
  754|   944k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  1.71M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.71M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.71M|              else {
  749|  1.71M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.71M|              }
  751|  1.71M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  1.71M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.71M|        else if constexpr (std::is_object_v<T>) {
  688|  1.71M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.71M|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2236|  1.71M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  1.71M|            return detail::is_cp_space(cp);
 2238|  1.71M|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   944k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   944k|        {
  662|   944k|        }
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  981|   618k|{
  982|       |    if constexpr (ranges::contiguous_range<Range> &&
  983|       |                  ranges::sized_range<Range>) {
  984|       |        return true;
  985|       |    }
  986|       |    else if constexpr (std::is_same_v<
  987|       |                           ranges::const_iterator_t<Range>,
  988|       |                           typename detail::basic_scan_buffer<
  989|   618k|                               detail::char_t<Range>>::forward_iterator>) {
  990|   618k|        auto beg = r.begin();
  991|   618k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (991:13): [True: 618k, False: 0]
  ------------------
  992|   618k|            return false;
  993|   618k|        }
  994|       |        if constexpr (ranges::common_range<Range>) {
  995|       |            return beg.contiguous_segment().end() ==
  996|       |                   ranges::end(r).contiguous_segment().end();
  997|       |        }
  998|      0|        else {
  999|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (999:17): [True: 0, False: 0]
  ------------------
 1000|      0|                return beg.contiguous_segment().end() ==
 1001|      0|                       beg.parent()->current_view().end();
 1002|      0|            }
 1003|      0|            return true;
 1004|      0|        }
 1005|       |    }
 1006|       |    else {
 1007|       |        return false;
 1008|       |    }
 1009|   618k|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1955|  1.62M|{
 1956|  1.62M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  945|  1.62M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  1.62M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|  1.62M|    else {
 1967|  1.62M|        auto it = range.begin();
 1968|  1.62M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 976k, False: 647k]
  ------------------
 1969|   976k|            return ranges::next(it, count);
 1970|   976k|        }
 1971|       |
 1972|  2.49M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 1.90M, False: 588k]
  ------------------
 1973|  1.90M|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 59.4k, False: 1.84M]
  ------------------
 1974|  59.4k|                return unexpected(eof_error::eof);
 1975|  59.4k|            }
 1976|  1.90M|        }
 1977|       |
 1978|   588k|        return it;
 1979|   647k|    }
 1980|  1.62M|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1095|  1.62M|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|  1.62M|                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|  1.62M|        else {
 1107|  1.62M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1107:17): [True: 1.62M, False: 0]
  ------------------
 1108|  1.62M|                return static_cast<size_t>(
 1109|  1.62M|                    r.begin().parent()->chars_available() -
 1110|  1.62M|                    r.begin().position());
 1111|  1.62M|            }
 1112|      0|            return r.begin().contiguous_segment().size();
 1113|  1.62M|        }
 1114|       |    }
 1115|       |    else {
 1116|       |        return 0;
 1117|       |    }
 1118|  1.62M|}
_ZNK3scn2v44impl12function_refIFbwES3_EclEw:
  762|  4.48M|    {
  763|  4.48M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  951|  4.48M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  4.48M|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  1.43M|        : m_fptr([](storage fn,
  743|  1.43M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.43M|              cvref<T> obj = *get<T>(fn);
  745|  1.43M|              if constexpr (std::is_void_v<R>) {
  746|  1.43M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.43M|              }
  748|  1.43M|              else {
  749|  1.43M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.43M|              }
  751|  1.43M|          }),
  752|  1.43M|          m_storage(std::addressof(f))
  753|  1.43M|    {
  754|  1.43M|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEwE_clESK_w:
  743|  2.24M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.24M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.24M|              else {
  749|  2.24M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.24M|              }
  751|  2.24M|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  2.24M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  2.24M|        else if constexpr (std::is_object_v<T>) {
  688|  2.24M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.24M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  1.43M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.43M|        {
  662|  1.43M|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_b:
 6074|   452k|    {
 6075|   452k|        const bool need_skipped_width =
 6076|   452k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6076:13): [True: 0, False: 452k]
  |  Branch (6076:33): [True: 0, False: 452k]
  ------------------
 6077|   452k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6078|       |
 6079|       |        // Read prefix
 6080|   452k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6080:13): [True: 0, False: 452k]
  ------------------
 6081|   452k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6081:13): [True: 0, False: 452k]
  ------------------
 6082|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6083|      0|                             need_skipped_width);
 6084|      0|        }
 6085|   452k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6085:13): [True: 452k, False: 0]
  |  Branch (6085:56): [True: 452k, False: 0]
  ------------------
 6086|       |            // Default alignment:
 6087|       |            // Skip preceding whitespace, if required by the reader
 6088|   452k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6088:17): [True: 0, False: 452k]
  ------------------
 6089|      0|                auto max_width_view = take_width(rng, specs.precision);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6093|      0|            }
 6094|   901k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|   452k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   452k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   452k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|   452k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 3.43k, False: 448k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.43k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  3.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  3.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  3.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  3.43k|    }                                                  \
  |  |  |  | 3939|   452k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|   448k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|   901k|                            make_eof_scan_error));
 6096|       |
 6097|   901k|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 448k]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|   448k|            return result_type{it, 0};
 6105|   901k|        }
 6106|       |
 6107|      0|        return result_type{rng.begin(), 0};
 6108|   452k|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2074|  1.07M|{
 2075|  1.07M|    return read_until_code_unit(range, std::not_fn(pred));
 2076|  1.07M|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2055|  1.07M|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|  1.07M|    else {
 2060|  1.07M|        auto first = range.begin();
 2061|  1.68M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 1.68M, False: 4.40k]
  ------------------
 2062|  1.68M|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 1.06M, False: 616k]
  ------------------
 2063|  1.06M|                return first;
 2064|  1.06M|            }
 2065|  1.68M|        }
 2066|  4.40k|        return first;
 2067|  1.07M|    }
 2068|  1.07M|}
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   758k|    {
  108|   758k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   758k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   758k|    {
   94|   758k|        iter_difference_t<I> counter{0};
   95|  2.09M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 1.33M, False: 758k]
  ------------------
   96|  1.33M|            ++i;
   97|  1.33M|            ++counter;
   98|  1.33M|        }
   99|   758k|        return counter;
  100|   758k|    }
_ZN3scn2v44impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1878|   220k|    {
 1879|   220k|        auto stdloc = loc.get<std::locale>();
 1880|   220k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1881|   220k|        grouping = numpunct.grouping();
 1882|   220k|        thousands_sep =
 1883|   220k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1883:13): [True: 0, False: 220k]
  ------------------
 1884|   220k|        decimal_point = numpunct.decimal_point();
 1885|   220k|    }
_ZN3scn2v44impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1815|   220k|{
 1816|   220k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1816:9): [True: 220k, False: 0]
  ------------------
 1817|   220k|        return std::use_facet<Facet>(stdloc);
 1818|   220k|    }
 1819|      0|    stdloc = std::locale(stdloc, new Facet{});
 1820|      0|    return std::use_facet<Facet>(stdloc);
 1821|   220k|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1944|  1.45M|{
 1945|  1.45M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  880|  1.45M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 2.87k, False: 1.45M]
  |  |  ------------------
  ------------------
 1946|  2.87k|        return unexpected(e);
 1947|  2.87k|    }
 1948|       |
 1949|  1.45M|    return ranges::next(range.begin());
 1950|  1.45M|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|  2.23M|{
  951|  2.23M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  880|  2.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 7.51k, False: 2.23M]
  |  |  ------------------
  ------------------
  952|  7.51k|        return eof_error::eof;
  953|  7.51k|    }
  954|  2.23M|    return eof_error::good;
  955|  2.23M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|  3.30M|{
  945|  3.30M|    return is_range_eof(r.begin(), r.end());
  946|  3.30M|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|  3.30M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  3.30M|    {
  938|  3.30M|        return begin == end;
  939|  3.30M|    }
  940|  3.30M|}
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|  1.45M|    {
  296|  1.45M|        ++x;
  297|  1.45M|        return x;
  298|  1.45M|    }
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3257|   629k|{
 3258|   629k|    auto r = read_one_of_code_unit(range, "+-");
 3259|   629k|    if (!r) {
  ------------------
  |  Branch (3259:9): [True: 622k, False: 6.64k]
  ------------------
 3260|   622k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3260:13): [True: 622k, False: 72]
  ------------------
 3261|   622k|            return std::pair{range.begin(), sign_type::default_sign};
 3262|   622k|        }
 3263|     72|        return unexpected(eof_error::eof);
 3264|   622k|    }
 3265|       |
 3266|  6.64k|    auto& it = *r;
 3267|  6.64k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3267:9): [True: 4.89k, False: 1.74k]
  ------------------
 3268|  4.89k|        return std::pair{it, sign_type::minus_sign};
 3269|  4.89k|    }
 3270|  1.74k|    return std::pair{it, sign_type::plus_sign};
 3271|  6.64k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2371|  1.01M|{
 2372|  1.01M|    auto it = read_code_unit(range);
 2373|  1.01M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  880|  1.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 1.65k, False: 1.01M]
  |  |  ------------------
  ------------------
 2374|  1.65k|        return unexpected(make_eof_parse_error(it.error()));
 2375|  1.65k|    }
 2376|       |
 2377|  2.02M|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 2.02M, False: 989k]
  ------------------
 2378|  2.02M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 22.0k, False: 1.99M]
  ------------------
 2379|  22.0k|            return *it;
 2380|  22.0k|        }
 2381|  2.02M|    }
 2382|       |
 2383|   989k|    return unexpected(parse_error::error);
 2384|  1.01M|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2330|  1.62M|{
 2331|  1.62M|    using char_type = detail::char_t<Range>;
 2332|       |
 2333|       |    if constexpr (ranges::contiguous_range<Range> &&
 2334|       |                  std::is_same_v<char_type, char>) {
 2335|       |        if (range.size() < str.size()) {
 2336|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2337|       |        }
 2338|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2339|       |            return unexpected(parse_error::error);
 2340|       |        }
 2341|       |        return ranges::next(range.begin(), str.size());
 2342|       |    }
 2343|  1.62M|    else {
 2344|  1.62M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|  1.62M|            if (ch < 'A' || ch > 'Z') {
 2346|  1.62M|                return ch;
 2347|  1.62M|            }
 2348|  1.62M|            return static_cast<char_type>(ch +
 2349|  1.62M|                                          static_cast<char_type>('a' - 'A'));
 2350|  1.62M|        };
 2351|       |
 2352|  1.62M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|  1.62M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.62M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.62M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|  1.62M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 59.4k, False: 1.56M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  59.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  59.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  59.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  59.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  59.4k|    }                                                  \
  |  |  |  | 3939|  1.62M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|  1.56M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2353|  1.56M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2354|  1.56M|                        .transform_error(make_eof_parse_error));
 2355|       |
 2356|  1.56M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  880|  1.56M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 1.56M, False: 947]
  |  |  ------------------
  ------------------
 2357|  1.56M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2358|  1.56M|                    return ascii_tolower(a) ==
 2359|  1.56M|                           static_cast<detail::char_t<Range>>(b);
 2360|  1.56M|                }))) {
 2361|  1.56M|            return unexpected(parse_error::error);
 2362|  1.56M|        }
 2363|       |
 2364|    947|        return it;
 2365|  1.56M|    }
 2366|  1.62M|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlwE_clEw:
 2344|  1.82M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|  1.82M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2345:17): [True: 1.44M, False: 382k]
  |  Branch (2345:29): [True: 368k, False: 14.2k]
  ------------------
 2346|  1.81M|                return ch;
 2347|  1.81M|            }
 2348|  14.2k|            return static_cast<char_type>(ch +
 2349|  14.2k|                                          static_cast<char_type>('a' - 'A'));
 2350|  1.82M|        };
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2245|   441k|{
 2246|   441k|    auto it = read_code_unit(range);
 2247|   441k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  880|   441k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 1.22k, False: 440k]
  |  |  ------------------
  ------------------
 2248|  1.22k|        return unexpected(make_eof_parse_error(it.error()));
 2249|  1.22k|    }
 2250|       |
 2251|   440k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  880|   440k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 433k, False: 6.71k]
  |  |  ------------------
  ------------------
 2252|   440k|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|   433k|        return unexpected(parse_error::error);
 2254|   433k|    }
 2255|       |
 2256|  6.71k|    return *it;
 2257|   440k|}
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 2094|  1.07M|{
 2095|  1.07M|    auto it = read_while_code_unit(range, pred);
 2096|  1.07M|    if (it == range.begin()) {
  ------------------
  |  Branch (2096:9): [True: 609k, False: 461k]
  ------------------
 2097|   609k|        return unexpected(parse_error::error);
 2098|   609k|    }
 2099|   461k|    return it;
 2100|  1.07M|}
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1719|   438k|    {
 1720|   438k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|   438k|                           ranges::common_range<Range>) {
 1737|   438k|            auto beg_seg = range.begin().contiguous_segment();
 1738|   438k|            auto end_seg = range.end().contiguous_segment();
 1739|   438k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  880|   438k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 19.4k, False: 418k]
  |  |  ------------------
  ------------------
 1740|   438k|                             detail::to_address(end_seg.end()))) {
 1741|  19.4k|                auto& str = m_storage.emplace();
 1742|  19.4k|                str.reserve(range.end().position() - range.begin().position());
 1743|  19.4k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|  19.4k|                m_view = string_view_type{str};
 1745|  19.4k|                return;
 1746|  19.4k|            }
 1747|       |
 1748|   418k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|   418k|                                                            end_seg.data());
 1750|   418k|            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   438k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIwE4viewEv:
 1680|  3.87M|    {
 1681|  3.87M|        return m_view;
 1682|  3.87M|    }
_ZN3scn2v44impl24contiguous_range_factoryIwED2Ev:
 1670|  2.45M|    ~contiguous_range_factory() = default;
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_bll:
 6116|   309k|    {
 6117|   309k|        const bool need_skipped_width =
 6118|   309k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6118:13): [True: 0, False: 309k]
  |  Branch (6118:33): [True: 0, False: 309k]
  ------------------
 6119|   309k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6120|       |
 6121|   309k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6121:13): [True: 0, False: 309k]
  ------------------
 6122|   309k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6122:13): [True: 0, False: 309k]
  ------------------
 6123|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6124:17): [True: 0, False: 0]
  ------------------
 6125|      0|                return result_type{rng.begin(), 0};
 6126|      0|            }
 6127|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6128|      0|                             specs.fill, need_skipped_width);
 6129|      0|        }
 6130|   309k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6130:13): [True: 309k, False: 0]
  ------------------
 6131|   309k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6131:13): [True: 0, False: 309k]
  ------------------
 6132|   309k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6132:15): [True: 0, False: 0]
  |  Branch (6132:35): [True: 0, False: 0]
  ------------------
 6133|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6133:15): [True: 0, False: 0]
  ------------------
 6134|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6134:15): [True: 0, False: 0]
  ------------------
 6135|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                const auto initial_width =
 6137|      0|                    specs.precision - prefix_width - value_width;
 6138|      0|                auto max_width_view = take_width(rng, initial_width);
 6139|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6140|      0|                                  .transform_error(make_eof_scan_error));
 6141|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6142|      0|            }
 6143|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|                            make_eof_scan_error));
 6145|       |
 6146|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return result_type{
 6148|      0|                    it,
 6149|      0|                    calculate_text_width(make_contiguous_buffer(
 6150|      0|                                             ranges::subrange{rng.begin(), it})
 6151|      0|                                             .view())};
 6152|      0|            }
 6153|      0|            return result_type{it, 0};
 6154|      0|        }
 6155|   309k|        return result_type{rng.begin(), 0};
 6156|   309k|    }
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1955|  1.62M|{
 1956|  1.62M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  945|  1.62M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  1.62M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|  1.62M|    if constexpr (ranges::sized_range<Range>) {
 1959|  1.62M|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|  1.62M|        if (sz < count) {
  ------------------
  |  Branch (1960:13): [True: 59.6k, False: 1.56M]
  ------------------
 1961|  59.6k|            return unexpected(eof_error::eof);
 1962|  59.6k|        }
 1963|       |
 1964|  1.56M|        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|       |    else {
 1967|       |        auto it = range.begin();
 1968|       |        if (guaranteed_minimum_size(range) >= count) {
 1969|       |            return ranges::next(it, count);
 1970|       |        }
 1971|       |
 1972|       |        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1973|       |            if (it == range.end()) {
 1974|       |                return unexpected(eof_error::eof);
 1975|       |            }
 1976|       |        }
 1977|       |
 1978|       |        return it;
 1979|       |    }
 1980|  1.62M|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1997|  1.90M|{
 1998|  1.90M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  945|  1.90M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  1.90M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  1.90M|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  1.90M|    auto it = range.begin();
 2002|  1.90M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  1.90M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  880|  1.90M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 1.90M]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|  1.90M|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 1.90M, False: 0]
  ------------------
 2011|  1.90M|        ++it;
 2012|  1.90M|        return {it, string_type(1, *range.begin())};
 2013|  1.90M|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|  1.90M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  944|  3.53M|{
  945|  3.53M|    return is_range_eof(r.begin(), r.end());
  946|  3.53M|}
_ZN3scn2v44impl12is_range_eofIPKwS4_EEbT_T0_:
  928|  3.53M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  3.53M|    {
  938|  3.53M|        return begin == end;
  939|  3.53M|    }
  940|  3.53M|}
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|   397k|    {
  190|   397k|        i = std::move(bound);
  191|   397k|    }
_ZNK3scn2v44impl27read_code_point_into_resultIPKwwE8is_validEv:
 1988|  1.90M|    {
 1989|  1.90M|        return !codepoint.empty();
 1990|  1.90M|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  950|  1.62M|{
  951|  1.62M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  880|  1.62M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 5.36k, False: 1.61M]
  |  |  ------------------
  ------------------
  952|  5.36k|        return eof_error::eof;
  953|  5.36k|    }
  954|  1.61M|    return eof_error::good;
  955|  1.62M|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1944|   839k|{
 1945|   839k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  880|   839k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 732, False: 839k]
  |  |  ------------------
  ------------------
 1946|    732|        return unexpected(e);
 1947|    732|    }
 1948|       |
 1949|   839k|    return ranges::next(range.begin());
 1950|   839k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   839k|    {
  296|   839k|        ++x;
  297|   839k|        return x;
  298|   839k|    }
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3257|   620k|{
 3258|   620k|    auto r = read_one_of_code_unit(range, "+-");
 3259|   620k|    if (!r) {
  ------------------
  |  Branch (3259:9): [True: 615k, False: 4.44k]
  ------------------
 3260|   615k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3260:13): [True: 615k, False: 24]
  ------------------
 3261|   615k|            return std::pair{range.begin(), sign_type::default_sign};
 3262|   615k|        }
 3263|     24|        return unexpected(eof_error::eof);
 3264|   615k|    }
 3265|       |
 3266|  4.44k|    auto& it = *r;
 3267|  4.44k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3267:9): [True: 2.91k, False: 1.53k]
  ------------------
 3268|  2.91k|        return std::pair{it, sign_type::minus_sign};
 3269|  2.91k|    }
 3270|  1.53k|    return std::pair{it, sign_type::plus_sign};
 3271|  4.44k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2371|   700k|{
 2372|   700k|    auto it = read_code_unit(range);
 2373|   700k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  880|   700k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 388, False: 700k]
  |  |  ------------------
  ------------------
 2374|    388|        return unexpected(make_eof_parse_error(it.error()));
 2375|    388|    }
 2376|       |
 2377|  1.39M|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 1.39M, False: 690k]
  ------------------
 2378|  1.39M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 9.91k, False: 1.38M]
  ------------------
 2379|  9.91k|            return *it;
 2380|  9.91k|        }
 2381|  1.39M|    }
 2382|       |
 2383|   690k|    return unexpected(parse_error::error);
 2384|   700k|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2330|  1.62M|{
 2331|  1.62M|    using char_type = detail::char_t<Range>;
 2332|       |
 2333|       |    if constexpr (ranges::contiguous_range<Range> &&
 2334|       |                  std::is_same_v<char_type, char>) {
 2335|       |        if (range.size() < str.size()) {
 2336|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2337|       |        }
 2338|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2339|       |            return unexpected(parse_error::error);
 2340|       |        }
 2341|       |        return ranges::next(range.begin(), str.size());
 2342|       |    }
 2343|  1.62M|    else {
 2344|  1.62M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|  1.62M|            if (ch < 'A' || ch > 'Z') {
 2346|  1.62M|                return ch;
 2347|  1.62M|            }
 2348|  1.62M|            return static_cast<char_type>(ch +
 2349|  1.62M|                                          static_cast<char_type>('a' - 'A'));
 2350|  1.62M|        };
 2351|       |
 2352|  1.62M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|  1.62M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.62M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.62M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|  1.62M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 59.6k, False: 1.56M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  59.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  59.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  59.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  59.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  59.6k|    }                                                  \
  |  |  |  | 3939|  1.62M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|  1.56M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2353|  1.56M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2354|  1.56M|                        .transform_error(make_eof_parse_error));
 2355|       |
 2356|  1.56M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  880|  1.56M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 1.56M, False: 947]
  |  |  ------------------
  ------------------
 2357|  1.56M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2358|  1.56M|                    return ascii_tolower(a) ==
 2359|  1.56M|                           static_cast<detail::char_t<Range>>(b);
 2360|  1.56M|                }))) {
 2361|  1.56M|            return unexpected(parse_error::error);
 2362|  1.56M|        }
 2363|       |
 2364|    947|        return it;
 2365|  1.56M|    }
 2366|  1.62M|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2344|  1.83M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|  1.83M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2345:17): [True: 1.44M, False: 383k]
  |  Branch (2345:29): [True: 369k, False: 14.2k]
  ------------------
 2346|  1.81M|                return ch;
 2347|  1.81M|            }
 2348|  14.2k|            return static_cast<char_type>(ch +
 2349|  14.2k|                                          static_cast<char_type>('a' - 'A'));
 2350|  1.83M|        };
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2245|   139k|{
 2246|   139k|    auto it = read_code_unit(range);
 2247|   139k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  880|   139k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 344, False: 138k]
  |  |  ------------------
  ------------------
 2248|    344|        return unexpected(make_eof_parse_error(it.error()));
 2249|    344|    }
 2250|       |
 2251|   138k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  880|   138k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 136k, False: 2.56k]
  |  |  ------------------
  ------------------
 2252|   138k|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|   136k|        return unexpected(parse_error::error);
 2254|   136k|    }
 2255|       |
 2256|  2.56k|    return *it;
 2257|   138k|}
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2074|   361k|{
 2075|   361k|    return read_until_code_unit(range, std::not_fn(pred));
 2076|   361k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2055|   361k|{
 2056|   361k|    if constexpr (ranges::common_range<Range>) {
 2057|   361k|        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|       |    else {
 2060|       |        auto first = range.begin();
 2061|       |        for (; first != range.end(); ++first) {
 2062|       |            if (pred(*first)) {
 2063|       |                return first;
 2064|       |            }
 2065|       |        }
 2066|       |        return first;
 2067|       |    }
 2068|   361k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3065|   618k|{
 3066|   618k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 618k, False: 0]
  ------------------
 3067|   618k|        auto it = read_while_classic_space(range);
 3068|   618k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|   618k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  880|   618k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 3.97k, False: 614k]
  |  |  ------------------
  ------------------
 3070|  3.97k|            return unexpected(e);
 3071|  3.97k|        }
 3072|       |
 3073|   614k|        return it;
 3074|   618k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|   618k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2215|   618k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|   618k|    else {
 2225|   618k|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|   618k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   618k|            return detail::is_cp_space(cp);
 2238|   618k|        });
 2239|   618k|    }
 2240|   618k|}
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2180|   618k|{
 2181|   618k|    return read_until_code_point(range, std::not_fn(pred));
 2182|   618k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2159|  1.05M|{
 2160|  1.05M|    auto it = range.begin();
 2161|  2.17M|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 1.90M, False: 269k]
  ------------------
 2162|  1.90M|        const auto val =
 2163|  1.90M|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  1.90M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  879|  1.90M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (879:25): [True: 1.90M, False: 0]
  |  |  ------------------
  ------------------
 2165|  1.90M|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  1.90M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  1.90M|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 781k, False: 1.12M]
  ------------------
 2168|   781k|                return it;
 2169|   781k|            }
 2170|  1.90M|        }
 2171|  1.12M|        it = val.iterator;
 2172|  1.12M|    }
 2173|       |
 2174|   269k|    return it;
 2175|  1.05M|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|   618k|        : m_fptr([](storage fn,
  743|   618k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   618k|              cvref<T> obj = *get<T>(fn);
  745|   618k|              if constexpr (std::is_void_v<R>) {
  746|   618k|                  obj(static_cast<decltype(args)>(args)...);
  747|   618k|              }
  748|   618k|              else {
  749|   618k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   618k|              }
  751|   618k|          }),
  752|   618k|          m_storage(std::addressof(f))
  753|   618k|    {
  754|   618k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|  1.06M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.06M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.06M|              else {
  749|  1.06M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.06M|              }
  751|  1.06M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  1.06M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.06M|        else if constexpr (std::is_object_v<T>) {
  688|  1.06M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.06M|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2236|  1.06M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  1.06M|            return detail::is_cp_space(cp);
 2238|  1.06M|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|   618k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   618k|        {
  662|   618k|        }
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  1.41M|    {
  304|  1.41M|        ranges::advance(x, n);
  305|  1.41M|        return x;
  306|  1.41M|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  1.41M|    {
  268|  1.41M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.41M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  1.41M|    {
  181|  4.56M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 3.15M, False: 1.41M]
  ------------------
  182|  3.15M|            ++i;
  183|  3.15M|        }
  184|  1.41M|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIfEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6226|   141k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|       |                          basic_contiguous_scan_context<char_type>>) {
 6231|       |            auto rd = make_reader<T, char_type>();
 6232|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6233|       |            return impl(rd, range, value);
 6234|       |        }
 6235|   141k|        else if constexpr (!detail::is_type_disabled<T>) {
 6236|   141k|            auto rd = make_reader<T, char_type>();
 6237|   141k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   141k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  880|   141k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 0, False: 141k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6238|       |
 6239|   141k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6239:17): [True: 141k, False: 0]
  |  Branch (6239:50): [True: 0, False: 0]
  ------------------
 6240|   141k|                specs.width != 0) {
  ------------------
  |  Branch (6240:17): [True: 0, False: 0]
  ------------------
 6241|   141k|                return impl(rd, range, value);
 6242|   141k|            }
 6243|       |
 6244|      0|            auto crange = get_as_contiguous(range);
 6245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            return ranges::next(range.begin(),
 6247|      0|                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|   141k|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3155|   904k|    {
 3156|   904k|        reader_error_handler eh{};
 3157|   904k|        get_derived().check_specs_impl(specs, eh);
 3158|   904k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  880|   904k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 904k]
  |  |  ------------------
  ------------------
 3159|      0|            return detail::unexpected_scan_error(
 3160|      0|                scan_error::invalid_format_string, eh.m_msg);
 3161|      0|        }
 3162|   904k|        return {};
 3163|   904k|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3167|   904k|    {
 3168|   904k|        return static_cast<Derived&>(*this);
 3169|   904k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4177|   904k|    {
 4178|   904k|        detail::check_float_type_specs(specs, eh);
 4179|   904k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6161|   141k|    {
 6162|   141k|        const bool need_skipped_width =
 6163|   141k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 141k]
  |  Branch (6163:33): [True: 0, False: 141k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|   141k|        auto it = rng.begin();
 6167|   141k|        std::ptrdiff_t prefix_width = 0;
 6168|   141k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 141k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|   141k|        else {
 6176|   141k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   141k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   141k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   141k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|   141k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 1.06k, False: 140k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.06k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.06k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.06k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.06k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.06k|    }                                                  \
  |  |  |  | 3939|   141k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|   140k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|   140k|            std::tie(it, prefix_width) = prefix_result;
 6178|   140k|        }
 6179|   140k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|   140k|        std::ptrdiff_t value_width = 0;
 6183|   140k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 140k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|   140k|        else {
 6199|   140k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   140k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   140k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  880|   140k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 46.0k, False: 93.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  46.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  46.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  46.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  46.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  46.0k|    }                                                  \
  |  | 3939|   140k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  951|   140k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  93.9k|                                             specs, value, loc));
 6201|       |
 6202|  93.9k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 93.9k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|  93.9k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  93.9k|        std::ptrdiff_t postfix_width = 0;
 6211|  93.9k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 93.4k, False: 532]
  ------------------
 6212|  93.4k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  93.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  93.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  93.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|  93.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 93.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  93.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|  93.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  93.4k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  93.4k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  93.4k|                                 value_width));
 6216|  93.4k|            std::tie(it, postfix_width) = postfix_result;
 6217|  93.4k|        }
 6218|       |
 6219|  93.9k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  93.9k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  880|  93.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 0, False: 93.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|  93.9k|            specs, prefix_width, value_width, postfix_width));
 6221|  93.9k|        return it;
 6222|  93.9k|    }
_ZNK3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3150|  1.85M|    {
 3151|  1.85M|        return true;
 3152|  1.85M|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4249|   898k|    {
 4250|   898k|        unsigned options{};
 4251|   898k|        if (specs.localized) {
  ------------------
  |  Branch (4251:13): [True: 220k, False: 677k]
  ------------------
 4252|   220k|            options |= float_reader_base::allow_thsep;
 4253|   220k|        }
 4254|       |
 4255|   898k|        SCN_GCC_COMPAT_PUSH
 4256|   898k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4257|       |
 4258|   898k|        switch (specs.type) {
 4259|   172k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4259:13): [True: 172k, False: 725k]
  ------------------
 4260|   172k|                return options | float_reader_base::allow_fixed;
 4261|       |
 4262|  58.5k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4262:13): [True: 58.5k, False: 839k]
  ------------------
 4263|  58.5k|                return options | float_reader_base::allow_scientific;
 4264|       |
 4265|   242k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4265:13): [True: 242k, False: 655k]
  ------------------
 4266|   242k|                return options | float_reader_base::allow_hex;
 4267|       |
 4268|   204k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4268:13): [True: 204k, False: 693k]
  ------------------
 4269|   204k|                return options | float_reader_base::allow_scientific |
 4270|   204k|                       float_reader_base::allow_fixed;
 4271|       |
 4272|   220k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4272:13): [True: 220k, False: 677k]
  ------------------
 4273|   220k|                return options | float_reader_base::allow_scientific |
 4274|   220k|                       float_reader_base::allow_fixed |
 4275|   220k|                       float_reader_base::allow_hex;
 4276|       |
 4277|      0|            default:
  ------------------
  |  Branch (4277:13): [True: 0, False: 898k]
  ------------------
 4278|      0|                SCN_EXPECT(false);
  ------------------
  |  |  945|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4279|   898k|                SCN_UNREACHABLE;
  ------------------
  |  |  908|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4280|   898k|        }
 4281|       |
 4282|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4283|   898k|    }
_ZN3scn2v44impl12float_readerIwEC2Ej:
 3701|   898k|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v44impl35localized_number_formatting_optionsIwEC2Ev:
 1869|  1.22M|    localized_number_formatting_options() = default;
_ZN3scn2v44impl24contiguous_range_factoryIwEC2Ev:
 1630|  2.45M|    contiguous_range_factory() = default;
_ZN3scn2v44impl12float_readerIwE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3732|   290k|    {
 3733|   290k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  945|   290k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   290k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3734|       |
 3735|   290k|        const std::ptrdiff_t sign_len =
 3736|   290k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3736:13): [True: 2.02k, False: 288k]
  ------------------
 3737|       |
 3738|   290k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3940|   290k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   290k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   290k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|   290k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 34.5k, False: 256k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  34.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  34.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  34.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  34.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  34.5k|    }                                                  \
  |  |  |  | 3939|   290k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|   256k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3739|   256k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3740|   290k|    }
_ZN3scn2v44impl12float_readerIwE17handle_separatorsEv:
 4089|   970k|    {
 4090|   970k|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4090:13): [True: 970k, False: 0]
  ------------------
 4091|   970k|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4091:13): [True: 970k, False: 0]
  ------------------
 4092|   970k|            return;
 4093|   970k|        }
 4094|       |
 4095|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4096|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4096:13): [True: 0, False: 0]
  ------------------
 4097|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4097:27): [True: 0, False: 0]
  ------------------
 4098|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4098:21): [True: 0, False: 0]
  ------------------
 4099|      0|                    ch = CharT{'.'};
 4100|      0|                }
 4101|      0|            }
 4102|      0|        }
 4103|       |
 4104|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4104:13): [True: 0, False: 0]
  ------------------
 4105|      0|            return;
 4106|      0|        }
 4107|       |
 4108|      0|        auto first =
 4109|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4110|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4110:13): [True: 0, False: 0]
  ------------------
 4111|      0|            return;
 4112|      0|        }
 4113|       |
 4114|      0|        m_thsep_indices.push_back(
 4115|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4116|       |
 4117|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4117:31): [True: 0, False: 0]
  ------------------
 4118|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4118:17): [True: 0, False: 0]
  ------------------
 4119|      0|                *first++ = std::move(*it);
 4120|      0|            }
 4121|      0|            else {
 4122|      0|                m_thsep_indices.push_back(
 4123|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4124|      0|            }
 4125|      0|        }
 4126|       |
 4127|      0|        str.erase(first, str.end());
 4128|      0|    }
_ZNK3scn2v44impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1685|  1.07M|    {
 1686|  1.07M|        return m_storage.has_value();
 1687|  1.07M|    }
_ZNR3scn2v44impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1690|   631k|    {
 1691|   631k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  945|   631k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   631k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1692|   631k|        return *m_storage;
 1693|   631k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4202|   140k|    {
 4203|   140k|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|   140k|#if !SCN_DISABLE_LOCALE
 4206|   140k|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 31.9k, False: 108k]
  ------------------
 4207|  31.9k|            return read_impl<Range>(
 4208|  31.9k|                range, rd,
 4209|  31.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  31.9k|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|  31.9k|                },
 4212|  31.9k|                value, loc);
 4213|  31.9k|        }
 4214|   108k|#endif
 4215|       |
 4216|   108k|        return read_impl<Range>(
 4217|   108k|            range, rd,
 4218|   108k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   108k|                return r.read_source(SCN_FWD(args)...);
 4220|   108k|            },
 4221|   108k|            value);
 4222|   140k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4238|   187k|    {
 4239|   187k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|   187k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  880|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 57.9k, False: 130k]
  |  |  ------------------
  ------------------
 4241|  57.9k|            return unexpected(r.error());
 4242|  57.9k|        }
 4243|       |
 4244|   130k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   130k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   130k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   130k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|   130k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 1.93k, False: 128k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.93k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.93k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.93k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.93k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.93k|    }                                                  \
  |  |  |  | 3939|   130k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|   128k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|   128k|        return ranges::next(range.begin(), n);
 4246|   130k|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|   614k|    {
  763|   614k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  951|   614k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   614k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  31.9k|        : m_fptr([](storage fn,
  743|  31.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  31.9k|              cvref<T> obj = *get<T>(fn);
  745|  31.9k|              if constexpr (std::is_void_v<R>) {
  746|  31.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  31.9k|              }
  748|  31.9k|              else {
  749|  31.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  31.9k|              }
  751|  31.9k|          }),
  752|  31.9k|          m_storage(std::addressof(f))
  753|  31.9k|    {
  754|  31.9k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  31.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  31.9k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  31.9k|              else {
  749|  31.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  31.9k|              }
  751|  31.9k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  31.9k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  31.9k|        else if constexpr (std::is_object_v<T>) {
  688|  31.9k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  31.9k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4209|  31.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  31.9k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  951|  31.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|  31.9k|                },
_ZN3scn2v44impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3720|   110k|    {
 3721|   110k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3722|   110k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  879|   110k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (879:25): [True: 0, False: 110k]
  |  |  ------------------
  ------------------
 3723|      0|            m_locale_options.thousands_sep = CharT{0};
 3724|      0|        }
 3725|       |
 3726|   110k|        return read_source_impl(range);
 3727|   110k|    }
_ZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3746|   614k|    {
 3747|   614k|        SCN_TRY(sign_result,
  ------------------
  |  | 3940|   614k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   614k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   614k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|   614k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 614k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   614k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|   614k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3748|   614k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3749|   614k|        auto it = sign_result.first;
 3750|   614k|        m_sign = sign_result.second;
 3751|       |
 3752|   614k|        auto digits_begin = it;
 3753|   614k|        auto r = ranges::subrange{it, range.end()};
 3754|       |        if constexpr (ranges::contiguous_range<Range> &&
 3755|       |                      ranges::sized_range<Range>) {
 3756|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3757|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3758|       |                SCN_TRY_ASSIGN(
 3759|       |                    it,
 3760|       |                    do_read_source_impl(
 3761|       |                        r,
 3762|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3763|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3764|       |            }
 3765|       |            else {
 3766|       |                auto cb = [&](const auto& rr)
 3767|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3768|       |                    auto res = read_all(rr);
 3769|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3770|       |                        return detail::unexpected_scan_error(
 3771|       |                            scan_error::invalid_scanned_value,
 3772|       |                            "Invalid float value");
 3773|       |                    }
 3774|       |                    return res;
 3775|       |                };
 3776|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3777|       |            }
 3778|       |        }
 3779|   614k|        else {
 3780|   614k|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3935|   614k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   614k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  880|   614k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 176k, False: 438k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|   176k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|   176k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|   176k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|   176k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|   176k|    }                                                  \
  |  | 3939|   614k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  951|   614k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3781|   438k|                it,
 3782|   438k|                do_read_source_impl(
 3783|   438k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3784|   438k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3785|   438k|        }
 3786|       |
 3787|   614k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  945|   614k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   614k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3788|       |
 3789|   438k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3789:13): [True: 438k, False: 0]
  |  Branch (3789:48): [True: 438k, False: 0]
  ------------------
 3790|   438k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3790:13): [True: 438k, False: 0]
  ------------------
 3791|   438k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3791:13): [True: 438k, False: 0]
  ------------------
 3792|   438k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3793|   438k|        }
 3794|       |
 3795|   438k|        handle_separators();
 3796|       |
 3797|   438k|        return it;
 3798|   614k|    }
_ZN3scn2v44impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 4032|   614k|    {
 4033|   614k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4034|   614k|        const bool allowed_nonhex =
 4035|   614k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4036|   614k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4037|       |
 4038|   614k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4038:39): [True: 614k, False: 0]
  |  Branch (4038:45): [True: 0, False: 614k]
  ------------------
 4039|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4040|      0|                scan_error::invalid_scanned_value,
 4041|      0|                "Invalid infinite floating-point value"));
 4042|      0|        }
 4043|   614k|        else if (r) {
  ------------------
  |  Branch (4043:18): [True: 0, False: 614k]
  ------------------
 4044|      0|            return *r;
 4045|      0|        }
 4046|       |
 4047|   614k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4047:39): [True: 614k, False: 0]
  |  Branch (4047:45): [True: 0, False: 614k]
  ------------------
 4048|      0|            return unexpected(r.error());
 4049|      0|        }
 4050|   614k|        else if (r) {
  ------------------
  |  Branch (4050:18): [True: 0, False: 614k]
  ------------------
 4051|      0|            return *r;
 4052|      0|        }
 4053|       |
 4054|   614k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4054:13): [True: 396k, False: 217k]
  |  Branch (4054:28): [True: 121k, False: 275k]
  ------------------
 4055|       |            // only hex allowed:
 4056|       |            // prefix "0x" allowed, not required
 4057|   121k|            auto it = range.begin();
 4058|       |
 4059|   121k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4059:22): [True: 282, False: 120k]
  ------------------
 4060|    282|                m_kind = float_kind::hex_with_prefix;
 4061|    282|                it = *r;
 4062|    282|            }
 4063|   120k|            else {
 4064|   120k|                m_kind = float_kind::hex_without_prefix;
 4065|   120k|            }
 4066|       |
 4067|   121k|            return read_hex(ranges::subrange{it, range.end()});
 4068|   121k|        }
 4069|   492k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4069:13): [True: 217k, False: 275k]
  |  Branch (4069:29): [True: 217k, False: 0]
  ------------------
 4070|       |            // only nonhex allowed:
 4071|       |            // no prefix allowed
 4072|   217k|            m_kind = float_kind::generic;
 4073|   217k|            return read_regular_float(range);
 4074|   217k|        }
 4075|       |        // both hex and nonhex allowed:
 4076|       |        // check for "0x" prefix -> hex,
 4077|       |        // regular otherwise
 4078|       |
 4079|   275k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  880|   275k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 665, False: 274k]
  |  |  ------------------
  ------------------
 4080|    665|            m_kind = float_kind::hex_with_prefix;
 4081|    665|            return read_hex(ranges::subrange{*r, range.end()});
 4082|    665|        }
 4083|       |
 4084|   274k|        m_kind = float_kind::generic;
 4085|   274k|        return read_regular(range);
 4086|   275k|    }
_ZN3scn2v44impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3840|   614k|    {
 3841|   614k|        auto it = range.begin();
 3842|   614k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3842:73): [True: 614k, False: 0]
  ------------------
 3843|   614k|            return unexpected(r.error());
 3844|   614k|        }
 3845|      0|        else {
 3846|      0|            it = *r;
 3847|      0|        }
 3848|       |
 3849|      0|        if (auto r = read_matching_string_classic_nocase(
 3850|      0|                ranges::subrange{it, range.end()}, "inity");
 3851|      0|            !r) {
  ------------------
  |  Branch (3851:13): [True: 0, False: 0]
  ------------------
 3852|      0|            m_kind = float_kind::inf_short;
 3853|      0|            return it;
 3854|      0|        }
 3855|      0|        else {
 3856|      0|            m_kind = float_kind::inf_long;
 3857|      0|            return *r;
 3858|      0|        }
 3859|      0|    }
_ZN3scn2v44impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3863|   614k|    {
 3864|   614k|        auto it = range.begin();
 3865|   614k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3865:73): [True: 614k, False: 0]
  ------------------
 3866|   614k|            return r.transform_error(map_parse_error_to_scan_error(
 3867|   614k|                scan_error::invalid_scanned_value,
 3868|   614k|                "Invalid floating-point NaN value"));
 3869|   614k|        }
 3870|      0|        else {
 3871|      0|            it = *r;
 3872|      0|        }
 3873|       |
 3874|      0|        if (auto r =
 3875|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3876|      0|            !r) {
  ------------------
  |  Branch (3876:13): [True: 0, False: 0]
  ------------------
 3877|      0|            m_kind = float_kind::nan_simple;
 3878|      0|            return it;
 3879|      0|        }
 3880|      0|        else {
 3881|      0|            it = *r;
 3882|      0|        }
 3883|       |
 3884|      0|        auto payload_beg_it = it;
 3885|      0|        it = read_while_code_unit(
 3886|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3887|      0|                return is_ascii_char(ch) &&
 3888|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3889|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3890|      0|            });
 3891|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3892|       |
 3893|      0|        m_kind = float_kind::nan_with_payload;
 3894|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3894:18): [True: 0, False: 0]
  ------------------
 3895|      0|                                             ')')) {
 3896|      0|            return *r;
 3897|      0|        }
 3898|      0|        return detail::unexpected_scan_error(
 3899|      0|            scan_error::invalid_scanned_value,
 3900|      0|            "Invalid floating-point NaN payload");
 3901|      0|    }
_ZN3scn2v44impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3833|   396k|    {
 3834|   396k|        return read_matching_string_classic_nocase(range, "0x");
 3835|   396k|    }
_ZN3scn2v44impl12float_readerIwE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3934|   121k|    {
 3935|   121k|        auto it = range.begin();
 3936|       |
 3937|   121k|        std::ptrdiff_t digits_count = 0;
 3938|   121k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3939|   121k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  880|   121k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 27.2k, False: 94.5k]
  |  |  ------------------
  ------------------
 3940|  27.2k|            return r.transform_error(map_parse_error_to_scan_error(
 3941|  27.2k|                scan_error::invalid_scanned_value,
 3942|  27.2k|                "Invalid hexadecimal floating-point value"));
 3943|  27.2k|        }
 3944|  94.5k|        else {
 3945|  94.5k|            digits_count += ranges::distance(it, *r);
 3946|  94.5k|            it = *r;
 3947|  94.5k|        }
 3948|       |
 3949|  94.5k|        m_integral_part_length = digits_count;
 3950|  94.5k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3950:18): [True: 1.21k, False: 93.3k]
  ------------------
 3951|  94.5k|                                             m_locale_options.decimal_point)) {
 3952|  1.21k|            it = *r;
 3953|  1.21k|        }
 3954|       |
 3955|  94.5k|        if (auto r =
  ------------------
  |  Branch (3955:18): [True: 1.04k, False: 93.5k]
  ------------------
 3956|  94.5k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3957|  1.04k|            digits_count += ranges::distance(it, *r);
 3958|  1.04k|            it = *r;
 3959|  1.04k|        }
 3960|       |
 3961|  94.5k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  880|  94.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 94.5k]
  |  |  ------------------
  ------------------
 3962|      0|            return detail::unexpected_scan_error(
 3963|      0|                scan_error::invalid_scanned_value,
 3964|      0|                "No significand digits in hexfloat");
 3965|      0|        }
 3966|       |
 3967|  94.5k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3968|       |
 3969|  94.5k|        return it;
 3970|  94.5k|    }
_ZN3scn2v44impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3818|   216k|    {
 3819|   216k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  880|   216k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 216k]
  |  |  |  Branch (880:45): [True: 0, False: 216k]
  |  |  |  Branch (880:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3820|   216k|                         thsep_allowed)) {
 3821|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3822|      0|                return char_to_int(ch) < 16 ||
 3823|      0|                       ch == m_locale_options.thousands_sep;
 3824|      0|            });
 3825|      0|        }
 3826|       |
 3827|   216k|        return read_while1_code_unit(
 3828|   216k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3829|   216k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|   216k|        : m_fptr([](storage fn,
  743|   216k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   216k|              cvref<T> obj = *get<T>(fn);
  745|   216k|              if constexpr (std::is_void_v<R>) {
  746|   216k|                  obj(static_cast<decltype(args)>(args)...);
  747|   216k|              }
  748|   216k|              else {
  749|   216k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   216k|              }
  751|   216k|          }),
  752|   216k|          m_storage(std::addressof(f))
  753|   216k|    {
  754|   216k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|   346k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   346k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   346k|              else {
  749|   346k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   346k|              }
  751|   346k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|   346k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   346k|        else if constexpr (std::is_object_v<T>) {
  688|   346k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   346k|    }
_ZZN3scn2v44impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3828|   346k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   216k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   216k|        {
  662|   216k|        }
_ZN3scn2v44impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3906|   383k|    {
 3907|   383k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3907:18): [True: 15.3k, False: 368k]
  ------------------
 3908|  15.3k|            auto beg_exp_it = range.begin();
 3909|  15.3k|            auto it = *r;
 3910|       |
 3911|  15.3k|            if (auto r_sign =
  ------------------
  |  Branch (3911:22): [True: 15.2k, False: 72]
  ------------------
 3912|  15.3k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3913|  15.2k|                it = r_sign->first;
 3914|  15.2k|            }
 3915|       |
 3916|  15.3k|            if (auto r_exp = read_while1_code_unit(
 3917|  15.3k|                    ranges::subrange{it, range.end()},
 3918|  15.3k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3919|  15.3k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  880|  15.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 1.25k, False: 14.1k]
  |  |  ------------------
  ------------------
 3920|  1.25k|                it = beg_exp_it;
 3921|  1.25k|            }
 3922|  14.1k|            else {
 3923|  14.1k|                it = *r_exp;
 3924|  14.1k|            }
 3925|       |
 3926|  15.3k|            return it;
 3927|  15.3k|        }
 3928|   368k|        return range.begin();
 3929|   383k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|  15.3k|        : m_fptr([](storage fn,
  743|  15.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  15.3k|              cvref<T> obj = *get<T>(fn);
  745|  15.3k|              if constexpr (std::is_void_v<R>) {
  746|  15.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  15.3k|              }
  748|  15.3k|              else {
  749|  15.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  15.3k|              }
  751|  15.3k|          }),
  752|  15.3k|          m_storage(std::addressof(f))
  753|  15.3k|    {
  754|  15.3k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES15_w:
  743|  48.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  48.4k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  48.4k|              else {
  749|  48.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  48.4k|              }
  751|  48.4k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  48.4k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  48.4k|        else if constexpr (std::is_object_v<T>) {
  688|  48.4k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  48.4k|    }
_ZZN3scn2v44impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlwE_clEw:
 3918|  48.4k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|  15.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  15.3k|        {
  662|  15.3k|        }
_ZN3scn2v44impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3975|   492k|    {
 3976|   492k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3977|   492k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3977:35): [True: 406k, False: 86.0k]
  |  Branch (3977:50): [True: 29.2k, False: 376k]
  ------------------
 3978|       |
 3979|   492k|        auto it = ranges::begin(range);
 3980|   492k|        std::ptrdiff_t digits_count = 0;
 3981|       |
 3982|   492k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3983|   492k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  880|   492k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 144k, False: 347k]
  |  |  ------------------
  ------------------
 3984|   144k|            return r.transform_error(
 3985|   144k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3986|   144k|                                              "Invalid floating-point value"));
 3987|   144k|        }
 3988|   347k|        else {
 3989|   347k|            digits_count += ranges::distance(it, *r);
 3990|   347k|            it = *r;
 3991|   347k|        }
 3992|       |
 3993|   347k|        m_integral_part_length = digits_count;
 3994|   347k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3994:18): [True: 5.50k, False: 341k]
  ------------------
 3995|   347k|                                             m_locale_options.decimal_point)) {
 3996|  5.50k|            it = *r;
 3997|  5.50k|        }
 3998|       |
 3999|   347k|        if (auto r =
  ------------------
  |  Branch (3999:18): [True: 4.72k, False: 342k]
  ------------------
 4000|   347k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4001|  4.72k|            digits_count += ranges::distance(it, *r);
 4002|  4.72k|            it = *r;
 4003|  4.72k|        }
 4004|       |
 4005|   347k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  880|   347k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 347k]
  |  |  ------------------
  ------------------
 4006|      0|            return detail::unexpected_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "No significand digits in float");
 4009|      0|        }
 4010|       |
 4011|   347k|        auto beg_exp_it = it;
 4012|   347k|        if (allowed_exp) {
  ------------------
  |  Branch (4012:13): [True: 288k, False: 58.3k]
  ------------------
 4013|   288k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4014|   288k|        }
 4015|   347k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4015:13): [True: 5.27k, False: 342k]
  |  Branch (4015:29): [True: 3.84k, False: 1.42k]
  ------------------
 4016|  3.84k|            return detail::unexpected_scan_error(
 4017|  3.84k|                scan_error::invalid_scanned_value,
 4018|  3.84k|                "No exponent given to scientific float");
 4019|  3.84k|        }
 4020|       |
 4021|   343k|        m_kind =
 4022|   343k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4022:13): [True: 329k, False: 13.9k]
  ------------------
 4023|       |
 4024|   343k|        return it;
 4025|   347k|    }
_ZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3803|   839k|    {
 3804|   839k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  880|   839k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 839k]
  |  |  |  Branch (880:45): [True: 0, False: 839k]
  |  |  |  Branch (880:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3805|   839k|                         thsep_allowed)) {
 3806|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3807|      0|                return char_to_int(ch) < 10 ||
 3808|      0|                       ch == m_locale_options.thousands_sep;
 3809|      0|            });
 3810|      0|        }
 3811|       |
 3812|   839k|        return read_while1_code_unit(
 3813|   839k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3814|   839k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|   839k|        : m_fptr([](storage fn,
  743|   839k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   839k|              cvref<T> obj = *get<T>(fn);
  745|   839k|              if constexpr (std::is_void_v<R>) {
  746|   839k|                  obj(static_cast<decltype(args)>(args)...);
  747|   839k|              }
  748|   839k|              else {
  749|   839k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   839k|              }
  751|   839k|          }),
  752|   839k|          m_storage(std::addressof(f))
  753|   839k|    {
  754|   839k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|  1.28M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.28M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.28M|              else {
  749|  1.28M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.28M|              }
  751|  1.28M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|  1.28M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.28M|        else if constexpr (std::is_object_v<T>) {
  688|  1.28M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.28M|    }
_ZZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3813|  1.28M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   839k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   839k|        {
  662|   839k|        }
_ZN3scn2v44impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSG_:
 1675|   438k|    {
 1676|   438k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  951|   438k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|   438k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  31.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  31.9k|        {
  662|  31.9k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   108k|        : m_fptr([](storage fn,
  743|   108k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   108k|              cvref<T> obj = *get<T>(fn);
  745|   108k|              if constexpr (std::is_void_v<R>) {
  746|   108k|                  obj(static_cast<decltype(args)>(args)...);
  747|   108k|              }
  748|   108k|              else {
  749|   108k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   108k|              }
  751|   108k|          }),
  752|   108k|          m_storage(std::addressof(f))
  753|   108k|    {
  754|   108k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   108k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   108k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   108k|              else {
  749|   108k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   108k|              }
  751|   108k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   108k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   108k|        else if constexpr (std::is_object_v<T>) {
  688|   108k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   108k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4218|   108k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   108k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  951|   108k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|   108k|            },
_ZN3scn2v44impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3706|   503k|    {
 3707|   503k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  880|   503k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 503k]
  |  |  ------------------
  ------------------
 3708|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3709|      0|                classic_with_thsep_tag{}};
 3710|      0|        }
 3711|       |
 3712|   503k|        return read_source_impl(range);
 3713|   503k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   108k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   108k|        {
  662|   108k|        }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4202|   140k|    {
 4203|   140k|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|   140k|#if !SCN_DISABLE_LOCALE
 4206|   140k|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 31.9k, False: 108k]
  ------------------
 4207|  31.9k|            return read_impl<Range>(
 4208|  31.9k|                range, rd,
 4209|  31.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  31.9k|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|  31.9k|                },
 4212|  31.9k|                value, loc);
 4213|  31.9k|        }
 4214|   108k|#endif
 4215|       |
 4216|   108k|        return read_impl<Range>(
 4217|   108k|            range, rd,
 4218|   108k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   108k|                return r.read_source(SCN_FWD(args)...);
 4220|   108k|            },
 4221|   108k|            value);
 4222|   140k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4238|   188k|    {
 4239|   188k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|   188k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  880|   188k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 27.2k, False: 160k]
  |  |  ------------------
  ------------------
 4241|  27.2k|            return unexpected(r.error());
 4242|  27.2k|        }
 4243|       |
 4244|   160k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   160k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   160k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   160k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|   160k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 32.5k, False: 128k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  32.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  32.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  32.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  32.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  32.5k|    }                                                  \
  |  |  |  | 3939|   160k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|   128k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|   128k|        return ranges::next(range.begin(), n);
 4246|   160k|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|   614k|    {
  763|   614k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  951|   614k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   614k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  31.9k|        : m_fptr([](storage fn,
  743|  31.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  31.9k|              cvref<T> obj = *get<T>(fn);
  745|  31.9k|              if constexpr (std::is_void_v<R>) {
  746|  31.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  31.9k|              }
  748|  31.9k|              else {
  749|  31.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  31.9k|              }
  751|  31.9k|          }),
  752|  31.9k|          m_storage(std::addressof(f))
  753|  31.9k|    {
  754|  31.9k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  31.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  31.9k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  31.9k|              else {
  749|  31.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  31.9k|              }
  751|  31.9k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  31.9k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  31.9k|        else if constexpr (std::is_object_v<T>) {
  688|  31.9k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  31.9k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4209|  31.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  31.9k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  951|  31.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|  31.9k|                },
_ZN3scn2v44impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3720|   110k|    {
 3721|   110k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3722|   110k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  879|   110k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (879:25): [True: 0, False: 110k]
  |  |  ------------------
  ------------------
 3723|      0|            m_locale_options.thousands_sep = CharT{0};
 3724|      0|        }
 3725|       |
 3726|   110k|        return read_source_impl(range);
 3727|   110k|    }
_ZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3746|   614k|    {
 3747|   614k|        SCN_TRY(sign_result,
  ------------------
  |  | 3940|   614k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   614k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   614k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|   614k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 614k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   614k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|   614k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3748|   614k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3749|   614k|        auto it = sign_result.first;
 3750|   614k|        m_sign = sign_result.second;
 3751|       |
 3752|   614k|        auto digits_begin = it;
 3753|   614k|        auto r = ranges::subrange{it, range.end()};
 3754|       |        if constexpr (ranges::contiguous_range<Range> &&
 3755|   614k|                      ranges::sized_range<Range>) {
 3756|   614k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  880|  1.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 614k]
  |  |  |  Branch (880:45): [True: 0, False: 614k]
  |  |  |  Branch (880:45): [True: 0, False: 614k]
  |  |  ------------------
  ------------------
 3757|   614k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3758|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|      0|    }                                                  \
  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3759|      0|                    it,
 3760|      0|                    do_read_source_impl(
 3761|      0|                        r,
 3762|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3763|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3764|      0|            }
 3765|   614k|            else {
 3766|   614k|                auto cb = [&](const auto& rr)
 3767|   614k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3768|   614k|                    auto res = read_all(rr);
 3769|   614k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3770|   614k|                        return detail::unexpected_scan_error(
 3771|   614k|                            scan_error::invalid_scanned_value,
 3772|   614k|                            "Invalid float value");
 3773|   614k|                    }
 3774|   614k|                    return res;
 3775|   614k|                };
 3776|   614k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3935|   614k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   614k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  880|   614k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 82.5k, False: 532k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  82.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  82.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  82.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  82.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  82.5k|    }                                                  \
  |  | 3939|   614k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  951|   614k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3777|   532k|            }
 3778|       |        }
 3779|       |        else {
 3780|       |            SCN_TRY_ASSIGN(
 3781|       |                it,
 3782|       |                do_read_source_impl(
 3783|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3784|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3785|       |        }
 3786|       |
 3787|   614k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  945|   614k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   614k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3788|       |
 3789|   532k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3789:13): [True: 532k, False: 0]
  |  Branch (3789:48): [True: 532k, False: 0]
  ------------------
 3790|   532k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3790:13): [True: 532k, False: 0]
  ------------------
 3791|   532k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3791:13): [True: 532k, False: 0]
  ------------------
 3792|   532k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3793|   532k|        }
 3794|       |
 3795|   532k|        handle_separators();
 3796|       |
 3797|   532k|        return it;
 3798|   614k|    }
_ZN3scn2v44impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3840|   614k|    {
 3841|   614k|        auto it = range.begin();
 3842|   614k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3842:73): [True: 614k, False: 0]
  ------------------
 3843|   614k|            return unexpected(r.error());
 3844|   614k|        }
 3845|      0|        else {
 3846|      0|            it = *r;
 3847|      0|        }
 3848|       |
 3849|      0|        if (auto r = read_matching_string_classic_nocase(
 3850|      0|                ranges::subrange{it, range.end()}, "inity");
 3851|      0|            !r) {
  ------------------
  |  Branch (3851:13): [True: 0, False: 0]
  ------------------
 3852|      0|            m_kind = float_kind::inf_short;
 3853|      0|            return it;
 3854|      0|        }
 3855|      0|        else {
 3856|      0|            m_kind = float_kind::inf_long;
 3857|      0|            return *r;
 3858|      0|        }
 3859|      0|    }
_ZN3scn2v44impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3863|   614k|    {
 3864|   614k|        auto it = range.begin();
 3865|   614k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3865:73): [True: 614k, False: 0]
  ------------------
 3866|   614k|            return r.transform_error(map_parse_error_to_scan_error(
 3867|   614k|                scan_error::invalid_scanned_value,
 3868|   614k|                "Invalid floating-point NaN value"));
 3869|   614k|        }
 3870|      0|        else {
 3871|      0|            it = *r;
 3872|      0|        }
 3873|       |
 3874|      0|        if (auto r =
 3875|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3876|      0|            !r) {
  ------------------
  |  Branch (3876:13): [True: 0, False: 0]
  ------------------
 3877|      0|            m_kind = float_kind::nan_simple;
 3878|      0|            return it;
 3879|      0|        }
 3880|      0|        else {
 3881|      0|            it = *r;
 3882|      0|        }
 3883|       |
 3884|      0|        auto payload_beg_it = it;
 3885|      0|        it = read_while_code_unit(
 3886|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3887|      0|                return is_ascii_char(ch) &&
 3888|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3889|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3890|      0|            });
 3891|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3892|       |
 3893|      0|        m_kind = float_kind::nan_with_payload;
 3894|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3894:18): [True: 0, False: 0]
  ------------------
 3895|      0|                                             ')')) {
 3896|      0|            return *r;
 3897|      0|        }
 3898|      0|        return detail::unexpected_scan_error(
 3899|      0|            scan_error::invalid_scanned_value,
 3900|      0|            "Invalid floating-point NaN payload");
 3901|      0|    }
_ZN3scn2v44impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|   397k|    {
 3834|   397k|        return read_matching_string_classic_nocase(range, "0x");
 3835|   397k|    }
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2094|   361k|{
 2095|   361k|    auto it = read_while_code_unit(range, pred);
 2096|   361k|    if (it == range.begin()) {
  ------------------
  |  Branch (2096:9): [True: 215k, False: 146k]
  ------------------
 2097|   215k|        return unexpected(parse_error::error);
 2098|   215k|    }
 2099|   146k|    return it;
 2100|   361k|}
_ZN3scn2v44impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3906|  80.6k|    {
 3907|  80.6k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3907:18): [True: 5.46k, False: 75.2k]
  ------------------
 3908|  5.46k|            auto beg_exp_it = range.begin();
 3909|  5.46k|            auto it = *r;
 3910|       |
 3911|  5.46k|            if (auto r_sign =
  ------------------
  |  Branch (3911:22): [True: 5.44k, False: 24]
  ------------------
 3912|  5.46k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3913|  5.44k|                it = r_sign->first;
 3914|  5.44k|            }
 3915|       |
 3916|  5.46k|            if (auto r_exp = read_while1_code_unit(
 3917|  5.46k|                    ranges::subrange{it, range.end()},
 3918|  5.46k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3919|  5.46k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  880|  5.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 474, False: 4.99k]
  |  |  ------------------
  ------------------
 3920|    474|                it = beg_exp_it;
 3921|    474|            }
 3922|  4.99k|            else {
 3923|  4.99k|                it = *r_exp;
 3924|  4.99k|            }
 3925|       |
 3926|  5.46k|            return it;
 3927|  5.46k|        }
 3928|  75.2k|        return range.begin();
 3929|  80.6k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_:
  742|  5.46k|        : m_fptr([](storage fn,
  743|  5.46k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.46k|              cvref<T> obj = *get<T>(fn);
  745|  5.46k|              if constexpr (std::is_void_v<R>) {
  746|  5.46k|                  obj(static_cast<decltype(args)>(args)...);
  747|  5.46k|              }
  748|  5.46k|              else {
  749|  5.46k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.46k|              }
  751|  5.46k|          }),
  752|  5.46k|          m_storage(std::addressof(f))
  753|  5.46k|    {
  754|  5.46k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEwE_clES12_w:
  743|  16.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  16.8k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  16.8k|              else {
  749|  16.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  16.8k|              }
  751|  16.8k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  16.8k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  16.8k|        else if constexpr (std::is_object_v<T>) {
  688|  16.8k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  16.8k|    }
_ZZN3scn2v44impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlwE_clEw:
 3918|  16.8k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|  5.46k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  5.46k|        {
  662|  5.46k|        }
_ZN3scn2v44impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3975|   217k|    {
 3976|   217k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3977|   217k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3977:35): [True: 131k, False: 86.0k]
  |  Branch (3977:50): [True: 29.2k, False: 102k]
  ------------------
 3978|       |
 3979|   217k|        auto it = ranges::begin(range);
 3980|   217k|        std::ptrdiff_t digits_count = 0;
 3981|       |
 3982|   217k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3983|   217k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  880|   217k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 78.5k, False: 139k]
  |  |  ------------------
  ------------------
 3984|  78.5k|            return r.transform_error(
 3985|  78.5k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3986|  78.5k|                                              "Invalid floating-point value"));
 3987|  78.5k|        }
 3988|   139k|        else {
 3989|   139k|            digits_count += ranges::distance(it, *r);
 3990|   139k|            it = *r;
 3991|   139k|        }
 3992|       |
 3993|   139k|        m_integral_part_length = digits_count;
 3994|   139k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3994:18): [True: 2.56k, False: 136k]
  ------------------
 3995|   139k|                                             m_locale_options.decimal_point)) {
 3996|  2.56k|            it = *r;
 3997|  2.56k|        }
 3998|       |
 3999|   139k|        if (auto r =
  ------------------
  |  Branch (3999:18): [True: 2.19k, False: 136k]
  ------------------
 4000|   139k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4001|  2.19k|            digits_count += ranges::distance(it, *r);
 4002|  2.19k|            it = *r;
 4003|  2.19k|        }
 4004|       |
 4005|   139k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  880|   139k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 139k]
  |  |  ------------------
  ------------------
 4006|      0|            return detail::unexpected_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "No significand digits in float");
 4009|      0|        }
 4010|       |
 4011|   139k|        auto beg_exp_it = it;
 4012|   139k|        if (allowed_exp) {
  ------------------
  |  Branch (4012:13): [True: 80.6k, False: 58.3k]
  ------------------
 4013|  80.6k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4014|  80.6k|        }
 4015|   139k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4015:13): [True: 5.27k, False: 133k]
  |  Branch (4015:29): [True: 3.84k, False: 1.42k]
  ------------------
 4016|  3.84k|            return detail::unexpected_scan_error(
 4017|  3.84k|                scan_error::invalid_scanned_value,
 4018|  3.84k|                "No exponent given to scientific float");
 4019|  3.84k|        }
 4020|       |
 4021|   135k|        m_kind =
 4022|   135k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4022:13): [True: 130k, False: 4.99k]
  ------------------
 4023|       |
 4024|   135k|        return it;
 4025|   139k|    }
_ZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3803|   356k|    {
 3804|   356k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  880|   356k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 356k]
  |  |  |  Branch (880:45): [True: 0, False: 356k]
  |  |  |  Branch (880:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3805|   356k|                         thsep_allowed)) {
 3806|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3807|      0|                return char_to_int(ch) < 10 ||
 3808|      0|                       ch == m_locale_options.thousands_sep;
 3809|      0|            });
 3810|      0|        }
 3811|       |
 3812|   356k|        return read_while1_code_unit(
 3813|   356k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3814|   356k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|   356k|        : m_fptr([](storage fn,
  743|   356k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   356k|              cvref<T> obj = *get<T>(fn);
  745|   356k|              if constexpr (std::is_void_v<R>) {
  746|   356k|                  obj(static_cast<decltype(args)>(args)...);
  747|   356k|              }
  748|   356k|              else {
  749|   356k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   356k|              }
  751|   356k|          }),
  752|   356k|          m_storage(std::addressof(f))
  753|   356k|    {
  754|   356k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES10_w:
  743|   542k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   542k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   542k|              else {
  749|   542k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   542k|              }
  751|   542k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  683|   542k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   542k|        else if constexpr (std::is_object_v<T>) {
  688|   542k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   542k|    }
_ZZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3813|   542k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   356k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   356k|        {
  662|   356k|        }
_ZN3scn2v44impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 4032|   614k|    {
 4033|   614k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4034|   614k|        const bool allowed_nonhex =
 4035|   614k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4036|   614k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4037|       |
 4038|   614k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4038:39): [True: 614k, False: 0]
  |  Branch (4038:45): [True: 0, False: 614k]
  ------------------
 4039|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4040|      0|                scan_error::invalid_scanned_value,
 4041|      0|                "Invalid infinite floating-point value"));
 4042|      0|        }
 4043|   614k|        else if (r) {
  ------------------
  |  Branch (4043:18): [True: 0, False: 614k]
  ------------------
 4044|      0|            return *r;
 4045|      0|        }
 4046|       |
 4047|   614k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4047:39): [True: 614k, False: 0]
  |  Branch (4047:45): [True: 0, False: 614k]
  ------------------
 4048|      0|            return unexpected(r.error());
 4049|      0|        }
 4050|   614k|        else if (r) {
  ------------------
  |  Branch (4050:18): [True: 0, False: 614k]
  ------------------
 4051|      0|            return *r;
 4052|      0|        }
 4053|       |
 4054|   614k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4054:13): [True: 397k, False: 217k]
  |  Branch (4054:28): [True: 121k, False: 275k]
  ------------------
 4055|       |            // only hex allowed:
 4056|       |            // prefix "0x" allowed, not required
 4057|   121k|            auto it = range.begin();
 4058|       |
 4059|   121k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4059:22): [True: 282, False: 121k]
  ------------------
 4060|    282|                m_kind = float_kind::hex_with_prefix;
 4061|    282|                it = *r;
 4062|    282|            }
 4063|   121k|            else {
 4064|   121k|                m_kind = float_kind::hex_without_prefix;
 4065|   121k|            }
 4066|       |
 4067|   121k|            return read_hex(ranges::subrange{it, range.end()});
 4068|   121k|        }
 4069|   493k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4069:13): [True: 217k, False: 275k]
  |  Branch (4069:29): [True: 217k, False: 0]
  ------------------
 4070|       |            // only nonhex allowed:
 4071|       |            // no prefix allowed
 4072|   217k|            m_kind = float_kind::generic;
 4073|   217k|            return read_regular_float(range);
 4074|   217k|        }
 4075|       |        // both hex and nonhex allowed:
 4076|       |        // check for "0x" prefix -> hex,
 4077|       |        // regular otherwise
 4078|       |
 4079|   275k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  880|   275k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 665, False: 275k]
  |  |  ------------------
  ------------------
 4080|    665|            m_kind = float_kind::hex_with_prefix;
 4081|    665|            return read_hex(ranges::subrange{*r, range.end()});
 4082|    665|        }
 4083|       |
 4084|   275k|        m_kind = float_kind::generic;
 4085|   275k|        return read_regular(range);
 4086|   275k|    }
_ZZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3767|   397k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3768|   397k|                    auto res = read_all(rr);
 3769|   397k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  880|   397k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 171, False: 396k]
  |  |  ------------------
  ------------------
 3770|    171|                        return detail::unexpected_scan_error(
 3771|    171|                            scan_error::invalid_scanned_value,
 3772|    171|                            "Invalid float value");
 3773|    171|                    }
 3774|   396k|                    return res;
 3775|   397k|                };
_ZN3scn2v44impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1937|   397k|{
 1938|   397k|    return ranges::next(range.begin(), range.end());
 1939|   397k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|   397k|    {
  313|   397k|        ranges::advance(x, bound);
  314|   397k|        return x;
  315|   397k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|   397k|    {
  275|   397k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|   397k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1675|   532k|    {
 1676|   532k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  951|   532k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|   532k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1719|   532k|    {
 1720|   532k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|   532k|                      ranges::sized_range<Range>) {
 1725|   532k|            m_storage.reset();
 1726|   532k|            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   532k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  31.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  31.9k|        {
  662|  31.9k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   108k|        : m_fptr([](storage fn,
  743|   108k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   108k|              cvref<T> obj = *get<T>(fn);
  745|   108k|              if constexpr (std::is_void_v<R>) {
  746|   108k|                  obj(static_cast<decltype(args)>(args)...);
  747|   108k|              }
  748|   108k|              else {
  749|   108k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   108k|              }
  751|   108k|          }),
  752|   108k|          m_storage(std::addressof(f))
  753|   108k|    {
  754|   108k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   108k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   108k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   108k|              else {
  749|   108k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   108k|              }
  751|   108k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   108k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   108k|        else if constexpr (std::is_object_v<T>) {
  688|   108k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   108k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4218|   108k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   108k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  951|   108k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|   108k|            },
_ZN3scn2v44impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3706|   504k|    {
 3707|   504k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  880|   504k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 504k]
  |  |  ------------------
  ------------------
 3708|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3709|      0|                classic_with_thsep_tag{}};
 3710|      0|        }
 3711|       |
 3712|   504k|        return read_source_impl(range);
 3713|   504k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   108k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   108k|        {
  662|   108k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIdEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6226|   154k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|       |                          basic_contiguous_scan_context<char_type>>) {
 6231|       |            auto rd = make_reader<T, char_type>();
 6232|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6233|       |            return impl(rd, range, value);
 6234|       |        }
 6235|   154k|        else if constexpr (!detail::is_type_disabled<T>) {
 6236|   154k|            auto rd = make_reader<T, char_type>();
 6237|   154k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   154k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  880|   154k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 0, False: 154k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6238|       |
 6239|   154k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6239:17): [True: 154k, False: 0]
  |  Branch (6239:50): [True: 0, False: 0]
  ------------------
 6240|   154k|                specs.width != 0) {
  ------------------
  |  Branch (6240:17): [True: 0, False: 0]
  ------------------
 6241|   154k|                return impl(rd, range, value);
 6242|   154k|            }
 6243|       |
 6244|      0|            auto crange = get_as_contiguous(range);
 6245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            return ranges::next(range.begin(),
 6247|      0|                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|   154k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6161|   154k|    {
 6162|   154k|        const bool need_skipped_width =
 6163|   154k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 154k]
  |  Branch (6163:33): [True: 0, False: 154k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|   154k|        auto it = rng.begin();
 6167|   154k|        std::ptrdiff_t prefix_width = 0;
 6168|   154k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 154k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|   154k|        else {
 6176|   154k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   154k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   154k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   154k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|   154k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 1.15k, False: 153k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.15k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.15k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.15k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.15k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.15k|    }                                                  \
  |  |  |  | 3939|   154k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|   153k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|   153k|            std::tie(it, prefix_width) = prefix_result;
 6178|   153k|        }
 6179|   153k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|   153k|        std::ptrdiff_t value_width = 0;
 6183|   153k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 153k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|   153k|        else {
 6199|   153k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   153k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   153k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  880|   153k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 45.9k, False: 107k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  45.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  45.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  45.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  45.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  45.9k|    }                                                  \
  |  | 3939|   153k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  951|   153k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|   107k|                                             specs, value, loc));
 6201|       |
 6202|   107k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 107k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|   107k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|   107k|        std::ptrdiff_t postfix_width = 0;
 6211|   107k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 106k, False: 588]
  ------------------
 6212|   106k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   106k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   106k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   106k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|   106k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 106k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   106k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|   106k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|   106k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|   106k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|   106k|                                 value_width));
 6216|   106k|            std::tie(it, postfix_width) = postfix_result;
 6217|   106k|        }
 6218|       |
 6219|   107k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   107k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  880|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 0, False: 107k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|   107k|            specs, prefix_width, value_width, postfix_width));
 6221|   107k|        return it;
 6222|   107k|    }
_ZN3scn2v44impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3732|   335k|    {
 3733|   335k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  945|   335k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   335k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3734|       |
 3735|   335k|        const std::ptrdiff_t sign_len =
 3736|   335k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3736:13): [True: 2.08k, False: 333k]
  ------------------
 3737|       |
 3738|   335k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3940|   335k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   335k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   335k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|   335k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 33.1k, False: 302k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  33.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  33.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  33.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  33.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  33.1k|    }                                                  \
  |  |  |  | 3939|   335k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|   302k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3739|   302k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3740|   335k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4202|   153k|    {
 4203|   153k|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|   153k|#if !SCN_DISABLE_LOCALE
 4206|   153k|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 38.5k, False: 114k]
  ------------------
 4207|  38.5k|            return read_impl<Range>(
 4208|  38.5k|                range, rd,
 4209|  38.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  38.5k|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|  38.5k|                },
 4212|  38.5k|                value, loc);
 4213|  38.5k|        }
 4214|   114k|#endif
 4215|       |
 4216|   114k|        return read_impl<Range>(
 4217|   114k|            range, rd,
 4218|   114k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   114k|                return r.read_source(SCN_FWD(args)...);
 4220|   114k|            },
 4221|   114k|            value);
 4222|   153k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4238|   210k|    {
 4239|   210k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|   210k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  880|   210k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 58.7k, False: 152k]
  |  |  ------------------
  ------------------
 4241|  58.7k|            return unexpected(r.error());
 4242|  58.7k|        }
 4243|       |
 4244|   152k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   152k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   152k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   152k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|   152k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 980, False: 151k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    980|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    980|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    980|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    980|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    980|    }                                                  \
  |  |  |  | 3939|   152k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|   151k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|   151k|        return ranges::next(range.begin(), n);
 4246|   152k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  38.5k|        : m_fptr([](storage fn,
  743|  38.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  38.5k|              cvref<T> obj = *get<T>(fn);
  745|  38.5k|              if constexpr (std::is_void_v<R>) {
  746|  38.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  38.5k|              }
  748|  38.5k|              else {
  749|  38.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  38.5k|              }
  751|  38.5k|          }),
  752|  38.5k|          m_storage(std::addressof(f))
  753|  38.5k|    {
  754|  38.5k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  38.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  38.5k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  38.5k|              else {
  749|  38.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  38.5k|              }
  751|  38.5k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  38.5k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  38.5k|        else if constexpr (std::is_object_v<T>) {
  688|  38.5k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  38.5k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4209|  38.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  38.5k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  951|  38.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|  38.5k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  38.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  38.5k|        {
  662|  38.5k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   114k|        : m_fptr([](storage fn,
  743|   114k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   114k|              cvref<T> obj = *get<T>(fn);
  745|   114k|              if constexpr (std::is_void_v<R>) {
  746|   114k|                  obj(static_cast<decltype(args)>(args)...);
  747|   114k|              }
  748|   114k|              else {
  749|   114k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   114k|              }
  751|   114k|          }),
  752|   114k|          m_storage(std::addressof(f))
  753|   114k|    {
  754|   114k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   114k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   114k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   114k|              else {
  749|   114k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   114k|              }
  751|   114k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   114k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   114k|        else if constexpr (std::is_object_v<T>) {
  688|   114k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   114k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4218|   114k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   114k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  951|   114k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|   114k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   114k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   114k|        {
  662|   114k|        }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4202|   153k|    {
 4203|   153k|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|   153k|#if !SCN_DISABLE_LOCALE
 4206|   153k|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 38.5k, False: 114k]
  ------------------
 4207|  38.5k|            return read_impl<Range>(
 4208|  38.5k|                range, rd,
 4209|  38.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  38.5k|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|  38.5k|                },
 4212|  38.5k|                value, loc);
 4213|  38.5k|        }
 4214|   114k|#endif
 4215|       |
 4216|   114k|        return read_impl<Range>(
 4217|   114k|            range, rd,
 4218|   114k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   114k|                return r.read_source(SCN_FWD(args)...);
 4220|   114k|            },
 4221|   114k|            value);
 4222|   153k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4238|   211k|    {
 4239|   211k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|   211k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  880|   211k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 27.5k, False: 183k]
  |  |  ------------------
  ------------------
 4241|  27.5k|            return unexpected(r.error());
 4242|  27.5k|        }
 4243|       |
 4244|   183k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   183k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   183k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   183k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|   183k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 32.1k, False: 151k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  32.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  32.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  32.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  32.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  32.1k|    }                                                  \
  |  |  |  | 3939|   183k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|   151k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|   151k|        return ranges::next(range.begin(), n);
 4246|   183k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  38.5k|        : m_fptr([](storage fn,
  743|  38.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  38.5k|              cvref<T> obj = *get<T>(fn);
  745|  38.5k|              if constexpr (std::is_void_v<R>) {
  746|  38.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  38.5k|              }
  748|  38.5k|              else {
  749|  38.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  38.5k|              }
  751|  38.5k|          }),
  752|  38.5k|          m_storage(std::addressof(f))
  753|  38.5k|    {
  754|  38.5k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  38.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  38.5k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  38.5k|              else {
  749|  38.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  38.5k|              }
  751|  38.5k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  38.5k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  38.5k|        else if constexpr (std::is_object_v<T>) {
  688|  38.5k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  38.5k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4209|  38.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  38.5k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  951|  38.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|  38.5k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  38.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  38.5k|        {
  662|  38.5k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   114k|        : m_fptr([](storage fn,
  743|   114k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   114k|              cvref<T> obj = *get<T>(fn);
  745|   114k|              if constexpr (std::is_void_v<R>) {
  746|   114k|                  obj(static_cast<decltype(args)>(args)...);
  747|   114k|              }
  748|   114k|              else {
  749|   114k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   114k|              }
  751|   114k|          }),
  752|   114k|          m_storage(std::addressof(f))
  753|   114k|    {
  754|   114k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   114k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   114k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   114k|              else {
  749|   114k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   114k|              }
  751|   114k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   114k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   114k|        else if constexpr (std::is_object_v<T>) {
  688|   114k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   114k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4218|   114k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   114k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  951|   114k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|   114k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   114k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   114k|        {
  662|   114k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIeEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6226|   156k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|       |                          basic_contiguous_scan_context<char_type>>) {
 6231|       |            auto rd = make_reader<T, char_type>();
 6232|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6233|       |            return impl(rd, range, value);
 6234|       |        }
 6235|   156k|        else if constexpr (!detail::is_type_disabled<T>) {
 6236|   156k|            auto rd = make_reader<T, char_type>();
 6237|   156k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   156k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  880|   156k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 0, False: 156k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6238|       |
 6239|   156k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6239:17): [True: 156k, False: 0]
  |  Branch (6239:50): [True: 0, False: 0]
  ------------------
 6240|   156k|                specs.width != 0) {
  ------------------
  |  Branch (6240:17): [True: 0, False: 0]
  ------------------
 6241|   156k|                return impl(rd, range, value);
 6242|   156k|            }
 6243|       |
 6244|      0|            auto crange = get_as_contiguous(range);
 6245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            return ranges::next(range.begin(),
 6247|      0|                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|   156k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6161|   156k|    {
 6162|   156k|        const bool need_skipped_width =
 6163|   156k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 156k]
  |  Branch (6163:33): [True: 0, False: 156k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|   156k|        auto it = rng.begin();
 6167|   156k|        std::ptrdiff_t prefix_width = 0;
 6168|   156k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 156k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|   156k|        else {
 6176|   156k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   156k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   156k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   156k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|   156k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 1.22k, False: 155k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.22k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.22k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.22k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.22k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.22k|    }                                                  \
  |  |  |  | 3939|   156k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|   155k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|   155k|            std::tie(it, prefix_width) = prefix_result;
 6178|   155k|        }
 6179|   155k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|   155k|        std::ptrdiff_t value_width = 0;
 6183|   155k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 155k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|   155k|        else {
 6199|   155k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   155k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   155k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  880|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 45.8k, False: 109k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  45.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  45.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  45.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  45.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  45.8k|    }                                                  \
  |  | 3939|   155k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  951|   155k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|   109k|                                             specs, value, loc));
 6201|       |
 6202|   109k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 109k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|   109k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|   109k|        std::ptrdiff_t postfix_width = 0;
 6211|   109k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 109k, False: 636]
  ------------------
 6212|   109k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   109k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   109k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   109k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 109k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   109k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|   109k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|   109k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|   109k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|   109k|                                 value_width));
 6216|   109k|            std::tie(it, postfix_width) = postfix_result;
 6217|   109k|        }
 6218|       |
 6219|   109k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   109k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  880|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 0, False: 109k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|   109k|            specs, prefix_width, value_width, postfix_width));
 6221|   109k|        return it;
 6222|   109k|    }
_ZN3scn2v44impl12float_readerIwE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3732|   343k|    {
 3733|   343k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  945|   343k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   343k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3734|       |
 3735|   343k|        const std::ptrdiff_t sign_len =
 3736|   343k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3736:13): [True: 2.11k, False: 341k]
  ------------------
 3737|       |
 3738|   343k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3940|   343k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   343k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   343k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|   343k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 31.9k, False: 311k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  31.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  31.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  31.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  31.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  31.9k|    }                                                  \
  |  |  |  | 3939|   343k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|   311k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3739|   311k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3740|   343k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4202|   155k|    {
 4203|   155k|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|   155k|#if !SCN_DISABLE_LOCALE
 4206|   155k|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 39.7k, False: 115k]
  ------------------
 4207|  39.7k|            return read_impl<Range>(
 4208|  39.7k|                range, rd,
 4209|  39.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  39.7k|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|  39.7k|                },
 4212|  39.7k|                value, loc);
 4213|  39.7k|        }
 4214|   115k|#endif
 4215|       |
 4216|   115k|        return read_impl<Range>(
 4217|   115k|            range, rd,
 4218|   115k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   115k|                return r.read_source(SCN_FWD(args)...);
 4220|   115k|            },
 4221|   115k|            value);
 4222|   155k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4238|   215k|    {
 4239|   215k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|   215k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  880|   215k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 59.4k, False: 155k]
  |  |  ------------------
  ------------------
 4241|  59.4k|            return unexpected(r.error());
 4242|  59.4k|        }
 4243|       |
 4244|   155k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   155k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   155k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   155k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 138, False: 155k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    138|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    138|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    138|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    138|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    138|    }                                                  \
  |  |  |  | 3939|   155k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|   155k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|   155k|        return ranges::next(range.begin(), n);
 4246|   155k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  39.7k|        : m_fptr([](storage fn,
  743|  39.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  39.7k|              cvref<T> obj = *get<T>(fn);
  745|  39.7k|              if constexpr (std::is_void_v<R>) {
  746|  39.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  39.7k|              }
  748|  39.7k|              else {
  749|  39.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  39.7k|              }
  751|  39.7k|          }),
  752|  39.7k|          m_storage(std::addressof(f))
  753|  39.7k|    {
  754|  39.7k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  39.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  39.7k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  39.7k|              else {
  749|  39.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  39.7k|              }
  751|  39.7k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  39.7k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  39.7k|        else if constexpr (std::is_object_v<T>) {
  688|  39.7k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  39.7k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4209|  39.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  39.7k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  951|  39.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|  39.7k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  39.7k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  39.7k|        {
  662|  39.7k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   115k|        : m_fptr([](storage fn,
  743|   115k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   115k|              cvref<T> obj = *get<T>(fn);
  745|   115k|              if constexpr (std::is_void_v<R>) {
  746|   115k|                  obj(static_cast<decltype(args)>(args)...);
  747|   115k|              }
  748|   115k|              else {
  749|   115k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   115k|              }
  751|   115k|          }),
  752|   115k|          m_storage(std::addressof(f))
  753|   115k|    {
  754|   115k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   115k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   115k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   115k|              else {
  749|   115k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   115k|              }
  751|   115k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   115k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   115k|        else if constexpr (std::is_object_v<T>) {
  688|   115k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   115k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4218|   115k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   115k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  951|   115k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|   115k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   115k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   115k|        {
  662|   115k|        }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4202|   155k|    {
 4203|   155k|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|   155k|#if !SCN_DISABLE_LOCALE
 4206|   155k|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 39.7k, False: 116k]
  ------------------
 4207|  39.7k|            return read_impl<Range>(
 4208|  39.7k|                range, rd,
 4209|  39.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  39.7k|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|  39.7k|                },
 4212|  39.7k|                value, loc);
 4213|  39.7k|        }
 4214|   116k|#endif
 4215|       |
 4216|   116k|        return read_impl<Range>(
 4217|   116k|            range, rd,
 4218|   116k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   116k|                return r.read_source(SCN_FWD(args)...);
 4220|   116k|            },
 4221|   116k|            value);
 4222|   155k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4238|   215k|    {
 4239|   215k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|   215k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  880|   215k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 27.7k, False: 187k]
  |  |  ------------------
  ------------------
 4241|  27.7k|            return unexpected(r.error());
 4242|  27.7k|        }
 4243|       |
 4244|   187k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   187k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   187k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   187k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 31.8k, False: 155k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  31.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  31.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  31.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  31.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  31.8k|    }                                                  \
  |  |  |  | 3939|   187k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|   155k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|   155k|        return ranges::next(range.begin(), n);
 4246|   187k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  39.7k|        : m_fptr([](storage fn,
  743|  39.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  39.7k|              cvref<T> obj = *get<T>(fn);
  745|  39.7k|              if constexpr (std::is_void_v<R>) {
  746|  39.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  39.7k|              }
  748|  39.7k|              else {
  749|  39.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  39.7k|              }
  751|  39.7k|          }),
  752|  39.7k|          m_storage(std::addressof(f))
  753|  39.7k|    {
  754|  39.7k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  39.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  39.7k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  39.7k|              else {
  749|  39.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  39.7k|              }
  751|  39.7k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  39.7k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  39.7k|        else if constexpr (std::is_object_v<T>) {
  688|  39.7k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  39.7k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4209|  39.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  39.7k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  951|  39.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|  39.7k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  39.7k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  39.7k|        {
  662|  39.7k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   116k|        : m_fptr([](storage fn,
  743|   116k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   116k|              cvref<T> obj = *get<T>(fn);
  745|   116k|              if constexpr (std::is_void_v<R>) {
  746|   116k|                  obj(static_cast<decltype(args)>(args)...);
  747|   116k|              }
  748|   116k|              else {
  749|   116k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   116k|              }
  751|   116k|          }),
  752|   116k|          m_storage(std::addressof(f))
  753|   116k|    {
  754|   116k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   116k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   116k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   116k|              else {
  749|   116k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   116k|              }
  751|   116k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   116k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   116k|        else if constexpr (std::is_object_v<T>) {
  688|   116k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   116k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4218|   116k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   116k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  951|   116k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|   116k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   116k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   116k|        {
  662|   116k|        }
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2159|   618k|{
 2160|   618k|    auto it = range.begin();
 2161|  1.06M|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 1.06M, False: 3.97k]
  ------------------
 2162|  1.06M|        const auto val =
 2163|  1.06M|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  1.06M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  879|  1.06M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (879:25): [True: 1.06M, False: 0]
  |  |  ------------------
  ------------------
 2165|  1.06M|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  1.06M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  1.06M|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 614k, False: 451k]
  ------------------
 2168|   614k|                return it;
 2169|   614k|            }
 2170|  1.06M|        }
 2171|   451k|        it = val.iterator;
 2172|   451k|    }
 2173|       |
 2174|  3.97k|    return it;
 2175|   618k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|  1.06M|{
 1998|  1.06M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  945|  1.06M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  1.06M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  1.06M|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  1.06M|    auto it = range.begin();
 2002|  1.06M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  1.06M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  880|  1.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 0, False: 1.06M]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|  1.06M|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 1.06M, False: 0]
  ------------------
 2011|  1.06M|        ++it;
 2012|  1.06M|        return {it, string_type(1, *range.begin())};
 2013|  1.06M|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|  1.06M|}
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1988|  1.06M|    {
 1989|  1.06M|        return !codepoint.empty();
 1990|  1.06M|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2180|   618k|{
 2181|   618k|    return read_until_code_point(range, std::not_fn(pred));
 2182|   618k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3065|   618k|{
 3066|   618k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 618k, False: 0]
  ------------------
 3067|   618k|        auto it = read_while_classic_space(range);
 3068|   618k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|   618k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  880|   618k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 3.97k, False: 614k]
  |  |  ------------------
  ------------------
 3070|  3.97k|            return unexpected(e);
 3071|  3.97k|        }
 3072|       |
 3073|   614k|        return it;
 3074|   618k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|   618k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2215|   618k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|   618k|    else {
 2225|   618k|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|   618k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   618k|            return detail::is_cp_space(cp);
 2238|   618k|        });
 2239|   618k|    }
 2240|   618k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   618k|        : m_fptr([](storage fn,
  743|   618k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   618k|              cvref<T> obj = *get<T>(fn);
  745|   618k|              if constexpr (std::is_void_v<R>) {
  746|   618k|                  obj(static_cast<decltype(args)>(args)...);
  747|   618k|              }
  748|   618k|              else {
  749|   618k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   618k|              }
  751|   618k|          }),
  752|   618k|          m_storage(std::addressof(f))
  753|   618k|    {
  754|   618k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  1.06M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.06M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.06M|              else {
  749|  1.06M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.06M|              }
  751|  1.06M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  1.06M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.06M|        else if constexpr (std::is_object_v<T>) {
  688|  1.06M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.06M|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2236|  1.06M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  1.06M|            return detail::is_cp_space(cp);
 2238|  1.06M|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   618k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   618k|        {
  662|   618k|        }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEmEENS0_13scan_expectedIDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS5_9add_constIT_E4typeEEEEEEESD_RT0_NS0_6detail10locale_refE:
 3578|  8.53k|    {
 3579|  8.53k|        SCN_UNUSED(loc);
  ------------------
  |  |  930|  8.53k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  8.53k|        return read_default_with_base(range, value, 10);
 3581|  8.53k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEmEENS0_13scan_expectedIDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS5_9add_constIT_E4typeEEEEEEESD_RT0_i:
 3542|  8.53k|    {
 3543|  8.53k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3940|  8.53k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  8.53k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  8.53k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|  8.53k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 1.69k, False: 6.83k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.69k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.69k|    }                                                  \
  |  |  |  | 3939|  8.53k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|  6.83k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  6.83k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|  6.83k|        if constexpr (!std::is_signed_v<T>) {
 3547|  6.83k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3547:17): [True: 0, False: 6.83k]
  ------------------
 3548|      0|                return detail::unexpected_scan_error(
 3549|      0|                    scan_error::invalid_scanned_value,
 3550|      0|                    "Unexpected '-' sign when parsing an "
 3551|      0|                    "unsigned value");
 3552|      0|            }
 3553|  6.83k|        }
 3554|       |
 3555|  6.83k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 6.83k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  13.6k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3940|  6.83k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  6.83k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  6.83k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|  6.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 6.83k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  6.83k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|  6.83k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  13.6k|                parse_integer_digits_without_thsep(
 3562|  13.6k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  13.6k|                    prefix_result.parsed_base));
 3564|       |
 3565|  13.6k|        auto buf = make_contiguous_buffer(
 3566|  13.6k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  13.6k|        SCN_TRY(result_it,
  ------------------
  |  | 3940|  6.83k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  6.83k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  6.83k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|  6.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 570, False: 6.26k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    570|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    570|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    570|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    570|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    570|    }                                                  \
  |  |  |  | 3939|  6.83k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|  6.26k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|  6.26k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|  6.26k|                                    prefix_result.parsed_base));
 3570|       |
 3571|  6.26k|        return ranges::next(prefix_result.iterator,
 3572|  6.26k|                            ranges::distance(buf.view().begin(), result_it));
 3573|  13.6k|    }
_ZN3scn2v44impl20parse_integer_prefixINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEEEEEESC_i:
 3376|  8.53k|{
 3377|  8.53k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3940|  8.53k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  8.53k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  8.53k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|  8.53k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 1.69k, False: 6.83k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.69k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.69k|    }                                                  \
  |  |  |  | 3939|  8.53k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|  6.83k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3378|  6.83k|    auto [base_prefix_begin_it, sign] = sign_result;
 3379|       |
 3380|  6.83k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3381|  6.83k|        parse_integer_base_prefix(
 3382|  6.83k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3383|       |
 3384|  6.83k|    if (parsed_zero) {
  ------------------
  |  Branch (3384:9): [True: 0, False: 6.83k]
  ------------------
 3385|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3385:13): [True: 0, False: 0]
  ------------------
 3386|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3386:13): [True: 0, False: 0]
  ------------------
 3387|      0|            digits_begin_it = base_prefix_begin_it;
 3388|      0|        }
 3389|      0|        else {
 3390|      0|            parsed_zero = false;
 3391|      0|        }
 3392|      0|    }
 3393|  6.83k|    else {
 3394|  6.83k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3394:13): [True: 0, False: 6.83k]
  ------------------
 3395|  6.83k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3395:13): [True: 108, False: 6.72k]
  ------------------
 3396|    108|            digits_begin_it = base_prefix_begin_it;
 3397|    108|        }
 3398|  6.83k|    }
 3399|       |
 3400|  6.83k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3400:9): [True: 6.83k, False: 0]
  ------------------
 3401|  6.83k|        sign = sign_type::plus_sign;
 3402|  6.83k|    }
 3403|  6.83k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3404|  6.83k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3405|  8.53k|}
_ZN3scn2v44impl18parse_numeric_signINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_12eof_expectedINS3_4pairIDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESC_:
 3257|  8.53k|{
 3258|  8.53k|    auto r = read_one_of_code_unit(range, "+-");
 3259|  8.53k|    if (!r) {
  ------------------
  |  Branch (3259:9): [True: 8.53k, False: 0]
  ------------------
 3260|  8.53k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3260:13): [True: 6.83k, False: 1.69k]
  ------------------
 3261|  6.83k|            return std::pair{range.begin(), sign_type::default_sign};
 3262|  6.83k|        }
 3263|  1.69k|        return unexpected(eof_error::eof);
 3264|  8.53k|    }
 3265|       |
 3266|      0|    auto& it = *r;
 3267|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3267:9): [True: 0, False: 0]
  ------------------
 3268|      0|        return std::pair{it, sign_type::minus_sign};
 3269|      0|    }
 3270|      0|    return std::pair{it, sign_type::plus_sign};
 3271|      0|}
_ZN3scn2v44impl21read_one_of_code_unitINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_14parse_expectedIDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEEEESB_S7_:
 2371|  8.53k|{
 2372|  8.53k|    auto it = read_code_unit(range);
 2373|  8.53k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  880|  8.53k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 1.69k, False: 6.83k]
  |  |  ------------------
  ------------------
 2374|  1.69k|        return unexpected(make_eof_parse_error(it.error()));
 2375|  1.69k|    }
 2376|       |
 2377|  13.6k|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 13.6k, False: 6.83k]
  ------------------
 2378|  13.6k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 0, False: 13.6k]
  ------------------
 2379|      0|            return *it;
 2380|      0|        }
 2381|  13.6k|    }
 2382|       |
 2383|  6.83k|    return unexpected(parse_error::error);
 2384|  6.83k|}
_ZN3scn2v44impl14read_code_unitINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_12eof_expectedIDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEEEESB_:
 1944|  8.53k|{
 1945|  8.53k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  880|  8.53k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 1.69k, False: 6.83k]
  |  |  ------------------
  ------------------
 1946|  1.69k|        return unexpected(e);
 1947|  1.69k|    }
 1948|       |
 1949|  6.83k|    return ranges::next(range.begin());
 1950|  8.53k|}
_ZN3scn2v44impl9eof_checkINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_9eof_errorET_:
  950|  8.53k|{
  951|  8.53k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  880|  8.53k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 1.69k, False: 6.83k]
  |  |  ------------------
  ------------------
  952|  1.69k|        return eof_error::eof;
  953|  1.69k|    }
  954|  6.83k|    return eof_error::good;
  955|  8.53k|}
_ZN3scn2v44impl12is_range_eofINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEbT_:
  944|  8.53k|{
  945|  8.53k|    return is_range_eof(r.begin(), r.end());
  946|  8.53k|}
_ZN3scn2v44impl24read_until_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2186|   836k|{
 2187|       |    if constexpr (ranges::contiguous_range<Range> &&
 2188|       |                  ranges::sized_range<Range> &&
 2189|   836k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2190|   836k|        auto buf = make_contiguous_buffer(range);
 2191|   836k|        auto it = find_classic_space_narrow_fast(buf.view());
 2192|   836k|        return ranges::next(range.begin(),
 2193|   836k|                            ranges::distance(buf.view().begin(), it));
 2194|       |    }
 2195|       |    else {
 2196|       |        auto it = range.begin();
 2197|       |
 2198|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|       |            auto seg = get_contiguous_beginning(range);
 2200|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2201|       |                seg_it != seg.end()) {
 2202|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2203|       |            }
 2204|       |            ranges::advance(it, seg.size());
 2205|       |        }
 2206|       |
 2207|       |        return read_until_code_point(
 2208|       |            ranges::subrange{it, range.end()},
 2209|       |            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2210|       |    }
 2211|   836k|}
_ZN3scn2v44impl22make_contiguous_bufferIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 1781|   836k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|   836k|                  ranges::sized_range<Range>) {
 1785|   836k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  951|   836k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|   836k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEETnPNS5_9enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISC_Esr6rangesE11sized_rangeISC_EEvE4typeELPv0EEEOSC_:
 1587|   836k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|   836k|    {
 1589|   836k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE6assignINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEETnPNS5_9enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSD_:
 1675|   836k|    {
 1676|   836k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  951|   836k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|   836k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEvOT_:
 1719|   836k|    {
 1720|   836k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|   836k|                                          std::basic_string<CharT>>) {
 1730|   836k|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  951|   836k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1731|   836k|            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   836k|    }
_ZNK3scn2v44impl12float_readerIcE7setsignIfEET_S5_:
 4132|   585k|    {
 4133|   585k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4133:13): [True: 66.5k, False: 519k]
  ------------------
 4134|  66.5k|            return std::copysign(value, T{-1.0});
 4135|  66.5k|        }
 4136|   519k|        return std::copysign(value, T{1.0});
 4137|   585k|    }
_ZN3scn2v44impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2186|   432k|{
 2187|       |    if constexpr (ranges::contiguous_range<Range> &&
 2188|       |                  ranges::sized_range<Range> &&
 2189|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2190|       |        auto buf = make_contiguous_buffer(range);
 2191|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2192|       |        return ranges::next(range.begin(),
 2193|       |                            ranges::distance(buf.view().begin(), it));
 2194|       |    }
 2195|   432k|    else {
 2196|   432k|        auto it = range.begin();
 2197|       |
 2198|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|       |            auto seg = get_contiguous_beginning(range);
 2200|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2201|       |                seg_it != seg.end()) {
 2202|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2203|       |            }
 2204|       |            ranges::advance(it, seg.size());
 2205|       |        }
 2206|       |
 2207|   432k|        return read_until_code_point(
 2208|   432k|            ranges::subrange{it, range.end()},
 2209|   432k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2210|   432k|    }
 2211|   432k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_:
  742|   432k|        : m_fptr([](storage fn,
  743|   432k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   432k|              cvref<T> obj = *get<T>(fn);
  745|   432k|              if constexpr (std::is_void_v<R>) {
  746|   432k|                  obj(static_cast<decltype(args)>(args)...);
  747|   432k|              }
  748|   432k|              else {
  749|   432k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   432k|              }
  751|   432k|          }),
  752|   432k|          m_storage(std::addressof(f))
  753|   432k|    {
  754|   432k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESU_Di:
  743|   839k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   839k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   839k|              else {
  749|   839k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   839k|              }
  751|   839k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  683|   839k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   839k|        else if constexpr (std::is_object_v<T>) {
  688|   839k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   839k|    }
_ZZN3scn2v44impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2209|   839k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vISE_EEvE4typeELPv0EEEPSE_:
  660|   432k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   432k|        {
  662|   432k|        }
_ZN3scn2v44impl24contiguous_range_factoryIwE6assignINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEETnPNS5_9enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSD_:
 1675|   432k|    {
 1676|   432k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  951|   432k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|   432k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEvOT_:
 1719|   432k|    {
 1720|   432k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|   432k|                                          std::basic_string<CharT>>) {
 1730|   432k|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  951|   432k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1731|   432k|            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   432k|    }
_ZNK3scn2v44impl12float_readerIwE7setsignIfEET_S5_:
 4132|   256k|    {
 4133|   256k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4133:13): [True: 1.05k, False: 255k]
  ------------------
 4134|  1.05k|            return std::copysign(value, T{-1.0});
 4135|  1.05k|        }
 4136|   255k|        return std::copysign(value, T{1.0});
 4137|   256k|    }
_ZNK3scn2v44impl12float_readerIcE7setsignIdEET_S5_:
 4132|   616k|    {
 4133|   616k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4133:13): [True: 70.1k, False: 545k]
  ------------------
 4134|  70.1k|            return std::copysign(value, T{-1.0});
 4135|  70.1k|        }
 4136|   545k|        return std::copysign(value, T{1.0});
 4137|   616k|    }
_ZNK3scn2v44impl12float_readerIwE7setsignIdEET_S5_:
 4132|   302k|    {
 4133|   302k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4133:13): [True: 1.09k, False: 301k]
  ------------------
 4134|  1.09k|            return std::copysign(value, T{-1.0});
 4135|  1.09k|        }
 4136|   301k|        return std::copysign(value, T{1.0});
 4137|   302k|    }
_ZNK3scn2v44impl12float_readerIcE7setsignIeEET_S5_:
 4132|   625k|    {
 4133|   625k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4133:13): [True: 72.9k, False: 552k]
  ------------------
 4134|  72.9k|            return std::copysign(value, T{-1.0});
 4135|  72.9k|        }
 4136|   552k|        return std::copysign(value, T{1.0});
 4137|   625k|    }
_ZNK3scn2v44impl12float_readerIwE7setsignIeEET_S5_:
 4132|   311k|    {
 4133|   311k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4133:13): [True: 1.19k, False: 310k]
  ------------------
 4134|  1.19k|            return std::copysign(value, T{-1.0});
 4135|  1.19k|        }
 4136|   310k|        return std::copysign(value, T{1.0});
 4137|   311k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5834|   275k|{
 5835|   275k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  880|   275k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 3.97k, False: 271k]
  |  |  ------------------
  ------------------
 5836|  3.97k|        return unexpected(e);
 5837|  3.97k|    }
 5838|       |
 5839|   271k|    if (!is_required) {
  ------------------
  |  Branch (5839:9): [True: 0, False: 271k]
  ------------------
 5840|      0|        return range.begin();
 5841|      0|    }
 5842|       |
 5843|   271k|    return skip_classic_whitespace(range);
 5844|   271k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIfEENS0_13scan_expectedIS9_EERT_:
 5910|  88.2k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  88.2k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  88.2k|            auto rd = make_reader<T, char_type>();
 5916|  88.2k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  88.2k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_fEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  88.2k|    {
 5903|  88.2k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  88.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  88.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  88.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|  88.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 1.32k, False: 86.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.32k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.32k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.32k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.32k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.32k|    }                                                  \
  |  |  |  | 3939|  88.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|  86.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  86.9k|                        .transform_error(make_eof_scan_error));
 5905|  86.9k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  88.2k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4184|  86.9k|    {
 4185|  86.9k|        SCN_UNUSED(loc);
  ------------------
  |  |  930|  86.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4186|       |
 4187|  86.9k|        float_reader<CharT> rd{};
 4188|  86.9k|        return read_impl<Range>(
 4189|  86.9k|            range, rd,
 4190|  86.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  86.9k|                return r.read_source(SCN_FWD(args)...);
 4192|  86.9k|            },
 4193|  86.9k|            value);
 4194|  86.9k|    }
_ZN3scn2v44impl12float_readerIcEC2Ev:
 3699|   567k|    constexpr float_reader() = default;
_ZN3scn2v44impl17float_reader_baseC2Ev:
 3685|   898k|    constexpr float_reader_base() = default;
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  86.9k|        : m_fptr([](storage fn,
  743|  86.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  86.9k|              cvref<T> obj = *get<T>(fn);
  745|  86.9k|              if constexpr (std::is_void_v<R>) {
  746|  86.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  86.9k|              }
  748|  86.9k|              else {
  749|  86.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  86.9k|              }
  751|  86.9k|          }),
  752|  86.9k|          m_storage(std::addressof(f))
  753|  86.9k|    {
  754|  86.9k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  86.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  86.9k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  86.9k|              else {
  749|  86.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  86.9k|              }
  751|  86.9k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  86.9k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  86.9k|        else if constexpr (std::is_object_v<T>) {
  688|  86.9k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  86.9k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4190|  86.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  86.9k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  951|  86.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4192|  86.9k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  86.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  86.9k|        {
  662|  86.9k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIdEENS0_13scan_expectedIS9_EERT_:
 5910|  92.4k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  92.4k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  92.4k|            auto rd = make_reader<T, char_type>();
 5916|  92.4k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  92.4k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  92.4k|    {
 5903|  92.4k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  92.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  92.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  92.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|  92.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 1.50k, False: 90.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.50k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.50k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.50k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.50k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.50k|    }                                                  \
  |  |  |  | 3939|  92.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|  90.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  90.9k|                        .transform_error(make_eof_scan_error));
 5905|  90.9k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  92.4k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4184|  90.9k|    {
 4185|  90.9k|        SCN_UNUSED(loc);
  ------------------
  |  |  930|  90.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4186|       |
 4187|  90.9k|        float_reader<CharT> rd{};
 4188|  90.9k|        return read_impl<Range>(
 4189|  90.9k|            range, rd,
 4190|  90.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  90.9k|                return r.read_source(SCN_FWD(args)...);
 4192|  90.9k|            },
 4193|  90.9k|            value);
 4194|  90.9k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  90.9k|        : m_fptr([](storage fn,
  743|  90.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  90.9k|              cvref<T> obj = *get<T>(fn);
  745|  90.9k|              if constexpr (std::is_void_v<R>) {
  746|  90.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  90.9k|              }
  748|  90.9k|              else {
  749|  90.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  90.9k|              }
  751|  90.9k|          }),
  752|  90.9k|          m_storage(std::addressof(f))
  753|  90.9k|    {
  754|  90.9k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  90.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  90.9k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  90.9k|              else {
  749|  90.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  90.9k|              }
  751|  90.9k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  90.9k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  90.9k|        else if constexpr (std::is_object_v<T>) {
  688|  90.9k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  90.9k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4190|  90.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  90.9k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  951|  90.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4192|  90.9k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  90.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  90.9k|        {
  662|  90.9k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIeEENS0_13scan_expectedIS9_EERT_:
 5910|  94.4k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  94.4k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  94.4k|            auto rd = make_reader<T, char_type>();
 5916|  94.4k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  94.4k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_eEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  94.4k|    {
 5903|  94.4k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  94.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  94.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  94.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|  94.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 1.63k, False: 92.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.63k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.63k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.63k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.63k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.63k|    }                                                  \
  |  |  |  | 3939|  94.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|  92.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  92.7k|                        .transform_error(make_eof_scan_error));
 5905|  92.7k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  94.4k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4184|  92.7k|    {
 4185|  92.7k|        SCN_UNUSED(loc);
  ------------------
  |  |  930|  92.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4186|       |
 4187|  92.7k|        float_reader<CharT> rd{};
 4188|  92.7k|        return read_impl<Range>(
 4189|  92.7k|            range, rd,
 4190|  92.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  92.7k|                return r.read_source(SCN_FWD(args)...);
 4192|  92.7k|            },
 4193|  92.7k|            value);
 4194|  92.7k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  92.7k|        : m_fptr([](storage fn,
  743|  92.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  92.7k|              cvref<T> obj = *get<T>(fn);
  745|  92.7k|              if constexpr (std::is_void_v<R>) {
  746|  92.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  92.7k|              }
  748|  92.7k|              else {
  749|  92.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  92.7k|              }
  751|  92.7k|          }),
  752|  92.7k|          m_storage(std::addressof(f))
  753|  92.7k|    {
  754|  92.7k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  92.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  92.7k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  92.7k|              else {
  749|  92.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  92.7k|              }
  751|  92.7k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  92.7k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  92.7k|        else if constexpr (std::is_object_v<T>) {
  688|  92.7k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  92.7k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4190|  92.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  92.7k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  951|  92.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4192|  92.7k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  92.7k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  92.7k|        {
  662|  92.7k|        }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5834|   301k|{
 5835|   301k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  880|   301k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 4.23k, False: 297k]
  |  |  ------------------
  ------------------
 5836|  4.23k|        return unexpected(e);
 5837|  4.23k|    }
 5838|       |
 5839|   297k|    if (!is_required) {
  ------------------
  |  Branch (5839:9): [True: 0, False: 297k]
  ------------------
 5840|      0|        return range.begin();
 5841|      0|    }
 5842|       |
 5843|   297k|    return skip_classic_whitespace(range);
 5844|   297k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIfEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5910|  96.0k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|  96.0k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|  96.0k|            auto rd = make_reader<T, char_type>();
 5920|  96.0k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 96.0k, False: 0]
  ------------------
 5921|  96.0k|                return impl(rd, range, value);
 5922|  96.0k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  96.0k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5902|  96.0k|    {
 5903|  96.0k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  96.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  96.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  96.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|  96.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 1.42k, False: 94.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.42k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.42k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.42k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.42k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.42k|    }                                                  \
  |  |  |  | 3939|  96.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|  94.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  94.6k|                        .transform_error(make_eof_scan_error));
 5905|  94.6k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  96.0k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4184|  94.6k|    {
 4185|  94.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  930|  94.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4186|       |
 4187|  94.6k|        float_reader<CharT> rd{};
 4188|  94.6k|        return read_impl<Range>(
 4189|  94.6k|            range, rd,
 4190|  94.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  94.6k|                return r.read_source(SCN_FWD(args)...);
 4192|  94.6k|            },
 4193|  94.6k|            value);
 4194|  94.6k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  94.6k|        : m_fptr([](storage fn,
  743|  94.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  94.6k|              cvref<T> obj = *get<T>(fn);
  745|  94.6k|              if constexpr (std::is_void_v<R>) {
  746|  94.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  94.6k|              }
  748|  94.6k|              else {
  749|  94.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  94.6k|              }
  751|  94.6k|          }),
  752|  94.6k|          m_storage(std::addressof(f))
  753|  94.6k|    {
  754|  94.6k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  94.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  94.6k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  94.6k|              else {
  749|  94.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  94.6k|              }
  751|  94.6k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  94.6k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  94.6k|        else if constexpr (std::is_object_v<T>) {
  688|  94.6k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  94.6k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4190|  94.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  94.6k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  951|  94.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4192|  94.6k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  94.6k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  94.6k|        {
  662|  94.6k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIdEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5910|   102k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|   102k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|   102k|            auto rd = make_reader<T, char_type>();
 5920|   102k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 102k, False: 0]
  ------------------
 5921|   102k|                return impl(rd, range, value);
 5922|   102k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|   102k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5902|   102k|    {
 5903|   102k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|   102k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   102k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   102k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 1.62k, False: 100k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.62k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.62k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.62k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.62k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.62k|    }                                                  \
  |  |  |  | 3939|   102k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|   100k|                        .transform_error(make_eof_scan_error));
 5905|   100k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|   102k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4184|   100k|    {
 4185|   100k|        SCN_UNUSED(loc);
  ------------------
  |  |  930|   100k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4186|       |
 4187|   100k|        float_reader<CharT> rd{};
 4188|   100k|        return read_impl<Range>(
 4189|   100k|            range, rd,
 4190|   100k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|   100k|                return r.read_source(SCN_FWD(args)...);
 4192|   100k|            },
 4193|   100k|            value);
 4194|   100k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|   100k|        : m_fptr([](storage fn,
  743|   100k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   100k|              cvref<T> obj = *get<T>(fn);
  745|   100k|              if constexpr (std::is_void_v<R>) {
  746|   100k|                  obj(static_cast<decltype(args)>(args)...);
  747|   100k|              }
  748|   100k|              else {
  749|   100k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   100k|              }
  751|   100k|          }),
  752|   100k|          m_storage(std::addressof(f))
  753|   100k|    {
  754|   100k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|   100k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   100k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   100k|              else {
  749|   100k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   100k|              }
  751|   100k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   100k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   100k|        else if constexpr (std::is_object_v<T>) {
  688|   100k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   100k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4190|   100k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|   100k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  951|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4192|   100k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   100k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   100k|        {
  662|   100k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIeEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5910|   103k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|   103k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|   103k|            auto rd = make_reader<T, char_type>();
 5920|   103k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 103k, False: 0]
  ------------------
 5921|   103k|                return impl(rd, range, value);
 5922|   103k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|   103k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5902|   103k|    {
 5903|   103k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|   103k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   103k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   103k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 1.74k, False: 101k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.74k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.74k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.74k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.74k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.74k|    }                                                  \
  |  |  |  | 3939|   103k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|   101k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|   101k|                        .transform_error(make_eof_scan_error));
 5905|   101k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|   103k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4184|   101k|    {
 4185|   101k|        SCN_UNUSED(loc);
  ------------------
  |  |  930|   101k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4186|       |
 4187|   101k|        float_reader<CharT> rd{};
 4188|   101k|        return read_impl<Range>(
 4189|   101k|            range, rd,
 4190|   101k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|   101k|                return r.read_source(SCN_FWD(args)...);
 4192|   101k|            },
 4193|   101k|            value);
 4194|   101k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|   101k|        : m_fptr([](storage fn,
  743|   101k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   101k|              cvref<T> obj = *get<T>(fn);
  745|   101k|              if constexpr (std::is_void_v<R>) {
  746|   101k|                  obj(static_cast<decltype(args)>(args)...);
  747|   101k|              }
  748|   101k|              else {
  749|   101k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   101k|              }
  751|   101k|          }),
  752|   101k|          m_storage(std::addressof(f))
  753|   101k|    {
  754|   101k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|   101k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   101k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   101k|              else {
  749|   101k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   101k|              }
  751|   101k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   101k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   101k|        else if constexpr (std::is_object_v<T>) {
  688|   101k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   101k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4190|   101k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|   101k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  951|   101k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4192|   101k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   101k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   101k|        {
  662|   101k|        }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEcEEEENSL_10locale_refE:
 2985|   658k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  949|   658k|    static_cast<    \
  |  |  950|   658k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2986|   658k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2987|   658k|          m_current(m_range.begin())
 2988|   658k|    {
 2989|   658k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE3endEv:
 2997|  1.24M|    {
 2998|  1.24M|        return m_range.end();
 2999|  1.24M|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE10advance_toES7_:
 3012|   588k|    {
 3013|   588k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  945|   588k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   588k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3014|   588k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3015|   588k|            if (it == nullptr) {
  ------------------
  |  Branch (3015:17): [True: 0, False: 588k]
  ------------------
 3016|      0|                it = end();
 3017|      0|            }
 3018|   588k|        }
 3019|   588k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  949|   588k|    static_cast<    \
  |  |  950|   588k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3020|   588k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5rangeEv:
 3002|   658k|    {
 3003|   658k|        return ranges::subrange{begin(), end()};
 3004|   658k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6074|   658k|    {
 6075|   658k|        const bool need_skipped_width =
 6076|   658k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6076:13): [True: 0, False: 658k]
  |  Branch (6076:33): [True: 0, False: 658k]
  ------------------
 6077|   658k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6078|       |
 6079|       |        // Read prefix
 6080|   658k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6080:13): [True: 0, False: 658k]
  ------------------
 6081|   658k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6081:13): [True: 0, False: 658k]
  ------------------
 6082|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6083|      0|                             need_skipped_width);
 6084|      0|        }
 6085|   658k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6085:13): [True: 658k, False: 0]
  |  Branch (6085:56): [True: 658k, False: 0]
  ------------------
 6086|       |            // Default alignment:
 6087|       |            // Skip preceding whitespace, if required by the reader
 6088|   658k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6088:17): [True: 0, False: 658k]
  ------------------
 6089|      0|                auto max_width_view = take_width(rng, specs.precision);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6093|      0|            }
 6094|  1.30M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|   658k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   658k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   658k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|   658k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 11.4k, False: 647k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  11.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  11.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  11.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  11.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  11.4k|    }                                                  \
  |  |  |  | 3939|   658k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|   647k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|  1.30M|                            make_eof_scan_error));
 6096|       |
 6097|  1.30M|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 647k]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|   647k|            return result_type{it, 0};
 6105|  1.30M|        }
 6106|       |
 6107|      0|        return result_type{rng.begin(), 0};
 6108|   658k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6116|   578k|    {
 6117|   578k|        const bool need_skipped_width =
 6118|   578k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6118:13): [True: 0, False: 578k]
  |  Branch (6118:33): [True: 0, False: 578k]
  ------------------
 6119|   578k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6120|       |
 6121|   578k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6121:13): [True: 0, False: 578k]
  ------------------
 6122|   578k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6122:13): [True: 0, False: 578k]
  ------------------
 6123|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6124:17): [True: 0, False: 0]
  ------------------
 6125|      0|                return result_type{rng.begin(), 0};
 6126|      0|            }
 6127|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6128|      0|                             specs.fill, need_skipped_width);
 6129|      0|        }
 6130|   578k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6130:13): [True: 578k, False: 0]
  ------------------
 6131|   578k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6131:13): [True: 0, False: 578k]
  ------------------
 6132|   578k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6132:15): [True: 0, False: 0]
  |  Branch (6132:35): [True: 0, False: 0]
  ------------------
 6133|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6133:15): [True: 0, False: 0]
  ------------------
 6134|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6134:15): [True: 0, False: 0]
  ------------------
 6135|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                const auto initial_width =
 6137|      0|                    specs.precision - prefix_width - value_width;
 6138|      0|                auto max_width_view = take_width(rng, initial_width);
 6139|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6140|      0|                                  .transform_error(make_eof_scan_error));
 6141|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6142|      0|            }
 6143|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|                            make_eof_scan_error));
 6145|       |
 6146|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return result_type{
 6148|      0|                    it,
 6149|      0|                    calculate_text_width(make_contiguous_buffer(
 6150|      0|                                             ranges::subrange{rng.begin(), it})
 6151|      0|                                             .view())};
 6152|      0|            }
 6153|      0|            return result_type{it, 0};
 6154|      0|        }
 6155|   578k|        return result_type{rng.begin(), 0};
 6156|   578k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIfEENS0_13scan_expectedIS9_EERT_:
 6226|   213k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|   213k|                          basic_contiguous_scan_context<char_type>>) {
 6231|   213k|            auto rd = make_reader<T, char_type>();
 6232|   213k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   213k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  880|   213k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 0, False: 213k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6233|   213k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|   213k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_fEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6161|   213k|    {
 6162|   213k|        const bool need_skipped_width =
 6163|   213k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 213k]
  |  Branch (6163:33): [True: 0, False: 213k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|   213k|        auto it = rng.begin();
 6167|   213k|        std::ptrdiff_t prefix_width = 0;
 6168|   213k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 213k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|   213k|        else {
 6176|   213k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   213k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   213k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   213k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|   213k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 3.50k, False: 210k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.50k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  3.50k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  3.50k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  3.50k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  3.50k|    }                                                  \
  |  |  |  | 3939|   213k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|   210k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|   210k|            std::tie(it, prefix_width) = prefix_result;
 6178|   210k|        }
 6179|   210k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|   210k|        std::ptrdiff_t value_width = 0;
 6183|   210k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 210k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|   210k|        else {
 6199|   210k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   210k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   210k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  880|   210k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 20.0k, False: 190k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  20.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  20.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  20.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  20.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  20.0k|    }                                                  \
  |  | 3939|   210k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  951|   210k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|   190k|                                             specs, value, loc));
 6201|       |
 6202|   190k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 190k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|   190k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|   190k|        std::ptrdiff_t postfix_width = 0;
 6211|   190k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 187k, False: 3.08k]
  ------------------
 6212|   187k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   187k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   187k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   187k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 187k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   187k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|   187k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|   187k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|   187k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|   187k|                                 value_width));
 6216|   187k|            std::tie(it, postfix_width) = postfix_result;
 6217|   187k|        }
 6218|       |
 6219|   190k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   190k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  880|   190k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 0, False: 190k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|   190k|            specs, prefix_width, value_width, postfix_width));
 6221|   190k|        return it;
 6222|   190k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIdEENS0_13scan_expectedIS9_EERT_:
 6226|   221k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|   221k|                          basic_contiguous_scan_context<char_type>>) {
 6231|   221k|            auto rd = make_reader<T, char_type>();
 6232|   221k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   221k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  880|   221k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 0, False: 221k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6233|   221k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|   221k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6161|   221k|    {
 6162|   221k|        const bool need_skipped_width =
 6163|   221k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 221k]
  |  Branch (6163:33): [True: 0, False: 221k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|   221k|        auto it = rng.begin();
 6167|   221k|        std::ptrdiff_t prefix_width = 0;
 6168|   221k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 221k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|   221k|        else {
 6176|   221k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   221k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   221k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   221k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|   221k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 3.86k, False: 217k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.86k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  3.86k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  3.86k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  3.86k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  3.86k|    }                                                  \
  |  |  |  | 3939|   221k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|   217k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|   217k|            std::tie(it, prefix_width) = prefix_result;
 6178|   217k|        }
 6179|   217k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|   217k|        std::ptrdiff_t value_width = 0;
 6183|   217k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 217k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|   217k|        else {
 6199|   217k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   217k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   217k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  880|   217k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 19.6k, False: 197k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  19.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  19.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  19.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  19.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  19.6k|    }                                                  \
  |  | 3939|   217k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  951|   217k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|   197k|                                             specs, value, loc));
 6201|       |
 6202|   197k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 197k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|   197k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|   197k|        std::ptrdiff_t postfix_width = 0;
 6211|   197k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 194k, False: 3.40k]
  ------------------
 6212|   194k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   194k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   194k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   194k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|   194k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 194k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   194k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|   194k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|   194k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|   194k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|   194k|                                 value_width));
 6216|   194k|            std::tie(it, postfix_width) = postfix_result;
 6217|   194k|        }
 6218|       |
 6219|   197k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   197k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  880|   197k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 0, False: 197k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|   197k|            specs, prefix_width, value_width, postfix_width));
 6221|   197k|        return it;
 6222|   197k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIeEENS0_13scan_expectedIS9_EERT_:
 6226|   224k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|   224k|                          basic_contiguous_scan_context<char_type>>) {
 6231|   224k|            auto rd = make_reader<T, char_type>();
 6232|   224k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   224k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  880|   224k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 0, False: 224k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6233|   224k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|   224k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_eEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6161|   224k|    {
 6162|   224k|        const bool need_skipped_width =
 6163|   224k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 224k]
  |  Branch (6163:33): [True: 0, False: 224k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|   224k|        auto it = rng.begin();
 6167|   224k|        std::ptrdiff_t prefix_width = 0;
 6168|   224k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 224k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|   224k|        else {
 6176|   224k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   224k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   224k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   224k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|   224k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 4.11k, False: 219k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.11k|    }                                                  \
  |  |  |  | 3939|   224k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|   219k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|   219k|            std::tie(it, prefix_width) = prefix_result;
 6178|   219k|        }
 6179|   219k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|   219k|        std::ptrdiff_t value_width = 0;
 6183|   219k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 219k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|   219k|        else {
 6199|   219k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   219k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   219k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  880|   219k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 19.4k, False: 200k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  19.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  19.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  19.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  19.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  19.4k|    }                                                  \
  |  | 3939|   219k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  951|   219k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|   200k|                                             specs, value, loc));
 6201|       |
 6202|   200k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 200k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|   200k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|   200k|        std::ptrdiff_t postfix_width = 0;
 6211|   200k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 196k, False: 3.62k]
  ------------------
 6212|   196k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   196k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   196k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   196k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|   196k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 196k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   196k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|   196k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|   196k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|   196k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|   196k|                                 value_width));
 6216|   196k|            std::tie(it, postfix_width) = postfix_result;
 6217|   196k|        }
 6218|       |
 6219|   200k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   200k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  880|   200k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 0, False: 200k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|   200k|            specs, prefix_width, value_width, postfix_width));
 6221|   200k|        return it;
 6222|   200k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5834|   166k|{
 5835|   166k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  880|   166k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 654, False: 165k]
  |  |  ------------------
  ------------------
 5836|    654|        return unexpected(e);
 5837|    654|    }
 5838|       |
 5839|   165k|    if (!is_required) {
  ------------------
  |  Branch (5839:9): [True: 0, False: 165k]
  ------------------
 5840|      0|        return range.begin();
 5841|      0|    }
 5842|       |
 5843|   165k|    return skip_classic_whitespace(range);
 5844|   165k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIfEENS0_13scan_expectedIS9_EERT_:
 5910|  48.3k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  48.3k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  48.3k|            auto rd = make_reader<T, char_type>();
 5916|  48.3k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  48.3k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_fEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  48.3k|    {
 5903|  48.3k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  48.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  48.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  48.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|  48.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 348, False: 47.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    348|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    348|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    348|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    348|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    348|    }                                                  \
  |  |  |  | 3939|  48.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|  47.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  47.9k|                        .transform_error(make_eof_scan_error));
 5905|  47.9k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  48.3k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4184|  47.9k|    {
 4185|  47.9k|        SCN_UNUSED(loc);
  ------------------
  |  |  930|  47.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4186|       |
 4187|  47.9k|        float_reader<CharT> rd{};
 4188|  47.9k|        return read_impl<Range>(
 4189|  47.9k|            range, rd,
 4190|  47.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  47.9k|                return r.read_source(SCN_FWD(args)...);
 4192|  47.9k|            },
 4193|  47.9k|            value);
 4194|  47.9k|    }
_ZN3scn2v44impl12float_readerIwEC2Ev:
 3699|   330k|    constexpr float_reader() = default;
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  47.9k|        : m_fptr([](storage fn,
  743|  47.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  47.9k|              cvref<T> obj = *get<T>(fn);
  745|  47.9k|              if constexpr (std::is_void_v<R>) {
  746|  47.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  47.9k|              }
  748|  47.9k|              else {
  749|  47.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  47.9k|              }
  751|  47.9k|          }),
  752|  47.9k|          m_storage(std::addressof(f))
  753|  47.9k|    {
  754|  47.9k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  47.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  47.9k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  47.9k|              else {
  749|  47.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  47.9k|              }
  751|  47.9k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  47.9k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  47.9k|        else if constexpr (std::is_object_v<T>) {
  688|  47.9k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  47.9k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4190|  47.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  47.9k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  951|  47.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4192|  47.9k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  47.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  47.9k|        {
  662|  47.9k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIdEENS0_13scan_expectedIS9_EERT_:
 5910|  58.2k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  58.2k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  58.2k|            auto rd = make_reader<T, char_type>();
 5916|  58.2k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  58.2k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  58.2k|    {
 5903|  58.2k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  58.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  58.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  58.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|  58.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 402, False: 57.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    402|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    402|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    402|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    402|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    402|    }                                                  \
  |  |  |  | 3939|  58.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|  57.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  57.8k|                        .transform_error(make_eof_scan_error));
 5905|  57.8k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  58.2k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4184|  57.8k|    {
 4185|  57.8k|        SCN_UNUSED(loc);
  ------------------
  |  |  930|  57.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4186|       |
 4187|  57.8k|        float_reader<CharT> rd{};
 4188|  57.8k|        return read_impl<Range>(
 4189|  57.8k|            range, rd,
 4190|  57.8k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  57.8k|                return r.read_source(SCN_FWD(args)...);
 4192|  57.8k|            },
 4193|  57.8k|            value);
 4194|  57.8k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  57.8k|        : m_fptr([](storage fn,
  743|  57.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  57.8k|              cvref<T> obj = *get<T>(fn);
  745|  57.8k|              if constexpr (std::is_void_v<R>) {
  746|  57.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  57.8k|              }
  748|  57.8k|              else {
  749|  57.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  57.8k|              }
  751|  57.8k|          }),
  752|  57.8k|          m_storage(std::addressof(f))
  753|  57.8k|    {
  754|  57.8k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  57.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  57.8k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  57.8k|              else {
  749|  57.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  57.8k|              }
  751|  57.8k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  57.8k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  57.8k|        else if constexpr (std::is_object_v<T>) {
  688|  57.8k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  57.8k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4190|  57.8k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  57.8k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  951|  57.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4192|  57.8k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  57.8k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  57.8k|        {
  662|  57.8k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIeEENS0_13scan_expectedIS9_EERT_:
 5910|  60.1k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  60.1k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  60.1k|            auto rd = make_reader<T, char_type>();
 5916|  60.1k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  60.1k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_eEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  60.1k|    {
 5903|  60.1k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  60.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  60.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  60.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|  60.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 447, False: 59.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    447|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    447|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    447|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    447|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    447|    }                                                  \
  |  |  |  | 3939|  60.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|  59.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  59.6k|                        .transform_error(make_eof_scan_error));
 5905|  59.6k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  60.1k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4184|  59.6k|    {
 4185|  59.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  930|  59.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4186|       |
 4187|  59.6k|        float_reader<CharT> rd{};
 4188|  59.6k|        return read_impl<Range>(
 4189|  59.6k|            range, rd,
 4190|  59.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  59.6k|                return r.read_source(SCN_FWD(args)...);
 4192|  59.6k|            },
 4193|  59.6k|            value);
 4194|  59.6k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  59.6k|        : m_fptr([](storage fn,
  743|  59.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  59.6k|              cvref<T> obj = *get<T>(fn);
  745|  59.6k|              if constexpr (std::is_void_v<R>) {
  746|  59.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  59.6k|              }
  748|  59.6k|              else {
  749|  59.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  59.6k|              }
  751|  59.6k|          }),
  752|  59.6k|          m_storage(std::addressof(f))
  753|  59.6k|    {
  754|  59.6k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  59.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  59.6k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  59.6k|              else {
  749|  59.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  59.6k|              }
  751|  59.6k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  59.6k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  59.6k|        else if constexpr (std::is_object_v<T>) {
  688|  59.6k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  59.6k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4190|  59.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  59.6k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  951|  59.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4192|  59.6k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  59.6k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  59.6k|        {
  662|  59.6k|        }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEwEEEENSL_10locale_refE:
 2985|   452k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  949|   452k|    static_cast<    \
  |  |  950|   452k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2986|   452k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2987|   452k|          m_current(m_range.begin())
 2988|   452k|    {
 2989|   452k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE3endEv:
 2997|   763k|    {
 2998|   763k|        return m_range.end();
 2999|   763k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE10advance_toES7_:
 3012|   311k|    {
 3013|   311k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  945|   311k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   311k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3014|   311k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3015|   311k|            if (it == nullptr) {
  ------------------
  |  Branch (3015:17): [True: 0, False: 311k]
  ------------------
 3016|      0|                it = end();
 3017|      0|            }
 3018|   311k|        }
 3019|   311k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  949|   311k|    static_cast<    \
  |  |  950|   311k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3020|   311k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5rangeEv:
 3002|   452k|    {
 3003|   452k|        return ranges::subrange{begin(), end()};
 3004|   452k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6074|   452k|    {
 6075|   452k|        const bool need_skipped_width =
 6076|   452k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6076:13): [True: 0, False: 452k]
  |  Branch (6076:33): [True: 0, False: 452k]
  ------------------
 6077|   452k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6078|       |
 6079|       |        // Read prefix
 6080|   452k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6080:13): [True: 0, False: 452k]
  ------------------
 6081|   452k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6081:13): [True: 0, False: 452k]
  ------------------
 6082|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6083|      0|                             need_skipped_width);
 6084|      0|        }
 6085|   452k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6085:13): [True: 452k, False: 0]
  |  Branch (6085:56): [True: 452k, False: 0]
  ------------------
 6086|       |            // Default alignment:
 6087|       |            // Skip preceding whitespace, if required by the reader
 6088|   452k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6088:17): [True: 0, False: 452k]
  ------------------
 6089|      0|                auto max_width_view = take_width(rng, specs.precision);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6093|      0|            }
 6094|   901k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|   452k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   452k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   452k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|   452k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 3.43k, False: 449k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.43k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  3.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  3.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  3.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  3.43k|    }                                                  \
  |  |  |  | 3939|   452k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|   449k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|   901k|                            make_eof_scan_error));
 6096|       |
 6097|   901k|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 449k]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|   449k|            return result_type{it, 0};
 6105|   901k|        }
 6106|       |
 6107|      0|        return result_type{rng.begin(), 0};
 6108|   452k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6116|   309k|    {
 6117|   309k|        const bool need_skipped_width =
 6118|   309k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6118:13): [True: 0, False: 309k]
  |  Branch (6118:33): [True: 0, False: 309k]
  ------------------
 6119|   309k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6120|       |
 6121|   309k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6121:13): [True: 0, False: 309k]
  ------------------
 6122|   309k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6122:13): [True: 0, False: 309k]
  ------------------
 6123|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6124:17): [True: 0, False: 0]
  ------------------
 6125|      0|                return result_type{rng.begin(), 0};
 6126|      0|            }
 6127|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6128|      0|                             specs.fill, need_skipped_width);
 6129|      0|        }
 6130|   309k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6130:13): [True: 309k, False: 0]
  ------------------
 6131|   309k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6131:13): [True: 0, False: 309k]
  ------------------
 6132|   309k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6132:15): [True: 0, False: 0]
  |  Branch (6132:35): [True: 0, False: 0]
  ------------------
 6133|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6133:15): [True: 0, False: 0]
  ------------------
 6134|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6134:15): [True: 0, False: 0]
  ------------------
 6135|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                const auto initial_width =
 6137|      0|                    specs.precision - prefix_width - value_width;
 6138|      0|                auto max_width_view = take_width(rng, initial_width);
 6139|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6140|      0|                                  .transform_error(make_eof_scan_error));
 6141|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6142|      0|            }
 6143|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|                            make_eof_scan_error));
 6145|       |
 6146|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return result_type{
 6148|      0|                    it,
 6149|      0|                    calculate_text_width(make_contiguous_buffer(
 6150|      0|                                             ranges::subrange{rng.begin(), it})
 6151|      0|                                             .view())};
 6152|      0|            }
 6153|      0|            return result_type{it, 0};
 6154|      0|        }
 6155|   309k|        return result_type{rng.begin(), 0};
 6156|   309k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIfEENS0_13scan_expectedIS9_EERT_:
 6226|   141k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|   141k|                          basic_contiguous_scan_context<char_type>>) {
 6231|   141k|            auto rd = make_reader<T, char_type>();
 6232|   141k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   141k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  880|   141k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 0, False: 141k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6233|   141k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|   141k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_fEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6161|   141k|    {
 6162|   141k|        const bool need_skipped_width =
 6163|   141k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 141k]
  |  Branch (6163:33): [True: 0, False: 141k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|   141k|        auto it = rng.begin();
 6167|   141k|        std::ptrdiff_t prefix_width = 0;
 6168|   141k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 141k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|   141k|        else {
 6176|   141k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   141k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   141k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   141k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|   141k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 1.06k, False: 140k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.06k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.06k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.06k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.06k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.06k|    }                                                  \
  |  |  |  | 3939|   141k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|   140k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|   140k|            std::tie(it, prefix_width) = prefix_result;
 6178|   140k|        }
 6179|   140k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|   140k|        std::ptrdiff_t value_width = 0;
 6183|   140k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 140k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|   140k|        else {
 6199|   140k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   140k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   140k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  880|   140k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 46.0k, False: 94.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  46.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  46.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  46.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  46.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  46.0k|    }                                                  \
  |  | 3939|   140k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  951|   140k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  94.0k|                                             specs, value, loc));
 6201|       |
 6202|  94.0k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 94.0k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|  94.0k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  94.0k|        std::ptrdiff_t postfix_width = 0;
 6211|  94.0k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 93.5k, False: 532]
  ------------------
 6212|  93.5k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  93.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  93.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  93.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|  93.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 93.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  93.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|  93.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  93.5k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  93.5k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  93.5k|                                 value_width));
 6216|  93.5k|            std::tie(it, postfix_width) = postfix_result;
 6217|  93.5k|        }
 6218|       |
 6219|  94.0k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  94.0k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  880|  94.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 0, False: 94.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|  94.0k|            specs, prefix_width, value_width, postfix_width));
 6221|  94.0k|        return it;
 6222|  94.0k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIdEENS0_13scan_expectedIS9_EERT_:
 6226|   154k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|   154k|                          basic_contiguous_scan_context<char_type>>) {
 6231|   154k|            auto rd = make_reader<T, char_type>();
 6232|   154k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   154k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  880|   154k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 0, False: 154k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6233|   154k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|   154k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6161|   154k|    {
 6162|   154k|        const bool need_skipped_width =
 6163|   154k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 154k]
  |  Branch (6163:33): [True: 0, False: 154k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|   154k|        auto it = rng.begin();
 6167|   154k|        std::ptrdiff_t prefix_width = 0;
 6168|   154k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 154k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|   154k|        else {
 6176|   154k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   154k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   154k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   154k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|   154k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 1.15k, False: 153k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.15k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.15k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.15k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.15k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.15k|    }                                                  \
  |  |  |  | 3939|   154k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|   153k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|   153k|            std::tie(it, prefix_width) = prefix_result;
 6178|   153k|        }
 6179|   153k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|   153k|        std::ptrdiff_t value_width = 0;
 6183|   153k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 153k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|   153k|        else {
 6199|   153k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   153k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   153k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  880|   153k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 45.9k, False: 107k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  45.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  45.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  45.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  45.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  45.9k|    }                                                  \
  |  | 3939|   153k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  951|   153k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|   107k|                                             specs, value, loc));
 6201|       |
 6202|   107k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 107k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|   107k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|   107k|        std::ptrdiff_t postfix_width = 0;
 6211|   107k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 106k, False: 588]
  ------------------
 6212|   106k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   106k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   106k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   106k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|   106k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 106k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   106k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|   106k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|   106k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|   106k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|   106k|                                 value_width));
 6216|   106k|            std::tie(it, postfix_width) = postfix_result;
 6217|   106k|        }
 6218|       |
 6219|   107k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   107k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  880|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 0, False: 107k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|   107k|            specs, prefix_width, value_width, postfix_width));
 6221|   107k|        return it;
 6222|   107k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIeEENS0_13scan_expectedIS9_EERT_:
 6226|   157k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|   157k|                          basic_contiguous_scan_context<char_type>>) {
 6231|   157k|            auto rd = make_reader<T, char_type>();
 6232|   157k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   157k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  880|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 0, False: 157k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6233|   157k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|   157k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_eEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6161|   157k|    {
 6162|   157k|        const bool need_skipped_width =
 6163|   157k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 157k]
  |  Branch (6163:33): [True: 0, False: 157k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|   157k|        auto it = rng.begin();
 6167|   157k|        std::ptrdiff_t prefix_width = 0;
 6168|   157k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 157k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|   157k|        else {
 6176|   157k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   157k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   157k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   157k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 1.22k, False: 155k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.22k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.22k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.22k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.22k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.22k|    }                                                  \
  |  |  |  | 3939|   157k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|   155k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|   155k|            std::tie(it, prefix_width) = prefix_result;
 6178|   155k|        }
 6179|   155k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|   155k|        std::ptrdiff_t value_width = 0;
 6183|   155k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 155k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|   155k|        else {
 6199|   155k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   155k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   155k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  880|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 45.8k, False: 109k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  45.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  45.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  45.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  45.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  45.8k|    }                                                  \
  |  | 3939|   155k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  951|   155k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|   109k|                                             specs, value, loc));
 6201|       |
 6202|   109k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 109k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|   109k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|   109k|        std::ptrdiff_t postfix_width = 0;
 6211|   109k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 109k, False: 636]
  ------------------
 6212|   109k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   109k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   109k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   109k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 109k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   109k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|   109k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|   109k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|   109k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|   109k|                                 value_width));
 6216|   109k|            std::tie(it, postfix_width) = postfix_result;
 6217|   109k|        }
 6218|       |
 6219|   109k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   109k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  880|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (880:25): [True: 0, False: 109k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|   109k|            specs, prefix_width, value_width, postfix_width));
 6221|   109k|        return it;
 6222|   109k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5834|   166k|{
 5835|   166k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  880|   166k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (880:25): [True: 654, False: 165k]
  |  |  ------------------
  ------------------
 5836|    654|        return unexpected(e);
 5837|    654|    }
 5838|       |
 5839|   165k|    if (!is_required) {
  ------------------
  |  Branch (5839:9): [True: 0, False: 165k]
  ------------------
 5840|      0|        return range.begin();
 5841|      0|    }
 5842|       |
 5843|   165k|    return skip_classic_whitespace(range);
 5844|   165k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIfEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5910|  48.2k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|  48.2k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|  48.2k|            auto rd = make_reader<T, char_type>();
 5920|  48.2k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 48.2k, False: 0]
  ------------------
 5921|  48.2k|                return impl(rd, range, value);
 5922|  48.2k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  48.2k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5902|  48.2k|    {
 5903|  48.2k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  48.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  48.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  48.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|  48.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 348, False: 47.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    348|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    348|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    348|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    348|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    348|    }                                                  \
  |  |  |  | 3939|  48.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|  47.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  47.9k|                        .transform_error(make_eof_scan_error));
 5905|  47.9k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  48.2k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4184|  47.9k|    {
 4185|  47.9k|        SCN_UNUSED(loc);
  ------------------
  |  |  930|  47.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4186|       |
 4187|  47.9k|        float_reader<CharT> rd{};
 4188|  47.9k|        return read_impl<Range>(
 4189|  47.9k|            range, rd,
 4190|  47.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  47.9k|                return r.read_source(SCN_FWD(args)...);
 4192|  47.9k|            },
 4193|  47.9k|            value);
 4194|  47.9k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  47.9k|        : m_fptr([](storage fn,
  743|  47.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  47.9k|              cvref<T> obj = *get<T>(fn);
  745|  47.9k|              if constexpr (std::is_void_v<R>) {
  746|  47.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  47.9k|              }
  748|  47.9k|              else {
  749|  47.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  47.9k|              }
  751|  47.9k|          }),
  752|  47.9k|          m_storage(std::addressof(f))
  753|  47.9k|    {
  754|  47.9k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  47.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  47.9k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  47.9k|              else {
  749|  47.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  47.9k|              }
  751|  47.9k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  47.9k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  47.9k|        else if constexpr (std::is_object_v<T>) {
  688|  47.9k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  47.9k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4190|  47.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  47.9k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  951|  47.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4192|  47.9k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  47.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  47.9k|        {
  662|  47.9k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIdEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5910|  58.1k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|  58.1k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|  58.1k|            auto rd = make_reader<T, char_type>();
 5920|  58.1k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 58.1k, False: 0]
  ------------------
 5921|  58.1k|                return impl(rd, range, value);
 5922|  58.1k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  58.1k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5902|  58.1k|    {
 5903|  58.1k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  58.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  58.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  58.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|  58.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 402, False: 57.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    402|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    402|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    402|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    402|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    402|    }                                                  \
  |  |  |  | 3939|  58.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|  57.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  57.7k|                        .transform_error(make_eof_scan_error));
 5905|  57.7k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  58.1k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4184|  57.7k|    {
 4185|  57.7k|        SCN_UNUSED(loc);
  ------------------
  |  |  930|  57.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4186|       |
 4187|  57.7k|        float_reader<CharT> rd{};
 4188|  57.7k|        return read_impl<Range>(
 4189|  57.7k|            range, rd,
 4190|  57.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  57.7k|                return r.read_source(SCN_FWD(args)...);
 4192|  57.7k|            },
 4193|  57.7k|            value);
 4194|  57.7k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  57.7k|        : m_fptr([](storage fn,
  743|  57.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  57.7k|              cvref<T> obj = *get<T>(fn);
  745|  57.7k|              if constexpr (std::is_void_v<R>) {
  746|  57.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  57.7k|              }
  748|  57.7k|              else {
  749|  57.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  57.7k|              }
  751|  57.7k|          }),
  752|  57.7k|          m_storage(std::addressof(f))
  753|  57.7k|    {
  754|  57.7k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  57.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  57.7k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  57.7k|              else {
  749|  57.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  57.7k|              }
  751|  57.7k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  57.7k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  57.7k|        else if constexpr (std::is_object_v<T>) {
  688|  57.7k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  57.7k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4190|  57.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  57.7k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  951|  57.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4192|  57.7k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  57.7k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  57.7k|        {
  662|  57.7k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIeEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5910|  60.0k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|  60.0k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|  60.0k|            auto rd = make_reader<T, char_type>();
 5920|  60.0k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 60.0k, False: 0]
  ------------------
 5921|  60.0k|                return impl(rd, range, value);
 5922|  60.0k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  60.0k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5902|  60.0k|    {
 5903|  60.0k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  60.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  60.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  60.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  880|  60.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (880:25): [True: 447, False: 59.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    447|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    447|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    447|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    447|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    447|    }                                                  \
  |  |  |  | 3939|  60.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  951|  59.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  59.5k|                        .transform_error(make_eof_scan_error));
 5905|  59.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  60.0k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4184|  59.5k|    {
 4185|  59.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  930|  59.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4186|       |
 4187|  59.5k|        float_reader<CharT> rd{};
 4188|  59.5k|        return read_impl<Range>(
 4189|  59.5k|            range, rd,
 4190|  59.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  59.5k|                return r.read_source(SCN_FWD(args)...);
 4192|  59.5k|            },
 4193|  59.5k|            value);
 4194|  59.5k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  59.5k|        : m_fptr([](storage fn,
  743|  59.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  59.5k|              cvref<T> obj = *get<T>(fn);
  745|  59.5k|              if constexpr (std::is_void_v<R>) {
  746|  59.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  59.5k|              }
  748|  59.5k|              else {
  749|  59.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  59.5k|              }
  751|  59.5k|          }),
  752|  59.5k|          m_storage(std::addressof(f))
  753|  59.5k|    {
  754|  59.5k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  59.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  59.5k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  59.5k|              else {
  749|  59.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  59.5k|              }
  751|  59.5k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  59.5k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  59.5k|        else if constexpr (std::is_object_v<T>) {
  688|  59.5k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  59.5k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4190|  59.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  59.5k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  951|  59.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4192|  59.5k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  59.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  59.5k|        {
  662|  59.5k|        }

LLVMFuzzerTestOneInput:
   54|  2.35k|{
   55|  2.35k|    scn::fuzz::run(data, size);
   56|  2.35k|    return 0;
   57|  2.35k|}
float_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   32|  2.35k|{
   33|  2.35k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (33:9): [True: 0, False: 2.35k]
  |  Branch (33:35): [True: 0, False: 2.35k]
  ------------------
   34|      0|        return;
   35|      0|    }
   36|       |
   37|  2.35k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   38|       |
   39|  2.35k|    const auto& f =
   40|  2.35k|        get_format_strings<char>("{}", "{:a}", "{:e}", "{:f}", "{:g}", "{:L}");
   41|  2.35k|    do_basic_run(sv, f);
   42|       |
   43|  2.35k|    const auto& wf = get_format_strings<wchar_t>(L"{}", L"{:a}", L"{:e}",
   44|  2.35k|                                                 L"{:f}", L"{:g}", L"{:L}");
   45|  2.35k|    do_basic_run(wsv_reinterpret, wf);
   46|  2.35k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (46:9): [True: 2.35k, False: 0]
  ------------------
   47|  2.35k|        do_basic_run(wsv_transcode, wf);
   48|  2.35k|    }
   49|  2.35k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  2.35k|{
   25|  2.35k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  2.35k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  2.35k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  2.35k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  2.35k|{
   25|  2.35k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  2.35k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  2.35k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  2.35k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  4.71k|{
   25|  4.71k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  4.71k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  4.71k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  4.71k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  4.71k|{
   25|  4.71k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  4.71k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  4.71k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  4.71k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   52|  2.35k|{
   53|  2.35k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  945|  2.35k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  2.35k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   54|       |
   55|       |    // narrow
   56|  2.35k|    string_buffer.resize(size);
   57|  2.35k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   58|  2.35k|    auto sv = std::string_view{string_buffer};
   59|       |
   60|       |    // wide, bitwise reinterpret
   61|  2.35k|    const auto wsv_reinterpret_size =
   62|  2.35k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (62:9): [True: 67, False: 2.28k]
  ------------------
   63|  2.35k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   64|  2.35k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   65|  2.35k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   66|       |
   67|       |    // wide, transcode to correct encoding (utf16 or utf32)
   68|  2.35k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   69|  2.35k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   70|       |
   71|  2.35k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   72|  2.35k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|  2.35k|{
  123|  2.35k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|  2.35k|    auto& buf = get_format_string_view_buffer<CharT>();
  125|  2.35k|    buf.resize(sizeof...(Args));
  126|  2.35k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|  2.35k|    return buf;
  128|  2.35k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  108|  2.35k|{
  109|  2.35k|    if constexpr (std::is_same_v<CharT, char>) {
  110|  2.35k|        return format_string_view_buffer;
  111|       |    }
  112|       |    else {
  113|       |        return wformat_string_view_buffer;
  114|       |    }
  115|  2.35k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|  2.35k|{
  186|  2.35k|    do_basic_run_for_source<CharT>(data, format_strings);
  187|  2.35k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|  2.35k|                                   format_strings);
  189|  2.35k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  2.35k|{
  134|       |    // Regular scan
  135|  14.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 14.1k, False: 2.35k]
  ------------------
  136|  14.1k|        auto it = scn::ranges::begin(source);
  137|   136k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|   136k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  945|   136k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   136k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|   136k|            auto result = scn::scan<T>(
  140|   136k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|   136k|                scn::runtime_format(f));
  142|   136k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 14.1k, False: 122k]
  ------------------
  143|  14.1k|                break;
  144|  14.1k|            }
  145|   122k|            it = result->begin();
  146|   122k|        }
  147|  14.1k|    }
  148|       |
  149|       |    // scan localized
  150|  14.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 14.1k, False: 2.35k]
  ------------------
  151|  14.1k|        auto it = scn::ranges::begin(source);
  152|   136k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|   136k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  945|   136k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   136k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|   136k|            auto result = scn::scan<T>(
  155|   136k|                global_locale,
  156|   136k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   136k|                scn::runtime_format(f));
  158|   136k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 14.1k, False: 122k]
  ------------------
  159|  14.1k|                break;
  160|  14.1k|            }
  161|   122k|            it = result->begin();
  162|   122k|        }
  163|  14.1k|    }
  164|       |
  165|       |    // scan_value
  166|  2.35k|    {
  167|  2.35k|        auto it = scn::ranges::begin(source);
  168|  29.4k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  29.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  945|  29.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  29.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  29.4k|            auto result = scn::scan_value<T>(
  171|  29.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  29.4k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 2.35k, False: 27.0k]
  ------------------
  173|  2.35k|                break;
  174|  2.35k|            }
  175|  27.0k|            it = result->begin();
  176|  27.0k|        }
  177|  2.35k|    }
  178|  2.35k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  2.35k|{
  134|       |    // Regular scan
  135|  14.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 14.1k, False: 2.35k]
  ------------------
  136|  14.1k|        auto it = scn::ranges::begin(source);
  137|   141k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|   141k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  945|   141k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   141k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|   141k|            auto result = scn::scan<T>(
  140|   141k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|   141k|                scn::runtime_format(f));
  142|   141k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 14.1k, False: 127k]
  ------------------
  143|  14.1k|                break;
  144|  14.1k|            }
  145|   127k|            it = result->begin();
  146|   127k|        }
  147|  14.1k|    }
  148|       |
  149|       |    // scan localized
  150|  14.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 14.1k, False: 2.35k]
  ------------------
  151|  14.1k|        auto it = scn::ranges::begin(source);
  152|   141k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|   141k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  945|   141k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   141k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|   141k|            auto result = scn::scan<T>(
  155|   141k|                global_locale,
  156|   141k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   141k|                scn::runtime_format(f));
  158|   141k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 14.1k, False: 127k]
  ------------------
  159|  14.1k|                break;
  160|  14.1k|            }
  161|   127k|            it = result->begin();
  162|   127k|        }
  163|  14.1k|    }
  164|       |
  165|       |    // scan_value
  166|  2.35k|    {
  167|  2.35k|        auto it = scn::ranges::begin(source);
  168|  30.8k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  30.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  945|  30.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  30.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  30.8k|            auto result = scn::scan_value<T>(
  171|  30.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  30.8k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 2.35k, False: 28.4k]
  ------------------
  173|  2.35k|                break;
  174|  2.35k|            }
  175|  28.4k|            it = result->begin();
  176|  28.4k|        }
  177|  2.35k|    }
  178|  2.35k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  2.35k|{
  134|       |    // Regular scan
  135|  14.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 14.1k, False: 2.35k]
  ------------------
  136|  14.1k|        auto it = scn::ranges::begin(source);
  137|   143k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|   143k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  945|   143k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   143k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|   143k|            auto result = scn::scan<T>(
  140|   143k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|   143k|                scn::runtime_format(f));
  142|   143k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 14.1k, False: 129k]
  ------------------
  143|  14.1k|                break;
  144|  14.1k|            }
  145|   129k|            it = result->begin();
  146|   129k|        }
  147|  14.1k|    }
  148|       |
  149|       |    // scan localized
  150|  14.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 14.1k, False: 2.35k]
  ------------------
  151|  14.1k|        auto it = scn::ranges::begin(source);
  152|   143k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|   143k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  945|   143k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   143k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|   143k|            auto result = scn::scan<T>(
  155|   143k|                global_locale,
  156|   143k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   143k|                scn::runtime_format(f));
  158|   143k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 14.1k, False: 129k]
  ------------------
  159|  14.1k|                break;
  160|  14.1k|            }
  161|   129k|            it = result->begin();
  162|   129k|        }
  163|  14.1k|    }
  164|       |
  165|       |    // scan_value
  166|  2.35k|    {
  167|  2.35k|        auto it = scn::ranges::begin(source);
  168|  31.4k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  31.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  945|  31.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  31.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  31.4k|            auto result = scn::scan_value<T>(
  171|  31.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  31.4k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 2.35k, False: 29.1k]
  ------------------
  173|  2.35k|                break;
  174|  2.35k|            }
  175|  29.1k|            it = result->begin();
  176|  29.1k|        }
  177|  2.35k|    }
  178|  2.35k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  2.35k|{
  134|       |    // Regular scan
  135|  14.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 14.1k, False: 2.35k]
  ------------------
  136|  14.1k|        auto it = scn::ranges::begin(source);
  137|   156k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|   156k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  945|   156k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   156k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|   156k|            auto result = scn::scan<T>(
  140|   156k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|   156k|                scn::runtime_format(f));
  142|   156k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 14.1k, False: 142k]
  ------------------
  143|  14.1k|                break;
  144|  14.1k|            }
  145|   142k|            it = result->begin();
  146|   142k|        }
  147|  14.1k|    }
  148|       |
  149|       |    // scan localized
  150|  14.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 14.1k, False: 2.35k]
  ------------------
  151|  14.1k|        auto it = scn::ranges::begin(source);
  152|   156k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|   156k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  945|   156k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   156k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|   156k|            auto result = scn::scan<T>(
  155|   156k|                global_locale,
  156|   156k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   156k|                scn::runtime_format(f));
  158|   156k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 14.1k, False: 142k]
  ------------------
  159|  14.1k|                break;
  160|  14.1k|            }
  161|   142k|            it = result->begin();
  162|   142k|        }
  163|  14.1k|    }
  164|       |
  165|       |    // scan_value
  166|  2.35k|    {
  167|  2.35k|        auto it = scn::ranges::begin(source);
  168|  32.0k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  32.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  945|  32.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  32.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  32.0k|            auto result = scn::scan_value<T>(
  171|  32.0k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  32.0k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 2.35k, False: 29.6k]
  ------------------
  173|  2.35k|                break;
  174|  2.35k|            }
  175|  29.6k|            it = result->begin();
  176|  29.6k|        }
  177|  2.35k|    }
  178|  2.35k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  2.35k|{
  134|       |    // Regular scan
  135|  14.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 14.1k, False: 2.35k]
  ------------------
  136|  14.1k|        auto it = scn::ranges::begin(source);
  137|   164k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|   164k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  945|   164k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   164k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|   164k|            auto result = scn::scan<T>(
  140|   164k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|   164k|                scn::runtime_format(f));
  142|   164k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 14.1k, False: 150k]
  ------------------
  143|  14.1k|                break;
  144|  14.1k|            }
  145|   150k|            it = result->begin();
  146|   150k|        }
  147|  14.1k|    }
  148|       |
  149|       |    // scan localized
  150|  14.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 14.1k, False: 2.35k]
  ------------------
  151|  14.1k|        auto it = scn::ranges::begin(source);
  152|   164k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|   164k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  945|   164k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   164k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|   164k|            auto result = scn::scan<T>(
  155|   164k|                global_locale,
  156|   164k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   164k|                scn::runtime_format(f));
  158|   164k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 14.1k, False: 150k]
  ------------------
  159|  14.1k|                break;
  160|  14.1k|            }
  161|   150k|            it = result->begin();
  162|   150k|        }
  163|  14.1k|    }
  164|       |
  165|       |    // scan_value
  166|  2.35k|    {
  167|  2.35k|        auto it = scn::ranges::begin(source);
  168|  34.0k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  34.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  945|  34.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  34.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  34.0k|            auto result = scn::scan_value<T>(
  171|  34.0k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  34.0k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 2.35k, False: 31.6k]
  ------------------
  173|  2.35k|                break;
  174|  2.35k|            }
  175|  31.6k|            it = result->begin();
  176|  31.6k|        }
  177|  2.35k|    }
  178|  2.35k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  2.35k|{
  134|       |    // Regular scan
  135|  14.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 14.1k, False: 2.35k]
  ------------------
  136|  14.1k|        auto it = scn::ranges::begin(source);
  137|   166k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|   166k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  945|   166k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   166k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|   166k|            auto result = scn::scan<T>(
  140|   166k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|   166k|                scn::runtime_format(f));
  142|   166k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 14.1k, False: 152k]
  ------------------
  143|  14.1k|                break;
  144|  14.1k|            }
  145|   152k|            it = result->begin();
  146|   152k|        }
  147|  14.1k|    }
  148|       |
  149|       |    // scan localized
  150|  14.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 14.1k, False: 2.35k]
  ------------------
  151|  14.1k|        auto it = scn::ranges::begin(source);
  152|   166k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|   166k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  945|   166k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|   166k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|   166k|            auto result = scn::scan<T>(
  155|   166k|                global_locale,
  156|   166k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   166k|                scn::runtime_format(f));
  158|   166k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 14.1k, False: 152k]
  ------------------
  159|  14.1k|                break;
  160|  14.1k|            }
  161|   152k|            it = result->begin();
  162|   152k|        }
  163|  14.1k|    }
  164|       |
  165|       |    // scan_value
  166|  2.35k|    {
  167|  2.35k|        auto it = scn::ranges::begin(source);
  168|  34.4k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  34.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  945|  34.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  34.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  34.4k|            auto result = scn::scan_value<T>(
  171|  34.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  34.4k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 2.35k, False: 32.1k]
  ------------------
  173|  2.35k|                break;
  174|  2.35k|            }
  175|  32.1k|            it = result->begin();
  176|  32.1k|        }
  177|  2.35k|    }
  178|  2.35k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   90|  2.35k|{
   91|  2.35k|    using char_type = ranges::range_value_t<Source>;
   92|  2.35k|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|  2.35k|    deque.clear();
   94|  2.35k|    std::copy(ranges::begin(source), ranges::end(source),
   95|  2.35k|              std::back_inserter(deque));
   96|  2.35k|    return deque;
   97|  2.35k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   79|  2.35k|{
   80|  2.35k|    if constexpr (std::is_same_v<CharT, char>) {
   81|  2.35k|        return noncontiguous_buffer;
   82|       |    }
   83|       |    else {
   84|       |        return wnoncontiguous_buffer;
   85|       |    }
   86|  2.35k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|  2.35k|{
  123|  2.35k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|  2.35k|    auto& buf = get_format_string_view_buffer<CharT>();
  125|  2.35k|    buf.resize(sizeof...(Args));
  126|  2.35k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|  2.35k|    return buf;
  128|  2.35k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  108|  2.35k|{
  109|       |    if constexpr (std::is_same_v<CharT, char>) {
  110|       |        return format_string_view_buffer;
  111|       |    }
  112|  2.35k|    else {
  113|  2.35k|        return wformat_string_view_buffer;
  114|  2.35k|    }
  115|  2.35k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|  4.71k|{
  186|  4.71k|    do_basic_run_for_source<CharT>(data, format_strings);
  187|  4.71k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|  4.71k|                                   format_strings);
  189|  4.71k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  4.71k|{
  134|       |    // Regular scan
  135|  28.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 28.2k, False: 4.71k]
  ------------------
  136|  28.2k|        auto it = scn::ranges::begin(source);
  137|  86.6k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  86.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  945|  86.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  86.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  86.6k|            auto result = scn::scan<T>(
  140|  86.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  86.6k|                scn::runtime_format(f));
  142|  86.6k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 28.2k, False: 58.4k]
  ------------------
  143|  28.2k|                break;
  144|  28.2k|            }
  145|  58.4k|            it = result->begin();
  146|  58.4k|        }
  147|  28.2k|    }
  148|       |
  149|       |    // scan localized
  150|  28.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 28.2k, False: 4.71k]
  ------------------
  151|  28.2k|        auto it = scn::ranges::begin(source);
  152|  86.6k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  86.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  945|  86.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  86.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  86.6k|            auto result = scn::scan<T>(
  155|  86.6k|                global_locale,
  156|  86.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  86.6k|                scn::runtime_format(f));
  158|  86.6k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 28.2k, False: 58.4k]
  ------------------
  159|  28.2k|                break;
  160|  28.2k|            }
  161|  58.4k|            it = result->begin();
  162|  58.4k|        }
  163|  28.2k|    }
  164|       |
  165|       |    // scan_value
  166|  4.71k|    {
  167|  4.71k|        auto it = scn::ranges::begin(source);
  168|  16.1k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  16.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  945|  16.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  16.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  16.1k|            auto result = scn::scan_value<T>(
  171|  16.1k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  16.1k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 4.71k, False: 11.3k]
  ------------------
  173|  4.71k|                break;
  174|  4.71k|            }
  175|  11.3k|            it = result->begin();
  176|  11.3k|        }
  177|  4.71k|    }
  178|  4.71k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  4.71k|{
  134|       |    // Regular scan
  135|  28.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 28.2k, False: 4.71k]
  ------------------
  136|  28.2k|        auto it = scn::ranges::begin(source);
  137|  96.6k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  96.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  945|  96.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  96.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  96.6k|            auto result = scn::scan<T>(
  140|  96.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  96.6k|                scn::runtime_format(f));
  142|  96.6k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 28.2k, False: 68.3k]
  ------------------
  143|  28.2k|                break;
  144|  28.2k|            }
  145|  68.3k|            it = result->begin();
  146|  68.3k|        }
  147|  28.2k|    }
  148|       |
  149|       |    // scan localized
  150|  28.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 28.2k, False: 4.71k]
  ------------------
  151|  28.2k|        auto it = scn::ranges::begin(source);
  152|  96.6k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  96.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  945|  96.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  96.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  96.6k|            auto result = scn::scan<T>(
  155|  96.6k|                global_locale,
  156|  96.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  96.6k|                scn::runtime_format(f));
  158|  96.6k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 28.2k, False: 68.3k]
  ------------------
  159|  28.2k|                break;
  160|  28.2k|            }
  161|  68.3k|            it = result->begin();
  162|  68.3k|        }
  163|  28.2k|    }
  164|       |
  165|       |    // scan_value
  166|  4.71k|    {
  167|  4.71k|        auto it = scn::ranges::begin(source);
  168|  19.4k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  19.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  945|  19.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  19.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  19.4k|            auto result = scn::scan_value<T>(
  171|  19.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  19.4k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 4.71k, False: 14.6k]
  ------------------
  173|  4.71k|                break;
  174|  4.71k|            }
  175|  14.6k|            it = result->begin();
  176|  14.6k|        }
  177|  4.71k|    }
  178|  4.71k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  4.71k|{
  134|       |    // Regular scan
  135|  28.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 28.2k, False: 4.71k]
  ------------------
  136|  28.2k|        auto it = scn::ranges::begin(source);
  137|  98.5k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  98.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  945|  98.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  98.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  98.5k|            auto result = scn::scan<T>(
  140|  98.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  98.5k|                scn::runtime_format(f));
  142|  98.5k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 28.2k, False: 70.2k]
  ------------------
  143|  28.2k|                break;
  144|  28.2k|            }
  145|  70.2k|            it = result->begin();
  146|  70.2k|        }
  147|  28.2k|    }
  148|       |
  149|       |    // scan localized
  150|  28.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 28.2k, False: 4.71k]
  ------------------
  151|  28.2k|        auto it = scn::ranges::begin(source);
  152|  98.5k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  98.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  945|  98.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  98.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  98.5k|            auto result = scn::scan<T>(
  155|  98.5k|                global_locale,
  156|  98.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  98.5k|                scn::runtime_format(f));
  158|  98.5k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 28.2k, False: 70.2k]
  ------------------
  159|  28.2k|                break;
  160|  28.2k|            }
  161|  70.2k|            it = result->begin();
  162|  70.2k|        }
  163|  28.2k|    }
  164|       |
  165|       |    // scan_value
  166|  4.71k|    {
  167|  4.71k|        auto it = scn::ranges::begin(source);
  168|  20.0k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  20.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  945|  20.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  20.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  20.0k|            auto result = scn::scan_value<T>(
  171|  20.0k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  20.0k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 4.71k, False: 15.3k]
  ------------------
  173|  4.71k|                break;
  174|  4.71k|            }
  175|  15.3k|            it = result->begin();
  176|  15.3k|        }
  177|  4.71k|    }
  178|  4.71k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  4.71k|{
  134|       |    // Regular scan
  135|  28.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 28.2k, False: 4.71k]
  ------------------
  136|  28.2k|        auto it = scn::ranges::begin(source);
  137|  86.6k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  86.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  945|  86.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  86.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  86.6k|            auto result = scn::scan<T>(
  140|  86.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  86.6k|                scn::runtime_format(f));
  142|  86.6k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 28.2k, False: 58.3k]
  ------------------
  143|  28.2k|                break;
  144|  28.2k|            }
  145|  58.3k|            it = result->begin();
  146|  58.3k|        }
  147|  28.2k|    }
  148|       |
  149|       |    // scan localized
  150|  28.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 28.2k, False: 4.71k]
  ------------------
  151|  28.2k|        auto it = scn::ranges::begin(source);
  152|  86.6k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  86.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  945|  86.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  86.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  86.6k|            auto result = scn::scan<T>(
  155|  86.6k|                global_locale,
  156|  86.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  86.6k|                scn::runtime_format(f));
  158|  86.6k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 28.2k, False: 58.3k]
  ------------------
  159|  28.2k|                break;
  160|  28.2k|            }
  161|  58.3k|            it = result->begin();
  162|  58.3k|        }
  163|  28.2k|    }
  164|       |
  165|       |    // scan_value
  166|  4.71k|    {
  167|  4.71k|        auto it = scn::ranges::begin(source);
  168|  16.0k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  16.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  945|  16.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  16.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  16.0k|            auto result = scn::scan_value<T>(
  171|  16.0k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  16.0k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 4.71k, False: 11.3k]
  ------------------
  173|  4.71k|                break;
  174|  4.71k|            }
  175|  11.3k|            it = result->begin();
  176|  11.3k|        }
  177|  4.71k|    }
  178|  4.71k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  4.71k|{
  134|       |    // Regular scan
  135|  28.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 28.2k, False: 4.71k]
  ------------------
  136|  28.2k|        auto it = scn::ranges::begin(source);
  137|  96.5k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  96.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  945|  96.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  96.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  96.5k|            auto result = scn::scan<T>(
  140|  96.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  96.5k|                scn::runtime_format(f));
  142|  96.5k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 28.2k, False: 68.2k]
  ------------------
  143|  28.2k|                break;
  144|  28.2k|            }
  145|  68.2k|            it = result->begin();
  146|  68.2k|        }
  147|  28.2k|    }
  148|       |
  149|       |    // scan localized
  150|  28.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 28.2k, False: 4.71k]
  ------------------
  151|  28.2k|        auto it = scn::ranges::begin(source);
  152|  96.5k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  96.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  945|  96.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  96.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  96.5k|            auto result = scn::scan<T>(
  155|  96.5k|                global_locale,
  156|  96.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  96.5k|                scn::runtime_format(f));
  158|  96.5k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 28.2k, False: 68.2k]
  ------------------
  159|  28.2k|                break;
  160|  28.2k|            }
  161|  68.2k|            it = result->begin();
  162|  68.2k|        }
  163|  28.2k|    }
  164|       |
  165|       |    // scan_value
  166|  4.71k|    {
  167|  4.71k|        auto it = scn::ranges::begin(source);
  168|  19.3k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  19.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  945|  19.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  19.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  19.3k|            auto result = scn::scan_value<T>(
  171|  19.3k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  19.3k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 4.71k, False: 14.6k]
  ------------------
  173|  4.71k|                break;
  174|  4.71k|            }
  175|  14.6k|            it = result->begin();
  176|  14.6k|        }
  177|  4.71k|    }
  178|  4.71k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  4.71k|{
  134|       |    // Regular scan
  135|  28.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 28.2k, False: 4.71k]
  ------------------
  136|  28.2k|        auto it = scn::ranges::begin(source);
  137|  98.4k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  98.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  945|  98.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  98.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  98.4k|            auto result = scn::scan<T>(
  140|  98.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  98.4k|                scn::runtime_format(f));
  142|  98.4k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 28.2k, False: 70.2k]
  ------------------
  143|  28.2k|                break;
  144|  28.2k|            }
  145|  70.2k|            it = result->begin();
  146|  70.2k|        }
  147|  28.2k|    }
  148|       |
  149|       |    // scan localized
  150|  28.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 28.2k, False: 4.71k]
  ------------------
  151|  28.2k|        auto it = scn::ranges::begin(source);
  152|  98.4k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  98.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  945|  98.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  98.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  98.4k|            auto result = scn::scan<T>(
  155|  98.4k|                global_locale,
  156|  98.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  98.4k|                scn::runtime_format(f));
  158|  98.4k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 28.2k, False: 70.2k]
  ------------------
  159|  28.2k|                break;
  160|  28.2k|            }
  161|  70.2k|            it = result->begin();
  162|  70.2k|        }
  163|  28.2k|    }
  164|       |
  165|       |    // scan_value
  166|  4.71k|    {
  167|  4.71k|        auto it = scn::ranges::begin(source);
  168|  20.0k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  20.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  945|  20.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  942|  20.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  20.0k|            auto result = scn::scan_value<T>(
  171|  20.0k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  20.0k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 4.71k, False: 15.3k]
  ------------------
  173|  4.71k|                break;
  174|  4.71k|            }
  175|  15.3k|            it = result->begin();
  176|  15.3k|        }
  177|  4.71k|    }
  178|  4.71k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   90|  4.71k|{
   91|  4.71k|    using char_type = ranges::range_value_t<Source>;
   92|  4.71k|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|  4.71k|    deque.clear();
   94|  4.71k|    std::copy(ranges::begin(source), ranges::end(source),
   95|  4.71k|              std::back_inserter(deque));
   96|  4.71k|    return deque;
   97|  4.71k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   79|  4.71k|{
   80|       |    if constexpr (std::is_same_v<CharT, char>) {
   81|       |        return noncontiguous_buffer;
   82|       |    }
   83|  4.71k|    else {
   84|  4.71k|        return wnoncontiguous_buffer;
   85|  4.71k|    }
   86|  4.71k|}

