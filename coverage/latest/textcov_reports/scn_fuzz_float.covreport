_ZN10fast_float19parse_number_stringIcEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  275|  1.46M|parsed_number_string_t<UC> parse_number_string(UC const *p, UC const * pend, parse_options_t<UC> options) noexcept {
  276|  1.46M|  chars_format const fmt = options.format;
  277|  1.46M|  UC const decimal_point = options.decimal_point;
  278|       |
  279|  1.46M|  parsed_number_string_t<UC> answer;
  280|  1.46M|  answer.valid = false;
  281|  1.46M|  answer.too_many_digits = false;
  282|  1.46M|  answer.negative = (*p == UC('-'));
  283|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  284|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  285|       |#else
  286|  1.46M|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (286:7): [True: 0, False: 1.46M]
  ------------------
  287|      0|#endif
  288|      0|    ++p;
  289|      0|    if (p == pend) {
  ------------------
  |  Branch (289:9): [True: 0, False: 0]
  ------------------
  290|      0|      return answer;
  291|      0|    }
  292|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (292:9): [True: 0, False: 0]
  ------------------
  293|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        return answer;
  295|      0|      }    
  296|      0|    } else {
  297|      0|      if (!is_integer(*p) && (*p != decimal_point)) { // a sign must be followed by an integer or the dot
  ------------------
  |  Branch (297:11): [True: 0, False: 0]
  |  Branch (297:30): [True: 0, False: 0]
  ------------------
  298|      0|        return answer;
  299|      0|      }
  300|      0|    }
  301|      0|  }
  302|  1.46M|  UC const * const start_digits = p;
  303|       |
  304|  1.46M|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  305|       |
  306|  8.31M|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (306:10): [True: 7.57M, False: 742k]
  |  Branch (306:25): [True: 6.85M, False: 720k]
  ------------------
  307|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  308|       |    // multiplication
  309|  6.85M|    i = 10 * i +
  310|  6.85M|        uint64_t(*p - UC('0')); // might overflow, we will handle the overflow later
  311|  6.85M|    ++p;
  312|  6.85M|  }
  313|  1.46M|  UC const * const end_of_integer_part = p;
  314|  1.46M|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  315|  1.46M|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  316|  1.46M|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|  1.46M|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (316:7): [True: 0, False: 1.46M]
  ------------------
  317|       |    // at least 1 digit in integer part, without leading zeros
  318|      0|    if (digit_count == 0 || (start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (318:9): [True: 0, False: 0]
  |  Branch (318:30): [True: 0, False: 0]
  |  Branch (318:60): [True: 0, False: 0]
  ------------------
  319|      0|      return answer;
  320|      0|    }
  321|      0|  }
  322|       |
  323|  1.46M|  int64_t exponent = 0;
  324|  1.46M|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (324:34): [True: 720k, False: 742k]
  |  Branch (324:49): [True: 276k, False: 444k]
  ------------------
  325|  1.46M|  if (has_decimal_point) {
  ------------------
  |  Branch (325:7): [True: 276k, False: 1.18M]
  ------------------
  326|   276k|    ++p;
  327|   276k|    UC const * before = p;
  328|       |    // can occur at most twice without overflowing, but let it occur more, since
  329|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  330|   276k|    loop_parse_if_eight_digits(p, pend, i);
  331|       |
  332|  1.13M|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (332:12): [True: 957k, False: 175k]
  |  Branch (332:27): [True: 857k, False: 100k]
  ------------------
  333|   857k|      uint8_t digit = uint8_t(*p - UC('0'));
  334|   857k|      ++p;
  335|   857k|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  336|   857k|    }
  337|   276k|    exponent = before - p;
  338|   276k|    answer.fraction = span<const UC>(before, size_t(p - before));
  339|   276k|    digit_count -= exponent;
  340|   276k|  }
  341|  1.46M|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|  1.46M|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (341:7): [True: 0, False: 1.46M]
  ------------------
  342|       |    // at least 1 digit in fractional part
  343|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (343:9): [True: 0, False: 0]
  |  Branch (343:30): [True: 0, False: 0]
  ------------------
  344|      0|      return answer;
  345|      0|    }
  346|      0|  } 
  347|  1.46M|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (347:12): [True: 0, False: 1.46M]
  ------------------
  348|      0|    return answer;
  349|      0|  }
  350|  1.46M|  int64_t exp_number = 0;            // explicit exponential part
  351|  1.46M|  if ( ((fmt & chars_format::scientific) &&
  ------------------
  |  Branch (351:9): [True: 1.25M, False: 209k]
  ------------------
  352|  1.46M|        (p != pend) &&
  ------------------
  |  Branch (352:9): [True: 544k, False: 708k]
  ------------------
  353|  1.46M|        ((UC('e') == *p) || (UC('E') == *p)))
  ------------------
  |  Branch (353:10): [True: 111k, False: 433k]
  |  Branch (353:29): [True: 66.4k, False: 366k]
  ------------------
  354|  1.46M|       ||
  355|  1.46M|       ((fmt & FASTFLOAT_FORTRANFMT) &&
  ------------------
  |  |   20|  1.28M|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (355:9): [True: 0, False: 1.28M]
  ------------------
  356|  1.28M|        (p != pend) &&
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|  1.28M|        ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) || (UC('D') == *p)))) {
  ------------------
  |  Branch (357:10): [True: 0, False: 0]
  |  Branch (357:29): [True: 0, False: 0]
  |  Branch (357:48): [True: 0, False: 0]
  |  Branch (357:67): [True: 0, False: 0]
  ------------------
  358|   178k|    UC const * location_of_e = p;
  359|   178k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) || (UC('D') == *p)) {
  ------------------
  |  Branch (359:9): [True: 111k, False: 66.4k]
  |  Branch (359:28): [True: 66.4k, False: 0]
  |  Branch (359:47): [True: 0, False: 0]
  |  Branch (359:66): [True: 0, False: 0]
  ------------------
  360|   178k|      ++p;
  361|   178k|    }
  362|   178k|    bool neg_exp = false;
  363|   178k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (363:9): [True: 177k, False: 125]
  |  Branch (363:24): [True: 12.4k, False: 165k]
  ------------------
  364|  12.4k|      neg_exp = true;
  365|  12.4k|      ++p;
  366|   165k|    } else if ((p != pend) && (UC('+') == *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  ------------------
  |  Branch (366:16): [True: 165k, False: 125]
  |  Branch (366:31): [True: 41.4k, False: 124k]
  ------------------
  367|  41.4k|      ++p;
  368|  41.4k|    }
  369|   178k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (369:9): [True: 175, False: 177k]
  |  Branch (369:24): [True: 710, False: 177k]
  ------------------
  370|    885|      if(!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (370:10): [True: 0, False: 885]
  ------------------
  371|       |        // We are in error.
  372|      0|        return answer;
  373|      0|      }
  374|       |      // Otherwise, we will be ignoring the 'e'.
  375|    885|      p = location_of_e;
  376|   177k|    } else {
  377|   567k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (377:14): [True: 436k, False: 131k]
  |  Branch (377:29): [True: 390k, False: 46.1k]
  ------------------
  378|   390k|        uint8_t digit = uint8_t(*p - UC('0'));
  379|   390k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (379:13): [True: 357k, False: 33.0k]
  ------------------
  380|   357k|          exp_number = 10 * exp_number + digit;
  381|   357k|        }
  382|   390k|        ++p;
  383|   390k|      }
  384|   177k|      if(neg_exp) { exp_number = - exp_number; }
  ------------------
  |  Branch (384:10): [True: 12.4k, False: 164k]
  ------------------
  385|   177k|      exponent += exp_number;
  386|   177k|    }
  387|  1.28M|  } else {
  388|       |    // If it scientific and not fixed, we have to bail out.
  389|  1.28M|    if((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) { return answer; }
  ------------------
  |  Branch (389:8): [True: 1.07M, False: 209k]
  |  Branch (389:44): [True: 0, False: 1.07M]
  ------------------
  390|  1.28M|  }
  391|  1.46M|  answer.lastmatch = p;
  392|  1.46M|  answer.valid = true;
  393|       |
  394|       |  // If we frequently had to deal with long strings of digits,
  395|       |  // we could extend our code by using a 128-bit integer instead
  396|       |  // of a 64-bit integer. However, this is uncommon.
  397|       |  //
  398|       |  // We can deal with up to 19 digits.
  399|  1.46M|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (399:7): [True: 261k, False: 1.20M]
  ------------------
  400|       |    // It is possible that the integer had an overflow.
  401|       |    // We have to handle the case where we have 0.0000somenumber.
  402|       |    // We need to be mindful of the case where we only have zeroes...
  403|       |    // E.g., 0.000000000...000.
  404|   261k|    UC const * start = start_digits;
  405|  1.08M|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (405:12): [True: 1.08M, False: 2.30k]
  |  Branch (405:32): [True: 816k, False: 269k]
  |  Branch (405:53): [True: 10.7k, False: 259k]
  ------------------
  406|   827k|      if(*start == UC('0')) { digit_count --; }
  ------------------
  |  Branch (406:10): [True: 816k, False: 10.7k]
  ------------------
  407|   827k|      start++;
  408|   827k|    }
  409|       |
  410|   261k|    if (digit_count > 19) {
  ------------------
  |  Branch (410:9): [True: 246k, False: 14.5k]
  ------------------
  411|   246k|      answer.too_many_digits = true;
  412|       |      // Let us start again, this time, avoiding overflows.
  413|       |      // We don't need to check if is_integer, since we use the
  414|       |      // pre-tokenized spans from above.
  415|   246k|      i = 0;
  416|   246k|      p = answer.integer.ptr;
  417|   246k|      UC const* int_end = p + answer.integer.len();
  418|   246k|      const uint64_t minimal_nineteen_digit_integer{ 1000000000000000000 };
  419|  2.80M|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (419:14): [True: 2.72M, False: 77.4k]
  |  Branch (419:54): [True: 2.55M, False: 169k]
  ------------------
  420|  2.55M|        i = i * 10 + uint64_t(*p - UC('0'));
  421|  2.55M|        ++p;
  422|  2.55M|      }
  423|   246k|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (423:11): [True: 77.4k, False: 169k]
  ------------------
  424|  77.4k|        exponent = end_of_integer_part - p + exp_number;
  425|  77.4k|      }
  426|   169k|      else { // We have a value with a fractional component.
  427|   169k|        p = answer.fraction.ptr;
  428|   169k|        UC const* frac_end = p + answer.fraction.len();
  429|  2.88M|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (429:16): [True: 2.71M, False: 169k]
  |  Branch (429:56): [True: 2.71M, False: 0]
  ------------------
  430|  2.71M|          i = i * 10 + uint64_t(*p - UC('0'));
  431|  2.71M|          ++p;
  432|  2.71M|        }
  433|   169k|        exponent = answer.fraction.ptr - p + exp_number;
  434|   169k|      }
  435|       |      // We have now corrected both exponent and i, to a truncated value
  436|   246k|    }
  437|   261k|  }
  438|  1.46M|  answer.exponent = exponent;
  439|  1.46M|  answer.mantissa = i;
  440|  1.46M|  return answer;
  441|  1.46M|}
_ZN10fast_float10is_integerIcEEbT_:
   35|  9.14M|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   36|  9.14M|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (36:12): [True: 204k, False: 8.94M]
  |  Branch (36:27): [True: 663k, False: 8.27M]
  ------------------
   37|  9.14M|}
_ZN10fast_float26loop_parse_if_eight_digitsERPKcS1_Rm:
  247|   276k|void loop_parse_if_eight_digits(const char*& p, const char* const pend, uint64_t& i) {
  248|       |  // optimizes better than parse_if_eight_digits_unrolled() for UC = char.
  249|   981k|  while ((std::distance(p, pend) >= 8) && is_made_of_eight_digits_fast(read8_to_u64(p))) {
  ------------------
  |  Branch (249:10): [True: 788k, False: 193k]
  |  Branch (249:43): [True: 705k, False: 82.5k]
  ------------------
  250|   705k|    i = i * 100000000 + parse_eight_digits_unrolled(read8_to_u64(p)); // in rare cases, this will overflow, but that's ok
  251|   705k|    p += 8;
  252|   705k|  }
  253|   276k|}
_ZN10fast_float28is_made_of_eight_digits_fastEm:
  169|   788k|fastfloat_really_inline constexpr bool is_made_of_eight_digits_fast(uint64_t val)  noexcept {
  170|   788k|  return !((((val + 0x4646464646464646) | (val - 0x3030303030303030)) &
  171|   788k|     0x8080808080808080));
  172|   788k|}
_ZN10fast_float12read8_to_u64IcEEmPKT_:
   53|  1.78M|uint64_t read8_to_u64(const UC *chars) {
   54|  1.78M|  if (cpp20_and_in_constexpr() || !std::is_same<UC, char>::value) {
  ------------------
  |  Branch (54:7): [Folded - Ignored]
  |  Branch (54:35): [Folded - Ignored]
  ------------------
   55|      0|    uint64_t val = 0;
   56|      0|    for(int i = 0; i < 8; ++i) {
  ------------------
  |  Branch (56:20): [True: 0, False: 0]
  ------------------
   57|      0|      val |= uint64_t(uint8_t(*chars)) << (i*8);
   58|      0|      ++chars;
   59|      0|    }
   60|      0|    return val;
   61|      0|  }
   62|  1.78M|  uint64_t val;
   63|  1.78M|  ::memcpy(&val, chars, sizeof(uint64_t));
   64|       |#if FASTFLOAT_IS_BIG_ENDIAN == 1
   65|       |  // Need to read as-if the number was in little-endian order.
   66|       |  val = byteswap(val);
   67|       |#endif
   68|  1.78M|  return val;
   69|  1.78M|}
_ZN10fast_float27parse_eight_digits_unrolledEm:
  146|  1.00M|uint32_t parse_eight_digits_unrolled(uint64_t val) {
  147|  1.00M|  const uint64_t mask = 0x000000FF000000FF;
  148|  1.00M|  const uint64_t mul1 = 0x000F424000000064; // 100 + (1000000ULL << 32)
  149|  1.00M|  const uint64_t mul2 = 0x0000271000000001; // 1 + (10000ULL << 32)
  150|  1.00M|  val -= 0x3030303030303030;
  151|  1.00M|  val = (val * 10) + (val >> 8); // val = (val * 2561) >> 8;
  152|  1.00M|  val = (((val & mask) * mul1) + (((val >> 16) & mask) * mul2)) >> 32;
  153|  1.00M|  return uint32_t(val);
  154|  1.00M|}
_ZN10fast_float27parse_eight_digits_unrolledIcEEjPKT_:
  160|   294k|uint32_t parse_eight_digits_unrolled(UC const * chars)  noexcept {
  161|   294k|  if (cpp20_and_in_constexpr() || !has_simd_opt<UC>()) {
  ------------------
  |  Branch (161:7): [Folded - Ignored]
  |  Branch (161:35): [Folded - Ignored]
  ------------------
  162|   294k|    return parse_eight_digits_unrolled(read8_to_u64(chars)); // truncation okay
  163|   294k|  }
  164|      0|  return parse_eight_digits_unrolled(simd_read8_to_u64(chars));
  165|   294k|}
_ZN10fast_float19parse_number_stringIDiEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  275|   616k|parsed_number_string_t<UC> parse_number_string(UC const *p, UC const * pend, parse_options_t<UC> options) noexcept {
  276|   616k|  chars_format const fmt = options.format;
  277|   616k|  UC const decimal_point = options.decimal_point;
  278|       |
  279|   616k|  parsed_number_string_t<UC> answer;
  280|   616k|  answer.valid = false;
  281|   616k|  answer.too_many_digits = false;
  282|   616k|  answer.negative = (*p == UC('-'));
  283|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  284|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  285|       |#else
  286|   616k|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (286:7): [True: 0, False: 616k]
  ------------------
  287|      0|#endif
  288|      0|    ++p;
  289|      0|    if (p == pend) {
  ------------------
  |  Branch (289:9): [True: 0, False: 0]
  ------------------
  290|      0|      return answer;
  291|      0|    }
  292|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (292:9): [True: 0, False: 0]
  ------------------
  293|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        return answer;
  295|      0|      }    
  296|      0|    } else {
  297|      0|      if (!is_integer(*p) && (*p != decimal_point)) { // a sign must be followed by an integer or the dot
  ------------------
  |  Branch (297:11): [True: 0, False: 0]
  |  Branch (297:30): [True: 0, False: 0]
  ------------------
  298|      0|        return answer;
  299|      0|      }
  300|      0|    }
  301|      0|  }
  302|   616k|  UC const * const start_digits = p;
  303|       |
  304|   616k|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  305|       |
  306|  1.32M|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (306:10): [True: 910k, False: 416k]
  |  Branch (306:25): [True: 710k, False: 199k]
  ------------------
  307|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  308|       |    // multiplication
  309|   710k|    i = 10 * i +
  310|   710k|        uint64_t(*p - UC('0')); // might overflow, we will handle the overflow later
  311|   710k|    ++p;
  312|   710k|  }
  313|   616k|  UC const * const end_of_integer_part = p;
  314|   616k|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  315|   616k|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  316|   616k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   616k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (316:7): [True: 0, False: 616k]
  ------------------
  317|       |    // at least 1 digit in integer part, without leading zeros
  318|      0|    if (digit_count == 0 || (start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (318:9): [True: 0, False: 0]
  |  Branch (318:30): [True: 0, False: 0]
  |  Branch (318:60): [True: 0, False: 0]
  ------------------
  319|      0|      return answer;
  320|      0|    }
  321|      0|  }
  322|       |
  323|   616k|  int64_t exponent = 0;
  324|   616k|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (324:34): [True: 199k, False: 416k]
  |  Branch (324:49): [True: 3.05k, False: 196k]
  ------------------
  325|   616k|  if (has_decimal_point) {
  ------------------
  |  Branch (325:7): [True: 3.05k, False: 613k]
  ------------------
  326|  3.05k|    ++p;
  327|  3.05k|    UC const * before = p;
  328|       |    // can occur at most twice without overflowing, but let it occur more, since
  329|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  330|  3.05k|    loop_parse_if_eight_digits(p, pend, i);
  331|       |
  332|  20.1k|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (332:12): [True: 18.1k, False: 1.93k]
  |  Branch (332:27): [True: 17.0k, False: 1.11k]
  ------------------
  333|  17.0k|      uint8_t digit = uint8_t(*p - UC('0'));
  334|  17.0k|      ++p;
  335|  17.0k|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  336|  17.0k|    }
  337|  3.05k|    exponent = before - p;
  338|  3.05k|    answer.fraction = span<const UC>(before, size_t(p - before));
  339|  3.05k|    digit_count -= exponent;
  340|  3.05k|  }
  341|   616k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   616k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (341:7): [True: 0, False: 616k]
  ------------------
  342|       |    // at least 1 digit in fractional part
  343|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (343:9): [True: 0, False: 0]
  |  Branch (343:30): [True: 0, False: 0]
  ------------------
  344|      0|      return answer;
  345|      0|    }
  346|      0|  } 
  347|   616k|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (347:12): [True: 0, False: 616k]
  ------------------
  348|      0|    return answer;
  349|      0|  }
  350|   616k|  int64_t exp_number = 0;            // explicit exponential part
  351|   616k|  if ( ((fmt & chars_format::scientific) &&
  ------------------
  |  Branch (351:9): [True: 505k, False: 110k]
  ------------------
  352|   616k|        (p != pend) &&
  ------------------
  |  Branch (352:9): [True: 197k, False: 307k]
  ------------------
  353|   616k|        ((UC('e') == *p) || (UC('E') == *p)))
  ------------------
  |  Branch (353:10): [True: 389, False: 197k]
  |  Branch (353:29): [True: 20.7k, False: 176k]
  ------------------
  354|   616k|       ||
  355|   616k|       ((fmt & FASTFLOAT_FORTRANFMT) &&
  ------------------
  |  |   20|   595k|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (355:9): [True: 0, False: 595k]
  ------------------
  356|   595k|        (p != pend) &&
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|   595k|        ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) || (UC('D') == *p)))) {
  ------------------
  |  Branch (357:10): [True: 0, False: 0]
  |  Branch (357:29): [True: 0, False: 0]
  |  Branch (357:48): [True: 0, False: 0]
  |  Branch (357:67): [True: 0, False: 0]
  ------------------
  358|  21.0k|    UC const * location_of_e = p;
  359|  21.0k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) || (UC('D') == *p)) {
  ------------------
  |  Branch (359:9): [True: 389, False: 20.7k]
  |  Branch (359:28): [True: 20.7k, False: 0]
  |  Branch (359:47): [True: 0, False: 0]
  |  Branch (359:66): [True: 0, False: 0]
  ------------------
  360|  21.0k|      ++p;
  361|  21.0k|    }
  362|  21.0k|    bool neg_exp = false;
  363|  21.0k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (363:9): [True: 21.0k, False: 30]
  |  Branch (363:24): [True: 5.64k, False: 15.4k]
  ------------------
  364|  5.64k|      neg_exp = true;
  365|  5.64k|      ++p;
  366|  15.4k|    } else if ((p != pend) && (UC('+') == *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  ------------------
  |  Branch (366:16): [True: 15.4k, False: 30]
  |  Branch (366:31): [True: 341, False: 15.0k]
  ------------------
  367|    341|      ++p;
  368|    341|    }
  369|  21.0k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (369:9): [True: 40, False: 21.0k]
  |  Branch (369:24): [True: 570, False: 20.4k]
  ------------------
  370|    610|      if(!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (370:10): [True: 0, False: 610]
  ------------------
  371|       |        // We are in error.
  372|      0|        return answer;
  373|      0|      }
  374|       |      // Otherwise, we will be ignoring the 'e'.
  375|    610|      p = location_of_e;
  376|  20.4k|    } else {
  377|  76.8k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (377:14): [True: 62.8k, False: 14.0k]
  |  Branch (377:29): [True: 56.3k, False: 6.45k]
  ------------------
  378|  56.3k|        uint8_t digit = uint8_t(*p - UC('0'));
  379|  56.3k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (379:13): [True: 52.7k, False: 3.58k]
  ------------------
  380|  52.7k|          exp_number = 10 * exp_number + digit;
  381|  52.7k|        }
  382|  56.3k|        ++p;
  383|  56.3k|      }
  384|  20.4k|      if(neg_exp) { exp_number = - exp_number; }
  ------------------
  |  Branch (384:10): [True: 5.60k, False: 14.8k]
  ------------------
  385|  20.4k|      exponent += exp_number;
  386|  20.4k|    }
  387|   595k|  } else {
  388|       |    // If it scientific and not fixed, we have to bail out.
  389|   595k|    if((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) { return answer; }
  ------------------
  |  Branch (389:8): [True: 484k, False: 110k]
  |  Branch (389:44): [True: 0, False: 484k]
  ------------------
  390|   595k|  }
  391|   616k|  answer.lastmatch = p;
  392|   616k|  answer.valid = true;
  393|       |
  394|       |  // If we frequently had to deal with long strings of digits,
  395|       |  // we could extend our code by using a 128-bit integer instead
  396|       |  // of a 64-bit integer. However, this is uncommon.
  397|       |  //
  398|       |  // We can deal with up to 19 digits.
  399|   616k|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (399:7): [True: 1.77k, False: 614k]
  ------------------
  400|       |    // It is possible that the integer had an overflow.
  401|       |    // We have to handle the case where we have 0.0000somenumber.
  402|       |    // We need to be mindful of the case where we only have zeroes...
  403|       |    // E.g., 0.000000000...000.
  404|  1.77k|    UC const * start = start_digits;
  405|  2.31k|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (405:12): [True: 2.31k, False: 0]
  |  Branch (405:32): [True: 536, False: 1.77k]
  |  Branch (405:53): [True: 0, False: 1.77k]
  ------------------
  406|    536|      if(*start == UC('0')) { digit_count --; }
  ------------------
  |  Branch (406:10): [True: 536, False: 0]
  ------------------
  407|    536|      start++;
  408|    536|    }
  409|       |
  410|  1.77k|    if (digit_count > 19) {
  ------------------
  |  Branch (410:9): [True: 1.50k, False: 272]
  ------------------
  411|  1.50k|      answer.too_many_digits = true;
  412|       |      // Let us start again, this time, avoiding overflows.
  413|       |      // We don't need to check if is_integer, since we use the
  414|       |      // pre-tokenized spans from above.
  415|  1.50k|      i = 0;
  416|  1.50k|      p = answer.integer.ptr;
  417|  1.50k|      UC const* int_end = p + answer.integer.len();
  418|  1.50k|      const uint64_t minimal_nineteen_digit_integer{ 1000000000000000000 };
  419|  23.7k|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (419:14): [True: 22.9k, False: 848]
  |  Branch (419:54): [True: 22.2k, False: 656]
  ------------------
  420|  22.2k|        i = i * 10 + uint64_t(*p - UC('0'));
  421|  22.2k|        ++p;
  422|  22.2k|      }
  423|  1.50k|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (423:11): [True: 848, False: 656]
  ------------------
  424|    848|        exponent = end_of_integer_part - p + exp_number;
  425|    848|      }
  426|    656|      else { // We have a value with a fractional component.
  427|    656|        p = answer.fraction.ptr;
  428|    656|        UC const* frac_end = p + answer.fraction.len();
  429|  7.14k|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (429:16): [True: 6.48k, False: 656]
  |  Branch (429:56): [True: 6.48k, False: 0]
  ------------------
  430|  6.48k|          i = i * 10 + uint64_t(*p - UC('0'));
  431|  6.48k|          ++p;
  432|  6.48k|        }
  433|    656|        exponent = answer.fraction.ptr - p + exp_number;
  434|    656|      }
  435|       |      // We have now corrected both exponent and i, to a truncated value
  436|  1.50k|    }
  437|  1.77k|  }
  438|   616k|  answer.exponent = exponent;
  439|   616k|  answer.mantissa = i;
  440|   616k|  return answer;
  441|   616k|}
_ZN10fast_float10is_integerIDiEEbT_:
   35|  1.01M|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   36|  1.01M|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (36:12): [True: 203k, False: 809k]
  |  Branch (36:27): [True: 4.40k, False: 804k]
  ------------------
   37|  1.01M|}
_ZN10fast_float26loop_parse_if_eight_digitsIDiTnNSt3__19enable_ifIXntsr3std7is_sameIT_cEE5valueEiE4typeELi0EEEvRPKS3_S7_Rm:
  237|  3.05k|void loop_parse_if_eight_digits(const UC*& p, const UC* const pend, uint64_t& i) {
  238|  3.05k|  if (!has_simd_opt<UC>()) {
  ------------------
  |  Branch (238:7): [Folded - Ignored]
  ------------------
  239|  3.05k|    return;
  240|  3.05k|  }
  241|      0|  while ((std::distance(p, pend) >= 8) && simd_parse_if_eight_digits_unrolled(p, i)) { // in rare cases, this will overflow, but that's ok
  ------------------
  |  Branch (241:10): [True: 0, False: 0]
  |  Branch (241:43): [True: 0, False: 0]
  ------------------
  242|      0|    p += 8;
  243|      0|  }
  244|      0|}
_ZN10fast_float27parse_eight_digits_unrolledIDiEEjPKT_:
  160|    108|uint32_t parse_eight_digits_unrolled(UC const * chars)  noexcept {
  161|    108|  if (cpp20_and_in_constexpr() || !has_simd_opt<UC>()) {
  ------------------
  |  Branch (161:7): [Folded - Ignored]
  |  Branch (161:35): [Folded - Ignored]
  ------------------
  162|    108|    return parse_eight_digits_unrolled(read8_to_u64(chars)); // truncation okay
  163|    108|  }
  164|      0|  return parse_eight_digits_unrolled(simd_read8_to_u64(chars));
  165|    108|}
_ZN10fast_float12read8_to_u64IDiEEmPKT_:
   53|    108|uint64_t read8_to_u64(const UC *chars) {
   54|    108|  if (cpp20_and_in_constexpr() || !std::is_same<UC, char>::value) {
  ------------------
  |  Branch (54:7): [Folded - Ignored]
  |  Branch (54:35): [Folded - Ignored]
  ------------------
   55|    108|    uint64_t val = 0;
   56|    972|    for(int i = 0; i < 8; ++i) {
  ------------------
  |  Branch (56:20): [True: 864, False: 108]
  ------------------
   57|    864|      val |= uint64_t(uint8_t(*chars)) << (i*8);
   58|    864|      ++chars;
   59|    864|    }
   60|    108|    return val;
   61|    108|  }
   62|      0|  uint64_t val;
   63|      0|  ::memcpy(&val, chars, sizeof(uint64_t));
   64|       |#if FASTFLOAT_IS_BIG_ENDIAN == 1
   65|       |  // Need to read as-if the number was in little-endian order.
   66|       |  val = byteswap(val);
   67|       |#endif
   68|      0|  return val;
   69|    108|}

_ZN10fast_float6bigintC2Ev:
  412|  79.2k|  FASTFLOAT_CONSTEXPR20 bigint(): vec() {}
_ZN10fast_float8stackvecILt62EEC2Ev:
   46|   166k|  stackvec() = default;
_ZN10fast_float6bigint3mulEm:
  563|   263k|  FASTFLOAT_CONSTEXPR20 bool mul(limb y) noexcept {
  564|   263k|    return small_mul(vec, y);
  565|   263k|  }
_ZN10fast_float9small_mulILt62EEEbRNS_8stackvecIXT_EEEm:
  282|   385k|bool small_mul(stackvec<size>& vec, limb y) noexcept {
  283|   385k|  limb carry = 0;
  284|  1.42M|  for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (284:26): [True: 1.04M, False: 385k]
  ------------------
  285|  1.04M|    vec[index] = scalar_mul(vec[index], y, carry);
  286|  1.04M|  }
  287|   385k|  if (carry != 0) {
  ------------------
  |  Branch (287:7): [True: 220k, False: 164k]
  ------------------
  288|   220k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|   220k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 220k]
  |  |  ------------------
  ------------------
  289|   220k|  }
  290|   385k|  return true;
  291|   385k|}
_ZNK10fast_float8stackvecILt62EE3lenEv:
   76|  2.83M|  constexpr size_t len() const noexcept {
   77|  2.83M|    return length;
   78|  2.83M|  }
_ZN10fast_float10scalar_mulEmmRm:
  229|  1.04M|limb scalar_mul(limb x, limb y, limb& carry) noexcept {
  230|  1.04M|#ifdef FASTFLOAT_64BIT_LIMB
  231|  1.04M|  #if defined(__SIZEOF_INT128__)
  232|       |  // GCC and clang both define it as an extension.
  233|  1.04M|  __uint128_t z = __uint128_t(x) * __uint128_t(y) + __uint128_t(carry);
  234|  1.04M|  carry = limb(z >> limb_bits);
  235|  1.04M|  return limb(z);
  236|       |  #else
  237|       |  // fallback, no native 128-bit integer multiplication with carry.
  238|       |  // on msvc, this optimizes identically, somehow.
  239|       |  value128 z = full_multiplication(x, y);
  240|       |  bool overflow;
  241|       |  z.low = scalar_add(z.low, carry, overflow);
  242|       |  z.high += uint64_t(overflow);  // cannot overflow
  243|       |  carry = z.high;
  244|       |  return z.low;
  245|       |  #endif
  246|       |#else
  247|       |  uint64_t z = uint64_t(x) * uint64_t(y) + uint64_t(carry);
  248|       |  carry = limb(z >> limb_bits);
  249|       |  return limb(z);
  250|       |#endif
  251|  1.04M|}
_ZN10fast_float8stackvecILt62EEixEm:
   57|  2.91M|  FASTFLOAT_CONSTEXPR14 limb& operator[](size_t index) noexcept {
   58|  2.91M|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|  2.91M|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   59|  2.91M|    return data[index];
   60|  2.91M|  }
_ZN10fast_float8stackvecILt62EE8try_pushEm:
   91|   318k|  FASTFLOAT_CONSTEXPR14 bool try_push(limb value) noexcept {
   92|   318k|    if (len() < capacity()) {
  ------------------
  |  Branch (92:9): [True: 318k, False: 0]
  ------------------
   93|   318k|      push_unchecked(value);
   94|   318k|      return true;
   95|   318k|    } else {
   96|      0|      return false;
   97|      0|    }
   98|   318k|  }
_ZNK10fast_float8stackvecILt62EE8capacityEv:
   82|   360k|  constexpr size_t capacity() const noexcept {
   83|   360k|    return size;
   84|   360k|  }
_ZN10fast_float8stackvecILt62EE14push_uncheckedEm:
   86|   390k|  FASTFLOAT_CONSTEXPR14 void push_unchecked(limb value) noexcept {
   87|   390k|    data[length] = value;
   88|   390k|    length++;
   89|   390k|  }
_ZN10fast_float6bigint3addEm:
  567|   263k|  FASTFLOAT_CONSTEXPR20 bool add(limb y) noexcept {
  568|   263k|    return small_add(vec, y);
  569|   263k|  }
_ZN10fast_float9small_addILt62EEEbRNS_8stackvecIXT_EEEm:
  275|   263k|bool small_add(stackvec<size>& vec, limb y) noexcept {
  276|   263k|  return small_add_from(vec, y, 0);
  277|   263k|}
_ZN10fast_float14small_add_fromILt62EEEbRNS_8stackvecIXT_EEEmm:
  257|   263k|bool small_add_from(stackvec<size>& vec, limb y, size_t start) noexcept {
  258|   263k|  size_t index = start;
  259|   263k|  limb carry = y;
  260|   263k|  bool overflow;
  261|   402k|  while (carry != 0 && index < vec.len()) {
  ------------------
  |  Branch (261:10): [True: 218k, False: 183k]
  |  Branch (261:24): [True: 139k, False: 79.2k]
  ------------------
  262|   139k|    vec[index] = scalar_add(vec[index], carry, overflow);
  263|   139k|    carry = limb(overflow);
  264|   139k|    index += 1;
  265|   139k|  }
  266|   263k|  if (carry != 0) {
  ------------------
  |  Branch (266:7): [True: 79.2k, False: 183k]
  ------------------
  267|  79.2k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|  79.2k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 79.2k]
  |  |  ------------------
  ------------------
  268|  79.2k|  }
  269|   263k|  return true;
  270|   263k|}
_ZN10fast_float10scalar_addEmmRb:
  209|   290k|limb scalar_add(limb x, limb y, bool& overflow) noexcept {
  210|   290k|  limb z;
  211|       |// gcc and clang
  212|   290k|#if defined(__has_builtin)
  213|   290k|  #if __has_builtin(__builtin_add_overflow)
  214|   290k|    if (!cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (214:9): [Folded - Ignored]
  ------------------
  215|   290k|      overflow = __builtin_add_overflow(x, y, &z);
  216|   290k|      return z;
  217|   290k|    }
  218|      0|  #endif
  219|      0|#endif
  220|       |
  221|       |  // generic, this still optimizes correctly on MSVC.
  222|      0|  z = x + y;
  223|      0|  overflow = z < x;
  224|      0|  return z;
  225|   290k|}
_ZN10fast_float6bigint5pow10Ej:
  609|  6.69k|  FASTFLOAT_CONSTEXPR20 bool pow10(uint32_t exp) noexcept {
  610|  6.69k|    FASTFLOAT_TRY(pow5(exp));
  ------------------
  |  |  178|  6.69k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 6.69k]
  |  |  ------------------
  ------------------
  611|  6.69k|    return pow2(exp);
  612|  6.69k|  }
_ZN10fast_float6bigint4pow5Ej:
  577|  79.2k|  FASTFLOAT_CONSTEXPR20 bool pow5(uint32_t exp) noexcept {
  578|       |    // multiply by a power of 5
  579|  79.2k|    size_t large_length = sizeof(large_power_of_5) / sizeof(limb);
  580|  79.2k|    limb_span large = limb_span(large_power_of_5, large_length);
  581|  82.9k|    while (exp >= large_step) {
  ------------------
  |  Branch (581:12): [True: 3.75k, False: 79.2k]
  ------------------
  582|  3.75k|      FASTFLOAT_TRY(large_mul(vec, large));
  ------------------
  |  |  178|  3.75k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 3.75k]
  |  |  ------------------
  ------------------
  583|  3.75k|      exp -= large_step;
  584|  3.75k|    }
  585|  79.2k|#ifdef FASTFLOAT_64BIT_LIMB
  586|  79.2k|    uint32_t small_step = 27;
  587|  79.2k|    limb max_native = 7450580596923828125UL;
  588|       |#else
  589|       |    uint32_t small_step = 13;
  590|       |    limb max_native = 1220703125U;
  591|       |#endif
  592|   114k|    while (exp >= small_step) {
  ------------------
  |  Branch (592:12): [True: 35.6k, False: 79.2k]
  ------------------
  593|  35.6k|      FASTFLOAT_TRY(small_mul(vec, max_native));
  ------------------
  |  |  178|  35.6k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 35.6k]
  |  |  ------------------
  ------------------
  594|  35.6k|      exp -= small_step;
  595|  35.6k|    }
  596|  79.2k|    if (exp != 0) {
  ------------------
  |  Branch (596:9): [True: 68.0k, False: 11.1k]
  ------------------
  597|       |      // Work around clang bug https://godbolt.org/z/zedh7rrhc
  598|       |      // This is similar to https://github.com/llvm/llvm-project/issues/47746,
  599|       |      // except the workaround described there don't work here
  600|  68.0k|      FASTFLOAT_TRY(
  ------------------
  |  |  178|  68.0k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 68.0k]
  |  |  ------------------
  ------------------
  601|  68.0k|        small_mul(vec, limb(((void)small_power_of_5[0], small_power_of_5[exp])))
  602|  68.0k|      );
  603|  68.0k|    }
  604|       |
  605|  79.2k|    return true;
  606|  79.2k|  }
_ZN10fast_float9large_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  364|  3.75k|bool large_mul(stackvec<size>& x, limb_span y) noexcept {
  365|  3.75k|  if (y.len() == 1) {
  ------------------
  |  Branch (365:7): [True: 0, False: 3.75k]
  ------------------
  366|      0|    FASTFLOAT_TRY(small_mul(x, y[0]));
  ------------------
  |  |  178|      0|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  367|  3.75k|  } else {
  368|  3.75k|    FASTFLOAT_TRY(long_mul(x, y));
  ------------------
  |  |  178|  3.75k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 3.75k]
  |  |  ------------------
  ------------------
  369|  3.75k|  }
  370|  3.75k|  return true;
  371|  3.75k|}
_ZN10fast_float8long_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  335|  3.75k|bool long_mul(stackvec<size>& x, limb_span y) noexcept {
  336|  3.75k|  limb_span xs = limb_span(x.data, x.len());
  337|  3.75k|  stackvec<size> z(xs);
  338|  3.75k|  limb_span zs = limb_span(z.data, z.len());
  339|       |
  340|  3.75k|  if (y.len() != 0) {
  ------------------
  |  Branch (340:7): [True: 3.75k, False: 0]
  ------------------
  341|  3.75k|    limb y0 = y[0];
  342|  3.75k|    FASTFLOAT_TRY(small_mul(x, y0));
  ------------------
  |  |  178|  3.75k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 3.75k]
  |  |  ------------------
  ------------------
  343|  18.7k|    for (size_t index = 1; index < y.len(); index++) {
  ------------------
  |  Branch (343:28): [True: 15.0k, False: 3.75k]
  ------------------
  344|  15.0k|      limb yi = y[index];
  345|  15.0k|      stackvec<size> zi;
  346|  15.0k|      if (yi != 0) {
  ------------------
  |  Branch (346:11): [True: 15.0k, False: 0]
  ------------------
  347|       |        // re-use the same buffer throughout
  348|  15.0k|        zi.set_len(0);
  349|  15.0k|        FASTFLOAT_TRY(zi.try_extend(zs));
  ------------------
  |  |  178|  15.0k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 15.0k]
  |  |  ------------------
  ------------------
  350|  15.0k|        FASTFLOAT_TRY(small_mul(zi, yi));
  ------------------
  |  |  178|  15.0k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 15.0k]
  |  |  ------------------
  ------------------
  351|  15.0k|        limb_span zis = limb_span(zi.data, zi.len());
  352|  15.0k|        FASTFLOAT_TRY(large_add_from(x, zis, index));
  ------------------
  |  |  178|  15.0k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 15.0k]
  |  |  ------------------
  ------------------
  353|  15.0k|      }
  354|  15.0k|    }
  355|  3.75k|  }
  356|       |
  357|  3.75k|  x.normalize();
  358|  3.75k|  return true;
  359|  3.75k|}
_ZN10fast_float8stackvecILt62EEC2ENS_4spanImEE:
   53|  3.75k|  FASTFLOAT_CONSTEXPR20 stackvec(limb_span s) {
   54|  3.75k|    FASTFLOAT_ASSERT(try_extend(s));
  ------------------
  |  |  170|  3.75k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
   55|  3.75k|  }
_ZN10fast_float8stackvecILt62EE7set_lenEm:
   73|  57.9k|  FASTFLOAT_CONSTEXPR14 void set_len(size_t len) noexcept {
   74|  57.9k|    length = uint16_t(len);
   75|  57.9k|  }
_ZN10fast_float8stackvecILt62EE10try_extendENS_4spanImEE:
  106|  18.7k|  FASTFLOAT_CONSTEXPR20 bool try_extend(limb_span s) noexcept {
  107|  18.7k|    if (len() + s.len() <= capacity()) {
  ------------------
  |  Branch (107:9): [True: 18.7k, False: 0]
  ------------------
  108|  18.7k|      extend_unchecked(s);
  109|  18.7k|      return true;
  110|  18.7k|    } else {
  111|      0|      return false;
  112|      0|    }
  113|  18.7k|  }
_ZN10fast_float8stackvecILt62EE16extend_uncheckedENS_4spanImEE:
  100|  18.7k|  FASTFLOAT_CONSTEXPR20 void extend_unchecked(limb_span s) noexcept {
  101|  18.7k|    limb* ptr = data + length;
  102|  18.7k|    std::copy_n(s.ptr, s.len(), ptr);
  103|  18.7k|    set_len(len() + s.len());
  104|  18.7k|  }
_ZN10fast_float14large_add_fromILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEEm:
  297|  15.0k|bool large_add_from(stackvec<size>& x, limb_span y, size_t start) noexcept {
  298|       |  // the effective x buffer is from `xstart..x.len()`, so exit early
  299|       |  // if we can't get that current range.
  300|  15.0k|  if (x.len() < start || y.len() > x.len() - start) {
  ------------------
  |  Branch (300:7): [True: 0, False: 15.0k]
  |  Branch (300:26): [True: 14.7k, False: 229]
  ------------------
  301|  14.7k|      FASTFLOAT_TRY(x.try_resize(y.len() + start, 0));
  ------------------
  |  |  178|  14.7k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 14.7k]
  |  |  ------------------
  ------------------
  302|  14.7k|  }
  303|       |
  304|  15.0k|  bool carry = false;
  305|   125k|  for (size_t index = 0; index < y.len(); index++) {
  ------------------
  |  Branch (305:26): [True: 110k, False: 15.0k]
  ------------------
  306|   110k|    limb xi = x[index + start];
  307|   110k|    limb yi = y[index];
  308|   110k|    bool c1 = false;
  309|   110k|    bool c2 = false;
  310|   110k|    xi = scalar_add(xi, yi, c1);
  311|   110k|    if (carry) {
  ------------------
  |  Branch (311:9): [True: 41.3k, False: 68.6k]
  ------------------
  312|  41.3k|      xi = scalar_add(xi, 1, c2);
  313|  41.3k|    }
  314|   110k|    x[index + start] = xi;
  315|   110k|    carry = c1 | c2;
  316|   110k|  }
  317|       |
  318|       |  // handle overflow
  319|  15.0k|  if (carry) {
  ------------------
  |  Branch (319:7): [True: 0, False: 15.0k]
  ------------------
  320|      0|    FASTFLOAT_TRY(small_add_from(x, 1, y.len() + start));
  ------------------
  |  |  178|      0|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  321|      0|  }
  322|  15.0k|  return true;
  323|  15.0k|}
_ZN10fast_float8stackvecILt62EE10try_resizeEmm:
  130|  14.7k|  FASTFLOAT_CONSTEXPR20 bool try_resize(size_t new_len, limb value) noexcept {
  131|  14.7k|    if (new_len > capacity()) {
  ------------------
  |  Branch (131:9): [True: 0, False: 14.7k]
  ------------------
  132|      0|      return false;
  133|  14.7k|    } else {
  134|  14.7k|      resize_unchecked(new_len, value);
  135|  14.7k|      return true;
  136|  14.7k|    }
  137|  14.7k|  }
_ZN10fast_float8stackvecILt62EE16resize_uncheckedEmm:
  118|  14.7k|  void resize_unchecked(size_t new_len, limb value) noexcept {
  119|  14.7k|    if (new_len > len()) {
  ------------------
  |  Branch (119:9): [True: 14.7k, False: 0]
  ------------------
  120|  14.7k|      size_t count = new_len - len();
  121|  14.7k|      limb* first = data + len();
  122|  14.7k|      limb* last = first + count;
  123|  14.7k|      ::std::fill(first, last, value);
  124|  14.7k|      set_len(new_len);
  125|  14.7k|    } else {
  126|      0|      set_len(new_len);
  127|      0|    }
  128|  14.7k|  }
_ZN10fast_float8stackvecILt62EE9normalizeEv:
  151|  76.2k|  FASTFLOAT_CONSTEXPR14 void normalize() noexcept {
  152|  76.2k|    while (len() > 0 && rindex(0) == 0) {
  ------------------
  |  Branch (152:12): [True: 76.2k, False: 0]
  |  Branch (152:25): [True: 0, False: 76.2k]
  ------------------
  153|      0|      length--;
  154|      0|    }
  155|  76.2k|  }
_ZNK10fast_float8stackvecILt62EE6rindexEm:
   66|  95.7k|  FASTFLOAT_CONSTEXPR14 const limb& rindex(size_t index) const noexcept {
   67|  95.7k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|  95.7k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   68|  95.7k|    size_t rindex = length - index - 1;
   69|  95.7k|    return data[rindex];
   70|  95.7k|  }
_ZN10fast_float6bigint4pow2Ej:
  572|  79.1k|  FASTFLOAT_CONSTEXPR20 bool pow2(uint32_t exp) noexcept {
  573|  79.1k|    return shl(exp);
  574|  79.1k|  }
_ZN10fast_float6bigint3shlEm:
  530|  79.1k|  FASTFLOAT_CONSTEXPR20 bool shl(size_t n) noexcept {
  531|  79.1k|    size_t rem = n % limb_bits;
  532|  79.1k|    size_t div = n / limb_bits;
  533|  79.1k|    if (rem != 0) {
  ------------------
  |  Branch (533:9): [True: 72.5k, False: 6.51k]
  ------------------
  534|  72.5k|      FASTFLOAT_TRY(shl_bits(rem));
  ------------------
  |  |  178|  72.5k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 72.5k]
  |  |  ------------------
  ------------------
  535|  72.5k|    }
  536|  79.1k|    if (div != 0) {
  ------------------
  |  Branch (536:9): [True: 9.34k, False: 69.7k]
  ------------------
  537|  9.34k|      FASTFLOAT_TRY(shl_limbs(div));
  ------------------
  |  |  178|  9.34k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 9.34k]
  |  |  ------------------
  ------------------
  538|  9.34k|    }
  539|  79.1k|    return true;
  540|  79.1k|  }
_ZN10fast_float6bigint8shl_bitsEm:
  483|  72.5k|  FASTFLOAT_CONSTEXPR20 bool shl_bits(size_t n) noexcept {
  484|       |    // Internally, for each item, we shift left by n, and add the previous
  485|       |    // right shifted limb-bits.
  486|       |    // For example, we transform (for u8) shifted left 2, to:
  487|       |    //      b10100100 b01000010
  488|       |    //      b10 b10010001 b00001000
  489|  72.5k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  174|  72.5k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  490|  72.5k|    FASTFLOAT_DEBUG_ASSERT(n < sizeof(limb) * 8);
  ------------------
  |  |  174|  72.5k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  491|       |
  492|  72.5k|    size_t shl = n;
  493|  72.5k|    size_t shr = limb_bits - shl;
  494|  72.5k|    limb prev = 0;
  495|   235k|    for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (495:28): [True: 162k, False: 72.5k]
  ------------------
  496|   162k|      limb xi = vec[index];
  497|   162k|      vec[index] = (xi << shl) | (prev >> shr);
  498|   162k|      prev = xi;
  499|   162k|    }
  500|       |
  501|  72.5k|    limb carry = prev >> shr;
  502|  72.5k|    if (carry != 0) {
  ------------------
  |  Branch (502:9): [True: 18.1k, False: 54.4k]
  ------------------
  503|  18.1k|      return vec.try_push(carry);
  504|  18.1k|    }
  505|  54.4k|    return true;
  506|  72.5k|  }
_ZN10fast_float6bigint9shl_limbsEm:
  509|  9.34k|  FASTFLOAT_CONSTEXPR20 bool shl_limbs(size_t n) noexcept {
  510|  9.34k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  174|  9.34k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  511|  9.34k|    if (n + vec.len() > vec.capacity()) {
  ------------------
  |  Branch (511:9): [True: 0, False: 9.34k]
  ------------------
  512|      0|      return false;
  513|  9.34k|    } else if (!vec.is_empty()) {
  ------------------
  |  Branch (513:16): [True: 9.34k, False: 0]
  ------------------
  514|       |      // move limbs
  515|  9.34k|      limb* dst = vec.data + n;
  516|  9.34k|      const limb* src = vec.data;
  517|  9.34k|      std::copy_backward(src, src + vec.len(), dst + vec.len());
  518|       |      // fill in empty limbs
  519|  9.34k|      limb* first = vec.data;
  520|  9.34k|      limb* last = first + n;
  521|  9.34k|      ::std::fill(first, last, 0);
  522|  9.34k|      vec.set_len(n + vec.len());
  523|  9.34k|      return true;
  524|  9.34k|    } else {
  525|      0|      return true;
  526|      0|    }
  527|  9.34k|  }
_ZNK10fast_float8stackvecILt62EE8is_emptyEv:
   79|  16.0k|  constexpr bool is_empty() const noexcept {
   80|  16.0k|    return length == 0;
   81|  16.0k|  }
_ZNK10fast_float6bigint4hi64ERb:
  430|  6.69k|  FASTFLOAT_CONSTEXPR20 uint64_t hi64(bool& truncated) const noexcept {
  431|  6.69k|#ifdef FASTFLOAT_64BIT_LIMB
  432|  6.69k|    if (vec.len() == 0) {
  ------------------
  |  Branch (432:9): [True: 0, False: 6.69k]
  ------------------
  433|      0|      return empty_hi64(truncated);
  434|  6.69k|    } else if (vec.len() == 1) {
  ------------------
  |  Branch (434:16): [True: 1.15k, False: 5.54k]
  ------------------
  435|  1.15k|      return uint64_hi64(vec.rindex(0), truncated);
  436|  5.54k|    } else {
  437|  5.54k|      uint64_t result = uint64_hi64(vec.rindex(0), vec.rindex(1), truncated);
  438|  5.54k|      truncated |= vec.nonzero(2);
  439|  5.54k|      return result;
  440|  5.54k|    }
  441|       |#else
  442|       |    if (vec.len() == 0) {
  443|       |      return empty_hi64(truncated);
  444|       |    } else if (vec.len() == 1) {
  445|       |      return uint32_hi64(vec.rindex(0), truncated);
  446|       |    } else if (vec.len() == 2) {
  447|       |      return uint32_hi64(vec.rindex(0), vec.rindex(1), truncated);
  448|       |    } else {
  449|       |      uint64_t result = uint32_hi64(vec.rindex(0), vec.rindex(1), vec.rindex(2), truncated);
  450|       |      truncated |= vec.nonzero(3);
  451|       |      return result;
  452|       |    }
  453|       |#endif
  454|  6.69k|  }
_ZN10fast_float11uint64_hi64EmRb:
  165|  1.15k|uint64_t uint64_hi64(uint64_t r0, bool& truncated) noexcept {
  166|  1.15k|  truncated = false;
  167|  1.15k|  int shl = leading_zeroes(r0);
  168|  1.15k|  return r0 << shl;
  169|  1.15k|}
_ZN10fast_float11uint64_hi64EmmRb:
  172|  5.54k|uint64_t uint64_hi64(uint64_t r0, uint64_t r1, bool& truncated) noexcept {
  173|  5.54k|  int shl = leading_zeroes(r0);
  174|  5.54k|  if (shl == 0) {
  ------------------
  |  Branch (174:7): [True: 36, False: 5.50k]
  ------------------
  175|     36|    truncated = r1 != 0;
  176|     36|    return r0;
  177|  5.50k|  } else {
  178|  5.50k|    int shr = 64 - shl;
  179|  5.50k|    truncated = (r1 << shl) != 0;
  180|  5.50k|    return (r0 << shl) | (r1 >> shr);
  181|  5.50k|  }
  182|  5.54k|}
_ZNK10fast_float8stackvecILt62EE7nonzeroEm:
  141|  5.54k|  FASTFLOAT_CONSTEXPR14 bool nonzero(size_t index) const noexcept {
  142|  5.58k|    while (index < len()) {
  ------------------
  |  Branch (142:12): [True: 518, False: 5.06k]
  ------------------
  143|    518|      if (rindex(index) != 0) {
  ------------------
  |  Branch (143:11): [True: 478, False: 40]
  ------------------
  144|    478|        return true;
  145|    478|      }
  146|     40|      index++;
  147|     40|    }
  148|  5.06k|    return false;
  149|  5.54k|  }
_ZNK10fast_float6bigint10bit_lengthEv:
  558|  6.69k|  FASTFLOAT_CONSTEXPR20 int bit_length() const noexcept {
  559|  6.69k|    int lz = ctlz();
  560|  6.69k|    return int(limb_bits * vec.len()) - lz;
  561|  6.69k|  }
_ZNK10fast_float6bigint4ctlzEv:
  543|  6.69k|  FASTFLOAT_CONSTEXPR20 int ctlz() const noexcept {
  544|  6.69k|    if (vec.is_empty()) {
  ------------------
  |  Branch (544:9): [True: 0, False: 6.69k]
  ------------------
  545|      0|      return 0;
  546|  6.69k|    } else {
  547|  6.69k|#ifdef FASTFLOAT_64BIT_LIMB
  548|  6.69k|      return leading_zeroes(vec.rindex(0));
  549|       |#else
  550|       |      // no use defining a specialized leading_zeroes for a 32-bit type.
  551|       |      uint64_t r0 = vec.rindex(0);
  552|       |      return leading_zeroes(r0 << 32);
  553|       |#endif
  554|  6.69k|    }
  555|  6.69k|  }
_ZN10fast_float6bigintC2Em:
  418|  72.5k|  FASTFLOAT_CONSTEXPR20 bigint(uint64_t value): vec() {
  419|  72.5k|#ifdef FASTFLOAT_64BIT_LIMB
  420|  72.5k|    vec.push_unchecked(value);
  421|       |#else
  422|       |    vec.push_unchecked(uint32_t(value));
  423|       |    vec.push_unchecked(uint32_t(value >> 32));
  424|       |#endif
  425|  72.5k|    vec.normalize();
  426|  72.5k|  }
_ZNK10fast_float6bigint7compareERKS0_:
  462|  72.5k|  FASTFLOAT_CONSTEXPR20 int compare(const bigint& other) const noexcept {
  463|  72.5k|    if (vec.len() > other.vec.len()) {
  ------------------
  |  Branch (463:9): [True: 0, False: 72.5k]
  ------------------
  464|      0|      return 1;
  465|  72.5k|    } else if (vec.len() < other.vec.len()) {
  ------------------
  |  Branch (465:16): [True: 0, False: 72.5k]
  ------------------
  466|      0|      return -1;
  467|  72.5k|    } else {
  468|   141k|      for (size_t index = vec.len(); index > 0; index--) {
  ------------------
  |  Branch (468:38): [True: 137k, False: 4.67k]
  ------------------
  469|   137k|        limb xi = vec[index - 1];
  470|   137k|        limb yi = other.vec[index - 1];
  471|   137k|        if (xi > yi) {
  ------------------
  |  Branch (471:13): [True: 15.4k, False: 121k]
  ------------------
  472|  15.4k|          return 1;
  473|   121k|        } else if (xi < yi) {
  ------------------
  |  Branch (473:20): [True: 52.3k, False: 69.4k]
  ------------------
  474|  52.3k|          return -1;
  475|  52.3k|        }
  476|   137k|      }
  477|  4.67k|      return 0;
  478|  72.5k|    }
  479|  72.5k|  }
_ZNK10fast_float8stackvecILt62EEixEm:
   61|   274k|  FASTFLOAT_CONSTEXPR14 const limb& operator[](size_t index) const noexcept {
   62|   274k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   274k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   63|   274k|    return data[index];
   64|   274k|  }

_ZN10fast_float13compute_floatINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   94|   340k|adjusted_mantissa compute_float(int64_t q, uint64_t w)  noexcept  {
   95|   340k|  adjusted_mantissa answer;
   96|   340k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (96:7): [True: 5.25k, False: 335k]
  |  Branch (96:19): [True: 1.79k, False: 333k]
  ------------------
   97|  7.05k|    answer.power2 = 0;
   98|  7.05k|    answer.mantissa = 0;
   99|       |    // result should be zero
  100|  7.05k|    return answer;
  101|  7.05k|  }
  102|   333k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (102:7): [True: 10.0k, False: 323k]
  ------------------
  103|       |    // we want to get infinity:
  104|  10.0k|    answer.power2 = binary::infinite_power();
  105|  10.0k|    answer.mantissa = 0;
  106|  10.0k|    return answer;
  107|  10.0k|  }
  108|       |  // At this point in time q is in [powers::smallest_power_of_five, powers::largest_power_of_five].
  109|       |
  110|       |  // We want the most significant bit of i to be 1. Shift if needed.
  111|   323k|  int lz = leading_zeroes(w);
  112|   323k|  w <<= lz;
  113|       |
  114|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  115|       |  // 1. We need the implicit bit
  116|       |  // 2. We need an extra bit for rounding purposes
  117|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small, requiring a shift)
  118|       |
  119|   323k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  120|       |  // The computed 'product' is always sufficient.
  121|       |  // Mathematical proof:
  122|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to appear)
  123|       |  // See script/mushtak_lemire.py
  124|       |
  125|       |  // The "compute_product_approximation" function can be slightly slower than a branchless approach:
  126|       |  // value128 product = compute_product(q, w);
  127|       |  // but in practice, we can win big with the compute_product_approximation if its additional branch
  128|       |  // is easily predicted. Which is best is data specific.
  129|   323k|  int upperbit = int(product.high >> 63);
  130|       |
  131|   323k|  answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  132|       |
  133|   323k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz - binary::minimum_exponent());
  134|   323k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (134:7): [True: 1.52k, False: 321k]
  ------------------
  135|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  136|  1.52k|    if(-answer.power2 + 1 >= 64) { // if we have more than 64 bits below the minimum exponent, you have a zero for sure.
  ------------------
  |  Branch (136:8): [True: 88, False: 1.43k]
  ------------------
  137|     88|      answer.power2 = 0;
  138|     88|      answer.mantissa = 0;
  139|       |      // result should be zero
  140|     88|      return answer;
  141|     88|    }
  142|       |    // next line is safe because -answer.power2 + 1 < 64
  143|  1.43k|    answer.mantissa >>= -answer.power2 + 1;
  144|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  145|       |    // "round-to-even" only occurs for powers close to 0.
  146|  1.43k|    answer.mantissa += (answer.mantissa & 1); // round up
  147|  1.43k|    answer.mantissa >>= 1;
  148|       |    // There is a weird scenario where we don't have a subnormal but just.
  149|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  150|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  151|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  152|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  153|       |    // subnormal, but we can only know this after rounding.
  154|       |    // So we only declare a subnormal if we are smaller than the threshold.
  155|  1.43k|    answer.power2 = (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (155:21): [True: 1.43k, False: 0]
  ------------------
  156|  1.43k|    return answer;
  157|  1.52k|  }
  158|       |
  159|       |  // usually, we round *up*, but if we fall right in between and and we have an
  160|       |  // even basis, we need to round down
  161|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  162|   321k|  if ((product.low <= 1) &&  (q >= binary::min_exponent_round_to_even()) && (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (162:7): [True: 120k, False: 201k]
  |  Branch (162:30): [True: 117k, False: 2.75k]
  |  Branch (162:77): [True: 109k, False: 8.52k]
  ------------------
  163|   321k|      ((answer.mantissa & 3) == 1) ) { // we may fall between two floats!
  ------------------
  |  Branch (163:7): [True: 11.9k, False: 97.2k]
  ------------------
  164|       |    // To be in-between two floats we need that in doing
  165|       |    //   answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  166|       |    // ... we dropped out only zeroes. But if this happened, then we can go back!!!
  167|  11.9k|    if((answer.mantissa  << (upperbit + 64 - binary::mantissa_explicit_bits() - 3)) ==  product.high) {
  ------------------
  |  Branch (167:8): [True: 4.98k, False: 6.96k]
  ------------------
  168|  4.98k|      answer.mantissa &= ~uint64_t(1);          // flip it so that we do not round up
  169|  4.98k|    }
  170|  11.9k|  }
  171|       |
  172|   321k|  answer.mantissa += (answer.mantissa & 1); // round up
  173|   321k|  answer.mantissa >>= 1;
  174|   321k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (174:7): [True: 26.5k, False: 295k]
  ------------------
  175|  26.5k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  176|  26.5k|    answer.power2++; // undo previous addition
  177|  26.5k|  }
  178|       |
  179|   321k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  180|   321k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (180:7): [True: 1.31k, False: 320k]
  ------------------
  181|  1.31k|    answer.power2 = binary::infinite_power();
  182|  1.31k|    answer.mantissa = 0;
  183|  1.31k|  }
  184|   321k|  return answer;
  185|   323k|}
_ZN10fast_float29compute_product_approximationILi26EEENS_8value128Elm:
   21|   359k|value128 compute_product_approximation(int64_t q, uint64_t w) {
   22|   359k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   23|       |  // For small values of q, e.g., q in [0,27], the answer is always exact because
   24|       |  // The line value128 firstproduct = full_multiplication(w, power_of_five_128[index]);
   25|       |  // gives the exact answer.
   26|   359k|  value128 firstproduct = full_multiplication(w, powers::power_of_five_128[index]);
   27|   359k|  static_assert((bit_precision >= 0) && (bit_precision <= 64), " precision should  be in (0,64]");
   28|   359k|  constexpr uint64_t precision_mask = (bit_precision < 64) ?
  ------------------
  |  Branch (28:39): [Folded - Ignored]
  ------------------
   29|      0|               (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
   30|   359k|               : uint64_t(0xFFFFFFFFFFFFFFFF);
   31|   359k|  if((firstproduct.high & precision_mask) == precision_mask) { // could further guard with  (lower + w < lower)
  ------------------
  |  Branch (31:6): [True: 67.2k, False: 291k]
  ------------------
   32|       |    // regarding the second product, we only need secondproduct.high, but our expectation is that the compiler will optimize this extra work away if needed.
   33|  67.2k|    value128 secondproduct = full_multiplication(w, powers::power_of_five_128[index + 1]);
   34|  67.2k|    firstproduct.low += secondproduct.high;
   35|  67.2k|    if(secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (35:8): [True: 49.0k, False: 18.2k]
  ------------------
   36|  49.0k|      firstproduct.high++;
   37|  49.0k|    }
   38|  67.2k|  }
   39|   359k|  return firstproduct;
   40|   359k|}
_ZN10fast_float6detail5powerEi:
   58|   700k|  constexpr fastfloat_really_inline int32_t power(int32_t q)  noexcept  {
   59|   700k|    return (((152170 + 65536) * q) >> 16) + 63;
   60|   700k|  }
_ZN10fast_float13compute_errorINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   80|  35.8k|adjusted_mantissa compute_error(int64_t q, uint64_t w)  noexcept  {
   81|  35.8k|  int lz = leading_zeroes(w);
   82|  35.8k|  w <<= lz;
   83|  35.8k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   84|  35.8k|  return compute_error_scaled<binary>(q, product.high, lz);
   85|  35.8k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIfEEEENS_17adjusted_mantissaElmi:
   67|  35.8k|adjusted_mantissa compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept  {
   68|  35.8k|  int hilz = int(w >> 63) ^ 1;
   69|  35.8k|  adjusted_mantissa answer;
   70|  35.8k|  answer.mantissa = w << hilz;
   71|  35.8k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   72|  35.8k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 + invalid_am_bias);
   73|  35.8k|  return answer;
   74|  35.8k|}
_ZN10fast_float13compute_floatINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   94|   308k|adjusted_mantissa compute_float(int64_t q, uint64_t w)  noexcept  {
   95|   308k|  adjusted_mantissa answer;
   96|   308k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (96:7): [True: 4.95k, False: 303k]
  |  Branch (96:19): [True: 529, False: 302k]
  ------------------
   97|  5.48k|    answer.power2 = 0;
   98|  5.48k|    answer.mantissa = 0;
   99|       |    // result should be zero
  100|  5.48k|    return answer;
  101|  5.48k|  }
  102|   302k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (102:7): [True: 5.13k, False: 297k]
  ------------------
  103|       |    // we want to get infinity:
  104|  5.13k|    answer.power2 = binary::infinite_power();
  105|  5.13k|    answer.mantissa = 0;
  106|  5.13k|    return answer;
  107|  5.13k|  }
  108|       |  // At this point in time q is in [powers::smallest_power_of_five, powers::largest_power_of_five].
  109|       |
  110|       |  // We want the most significant bit of i to be 1. Shift if needed.
  111|   297k|  int lz = leading_zeroes(w);
  112|   297k|  w <<= lz;
  113|       |
  114|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  115|       |  // 1. We need the implicit bit
  116|       |  // 2. We need an extra bit for rounding purposes
  117|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small, requiring a shift)
  118|       |
  119|   297k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  120|       |  // The computed 'product' is always sufficient.
  121|       |  // Mathematical proof:
  122|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to appear)
  123|       |  // See script/mushtak_lemire.py
  124|       |
  125|       |  // The "compute_product_approximation" function can be slightly slower than a branchless approach:
  126|       |  // value128 product = compute_product(q, w);
  127|       |  // but in practice, we can win big with the compute_product_approximation if its additional branch
  128|       |  // is easily predicted. Which is best is data specific.
  129|   297k|  int upperbit = int(product.high >> 63);
  130|       |
  131|   297k|  answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  132|       |
  133|   297k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz - binary::minimum_exponent());
  134|   297k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (134:7): [True: 6.23k, False: 291k]
  ------------------
  135|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  136|  6.23k|    if(-answer.power2 + 1 >= 64) { // if we have more than 64 bits below the minimum exponent, you have a zero for sure.
  ------------------
  |  Branch (136:8): [True: 104, False: 6.13k]
  ------------------
  137|    104|      answer.power2 = 0;
  138|    104|      answer.mantissa = 0;
  139|       |      // result should be zero
  140|    104|      return answer;
  141|    104|    }
  142|       |    // next line is safe because -answer.power2 + 1 < 64
  143|  6.13k|    answer.mantissa >>= -answer.power2 + 1;
  144|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  145|       |    // "round-to-even" only occurs for powers close to 0.
  146|  6.13k|    answer.mantissa += (answer.mantissa & 1); // round up
  147|  6.13k|    answer.mantissa >>= 1;
  148|       |    // There is a weird scenario where we don't have a subnormal but just.
  149|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  150|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  151|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  152|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  153|       |    // subnormal, but we can only know this after rounding.
  154|       |    // So we only declare a subnormal if we are smaller than the threshold.
  155|  6.13k|    answer.power2 = (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (155:21): [True: 6.13k, False: 0]
  ------------------
  156|  6.13k|    return answer;
  157|  6.23k|  }
  158|       |
  159|       |  // usually, we round *up*, but if we fall right in between and and we have an
  160|       |  // even basis, we need to round down
  161|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  162|   291k|  if ((product.low <= 1) &&  (q >= binary::min_exponent_round_to_even()) && (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (162:7): [True: 95.9k, False: 195k]
  |  Branch (162:30): [True: 55.6k, False: 40.3k]
  |  Branch (162:77): [True: 48.6k, False: 6.94k]
  ------------------
  163|   291k|      ((answer.mantissa & 3) == 1) ) { // we may fall between two floats!
  ------------------
  |  Branch (163:7): [True: 9.21k, False: 39.4k]
  ------------------
  164|       |    // To be in-between two floats we need that in doing
  165|       |    //   answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  166|       |    // ... we dropped out only zeroes. But if this happened, then we can go back!!!
  167|  9.21k|    if((answer.mantissa  << (upperbit + 64 - binary::mantissa_explicit_bits() - 3)) ==  product.high) {
  ------------------
  |  Branch (167:8): [True: 7.28k, False: 1.92k]
  ------------------
  168|  7.28k|      answer.mantissa &= ~uint64_t(1);          // flip it so that we do not round up
  169|  7.28k|    }
  170|  9.21k|  }
  171|       |
  172|   291k|  answer.mantissa += (answer.mantissa & 1); // round up
  173|   291k|  answer.mantissa >>= 1;
  174|   291k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (174:7): [True: 25.8k, False: 265k]
  ------------------
  175|  25.8k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  176|  25.8k|    answer.power2++; // undo previous addition
  177|  25.8k|  }
  178|       |
  179|   291k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  180|   291k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (180:7): [True: 352, False: 291k]
  ------------------
  181|    352|    answer.power2 = binary::infinite_power();
  182|    352|    answer.mantissa = 0;
  183|    352|  }
  184|   291k|  return answer;
  185|   297k|}
_ZN10fast_float29compute_product_approximationILi55EEENS_8value128Elm:
   21|   341k|value128 compute_product_approximation(int64_t q, uint64_t w) {
   22|   341k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   23|       |  // For small values of q, e.g., q in [0,27], the answer is always exact because
   24|       |  // The line value128 firstproduct = full_multiplication(w, power_of_five_128[index]);
   25|       |  // gives the exact answer.
   26|   341k|  value128 firstproduct = full_multiplication(w, powers::power_of_five_128[index]);
   27|   341k|  static_assert((bit_precision >= 0) && (bit_precision <= 64), " precision should  be in (0,64]");
   28|   341k|  constexpr uint64_t precision_mask = (bit_precision < 64) ?
  ------------------
  |  Branch (28:39): [Folded - Ignored]
  ------------------
   29|      0|               (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
   30|   341k|               : uint64_t(0xFFFFFFFFFFFFFFFF);
   31|   341k|  if((firstproduct.high & precision_mask) == precision_mask) { // could further guard with  (lower + w < lower)
  ------------------
  |  Branch (31:6): [True: 121k, False: 219k]
  ------------------
   32|       |    // regarding the second product, we only need secondproduct.high, but our expectation is that the compiler will optimize this extra work away if needed.
   33|   121k|    value128 secondproduct = full_multiplication(w, powers::power_of_five_128[index + 1]);
   34|   121k|    firstproduct.low += secondproduct.high;
   35|   121k|    if(secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (35:8): [True: 43.6k, False: 78.2k]
  ------------------
   36|  43.6k|      firstproduct.high++;
   37|  43.6k|    }
   38|   121k|  }
   39|   341k|  return firstproduct;
   40|   341k|}
_ZN10fast_float13compute_errorINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   80|  43.3k|adjusted_mantissa compute_error(int64_t q, uint64_t w)  noexcept  {
   81|  43.3k|  int lz = leading_zeroes(w);
   82|  43.3k|  w <<= lz;
   83|  43.3k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   84|  43.3k|  return compute_error_scaled<binary>(q, product.high, lz);
   85|  43.3k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIdEEEENS_17adjusted_mantissaElmi:
   67|  43.3k|adjusted_mantissa compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept  {
   68|  43.3k|  int hilz = int(w >> 63) ^ 1;
   69|  43.3k|  adjusted_mantissa answer;
   70|  43.3k|  answer.mantissa = w << hilz;
   71|  43.3k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   72|  43.3k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 + invalid_am_bias);
   73|  43.3k|  return answer;
   74|  43.3k|}

_ZN10fast_float10digit_compIfcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  35.8k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  35.8k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  35.8k|  int32_t sci_exp = scientific_exponent(num);
  411|  35.8k|  size_t max_digits = binary_format<T>::max_digits();
  412|  35.8k|  size_t digits = 0;
  413|  35.8k|  bigint bigmant;
  414|  35.8k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  35.8k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  35.8k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 558, False: 35.2k]
  ------------------
  418|    558|    return positive_digit_comp<T>(bigmant, exponent);
  419|  35.2k|  } else {
  420|  35.2k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  35.2k|  }
  422|  35.8k|}
_ZN10fast_float19scientific_exponentIcEEiRNS_22parsed_number_string_tIT_EE:
   28|  79.1k|int32_t scientific_exponent(parsed_number_string_t<UC> & num) noexcept {
   29|  79.1k|  uint64_t mantissa = num.mantissa;
   30|  79.1k|  int32_t exponent = int32_t(num.exponent);
   31|   395k|  while (mantissa >= 10000) {
  ------------------
  |  Branch (31:10): [True: 316k, False: 79.1k]
  ------------------
   32|   316k|    mantissa /= 10000;
   33|   316k|    exponent += 4;
   34|   316k|  }
   35|   158k|  while (mantissa >= 100) {
  ------------------
  |  Branch (35:10): [True: 79.1k, False: 79.1k]
  ------------------
   36|  79.1k|    mantissa /= 100;
   37|  79.1k|    exponent += 2;
   38|  79.1k|  }
   39|  79.1k|  while (mantissa >= 10) {
  ------------------
  |  Branch (39:10): [True: 0, False: 79.1k]
  ------------------
   40|      0|    mantissa /= 10;
   41|      0|    exponent += 1;
   42|      0|  }
   43|  79.1k|  return exponent;
   44|  79.1k|}
_ZN10fast_float14parse_mantissaIcEEvRNS_6bigintERNS_22parsed_number_string_tIT_EEmRm:
  240|  79.1k|void parse_mantissa(bigint& result, parsed_number_string_t<UC>& num, size_t max_digits, size_t& digits) noexcept {
  241|       |  // try to minimize the number of big integer and scalar multiplication.
  242|       |  // therefore, try to parse 8 digits at a time, and multiply by the largest
  243|       |  // scalar value (9 or 19 digits) for each step.
  244|  79.1k|  size_t counter = 0;
  245|  79.1k|  digits = 0;
  246|  79.1k|  limb value = 0;
  247|  79.1k|#ifdef FASTFLOAT_64BIT_LIMB
  248|  79.1k|  size_t step = 19;
  249|       |#else
  250|       |  size_t step = 9;
  251|       |#endif
  252|       |
  253|       |  // process all integer digits.
  254|  79.1k|  UC const * p = num.integer.ptr;
  255|  79.1k|  UC const * pend = p + num.integer.len();
  256|  79.1k|  skip_zeros(p, pend);
  257|       |  // process all digits, in increments of step per loop
  258|   174k|  while (p != pend) {
  ------------------
  |  Branch (258:10): [True: 95.4k, False: 78.8k]
  ------------------
  259|   160k|    while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (259:12): [True: 82.0k, False: 78.2k]
  |  Branch (259:45): [True: 65.1k, False: 16.8k]
  |  Branch (259:70): [True: 64.8k, False: 307]
  ------------------
  260|  64.8k|      parse_eight_digits(p, value, counter, digits);
  261|  64.8k|    }
  262|   302k|    while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (262:12): [True: 283k, False: 19.7k]
  |  Branch (262:30): [True: 207k, False: 75.3k]
  |  Branch (262:43): [True: 207k, False: 307]
  ------------------
  263|   207k|      parse_one_digit(p, value, counter, digits);
  264|   207k|    }
  265|  95.4k|    if (digits == max_digits) {
  ------------------
  |  Branch (265:9): [True: 307, False: 95.1k]
  ------------------
  266|       |      // add the temporary value, then check if we've truncated any digits
  267|    307|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  268|    307|      bool truncated = is_truncated(p, pend);
  269|    307|      if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (269:11): [True: 271, False: 36]
  ------------------
  270|    271|        truncated |= is_truncated(num.fraction);
  271|    271|      }
  272|    307|      if (truncated) {
  ------------------
  |  Branch (272:11): [True: 199, False: 108]
  ------------------
  273|    199|        round_up_bigint(result, digits);
  274|    199|      }
  275|    307|      return;
  276|  95.1k|    } else {
  277|  95.1k|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  278|  95.1k|      counter = 0;
  279|  95.1k|      value = 0;
  280|  95.1k|    }
  281|  95.4k|  }
  282|       |
  283|       |  // add our fraction digits, if they're available.
  284|  78.8k|  if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (284:7): [True: 72.6k, False: 6.13k]
  ------------------
  285|  72.6k|    p = num.fraction.ptr;
  286|  72.6k|    pend = p + num.fraction.len();
  287|  72.6k|    if (digits == 0) {
  ------------------
  |  Branch (287:9): [True: 3.47k, False: 69.2k]
  ------------------
  288|  3.47k|      skip_zeros(p, pend);
  289|  3.47k|    }
  290|       |    // process all digits, in increments of step per loop
  291|   231k|    while (p != pend) {
  ------------------
  |  Branch (291:12): [True: 163k, False: 67.8k]
  ------------------
  292|   393k|      while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (292:14): [True: 307k, False: 85.4k]
  |  Branch (292:47): [True: 231k, False: 75.9k]
  |  Branch (292:72): [True: 229k, False: 2.33k]
  ------------------
  293|   229k|        parse_eight_digits(p, value, counter, digits);
  294|   229k|      }
  295|   681k|      while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (295:14): [True: 588k, False: 93.6k]
  |  Branch (295:32): [True: 521k, False: 66.2k]
  |  Branch (295:45): [True: 517k, False: 3.85k]
  ------------------
  296|   517k|        parse_one_digit(p, value, counter, digits);
  297|   517k|      }
  298|   163k|      if (digits == max_digits) {
  ------------------
  |  Branch (298:11): [True: 4.84k, False: 158k]
  ------------------
  299|       |        // add the temporary value, then check if we've truncated any digits
  300|  4.84k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  301|  4.84k|        bool truncated = is_truncated(p, pend);
  302|  4.84k|        if (truncated) {
  ------------------
  |  Branch (302:13): [True: 3.63k, False: 1.21k]
  ------------------
  303|  3.63k|          round_up_bigint(result, digits);
  304|  3.63k|        }
  305|  4.84k|        return;
  306|   158k|      } else {
  307|   158k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  308|   158k|        counter = 0;
  309|   158k|        value = 0;
  310|   158k|      }
  311|   163k|    }
  312|  72.6k|  }
  313|       |
  314|  73.9k|  if (counter != 0) {
  ------------------
  |  Branch (314:7): [True: 0, False: 73.9k]
  ------------------
  315|      0|    add_native(result, limb(powers_of_ten_uint64[counter]), value);
  316|      0|  }
  317|  73.9k|}
_ZN10fast_float10skip_zerosIcEEvRPKT_S3_:
  159|  82.6k|void skip_zeros(UC const * & first, UC const * last) noexcept {
  160|  82.6k|  uint64_t val;
  161|   101k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (161:10): [Folded - Ignored]
  |  Branch (161:39): [True: 52.7k, False: 48.4k]
  ------------------
  162|  52.7k|    ::memcpy(&val, first, sizeof(uint64_t));
  163|  52.7k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (163:9): [True: 34.2k, False: 18.5k]
  ------------------
  164|  34.2k|      break;
  165|  34.2k|    }
  166|  18.5k|    first += int_cmp_len<UC>();
  167|  18.5k|  }
  168|   170k|  while (first != last) {
  ------------------
  |  Branch (168:10): [True: 167k, False: 3.47k]
  ------------------
  169|   167k|    if (*first != UC('0')) {
  ------------------
  |  Branch (169:9): [True: 79.1k, False: 88.1k]
  ------------------
  170|  79.1k|      break;
  171|  79.1k|    }
  172|  88.1k|    first++;
  173|  88.1k|  }
  174|  82.6k|}
_ZN10fast_float18parse_eight_digitsIcEEvRPKT_RmS5_S5_:
  207|   294k|void parse_eight_digits(const UC*& p, limb& value, size_t& counter, size_t& count) noexcept {
  208|   294k|  value = value * 100000000 + parse_eight_digits_unrolled(p);
  209|   294k|  p += 8;
  210|   294k|  counter += 8;
  211|   294k|  count += 8;
  212|   294k|}
_ZN10fast_float15parse_one_digitIcEEvRPKT_RmS5_S5_:
  216|   725k|void parse_one_digit(UC const *& p, limb& value, size_t& counter, size_t& count) noexcept {
  217|   725k|  value = value * 10 + limb(*p - UC('0'));
  218|   725k|  p++;
  219|   725k|  counter++;
  220|   725k|  count++;
  221|   725k|}
_ZN10fast_float10add_nativeERNS_6bigintEmm:
  224|   263k|void add_native(bigint& big, limb power, limb value) noexcept {
  225|   263k|  big.mul(power);
  226|   263k|  big.add(value);
  227|   263k|}
_ZN10fast_float12is_truncatedIcEEbPKT_S3_:
  180|  5.42k|bool is_truncated(UC const * first, UC const * last) noexcept {
  181|       |  // do 8-bit optimizations, can just compare to 8 literal 0s.
  182|  5.42k|  uint64_t val;
  183|  10.1k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (183:10): [Folded - Ignored]
  |  Branch (183:39): [True: 6.49k, False: 3.62k]
  ------------------
  184|  6.49k|    ::memcpy(&val, first, sizeof(uint64_t));
  185|  6.49k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (185:9): [True: 1.80k, False: 4.69k]
  ------------------
  186|  1.80k|      return true;
  187|  1.80k|    }
  188|  4.69k|    first += int_cmp_len<UC>();
  189|  4.69k|  }
  190|  5.27k|  while (first != last) {
  ------------------
  |  Branch (190:10): [True: 3.77k, False: 1.49k]
  ------------------
  191|  3.77k|    if (*first != UC('0')) {
  ------------------
  |  Branch (191:9): [True: 2.12k, False: 1.65k]
  ------------------
  192|  2.12k|      return true;
  193|  2.12k|    }
  194|  1.65k|    ++first;
  195|  1.65k|  }
  196|  1.49k|  return false;
  197|  3.62k|}
_ZN10fast_float12is_truncatedIcEEbNS_4spanIKT_EE:
  200|    271|bool is_truncated(span<const UC> s) noexcept {
  201|    271|  return is_truncated(s.ptr, s.ptr + s.len());
  202|    271|}
_ZN10fast_float15round_up_bigintERNS_6bigintERm:
  230|  3.82k|void round_up_bigint(bigint& big, size_t& count) noexcept {
  231|       |  // need to round-up the digits, but need to avoid rounding
  232|       |  // ....9999 to ...10000, which could cause a false halfway point.
  233|  3.82k|  add_native(big, 10, 1);
  234|  3.82k|  count++;
  235|  3.82k|}
_ZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEi:
  321|    558|adjusted_mantissa positive_digit_comp(bigint& bigmant, int32_t exponent) noexcept {
  322|    558|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  170|    558|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  323|    558|  adjusted_mantissa answer;
  324|    558|  bool truncated;
  325|    558|  answer.mantissa = bigmant.hi64(truncated);
  326|    558|  int bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
  327|    558|  answer.power2 = bigmant.bit_length() - 64 + bias;
  328|       |
  329|    558|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|    558|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    558|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|    558|    });
  333|    558|  });
  334|       |
  335|    558|  return answer;
  336|    558|}
_ZN10fast_float5roundIfZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
   93|    558|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|    558|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|    558|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 558]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|    558|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|    558|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 558]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|    558|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|    558|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 558]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|    558|}
_ZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  329|    558|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|    558|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    558|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|    558|    });
  333|    558|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  123|    558|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|    558|  const uint64_t mask
  125|    558|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 558]
  ------------------
  126|    558|    ? UINT64_MAX
  127|    558|    : (uint64_t(1) << shift) - 1;
  128|    558|  const uint64_t halfway
  129|    558|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 558]
  ------------------
  130|    558|    ? 0
  131|    558|    : uint64_t(1) << (shift - 1);
  132|    558|  uint64_t truncated_bits = am.mantissa & mask;
  133|    558|  bool is_above = truncated_bits > halfway;
  134|    558|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|    558|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 558]
  ------------------
  138|      0|    am.mantissa = 0;
  139|    558|  } else {
  140|    558|    am.mantissa >>= shift;
  141|    558|  }
  142|    558|  am.power2 += shift;
  143|       |
  144|    558|  bool is_odd = (am.mantissa & 1) == 1;
  145|    558|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|    558|}
_ZZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  330|    558|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    558|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  ------------------
  |  Branch (331:14): [True: 74, False: 484]
  |  Branch (331:27): [True: 352, False: 132]
  |  Branch (331:41): [True: 58, False: 294]
  |  Branch (331:56): [True: 60, False: 366]
  |  Branch (331:66): [True: 32, False: 28]
  ------------------
  332|    558|    });
_ZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_i:
  345|  35.2k|adjusted_mantissa negative_digit_comp(bigint& bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  346|  35.2k|  bigint& real_digits = bigmant;
  347|  35.2k|  int32_t real_exp = exponent;
  348|       |
  349|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  350|  35.2k|  adjusted_mantissa am_b = am;
  351|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with -Wnoexcept-type.
  352|  35.2k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
  353|  35.2k|  T b;
  354|  35.2k|  to_float(false, am_b, b);
  355|  35.2k|  adjusted_mantissa theor = to_extended_halfway(b);
  356|  35.2k|  bigint theor_digits(theor.mantissa);
  357|  35.2k|  int32_t theor_exp = theor.power2;
  358|       |
  359|       |  // scale real digits and theor digits to be same power.
  360|  35.2k|  int32_t pow2_exp = theor_exp - real_exp;
  361|  35.2k|  uint32_t pow5_exp = uint32_t(-real_exp);
  362|  35.2k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (362:7): [True: 35.2k, False: 0]
  ------------------
  363|  35.2k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  170|  35.2k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  364|  35.2k|  }
  365|  35.2k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (365:7): [True: 35.2k, False: 0]
  ------------------
  366|  35.2k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  170|  35.2k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  367|  35.2k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (367:14): [True: 0, False: 0]
  ------------------
  368|      0|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  170|      0|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  369|      0|  }
  370|       |
  371|       |  // compare digits, and use it to director rounding
  372|  35.2k|  int ord = real_digits.compare(theor_digits);
  373|  35.2k|  adjusted_mantissa answer = am;
  374|  35.2k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  35.2k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  35.2k|      (void)_;  // not needed, since we've done our comparison
  377|  35.2k|      (void)__; // not needed, since we've done our comparison
  378|  35.2k|      if (ord > 0) {
  379|  35.2k|        return true;
  380|  35.2k|      } else if (ord < 0) {
  381|  35.2k|        return false;
  382|  35.2k|      } else {
  383|  35.2k|        return is_odd;
  384|  35.2k|      }
  385|  35.2k|    });
  386|  35.2k|  });
  387|       |
  388|  35.2k|  return answer;
  389|  35.2k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
   93|  35.2k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  35.2k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  35.2k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 35.2k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  35.2k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  35.2k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 35.2k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  35.2k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  35.2k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 35.2k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  35.2k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  352|  35.2k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float10round_downERNS_17adjusted_mantissaEi:
  149|  72.5k|void round_down(adjusted_mantissa& am, int32_t shift) noexcept {
  150|  72.5k|  if (shift == 64) {
  ------------------
  |  Branch (150:7): [True: 0, False: 72.5k]
  ------------------
  151|      0|    am.mantissa = 0;
  152|  72.5k|  } else {
  153|  72.5k|    am.mantissa >>= shift;
  154|  72.5k|  }
  155|  72.5k|  am.power2 += shift;
  156|  72.5k|}
_ZN10fast_float19to_extended_halfwayIfEENS_17adjusted_mantissaET_:
   82|  35.2k|adjusted_mantissa to_extended_halfway(T value) noexcept {
   83|  35.2k|  adjusted_mantissa am = to_extended(value);
   84|  35.2k|  am.mantissa <<= 1;
   85|  35.2k|  am.mantissa += 1;
   86|  35.2k|  am.power2 -= 1;
   87|  35.2k|  return am;
   88|  35.2k|}
_ZN10fast_float11to_extendedIfEENS_17adjusted_mantissaET_:
   49|  35.2k|adjusted_mantissa to_extended(T value) noexcept {
   50|  35.2k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   51|  35.2k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   52|  35.2k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   53|  35.2k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   54|       |
   55|  35.2k|  adjusted_mantissa am;
   56|  35.2k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
   57|  35.2k|  equiv_uint bits;
   58|       |#if FASTFLOAT_HAS_BIT_CAST
   59|       |  bits = std::bit_cast<equiv_uint>(value);
   60|       |#else
   61|  35.2k|  ::memcpy(&bits, &value, sizeof(T));
   62|  35.2k|#endif
   63|  35.2k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (63:7): [True: 0, False: 35.2k]
  ------------------
   64|       |    // denormal
   65|      0|    am.power2 = 1 - bias;
   66|      0|    am.mantissa = bits & mantissa_mask;
   67|  35.2k|  } else {
   68|       |    // normal
   69|  35.2k|    am.power2 = int32_t((bits & exponent_mask) >> binary_format<T>::mantissa_explicit_bits());
   70|  35.2k|    am.power2 -= bias;
   71|  35.2k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   72|  35.2k|  }
   73|       |
   74|  35.2k|  return am;
   75|  35.2k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
   93|  35.2k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  35.2k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  35.2k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 35.2k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  35.2k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  35.2k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 35.2k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  35.2k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  35.2k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 35.2k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  35.2k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  374|  35.2k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  35.2k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  35.2k|      (void)_;  // not needed, since we've done our comparison
  377|  35.2k|      (void)__; // not needed, since we've done our comparison
  378|  35.2k|      if (ord > 0) {
  379|  35.2k|        return true;
  380|  35.2k|      } else if (ord < 0) {
  381|  35.2k|        return false;
  382|  35.2k|      } else {
  383|  35.2k|        return is_odd;
  384|  35.2k|      }
  385|  35.2k|    });
  386|  35.2k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  123|  35.2k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  35.2k|  const uint64_t mask
  125|  35.2k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 35.2k]
  ------------------
  126|  35.2k|    ? UINT64_MAX
  127|  35.2k|    : (uint64_t(1) << shift) - 1;
  128|  35.2k|  const uint64_t halfway
  129|  35.2k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 35.2k]
  ------------------
  130|  35.2k|    ? 0
  131|  35.2k|    : uint64_t(1) << (shift - 1);
  132|  35.2k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  35.2k|  bool is_above = truncated_bits > halfway;
  134|  35.2k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  35.2k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 35.2k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  35.2k|  } else {
  140|  35.2k|    am.mantissa >>= shift;
  141|  35.2k|  }
  142|  35.2k|  am.power2 += shift;
  143|       |
  144|  35.2k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  35.2k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  35.2k|}
_ZZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  375|  35.2k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  35.2k|      (void)_;  // not needed, since we've done our comparison
  377|  35.2k|      (void)__; // not needed, since we've done our comparison
  378|  35.2k|      if (ord > 0) {
  ------------------
  |  Branch (378:11): [True: 210, False: 35.0k]
  ------------------
  379|    210|        return true;
  380|  35.0k|      } else if (ord < 0) {
  ------------------
  |  Branch (380:18): [True: 30.9k, False: 4.15k]
  ------------------
  381|  30.9k|        return false;
  382|  30.9k|      } else {
  383|  4.15k|        return is_odd;
  384|  4.15k|      }
  385|  35.2k|    });
_ZN10fast_float19scientific_exponentIDiEEiRNS_22parsed_number_string_tIT_EE:
   28|     72|int32_t scientific_exponent(parsed_number_string_t<UC> & num) noexcept {
   29|     72|  uint64_t mantissa = num.mantissa;
   30|     72|  int32_t exponent = int32_t(num.exponent);
   31|    360|  while (mantissa >= 10000) {
  ------------------
  |  Branch (31:10): [True: 288, False: 72]
  ------------------
   32|    288|    mantissa /= 10000;
   33|    288|    exponent += 4;
   34|    288|  }
   35|    144|  while (mantissa >= 100) {
  ------------------
  |  Branch (35:10): [True: 72, False: 72]
  ------------------
   36|     72|    mantissa /= 100;
   37|     72|    exponent += 2;
   38|     72|  }
   39|     72|  while (mantissa >= 10) {
  ------------------
  |  Branch (39:10): [True: 0, False: 72]
  ------------------
   40|      0|    mantissa /= 10;
   41|      0|    exponent += 1;
   42|      0|  }
   43|     72|  return exponent;
   44|     72|}
_ZN10fast_float14parse_mantissaIDiEEvRNS_6bigintERNS_22parsed_number_string_tIT_EEmRm:
  240|     72|void parse_mantissa(bigint& result, parsed_number_string_t<UC>& num, size_t max_digits, size_t& digits) noexcept {
  241|       |  // try to minimize the number of big integer and scalar multiplication.
  242|       |  // therefore, try to parse 8 digits at a time, and multiply by the largest
  243|       |  // scalar value (9 or 19 digits) for each step.
  244|     72|  size_t counter = 0;
  245|     72|  digits = 0;
  246|     72|  limb value = 0;
  247|     72|#ifdef FASTFLOAT_64BIT_LIMB
  248|     72|  size_t step = 19;
  249|       |#else
  250|       |  size_t step = 9;
  251|       |#endif
  252|       |
  253|       |  // process all integer digits.
  254|     72|  UC const * p = num.integer.ptr;
  255|     72|  UC const * pend = p + num.integer.len();
  256|     72|  skip_zeros(p, pend);
  257|       |  // process all digits, in increments of step per loop
  258|    144|  while (p != pend) {
  ------------------
  |  Branch (258:10): [True: 72, False: 72]
  ------------------
  259|     72|    while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (259:12): [True: 0, False: 72]
  |  Branch (259:45): [True: 0, False: 0]
  |  Branch (259:70): [True: 0, False: 0]
  ------------------
  260|      0|      parse_eight_digits(p, value, counter, digits);
  261|      0|    }
  262|    576|    while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (262:12): [True: 576, False: 0]
  |  Branch (262:30): [True: 504, False: 72]
  |  Branch (262:43): [True: 504, False: 0]
  ------------------
  263|    504|      parse_one_digit(p, value, counter, digits);
  264|    504|    }
  265|     72|    if (digits == max_digits) {
  ------------------
  |  Branch (265:9): [True: 0, False: 72]
  ------------------
  266|       |      // add the temporary value, then check if we've truncated any digits
  267|      0|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  268|      0|      bool truncated = is_truncated(p, pend);
  269|      0|      if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (269:11): [True: 0, False: 0]
  ------------------
  270|      0|        truncated |= is_truncated(num.fraction);
  271|      0|      }
  272|      0|      if (truncated) {
  ------------------
  |  Branch (272:11): [True: 0, False: 0]
  ------------------
  273|      0|        round_up_bigint(result, digits);
  274|      0|      }
  275|      0|      return;
  276|     72|    } else {
  277|     72|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  278|     72|      counter = 0;
  279|     72|      value = 0;
  280|     72|    }
  281|     72|  }
  282|       |
  283|       |  // add our fraction digits, if they're available.
  284|     72|  if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (284:7): [True: 72, False: 0]
  ------------------
  285|     72|    p = num.fraction.ptr;
  286|     72|    pend = p + num.fraction.len();
  287|     72|    if (digits == 0) {
  ------------------
  |  Branch (287:9): [True: 0, False: 72]
  ------------------
  288|      0|      skip_zeros(p, pend);
  289|      0|    }
  290|       |    // process all digits, in increments of step per loop
  291|    162|    while (p != pend) {
  ------------------
  |  Branch (291:12): [True: 90, False: 72]
  ------------------
  292|    198|      while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (292:14): [True: 108, False: 90]
  |  Branch (292:47): [True: 108, False: 0]
  |  Branch (292:72): [True: 108, False: 0]
  ------------------
  293|    108|        parse_eight_digits(p, value, counter, digits);
  294|    108|      }
  295|    432|      while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (295:14): [True: 414, False: 18]
  |  Branch (295:32): [True: 342, False: 72]
  |  Branch (295:45): [True: 342, False: 0]
  ------------------
  296|    342|        parse_one_digit(p, value, counter, digits);
  297|    342|      }
  298|     90|      if (digits == max_digits) {
  ------------------
  |  Branch (298:11): [True: 0, False: 90]
  ------------------
  299|       |        // add the temporary value, then check if we've truncated any digits
  300|      0|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  301|      0|        bool truncated = is_truncated(p, pend);
  302|      0|        if (truncated) {
  ------------------
  |  Branch (302:13): [True: 0, False: 0]
  ------------------
  303|      0|          round_up_bigint(result, digits);
  304|      0|        }
  305|      0|        return;
  306|     90|      } else {
  307|     90|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  308|     90|        counter = 0;
  309|     90|        value = 0;
  310|     90|      }
  311|     90|    }
  312|     72|  }
  313|       |
  314|     72|  if (counter != 0) {
  ------------------
  |  Branch (314:7): [True: 0, False: 72]
  ------------------
  315|      0|    add_native(result, limb(powers_of_ten_uint64[counter]), value);
  316|      0|  }
  317|     72|}
_ZN10fast_float10skip_zerosIDiEEvRPKT_S3_:
  159|     72|void skip_zeros(UC const * & first, UC const * last) noexcept {
  160|     72|  uint64_t val;
  161|     72|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (161:10): [Folded - Ignored]
  |  Branch (161:39): [True: 72, False: 0]
  ------------------
  162|     72|    ::memcpy(&val, first, sizeof(uint64_t));
  163|     72|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (163:9): [True: 72, False: 0]
  ------------------
  164|     72|      break;
  165|     72|    }
  166|      0|    first += int_cmp_len<UC>();
  167|      0|  }
  168|     72|  while (first != last) {
  ------------------
  |  Branch (168:10): [True: 72, False: 0]
  ------------------
  169|     72|    if (*first != UC('0')) {
  ------------------
  |  Branch (169:9): [True: 72, False: 0]
  ------------------
  170|     72|      break;
  171|     72|    }
  172|      0|    first++;
  173|      0|  }
  174|     72|}
_ZN10fast_float18parse_eight_digitsIDiEEvRPKT_RmS5_S5_:
  207|    108|void parse_eight_digits(const UC*& p, limb& value, size_t& counter, size_t& count) noexcept {
  208|    108|  value = value * 100000000 + parse_eight_digits_unrolled(p);
  209|    108|  p += 8;
  210|    108|  counter += 8;
  211|    108|  count += 8;
  212|    108|}
_ZN10fast_float15parse_one_digitIDiEEvRPKT_RmS5_S5_:
  216|    846|void parse_one_digit(UC const *& p, limb& value, size_t& counter, size_t& count) noexcept {
  217|    846|  value = value * 10 + limb(*p - UC('0'));
  218|    846|  p++;
  219|    846|  counter++;
  220|    846|  count++;
  221|    846|}
_ZN10fast_float10digit_compIdcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  43.3k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  43.3k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  43.3k|  int32_t sci_exp = scientific_exponent(num);
  411|  43.3k|  size_t max_digits = binary_format<T>::max_digits();
  412|  43.3k|  size_t digits = 0;
  413|  43.3k|  bigint bigmant;
  414|  43.3k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  43.3k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  43.3k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 6.13k, False: 37.1k]
  ------------------
  418|  6.13k|    return positive_digit_comp<T>(bigmant, exponent);
  419|  37.1k|  } else {
  420|  37.1k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  37.1k|  }
  422|  43.3k|}
_ZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEi:
  321|  6.13k|adjusted_mantissa positive_digit_comp(bigint& bigmant, int32_t exponent) noexcept {
  322|  6.13k|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  170|  6.13k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  323|  6.13k|  adjusted_mantissa answer;
  324|  6.13k|  bool truncated;
  325|  6.13k|  answer.mantissa = bigmant.hi64(truncated);
  326|  6.13k|  int bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
  327|  6.13k|  answer.power2 = bigmant.bit_length() - 64 + bias;
  328|       |
  329|  6.13k|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|  6.13k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  6.13k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|  6.13k|    });
  333|  6.13k|  });
  334|       |
  335|  6.13k|  return answer;
  336|  6.13k|}
_ZN10fast_float5roundIdZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
   93|  6.13k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  6.13k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  6.13k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 6.13k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  6.13k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  6.13k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 590, False: 5.54k]
  ------------------
  109|    590|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|    590|    am.power2++;
  111|    590|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  6.13k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  6.13k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 6.13k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  6.13k|}
_ZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  329|  6.13k|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|  6.13k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  6.13k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|  6.13k|    });
  333|  6.13k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  123|  6.13k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  6.13k|  const uint64_t mask
  125|  6.13k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 6.13k]
  ------------------
  126|  6.13k|    ? UINT64_MAX
  127|  6.13k|    : (uint64_t(1) << shift) - 1;
  128|  6.13k|  const uint64_t halfway
  129|  6.13k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 6.13k]
  ------------------
  130|  6.13k|    ? 0
  131|  6.13k|    : uint64_t(1) << (shift - 1);
  132|  6.13k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  6.13k|  bool is_above = truncated_bits > halfway;
  134|  6.13k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  6.13k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 6.13k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  6.13k|  } else {
  140|  6.13k|    am.mantissa >>= shift;
  141|  6.13k|  }
  142|  6.13k|  am.power2 += shift;
  143|       |
  144|  6.13k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  6.13k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  6.13k|}
_ZZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  330|  6.13k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  6.13k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  ------------------
  |  Branch (331:14): [True: 698, False: 5.43k]
  |  Branch (331:27): [True: 4.62k, False: 810]
  |  Branch (331:41): [True: 1.01k, False: 3.61k]
  |  Branch (331:56): [True: 469, False: 3.95k]
  |  Branch (331:66): [True: 60, False: 409]
  ------------------
  332|  6.13k|    });
_ZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_i:
  345|  37.2k|adjusted_mantissa negative_digit_comp(bigint& bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  346|  37.2k|  bigint& real_digits = bigmant;
  347|  37.2k|  int32_t real_exp = exponent;
  348|       |
  349|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  350|  37.2k|  adjusted_mantissa am_b = am;
  351|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with -Wnoexcept-type.
  352|  37.2k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
  353|  37.2k|  T b;
  354|  37.2k|  to_float(false, am_b, b);
  355|  37.2k|  adjusted_mantissa theor = to_extended_halfway(b);
  356|  37.2k|  bigint theor_digits(theor.mantissa);
  357|  37.2k|  int32_t theor_exp = theor.power2;
  358|       |
  359|       |  // scale real digits and theor digits to be same power.
  360|  37.2k|  int32_t pow2_exp = theor_exp - real_exp;
  361|  37.2k|  uint32_t pow5_exp = uint32_t(-real_exp);
  362|  37.2k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (362:7): [True: 37.2k, False: 0]
  ------------------
  363|  37.2k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  170|  37.2k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  364|  37.2k|  }
  365|  37.2k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (365:7): [True: 2.97k, False: 34.2k]
  ------------------
  366|  2.97k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  170|  2.97k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  367|  34.2k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (367:14): [True: 34.1k, False: 102]
  ------------------
  368|  34.1k|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  170|  34.1k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  369|  34.1k|  }
  370|       |
  371|       |  // compare digits, and use it to director rounding
  372|  37.2k|  int ord = real_digits.compare(theor_digits);
  373|  37.2k|  adjusted_mantissa answer = am;
  374|  37.2k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  37.2k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  37.2k|      (void)_;  // not needed, since we've done our comparison
  377|  37.2k|      (void)__; // not needed, since we've done our comparison
  378|  37.2k|      if (ord > 0) {
  379|  37.2k|        return true;
  380|  37.2k|      } else if (ord < 0) {
  381|  37.2k|        return false;
  382|  37.2k|      } else {
  383|  37.2k|        return is_odd;
  384|  37.2k|      }
  385|  37.2k|    });
  386|  37.2k|  });
  387|       |
  388|  37.2k|  return answer;
  389|  37.2k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
   93|  37.2k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  37.2k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  37.2k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 118, False: 37.1k]
  ------------------
   96|       |    // have a denormal float
   97|    118|    int32_t shift = -am.power2 + 1;
   98|    118|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|    118|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 118, False: 0]
  ------------------
  101|    118|    return;
  102|    118|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  37.1k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  37.1k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 37.1k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  37.1k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  37.1k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 37.1k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  37.1k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  352|  37.2k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float19to_extended_halfwayIdEENS_17adjusted_mantissaET_:
   82|  37.2k|adjusted_mantissa to_extended_halfway(T value) noexcept {
   83|  37.2k|  adjusted_mantissa am = to_extended(value);
   84|  37.2k|  am.mantissa <<= 1;
   85|  37.2k|  am.mantissa += 1;
   86|  37.2k|  am.power2 -= 1;
   87|  37.2k|  return am;
   88|  37.2k|}
_ZN10fast_float11to_extendedIdEENS_17adjusted_mantissaET_:
   49|  37.2k|adjusted_mantissa to_extended(T value) noexcept {
   50|  37.2k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   51|  37.2k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   52|  37.2k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   53|  37.2k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   54|       |
   55|  37.2k|  adjusted_mantissa am;
   56|  37.2k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
   57|  37.2k|  equiv_uint bits;
   58|       |#if FASTFLOAT_HAS_BIT_CAST
   59|       |  bits = std::bit_cast<equiv_uint>(value);
   60|       |#else
   61|  37.2k|  ::memcpy(&bits, &value, sizeof(T));
   62|  37.2k|#endif
   63|  37.2k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (63:7): [True: 118, False: 37.1k]
  ------------------
   64|       |    // denormal
   65|    118|    am.power2 = 1 - bias;
   66|    118|    am.mantissa = bits & mantissa_mask;
   67|  37.1k|  } else {
   68|       |    // normal
   69|  37.1k|    am.power2 = int32_t((bits & exponent_mask) >> binary_format<T>::mantissa_explicit_bits());
   70|  37.1k|    am.power2 -= bias;
   71|  37.1k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   72|  37.1k|  }
   73|       |
   74|  37.2k|  return am;
   75|  37.2k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
   93|  37.2k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  37.2k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  37.2k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 118, False: 37.1k]
  ------------------
   96|       |    // have a denormal float
   97|    118|    int32_t shift = -am.power2 + 1;
   98|    118|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|    118|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 118, False: 0]
  ------------------
  101|    118|    return;
  102|    118|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  37.1k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  37.1k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 90, False: 37.0k]
  ------------------
  109|     90|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|     90|    am.power2++;
  111|     90|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  37.1k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  37.1k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 37.1k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  37.1k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  374|  37.2k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  37.2k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  37.2k|      (void)_;  // not needed, since we've done our comparison
  377|  37.2k|      (void)__; // not needed, since we've done our comparison
  378|  37.2k|      if (ord > 0) {
  379|  37.2k|        return true;
  380|  37.2k|      } else if (ord < 0) {
  381|  37.2k|        return false;
  382|  37.2k|      } else {
  383|  37.2k|        return is_odd;
  384|  37.2k|      }
  385|  37.2k|    });
  386|  37.2k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  123|  37.2k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  37.2k|  const uint64_t mask
  125|  37.2k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 37.2k]
  ------------------
  126|  37.2k|    ? UINT64_MAX
  127|  37.2k|    : (uint64_t(1) << shift) - 1;
  128|  37.2k|  const uint64_t halfway
  129|  37.2k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 37.2k]
  ------------------
  130|  37.2k|    ? 0
  131|  37.2k|    : uint64_t(1) << (shift - 1);
  132|  37.2k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  37.2k|  bool is_above = truncated_bits > halfway;
  134|  37.2k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  37.2k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 37.2k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  37.2k|  } else {
  140|  37.2k|    am.mantissa >>= shift;
  141|  37.2k|  }
  142|  37.2k|  am.power2 += shift;
  143|       |
  144|  37.2k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  37.2k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  37.2k|}
_ZZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  375|  37.2k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  37.2k|      (void)_;  // not needed, since we've done our comparison
  377|  37.2k|      (void)__; // not needed, since we've done our comparison
  378|  37.2k|      if (ord > 0) {
  ------------------
  |  Branch (378:11): [True: 15.2k, False: 21.9k]
  ------------------
  379|  15.2k|        return true;
  380|  21.9k|      } else if (ord < 0) {
  ------------------
  |  Branch (380:18): [True: 21.4k, False: 518]
  ------------------
  381|  21.4k|        return false;
  382|  21.4k|      } else {
  383|    518|        return is_odd;
  384|    518|      }
  385|  37.2k|    });
_ZN10fast_float10digit_compIdDiEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|     72|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|     72|  am.power2 -= invalid_am_bias;
  409|       |
  410|     72|  int32_t sci_exp = scientific_exponent(num);
  411|     72|  size_t max_digits = binary_format<T>::max_digits();
  412|     72|  size_t digits = 0;
  413|     72|  bigint bigmant;
  414|     72|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|     72|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|     72|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 0, False: 72]
  ------------------
  418|      0|    return positive_digit_comp<T>(bigmant, exponent);
  419|     72|  } else {
  420|     72|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|     72|  }
  422|     72|}

_ZN10fast_float4spanIKcEC2Ev:
  235|  2.92M|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKcEC2EPS1_m:
  234|  1.73M|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanIKcE3lenEv:
  237|   568k|  constexpr size_t len() const noexcept {
  238|   568k|    return length;
  239|   568k|  }
_ZN10fast_float13binary_formatIfE22min_exponent_fast_pathEv:
  464|   993k|template <> inline constexpr int binary_format<float>::min_exponent_fast_path() {
  465|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  466|       |  return 0;
  467|       |#else
  468|   993k|  return -10;
  469|   993k|#endif
  470|   993k|}
_ZN10fast_float13binary_formatIfE22max_exponent_fast_pathEv:
  515|   937k|template <> inline constexpr int binary_format<float>::max_exponent_fast_path() {
  516|   937k|  return 10;
  517|   937k|}
_ZN10fast_float13binary_formatIfE22max_mantissa_fast_pathEv:
  529|   822k|template <> inline constexpr uint64_t binary_format<float>::max_mantissa_fast_path() {
  530|   822k|  return uint64_t(2) << mantissa_explicit_bits();
  531|   822k|}
_ZN10fast_float13binary_formatIfE22mantissa_explicit_bitsEv:
  475|  2.40M|template <> inline constexpr int binary_format<float>::mantissa_explicit_bits() {
  476|  2.40M|  return 23;
  477|  2.40M|}
_ZN10fast_float13binary_formatIfE18exact_power_of_tenEl:
  546|   775k|inline constexpr float binary_format<float>::exact_power_of_ten(int64_t power) {
  547|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  548|   775k|  return (void)powers_of_ten[0], powers_of_ten[power];
  549|   775k|}
_ZN10fast_float17adjusted_mantissaC2Ev:
  347|   806k|  adjusted_mantissa() = default;
_ZN10fast_float13binary_formatIfE21smallest_power_of_tenEv:
  566|   335k|inline constexpr int binary_format<float>::smallest_power_of_ten() {
  567|   335k|  return -65;
  568|   335k|}
_ZN10fast_float13binary_formatIfE20largest_power_of_tenEv:
  557|   333k|inline constexpr int binary_format<float>::largest_power_of_ten() {
  558|   333k|  return 38;
  559|   333k|}
_ZN10fast_float14leading_zeroesEm:
  268|   713k|int leading_zeroes(uint64_t input_num) {
  269|   713k|  assert(input_num > 0);
  270|   713k|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (270:7): [Folded - Ignored]
  ------------------
  271|      0|    return leading_zeroes_generic(input_num);
  272|      0|  }
  273|       |#ifdef FASTFLOAT_VISUAL_STUDIO
  274|       |  #if defined(_M_X64) || defined(_M_ARM64)
  275|       |  unsigned long leading_zero = 0;
  276|       |  // Search the mask data from most significant bit (MSB)
  277|       |  // to least significant bit (LSB) for a set bit (1).
  278|       |  _BitScanReverse64(&leading_zero, input_num);
  279|       |  return (int)(63 - leading_zero);
  280|       |  #else
  281|       |  return leading_zeroes_generic(input_num);
  282|       |  #endif
  283|       |#else
  284|   713k|  return __builtin_clzll(input_num);
  285|   713k|#endif
  286|   713k|}
_ZN10fast_float19full_multiplicationEmm:
  320|   889k|value128 full_multiplication(uint64_t a, uint64_t b) {
  321|   889k|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (321:7): [Folded - Ignored]
  ------------------
  322|      0|    value128 answer;
  323|      0|    answer.low = umul128_generic(a, b, &answer.high);
  324|      0|    return answer;
  325|      0|  }
  326|   889k|  value128 answer;
  327|       |#if defined(_M_ARM64) && !defined(__MINGW32__)
  328|       |  // ARM64 has native support for 64-bit multiplications, no need to emulate
  329|       |  // But MinGW on ARM64 doesn't have native support for 64-bit multiplications
  330|       |  answer.high = __umulh(a, b);
  331|       |  answer.low = a * b;
  332|       |#elif defined(FASTFLOAT_32BIT) || (defined(_WIN64) && !defined(__clang__))
  333|       |  answer.low = _umul128(a, b, &answer.high); // _umul128 not available on ARM64
  334|       |#elif defined(FASTFLOAT_64BIT) && defined(__SIZEOF_INT128__)
  335|       |  __uint128_t r = ((__uint128_t)a) * b;
  336|   889k|  answer.low = uint64_t(r);
  337|   889k|  answer.high = uint64_t(r >> 64);
  338|       |#else
  339|       |  answer.low = umul128_generic(a, b, &answer.high);
  340|       |#endif
  341|   889k|  return answer;
  342|   889k|}
_ZN10fast_float8value128C2Ev:
  251|   889k|  constexpr value128() : low(0), high(0) {}
_ZN10fast_float13binary_formatIfE16minimum_exponentEv:
  498|   394k|template <> inline constexpr int binary_format<float>::minimum_exponent() {
  499|   394k|  return -127;
  500|   394k|}
_ZN10fast_float13binary_formatIfE26min_exponent_round_to_evenEv:
  491|   120k|template <> inline constexpr int binary_format<float>::min_exponent_round_to_even() {
  492|   120k|  return -17;
  493|   120k|}
_ZN10fast_float13binary_formatIfE26max_exponent_round_to_evenEv:
  483|   117k|template <> inline constexpr int binary_format<float>::max_exponent_round_to_even() {
  484|   117k|  return 10;
  485|   117k|}
_ZNK10fast_float17adjusted_mantissaneERKS0_:
  351|   248k|  constexpr bool operator!=(const adjusted_mantissa &o) const {
  352|   248k|    return mantissa != o.mantissa || power2 != o.power2;
  ------------------
  |  Branch (352:12): [True: 79.2k, False: 169k]
  |  Branch (352:38): [True: 0, False: 169k]
  ------------------
  353|   248k|  }
_ZN10fast_float13binary_formatIfE10max_digitsEv:
  573|  35.8k|template <> inline constexpr size_t binary_format<float>::max_digits() {
  574|  35.8k|  return 114;
  575|  35.8k|}
impl.cpp:_ZN10fast_floatL11int_cmp_lenIcEEiv:
  649|   134k|{
  650|   134k|    return sizeof(uint64_t) / sizeof(UC);
  651|   134k|}
impl.cpp:_ZN10fast_floatL13int_cmp_zerosIcEEmv:
  643|  59.2k|{
  644|  59.2k|    static_assert((sizeof(UC) == 1) || (sizeof(UC) == 2) || (sizeof(UC) == 4), "Unsupported character size");
  645|  59.2k|    return (sizeof(UC) == 1) ? 0x3030303030303030 : (sizeof(UC) == 2) ? (uint64_t(UC('0')) << 48 | uint64_t(UC('0')) << 32 | uint64_t(UC('0')) << 16 | UC('0')) : (uint64_t(UC('0')) << 32 | UC('0'));
  ------------------
  |  Branch (645:12): [Folded - Ignored]
  |  Branch (645:53): [Folded - Ignored]
  ------------------
  646|  59.2k|}
_ZN10fast_float4spanImEC2EPKmm:
  234|   101k|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanImE3lenEv:
  237|   237k|  constexpr size_t len() const noexcept {
  238|   237k|    return length;
  239|   237k|  }
_ZNK10fast_float4spanImEixEm:
  241|   128k|  FASTFLOAT_CONSTEXPR14 const T& operator[](size_t index) const noexcept {
  242|   128k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   128k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  243|   128k|    return ptr[index];
  244|   128k|  }
_ZN10fast_float8to_floatIfEEvbNS_17adjusted_mantissaERT_:
  606|   253k|void to_float(bool negative, adjusted_mantissa am, T &value) {
  607|   253k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  608|   253k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  609|   253k|  word |= fastfloat_uint(am.power2) << binary_format<T>::mantissa_explicit_bits();
  610|   253k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  611|       |#if FASTFLOAT_HAS_BIT_CAST
  612|       |  value = std::bit_cast<T>(word);
  613|       |#else
  614|   253k|  ::memcpy(&value, &word, sizeof(T));
  615|   253k|#endif
  616|   253k|}
_ZN10fast_float13binary_formatIfE10sign_indexEv:
  510|   253k|template <> inline constexpr int binary_format<float>::sign_index() { return 31; }
_ZN10fast_float13binary_formatIfE14infinite_powerEv:
  505|   619k|template <> inline constexpr int binary_format<float>::infinite_power() {
  506|   619k|  return 0xFF;
  507|   619k|}
_ZN10fast_float15parse_options_tIcEC2ENS_12chars_formatEc:
   46|  1.46M|    : format(fmt), decimal_point(dot) {}
_ZN10fast_float4spanIKDiEC2Ev:
  235|  1.23M|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKDiEC2EPS1_m:
  234|   619k|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanIKDiE3lenEv:
  237|  2.30k|  constexpr size_t len() const noexcept {
  238|  2.30k|    return length;
  239|  2.30k|  }
impl.cpp:_ZN10fast_floatL11int_cmp_lenIDiEEiv:
  649|     72|{
  650|     72|    return sizeof(uint64_t) / sizeof(UC);
  651|     72|}
impl.cpp:_ZN10fast_floatL13int_cmp_zerosIDiEEmv:
  643|     72|{
  644|     72|    static_assert((sizeof(UC) == 1) || (sizeof(UC) == 2) || (sizeof(UC) == 4), "Unsupported character size");
  645|     72|    return (sizeof(UC) == 1) ? 0x3030303030303030 : (sizeof(UC) == 2) ? (uint64_t(UC('0')) << 48 | uint64_t(UC('0')) << 32 | uint64_t(UC('0')) << 16 | UC('0')) : (uint64_t(UC('0')) << 32 | UC('0'));
  ------------------
  |  Branch (645:12): [Folded - Ignored]
  |  Branch (645:53): [Folded - Ignored]
  ------------------
  646|     72|}
_ZN10fast_float15parse_options_tIDiEC2ENS_12chars_formatEDi:
   46|   616k|    : format(fmt), decimal_point(dot) {}
_ZN10fast_float13binary_formatIdE22min_exponent_fast_pathEv:
  456|  1.08M|template <> inline constexpr int binary_format<double>::min_exponent_fast_path() {
  457|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  458|       |  return 0;
  459|       |#else
  460|  1.08M|  return -22;
  461|  1.08M|#endif
  462|  1.08M|}
_ZN10fast_float13binary_formatIdE22max_exponent_fast_pathEv:
  512|  1.07M|template <> inline constexpr int binary_format<double>::max_exponent_fast_path() {
  513|  1.07M|  return 22;
  514|  1.07M|}
_ZN10fast_float13binary_formatIdE22max_mantissa_fast_pathEv:
  519|   914k|template <> inline constexpr uint64_t binary_format<double>::max_mantissa_fast_path() {
  520|   914k|  return uint64_t(2) << mantissa_explicit_bits();
  521|   914k|}
_ZN10fast_float13binary_formatIdE22mantissa_explicit_bitsEv:
  472|  2.42M|template <> inline constexpr int binary_format<double>::mantissa_explicit_bits() {
  473|  2.42M|  return 52;
  474|  2.42M|}
_ZN10fast_float13binary_formatIdE18exact_power_of_tenEl:
  541|   903k|inline constexpr double binary_format<double>::exact_power_of_ten(int64_t power) {
  542|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  543|   903k|  return (void)powers_of_ten[0], powers_of_ten[power];
  544|   903k|}
_ZN10fast_float13binary_formatIdE21smallest_power_of_tenEv:
  562|   303k|inline constexpr int binary_format<double>::smallest_power_of_ten() {
  563|   303k|  return -342;
  564|   303k|}
_ZN10fast_float13binary_formatIdE20largest_power_of_tenEv:
  553|   302k|inline constexpr int binary_format<double>::largest_power_of_ten() {
  554|   302k|  return 308;
  555|   302k|}
_ZN10fast_float13binary_formatIdE16minimum_exponentEv:
  495|   384k|template <> inline constexpr int binary_format<double>::minimum_exponent() {
  496|   384k|  return -1023;
  497|   384k|}
_ZN10fast_float13binary_formatIdE26min_exponent_round_to_evenEv:
  487|  95.9k|template <> inline constexpr int binary_format<double>::min_exponent_round_to_even() {
  488|  95.9k|  return -4;
  489|  95.9k|}
_ZN10fast_float13binary_formatIdE26max_exponent_round_to_evenEv:
  479|  55.6k|template <> inline constexpr int binary_format<double>::max_exponent_round_to_even() {
  480|  55.6k|  return 23;
  481|  55.6k|}
_ZN10fast_float13binary_formatIdE10max_digitsEv:
  570|  43.3k|template <> inline constexpr size_t binary_format<double>::max_digits() {
  571|  43.3k|  return 769;
  572|  43.3k|}
_ZN10fast_float8to_floatIdEEvbNS_17adjusted_mantissaERT_:
  606|   219k|void to_float(bool negative, adjusted_mantissa am, T &value) {
  607|   219k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  608|   219k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  609|   219k|  word |= fastfloat_uint(am.power2) << binary_format<T>::mantissa_explicit_bits();
  610|   219k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  611|       |#if FASTFLOAT_HAS_BIT_CAST
  612|       |  value = std::bit_cast<T>(word);
  613|       |#else
  614|   219k|  ::memcpy(&value, &word, sizeof(T));
  615|   219k|#endif
  616|   219k|}
_ZN10fast_float13binary_formatIdE10sign_indexEv:
  509|   219k|template <> inline constexpr int binary_format<double>::sign_index() { return 63; }
_ZN10fast_float13binary_formatIdE14infinite_powerEv:
  502|   558k|template <> inline constexpr int binary_format<double>::infinite_power() {
  503|   558k|  return 0x7FF;
  504|   558k|}

_ZN10fast_float10from_charsIfciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   716k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   716k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   716k|}
_ZN10fast_float17from_chars_callerIfE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  141|   716k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   716k|    return from_chars_advanced(first, last, value, options);
  143|   716k|  }
_ZN10fast_float19from_chars_advancedIfcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   716k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   716k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   716k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   716k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   716k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 716k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   716k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   716k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 716k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   716k|  answer.ec = std::errc(); // be optimistic
  221|   716k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   716k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 662k, False: 53.8k]
  |  Branch (227:69): [True: 627k, False: 35.0k]
  |  Branch (227:131): [True: 552k, False: 74.4k]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   552k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 552k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   552k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 506k, False: 46.7k]
  ------------------
  239|   506k|        value = T(pns.mantissa);
  240|   506k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 12.2k, False: 493k]
  ------------------
  241|   493k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   506k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 506k]
  ------------------
  243|   506k|        return answer;
  244|   506k|      }
  245|   552k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   552k|  }
  262|   210k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|   210k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 121k, False: 88.7k]
  |  Branch (263:29): [True: 121k, False: 0]
  ------------------
  264|   121k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 35.8k, False: 85.4k]
  ------------------
  265|  35.8k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|  35.8k|    }
  267|   121k|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|   210k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 35.8k, False: 174k]
  ------------------
  271|   210k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|   210k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 205k, False: 4.56k]
  |  Branch (273:29): [True: 24.4k, False: 181k]
  |  Branch (273:49): [True: 1.17k, False: 23.2k]
  |  Branch (273:68): [True: 5.22k, False: 203k]
  ------------------
  274|  6.40k|    answer.ec = std::errc::result_out_of_range;
  275|  6.40k|  }
  276|   210k|  return answer;
  277|   716k|}
_ZN10fast_float6detail17rounds_to_nearestEv:
   74|  1.73M|fastfloat_really_inline bool rounds_to_nearest() noexcept {
   75|       |  // https://lemire.me/blog/2020/06/26/gcc-not-nearest/
   76|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
   77|       |  return false;
   78|       |#endif
   79|       |  // See
   80|       |  // A fast function to check your floating-point rounding mode
   81|       |  // https://lemire.me/blog/2022/11/16/a-fast-function-to-check-your-floating-point-rounding-mode/
   82|       |  //
   83|       |  // This function is meant to be equivalent to :
   84|       |  // prior: #include <cfenv>
   85|       |  //  return fegetround() == FE_TONEAREST;
   86|       |  // However, it is expected to be much faster than the fegetround()
   87|       |  // function call.
   88|       |  //
   89|       |  // The volatile keywoard prevents the compiler from computing the function
   90|       |  // at compile-time.
   91|       |  // There might be other ways to prevent compile-time optimizations (e.g., asm).
   92|       |  // The value does not need to be std::numeric_limits<float>::min(), any small
   93|       |  // value so that 1 + x should round to 1 would do (after accounting for excess
   94|       |  // precision, as in 387 instructions).
   95|  1.73M|  static volatile float fmin = std::numeric_limits<float>::min();
   96|  1.73M|  float fmini = fmin; // we copy it so that it gets loaded at most once.
   97|       |  //
   98|       |  // Explanation:
   99|       |  // Only when fegetround() == FE_TONEAREST do we have that
  100|       |  // fmin + 1.0f == 1.0f - fmin.
  101|       |  //
  102|       |  // FE_UPWARD:
  103|       |  //  fmin + 1.0f > 1
  104|       |  //  1.0f - fmin == 1
  105|       |  //
  106|       |  // FE_DOWNWARD or  FE_TOWARDZERO:
  107|       |  //  fmin + 1.0f == 1
  108|       |  //  1.0f - fmin < 1
  109|       |  //
  110|       |  // Note: This may fail to be accurate if fast-math has been
  111|       |  // enabled, as rounding conventions may not apply.
  112|       |  #ifdef FASTFLOAT_VISUAL_STUDIO
  113|       |  #   pragma warning(push)
  114|       |  //  todo: is there a VS warning?
  115|       |  //  see https://stackoverflow.com/questions/46079446/is-there-a-warning-for-floating-point-equality-checking-in-visual-studio-2013
  116|       |  #elif defined(__clang__)
  117|       |  #   pragma clang diagnostic push
  118|  1.73M|  #   pragma clang diagnostic ignored "-Wfloat-equal"
  119|       |  #elif defined(__GNUC__)
  120|       |  #   pragma GCC diagnostic push
  121|       |  #   pragma GCC diagnostic ignored "-Wfloat-equal"
  122|       |  #endif
  123|  1.73M|  return (fmini + 1.0f == 1.0f - fmini);
  124|       |  #ifdef FASTFLOAT_VISUAL_STUDIO
  125|       |  #   pragma warning(pop)
  126|       |  #elif defined(__clang__)
  127|       |  #   pragma clang diagnostic pop
  128|       |  #elif defined(__GNUC__)
  129|       |  #   pragma GCC diagnostic pop
  130|       |  #endif
  131|  1.73M|}
_ZN10fast_float10from_charsIfDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   277k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   277k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   277k|}
_ZN10fast_float17from_chars_callerIfE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  141|   277k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   277k|    return from_chars_advanced(first, last, value, options);
  143|   277k|  }
_ZN10fast_float19from_chars_advancedIfDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   277k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   277k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   277k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   277k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   277k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 277k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   277k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   277k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 277k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   277k|  answer.ec = std::errc(); // be optimistic
  221|   277k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   277k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 274k, False: 2.26k]
  |  Branch (227:69): [True: 269k, False: 4.85k]
  |  Branch (227:131): [True: 269k, False: 360]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   269k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 269k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   269k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 268k, False: 642]
  ------------------
  239|   268k|        value = T(pns.mantissa);
  240|   268k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 638, False: 268k]
  ------------------
  241|   268k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   268k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 268k]
  ------------------
  243|   268k|        return answer;
  244|   268k|      }
  245|   269k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   269k|  }
  262|  8.12k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|  8.12k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 738, False: 7.38k]
  |  Branch (263:29): [True: 738, False: 0]
  ------------------
  264|    738|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 0, False: 738]
  ------------------
  265|      0|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|      0|    }
  267|    738|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|  8.12k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 0, False: 8.12k]
  ------------------
  271|  8.12k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|  8.12k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 7.43k, False: 694]
  |  Branch (273:29): [True: 5.44k, False: 1.98k]
  |  Branch (273:49): [True: 1.50k, False: 3.94k]
  |  Branch (273:68): [True: 3.94k, False: 2.68k]
  ------------------
  274|  5.44k|    answer.ec = std::errc::result_out_of_range;
  275|  5.44k|  }
  276|  8.12k|  return answer;
  277|   277k|}
_ZN10fast_float10from_charsIdciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   746k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   746k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   746k|}
_ZN10fast_float17from_chars_callerIdE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  141|   746k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   746k|    return from_chars_advanced(first, last, value, options);
  143|   746k|  }
_ZN10fast_float19from_chars_advancedIdcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   746k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   746k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   746k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   746k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   746k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 746k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   746k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   746k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 746k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   746k|  answer.ec = std::errc(); // be optimistic
  221|   746k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   746k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 735k, False: 10.8k]
  |  Branch (227:69): [True: 702k, False: 33.3k]
  |  Branch (227:131): [True: 584k, False: 117k]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   584k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 584k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   584k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 574k, False: 10.2k]
  ------------------
  239|   574k|        value = T(pns.mantissa);
  240|   574k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 35.3k, False: 539k]
  ------------------
  241|   539k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   574k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 574k]
  ------------------
  243|   574k|        return answer;
  244|   574k|      }
  245|   584k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   584k|  }
  262|   171k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|   171k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 125k, False: 46.5k]
  |  Branch (263:29): [True: 125k, False: 0]
  ------------------
  264|   125k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 43.3k, False: 82.1k]
  ------------------
  265|  43.3k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|  43.3k|    }
  267|   125k|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|   171k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 43.3k, False: 128k]
  ------------------
  271|   171k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|   171k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 167k, False: 4.14k]
  |  Branch (273:29): [True: 16.3k, False: 151k]
  |  Branch (273:49): [True: 255, False: 16.1k]
  |  Branch (273:68): [True: 2.75k, False: 168k]
  ------------------
  274|  3.01k|    answer.ec = std::errc::result_out_of_range;
  275|  3.01k|  }
  276|   171k|  return answer;
  277|   746k|}
_ZN10fast_float10from_charsIdDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   339k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   339k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   339k|}
_ZN10fast_float17from_chars_callerIdE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  141|   339k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   339k|    return from_chars_advanced(first, last, value, options);
  143|   339k|  }
_ZN10fast_float19from_chars_advancedIdDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   339k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   339k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   339k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   339k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   339k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 339k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   339k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   339k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 339k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   339k|  answer.ec = std::errc(); // be optimistic
  221|   339k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   339k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 336k, False: 3.16k]
  |  Branch (227:69): [True: 330k, False: 5.95k]
  |  Branch (227:131): [True: 329k, False: 676]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   329k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 329k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   329k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 329k, False: 262]
  ------------------
  239|   329k|        value = T(pns.mantissa);
  240|   329k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 952, False: 328k]
  ------------------
  241|   328k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   329k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 329k]
  ------------------
  243|   329k|        return answer;
  244|   329k|      }
  245|   329k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   329k|  }
  262|  10.0k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|  10.0k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 766, False: 9.28k]
  |  Branch (263:29): [True: 766, False: 0]
  ------------------
  264|    766|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 72, False: 694]
  ------------------
  265|     72|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|     72|    }
  267|    766|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|  10.0k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 72, False: 9.98k]
  ------------------
  271|  10.0k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|  10.0k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 9.24k, False: 806]
  |  Branch (273:29): [True: 2.45k, False: 6.79k]
  |  Branch (273:49): [True: 324, False: 2.13k]
  |  Branch (273:68): [True: 2.13k, False: 7.60k]
  ------------------
  274|  2.45k|    answer.ec = std::errc::result_out_of_range;
  275|  2.45k|  }
  276|  10.0k|  return answer;
  277|   339k|}

_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIccEEDaSG_SQ_:
  859|  5.41M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIwcEEDaSG_SQ_:
  859|  2.57M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  859|  2.58M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3806|  5.03M|{
 3807|  5.03M|    if constexpr (sizeof(U) == 1) {
 3808|  5.03M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3809|       |    }
 3810|       |    else if constexpr (sizeof(U) == 2) {
 3811|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 3812|       |    }
 3813|       |    else {
 3814|       |        // utf-32
 3815|       |        static_assert(sizeof(U) == 4);
 3816|       |        SCN_UNUSED(ch);
 3817|       |        return 1;
 3818|       |    }
 3819|  5.03M|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3770|  5.03M|{
 3771|  5.03M|    static_assert(sizeof(U8) == 1);
 3772|       |
 3773|  5.03M|    SCN_GCC_COMPAT_PUSH
 3774|  5.03M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3775|  5.03M|    constexpr char lengths[] =
 3776|  5.03M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3777|  5.03M|        "\1\1\1\1\1\1\1\1"
 3778|  5.03M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3779|       |                            // byte
 3780|  5.03M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3781|  5.03M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3782|  5.03M|        "\4";               // highest bits 11110 -> 4-byte cp
 3783|  5.03M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3784|  5.03M|    SCN_GCC_COMPAT_POP
 3785|  5.03M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4012|  4.45M|{
 4013|  4.45M|    if constexpr (sizeof(CharT) == 1) {
 4014|  4.45M|        return decode_utf8_code_point_exhaustive(input);
 4015|       |    }
 4016|       |    else if constexpr (sizeof(CharT) == 2) {
 4017|       |        return decode_utf16_code_point_exhaustive(input);
 4018|       |    }
 4019|       |    else {
 4020|       |        SCN_EXPECT(input.size() == 1);
 4021|       |        auto cp = static_cast<char32_t>(input.front());
 4022|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4023|       |            return invalid_code_point;
 4024|       |        }
 4025|       |        return cp;
 4026|       |    }
 4027|  4.45M|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3825|  4.45M|{
 3826|  4.45M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  4.45M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.45M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3827|       |
 3828|  4.45M|    const auto is_trailing_code_unit = [](char ch) {
 3829|  4.45M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3830|  4.45M|    };
 3831|       |
 3832|  4.45M|    if (input.size() == 1) {
  ------------------
  |  Branch (3832:9): [True: 4.36M, False: 86.7k]
  ------------------
 3833|  4.36M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3833:13): [True: 782, False: 4.36M]
  ------------------
 3834|    782|            SCN_UNLIKELY_ATTR
 3835|    782|            return invalid_code_point;
 3836|    782|        }
 3837|  4.36M|        return static_cast<char32_t>(input[0]);
 3838|  4.36M|    }
 3839|       |
 3840|  86.7k|    if (input.size() == 2) {
  ------------------
  |  Branch (3840:9): [True: 80.0k, False: 6.78k]
  ------------------
 3841|  80.0k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3841:13): [True: 154, False: 79.8k]
  ------------------
 3842|    154|            SCN_UNLIKELY_ATTR
 3843|    154|            return invalid_code_point;
 3844|    154|        }
 3845|  79.8k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3845:13): [True: 8.75k, False: 71.0k]
  ------------------
 3846|  8.75k|            SCN_UNLIKELY_ATTR
 3847|  8.75k|            return invalid_code_point;
 3848|  8.75k|        }
 3849|       |
 3850|  71.0k|        char32_t cp{};
 3851|  71.0k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3852|  71.0k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3853|  71.0k|        return cp;
 3854|  79.8k|    }
 3855|       |
 3856|  6.78k|    if (input.size() == 3) {
  ------------------
  |  Branch (3856:9): [True: 3.97k, False: 2.80k]
  ------------------
 3857|  3.97k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3857:13): [True: 113, False: 3.86k]
  ------------------
 3858|    113|            SCN_UNLIKELY_ATTR
 3859|    113|            return invalid_code_point;
 3860|    113|        }
 3861|  3.86k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3861:13): [True: 1.80k, False: 2.05k]
  ------------------
 3862|  3.86k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3862:13): [True: 618, False: 1.44k]
  ------------------
 3863|  2.42k|            SCN_UNLIKELY_ATTR
 3864|  2.42k|            return invalid_code_point;
 3865|  2.42k|        }
 3866|       |
 3867|  1.44k|        char32_t cp{};
 3868|  1.44k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3869|  1.44k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3870|  1.44k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3871|  1.44k|        return cp;
 3872|  3.86k|    }
 3873|       |
 3874|  2.80k|    if (input.size() == 4) {
  ------------------
  |  Branch (3874:9): [True: 2.80k, False: 0]
  ------------------
 3875|  2.80k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3875:13): [True: 0, False: 2.80k]
  ------------------
 3876|      0|            SCN_UNLIKELY_ATTR
 3877|      0|            return invalid_code_point;
 3878|      0|        }
 3879|  2.80k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3879:13): [True: 576, False: 2.22k]
  ------------------
 3880|    576|            SCN_UNLIKELY_ATTR
 3881|    576|            return invalid_code_point;
 3882|    576|        }
 3883|  2.22k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3883:13): [True: 784, False: 1.44k]
  ------------------
 3884|  2.22k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3884:13): [True: 580, False: 863]
  ------------------
 3885|  2.22k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3885:13): [True: 544, False: 319]
  ------------------
 3886|  1.90k|            SCN_UNLIKELY_ATTR
 3887|  1.90k|            return invalid_code_point;
 3888|  1.90k|        }
 3889|       |
 3890|    319|        char32_t cp{};
 3891|    319|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3892|    319|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3893|    319|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3894|    319|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3895|    319|        return cp;
 3896|  2.22k|    }
 3897|       |
 3898|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3899|       |    // gcc 7 thinks we'll get here, even when we won't
 3900|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3901|      0|#endif
 3902|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3903|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3828|  90.3k|    const auto is_trailing_code_unit = [](char ch) {
 3829|  90.3k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3830|  90.3k|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3698|  7.19M|{
 3699|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3700|       |                                          decltype(first), decltype(last)> &&
 3701|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3702|       |        return {first, last};
 3703|       |    }
 3704|  7.19M|    else {
 3705|  7.19M|        return {to_address(first), static_cast<size_t>(std::distance(
 3706|  7.19M|                                       to_address(first), to_address(last)))};
 3707|  7.19M|    }
 3708|  7.19M|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  21.8M|{
  326|  21.8M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  21.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  21.8M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  303|  25.0M|{
  304|  25.0M|    return p;
  305|  25.0M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3729|  11.4M|{
 3730|       |    if constexpr (std::is_constructible_v<
 3731|       |                      typename std::basic_string_view<CharT>::iterator,
 3732|       |                      decltype(it)> &&
 3733|  11.4M|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3734|  11.4M|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  11.4M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3735|  11.4M|        return it;
 3736|       |    }
 3737|       |    else {
 3738|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3739|       |    }
 3740|  11.4M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   128k|    {
 2724|   128k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   128k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   128k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   128k|    {
 2705|   128k|        return decay_copy(t.begin());
 2706|   128k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1948|  16.4M|{
 1949|  16.4M|    return SCN_FWD(t);
  ------------------
  |  |  930|  16.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  16.4M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  3.09M|    {
 2781|  3.09M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.09M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  3.09M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  3.09M|    {
 2763|  3.09M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  3.09M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  3.09M|    }
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8866|   226k|{
 8867|   226k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   226k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   226k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   226k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   226k|    static_cast<    \
  |  |  929|   226k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   226k|    static_cast<    \
  |  |  929|   226k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   226k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJfEEEDav:
 5395|   979k|{
 5396|   979k|    detail::check_scan_arg_types<Args...>();
 5397|   979k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   979k|}
_ZN3scn2v36detail20check_scan_arg_typesIJfEEEvv:
 5134|  1.60M|{
 5135|  1.60M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  1.60M|                  "Scan argument types must be default constructible");
 5137|  1.60M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  1.60M|                  "Scan argument types must be Destructible");
 5139|  1.60M|    static_assert(
 5140|  1.60M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  1.60M|        "Scan argument types must not be references");
 5142|  1.60M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEEC2Ev:
 5347|   979k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5348|   979k|    {
 5349|   979k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   979k|    {
 5360|   979k|        return {detail::make_arg<
 5361|   979k|            kind, Context,
 5362|   979k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   979k|                                 typename Context::char_type>::value>(args)...};
 5364|   979k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE16EfvEEPvRT2_:
 5169|   979k|{
 5170|   979k|    return make_value<Context>(value).ref_value;
 5171|   979k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEfEEDaRT0_:
 5119|  1.08M|{
 5120|  1.08M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5123|  1.08M|                                  needs_context_tag>) {
 5124|  1.08M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  1.08M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|       |    }
 5126|       |    else {
 5127|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|       |            value, context_tag<Context>{}));
 5129|       |    }
 5130|  1.08M|}
_ZN3scn2v36detail10arg_mapperIcE3mapERf:
 4958|  1.08M|    {                                                                        \
 4959|  1.08M|        return val;                                                          \
 4960|  1.08M|    }
_ZN3scn2v36detail15make_value_implIRfEEDaOT_:
 5088|  1.60M|{
 5089|  1.60M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  1.60M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  1.60M|    constexpr bool scannable_char =
 5093|  1.60M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  1.60M|    static_assert(scannable_char,
 5095|  1.60M|                  "Cannot scan an argument of an unsupported character "
 5096|  1.60M|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  1.60M|    constexpr bool scannable_const =
 5099|  1.60M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  1.60M|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  1.60M|    constexpr bool scannable_disabled =
 5103|  1.60M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  1.60M|    static_assert(scannable_disabled,
 5105|  1.60M|                  "Cannot scan an argument that has been disabled by "
 5106|  1.60M|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  1.60M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  1.60M|    static_assert(
 5110|  1.60M|        scannable,
 5111|  1.60M|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  1.60M|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  1.60M|    return arg_value{arg};
 5115|  1.60M|}
_ZN3scn2v36detail9arg_valueC2IfEERT_:
 4900|  1.60M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4901|  1.60M|    {
 4902|  1.60M|    }
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8653|   697k|{
 8654|   697k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   697k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8655|   697k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8590|   697k|{
 8591|   697k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   697k|    auto result = vscan_impl(buffer, format, args);
 8594|   697k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   697k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 57.6k, False: 640k]
  |  |  ------------------
  ------------------
 8595|  57.6k|        return unexpected(result.error());
 8596|  57.6k|    }
 8597|   640k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   640k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   697k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 4719|  1.54M|{
 4720|  1.54M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|  1.54M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|  1.54M|                  "\n"
 4724|  1.54M|                  "Unsupported range type given as input to a scanning "
 4725|  1.54M|                  "function.\n"
 4726|  1.54M|                  "A range needs to have a character type (value type) "
 4727|  1.54M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|  1.54M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|  1.54M|                  "to be included.\n"
 4730|  1.54M|                  "See the scnlib documentation for more details.");
 4731|  1.54M|    static_assert(
 4732|  1.54M|        !std::is_same_v<T, custom_char_traits>,
 4733|  1.54M|        "\n"
 4734|  1.54M|        "Unsupported range type given as input to a scanning "
 4735|  1.54M|        "function.\n"
 4736|  1.54M|        "String types (std::basic_string, and std::basic_string_view) "
 4737|  1.54M|        "need to use std::char_traits. Strings with custom Traits are "
 4738|  1.54M|        "not supported.");
 4739|  1.54M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|  1.54M|                  "\n"
 4741|  1.54M|                  "Unsupported range type given as input to a scanning "
 4742|  1.54M|                  "function.\n"
 4743|  1.54M|                  "file_marker_found cannot be used as an "
 4744|  1.54M|                  "source range type to scn::scan.\n"
 4745|  1.54M|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|  1.54M|                  "and do not provide an explicit source range, "
 4747|  1.54M|                  "or use scn::scan with a FILE* directly.");
 4748|  1.54M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|  1.54M|                  "\n"
 4750|  1.54M|                  "Unsupported range type given as input to a scanning "
 4751|  1.54M|                  "function.\n"
 4752|  1.54M|                  "In order to be scannable, a range needs to satisfy "
 4753|  1.54M|                  "`forward_range`. `input_range` is not sufficient.");
 4754|  1.54M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|  1.54M|                  "\n"
 4756|  1.54M|                  "Unsupported range type given as input to a scanning "
 4757|  1.54M|                  "function.\n"
 4758|  1.54M|                  "A range needs to model forward_range and have a valid "
 4759|  1.54M|                  "character type (char or wchar_t) to be scannable.\n"
 4760|  1.54M|                  "Examples of scannable ranges are std::string, "
 4761|  1.54M|                  "std::string_view, "
 4762|  1.54M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|  1.54M|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|  1.54M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|  1.54M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 4658|  1.54M|{
 4659|  1.54M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 4660|  1.54M|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4661|       |    }
 4662|       |    else {
 4663|       |        return invalid_char_type{};
 4664|       |    }
 4665|  1.54M|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  1.54M|    {
 2855|  1.54M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  1.54M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  1.54M|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  1.54M|    {
 2836|  1.54M|        return t.data();
 2837|  1.54M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3230|  1.54M|    {
 3231|  1.54M|        return ranges::empty(derived())
  ------------------
  |  Branch (3231:16): [True: 16.1k, False: 1.53M]
  ------------------
 3232|  1.54M|                   ? nullptr
 3233|  1.54M|                   : std::addressof(*ranges::begin(derived()));
 3234|  1.54M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|  1.54M|    {
 3005|  1.54M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  1.54M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|  1.54M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|  1.54M|    {
 2978|  1.54M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  1.54M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|  1.54M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5emptyEv:
 3338|  8.52M|    {
 3339|  8.52M|        return m_iterator == m_sentinel;
 3340|  8.52M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3184|  3.07M|    {
 3185|  3.07M|        return static_cast<const D&>(*this);
 3186|  3.07M|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  2.95M|    {
 2724|  2.95M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.95M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  2.95M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  2.95M|    {
 2705|  2.95M|        return decay_copy(t.begin());
 2706|  2.95M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3329|  37.4M|    {
 3330|  37.4M|        return m_iterator;
 3331|  37.4M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|  1.54M|    {
 2930|  1.54M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|  1.54M|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|  1.54M|    {
 2896|  1.54M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  1.54M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|  1.54M|    }
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1948|  6.72M|{
 1949|  6.72M|    return SCN_FWD(t);
  ------------------
  |  |  930|  6.72M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  6.72M|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3345|  8.55M|    {
 3346|  8.55M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3347|  8.55M|    }
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1597|  16.7M|    {
 1598|  16.7M|        return has_value();
 1599|  16.7M|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  484|  33.1M|    {
  485|  33.1M|        return m_has_value;
  486|  33.1M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1603|  1.14M|    {
 1604|  1.14M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.14M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.14M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.14M|        return this->get_unexpected().error();
 1606|  1.14M|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  1.14M|    {
  468|  1.14M|        return m_unexpected;
  469|  1.14M|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  360|  8.80M|    {
  361|  8.80M|        return m_unexpected;
  362|  8.80M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  345|  4.29M|        : m_unexpected(std::forward<Err>(e))
  346|  4.29M|    {
  347|  4.29M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  4.29M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  4.29M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1473|   124k|        : base(unexpect, std::move(e.error())),
 1474|   124k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   124k|    {
 1476|   124k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|   124k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   124k|          m_has_value(false)
  446|   124k|    {
  447|   124k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  354|  9.87M|        : m_unexpected(std::forward<Args>(args)...)
  355|  9.87M|    {
  356|  9.87M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  9.87M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  9.87M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.54M|    {
 1177|  1.54M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5922|  1.42M|{
 5923|       |    if constexpr (ranges::random_access_iterator<
 5924|  1.42M|                      ranges::iterator_t<SourceRange>>) {
 5925|  1.42M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|       |    }
 5927|       |    else {
 5928|       |        auto it = ranges::begin(source);
 5929|       |        while (n > 0) {
 5930|       |            --n;
 5931|       |            ++it;
 5932|       |        }
 5933|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|       |    }
 5935|  1.42M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  8.81M|    {
 2724|  8.81M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  8.81M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  8.81M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  8.81M|    {
 2705|  8.81M|        return decay_copy(t.begin());
 2706|  8.81M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 5909|  1.42M|{
 5910|  1.42M|    return ranges::end(source);
 5911|  1.42M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.42M|    {
 2781|  1.42M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.42M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.42M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.42M|    {
 2763|  1.42M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.42M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.42M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3333|  18.2M|    {
 3334|  18.2M|        return m_sentinel;
 3335|  18.2M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1652|  6.59M|    {
 1653|  6.59M|        return value();
 1654|  6.59M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1626|  15.2M|    {
 1627|  15.2M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  15.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  15.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  15.2M|        return this->get_value();
 1629|  15.2M|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  450|  15.2M|    {
  451|  15.2M|        return m_value;
  452|  15.2M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|  1.42M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.42M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.42M|    {
 1430|  1.42M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  435|  1.42M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.42M|    {
  437|  1.42M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7974|   453k|    {
 7975|   453k|        return m_str;
 7976|   453k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJfEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5424|   979k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5425|   979k|    {
 5426|   979k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE12arg_pointersEv:
 5378|   979k|    {
 5379|   979k|        return m_argptrs;
 5380|   979k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5476|  3.02M|        : m_desc(desc), m_builtin_values(data)
 5477|  3.02M|    {
 5478|  3.02M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   453k|{
 8820|   453k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   453k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38.4k, False: 414k]
  |  |  ------------------
  ------------------
 8821|  38.4k|        return unexpected(result.error());
 8822|  38.4k|    }
 8823|   414k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   414k|    static_cast<    \
  |  |  929|   414k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   414k|    static_cast<    \
  |  |  929|   414k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   453k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1597|  1.54M|    {
 1598|  1.54M|        return has_value();
 1599|  1.54M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  3.09M|    {
  485|  3.09M|        return m_has_value;
  486|  3.09M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1603|   124k|    {
 1604|   124k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   124k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   124k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   124k|        return this->get_unexpected().error();
 1606|   124k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   124k|    {
  468|   124k|        return m_unexpected;
  469|   124k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  41.6k|        : base(unexpect, std::move(e.error())),
 1474|  41.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  41.6k|    {
 1476|  41.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  41.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  41.6k|          m_has_value(false)
  446|  41.6k|    {
  447|  41.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   501k|    {
 1177|   501k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1652|  1.28M|    {
 1653|  1.28M|        return value();
 1654|  1.28M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|  1.42M|    {
 1627|  1.42M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.42M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.42M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.42M|        return this->get_value();
 1629|  1.42M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.42M|    {
  451|  1.42M|        return m_value;
  452|  1.42M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2ES8_ONSt3__15tupleIJfEEE:
 5828|   460k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   460k|    static_cast<    \
  |  |  929|   460k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   460k|    static_cast<    \
  |  |  929|   460k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|   460k|    {
 5830|   460k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5679|  1.42M|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|  1.42M|    static_cast<    \
  |  |  929|  1.42M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5680|  1.42M|    {
 5681|  1.42M|    }
_ZN3scn2v36detail25scan_result_value_storageIJfEEC2EONSt3__15tupleIJfEEE:
 5614|  1.35M|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|  1.35M|    static_cast<    \
  |  |  929|  1.35M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5615|  1.35M|    {
 5616|  1.35M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|   460k|        : base(std::in_place, std::forward<U>(val)),
 1428|   460k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   460k|    {
 1430|   460k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|   460k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   460k|    {
  437|   460k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE4argsEv:
 5373|   979k|    {
 5374|   979k|        return m_args;
 5375|   979k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3314|  14.5M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  14.5M|    static_cast<    \
  |  |  929|  14.5M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  14.5M|    static_cast<    \
  |  |  929|  14.5M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3315|  14.5M|    {
 3316|  14.5M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7690|  3.02M|{
 7691|  3.02M|    return s;
 7692|  3.02M|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7667|  3.02M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7969|   453k|        : m_str(r.str)
 7970|   453k|    {
 7971|   453k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   501k|    {
 1598|   501k|        return has_value();
 1599|   501k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   962k|    {
  485|   962k|        return m_has_value;
  486|   962k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEptEv:
 1672|   460k|    {
 1673|   460k|        return &value();
 1674|   460k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|   460k|    {
 1627|   460k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   460k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   460k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   460k|        return this->get_value();
 1629|   460k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   460k|    {
  451|   460k|        return m_value;
  452|   460k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 5697|  1.42M|    {
 5698|  1.42M|        return ranges::begin(m_range);
 5699|  1.42M|    }
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8933|   226k|{
 8934|   226k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   226k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   226k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   226k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   226k|    static_cast<    \
  |  |  929|   226k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   226k|    static_cast<    \
  |  |  929|   226k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   226k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8671|   697k|{
 8672|   697k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   697k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8673|   697k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8606|   697k|{
 8607|   697k|#if !SCN_DISABLE_LOCALE
 8608|   697k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   697k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   697k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   697k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   697k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   697k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 57.6k, False: 640k]
  |  |  ------------------
  ------------------
 8615|  57.6k|        return unexpected(result.error());
 8616|  57.6k|    }
 8617|   640k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   640k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   697k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8972|  48.7k|{
 8973|  48.7k|    T value;
 8974|  48.7k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  48.7k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  48.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  48.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  48.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  48.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.20k, False: 45.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.20k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.20k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.20k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.20k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.20k|    }                                                  \
  |  |  |  | 3671|  48.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  45.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  45.5k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  45.5k|    static_cast<    \
  |  |  929|  45.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  45.5k|    static_cast<    \
  |  |  929|  45.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  48.7k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEfEENS0_14basic_scan_argIT_EERT0_:
 5154|   102k|{
 5155|   102k|    check_scan_arg_types<T>();
 5156|       |
 5157|   102k|    basic_scan_arg<Context> arg;
 5158|   102k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|   102k|    arg.m_value = make_value<Context>(value);
 5160|   102k|    return arg;
 5161|   102k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5240|  3.34M|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4897|  5.06M|    arg_value() = default;
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8684|   151k|{
 8685|   151k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|   151k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8686|   151k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|   151k|{
 8631|   151k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|   151k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|   151k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   151k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.60k, False: 141k]
  |  |  ------------------
  ------------------
 8635|  9.60k|        return unexpected(result.error());
 8636|  9.60k|    }
 8637|   141k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   141k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|   151k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1662|   141k|    {
 1663|   141k|        return std::move(value());
 1664|   141k|    }
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8866|   234k|{
 8867|   234k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   234k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   234k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   234k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   234k|    static_cast<    \
  |  |  929|   234k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   234k|    static_cast<    \
  |  |  929|   234k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   234k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJdEEEDav:
 5395|  1.01M|{
 5396|  1.01M|    detail::check_scan_arg_types<Args...>();
 5397|  1.01M|    return detail::scan_arg_store<Context, Args...>{};
 5398|  1.01M|}
_ZN3scn2v36detail20check_scan_arg_typesIJdEEEvv:
 5134|  1.71M|{
 5135|  1.71M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  1.71M|                  "Scan argument types must be default constructible");
 5137|  1.71M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  1.71M|                  "Scan argument types must be Destructible");
 5139|  1.71M|    static_assert(
 5140|  1.71M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  1.71M|        "Scan argument types must not be references");
 5142|  1.71M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEEC2Ev:
 5347|  1.01M|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5348|  1.01M|    {
 5349|  1.01M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  1.01M|    {
 5360|  1.01M|        return {detail::make_arg<
 5361|  1.01M|            kind, Context,
 5362|  1.01M|            mapped_type_constant<remove_cvref_t<A>,
 5363|  1.01M|                                 typename Context::char_type>::value>(args)...};
 5364|  1.01M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE17EdvEEPvRT2_:
 5169|  1.01M|{
 5170|  1.01M|    return make_value<Context>(value).ref_value;
 5171|  1.01M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEdEEDaRT0_:
 5119|  1.12M|{
 5120|  1.12M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5123|  1.12M|                                  needs_context_tag>) {
 5124|  1.12M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  1.12M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|       |    }
 5126|       |    else {
 5127|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|       |            value, context_tag<Context>{}));
 5129|       |    }
 5130|  1.12M|}
_ZN3scn2v36detail10arg_mapperIcE3mapERd:
 4958|  1.12M|    {                                                                        \
 4959|  1.12M|        return val;                                                          \
 4960|  1.12M|    }
_ZN3scn2v36detail15make_value_implIRdEEDaOT_:
 5088|  1.71M|{
 5089|  1.71M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  1.71M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  1.71M|    constexpr bool scannable_char =
 5093|  1.71M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  1.71M|    static_assert(scannable_char,
 5095|  1.71M|                  "Cannot scan an argument of an unsupported character "
 5096|  1.71M|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  1.71M|    constexpr bool scannable_const =
 5099|  1.71M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  1.71M|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  1.71M|    constexpr bool scannable_disabled =
 5103|  1.71M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  1.71M|    static_assert(scannable_disabled,
 5105|  1.71M|                  "Cannot scan an argument that has been disabled by "
 5106|  1.71M|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  1.71M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  1.71M|    static_assert(
 5110|  1.71M|        scannable,
 5111|  1.71M|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  1.71M|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  1.71M|    return arg_value{arg};
 5115|  1.71M|}
_ZN3scn2v36detail9arg_valueC2IdEERT_:
 4900|  1.71M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4901|  1.71M|    {
 4902|  1.71M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7974|   468k|    {
 7975|   468k|        return m_str;
 7976|   468k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5424|  1.01M|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5425|  1.01M|    {
 5426|  1.01M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12arg_pointersEv:
 5378|  1.01M|    {
 5379|  1.01M|        return m_argptrs;
 5380|  1.01M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   468k|{
 8820|   468k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   468k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38.4k, False: 430k]
  |  |  ------------------
  ------------------
 8821|  38.4k|        return unexpected(result.error());
 8822|  38.4k|    }
 8823|   430k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   430k|    static_cast<    \
  |  |  929|   430k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   430k|    static_cast<    \
  |  |  929|   430k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   468k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  41.6k|        : base(unexpect, std::move(e.error())),
 1474|  41.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  41.6k|    {
 1476|  41.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  41.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  41.6k|          m_has_value(false)
  446|  41.6k|    {
  447|  41.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   519k|    {
 1177|   519k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2ES8_ONSt3__15tupleIJdEEE:
 5828|   477k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   477k|    static_cast<    \
  |  |  929|   477k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   477k|    static_cast<    \
  |  |  929|   477k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|   477k|    {
 5830|   477k|    }
_ZN3scn2v36detail25scan_result_value_storageIJdEEC2EONSt3__15tupleIJdEEE:
 5614|  1.46M|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|  1.46M|    static_cast<    \
  |  |  929|  1.46M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5615|  1.46M|    {
 5616|  1.46M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|   477k|        : base(std::in_place, std::forward<U>(val)),
 1428|   477k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   477k|    {
 1430|   477k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|   477k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   477k|    {
  437|   477k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE4argsEv:
 5373|  1.01M|    {
 5374|  1.01M|        return m_args;
 5375|  1.01M|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7969|   468k|        : m_str(r.str)
 7970|   468k|    {
 7971|   468k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   519k|    {
 1598|   519k|        return has_value();
 1599|   519k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   996k|    {
  485|   996k|        return m_has_value;
  486|   996k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEptEv:
 1672|   477k|    {
 1673|   477k|        return &value();
 1674|   477k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|   477k|    {
 1627|   477k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   477k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   477k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   477k|        return this->get_value();
 1629|   477k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   477k|    {
  451|   477k|        return m_value;
  452|   477k|    }
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8933|   234k|{
 8934|   234k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   234k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   234k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   234k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   234k|    static_cast<    \
  |  |  929|   234k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   234k|    static_cast<    \
  |  |  929|   234k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   234k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8972|  50.7k|{
 8973|  50.7k|    T value;
 8974|  50.7k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  50.7k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  50.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  50.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  50.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  50.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.20k, False: 47.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.20k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.20k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.20k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.20k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.20k|    }                                                  \
  |  |  |  | 3671|  50.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  47.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  47.5k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  47.5k|    static_cast<    \
  |  |  929|  47.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  47.5k|    static_cast<    \
  |  |  929|  47.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  50.7k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEdEENS0_14basic_scan_argIT_EERT0_:
 5154|   106k|{
 5155|   106k|    check_scan_arg_types<T>();
 5156|       |
 5157|   106k|    basic_scan_arg<Context> arg;
 5158|   106k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|   106k|    arg.m_value = make_value<Context>(value);
 5160|   106k|    return arg;
 5161|   106k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8866|   237k|{
 8867|   237k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   237k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   237k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   237k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   237k|    static_cast<    \
  |  |  929|   237k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   237k|    static_cast<    \
  |  |  929|   237k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   237k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJeEEEDav:
 5395|  1.03M|{
 5396|  1.03M|    detail::check_scan_arg_types<Args...>();
 5397|  1.03M|    return detail::scan_arg_store<Context, Args...>{};
 5398|  1.03M|}
_ZN3scn2v36detail20check_scan_arg_typesIJeEEEvv:
 5134|  1.74M|{
 5135|  1.74M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  1.74M|                  "Scan argument types must be default constructible");
 5137|  1.74M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  1.74M|                  "Scan argument types must be Destructible");
 5139|  1.74M|    static_assert(
 5140|  1.74M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  1.74M|        "Scan argument types must not be references");
 5142|  1.74M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEEC2Ev:
 5347|  1.03M|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5348|  1.03M|    {
 5349|  1.03M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  1.03M|    {
 5360|  1.03M|        return {detail::make_arg<
 5361|  1.03M|            kind, Context,
 5362|  1.03M|            mapped_type_constant<remove_cvref_t<A>,
 5363|  1.03M|                                 typename Context::char_type>::value>(args)...};
 5364|  1.03M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE18EevEEPvRT2_:
 5169|  1.03M|{
 5170|  1.03M|    return make_value<Context>(value).ref_value;
 5171|  1.03M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEeEEDaRT0_:
 5119|  1.13M|{
 5120|  1.13M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5123|  1.13M|                                  needs_context_tag>) {
 5124|  1.13M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  1.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|       |    }
 5126|       |    else {
 5127|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|       |            value, context_tag<Context>{}));
 5129|       |    }
 5130|  1.13M|}
_ZN3scn2v36detail10arg_mapperIcE3mapERe:
 4958|  1.13M|    {                                                                        \
 4959|  1.13M|        return val;                                                          \
 4960|  1.13M|    }
_ZN3scn2v36detail15make_value_implIReEEDaOT_:
 5088|  1.74M|{
 5089|  1.74M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  1.74M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  1.74M|    constexpr bool scannable_char =
 5093|  1.74M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  1.74M|    static_assert(scannable_char,
 5095|  1.74M|                  "Cannot scan an argument of an unsupported character "
 5096|  1.74M|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  1.74M|    constexpr bool scannable_const =
 5099|  1.74M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  1.74M|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  1.74M|    constexpr bool scannable_disabled =
 5103|  1.74M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  1.74M|    static_assert(scannable_disabled,
 5105|  1.74M|                  "Cannot scan an argument that has been disabled by "
 5106|  1.74M|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  1.74M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  1.74M|    static_assert(
 5110|  1.74M|        scannable,
 5111|  1.74M|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  1.74M|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  1.74M|    return arg_value{arg};
 5115|  1.74M|}
_ZN3scn2v36detail9arg_valueC2IeEERT_:
 4900|  1.74M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4901|  1.74M|    {
 4902|  1.74M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7974|   474k|    {
 7975|   474k|        return m_str;
 7976|   474k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJeEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5424|  1.03M|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5425|  1.03M|    {
 5426|  1.03M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE12arg_pointersEv:
 5378|  1.03M|    {
 5379|  1.03M|        return m_argptrs;
 5380|  1.03M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   474k|{
 8820|   474k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   474k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38.4k, False: 435k]
  |  |  ------------------
  ------------------
 8821|  38.4k|        return unexpected(result.error());
 8822|  38.4k|    }
 8823|   435k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   435k|    static_cast<    \
  |  |  929|   435k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   435k|    static_cast<    \
  |  |  929|   435k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   474k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  41.6k|        : base(unexpect, std::move(e.error())),
 1474|  41.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  41.6k|    {
 1476|  41.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  41.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  41.6k|          m_has_value(false)
  446|  41.6k|    {
  447|  41.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   525k|    {
 1177|   525k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2ES8_ONSt3__15tupleIJeEEE:
 5828|   484k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   484k|    static_cast<    \
  |  |  929|   484k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   484k|    static_cast<    \
  |  |  929|   484k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|   484k|    {
 5830|   484k|    }
_ZN3scn2v36detail25scan_result_value_storageIJeEEC2EONSt3__15tupleIJeEEE:
 5614|  1.49M|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|  1.49M|    static_cast<    \
  |  |  929|  1.49M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5615|  1.49M|    {
 5616|  1.49M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|   484k|        : base(std::in_place, std::forward<U>(val)),
 1428|   484k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   484k|    {
 1430|   484k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|   484k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   484k|    {
  437|   484k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE4argsEv:
 5373|  1.03M|    {
 5374|  1.03M|        return m_args;
 5375|  1.03M|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7969|   474k|        : m_str(r.str)
 7970|   474k|    {
 7971|   474k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   525k|    {
 1598|   525k|        return has_value();
 1599|   525k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.01M|    {
  485|  1.01M|        return m_has_value;
  486|  1.01M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEptEv:
 1672|   484k|    {
 1673|   484k|        return &value();
 1674|   484k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|   484k|    {
 1627|   484k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   484k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   484k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   484k|        return this->get_value();
 1629|   484k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   484k|    {
  451|   484k|        return m_value;
  452|   484k|    }
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8933|   237k|{
 8934|   237k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   237k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   237k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   237k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   237k|    static_cast<    \
  |  |  929|   237k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   237k|    static_cast<    \
  |  |  929|   237k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   237k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8972|  51.7k|{
 8973|  51.7k|    T value;
 8974|  51.7k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  51.7k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  51.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  51.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  51.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  51.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.20k, False: 48.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.20k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.20k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.20k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.20k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.20k|    }                                                  \
  |  |  |  | 3671|  51.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  48.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  48.5k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  48.5k|    static_cast<    \
  |  |  929|  48.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  48.5k|    static_cast<    \
  |  |  929|  48.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  51.7k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEeEENS0_14basic_scan_argIT_EERT0_:
 5154|   108k|{
 5155|   108k|    check_scan_arg_types<T>();
 5156|       |
 5157|   108k|    basic_scan_arg<Context> arg;
 5158|   108k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|   108k|    arg.m_value = make_value<Context>(value);
 5160|   108k|    return arg;
 5161|   108k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   124k|    {
 2724|   124k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   124k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   124k|    {
 2705|   124k|        return decay_copy(t.begin());
 2706|   124k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 1948|  78.9M|{
 1949|  78.9M|    return SCN_FWD(t);
  ------------------
  |  |  930|  78.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  78.9M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  3.59M|    {
 2781|  3.59M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.59M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  3.59M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  3.59M|    {
 2763|  3.59M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  3.59M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  3.59M|    }
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8866|   262k|{
 8867|   262k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   262k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   262k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   262k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   262k|    static_cast<    \
  |  |  929|   262k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   262k|    static_cast<    \
  |  |  929|   262k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   262k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8653|   816k|{
 8654|   816k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   816k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8655|   816k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8590|   816k|{
 8591|   816k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   816k|    auto result = vscan_impl(buffer, format, args);
 8594|   816k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   816k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 57.6k, False: 758k]
  |  |  ------------------
  ------------------
 8595|  57.6k|        return unexpected(result.error());
 8596|  57.6k|    }
 8597|   758k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   758k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   816k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4719|  1.79M|{
 4720|  1.79M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|  1.79M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|  1.79M|                  "\n"
 4724|  1.79M|                  "Unsupported range type given as input to a scanning "
 4725|  1.79M|                  "function.\n"
 4726|  1.79M|                  "A range needs to have a character type (value type) "
 4727|  1.79M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|  1.79M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|  1.79M|                  "to be included.\n"
 4730|  1.79M|                  "See the scnlib documentation for more details.");
 4731|  1.79M|    static_assert(
 4732|  1.79M|        !std::is_same_v<T, custom_char_traits>,
 4733|  1.79M|        "\n"
 4734|  1.79M|        "Unsupported range type given as input to a scanning "
 4735|  1.79M|        "function.\n"
 4736|  1.79M|        "String types (std::basic_string, and std::basic_string_view) "
 4737|  1.79M|        "need to use std::char_traits. Strings with custom Traits are "
 4738|  1.79M|        "not supported.");
 4739|  1.79M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|  1.79M|                  "\n"
 4741|  1.79M|                  "Unsupported range type given as input to a scanning "
 4742|  1.79M|                  "function.\n"
 4743|  1.79M|                  "file_marker_found cannot be used as an "
 4744|  1.79M|                  "source range type to scn::scan.\n"
 4745|  1.79M|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|  1.79M|                  "and do not provide an explicit source range, "
 4747|  1.79M|                  "or use scn::scan with a FILE* directly.");
 4748|  1.79M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|  1.79M|                  "\n"
 4750|  1.79M|                  "Unsupported range type given as input to a scanning "
 4751|  1.79M|                  "function.\n"
 4752|  1.79M|                  "In order to be scannable, a range needs to satisfy "
 4753|  1.79M|                  "`forward_range`. `input_range` is not sufficient.");
 4754|  1.79M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|  1.79M|                  "\n"
 4756|  1.79M|                  "Unsupported range type given as input to a scanning "
 4757|  1.79M|                  "function.\n"
 4758|  1.79M|                  "A range needs to model forward_range and have a valid "
 4759|  1.79M|                  "character type (char or wchar_t) to be scannable.\n"
 4760|  1.79M|                  "Examples of scannable ranges are std::string, "
 4761|  1.79M|                  "std::string_view, "
 4762|  1.79M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|  1.79M|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|  1.79M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|  1.79M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4689|  1.79M|{
 4690|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 4691|       |        return file_marker_found{};
 4692|       |    }
 4693|       |    else if constexpr (!ranges::forward_range<Range>) {
 4694|       |        if constexpr (ranges::range<Range>) {
 4695|       |            return insufficient_range{};
 4696|       |        }
 4697|       |        else {
 4698|       |            return invalid_input_range{};
 4699|       |        }
 4700|       |    }
 4701|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 4702|       |        return invalid_char_type{};
 4703|       |    }
 4704|  1.79M|    else {
 4705|  1.79M|        return make_forward_scan_buffer(r);
 4706|  1.79M|    }
 4707|  1.79M|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4523|  1.79M|{
 4524|  1.79M|    return basic_scan_forward_buffer_impl(range);
 4525|  1.79M|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4408|  1.79M|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  930|  1.79M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4409|  1.79M|          m_cursor(ranges::begin(*m_range))
 4410|  1.79M|    {
 4411|  1.79M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4380|  1.79M|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4381|  1.79M|    {
 4382|  1.79M|    }
_ZN3scn2v36detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4149|  1.79M|        : m_current_view(sv), m_is_contiguous(false)
 4150|  1.79M|    {
 4151|  1.79M|    }
_ZN3scn2v36detail17basic_scan_bufferIcED2Ev:
 4065|  1.79M|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  3.47M|    {
 2724|  3.47M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.47M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  3.47M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  3.47M|    {
 2705|  3.47M|        return decay_copy(t.begin());
 2706|  3.47M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3329|  5.14M|    {
 3330|  5.14M|        return m_iterator;
 3331|  5.14M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4414|  23.0M|    {
 4415|  23.0M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4415:13): [True: 329k, False: 22.7M]
  ------------------
 4416|   329k|            return false;
 4417|   329k|        }
 4418|  22.7M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4419|  22.7M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  22.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  22.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4420|  22.7M|        }
 4421|  22.7M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4421:13): [True: 20.9M, False: 1.77M]
  ------------------
 4422|  20.9M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4423|  20.9M|                                          this->m_current_view.begin(),
 4424|  20.9M|                                          this->m_current_view.end());
 4425|  20.9M|        }
 4426|  22.7M|        m_latest = *m_cursor;
 4427|  22.7M|        ++m_cursor;
 4428|  22.7M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4429|  22.7M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4430|  22.7M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  22.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  22.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4431|  22.7M|        }
 4432|  22.7M|        return true;
 4433|  23.0M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  68.4M|    {
 2781|  68.4M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  68.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  68.4M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  68.4M|    {
 2763|  68.4M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  68.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  68.4M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3333|  70.1M|    {
 3334|  70.1M|        return m_sentinel;
 3335|  70.1M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE4syncEl:
 4070|  1.79M|    {
 4071|  1.79M|        SCN_UNUSED(position);
  ------------------
  |  |  909|  1.79M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4072|  1.79M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1473|   124k|        : base(unexpect, std::move(e.error())),
 1474|   124k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   124k|    {
 1476|   124k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  444|   124k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   124k|          m_has_value(false)
  446|   124k|    {
  447|   124k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.79M|    {
 1177|  1.79M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5922|  1.67M|{
 5923|       |    if constexpr (ranges::random_access_iterator<
 5924|  1.67M|                      ranges::iterator_t<SourceRange>>) {
 5925|  1.67M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|       |    }
 5927|       |    else {
 5928|       |        auto it = ranges::begin(source);
 5929|       |        while (n > 0) {
 5930|       |            --n;
 5931|       |            ++it;
 5932|       |        }
 5933|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|       |    }
 5935|  1.67M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.67M|    {
 2724|  1.67M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.67M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.67M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.67M|    {
 2705|  1.67M|        return decay_copy(t.begin());
 2706|  1.67M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 5909|  1.67M|{
 5910|  1.67M|    return ranges::end(source);
 5911|  1.67M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.67M|    {
 2781|  1.67M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.67M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.67M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.67M|    {
 2763|  1.67M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.67M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.67M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1427|  1.67M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.67M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.67M|    {
 1430|  1.67M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  435|  1.67M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.67M|    {
  437|  1.67M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7974|   525k|    {
 7975|   525k|        return m_str;
 7976|   525k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   525k|{
 8820|   525k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   525k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38.4k, False: 487k]
  |  |  ------------------
  ------------------
 8821|  38.4k|        return unexpected(result.error());
 8822|  38.4k|    }
 8823|   487k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   487k|    static_cast<    \
  |  |  929|   487k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   487k|    static_cast<    \
  |  |  929|   487k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   525k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1597|  1.79M|    {
 1598|  1.79M|        return has_value();
 1599|  1.79M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  3.59M|    {
  485|  3.59M|        return m_has_value;
  486|  3.59M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1603|   124k|    {
 1604|   124k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   124k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   124k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   124k|        return this->get_unexpected().error();
 1606|   124k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   124k|    {
  468|   124k|        return m_unexpected;
  469|   124k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  41.6k|        : base(unexpect, std::move(e.error())),
 1474|  41.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  41.6k|    {
 1476|  41.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  41.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  41.6k|          m_has_value(false)
  446|  41.6k|    {
  447|  41.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   579k|    {
 1177|   579k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1652|  1.51M|    {
 1653|  1.51M|        return value();
 1654|  1.51M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1626|  1.67M|    {
 1627|  1.67M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.67M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.67M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.67M|        return this->get_value();
 1629|  1.67M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.67M|    {
  451|  1.67M|        return m_value;
  452|  1.67M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2ESE_ONS6_5tupleIJfEEE:
 5828|   537k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   537k|    static_cast<    \
  |  |  929|   537k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   537k|    static_cast<    \
  |  |  929|   537k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|   537k|    {
 5830|   537k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2EOSF_:
 5679|  1.67M|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|  1.67M|    static_cast<    \
  |  |  929|  1.67M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5680|  1.67M|    {
 5681|  1.67M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|   537k|        : base(std::in_place, std::forward<U>(val)),
 1428|   537k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   537k|    {
 1430|   537k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|   537k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   537k|    {
  437|   537k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3314|  3.47M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  3.47M|    static_cast<    \
  |  |  929|  3.47M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  3.47M|    static_cast<    \
  |  |  929|  3.47M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3315|  3.47M|    {
 3316|  3.47M|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7969|   525k|        : m_str(r.str)
 7970|   525k|    {
 7971|   525k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   579k|    {
 1598|   579k|        return has_value();
 1599|   579k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.11M|    {
  485|  1.11M|        return m_has_value;
  486|  1.11M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1672|   537k|    {
 1673|   537k|        return &value();
 1674|   537k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|   537k|    {
 1627|   537k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   537k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   537k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   537k|        return this->get_value();
 1629|   537k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   537k|    {
  451|   537k|        return m_value;
  452|   537k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 5697|  1.67M|    {
 5698|  1.67M|        return ranges::begin(m_range);
 5699|  1.67M|    }
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8933|   262k|{
 8934|   262k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   262k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   262k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   262k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   262k|    static_cast<    \
  |  |  929|   262k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   262k|    static_cast<    \
  |  |  929|   262k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   262k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8671|   816k|{
 8672|   816k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   816k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8673|   816k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8606|   816k|{
 8607|   816k|#if !SCN_DISABLE_LOCALE
 8608|   816k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   816k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   816k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   816k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   816k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   816k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 57.6k, False: 758k]
  |  |  ------------------
  ------------------
 8615|  57.6k|        return unexpected(result.error());
 8616|  57.6k|    }
 8617|   758k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   758k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   816k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8972|  53.2k|{
 8973|  53.2k|    T value;
 8974|  53.2k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  53.2k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  53.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  53.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  53.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  53.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.20k, False: 50.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.20k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.20k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.20k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.20k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.20k|    }                                                  \
  |  |  |  | 3671|  53.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  50.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  50.0k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  50.0k|    static_cast<    \
  |  |  929|  50.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  50.0k|    static_cast<    \
  |  |  929|  50.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  53.2k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8684|   165k|{
 8685|   165k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|   165k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8686|   165k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|   165k|{
 8631|   165k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|   165k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|   165k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   165k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.60k, False: 156k]
  |  |  ------------------
  ------------------
 8635|  9.60k|        return unexpected(result.error());
 8636|  9.60k|    }
 8637|   156k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   156k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|   165k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSJ_v:
 1662|   156k|    {
 1663|   156k|        return std::move(value());
 1664|   156k|    }
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8866|   275k|{
 8867|   275k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   275k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   275k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   275k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   275k|    static_cast<    \
  |  |  929|   275k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   275k|    static_cast<    \
  |  |  929|   275k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   275k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7974|   550k|    {
 7975|   550k|        return m_str;
 7976|   550k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   550k|{
 8820|   550k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   550k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38.4k, False: 511k]
  |  |  ------------------
  ------------------
 8821|  38.4k|        return unexpected(result.error());
 8822|  38.4k|    }
 8823|   511k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   511k|    static_cast<    \
  |  |  929|   511k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   511k|    static_cast<    \
  |  |  929|   511k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   550k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  41.6k|        : base(unexpect, std::move(e.error())),
 1474|  41.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  41.6k|    {
 1476|  41.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  41.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  41.6k|          m_has_value(false)
  446|  41.6k|    {
  447|  41.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   606k|    {
 1177|   606k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2ESE_ONS6_5tupleIJdEEE:
 5828|   564k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   564k|    static_cast<    \
  |  |  929|   564k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   564k|    static_cast<    \
  |  |  929|   564k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|   564k|    {
 5830|   564k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|   564k|        : base(std::in_place, std::forward<U>(val)),
 1428|   564k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   564k|    {
 1430|   564k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|   564k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   564k|    {
  437|   564k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7969|   550k|        : m_str(r.str)
 7970|   550k|    {
 7971|   550k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   606k|    {
 1598|   606k|        return has_value();
 1599|   606k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.17M|    {
  485|  1.17M|        return m_has_value;
  486|  1.17M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1672|   564k|    {
 1673|   564k|        return &value();
 1674|   564k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|   564k|    {
 1627|   564k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   564k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   564k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   564k|        return this->get_value();
 1629|   564k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   564k|    {
  451|   564k|        return m_value;
  452|   564k|    }
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8933|   275k|{
 8934|   275k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   275k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   275k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   275k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   275k|    static_cast<    \
  |  |  929|   275k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   275k|    static_cast<    \
  |  |  929|   275k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   275k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8972|  56.0k|{
 8973|  56.0k|    T value;
 8974|  56.0k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  56.0k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  56.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  56.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  56.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  56.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.20k, False: 52.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.20k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.20k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.20k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.20k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.20k|    }                                                  \
  |  |  |  | 3671|  56.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  52.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  52.8k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  52.8k|    static_cast<    \
  |  |  929|  52.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  52.8k|    static_cast<    \
  |  |  929|  52.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  56.0k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8866|   277k|{
 8867|   277k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   277k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   277k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   277k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   277k|    static_cast<    \
  |  |  929|   277k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   277k|    static_cast<    \
  |  |  929|   277k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   277k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7974|   555k|    {
 7975|   555k|        return m_str;
 7976|   555k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   555k|{
 8820|   555k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   555k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38.4k, False: 517k]
  |  |  ------------------
  ------------------
 8821|  38.4k|        return unexpected(result.error());
 8822|  38.4k|    }
 8823|   517k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   517k|    static_cast<    \
  |  |  929|   517k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   517k|    static_cast<    \
  |  |  929|   517k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   555k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  41.6k|        : base(unexpect, std::move(e.error())),
 1474|  41.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  41.6k|    {
 1476|  41.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  41.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  41.6k|          m_has_value(false)
  446|  41.6k|    {
  447|  41.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   612k|    {
 1177|   612k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2ESE_ONS6_5tupleIJeEEE:
 5828|   570k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   570k|    static_cast<    \
  |  |  929|   570k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   570k|    static_cast<    \
  |  |  929|   570k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|   570k|    {
 5830|   570k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|   570k|        : base(std::in_place, std::forward<U>(val)),
 1428|   570k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   570k|    {
 1430|   570k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|   570k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   570k|    {
  437|   570k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7969|   555k|        : m_str(r.str)
 7970|   555k|    {
 7971|   555k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   612k|    {
 1598|   612k|        return has_value();
 1599|   612k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.18M|    {
  485|  1.18M|        return m_has_value;
  486|  1.18M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1672|   570k|    {
 1673|   570k|        return &value();
 1674|   570k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|   570k|    {
 1627|   570k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   570k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   570k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   570k|        return this->get_value();
 1629|   570k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   570k|    {
  451|   570k|        return m_value;
  452|   570k|    }
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8933|   277k|{
 8934|   277k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   277k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   277k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   277k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   277k|    static_cast<    \
  |  |  929|   277k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   277k|    static_cast<    \
  |  |  929|   277k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   277k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8972|  56.6k|{
 8973|  56.6k|    T value;
 8974|  56.6k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  56.6k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  56.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  56.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  56.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  56.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.20k, False: 53.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.20k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.20k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.20k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.20k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.20k|    }                                                  \
  |  |  |  | 3671|  56.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  53.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  53.4k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  53.4k|    static_cast<    \
  |  |  929|  53.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  53.4k|    static_cast<    \
  |  |  929|  53.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  56.6k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   256k|    {
 2724|   256k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   256k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   256k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   256k|    {
 2705|   256k|        return decay_copy(t.begin());
 2706|   256k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1948|  5.72M|{
 1949|  5.72M|    return SCN_FWD(t);
  ------------------
  |  |  930|  5.72M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  5.72M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.72M|    {
 2781|  1.72M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.72M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.72M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.72M|    {
 2763|  1.72M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.72M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.72M|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJfEEEDav:
 5395|   481k|{
 5396|   481k|    detail::check_scan_arg_types<Args...>();
 5397|   481k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   481k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEEC2Ev:
 5347|   481k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5348|   481k|    {
 5349|   481k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   481k|    {
 5360|   481k|        return {detail::make_arg<
 5361|   481k|            kind, Context,
 5362|   481k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   481k|                                 typename Context::char_type>::value>(args)...};
 5364|   481k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE16EfvEEPvRT2_:
 5169|   481k|{
 5170|   481k|    return make_value<Context>(value).ref_value;
 5171|   481k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEfEEDaRT0_:
 5119|   525k|{
 5120|   525k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5123|   525k|                                  needs_context_tag>) {
 5124|   525k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   525k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|       |    }
 5126|       |    else {
 5127|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|       |            value, context_tag<Context>{}));
 5129|       |    }
 5130|   525k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERf:
 4958|   525k|    {                                                                        \
 4959|   525k|        return val;                                                          \
 4960|   525k|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8590|   391k|{
 8591|   391k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   391k|    auto result = vscan_impl(buffer, format, args);
 8594|   391k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   391k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 115k, False: 276k]
  |  |  ------------------
  ------------------
 8595|   115k|        return unexpected(result.error());
 8596|   115k|    }
 8597|   276k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   276k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   391k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 4719|   860k|{
 4720|   860k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|   860k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|   860k|                  "\n"
 4724|   860k|                  "Unsupported range type given as input to a scanning "
 4725|   860k|                  "function.\n"
 4726|   860k|                  "A range needs to have a character type (value type) "
 4727|   860k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|   860k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|   860k|                  "to be included.\n"
 4730|   860k|                  "See the scnlib documentation for more details.");
 4731|   860k|    static_assert(
 4732|   860k|        !std::is_same_v<T, custom_char_traits>,
 4733|   860k|        "\n"
 4734|   860k|        "Unsupported range type given as input to a scanning "
 4735|   860k|        "function.\n"
 4736|   860k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|   860k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|   860k|        "not supported.");
 4739|   860k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|   860k|                  "\n"
 4741|   860k|                  "Unsupported range type given as input to a scanning "
 4742|   860k|                  "function.\n"
 4743|   860k|                  "file_marker_found cannot be used as an "
 4744|   860k|                  "source range type to scn::scan.\n"
 4745|   860k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|   860k|                  "and do not provide an explicit source range, "
 4747|   860k|                  "or use scn::scan with a FILE* directly.");
 4748|   860k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|   860k|                  "\n"
 4750|   860k|                  "Unsupported range type given as input to a scanning "
 4751|   860k|                  "function.\n"
 4752|   860k|                  "In order to be scannable, a range needs to satisfy "
 4753|   860k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|   860k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|   860k|                  "\n"
 4756|   860k|                  "Unsupported range type given as input to a scanning "
 4757|   860k|                  "function.\n"
 4758|   860k|                  "A range needs to model forward_range and have a valid "
 4759|   860k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|   860k|                  "Examples of scannable ranges are std::string, "
 4761|   860k|                  "std::string_view, "
 4762|   860k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|   860k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|   860k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|   860k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 4658|   860k|{
 4659|   860k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 4660|   860k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4661|       |    }
 4662|       |    else {
 4663|       |        return invalid_char_type{};
 4664|       |    }
 4665|   860k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   860k|    {
 2855|   860k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   860k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   860k|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   860k|    {
 2836|   860k|        return t.data();
 2837|   860k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3230|   860k|    {
 3231|   860k|        return ranges::empty(derived())
  ------------------
  |  Branch (3231:16): [True: 1.74k, False: 858k]
  ------------------
 3232|   860k|                   ? nullptr
 3233|   860k|                   : std::addressof(*ranges::begin(derived()));
 3234|   860k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|   860k|    {
 3005|   860k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   860k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|   860k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|   860k|    {
 2978|   860k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   860k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|   860k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5emptyEv:
 3338|  1.60M|    {
 3339|  1.60M|        return m_iterator == m_sentinel;
 3340|  1.60M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3184|  1.71M|    {
 3185|  1.71M|        return static_cast<const D&>(*this);
 3186|  1.71M|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.46M|    {
 2724|  1.46M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.46M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.46M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.46M|    {
 2705|  1.46M|        return decay_copy(t.begin());
 2706|  1.46M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3329|  30.6M|    {
 3330|  30.6M|        return m_iterator;
 3331|  30.6M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|   860k|    {
 2930|   860k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|   860k|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|   860k|    {
 2896|   860k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|   860k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|   860k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3345|  3.86M|    {
 3346|  3.86M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3347|  3.86M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1473|   249k|        : base(unexpect, std::move(e.error())),
 1474|   249k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   249k|    {
 1476|   249k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|   249k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   249k|          m_has_value(false)
  446|   249k|    {
  447|   249k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   860k|    {
 1177|   860k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5922|   610k|{
 5923|       |    if constexpr (ranges::random_access_iterator<
 5924|   610k|                      ranges::iterator_t<SourceRange>>) {
 5925|   610k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|       |    }
 5927|       |    else {
 5928|       |        auto it = ranges::begin(source);
 5929|       |        while (n > 0) {
 5930|       |            --n;
 5931|       |            ++it;
 5932|       |        }
 5933|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|       |    }
 5935|   610k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.65M|    {
 2724|  1.65M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.65M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.65M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.65M|    {
 2705|  1.65M|        return decay_copy(t.begin());
 2706|  1.65M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 5909|   610k|{
 5910|   610k|    return ranges::end(source);
 5911|   610k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   610k|    {
 2781|   610k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   610k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   610k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   610k|    {
 2763|   610k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   610k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   610k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3333|  17.7M|    {
 3334|  17.7M|        return m_sentinel;
 3335|  17.7M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|   610k|        : base(std::in_place, std::forward<U>(val)),
 1428|   610k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   610k|    {
 1430|   610k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  435|   610k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   610k|    {
  437|   610k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7974|   240k|    {
 7975|   240k|        return m_str;
 7976|   240k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJfEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5424|   481k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5425|   481k|    {
 5426|   481k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE12arg_pointersEv:
 5378|   481k|    {
 5379|   481k|        return m_argptrs;
 5380|   481k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5476|  1.56M|        : m_desc(desc), m_builtin_values(data)
 5477|  1.56M|    {
 5478|  1.56M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   240k|{
 8820|   240k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   240k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 76.8k, False: 163k]
  |  |  ------------------
  ------------------
 8821|  76.8k|        return unexpected(result.error());
 8822|  76.8k|    }
 8823|   163k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   163k|    static_cast<    \
  |  |  929|   163k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   163k|    static_cast<    \
  |  |  929|   163k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   240k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1597|   860k|    {
 1598|   860k|        return has_value();
 1599|   860k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.72M|    {
  485|  1.72M|        return m_has_value;
  486|  1.72M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1603|   249k|    {
 1604|   249k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   249k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   249k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   249k|        return this->get_unexpected().error();
 1606|   249k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   249k|    {
  468|   249k|        return m_unexpected;
  469|   249k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  83.2k|        : base(unexpect, std::move(e.error())),
 1474|  83.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  83.2k|    {
 1476|  83.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  83.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  83.2k|          m_has_value(false)
  446|  83.2k|    {
  447|  83.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   263k|    {
 1177|   263k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1652|   552k|    {
 1653|   552k|        return value();
 1654|   552k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|   610k|    {
 1627|   610k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   610k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   610k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   610k|        return this->get_value();
 1629|   610k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   610k|    {
  451|   610k|        return m_value;
  452|   610k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2ES8_ONSt3__15tupleIJfEEE:
 5828|   179k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   179k|    static_cast<    \
  |  |  929|   179k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   179k|    static_cast<    \
  |  |  929|   179k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|   179k|    {
 5830|   179k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5679|   610k|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|   610k|    static_cast<    \
  |  |  929|   610k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5680|   610k|    {
 5681|   610k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|   179k|        : base(std::in_place, std::forward<U>(val)),
 1428|   179k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   179k|    {
 1430|   179k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|   179k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   179k|    {
  437|   179k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE4argsEv:
 5373|   481k|    {
 5374|   481k|        return m_args;
 5375|   481k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3314|  10.9M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  10.9M|    static_cast<    \
  |  |  929|  10.9M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  10.9M|    static_cast<    \
  |  |  929|  10.9M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3315|  10.9M|    {
 3316|  10.9M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7695|  1.56M|{
 7696|  1.56M|    return s;
 7697|  1.56M|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7667|  1.56M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7969|   240k|        : m_str(r.str)
 7970|   240k|    {
 7971|   240k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   263k|    {
 1598|   263k|        return has_value();
 1599|   263k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   442k|    {
  485|   442k|        return m_has_value;
  486|   442k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEptEv:
 1672|   179k|    {
 1673|   179k|        return &value();
 1674|   179k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|   179k|    {
 1627|   179k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   179k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   179k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   179k|        return this->get_value();
 1629|   179k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   179k|    {
  451|   179k|        return m_value;
  452|   179k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 5697|   610k|    {
 5698|   610k|        return ranges::begin(m_range);
 5699|   610k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8606|   391k|{
 8607|   391k|#if !SCN_DISABLE_LOCALE
 8608|   391k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   391k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   391k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   391k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   391k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   391k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 115k, False: 276k]
  |  |  ------------------
  ------------------
 8615|   115k|        return unexpected(result.error());
 8616|   115k|    }
 8617|   276k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   276k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   391k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEfEENS0_14basic_scan_argIT_EERT0_:
 5154|  44.5k|{
 5155|  44.5k|    check_scan_arg_types<T>();
 5156|       |
 5157|  44.5k|    basic_scan_arg<Context> arg;
 5158|  44.5k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  44.5k|    arg.m_value = make_value<Context>(value);
 5160|  44.5k|    return arg;
 5161|  44.5k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5240|  1.72M|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|  77.0k|{
 8631|  77.0k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|  77.0k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|  77.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  77.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.2k, False: 57.8k]
  |  |  ------------------
  ------------------
 8635|  19.2k|        return unexpected(result.error());
 8636|  19.2k|    }
 8637|  57.8k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  57.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|  77.0k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1662|  57.8k|    {
 1663|  57.8k|        return std::move(value());
 1664|  57.8k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJdEEEDav:
 5395|   537k|{
 5396|   537k|    detail::check_scan_arg_types<Args...>();
 5397|   537k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   537k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEEC2Ev:
 5347|   537k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5348|   537k|    {
 5349|   537k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   537k|    {
 5360|   537k|        return {detail::make_arg<
 5361|   537k|            kind, Context,
 5362|   537k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   537k|                                 typename Context::char_type>::value>(args)...};
 5364|   537k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE17EdvEEPvRT2_:
 5169|   537k|{
 5170|   537k|    return make_value<Context>(value).ref_value;
 5171|   537k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEdEEDaRT0_:
 5119|   591k|{
 5120|   591k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5123|   591k|                                  needs_context_tag>) {
 5124|   591k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   591k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|       |    }
 5126|       |    else {
 5127|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|       |            value, context_tag<Context>{}));
 5129|       |    }
 5130|   591k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERd:
 4958|   591k|    {                                                                        \
 4959|   591k|        return val;                                                          \
 4960|   591k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7974|   268k|    {
 7975|   268k|        return m_str;
 7976|   268k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5424|   537k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5425|   537k|    {
 5426|   537k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12arg_pointersEv:
 5378|   537k|    {
 5379|   537k|        return m_argptrs;
 5380|   537k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   268k|{
 8820|   268k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   268k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 76.8k, False: 191k]
  |  |  ------------------
  ------------------
 8821|  76.8k|        return unexpected(result.error());
 8822|  76.8k|    }
 8823|   191k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   191k|    static_cast<    \
  |  |  929|   191k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   191k|    static_cast<    \
  |  |  929|   191k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   268k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  83.2k|        : base(unexpect, std::move(e.error())),
 1474|  83.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  83.2k|    {
 1476|  83.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  83.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  83.2k|          m_has_value(false)
  446|  83.2k|    {
  447|  83.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   295k|    {
 1177|   295k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2ES8_ONSt3__15tupleIJdEEE:
 5828|   212k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   212k|    static_cast<    \
  |  |  929|   212k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   212k|    static_cast<    \
  |  |  929|   212k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|   212k|    {
 5830|   212k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|   212k|        : base(std::in_place, std::forward<U>(val)),
 1428|   212k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   212k|    {
 1430|   212k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|   212k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   212k|    {
  437|   212k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE4argsEv:
 5373|   537k|    {
 5374|   537k|        return m_args;
 5375|   537k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7969|   268k|        : m_str(r.str)
 7970|   268k|    {
 7971|   268k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   295k|    {
 1598|   295k|        return has_value();
 1599|   295k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   508k|    {
  485|   508k|        return m_has_value;
  486|   508k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEptEv:
 1672|   212k|    {
 1673|   212k|        return &value();
 1674|   212k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|   212k|    {
 1627|   212k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   212k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   212k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   212k|        return this->get_value();
 1629|   212k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   212k|    {
  451|   212k|        return m_value;
  452|   212k|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEdEENS0_14basic_scan_argIT_EERT0_:
 5154|  53.8k|{
 5155|  53.8k|    check_scan_arg_types<T>();
 5156|       |
 5157|  53.8k|    basic_scan_arg<Context> arg;
 5158|  53.8k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  53.8k|    arg.m_value = make_value<Context>(value);
 5160|  53.8k|    return arg;
 5161|  53.8k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJeEEEDav:
 5395|   547k|{
 5396|   547k|    detail::check_scan_arg_types<Args...>();
 5397|   547k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   547k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEEC2Ev:
 5347|   547k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5348|   547k|    {
 5349|   547k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   547k|    {
 5360|   547k|        return {detail::make_arg<
 5361|   547k|            kind, Context,
 5362|   547k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   547k|                                 typename Context::char_type>::value>(args)...};
 5364|   547k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE18EevEEPvRT2_:
 5169|   547k|{
 5170|   547k|    return make_value<Context>(value).ref_value;
 5171|   547k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEeEEDaRT0_:
 5119|   603k|{
 5120|   603k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5123|   603k|                                  needs_context_tag>) {
 5124|   603k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   603k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|       |    }
 5126|       |    else {
 5127|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|       |            value, context_tag<Context>{}));
 5129|       |    }
 5130|   603k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERe:
 4958|   603k|    {                                                                        \
 4959|   603k|        return val;                                                          \
 4960|   603k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7974|   273k|    {
 7975|   273k|        return m_str;
 7976|   273k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJeEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5424|   547k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5425|   547k|    {
 5426|   547k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE12arg_pointersEv:
 5378|   547k|    {
 5379|   547k|        return m_argptrs;
 5380|   547k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   273k|{
 8820|   273k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   273k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 76.8k, False: 197k]
  |  |  ------------------
  ------------------
 8821|  76.8k|        return unexpected(result.error());
 8822|  76.8k|    }
 8823|   197k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   197k|    static_cast<    \
  |  |  929|   197k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   197k|    static_cast<    \
  |  |  929|   197k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   273k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  83.2k|        : base(unexpect, std::move(e.error())),
 1474|  83.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  83.2k|    {
 1476|  83.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  83.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  83.2k|          m_has_value(false)
  446|  83.2k|    {
  447|  83.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   301k|    {
 1177|   301k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2ES8_ONSt3__15tupleIJeEEE:
 5828|   218k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   218k|    static_cast<    \
  |  |  929|   218k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   218k|    static_cast<    \
  |  |  929|   218k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|   218k|    {
 5830|   218k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|   218k|        : base(std::in_place, std::forward<U>(val)),
 1428|   218k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   218k|    {
 1430|   218k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|   218k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   218k|    {
  437|   218k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE4argsEv:
 5373|   547k|    {
 5374|   547k|        return m_args;
 5375|   547k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7969|   273k|        : m_str(r.str)
 7970|   273k|    {
 7971|   273k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   301k|    {
 1598|   301k|        return has_value();
 1599|   301k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   520k|    {
  485|   520k|        return m_has_value;
  486|   520k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEptEv:
 1672|   218k|    {
 1673|   218k|        return &value();
 1674|   218k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|   218k|    {
 1627|   218k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   218k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   218k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   218k|        return this->get_value();
 1629|   218k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   218k|    {
  451|   218k|        return m_value;
  452|   218k|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEeEENS0_14basic_scan_argIT_EERT0_:
 5154|  55.5k|{
 5155|  55.5k|    check_scan_arg_types<T>();
 5156|       |
 5157|  55.5k|    basic_scan_arg<Context> arg;
 5158|  55.5k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  55.5k|    arg.m_value = make_value<Context>(value);
 5160|  55.5k|    return arg;
 5161|  55.5k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   249k|    {
 2724|   249k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   249k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   249k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   249k|    {
 2705|   249k|        return decay_copy(t.begin());
 2706|   249k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 1948|  17.1M|{
 1949|  17.1M|    return SCN_FWD(t);
  ------------------
  |  |  930|  17.1M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  17.1M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.71M|    {
 2781|  1.71M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.71M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.71M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.71M|    {
 2763|  1.71M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.71M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.71M|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8590|   391k|{
 8591|   391k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   391k|    auto result = vscan_impl(buffer, format, args);
 8594|   391k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   391k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 115k, False: 276k]
  |  |  ------------------
  ------------------
 8595|   115k|        return unexpected(result.error());
 8596|   115k|    }
 8597|   276k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   276k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   391k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4719|   859k|{
 4720|   859k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|   859k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|   859k|                  "\n"
 4724|   859k|                  "Unsupported range type given as input to a scanning "
 4725|   859k|                  "function.\n"
 4726|   859k|                  "A range needs to have a character type (value type) "
 4727|   859k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|   859k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|   859k|                  "to be included.\n"
 4730|   859k|                  "See the scnlib documentation for more details.");
 4731|   859k|    static_assert(
 4732|   859k|        !std::is_same_v<T, custom_char_traits>,
 4733|   859k|        "\n"
 4734|   859k|        "Unsupported range type given as input to a scanning "
 4735|   859k|        "function.\n"
 4736|   859k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|   859k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|   859k|        "not supported.");
 4739|   859k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|   859k|                  "\n"
 4741|   859k|                  "Unsupported range type given as input to a scanning "
 4742|   859k|                  "function.\n"
 4743|   859k|                  "file_marker_found cannot be used as an "
 4744|   859k|                  "source range type to scn::scan.\n"
 4745|   859k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|   859k|                  "and do not provide an explicit source range, "
 4747|   859k|                  "or use scn::scan with a FILE* directly.");
 4748|   859k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|   859k|                  "\n"
 4750|   859k|                  "Unsupported range type given as input to a scanning "
 4751|   859k|                  "function.\n"
 4752|   859k|                  "In order to be scannable, a range needs to satisfy "
 4753|   859k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|   859k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|   859k|                  "\n"
 4756|   859k|                  "Unsupported range type given as input to a scanning "
 4757|   859k|                  "function.\n"
 4758|   859k|                  "A range needs to model forward_range and have a valid "
 4759|   859k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|   859k|                  "Examples of scannable ranges are std::string, "
 4761|   859k|                  "std::string_view, "
 4762|   859k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|   859k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|   859k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|   859k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4689|   859k|{
 4690|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 4691|       |        return file_marker_found{};
 4692|       |    }
 4693|       |    else if constexpr (!ranges::forward_range<Range>) {
 4694|       |        if constexpr (ranges::range<Range>) {
 4695|       |            return insufficient_range{};
 4696|       |        }
 4697|       |        else {
 4698|       |            return invalid_input_range{};
 4699|       |        }
 4700|       |    }
 4701|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 4702|       |        return invalid_char_type{};
 4703|       |    }
 4704|   859k|    else {
 4705|   859k|        return make_forward_scan_buffer(r);
 4706|   859k|    }
 4707|   859k|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4523|   859k|{
 4524|   859k|    return basic_scan_forward_buffer_impl(range);
 4525|   859k|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4408|   859k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  930|   859k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4409|   859k|          m_cursor(ranges::begin(*m_range))
 4410|   859k|    {
 4411|   859k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4380|   859k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4381|   859k|    {
 4382|   859k|    }
_ZN3scn2v36detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4149|   859k|        : m_current_view(sv), m_is_contiguous(false)
 4150|   859k|    {
 4151|   859k|    }
_ZN3scn2v36detail17basic_scan_bufferIwED2Ev:
 4065|   859k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.46M|    {
 2724|  1.46M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.46M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.46M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.46M|    {
 2705|  1.46M|        return decay_copy(t.begin());
 2706|  1.46M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3329|  2.07M|    {
 3330|  2.07M|        return m_iterator;
 3331|  2.07M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4414|  4.29M|    {
 4415|  4.29M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4415:13): [True: 197k, False: 4.09M]
  ------------------
 4416|   197k|            return false;
 4417|   197k|        }
 4418|  4.09M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4419|  4.09M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  4.09M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.09M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4420|  4.09M|        }
 4421|  4.09M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4421:13): [True: 3.23M, False: 858k]
  ------------------
 4422|  3.23M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4423|  3.23M|                                          this->m_current_view.begin(),
 4424|  3.23M|                                          this->m_current_view.end());
 4425|  3.23M|        }
 4426|  4.09M|        m_latest = *m_cursor;
 4427|  4.09M|        ++m_cursor;
 4428|  4.09M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4429|  4.09M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4430|  4.09M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  4.09M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.09M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4431|  4.09M|        }
 4432|  4.09M|        return true;
 4433|  4.29M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  12.4M|    {
 2781|  12.4M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  12.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  12.4M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  12.4M|    {
 2763|  12.4M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  12.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  12.4M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3333|  13.1M|    {
 3334|  13.1M|        return m_sentinel;
 3335|  13.1M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE4syncEl:
 4070|   859k|    {
 4071|   859k|        SCN_UNUSED(position);
  ------------------
  |  |  909|   859k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4072|   859k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1473|   249k|        : base(unexpect, std::move(e.error())),
 1474|   249k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   249k|    {
 1476|   249k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  444|   249k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   249k|          m_has_value(false)
  446|   249k|    {
  447|   249k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   859k|    {
 1177|   859k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5922|   610k|{
 5923|       |    if constexpr (ranges::random_access_iterator<
 5924|   610k|                      ranges::iterator_t<SourceRange>>) {
 5925|   610k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|       |    }
 5927|       |    else {
 5928|       |        auto it = ranges::begin(source);
 5929|       |        while (n > 0) {
 5930|       |            --n;
 5931|       |            ++it;
 5932|       |        }
 5933|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|       |    }
 5935|   610k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   610k|    {
 2724|   610k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   610k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   610k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   610k|    {
 2705|   610k|        return decay_copy(t.begin());
 2706|   610k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 5909|   610k|{
 5910|   610k|    return ranges::end(source);
 5911|   610k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   610k|    {
 2781|   610k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   610k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   610k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   610k|    {
 2763|   610k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   610k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   610k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1427|   610k|        : base(std::in_place, std::forward<U>(val)),
 1428|   610k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   610k|    {
 1430|   610k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  435|   610k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   610k|    {
  437|   610k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7974|   240k|    {
 7975|   240k|        return m_str;
 7976|   240k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   240k|{
 8820|   240k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   240k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 76.8k, False: 163k]
  |  |  ------------------
  ------------------
 8821|  76.8k|        return unexpected(result.error());
 8822|  76.8k|    }
 8823|   163k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   163k|    static_cast<    \
  |  |  929|   163k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   163k|    static_cast<    \
  |  |  929|   163k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   240k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1597|   859k|    {
 1598|   859k|        return has_value();
 1599|   859k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.71M|    {
  485|  1.71M|        return m_has_value;
  486|  1.71M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1603|   249k|    {
 1604|   249k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   249k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   249k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   249k|        return this->get_unexpected().error();
 1606|   249k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   249k|    {
  468|   249k|        return m_unexpected;
  469|   249k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  83.2k|        : base(unexpect, std::move(e.error())),
 1474|  83.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  83.2k|    {
 1476|  83.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  83.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  83.2k|          m_has_value(false)
  446|  83.2k|    {
  447|  83.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   262k|    {
 1177|   262k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1652|   552k|    {
 1653|   552k|        return value();
 1654|   552k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1626|   610k|    {
 1627|   610k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   610k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   610k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   610k|        return this->get_value();
 1629|   610k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   610k|    {
  451|   610k|        return m_value;
  452|   610k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2ESE_ONS6_5tupleIJfEEE:
 5828|   179k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   179k|    static_cast<    \
  |  |  929|   179k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   179k|    static_cast<    \
  |  |  929|   179k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|   179k|    {
 5830|   179k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2EOSF_:
 5679|   610k|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|   610k|    static_cast<    \
  |  |  929|   610k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5680|   610k|    {
 5681|   610k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|   179k|        : base(std::in_place, std::forward<U>(val)),
 1428|   179k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   179k|    {
 1430|   179k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|   179k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   179k|    {
  437|   179k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3314|  1.46M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.46M|    static_cast<    \
  |  |  929|  1.46M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.46M|    static_cast<    \
  |  |  929|  1.46M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3315|  1.46M|    {
 3316|  1.46M|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7969|   240k|        : m_str(r.str)
 7970|   240k|    {
 7971|   240k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   262k|    {
 1598|   262k|        return has_value();
 1599|   262k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   442k|    {
  485|   442k|        return m_has_value;
  486|   442k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1672|   179k|    {
 1673|   179k|        return &value();
 1674|   179k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|   179k|    {
 1627|   179k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   179k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   179k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   179k|        return this->get_value();
 1629|   179k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   179k|    {
  451|   179k|        return m_value;
  452|   179k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 5697|   610k|    {
 5698|   610k|        return ranges::begin(m_range);
 5699|   610k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8606|   391k|{
 8607|   391k|#if !SCN_DISABLE_LOCALE
 8608|   391k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   391k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   391k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   391k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   391k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   391k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 115k, False: 276k]
  |  |  ------------------
  ------------------
 8615|   115k|        return unexpected(result.error());
 8616|   115k|    }
 8617|   276k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   276k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   391k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|  76.9k|{
 8631|  76.9k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|  76.9k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|  76.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  76.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.2k, False: 57.7k]
  |  |  ------------------
  ------------------
 8635|  19.2k|        return unexpected(result.error());
 8636|  19.2k|    }
 8637|  57.7k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  57.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|  76.9k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSJ_v:
 1662|  57.7k|    {
 1663|  57.7k|        return std::move(value());
 1664|  57.7k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7974|   268k|    {
 7975|   268k|        return m_str;
 7976|   268k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   268k|{
 8820|   268k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   268k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 76.8k, False: 191k]
  |  |  ------------------
  ------------------
 8821|  76.8k|        return unexpected(result.error());
 8822|  76.8k|    }
 8823|   191k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   191k|    static_cast<    \
  |  |  929|   191k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   191k|    static_cast<    \
  |  |  929|   191k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   268k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  83.2k|        : base(unexpect, std::move(e.error())),
 1474|  83.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  83.2k|    {
 1476|  83.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  83.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  83.2k|          m_has_value(false)
  446|  83.2k|    {
  447|  83.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   295k|    {
 1177|   295k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2ESE_ONS6_5tupleIJdEEE:
 5828|   212k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   212k|    static_cast<    \
  |  |  929|   212k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   212k|    static_cast<    \
  |  |  929|   212k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|   212k|    {
 5830|   212k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|   212k|        : base(std::in_place, std::forward<U>(val)),
 1428|   212k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   212k|    {
 1430|   212k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|   212k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   212k|    {
  437|   212k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7969|   268k|        : m_str(r.str)
 7970|   268k|    {
 7971|   268k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   295k|    {
 1598|   295k|        return has_value();
 1599|   295k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   507k|    {
  485|   507k|        return m_has_value;
  486|   507k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1672|   212k|    {
 1673|   212k|        return &value();
 1674|   212k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|   212k|    {
 1627|   212k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   212k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   212k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   212k|        return this->get_value();
 1629|   212k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   212k|    {
  451|   212k|        return m_value;
  452|   212k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7974|   273k|    {
 7975|   273k|        return m_str;
 7976|   273k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   273k|{
 8820|   273k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   273k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 76.8k, False: 196k]
  |  |  ------------------
  ------------------
 8821|  76.8k|        return unexpected(result.error());
 8822|  76.8k|    }
 8823|   196k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   196k|    static_cast<    \
  |  |  929|   196k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   196k|    static_cast<    \
  |  |  929|   196k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   273k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  83.2k|        : base(unexpect, std::move(e.error())),
 1474|  83.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  83.2k|    {
 1476|  83.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  83.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  83.2k|          m_has_value(false)
  446|  83.2k|    {
  447|  83.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   301k|    {
 1177|   301k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2ESE_ONS6_5tupleIJeEEE:
 5828|   218k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   218k|    static_cast<    \
  |  |  929|   218k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   218k|    static_cast<    \
  |  |  929|   218k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|   218k|    {
 5830|   218k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|   218k|        : base(std::in_place, std::forward<U>(val)),
 1428|   218k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   218k|    {
 1430|   218k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|   218k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   218k|    {
  437|   218k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7969|   273k|        : m_str(r.str)
 7970|   273k|    {
 7971|   273k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   301k|    {
 1598|   301k|        return has_value();
 1599|   301k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   519k|    {
  485|   519k|        return m_has_value;
  486|   519k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1672|   218k|    {
 1673|   218k|        return &value();
 1674|   218k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|   218k|    {
 1627|   218k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   218k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   218k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   218k|        return this->get_value();
 1629|   218k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   218k|    {
  451|   218k|        return m_value;
  452|   218k|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3566|  5.59M|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3567|  5.59M|    {
 3568|  5.59M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  5.59M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|  5.59M|    }
_ZNK3scn2v310scan_errorcvbEv:
 3573|  23.4M|    {
 3574|  23.4M|        return m_code == good;
 3575|  23.4M|    }
_ZNK3scn2v310scan_error4codeEv:
 3584|   576k|    {
 3585|   576k|        return m_code;
 3586|   576k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3329|  81.6M|    {
 3330|  81.6M|        return m_iterator;
 3331|  81.6M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3329|  36.3M|    {
 3330|  36.3M|        return m_iterator;
 3331|  36.3M|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6259|  3.65M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter12on_localizedEv:
 6271|   977k|    {
 6272|   977k|        if constexpr (!SCN_DISABLE_LOCALE) {
 6273|   977k|            m_specs.localized = true;
 6274|       |        }
 6275|       |        else {
 6276|       |            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 6277|       |        }
 6278|   977k|    }
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6302|  2.67M|    {
 6303|  2.67M|        m_specs.type = type;
 6304|  2.67M|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6375|  3.65M|    {
 6376|  3.65M|        return static_cast<bool>(m_error);
 6377|  3.65M|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3608|   576k|{
 3609|   576k|    return a.code() == b;
 3610|   576k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3612|   576k|{
 3613|   576k|    return !(a == b);
 3614|   576k|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7062|   977k|{
 7063|   977k|    switch (type) {
 7064|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7064:9): [True: 0, False: 977k]
  ------------------
 7065|      0|            return arg_type_category::none;
 7066|       |
 7067|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7067:9): [True: 0, False: 977k]
  ------------------
 7068|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7068:9): [True: 0, False: 977k]
  ------------------
 7069|      0|        case arg_type::int_type:
  ------------------
  |  Branch (7069:9): [True: 0, False: 977k]
  ------------------
 7070|      0|        case arg_type::long_type:
  ------------------
  |  Branch (7070:9): [True: 0, False: 977k]
  ------------------
 7071|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (7071:9): [True: 0, False: 977k]
  ------------------
 7072|      0|            return arg_type_category::integer;
 7073|       |
 7074|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7074:9): [True: 0, False: 977k]
  ------------------
 7075|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7075:9): [True: 0, False: 977k]
  ------------------
 7076|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (7076:9): [True: 0, False: 977k]
  ------------------
 7077|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (7077:9): [True: 0, False: 977k]
  ------------------
 7078|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (7078:9): [True: 0, False: 977k]
  ------------------
 7079|      0|            return arg_type_category::unsigned_integer;
 7080|       |
 7081|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7081:9): [True: 0, False: 977k]
  ------------------
 7082|      0|            return arg_type_category::pointer;
 7083|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7083:9): [True: 0, False: 977k]
  ------------------
 7084|      0|            return arg_type_category::boolean;
 7085|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7085:9): [True: 0, False: 977k]
  ------------------
 7086|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7086:9): [True: 0, False: 977k]
  ------------------
 7087|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7087:9): [True: 0, False: 977k]
  ------------------
 7088|      0|            return arg_type_category::character;
 7089|       |
 7090|   303k|        case arg_type::float_type:
  ------------------
  |  Branch (7090:9): [True: 303k, False: 673k]
  ------------------
 7091|   636k|        case arg_type::double_type:
  ------------------
  |  Branch (7091:9): [True: 333k, False: 643k]
  ------------------
 7092|   977k|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7092:9): [True: 340k, False: 636k]
  ------------------
 7093|   977k|            return arg_type_category::floating;
 7094|       |
 7095|      0|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7095:9): [True: 0, False: 977k]
  ------------------
 7096|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7096:9): [True: 0, False: 977k]
  ------------------
 7097|      0|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7097:9): [True: 0, False: 977k]
  ------------------
 7098|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7098:9): [True: 0, False: 977k]
  ------------------
 7099|      0|            return arg_type_category::string;
 7100|       |
 7101|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7101:9): [True: 0, False: 977k]
  ------------------
 7102|      0|            return arg_type_category::custom;
 7103|       |
 7104|      0|            SCN_CLANG_PUSH
 7105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7106|      0|        default:
  ------------------
  |  Branch (7106:9): [True: 0, False: 977k]
  ------------------
 7107|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7108|   977k|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7109|   977k|            SCN_CLANG_POP
 7110|   977k|    }
 7111|       |
 7112|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7113|   977k|}
_ZN3scn2v36ranges6detail5size_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|  4.31M|    {
 2896|  4.31M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  4.31M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|  4.31M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSE_:
 2929|  4.31M|    {
 2930|  4.31M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|  4.31M|    }
_ZN3scn2v36ranges6detail6ssize_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISE_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSE_:
 2952|  4.31M|    {
 2953|  4.31M|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 2954|  4.31M|    }
_ZNK3scn2v36ranges6detail6ssize_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSE_:
 2961|  4.31M|    {
 2962|  4.31M|        return fn::impl(std::forward<T>(t));
 2963|  4.31M|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA20_KcEEEDaDpOT_:
 3653|  1.03k|{
 3654|  1.03k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.03k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  1.03k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
 3653|  3.29k|{
 3654|  3.29k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  3.29k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  3.29k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA38_KcEEEDaDpOT_:
 3653|  43.3k|{
 3654|  43.3k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  43.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  43.3k|}
_ZN3scn2v36detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7192|  3.65M|{
 7193|  3.65M|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7193:9): [True: 2.67M, False: 977k]
  ------------------
 7194|  3.65M|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (7194:10): [True: 0, False: 2.67M]
  ------------------
 7195|  2.67M|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (7195:10): [True: 0, False: 2.67M]
  ------------------
 7196|      0|        SCN_UNLIKELY_ATTR
 7197|      0|        return handler.on_error("Invalid type specifier for float type");
 7198|      0|    }
 7199|  3.65M|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4194|   520M|    {
 4195|   520M|        return m_end == nullptr;
 4196|   520M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3714|  1.38M|{
 3715|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3716|       |                                          const CharT*, const CharT*>) {
 3717|       |        return {first, last};
 3718|       |    }
 3719|  1.38M|    else {
 3720|  1.38M|        return {first, static_cast<size_t>(std::distance(first, last))};
 3721|  1.38M|    }
 3722|  1.38M|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4210|  6.79M|    {
 4211|  6.79M|        if (!stores_parent()) {
  ------------------
  |  Branch (4211:13): [True: 0, False: 6.79M]
  ------------------
 4212|      0|            return make_string_view_from_pointers(
 4213|      0|                static_cast<const CharT*>(m_begin) + position(),
 4214|      0|                static_cast<const CharT*>(m_end));
 4215|      0|        }
 4216|  6.79M|        return parent()->get_segment_starting_at(position());
 4217|  6.79M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4204|   289M|    {
 4205|   289M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|   289M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   289M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4206|   289M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4207|   289M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4100|  6.79M|    {
 4101|  6.79M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  6.79M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.97M, False: 3.81M]
  |  |  ------------------
  ------------------
 4102|  6.79M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4103|  2.97M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4104|  2.97M|        }
 4105|  3.81M|        const auto start = pos - m_putback_buffer.size();
 4106|  3.81M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|  3.81M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.81M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4107|  3.81M|        return m_current_view.substr(start);
 4108|  3.81M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4199|  4.73M|    {
 4200|  4.73M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  4.73M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.73M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4201|  4.73M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4202|  4.73M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4189|  12.4M|    {
 4190|  12.4M|        return m_position;
 4191|  12.4M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE13is_contiguousEv:
 4122|  5.39M|    {
 4123|  5.39M|        return m_is_contiguous;
 4124|  5.39M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4194|   116M|    {
 4195|   116M|        return m_end == nullptr;
 4196|   116M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3714|   594k|{
 3715|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3716|       |                                          const CharT*, const CharT*>) {
 3717|       |        return {first, last};
 3718|       |    }
 3719|   594k|    else {
 3720|   594k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3721|   594k|    }
 3722|   594k|}
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4210|  2.08M|    {
 4211|  2.08M|        if (!stores_parent()) {
  ------------------
  |  Branch (4211:13): [True: 0, False: 2.08M]
  ------------------
 4212|      0|            return make_string_view_from_pointers(
 4213|      0|                static_cast<const CharT*>(m_begin) + position(),
 4214|      0|                static_cast<const CharT*>(m_end));
 4215|      0|        }
 4216|  2.08M|        return parent()->get_segment_starting_at(position());
 4217|  2.08M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4204|  62.5M|    {
 4205|  62.5M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  62.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  62.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4206|  62.5M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4207|  62.5M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4100|  2.08M|    {
 4101|  2.08M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  2.08M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.20M, False: 881k]
  |  |  ------------------
  ------------------
 4102|  2.08M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4103|  1.20M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4104|  1.20M|        }
 4105|   881k|        const auto start = pos - m_putback_buffer.size();
 4106|   881k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|   881k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   881k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4107|   881k|        return m_current_view.substr(start);
 4108|   881k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4199|  2.26M|    {
 4200|  2.26M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  2.26M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.26M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4201|  2.26M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4202|  2.26M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4189|  4.56M|    {
 4190|  4.56M|        return m_position;
 4191|  4.56M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE13is_contiguousEv:
 4122|  2.57M|    {
 4123|  2.57M|        return m_is_contiguous;
 4124|  2.57M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3179|  13.9M|    {
 3180|  13.9M|        return static_cast<D&>(*this);
 3181|  13.9M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|  6.97M|    {
 2978|  6.97M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  6.97M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|  6.97M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|  6.97M|    {
 3005|  6.97M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  6.97M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|  6.97M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3220|  6.97M|    {
 3221|  6.97M|        return ranges::empty(derived())
  ------------------
  |  Branch (3221:16): [True: 12.6k, False: 6.96M]
  ------------------
 3222|  6.97M|                   ? nullptr
 3223|  6.97M|                   : std::addressof(*ranges::begin(derived()));
 3224|  6.97M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3179|  1.48M|    {
 3180|  1.48M|        return static_cast<D&>(*this);
 3181|  1.48M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|   743k|    {
 2978|   743k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   743k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|   743k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|   743k|    {
 3005|   743k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   743k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|   743k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3220|   743k|    {
 3221|   743k|        return ranges::empty(derived())
  ------------------
  |  Branch (3221:16): [True: 0, False: 743k]
  ------------------
 3222|   743k|                   ? nullptr
 3223|   743k|                   : std::addressof(*ranges::begin(derived()));
 3224|   743k|    }
_ZNK3scn2v318basic_scan_contextIcE5rangeEv:
 8168|  1.30M|    {
 8169|  1.30M|        return ranges::subrange{begin(), end()};
 8170|  1.30M|    }
_ZNK3scn2v318basic_scan_contextIcE5beginEv:
 8152|  3.80M|    {
 8153|  3.80M|        return m_current;
 8154|  3.80M|    }
_ZNK3scn2v318basic_scan_contextIcE3endEv:
 8160|  1.30M|    {
 8161|  1.30M|        return ranges::default_sentinel;
 8162|  1.30M|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3314|  19.9M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  19.9M|    static_cast<    \
  |  |  929|  19.9M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  19.9M|    static_cast<    \
  |  |  929|  19.9M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3315|  19.9M|    {
 3316|  19.9M|    }
_ZN3scn2v36detail10locale_refC2Ev:
 7990|  7.75M|    constexpr locale_ref() = default;
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  1.79M|    {
 1837|  1.79M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.79M|                                            std::forward<F>(f));
 1839|  1.79M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|  1.79M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.79M|    else {
 1333|  1.79M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.79M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.79M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.77M, False: 22.3k]
  |  |  ------------------
  ------------------
 1335|  1.79M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.79M|                   : result(unexpect,
 1337|  22.3k|                            trivial_invoke(std::forward<F>(f),
 1338|  22.3k|                                           std::forward<Exp>(exp).error()));
 1339|  1.79M|    }
 1340|  1.79M|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  19.0M|    {
  485|  19.0M|        return m_has_value;
  486|  19.0M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|  6.47M|    {
 1663|  6.47M|        return std::move(value());
 1664|  6.47M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|  7.39M|    {
 1627|  7.39M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  7.39M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.39M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  7.39M|        return this->get_value();
 1629|  7.39M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  7.39M|    {
  451|  7.39M|        return m_value;
  452|  7.39M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1427|  7.99M|        : base(std::in_place, std::forward<U>(val)),
 1428|  7.99M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  7.99M|    {
 1430|  7.99M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  7.99M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  7.99M|    {
  437|  7.99M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  10.1M|    {
 1177|  10.1M|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|  48.0k|{
 1211|  48.0k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  48.0k|}
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  61.8k|    {
 1614|  61.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  61.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  61.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  61.8k|        return std::move(this->get_unexpected().error());
 1616|  61.8k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  84.8k|    {
  468|  84.8k|        return m_unexpected;
  469|  84.8k|    }
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  360|   477k|    {
  361|   477k|        return m_unexpected;
  362|   477k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1483|  1.79M|        : base(unexpect, std::forward<Args>(args)...),
 1484|  1.79M|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  1.79M|    {
 1486|  1.79M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  2.11M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  2.11M|          m_has_value(false)
  446|  2.11M|    {
  447|  2.11M|    }
_ZNK3scn2v318basic_scan_contextIwE5rangeEv:
 8168|   628k|    {
 8169|   628k|        return ranges::subrange{begin(), end()};
 8170|   628k|    }
_ZNK3scn2v318basic_scan_contextIwE5beginEv:
 8152|  1.69M|    {
 8153|  1.69M|        return m_current;
 8154|  1.69M|    }
_ZNK3scn2v318basic_scan_contextIwE3endEv:
 8160|   628k|    {
 8161|   628k|        return ranges::default_sentinel;
 8162|   628k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3314|  8.81M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  8.81M|    static_cast<    \
  |  |  929|  8.81M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  8.81M|    static_cast<    \
  |  |  929|  8.81M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3315|  8.81M|    {
 3316|  8.81M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|   859k|    {
 1837|   859k|        return detail::transform_error_impl(std::move(*this),
 1838|   859k|                                            std::forward<F>(f));
 1839|   859k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|   859k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   859k|    else {
 1333|   859k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   859k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   859k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 855k, False: 3.85k]
  |  |  ------------------
  ------------------
 1335|   859k|                   ? result(*std::forward<Exp>(exp))
 1336|   859k|                   : result(unexpect,
 1337|  3.85k|                            trivial_invoke(std::forward<F>(f),
 1338|  3.85k|                                           std::forward<Exp>(exp).error()));
 1339|   859k|    }
 1340|   859k|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  8.30M|    {
  485|  8.30M|        return m_has_value;
  486|  8.30M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|  3.05M|    {
 1663|  3.05M|        return std::move(value());
 1664|  3.05M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|  3.08M|    {
 1627|  3.08M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.08M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.08M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.08M|        return this->get_value();
 1629|  3.08M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  3.08M|    {
  451|  3.08M|        return m_value;
  452|  3.08M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1427|  3.13M|        : base(std::in_place, std::forward<U>(val)),
 1428|  3.13M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  3.13M|    {
 1430|  3.13M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  3.13M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  3.13M|    {
  437|  3.13M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  4.91M|    {
 1177|  4.91M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  63.5k|    {
 1614|  63.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  63.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  63.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  63.5k|        return std::move(this->get_unexpected().error());
 1616|  63.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  65.7k|    {
  468|  65.7k|        return m_unexpected;
  469|  65.7k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1483|  1.09M|        : base(unexpect, std::forward<Args>(args)...),
 1484|  1.09M|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  1.09M|    {
 1486|  1.09M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  1.78M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.78M|          m_has_value(false)
  446|  1.78M|    {
  447|  1.78M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  345|   225k|        : m_unexpected(std::forward<Err>(e))
  346|   225k|    {
  347|   225k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   225k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   225k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1473|   280k|        : base(unexpect, std::move(e.error())),
 1474|   280k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   280k|    {
 1476|   280k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  444|  1.77M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.77M|          m_has_value(false)
  446|  1.77M|    {
  447|  1.77M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  8.74M|    {
 1177|  8.74M|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1427|  6.88M|        : base(std::in_place, std::forward<U>(val)),
 1428|  6.88M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  6.88M|    {
 1430|  6.88M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  6.88M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  6.88M|    {
  437|  6.88M|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1597|  10.2M|    {
 1598|  10.2M|        return has_value();
 1599|  10.2M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  484|  16.0M|    {
  485|  16.0M|        return m_has_value;
  486|  16.0M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1603|   332k|    {
 1604|   332k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   332k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   332k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   332k|        return this->get_unexpected().error();
 1606|   332k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   332k|    {
  468|   332k|        return m_unexpected;
  469|   332k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1662|  4.42M|    {
 1663|  4.42M|        return std::move(value());
 1664|  4.42M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1626|  5.48M|    {
 1627|  5.48M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  5.48M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.48M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  5.48M|        return this->get_value();
 1629|  5.48M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  450|  5.48M|    {
  451|  5.48M|        return m_value;
  452|  5.48M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1473|   557k|        : base(unexpect, std::move(e.error())),
 1474|   557k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   557k|    {
 1476|   557k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  444|  1.52M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.52M|          m_has_value(false)
  446|  1.52M|    {
  447|  1.52M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  4.91M|    {
 1177|  4.91M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1427|  3.39M|        : base(std::in_place, std::forward<U>(val)),
 1428|  3.39M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  3.39M|    {
 1430|  3.39M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  3.39M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  3.39M|    {
  437|  3.39M|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1597|  5.77M|    {
 1598|  5.77M|        return has_value();
 1599|  5.77M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  484|  9.09M|    {
  485|  9.09M|        return m_has_value;
  486|  9.09M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1603|   668k|    {
 1604|   668k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   668k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   668k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   668k|        return this->get_unexpected().error();
 1606|   668k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   668k|    {
  468|   668k|        return m_unexpected;
  469|   668k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1662|  2.21M|    {
 1663|  2.21M|        return std::move(value());
 1664|  2.21M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1626|  2.64M|    {
 1627|  2.64M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.64M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.64M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.64M|        return this->get_value();
 1629|  2.64M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  450|  2.64M|    {
  451|  2.64M|        return m_value;
  452|  2.64M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  1.54M|    {
 1837|  1.54M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.54M|                                            std::forward<F>(f));
 1839|  1.54M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|  1.54M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.54M|    else {
 1333|  1.54M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.54M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.54M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.52M, False: 18.0k]
  |  |  ------------------
  ------------------
 1335|  1.54M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.54M|                   : result(unexpect,
 1337|  18.0k|                            trivial_invoke(std::forward<F>(f),
 1338|  18.0k|                                           std::forward<Exp>(exp).error()));
 1339|  1.54M|    }
 1340|  1.54M|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  5.85M|    {
  485|  5.85M|        return m_has_value;
  486|  5.85M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|  1.52M|    {
 1663|  1.52M|        return std::move(value());
 1664|  1.52M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|  2.00M|    {
 1627|  2.00M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.00M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.00M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.00M|        return this->get_value();
 1629|  2.00M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  2.00M|    {
  451|  2.00M|        return m_value;
  452|  2.00M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1613|  18.0k|    {
 1614|  18.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  18.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  18.0k|        return std::move(this->get_unexpected().error());
 1616|  18.0k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  23.4k|    {
  468|  23.4k|        return m_unexpected;
  469|  23.4k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1483|  1.49M|        : base(unexpect, std::forward<Args>(args)...),
 1484|  1.49M|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  1.49M|    {
 1486|  1.49M|    }
_ZN3scn2v310scan_errorC2Ev:
 3562|  16.1M|    constexpr scan_error() noexcept = default;
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|   320k|        : base(unexpect, std::move(e.error())),
 1474|   320k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   320k|    {
 1476|   320k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4279|  15.8M|    {
 4280|  15.8M|        return x.is_at_end();
 4281|  15.8M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4323|  39.5M|    {
 4324|  39.5M|        if (m_end) {
  ------------------
  |  Branch (4324:13): [True: 0, False: 39.5M]
  ------------------
 4325|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4326|      0|        }
 4327|  39.5M|        if (!m_begin) {
  ------------------
  |  Branch (4327:13): [True: 0, False: 39.5M]
  ------------------
 4328|      0|            return true;
 4329|      0|        }
 4330|  39.5M|        return !read_at_position();
 4331|  39.5M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4303|   170M|    {
 4304|   170M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|   170M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   170M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4305|       |
 4306|   170M|        if (!stores_parent()) {
  ------------------
  |  Branch (4306:13): [True: 0, False: 170M]
  ------------------
 4307|      0|            return true;
 4308|      0|        }
 4309|       |
 4310|   170M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|   170M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 147M, False: 23.0M]
  |  |  ------------------
  ------------------
 4311|   147M|            return true;
 4312|   147M|        }
 4313|       |
 4314|  45.7M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4314:16): [True: 23.0M, False: 22.7M]
  ------------------
 4315|  23.0M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4315:17): [True: 329k, False: 22.7M]
  ------------------
 4316|   329k|                return false;
 4317|   329k|            }
 4318|  23.0M|        }
 4319|  22.7M|        return true;
 4320|  23.0M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE15chars_availableEv:
 4080|   220M|    {
 4081|   220M|        return m_putback_buffer.size() + m_current_view.size();
 4082|   220M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4238|  43.9M|    {
 4239|  43.9M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  43.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  43.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4240|       |
 4241|  43.9M|        if (!stores_parent()) {
  ------------------
  |  Branch (4241:13): [True: 0, False: 43.9M]
  ------------------
 4242|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4243|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4244|      0|            return *ptr;
 4245|      0|        }
 4246|       |
 4247|  43.9M|        auto res = read_at_position();
 4248|  43.9M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  43.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  43.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|  43.9M|        return parent()->get_character_at(m_position);
 4250|  43.9M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16get_character_atEl:
 4111|  43.9M|    {
 4112|  43.9M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  43.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 27.3M, False: 16.5M]
  |  |  ------------------
  ------------------
 4113|  43.9M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4114|  27.3M|            return m_putback_buffer[pos];
 4115|  27.3M|        }
 4116|  16.5M|        const auto start = pos - m_putback_buffer.size();
 4117|  16.5M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  16.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4118|  16.5M|        return m_current_view[start];
 4119|  16.5M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1427|  11.5M|        : base(std::in_place, std::forward<U>(val)),
 1428|  11.5M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  11.5M|    {
 1430|  11.5M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  11.5M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  11.5M|    {
  437|  11.5M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  11.6M|    {
 1177|  11.6M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  345|   159k|        : m_unexpected(std::forward<Err>(e))
  346|   159k|    {
  347|   159k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   159k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   159k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|  84.8k|        : base(unexpect, std::move(e.error())),
 1474|  84.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  84.8k|    {
 1476|  84.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|  84.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  84.8k|          m_has_value(false)
  446|  84.8k|    {
  447|  84.8k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  354|   238k|        : m_unexpected(std::forward<Args>(args)...)
  355|   238k|    {
  356|   238k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   238k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|   238k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1597|  5.07M|    {
 1598|  5.07M|        return has_value();
 1599|  5.07M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1652|   917k|    {
 1653|   917k|        return value();
 1654|   917k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4273|  41.6M|    {
 4274|  41.6M|        return !(lhs == rhs);
 4275|  41.6M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4268|  46.2M|    {
 4269|  46.2M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4269:16): [True: 46.2M, False: 0]
  |  Branch (4269:46): [True: 5.97M, False: 40.3M]
  ------------------
 4270|  46.2M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4224|  86.9M|    {
 4225|  86.9M|        ++m_position;
 4226|  86.9M|        (void)read_at_position();
 4227|  86.9M|        return *this;
 4228|  86.9M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  345|  79.3k|        : m_unexpected(std::forward<Err>(e))
  346|  79.3k|    {
  347|  79.3k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  79.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  79.3k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  16.9k|        : base(unexpect, std::move(e.error())),
 1474|  16.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  16.9k|    {
 1476|  16.9k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|  16.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  16.9k|          m_has_value(false)
  446|  16.9k|    {
  447|  16.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.49M|    {
 1177|  2.49M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|  2.47M|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.47M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.47M|    {
 1430|  2.47M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  435|  2.47M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.47M|    {
  437|  2.47M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|  2.49M|    {
 1598|  2.49M|        return has_value();
 1599|  2.49M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  4.98M|    {
  485|  4.98M|        return m_has_value;
  486|  4.98M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  16.9k|    {
 1604|  16.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  16.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  16.9k|        return this->get_unexpected().error();
 1606|  16.9k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  16.9k|    {
  468|  16.9k|        return m_unexpected;
  469|  16.9k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|  2.47M|    {
 1663|  2.47M|        return std::move(value());
 1664|  2.47M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|  2.47M|    {
 1627|  2.47M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.47M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.47M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.47M|        return this->get_value();
 1629|  2.47M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.47M|    {
  451|  2.47M|        return m_value;
  452|  2.47M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3333|  56.2M|    {
 3334|  56.2M|        return m_sentinel;
 3335|  56.2M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  345|  69.4k|        : m_unexpected(std::forward<Err>(e))
  346|  69.4k|    {
  347|  69.4k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  69.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  69.4k|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_errorEE5errorEv:
  360|  20.0M|    {
  361|  20.0M|        return m_unexpected;
  362|  20.0M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  354|  5.36M|        : m_unexpected(std::forward<Args>(args)...)
  355|  5.36M|    {
  356|  5.36M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  5.36M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  5.36M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  345|  24.8M|        : m_unexpected(std::forward<Err>(e))
  346|  24.8M|    {
  347|  24.8M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  24.8M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  24.8M|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  360|  24.8M|    {
  361|  24.8M|        return m_unexpected;
  362|  24.8M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  354|  24.8M|        : m_unexpected(std::forward<Args>(args)...)
  355|  24.8M|    {
  356|  24.8M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  24.8M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  24.8M|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|   159k|{
 1211|   159k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|   159k|}
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  345|  5.13M|        : m_unexpected(std::forward<Err>(e))
  346|  5.13M|    {
  347|  5.13M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  5.13M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  5.13M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1603|  23.0k|    {
 1604|  23.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  23.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  23.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  23.0k|        return this->get_unexpected().error();
 1606|  23.0k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|  1.81M|        : base(unexpect, std::move(e.error())),
 1474|  1.81M|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  1.81M|    {
 1476|  1.81M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|  1.85M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.85M|          m_has_value(false)
  446|  1.85M|    {
  447|  1.85M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  19.7M|    {
 1177|  19.7M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1427|   927k|        : base(std::in_place, std::forward<U>(val)),
 1428|   927k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   927k|    {
 1430|   927k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  435|   927k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   927k|    {
  437|   927k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  10.0M|        : base(unexpect, std::move(e.error())),
 1474|  10.0M|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  10.0M|    {
 1476|  10.0M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|  10.0M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  10.0M|          m_has_value(false)
  446|  10.0M|    {
  447|  10.0M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1597|  21.5M|    {
 1598|  21.5M|        return has_value();
 1599|  21.5M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  38.1M|    {
  485|  38.1M|        return m_has_value;
  486|  38.1M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1603|  5.06M|    {
 1604|  5.06M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  5.06M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.06M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  5.06M|        return this->get_unexpected().error();
 1606|  5.06M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  5.06M|    {
  468|  5.06M|        return m_unexpected;
  469|  5.06M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1427|  1.94M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.94M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.94M|    {
 1430|  1.94M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  435|  1.94M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.94M|    {
  437|  1.94M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.94M|    {
 1177|  1.94M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSE_IXsr3stdE16is_convertible_vISG_SB_EEvE4typeELSK_0EEEONS0_10unexpectedISF_EE:
 1473|    309|        : base(unexpect, std::move(e.error())),
 1474|    309|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|    309|    {
 1476|    309|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  444|    309|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|    309|          m_has_value(false)
  446|    309|    {
  447|    309|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1652|  5.03M|    {
 1653|  5.03M|        return value();
 1654|  5.03M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|  9.73M|    {
 1627|  9.73M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  9.73M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.73M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  9.73M|        return this->get_value();
 1629|  9.73M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  9.73M|    {
  451|  9.73M|        return m_value;
  452|  9.73M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1597|   165k|    {
 1598|   165k|        return has_value();
 1599|   165k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  484|  3.88M|    {
  485|  3.88M|        return m_has_value;
  486|  3.88M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|  1.77M|    {
 1663|  1.77M|        return std::move(value());
 1664|  1.77M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|  1.94M|    {
 1627|  1.94M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.94M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.94M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.94M|        return this->get_value();
 1629|  1.94M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  450|  1.94M|    {
  451|  1.94M|        return m_value;
  452|  1.94M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  4.73M|    {
 1837|  4.73M|        return detail::transform_error_impl(std::move(*this),
 1838|  4.73M|                                            std::forward<F>(f));
 1839|  4.73M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|  4.73M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  4.73M|    else {
 1333|  4.73M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  4.73M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  4.73M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 4.70M, False: 39.4k]
  |  |  ------------------
  ------------------
 1335|  4.73M|                   ? result(*std::forward<Exp>(exp))
 1336|  4.73M|                   : result(unexpect,
 1337|  39.4k|                            trivial_invoke(std::forward<F>(f),
 1338|  39.4k|                                           std::forward<Exp>(exp).error()));
 1339|  4.73M|    }
 1340|  4.73M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1427|  6.91M|        : base(std::in_place, std::forward<U>(val)),
 1428|  6.91M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  6.91M|    {
 1430|  6.91M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  6.91M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  6.91M|    {
  437|  6.91M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1483|  39.4k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  39.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  39.4k|    {
 1486|  39.4k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|  4.70M|    {
 1663|  4.70M|        return std::move(value());
 1664|  4.70M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3329|  2.03M|    {
 3330|  2.03M|        return m_iterator;
 3331|  2.03M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3333|  2.03M|    {
 3334|  2.03M|        return m_sentinel;
 3335|  2.03M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|  11.9M|    {
 1598|  11.9M|        return has_value();
 1599|  11.9M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|  18.7M|    {
  485|  18.7M|        return m_has_value;
  486|  18.7M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|   419k|    {
 1604|   419k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   419k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   419k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   419k|        return this->get_unexpected().error();
 1606|   419k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   419k|    {
  468|   419k|        return m_unexpected;
  469|   419k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|  5.12M|    {
 1663|  5.12M|        return std::move(value());
 1664|  5.12M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|  6.39M|    {
 1627|  6.39M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  6.39M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.39M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  6.39M|        return this->get_value();
 1629|  6.39M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|  6.39M|    {
  451|  6.39M|        return m_value;
  452|  6.39M|    }
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  3.20M|{
  326|  3.20M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  3.20M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  3.20M|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3314|  1.60M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.60M|    static_cast<    \
  |  |  929|  1.60M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.60M|    static_cast<    \
  |  |  929|  1.60M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3315|  1.60M|    {
 3316|  1.60M|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4290|  23.6M|    {
 4291|  23.6M|        return !x.is_at_end();
 4292|  23.6M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|  23.4k|        : base(unexpect, std::move(e.error())),
 1474|  23.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  23.4k|    {
 1476|  23.4k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  23.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  23.4k|          m_has_value(false)
  446|  23.4k|    {
  447|  23.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.83M|    {
 1177|  3.83M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1427|  3.81M|        : base(std::in_place, std::forward<U>(val)),
 1428|  3.81M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  3.81M|    {
 1430|  3.81M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  3.81M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  3.81M|    {
  437|  3.81M|    }
_ZNK3scn2v38expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1597|  2.28M|    {
 1598|  2.28M|        return has_value();
 1599|  2.28M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1652|   471k|    {
 1653|   471k|        return value();
 1654|   471k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  12.9k|        : base(unexpect, std::move(e.error())),
 1474|  12.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  12.9k|    {
 1476|  12.9k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  444|  12.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  12.9k|          m_has_value(false)
  446|  12.9k|    {
  447|  12.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.07M|    {
 1177|  2.07M|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|  2.06M|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.06M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.06M|    {
 1430|  2.06M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  435|  2.06M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.06M|    {
  437|  2.06M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1597|  2.07M|    {
 1598|  2.07M|        return has_value();
 1599|  2.07M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  484|  4.15M|    {
  485|  4.15M|        return m_has_value;
  486|  4.15M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1603|  12.9k|    {
 1604|  12.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  12.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  12.9k|        return this->get_unexpected().error();
 1606|  12.9k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  12.9k|    {
  468|  12.9k|        return m_unexpected;
  469|  12.9k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|  2.06M|    {
 1663|  2.06M|        return std::move(value());
 1664|  2.06M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|  2.06M|    {
 1627|  2.06M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.06M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.06M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.06M|        return this->get_value();
 1629|  2.06M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.06M|    {
  451|  2.06M|        return m_value;
  452|  2.06M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1603|  5.46k|    {
 1604|  5.46k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  5.46k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.46k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  5.46k|        return this->get_unexpected().error();
 1606|  5.46k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|  1.55M|        : base(unexpect, std::move(e.error())),
 1474|  1.55M|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  1.55M|    {
 1476|  1.55M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  1.55M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.55M|          m_has_value(false)
  446|  1.55M|    {
  447|  1.55M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  8.76M|    {
 1177|  8.76M|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1427|   480k|        : base(std::in_place, std::forward<U>(val)),
 1428|   480k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   480k|    {
 1430|   480k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  435|   480k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   480k|    {
  437|   480k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  6.07M|        : base(unexpect, std::move(e.error())),
 1474|  6.07M|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  6.07M|    {
 1476|  6.07M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|  6.07M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  6.07M|          m_has_value(false)
  446|  6.07M|    {
  447|  6.07M|    }
_ZNK3scn2v38expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1597|  10.2M|    {
 1598|  10.2M|        return has_value();
 1599|  10.2M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  17.5M|    {
  485|  17.5M|        return m_has_value;
  486|  17.5M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1603|  4.20M|    {
 1604|  4.20M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  4.20M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.20M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  4.20M|        return this->get_unexpected().error();
 1606|  4.20M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  4.20M|    {
  468|  4.20M|        return m_unexpected;
  469|  4.20M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1427|  1.56M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.56M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.56M|    {
 1430|  1.56M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  435|  1.56M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.56M|    {
  437|  1.56M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.56M|    {
 1177|  1.56M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|    102|        : base(unexpect, std::move(e.error())),
 1474|    102|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|    102|    {
 1476|    102|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|    102|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|    102|          m_has_value(false)
  446|    102|    {
  447|    102|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1652|  1.60M|    {
 1653|  1.60M|        return value();
 1654|  1.60M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|  1.60M|    {
 1627|  1.60M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.60M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.60M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.60M|        return this->get_value();
 1629|  1.60M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  1.60M|    {
  451|  1.60M|        return m_value;
  452|  1.60M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  37.0k|    {
 1598|  37.0k|        return has_value();
 1599|  37.0k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|  3.13M|    {
  485|  3.13M|        return m_has_value;
  486|  3.13M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|  1.52M|    {
 1663|  1.52M|        return std::move(value());
 1664|  1.52M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|  1.56M|    {
 1627|  1.56M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.56M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.56M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.56M|        return this->get_value();
 1629|  1.56M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|  1.56M|    {
  451|  1.56M|        return m_value;
  452|  1.56M|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1427|   654k|        : base(std::in_place, std::forward<U>(val)),
 1428|   654k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   654k|    {
 1430|   654k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|   654k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   654k|    {
  437|   654k|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  2.94M|    {
 2855|  2.94M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  2.94M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  2.94M|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  2.94M|    {
 2836|  2.94M|        return t.data();
 2837|  2.94M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1473|  1.14M|        : base(unexpect, std::move(e.error())),
 1474|  1.14M|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  1.14M|    {
 1476|  1.14M|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  444|  1.14M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.14M|          m_has_value(false)
  446|  1.14M|    {
  447|  1.14M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  14.0M|    {
 1177|  14.0M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1427|  12.7M|        : base(std::in_place, std::forward<U>(val)),
 1428|  12.7M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  12.7M|    {
 1430|  12.7M|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  435|  12.7M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  12.7M|    {
  437|  12.7M|    }
_ZNO3scn2v38expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS7_v:
 1662|  8.63M|    {
 1663|  8.63M|        return std::move(value());
 1664|  8.63M|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1210|  5.30M|{
 1211|  5.30M|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  5.30M|}
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1836|  1.77M|    {
 1837|  1.77M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.77M|                                            std::forward<F>(f));
 1839|  1.77M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSI_OT0_:
 1322|  1.77M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.77M|    else {
 1333|  1.77M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.77M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.77M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.77M, False: 0]
  |  |  ------------------
  ------------------
 1335|  1.77M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.77M|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  1.77M|    }
 1340|  1.77M|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|  1.77M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.77M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.77M|    {
 1430|  1.77M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  435|  1.77M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.77M|    {
  437|  1.77M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.77M|    {
 1177|  1.77M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|  1.77M|    {
 1598|  1.77M|        return has_value();
 1599|  1.77M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  3.55M|    {
  485|  3.55M|        return m_has_value;
  486|  3.55M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|  1.77M|    {
 1663|  1.77M|        return std::move(value());
 1664|  1.77M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|  1.77M|    {
 1627|  1.77M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.77M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.77M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.77M|        return this->get_value();
 1629|  1.77M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.77M|    {
  451|  1.77M|        return m_value;
  452|  1.77M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1822|  1.76M|    {
 1823|  1.76M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|  1.76M|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSI_OT0_:
 1322|  1.76M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.76M|    else {
 1333|  1.76M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.76M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.76M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 1.76M]
  |  |  ------------------
  ------------------
 1335|  1.76M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.76M|                   : result(unexpect,
 1337|  1.76M|                            trivial_invoke(std::forward<F>(f),
 1338|  1.76M|                                           std::forward<Exp>(exp).error()));
 1339|  1.76M|    }
 1340|  1.76M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1427|  86.7k|        : base(std::in_place, std::forward<U>(val)),
 1428|  86.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  86.7k|    {
 1430|  86.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  435|  86.7k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  86.7k|    {
  437|  86.7k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1652|  1.26M|    {
 1653|  1.26M|        return value();
 1654|  1.26M|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3667|   412k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1672|   164k|    {
 1673|   164k|        return &value();
 1674|   164k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2723|  1.27M|    {
 2724|  1.27M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.27M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.27M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2704|  1.27M|    {
 2705|  1.27M|        return decay_copy(t.begin());
 2706|  1.27M|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEu7__decayIT_EOS8_:
 1948|  1.27M|{
 1949|  1.27M|    return SCN_FWD(t);
  ------------------
  |  |  930|  1.27M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  1.27M|}
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3667|   776k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|  1.52M|    {
 1837|  1.52M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.52M|                                            std::forward<F>(f));
 1839|  1.52M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1322|  1.52M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.52M|    else {
 1333|  1.52M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.52M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.52M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.52M, False: 0]
  |  |  ------------------
  ------------------
 1335|  1.52M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.52M|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  1.52M|    }
 1340|  1.52M|}
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|  1.52M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.52M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.52M|    {
 1430|  1.52M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  435|  1.52M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.52M|    {
  437|  1.52M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.52M|    {
 1177|  1.52M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|  1.52M|    {
 1598|  1.52M|        return has_value();
 1599|  1.52M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  3.05M|    {
  485|  3.05M|        return m_has_value;
  486|  3.05M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|  1.52M|    {
 1663|  1.52M|        return std::move(value());
 1664|  1.52M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|  1.52M|    {
 1627|  1.52M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.52M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.52M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.52M|        return this->get_value();
 1629|  1.52M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.52M|    {
  451|  1.52M|        return m_value;
  452|  1.52M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1822|  1.48M|    {
 1823|  1.48M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|  1.48M|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|  1.48M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.48M|    else {
 1333|  1.48M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.48M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.48M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 1.48M]
  |  |  ------------------
  ------------------
 1335|  1.48M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.48M|                   : result(unexpect,
 1337|  1.48M|                            trivial_invoke(std::forward<F>(f),
 1338|  1.48M|                                           std::forward<Exp>(exp).error()));
 1339|  1.48M|    }
 1340|  1.48M|}
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRS3_vEEOT_:
 1427|  83.3k|        : base(std::in_place, std::forward<U>(val)),
 1428|  83.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  83.3k|    {
 1430|  83.3k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  435|  83.3k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  83.3k|    {
  437|  83.3k|    }
_ZN3scn2v313scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3646|  1.48M|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  928|  1.48M|    static_cast<    \
  |  |  929|  1.48M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3647|  1.48M|    {
 3648|  1.48M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1652|  1.05M|    {
 1653|  1.05M|        return value();
 1654|  1.05M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1672|  36.9k|    {
 1673|  36.9k|        return &value();
 1674|  36.9k|    }
_ZN3scn2v313scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3646|  1.76M|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  928|  1.76M|    static_cast<    \
  |  |  929|  1.76M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3647|  1.76M|    {
 3648|  1.76M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|   685k|        : base(unexpect, std::move(e.error())),
 1474|   685k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   685k|    {
 1476|   685k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4279|  7.24M|    {
 4280|  7.24M|        return x.is_at_end();
 4281|  7.24M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4323|  11.4M|    {
 4324|  11.4M|        if (m_end) {
  ------------------
  |  Branch (4324:13): [True: 0, False: 11.4M]
  ------------------
 4325|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4326|      0|        }
 4327|  11.4M|        if (!m_begin) {
  ------------------
  |  Branch (4327:13): [True: 0, False: 11.4M]
  ------------------
 4328|      0|            return true;
 4329|      0|        }
 4330|  11.4M|        return !read_at_position();
 4331|  11.4M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4303|  36.3M|    {
 4304|  36.3M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  36.3M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  36.3M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4305|       |
 4306|  36.3M|        if (!stores_parent()) {
  ------------------
  |  Branch (4306:13): [True: 0, False: 36.3M]
  ------------------
 4307|      0|            return true;
 4308|      0|        }
 4309|       |
 4310|  36.3M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|  36.3M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 32.0M, False: 4.29M]
  |  |  ------------------
  ------------------
 4311|  32.0M|            return true;
 4312|  32.0M|        }
 4313|       |
 4314|  8.39M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4314:16): [True: 4.29M, False: 4.09M]
  ------------------
 4315|  4.29M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4315:17): [True: 197k, False: 4.09M]
  ------------------
 4316|   197k|                return false;
 4317|   197k|            }
 4318|  4.29M|        }
 4319|  4.09M|        return true;
 4320|  4.29M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE15chars_availableEv:
 4080|  46.9M|    {
 4081|  46.9M|        return m_putback_buffer.size() + m_current_view.size();
 4082|  46.9M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4238|  11.3M|    {
 4239|  11.3M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  11.3M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.3M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4240|       |
 4241|  11.3M|        if (!stores_parent()) {
  ------------------
  |  Branch (4241:13): [True: 0, False: 11.3M]
  ------------------
 4242|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4243|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4244|      0|            return *ptr;
 4245|      0|        }
 4246|       |
 4247|  11.3M|        auto res = read_at_position();
 4248|  11.3M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  11.3M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.3M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|  11.3M|        return parent()->get_character_at(m_position);
 4250|  11.3M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16get_character_atEl:
 4111|  11.3M|    {
 4112|  11.3M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  11.3M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.70M, False: 1.68M]
  |  |  ------------------
  ------------------
 4113|  11.3M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4114|  9.70M|            return m_putback_buffer[pos];
 4115|  9.70M|        }
 4116|  1.68M|        const auto start = pos - m_putback_buffer.size();
 4117|  1.68M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  1.68M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.68M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4118|  1.68M|        return m_current_view[start];
 4119|  1.68M|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3806|  4.12M|{
 3807|       |    if constexpr (sizeof(U) == 1) {
 3808|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 3809|       |    }
 3810|       |    else if constexpr (sizeof(U) == 2) {
 3811|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 3812|       |    }
 3813|  4.12M|    else {
 3814|       |        // utf-32
 3815|  4.12M|        static_assert(sizeof(U) == 4);
 3816|  4.12M|        SCN_UNUSED(ch);
  ------------------
  |  |  909|  4.12M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3817|  4.12M|        return 1;
 3818|  4.12M|    }
 3819|  4.12M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1427|  5.08M|        : base(std::in_place, std::forward<U>(val)),
 1428|  5.08M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  5.08M|    {
 1430|  5.08M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  5.08M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  5.08M|    {
  437|  5.08M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  5.15M|    {
 1177|  5.15M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|  65.7k|        : base(unexpect, std::move(e.error())),
 1474|  65.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  65.7k|    {
 1476|  65.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|  65.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  65.7k|          m_has_value(false)
  446|  65.7k|    {
  447|  65.7k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1597|  2.02M|    {
 1598|  2.02M|        return has_value();
 1599|  2.02M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1652|  29.9k|    {
 1653|  29.9k|        return value();
 1654|  29.9k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4273|  5.52M|    {
 4274|  5.52M|        return !(lhs == rhs);
 4275|  5.52M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4268|  7.50M|    {
 4269|  7.50M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4269:16): [True: 7.50M, False: 0]
  |  Branch (4269:46): [True: 2.40M, False: 5.10M]
  ------------------
 4270|  7.50M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4224|  13.4M|    {
 4225|  13.4M|        ++m_position;
 4226|  13.4M|        (void)read_at_position();
 4227|  13.4M|        return *this;
 4228|  13.4M|    }
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4012|  4.12M|{
 4013|       |    if constexpr (sizeof(CharT) == 1) {
 4014|       |        return decode_utf8_code_point_exhaustive(input);
 4015|       |    }
 4016|       |    else if constexpr (sizeof(CharT) == 2) {
 4017|       |        return decode_utf16_code_point_exhaustive(input);
 4018|       |    }
 4019|  4.12M|    else {
 4020|  4.12M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|  4.12M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.12M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4021|  4.12M|        auto cp = static_cast<char32_t>(input.front());
 4022|  4.12M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  4.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 279k, False: 3.84M]
  |  |  ------------------
  ------------------
 4023|   279k|            return invalid_code_point;
 4024|   279k|        }
 4025|  3.84M|        return cp;
 4026|  4.12M|    }
 4027|  4.12M|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  2.86k|        : base(unexpect, std::move(e.error())),
 1474|  2.86k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  2.86k|    {
 1476|  2.86k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|  2.86k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  2.86k|          m_has_value(false)
  446|  2.86k|    {
  447|  2.86k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.06M|    {
 1177|  1.06M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|  1.06M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.06M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.06M|    {
 1430|  1.06M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  435|  1.06M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.06M|    {
  437|  1.06M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|  1.06M|    {
 1598|  1.06M|        return has_value();
 1599|  1.06M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.12M|    {
  485|  2.12M|        return m_has_value;
  486|  2.12M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  2.86k|    {
 1604|  2.86k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.86k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.86k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.86k|        return this->get_unexpected().error();
 1606|  2.86k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  2.86k|    {
  468|  2.86k|        return m_unexpected;
  469|  2.86k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|  1.06M|    {
 1663|  1.06M|        return std::move(value());
 1664|  1.06M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|  1.06M|    {
 1627|  1.06M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.06M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.06M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.06M|        return this->get_value();
 1629|  1.06M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.06M|    {
  451|  1.06M|        return m_value;
  452|  1.06M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3333|  18.7M|    {
 3334|  18.7M|        return m_sentinel;
 3335|  18.7M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1603|  2.15k|    {
 1604|  2.15k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.15k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.15k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.15k|        return this->get_unexpected().error();
 1606|  2.15k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|   917k|        : base(unexpect, std::move(e.error())),
 1474|   917k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   917k|    {
 1476|   917k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|   977k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   977k|          m_has_value(false)
  446|   977k|    {
  447|   977k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  8.90M|    {
 1177|  8.90M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1427|  29.9k|        : base(std::in_place, std::forward<U>(val)),
 1428|  29.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  29.9k|    {
 1430|  29.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  435|  29.9k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  29.9k|    {
  437|  29.9k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  5.05M|        : base(unexpect, std::move(e.error())),
 1474|  5.05M|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  5.05M|    {
 1476|  5.05M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|  5.05M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  5.05M|          m_has_value(false)
  446|  5.05M|    {
  447|  5.05M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1597|  9.76M|    {
 1598|  9.76M|        return has_value();
 1599|  9.76M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  17.2M|    {
  485|  17.2M|        return m_has_value;
  486|  17.2M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1603|  2.87M|    {
 1604|  2.87M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.87M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.87M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.87M|        return this->get_unexpected().error();
 1606|  2.87M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  2.87M|    {
  468|  2.87M|        return m_unexpected;
  469|  2.87M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1427|   873k|        : base(std::in_place, std::forward<U>(val)),
 1428|   873k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   873k|    {
 1430|   873k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  435|   873k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   873k|    {
  437|   873k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   873k|    {
 1177|   873k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSE_IXsr3stdE16is_convertible_vISG_SB_EEvE4typeELSK_0EEEONS0_10unexpectedISF_EE:
 1473|     91|        : base(unexpect, std::move(e.error())),
 1474|     91|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|     91|    {
 1476|     91|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  444|     91|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|     91|          m_has_value(false)
  446|     91|    {
  447|     91|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1652|  1.29M|    {
 1653|  1.29M|        return value();
 1654|  1.29M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|  3.49M|    {
 1627|  3.49M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.49M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.49M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.49M|        return this->get_value();
 1629|  3.49M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  3.49M|    {
  451|  3.49M|        return m_value;
  452|  3.49M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1597|  17.9k|    {
 1598|  17.9k|        return has_value();
 1599|  17.9k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  484|  1.74M|    {
  485|  1.74M|        return m_has_value;
  486|  1.74M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|   855k|    {
 1663|   855k|        return std::move(value());
 1664|   855k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|   873k|    {
 1627|   873k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   873k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   873k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   873k|        return this->get_value();
 1629|   873k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  450|   873k|    {
  451|   873k|        return m_value;
  452|   873k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  2.26M|    {
 1837|  2.26M|        return detail::transform_error_impl(std::move(*this),
 1838|  2.26M|                                            std::forward<F>(f));
 1839|  2.26M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|  2.26M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  2.26M|    else {
 1333|  2.26M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.26M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.26M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.20M, False: 59.7k]
  |  |  ------------------
  ------------------
 1335|  2.26M|                   ? result(*std::forward<Exp>(exp))
 1336|  2.26M|                   : result(unexpect,
 1337|  59.7k|                            trivial_invoke(std::forward<F>(f),
 1338|  59.7k|                                           std::forward<Exp>(exp).error()));
 1339|  2.26M|    }
 1340|  2.26M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1427|  2.84M|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.84M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.84M|    {
 1430|  2.84M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  2.84M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.84M|    {
  437|  2.84M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1483|  59.7k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  59.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  59.7k|    {
 1486|  59.7k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|  2.20M|    {
 1663|  2.20M|        return std::move(value());
 1664|  2.20M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3329|   654k|    {
 3330|   654k|        return m_iterator;
 3331|   654k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3333|   654k|    {
 3334|   654k|        return m_sentinel;
 3335|   654k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|  5.76M|    {
 1598|  5.76M|        return has_value();
 1599|  5.76M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|  9.21M|    {
  485|  9.21M|        return m_has_value;
  486|  9.21M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|   926k|    {
 1604|   926k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   926k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   926k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   926k|        return this->get_unexpected().error();
 1606|   926k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   926k|    {
  468|   926k|        return m_unexpected;
  469|   926k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|  2.08M|    {
 1663|  2.08M|        return std::move(value());
 1664|  2.08M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|  2.51M|    {
 1627|  2.51M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.51M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.51M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.51M|        return this->get_value();
 1629|  2.51M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.51M|    {
  451|  2.51M|        return m_value;
  452|  2.51M|    }
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  303|  1.22M|{
  304|  1.22M|    return p;
  305|  1.22M|}
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  1.22M|{
  326|  1.22M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  1.22M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  1.22M|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3314|   614k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   614k|    static_cast<    \
  |  |  929|   614k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   614k|    static_cast<    \
  |  |  929|   614k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3315|   614k|    {
 3316|   614k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4290|  4.21M|    {
 4291|  4.21M|        return !x.is_at_end();
 4292|  4.21M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|  64.2k|        : base(unexpect, std::move(e.error())),
 1474|  64.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  64.2k|    {
 1476|  64.2k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  64.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  64.2k|          m_has_value(false)
  446|  64.2k|    {
  447|  64.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  4.29M|    {
 1177|  4.29M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1427|  4.23M|        : base(std::in_place, std::forward<U>(val)),
 1428|  4.23M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  4.23M|    {
 1430|  4.23M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  4.23M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  4.23M|    {
  437|  4.23M|    }
_ZNK3scn2v38expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1597|  1.17M|    {
 1598|  1.17M|        return has_value();
 1599|  1.17M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  7.43M|    {
  485|  7.43M|        return m_has_value;
  486|  7.43M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1652|  12.7k|    {
 1653|  12.7k|        return value();
 1654|  12.7k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|  3.07M|    {
 1627|  3.07M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.07M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.07M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.07M|        return this->get_value();
 1629|  3.07M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  3.07M|    {
  451|  3.07M|        return m_value;
  452|  3.07M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  2.86k|        : base(unexpect, std::move(e.error())),
 1474|  2.86k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  2.86k|    {
 1476|  2.86k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  444|  2.86k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  2.86k|          m_has_value(false)
  446|  2.86k|    {
  447|  2.86k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.06M|    {
 1177|  1.06M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|  1.06M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.06M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.06M|    {
 1430|  1.06M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  435|  1.06M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.06M|    {
  437|  1.06M|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|   860k|    {
 1837|   860k|        return detail::transform_error_impl(std::move(*this),
 1838|   860k|                                            std::forward<F>(f));
 1839|   860k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|   860k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   860k|    else {
 1333|   860k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   860k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   860k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 856k, False: 3.85k]
  |  |  ------------------
  ------------------
 1335|   860k|                   ? result(*std::forward<Exp>(exp))
 1336|   860k|                   : result(unexpect,
 1337|  3.85k|                            trivial_invoke(std::forward<F>(f),
 1338|  3.85k|                                           std::forward<Exp>(exp).error()));
 1339|   860k|    }
 1340|   860k|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|  3.06M|    {
 1663|  3.06M|        return std::move(value());
 1664|  3.06M|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1613|  63.7k|    {
 1614|  63.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  63.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  63.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  63.7k|        return std::move(this->get_unexpected().error());
 1616|  63.7k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  64.2k|    {
  468|  64.2k|        return m_unexpected;
  469|  64.2k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1483|   968k|        : base(unexpect, std::forward<Args>(args)...),
 1484|   968k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|   968k|    {
 1486|   968k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1597|  1.06M|    {
 1598|  1.06M|        return has_value();
 1599|  1.06M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.13M|    {
  485|  2.13M|        return m_has_value;
  486|  2.13M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1603|  2.86k|    {
 1604|  2.86k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.86k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.86k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.86k|        return this->get_unexpected().error();
 1606|  2.86k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  2.86k|    {
  468|  2.86k|        return m_unexpected;
  469|  2.86k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|  1.06M|    {
 1663|  1.06M|        return std::move(value());
 1664|  1.06M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|  1.06M|    {
 1627|  1.06M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.06M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.06M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.06M|        return this->get_value();
 1629|  1.06M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.06M|    {
  451|  1.06M|        return m_value;
  452|  1.06M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1603|    524|    {
 1604|    524|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    524|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    524|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    524|        return this->get_unexpected().error();
 1606|    524|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|   917k|        : base(unexpect, std::move(e.error())),
 1474|   917k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   917k|    {
 1476|   917k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|   976k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   976k|          m_has_value(false)
  446|   976k|    {
  447|   976k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  7.06M|    {
 1177|  7.06M|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1427|  12.7k|        : base(std::in_place, std::forward<U>(val)),
 1428|  12.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  12.7k|    {
 1430|  12.7k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  435|  12.7k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  12.7k|    {
  437|  12.7k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  3.66M|        : base(unexpect, std::move(e.error())),
 1474|  3.66M|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  3.66M|    {
 1476|  3.66M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|  3.66M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  3.66M|          m_has_value(false)
  446|  3.66M|    {
  447|  3.66M|    }
_ZNK3scn2v38expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1597|  7.92M|    {
 1598|  7.92M|        return has_value();
 1599|  7.92M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  14.2M|    {
  485|  14.2M|        return m_has_value;
  486|  14.2M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1603|  2.73M|    {
 1604|  2.73M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.73M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.73M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.73M|        return this->get_unexpected().error();
 1606|  2.73M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  2.73M|    {
  468|  2.73M|        return m_unexpected;
  469|  2.73M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1427|   862k|        : base(std::in_place, std::forward<U>(val)),
 1428|   862k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   862k|    {
 1430|   862k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  435|   862k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   862k|    {
  437|   862k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   862k|    {
 1177|   862k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|     30|        : base(unexpect, std::move(e.error())),
 1474|     30|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|     30|    {
 1476|     30|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|     30|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|     30|          m_has_value(false)
  446|     30|    {
  447|     30|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1652|   416k|    {
 1653|   416k|        return value();
 1654|   416k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|  2.62M|    {
 1627|  2.62M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.62M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.62M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.62M|        return this->get_value();
 1629|  2.62M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  2.62M|    {
  451|  2.62M|        return m_value;
  452|  2.62M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  6.14k|    {
 1598|  6.14k|        return has_value();
 1599|  6.14k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|  1.72M|    {
  485|  1.72M|        return m_has_value;
  486|  1.72M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|   856k|    {
 1663|   856k|        return std::move(value());
 1664|   856k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|   862k|    {
 1627|   862k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   862k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   862k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   862k|        return this->get_value();
 1629|   862k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|   862k|    {
  451|   862k|        return m_value;
  452|   862k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  2.26M|    {
 1837|  2.26M|        return detail::transform_error_impl(std::move(*this),
 1838|  2.26M|                                            std::forward<F>(f));
 1839|  2.26M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|  2.26M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  2.26M|    else {
 1333|  2.26M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.26M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.26M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.20M, False: 59.8k]
  |  |  ------------------
  ------------------
 1335|  2.26M|                   ? result(*std::forward<Exp>(exp))
 1336|  2.26M|                   : result(unexpect,
 1337|  59.8k|                            trivial_invoke(std::forward<F>(f),
 1338|  59.8k|                                           std::forward<Exp>(exp).error()));
 1339|  2.26M|    }
 1340|  2.26M|}
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1427|  2.41M|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.41M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.41M|    {
 1430|  2.41M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  2.41M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.41M|    {
  437|  2.41M|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1483|  59.8k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  59.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  59.8k|    {
 1486|  59.8k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|  2.20M|    {
 1663|  2.20M|        return std::move(value());
 1664|  2.20M|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   743k|    {
 2855|   743k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   743k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   743k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   743k|    {
 2836|   743k|        return t.data();
 2837|   743k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1836|   855k|    {
 1837|   855k|        return detail::transform_error_impl(std::move(*this),
 1838|   855k|                                            std::forward<F>(f));
 1839|   855k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSI_OT0_:
 1322|   855k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   855k|    else {
 1333|   855k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   855k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   855k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 855k, False: 0]
  |  |  ------------------
  ------------------
 1335|   855k|                   ? result(*std::forward<Exp>(exp))
 1336|   855k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|   855k|    }
 1340|   855k|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|   855k|        : base(std::in_place, std::forward<U>(val)),
 1428|   855k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   855k|    {
 1430|   855k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  435|   855k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   855k|    {
  437|   855k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   855k|    {
 1177|   855k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|   855k|    {
 1598|   855k|        return has_value();
 1599|   855k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.71M|    {
  485|  1.71M|        return m_has_value;
  486|  1.71M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|   855k|    {
 1663|   855k|        return std::move(value());
 1664|   855k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|   855k|    {
 1627|   855k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   855k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   855k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   855k|        return this->get_value();
 1629|   855k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   855k|    {
  451|   855k|        return m_value;
  452|   855k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1822|  1.09M|    {
 1823|  1.09M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|  1.09M|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSI_OT0_:
 1322|  1.09M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.09M|    else {
 1333|  1.09M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.09M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.09M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 1.09M]
  |  |  ------------------
  ------------------
 1335|  1.09M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.09M|                   : result(unexpect,
 1337|  1.09M|                            trivial_invoke(std::forward<F>(f),
 1338|  1.09M|                                           std::forward<Exp>(exp).error()));
 1339|  1.09M|    }
 1340|  1.09M|}
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1652|   436k|    {
 1653|   436k|        return value();
 1654|   436k|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3667|   169k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1672|  17.9k|    {
 1673|  17.9k|        return &value();
 1674|  17.9k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2723|   686k|    {
 2724|   686k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   686k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   686k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2704|   686k|    {
 2705|   686k|        return decay_copy(t.begin());
 2706|   686k|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEu7__decayIT_EOS8_:
 1948|   686k|{
 1949|   686k|    return SCN_FWD(t);
  ------------------
  |  |  930|   686k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|   686k|}
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3667|   382k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|   856k|    {
 1837|   856k|        return detail::transform_error_impl(std::move(*this),
 1838|   856k|                                            std::forward<F>(f));
 1839|   856k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1322|   856k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   856k|    else {
 1333|   856k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   856k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   856k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 856k, False: 0]
  |  |  ------------------
  ------------------
 1335|   856k|                   ? result(*std::forward<Exp>(exp))
 1336|   856k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|   856k|    }
 1340|   856k|}
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|   856k|        : base(std::in_place, std::forward<U>(val)),
 1428|   856k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   856k|    {
 1430|   856k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  435|   856k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   856k|    {
  437|   856k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   856k|    {
 1177|   856k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|   856k|    {
 1598|   856k|        return has_value();
 1599|   856k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.71M|    {
  485|  1.71M|        return m_has_value;
  486|  1.71M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|   856k|    {
 1663|   856k|        return std::move(value());
 1664|   856k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|   856k|    {
 1627|   856k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   856k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   856k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   856k|        return this->get_value();
 1629|   856k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   856k|    {
  451|   856k|        return m_value;
  452|   856k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1822|   964k|    {
 1823|   964k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|   964k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSH_OT0_:
 1322|   964k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   964k|    else {
 1333|   964k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   964k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   964k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 964k]
  |  |  ------------------
  ------------------
 1335|   964k|                   ? result(*std::forward<Exp>(exp))
 1336|   964k|                   : result(unexpect,
 1337|   964k|                            trivial_invoke(std::forward<F>(f),
 1338|   964k|                                           std::forward<Exp>(exp).error()));
 1339|   964k|    }
 1340|   964k|}
_ZN3scn2v313scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3646|   964k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  928|   964k|    static_cast<    \
  |  |  929|   964k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3647|   964k|    {
 3648|   964k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1652|   437k|    {
 1653|   437k|        return value();
 1654|   437k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1672|  6.11k|    {
 1673|  6.11k|        return &value();
 1674|  6.11k|    }
_ZN3scn2v313scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3646|  1.09M|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  928|  1.09M|    static_cast<    \
  |  |  929|  1.09M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3647|  1.09M|    {
 3648|  1.09M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IivEEOT_:
 1427|   157k|        : base(std::in_place, std::forward<U>(val)),
 1428|   157k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   157k|    {
 1430|   157k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJiEvEENSt3__110in_place_tEDpOT_:
  435|   157k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   157k|    {
  437|   157k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA29_KcEEEDaDpOT_:
 3653|   178k|{
 3654|   178k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|   178k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|   178k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  1.40M|    {
 2855|  1.40M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  1.40M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  1.40M|    }
_ZN3scn2v36ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  1.40M|    {
 2836|  1.40M|        return t.data();
 2837|  1.40M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5465|  3.02M|    {
 5466|  3.02M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  3.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.02M]
  |  |  ------------------
  ------------------
 5467|      0|            return max_size();
 5468|      0|        }
 5469|       |
 5470|  3.02M|        return static_cast<std::size_t>(m_desc &
 5471|  3.02M|                                        ((1 << detail::packed_arg_bits) - 1));
 5472|  3.02M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5490|  6.05M|    {
 5491|  6.05M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5492|  6.05M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5433|  3.02M|    {
 5434|  3.02M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  3.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.02M]
  |  |  ------------------
  ------------------
 5435|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5436|      0|                return m_args[id];
 5437|      0|            }
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|  3.02M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  3.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.02M]
  |  |  ------------------
  ------------------
 5442|      0|            return {};
 5443|      0|        }
 5444|       |
 5445|  3.02M|        const auto t = type(id);
 5446|  3.02M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  3.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.02M]
  |  |  ------------------
  ------------------
 5447|      0|            return {};
 5448|      0|        }
 5449|       |
 5450|  3.02M|        basic_scan_arg<Context> arg;
 5451|  3.02M|        arg.m_type = t;
 5452|  3.02M|        if (is_only_builtin()) {
  ------------------
  |  Branch (5452:13): [True: 3.02M, False: 0]
  ------------------
 5453|  3.02M|            arg.m_value.ref_value = m_builtin_values[id];
 5454|  3.02M|        }
 5455|      0|        else {
 5456|      0|            arg.m_value = m_values[id];
 5457|      0|        }
 5458|  3.02M|        return arg;
 5459|  3.02M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5499|  3.02M|    {
 5500|       |        // First (0th) index is size, types start after that
 5501|  3.02M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5502|  3.02M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5503|  3.02M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5504|  3.02M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5494|  3.02M|    {
 5495|  3.02M|        return (m_desc & detail::has_custom_types_bit) == 0;
 5496|  3.02M|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5246|  5.73M|    {
 5247|  5.73M|        return m_type != detail::arg_type::none_type;
 5248|  5.73M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   453k|{
 8417|   453k|#define SCN_VISIT(Type)                                         \
 8418|   453k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   453k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   453k|    }                                                           \
 8421|   453k|    else {                                                      \
 8422|   453k|        return vis(monostate_val);                              \
 8423|   453k|    }
 8424|       |
 8425|   453k|    monostate monostate_val{};
 8426|       |
 8427|   453k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 453k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 453k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 453k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 453k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 453k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 453k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 453k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 453k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 453k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 453k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 453k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 453k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 453k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 453k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 453k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   146k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 146k, False: 307k]
  ------------------
 8459|   146k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   146k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   146k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   146k|    }                                                           \
  |  | 8421|   146k|    else {                                                      \
  |  | 8422|   146k|        return vis(monostate_val);                              \
  |  | 8423|   146k|    }
  ------------------
 8460|   298k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 152k, False: 301k]
  ------------------
 8461|   298k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   298k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   298k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   298k|    }                                                           \
  |  | 8421|   298k|    else {                                                      \
  |  | 8422|   298k|        return vis(monostate_val);                              \
  |  | 8423|   298k|    }
  ------------------
 8462|   453k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 155k, False: 298k]
  ------------------
 8463|   453k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   453k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   453k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   453k|    }                                                           \
  |  | 8421|   453k|    else {                                                      \
  |  | 8422|   453k|        return vis(monostate_val);                              \
  |  | 8423|   453k|    }
  ------------------
 8464|   453k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 453k]
  ------------------
 8465|   453k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|   453k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   453k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   453k|    }                                                           \
  |  | 8421|   453k|    else {                                                      \
  |  | 8422|   453k|        return vis(monostate_val);                              \
  |  | 8423|   453k|    }
  ------------------
 8466|   453k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 453k]
  ------------------
 8467|   453k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|   453k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   453k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   453k|    }                                                           \
  |  | 8421|   453k|    else {                                                      \
  |  | 8422|   453k|        return vis(monostate_val);                              \
  |  | 8423|   453k|    }
  ------------------
 8468|   453k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 453k]
  ------------------
 8469|   453k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|   453k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   453k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   453k|    }                                                           \
  |  | 8421|   453k|    else {                                                      \
  |  | 8422|   453k|        return vis(monostate_val);                              \
  |  | 8423|   453k|    }
  ------------------
 8470|   453k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 453k]
  ------------------
 8471|   453k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|   453k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   453k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   453k|    }                                                           \
  |  | 8421|   453k|    else {                                                      \
  |  | 8422|   453k|        return vis(monostate_val);                              \
  |  | 8423|   453k|    }
  ------------------
 8472|   453k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 453k]
  ------------------
 8473|   453k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|   453k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   453k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   453k|    }                                                           \
  |  | 8421|   453k|    else {                                                      \
  |  | 8422|   453k|        return vis(monostate_val);                              \
  |  | 8423|   453k|    }
  ------------------
 8474|   453k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 453k]
  ------------------
 8475|   453k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|   453k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   453k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   453k|    }                                                           \
  |  | 8421|   453k|    else {                                                      \
  |  | 8422|   453k|        return vis(monostate_val);                              \
  |  | 8423|   453k|    }
  ------------------
 8476|       |
 8477|   453k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 453k]
  ------------------
 8478|   453k|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|   453k|            return vis(
 8480|   453k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 453k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 453k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   453k|            SCN_CLANG_POP
 8495|   453k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5543|  2.39M|        : m_format{format}, m_next_arg_id{next_arg_id}
 5544|  2.39M|    {
 5545|  2.39M|    }
_ZN3scn2v318basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8136|  1.30M|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  928|  1.30M|    static_cast<    \
  |  |  929|  1.30M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8137|  1.30M|    {
 8138|  1.30M|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8054|  2.39M|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|  2.39M|    static_cast<    \
  |  |  929|  2.39M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|  2.39M|    static_cast<    \
  |  |  929|  2.39M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8055|  2.39M|    {
 8056|  2.39M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE3getEv:
 4343|  1.79M|{
 4344|  1.79M|    if (is_contiguous()) {
  ------------------
  |  Branch (4344:9): [True: 0, False: 1.79M]
  ------------------
 4345|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4346|      0|                                ranges::default_sentinel};
 4347|      0|    }
 4348|  1.79M|    return ranges::subrange{forward_iterator{this, 0},
 4349|  1.79M|                            ranges::default_sentinel};
 4350|  1.79M|}
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4175|  1.79M|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4176|  1.79M|    {
 4177|  1.79M|        SCN_EXPECT(parent);
  ------------------
  |  |  924|  1.79M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.79M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4178|  1.79M|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|  1.79M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.79M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4179|  1.79M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   497k|{
 8417|   497k|#define SCN_VISIT(Type)                                         \
 8418|   497k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   497k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   497k|    }                                                           \
 8421|   497k|    else {                                                      \
 8422|   497k|        return vis(monostate_val);                              \
 8423|   497k|    }
 8424|       |
 8425|   497k|    monostate monostate_val{};
 8426|       |
 8427|   497k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 497k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 497k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 497k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 497k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 497k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 497k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 497k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 497k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 497k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 497k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 497k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 497k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 497k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 497k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 497k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   159k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 159k, False: 337k]
  ------------------
 8459|   159k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   159k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   159k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   159k|    }                                                           \
  |  | 8421|   159k|    else {                                                      \
  |  | 8422|   159k|        return vis(monostate_val);                              \
  |  | 8423|   159k|    }
  ------------------
 8460|   327k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 168k, False: 329k]
  ------------------
 8461|   327k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   327k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   327k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   327k|    }                                                           \
  |  | 8421|   327k|    else {                                                      \
  |  | 8422|   327k|        return vis(monostate_val);                              \
  |  | 8423|   327k|    }
  ------------------
 8462|   497k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 169k, False: 327k]
  ------------------
 8463|   497k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   497k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   497k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   497k|    }                                                           \
  |  | 8421|   497k|    else {                                                      \
  |  | 8422|   497k|        return vis(monostate_val);                              \
  |  | 8423|   497k|    }
  ------------------
 8464|   497k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 497k]
  ------------------
 8465|   497k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|   497k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   497k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   497k|    }                                                           \
  |  | 8421|   497k|    else {                                                      \
  |  | 8422|   497k|        return vis(monostate_val);                              \
  |  | 8423|   497k|    }
  ------------------
 8466|   497k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 497k]
  ------------------
 8467|   497k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|   497k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   497k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   497k|    }                                                           \
  |  | 8421|   497k|    else {                                                      \
  |  | 8422|   497k|        return vis(monostate_val);                              \
  |  | 8423|   497k|    }
  ------------------
 8468|   497k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 497k]
  ------------------
 8469|   497k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|   497k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   497k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   497k|    }                                                           \
  |  | 8421|   497k|    else {                                                      \
  |  | 8422|   497k|        return vis(monostate_val);                              \
  |  | 8423|   497k|    }
  ------------------
 8470|   497k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 497k]
  ------------------
 8471|   497k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|   497k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   497k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   497k|    }                                                           \
  |  | 8421|   497k|    else {                                                      \
  |  | 8422|   497k|        return vis(monostate_val);                              \
  |  | 8423|   497k|    }
  ------------------
 8472|   497k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 497k]
  ------------------
 8473|   497k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|   497k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   497k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   497k|    }                                                           \
  |  | 8421|   497k|    else {                                                      \
  |  | 8422|   497k|        return vis(monostate_val);                              \
  |  | 8423|   497k|    }
  ------------------
 8474|   497k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 497k]
  ------------------
 8475|   497k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|   497k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   497k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   497k|    }                                                           \
  |  | 8421|   497k|    else {                                                      \
  |  | 8422|   497k|        return vis(monostate_val);                              \
  |  | 8423|   497k|    }
  ------------------
 8476|       |
 8477|   497k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 497k]
  ------------------
 8478|   497k|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|   497k|            return vis(
 8480|   497k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 497k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 497k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   497k|            SCN_CLANG_POP
 8495|   497k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|  1.09M|{
 7044|  1.09M|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|  1.09M|    handler.check_args_exhausted();
 7046|  1.09M|    return handler.get_error();
 7047|  1.09M|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|  1.09M|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|  1.09M|    auto begin = format.data();
 7013|  1.09M|    auto it = begin;
 7014|  1.09M|    const auto end = format.data() + format.size();
 7015|       |
 7016|  2.09M|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 1.09M, False: 997k]
  ------------------
 7017|  1.09M|        const auto ch = *it++;
 7018|  1.09M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 1.09M, False: 0]
  ------------------
 7019|  1.09M|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|  1.09M|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|  1.09M|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 96.0k, False: 997k]
  ------------------
 7023|  96.0k|                return;
 7024|  96.0k|            }
 7025|  1.09M|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|  1.09M|    }
 7036|       |
 7037|   997k|    handler.on_literal_text(begin, end);
 7038|   997k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6941|  1.09M|{
 6942|  1.09M|    struct id_adapter {
 6943|  1.09M|        constexpr void operator()()
 6944|  1.09M|        {
 6945|  1.09M|            arg_id = handler.on_arg_id();
 6946|  1.09M|        }
 6947|  1.09M|        constexpr void operator()(std::size_t id)
 6948|  1.09M|        {
 6949|  1.09M|            arg_id = handler.on_arg_id(id);
 6950|  1.09M|        }
 6951|       |
 6952|  1.09M|        constexpr void on_error(const char* msg)
 6953|  1.09M|        {
 6954|  1.09M|            SCN_UNLIKELY_ATTR
 6955|  1.09M|            handler.on_error(msg);
 6956|  1.09M|        }
 6957|       |
 6958|  1.09M|        Handler& handler;
 6959|  1.09M|        std::size_t arg_id;
 6960|  1.09M|    };
 6961|       |
 6962|  1.09M|    ++begin;
 6963|  1.09M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.09M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.09M]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|  1.09M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 1.09M]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|  1.09M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 1.09M]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|  1.09M|    else {
 6975|  1.09M|        auto adapter = id_adapter{handler, 0};
 6976|  1.09M|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|  1.09M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.09M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.09M]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|  1.09M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 1.09M]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|  1.09M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 1.09M, False: 0]
  ------------------
 6987|  1.09M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  1.09M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.09M]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|  1.09M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|  1.09M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  2.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.09M]
  |  |  |  Branch (859:45): [True: 0, False: 1.09M]
  |  |  |  Branch (859:45): [True: 0, False: 1.09M]
  |  |  ------------------
  ------------------
 6993|      0|                handler.on_error("Unknown format specifier");
 6994|      0|                return begin;
 6995|      0|            }
 6996|  1.09M|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|  1.09M|    }
 7003|  1.09M|    return begin + 1;
 7004|  1.09M|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 8038|  2.39M|    {
 8039|  2.39M|        return m_args.get(id);
 8040|  2.39M|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8048|  2.39M|    {
 8049|  2.39M|        return m_locale;
 8050|  2.39M|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5565|  2.39M|    {
 5566|  2.39M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  2.39M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.39M]
  |  |  ------------------
  ------------------
 5567|      0|            on_error(
 5568|      0|                "Cannot switch from manual to automatic argument indexing");
 5569|      0|            return 0;
 5570|      0|        }
 5571|       |
 5572|  2.39M|        auto id = static_cast<size_t>(m_next_arg_id++);
 5573|  2.39M|        do_check_arg_id(id);
 5574|  2.39M|        return id;
 5575|  2.39M|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6053|  2.39M|{
 6054|  2.39M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6054:9): [Folded - Ignored]
  ------------------
 6055|  2.39M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6055:10): [Folded - Ignored]
  |  Branch (6055:22): [Folded - Ignored]
  ------------------
 6056|       |        // The cast below will cause an error on gcc pre-12
 6057|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6058|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6058:13): [True: 0, False: 0]
  ------------------
 6059|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6060|      0|            SCN_UNLIKELY_ATTR
 6061|      0|            on_error("Argument not found");
 6062|      0|        }
 6063|      0|    }
 6064|  2.39M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|  1.09M|{
 6443|  1.09M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.09M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.09M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|  1.09M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 1.09M, False: 0]
  |  Branch (6444:26): [True: 0, False: 1.09M]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|  1.09M|    handler();
 6449|  1.09M|    return begin;
 6450|  1.09M|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|  1.09M|        {
 6945|  1.09M|            arg_id = handler.on_arg_id();
 6946|  1.09M|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5251|  4.78M|    {
 5252|  4.78M|        return m_type;
 5253|  4.78M|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5560|  2.39M|    {
 5561|  2.39M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5562|  2.39M|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5549|  4.78M|    {
 5550|  4.78M|        return m_format.data();
 5551|  4.78M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7120|  1.09M|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|  1.09M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7121|  1.09M|    {
 7122|  1.09M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  1.09M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.09M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|  1.09M|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6857|  1.09M|{
 6858|  1.09M|    auto do_presentation = [&]() -> const CharT* {
 6859|  1.09M|        if (*begin == CharT{'['}) {
 6860|  1.09M|            auto set = parse_presentation_set(begin, end, handler);
 6861|  1.09M|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|  1.09M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|  1.09M|                return begin;
 6866|  1.09M|            }
 6867|  1.09M|            handler.on_character_set_string(set);
 6868|  1.09M|            return begin;
 6869|  1.09M|        }
 6870|  1.09M|        if (*begin == CharT{'/'}) {
 6871|  1.09M|            return parse_presentation_regex(begin, end, handler);
 6872|  1.09M|        }
 6873|  1.09M|        presentation_type type = parse_presentation_type(*begin++);
 6874|  1.09M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|  1.09M|            handler.on_error("Invalid type specifier in format string");
 6876|  1.09M|            return begin;
 6877|  1.09M|        }
 6878|  1.09M|        handler.on_type(type);
 6879|  1.09M|        return begin;
 6880|  1.09M|    };
 6881|       |
 6882|  1.09M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 1.09M, False: 0]
  |  Branch (6882:28): [True: 1.09M, False: 0]
  ------------------
 6883|  1.09M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 1.09M, False: 0]
  |  Branch (6883:36): [True: 790k, False: 302k]
  ------------------
 6884|   790k|        return do_presentation();
 6885|   790k|    }
 6886|       |
 6887|   302k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   302k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 302k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|   302k|    begin = parse_align(begin, end, handler);
 6893|   302k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   302k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 302k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|   302k|    begin = parse_width(begin, end, handler);
 6899|   302k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   302k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 302k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|   302k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 302k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|   302k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 302k, False: 0]
  ------------------
 6918|   302k|        handler.on_localized();
 6919|   302k|        ++begin;
 6920|   302k|    }
 6921|   302k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   302k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 302k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|   302k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 302k, False: 0]
  |  Branch (6926:25): [True: 0, False: 302k]
  ------------------
 6927|      0|        do_presentation();
 6928|      0|    }
 6929|   302k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   302k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 302k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|   302k|    return begin;
 6935|   302k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6506|  2.39M|{
 6507|  2.39M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6507:13): [True: 1.72M, False: 669k]
  |  Branch (6507:33): [True: 1.72M, False: 0]
  ------------------
 6508|  2.39M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6508:13): [True: 669k, False: 0]
  |  Branch (6508:33): [True: 669k, False: 0]
  ------------------
 6509|  2.39M|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6858|   790k|    auto do_presentation = [&]() -> const CharT* {
 6859|   790k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 0, False: 790k]
  ------------------
 6860|      0|            auto set = parse_presentation_set(begin, end, handler);
 6861|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|      0|            handler.on_character_set_string(set);
 6868|      0|            return begin;
 6869|      0|        }
 6870|   790k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 790k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|   790k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   790k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   790k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 790k]
  |  |  ------------------
  ------------------
 6875|      0|            handler.on_error("Invalid type specifier in format string");
 6876|      0|            return begin;
 6877|      0|        }
 6878|   790k|        handler.on_type(type);
 6879|   790k|        return begin;
 6880|   790k|    };
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6454|  1.72M|{
 6455|  1.72M|    switch (type) {
 6456|      0|        case 'b':
  ------------------
  |  Branch (6456:9): [True: 0, False: 1.72M]
  ------------------
 6457|      0|        case 'B':
  ------------------
  |  Branch (6457:9): [True: 0, False: 1.72M]
  ------------------
 6458|      0|            return presentation_type::int_binary;
 6459|      0|        case 'd':
  ------------------
  |  Branch (6459:9): [True: 0, False: 1.72M]
  ------------------
 6460|      0|            return presentation_type::int_decimal;
 6461|      0|        case 'i':
  ------------------
  |  Branch (6461:9): [True: 0, False: 1.72M]
  ------------------
 6462|      0|            return presentation_type::int_generic;
 6463|      0|        case 'u':
  ------------------
  |  Branch (6463:9): [True: 0, False: 1.72M]
  ------------------
 6464|      0|            return presentation_type::int_unsigned_decimal;
 6465|      0|        case 'o':
  ------------------
  |  Branch (6465:9): [True: 0, False: 1.72M]
  ------------------
 6466|      0|            return presentation_type::int_octal;
 6467|      0|        case 'x':
  ------------------
  |  Branch (6467:9): [True: 0, False: 1.72M]
  ------------------
 6468|      0|        case 'X':
  ------------------
  |  Branch (6468:9): [True: 0, False: 1.72M]
  ------------------
 6469|      0|            return presentation_type::int_hex;
 6470|      0|        case 'r':
  ------------------
  |  Branch (6470:9): [True: 0, False: 1.72M]
  ------------------
 6471|      0|        case 'R':
  ------------------
  |  Branch (6471:9): [True: 0, False: 1.72M]
  ------------------
 6472|      0|            return presentation_type::int_arbitrary_base;
 6473|   729k|        case 'a':
  ------------------
  |  Branch (6473:9): [True: 729k, False: 995k]
  ------------------
 6474|   729k|        case 'A':
  ------------------
  |  Branch (6474:9): [True: 0, False: 1.72M]
  ------------------
 6475|   729k|            return presentation_type::float_hex;
 6476|  57.7k|        case 'e':
  ------------------
  |  Branch (6476:9): [True: 57.7k, False: 1.66M]
  ------------------
 6477|  57.7k|        case 'E':
  ------------------
  |  Branch (6477:9): [True: 0, False: 1.72M]
  ------------------
 6478|  57.7k|            return presentation_type::float_scientific;
 6479|   362k|        case 'f':
  ------------------
  |  Branch (6479:9): [True: 362k, False: 1.36M]
  ------------------
 6480|   362k|        case 'F':
  ------------------
  |  Branch (6480:9): [True: 0, False: 1.72M]
  ------------------
 6481|   362k|            return presentation_type::float_fixed;
 6482|   574k|        case 'g':
  ------------------
  |  Branch (6482:9): [True: 574k, False: 1.14M]
  ------------------
 6483|   574k|        case 'G':
  ------------------
  |  Branch (6483:9): [True: 0, False: 1.72M]
  ------------------
 6484|   574k|            return presentation_type::float_general;
 6485|      0|        case 's':
  ------------------
  |  Branch (6485:9): [True: 0, False: 1.72M]
  ------------------
 6486|      0|            return presentation_type::string;
 6487|      0|        case 'c':
  ------------------
  |  Branch (6487:9): [True: 0, False: 1.72M]
  ------------------
 6488|      0|            return presentation_type::character;
 6489|      0|        case '?':
  ------------------
  |  Branch (6489:9): [True: 0, False: 1.72M]
  ------------------
 6490|      0|            return presentation_type::escaped_character;
 6491|      0|        case 'p':
  ------------------
  |  Branch (6491:9): [True: 0, False: 1.72M]
  ------------------
 6492|      0|            return presentation_type::pointer;
 6493|      0|        case '[':
  ------------------
  |  Branch (6493:9): [True: 0, False: 1.72M]
  ------------------
 6494|      0|        case '/':
  ------------------
  |  Branch (6494:9): [True: 0, False: 1.72M]
  ------------------
 6495|       |            // Should be handled by parse_presentation_set and
 6496|       |            // parse_presentation_regex
 6497|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6498|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6499|      0|        default:
  ------------------
  |  Branch (6499:9): [True: 0, False: 1.72M]
  ------------------
 6500|      0|            return presentation_type::none;
 6501|  1.72M|    }
 6502|  1.72M|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6531|   302k|{
 6532|   302k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   302k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   302k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|   302k|    auto check_align = [](wchar_t ch) {
 6535|   302k|        switch (ch) {
 6536|   302k|            case L'<':
 6537|   302k|                return align_type::left;
 6538|   302k|            case L'>':
 6539|   302k|                return align_type::right;
 6540|   302k|            case L'^':
 6541|   302k|                return align_type::center;
 6542|   302k|            default:
 6543|   302k|                return align_type::none;
 6544|   302k|        }
 6545|   302k|    };
 6546|       |
 6547|   302k|    auto potential_fill_len = code_point_length(begin, end);
 6548|   302k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   604k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 302k]
  |  |  |  Branch (859:45): [True: 0, False: 302k]
  |  |  |  Branch (859:45): [True: 0, False: 302k]
  |  |  ------------------
  ------------------
 6549|   302k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|   302k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|   302k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|   302k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|   302k|    const auto begin_before_fill = begin;
 6559|   302k|    begin += potential_fill_len;
 6560|       |
 6561|   302k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 302k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|   302k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|   302k|    const auto begin_after_fill = begin;
 6567|   302k|    ++begin;
 6568|       |
 6569|   302k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 302k, False: 0]
  ------------------
 6570|   302k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   302k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 302k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|   302k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 0, False: 302k]
  ------------------
 6575|      0|            return begin_before_fill;
 6576|      0|        }
 6577|   302k|    }
 6578|       |
 6579|   302k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 302k, False: 0]
  ------------------
 6580|   302k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 302k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|   302k|        return begin_before_fill;
 6585|   302k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|   302k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6513|   669k|{
 6514|   669k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   669k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   669k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6515|       |    if constexpr (sizeof(CharT) != 1) {
 6516|       |        return 1;
 6517|       |    }
 6518|   669k|    else {
 6519|   669k|        const auto lengths =
 6520|   669k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6521|   669k|            "\3\4";
 6522|   669k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6523|   669k|        return len;
 6524|   669k|    }
 6525|   669k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6534|   604k|    auto check_align = [](wchar_t ch) {
 6535|   604k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 604k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 604k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 604k]
  ------------------
 6541|      0|                return align_type::center;
 6542|   604k|            default:
  ------------------
  |  Branch (6542:13): [True: 604k, False: 0]
  ------------------
 6543|   604k|                return align_type::none;
 6544|   604k|        }
 6545|   604k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6596|   302k|{
 6597|   302k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   302k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   302k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|   302k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 302k, False: 0]
  |  Branch (6599:33): [True: 0, False: 302k]
  ------------------
 6600|      0|        int width = parse_simple_int(begin, end);
 6601|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6602|      0|            handler.on_width(width);
 6603|      0|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|      0|    }
 6609|   302k|    return begin;
 6610|   302k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7126|   302k|    {
 7127|   302k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|   302k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 302k, False: 0]
  ------------------
 7129|   302k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 302k, False: 0]
  ------------------
 7130|   302k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 0, False: 302k]
  ------------------
 7131|   302k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 0, False: 0]
  ------------------
 7132|      0|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|      0|        }
 7137|       |
 7138|   302k|        Handler::on_localized();
 7139|   302k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  1.09M|{
 8417|  1.09M|#define SCN_VISIT(Type)                                         \
 8418|  1.09M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  1.09M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  1.09M|    }                                                           \
 8421|  1.09M|    else {                                                      \
 8422|  1.09M|        return vis(monostate_val);                              \
 8423|  1.09M|    }
 8424|       |
 8425|  1.09M|    monostate monostate_val{};
 8426|       |
 8427|  1.09M|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 1.09M]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 1.09M]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 1.09M]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 1.09M]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 1.09M]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 1.09M]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 1.09M]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 1.09M]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 1.09M]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 1.09M]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 1.09M]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 1.09M]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 1.09M]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 1.09M]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 1.09M]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   355k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 355k, False: 737k]
  ------------------
 8459|   355k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   355k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   355k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   355k|    }                                                           \
  |  | 8421|   355k|    else {                                                      \
  |  | 8422|   355k|        return vis(monostate_val);                              \
  |  | 8423|   355k|    }
  ------------------
 8460|   722k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 366k, False: 726k]
  ------------------
 8461|   722k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   722k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   722k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   722k|    }                                                           \
  |  | 8421|   722k|    else {                                                      \
  |  | 8422|   722k|        return vis(monostate_val);                              \
  |  | 8423|   722k|    }
  ------------------
 8462|  1.09M|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 370k, False: 722k]
  ------------------
 8463|  1.09M|            SCN_VISIT(long double);
  ------------------
  |  | 8418|  1.09M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.09M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.09M|    }                                                           \
  |  | 8421|  1.09M|    else {                                                      \
  |  | 8422|  1.09M|        return vis(monostate_val);                              \
  |  | 8423|  1.09M|    }
  ------------------
 8464|  1.09M|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 1.09M]
  ------------------
 8465|  1.09M|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|  1.09M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.09M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.09M|    }                                                           \
  |  | 8421|  1.09M|    else {                                                      \
  |  | 8422|  1.09M|        return vis(monostate_val);                              \
  |  | 8423|  1.09M|    }
  ------------------
 8466|  1.09M|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 1.09M]
  ------------------
 8467|  1.09M|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|  1.09M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.09M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.09M|    }                                                           \
  |  | 8421|  1.09M|    else {                                                      \
  |  | 8422|  1.09M|        return vis(monostate_val);                              \
  |  | 8423|  1.09M|    }
  ------------------
 8468|  1.09M|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 1.09M]
  ------------------
 8469|  1.09M|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|  1.09M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.09M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.09M|    }                                                           \
  |  | 8421|  1.09M|    else {                                                      \
  |  | 8422|  1.09M|        return vis(monostate_val);                              \
  |  | 8423|  1.09M|    }
  ------------------
 8470|  1.09M|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 1.09M]
  ------------------
 8471|  1.09M|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|  1.09M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.09M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.09M|    }                                                           \
  |  | 8421|  1.09M|    else {                                                      \
  |  | 8422|  1.09M|        return vis(monostate_val);                              \
  |  | 8423|  1.09M|    }
  ------------------
 8472|  1.09M|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 1.09M]
  ------------------
 8473|  1.09M|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|  1.09M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.09M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.09M|    }                                                           \
  |  | 8421|  1.09M|    else {                                                      \
  |  | 8422|  1.09M|        return vis(monostate_val);                              \
  |  | 8423|  1.09M|    }
  ------------------
 8474|  1.09M|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 1.09M]
  ------------------
 8475|  1.09M|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|  1.09M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.09M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.09M|    }                                                           \
  |  | 8421|  1.09M|    else {                                                      \
  |  | 8422|  1.09M|        return vis(monostate_val);                              \
  |  | 8423|  1.09M|    }
  ------------------
 8476|       |
 8477|  1.09M|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 1.09M]
  ------------------
 8478|  1.09M|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|  1.09M|            return vis(
 8480|  1.09M|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 1.09M]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 1.09M]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  1.09M|            SCN_CLANG_POP
 8495|  1.09M|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|  1.30M|{
 7044|  1.30M|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|  1.30M|    handler.check_args_exhausted();
 7046|  1.30M|    return handler.get_error();
 7047|  1.30M|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|  1.30M|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|  1.30M|    auto begin = format.data();
 7013|  1.30M|    auto it = begin;
 7014|  1.30M|    const auto end = format.data() + format.size();
 7015|       |
 7016|  2.50M|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 1.30M, False: 1.20M]
  ------------------
 7017|  1.30M|        const auto ch = *it++;
 7018|  1.30M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 1.30M, False: 0]
  ------------------
 7019|  1.30M|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|  1.30M|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|  1.30M|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 96.0k, False: 1.20M]
  ------------------
 7023|  96.0k|                return;
 7024|  96.0k|            }
 7025|  1.30M|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|  1.30M|    }
 7036|       |
 7037|  1.20M|    handler.on_literal_text(begin, end);
 7038|  1.20M|}
_ZN3scn2v318basic_scan_contextIcE10advance_toENS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
 8174|  1.20M|    {
 8175|  1.20M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  1.20M|    static_cast<    \
  |  |  929|  1.20M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8176|  1.20M|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 6941|  1.30M|{
 6942|  1.30M|    struct id_adapter {
 6943|  1.30M|        constexpr void operator()()
 6944|  1.30M|        {
 6945|  1.30M|            arg_id = handler.on_arg_id();
 6946|  1.30M|        }
 6947|  1.30M|        constexpr void operator()(std::size_t id)
 6948|  1.30M|        {
 6949|  1.30M|            arg_id = handler.on_arg_id(id);
 6950|  1.30M|        }
 6951|       |
 6952|  1.30M|        constexpr void on_error(const char* msg)
 6953|  1.30M|        {
 6954|  1.30M|            SCN_UNLIKELY_ATTR
 6955|  1.30M|            handler.on_error(msg);
 6956|  1.30M|        }
 6957|       |
 6958|  1.30M|        Handler& handler;
 6959|  1.30M|        std::size_t arg_id;
 6960|  1.30M|    };
 6961|       |
 6962|  1.30M|    ++begin;
 6963|  1.30M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.30M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.30M]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|  1.30M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 1.30M]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|  1.30M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 1.30M]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|  1.30M|    else {
 6975|  1.30M|        auto adapter = id_adapter{handler, 0};
 6976|  1.30M|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|  1.30M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.30M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.30M]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|  1.30M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 1.30M]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|  1.30M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 1.30M, False: 0]
  ------------------
 6987|  1.30M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  1.30M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.30M]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|  1.30M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|  1.30M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  2.60M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.30M]
  |  |  |  Branch (859:45): [True: 0, False: 1.30M]
  |  |  |  Branch (859:45): [True: 0, False: 1.30M]
  |  |  ------------------
  ------------------
 6993|      0|                handler.on_error("Unknown format specifier");
 6994|      0|                return begin;
 6995|      0|            }
 6996|  1.30M|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|  1.30M|    }
 7003|  1.30M|    return begin + 1;
 7004|  1.30M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|  1.30M|{
 6443|  1.30M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.30M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.30M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|  1.30M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 1.30M, False: 0]
  |  Branch (6444:26): [True: 0, False: 1.30M]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|  1.30M|    handler();
 6449|  1.30M|    return begin;
 6450|  1.30M|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|  1.30M|        {
 6945|  1.30M|            arg_id = handler.on_arg_id();
 6946|  1.30M|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7120|  1.30M|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|  1.30M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7121|  1.30M|    {
 7122|  1.30M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  1.30M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.30M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|  1.30M|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6857|  1.30M|{
 6858|  1.30M|    auto do_presentation = [&]() -> const CharT* {
 6859|  1.30M|        if (*begin == CharT{'['}) {
 6860|  1.30M|            auto set = parse_presentation_set(begin, end, handler);
 6861|  1.30M|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|  1.30M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|  1.30M|                return begin;
 6866|  1.30M|            }
 6867|  1.30M|            handler.on_character_set_string(set);
 6868|  1.30M|            return begin;
 6869|  1.30M|        }
 6870|  1.30M|        if (*begin == CharT{'/'}) {
 6871|  1.30M|            return parse_presentation_regex(begin, end, handler);
 6872|  1.30M|        }
 6873|  1.30M|        presentation_type type = parse_presentation_type(*begin++);
 6874|  1.30M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|  1.30M|            handler.on_error("Invalid type specifier in format string");
 6876|  1.30M|            return begin;
 6877|  1.30M|        }
 6878|  1.30M|        handler.on_type(type);
 6879|  1.30M|        return begin;
 6880|  1.30M|    };
 6881|       |
 6882|  1.30M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 1.30M, False: 0]
  |  Branch (6882:28): [True: 1.30M, False: 0]
  ------------------
 6883|  1.30M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 1.30M, False: 0]
  |  Branch (6883:36): [True: 933k, False: 366k]
  ------------------
 6884|   933k|        return do_presentation();
 6885|   933k|    }
 6886|       |
 6887|   366k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   366k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 366k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|   366k|    begin = parse_align(begin, end, handler);
 6893|   366k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   366k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 366k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|   366k|    begin = parse_width(begin, end, handler);
 6899|   366k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   366k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 366k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|   366k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 366k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|   366k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 366k, False: 0]
  ------------------
 6918|   366k|        handler.on_localized();
 6919|   366k|        ++begin;
 6920|   366k|    }
 6921|   366k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   366k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 366k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|   366k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 366k, False: 0]
  |  Branch (6926:25): [True: 0, False: 366k]
  ------------------
 6927|      0|        do_presentation();
 6928|      0|    }
 6929|   366k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   366k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 366k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|   366k|    return begin;
 6935|   366k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6858|   933k|    auto do_presentation = [&]() -> const CharT* {
 6859|   933k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 0, False: 933k]
  ------------------
 6860|      0|            auto set = parse_presentation_set(begin, end, handler);
 6861|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|      0|            handler.on_character_set_string(set);
 6868|      0|            return begin;
 6869|      0|        }
 6870|   933k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 933k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|   933k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   933k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   933k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 933k]
  |  |  ------------------
  ------------------
 6875|      0|            handler.on_error("Invalid type specifier in format string");
 6876|      0|            return begin;
 6877|      0|        }
 6878|   933k|        handler.on_type(type);
 6879|   933k|        return begin;
 6880|   933k|    };
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6531|   366k|{
 6532|   366k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   366k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   366k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|   366k|    auto check_align = [](wchar_t ch) {
 6535|   366k|        switch (ch) {
 6536|   366k|            case L'<':
 6537|   366k|                return align_type::left;
 6538|   366k|            case L'>':
 6539|   366k|                return align_type::right;
 6540|   366k|            case L'^':
 6541|   366k|                return align_type::center;
 6542|   366k|            default:
 6543|   366k|                return align_type::none;
 6544|   366k|        }
 6545|   366k|    };
 6546|       |
 6547|   366k|    auto potential_fill_len = code_point_length(begin, end);
 6548|   366k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   733k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 366k]
  |  |  |  Branch (859:45): [True: 0, False: 366k]
  |  |  |  Branch (859:45): [True: 0, False: 366k]
  |  |  ------------------
  ------------------
 6549|   366k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|   366k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|   366k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|   366k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|   366k|    const auto begin_before_fill = begin;
 6559|   366k|    begin += potential_fill_len;
 6560|       |
 6561|   366k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 366k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|   366k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|   366k|    const auto begin_after_fill = begin;
 6567|   366k|    ++begin;
 6568|       |
 6569|   366k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 366k, False: 0]
  ------------------
 6570|   366k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   366k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 366k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|   366k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 0, False: 366k]
  ------------------
 6575|      0|            return begin_before_fill;
 6576|      0|        }
 6577|   366k|    }
 6578|       |
 6579|   366k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 366k, False: 0]
  ------------------
 6580|   366k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 366k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|   366k|        return begin_before_fill;
 6585|   366k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|   366k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6534|   733k|    auto check_align = [](wchar_t ch) {
 6535|   733k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 733k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 733k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 733k]
  ------------------
 6541|      0|                return align_type::center;
 6542|   733k|            default:
  ------------------
  |  Branch (6542:13): [True: 733k, False: 0]
  ------------------
 6543|   733k|                return align_type::none;
 6544|   733k|        }
 6545|   733k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6596|   366k|{
 6597|   366k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   366k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   366k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|   366k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 366k, False: 0]
  |  Branch (6599:33): [True: 0, False: 366k]
  ------------------
 6600|      0|        int width = parse_simple_int(begin, end);
 6601|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6602|      0|            handler.on_width(width);
 6603|      0|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|      0|    }
 6609|   366k|    return begin;
 6610|   366k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 7126|   366k|    {
 7127|   366k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|   366k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 366k, False: 0]
  ------------------
 7129|   366k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 366k, False: 0]
  ------------------
 7130|   366k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 0, False: 366k]
  ------------------
 7131|   366k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 0, False: 0]
  ------------------
 7132|      0|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|      0|        }
 7137|       |
 7138|   366k|        Handler::on_localized();
 7139|   366k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  1.30M|{
 8417|  1.30M|#define SCN_VISIT(Type)                                         \
 8418|  1.30M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  1.30M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  1.30M|    }                                                           \
 8421|  1.30M|    else {                                                      \
 8422|  1.30M|        return vis(monostate_val);                              \
 8423|  1.30M|    }
 8424|       |
 8425|  1.30M|    monostate monostate_val{};
 8426|       |
 8427|  1.30M|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 1.30M]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 1.30M]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 1.30M]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 1.30M]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 1.30M]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 1.30M]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 1.30M]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 1.30M]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 1.30M]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 1.30M]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 1.30M]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 1.30M]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 1.30M]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 1.30M]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 1.30M]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   419k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 419k, False: 880k]
  ------------------
 8459|   419k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   419k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   419k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   419k|    }                                                           \
  |  | 8421|   419k|    else {                                                      \
  |  | 8422|   419k|        return vis(monostate_val);                              \
  |  | 8423|   419k|    }
  ------------------
 8460|   857k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 438k, False: 862k]
  ------------------
 8461|   857k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   857k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   857k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   857k|    }                                                           \
  |  | 8421|   857k|    else {                                                      \
  |  | 8422|   857k|        return vis(monostate_val);                              \
  |  | 8423|   857k|    }
  ------------------
 8462|  1.30M|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 442k, False: 857k]
  ------------------
 8463|  1.30M|            SCN_VISIT(long double);
  ------------------
  |  | 8418|  1.30M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.30M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.30M|    }                                                           \
  |  | 8421|  1.30M|    else {                                                      \
  |  | 8422|  1.30M|        return vis(monostate_val);                              \
  |  | 8423|  1.30M|    }
  ------------------
 8464|  1.30M|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 1.30M]
  ------------------
 8465|  1.30M|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|  1.30M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.30M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.30M|    }                                                           \
  |  | 8421|  1.30M|    else {                                                      \
  |  | 8422|  1.30M|        return vis(monostate_val);                              \
  |  | 8423|  1.30M|    }
  ------------------
 8466|  1.30M|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 1.30M]
  ------------------
 8467|  1.30M|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|  1.30M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.30M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.30M|    }                                                           \
  |  | 8421|  1.30M|    else {                                                      \
  |  | 8422|  1.30M|        return vis(monostate_val);                              \
  |  | 8423|  1.30M|    }
  ------------------
 8468|  1.30M|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 1.30M]
  ------------------
 8469|  1.30M|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|  1.30M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.30M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.30M|    }                                                           \
  |  | 8421|  1.30M|    else {                                                      \
  |  | 8422|  1.30M|        return vis(monostate_val);                              \
  |  | 8423|  1.30M|    }
  ------------------
 8470|  1.30M|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 1.30M]
  ------------------
 8471|  1.30M|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|  1.30M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.30M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.30M|    }                                                           \
  |  | 8421|  1.30M|    else {                                                      \
  |  | 8422|  1.30M|        return vis(monostate_val);                              \
  |  | 8423|  1.30M|    }
  ------------------
 8472|  1.30M|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 1.30M]
  ------------------
 8473|  1.30M|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|  1.30M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.30M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.30M|    }                                                           \
  |  | 8421|  1.30M|    else {                                                      \
  |  | 8422|  1.30M|        return vis(monostate_val);                              \
  |  | 8423|  1.30M|    }
  ------------------
 8474|  1.30M|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 1.30M]
  ------------------
 8475|  1.30M|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|  1.30M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.30M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.30M|    }                                                           \
  |  | 8421|  1.30M|    else {                                                      \
  |  | 8422|  1.30M|        return vis(monostate_val);                              \
  |  | 8423|  1.30M|    }
  ------------------
 8476|       |
 8477|  1.30M|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 1.30M]
  ------------------
 8478|  1.30M|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|  1.30M|            return vis(
 8480|  1.30M|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 1.30M]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 1.30M]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  1.30M|            SCN_CLANG_POP
 8495|  1.30M|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v36detail17basic_scan_bufferIcE8sync_allEv:
 4075|   124k|    {
 4076|   124k|        sync(0);
 4077|   124k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5465|  1.56M|    {
 5466|  1.56M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  1.56M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.56M]
  |  |  ------------------
  ------------------
 5467|      0|            return max_size();
 5468|      0|        }
 5469|       |
 5470|  1.56M|        return static_cast<std::size_t>(m_desc &
 5471|  1.56M|                                        ((1 << detail::packed_arg_bits) - 1));
 5472|  1.56M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5490|  3.13M|    {
 5491|  3.13M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5492|  3.13M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5433|  1.56M|    {
 5434|  1.56M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  1.56M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.56M]
  |  |  ------------------
  ------------------
 5435|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5436|      0|                return m_args[id];
 5437|      0|            }
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|  1.56M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  1.56M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.56M]
  |  |  ------------------
  ------------------
 5442|      0|            return {};
 5443|      0|        }
 5444|       |
 5445|  1.56M|        const auto t = type(id);
 5446|  1.56M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  1.56M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.56M]
  |  |  ------------------
  ------------------
 5447|      0|            return {};
 5448|      0|        }
 5449|       |
 5450|  1.56M|        basic_scan_arg<Context> arg;
 5451|  1.56M|        arg.m_type = t;
 5452|  1.56M|        if (is_only_builtin()) {
  ------------------
  |  Branch (5452:13): [True: 1.56M, False: 0]
  ------------------
 5453|  1.56M|            arg.m_value.ref_value = m_builtin_values[id];
 5454|  1.56M|        }
 5455|      0|        else {
 5456|      0|            arg.m_value = m_values[id];
 5457|      0|        }
 5458|  1.56M|        return arg;
 5459|  1.56M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5499|  1.56M|    {
 5500|       |        // First (0th) index is size, types start after that
 5501|  1.56M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5502|  1.56M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5503|  1.56M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5504|  1.56M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5494|  1.56M|    {
 5495|  1.56M|        return (m_desc & detail::has_custom_types_bit) == 0;
 5496|  1.56M|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5246|  2.97M|    {
 5247|  2.97M|        return m_type != detail::arg_type::none_type;
 5248|  2.97M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   231k|{
 8417|   231k|#define SCN_VISIT(Type)                                         \
 8418|   231k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   231k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   231k|    }                                                           \
 8421|   231k|    else {                                                      \
 8422|   231k|        return vis(monostate_val);                              \
 8423|   231k|    }
 8424|       |
 8425|   231k|    monostate monostate_val{};
 8426|       |
 8427|   231k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 231k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 231k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 231k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 231k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 231k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 231k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 231k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 231k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 231k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 231k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 231k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 231k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 231k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 231k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 231k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|  66.8k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 66.8k, False: 164k]
  ------------------
 8459|  66.8k|            SCN_VISIT(float);
  ------------------
  |  | 8418|  66.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  66.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  66.8k|    }                                                           \
  |  | 8421|  66.8k|    else {                                                      \
  |  | 8422|  66.8k|        return vis(monostate_val);                              \
  |  | 8423|  66.8k|    }
  ------------------
 8460|   147k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 80.8k, False: 150k]
  ------------------
 8461|   147k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   147k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   147k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   147k|    }                                                           \
  |  | 8421|   147k|    else {                                                      \
  |  | 8422|   147k|        return vis(monostate_val);                              \
  |  | 8423|   147k|    }
  ------------------
 8462|   231k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 83.3k, False: 147k]
  ------------------
 8463|   231k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   231k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   231k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   231k|    }                                                           \
  |  | 8421|   231k|    else {                                                      \
  |  | 8422|   231k|        return vis(monostate_val);                              \
  |  | 8423|   231k|    }
  ------------------
 8464|   231k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 231k]
  ------------------
 8465|   231k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|   231k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   231k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   231k|    }                                                           \
  |  | 8421|   231k|    else {                                                      \
  |  | 8422|   231k|        return vis(monostate_val);                              \
  |  | 8423|   231k|    }
  ------------------
 8466|   231k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 231k]
  ------------------
 8467|   231k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|   231k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   231k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   231k|    }                                                           \
  |  | 8421|   231k|    else {                                                      \
  |  | 8422|   231k|        return vis(monostate_val);                              \
  |  | 8423|   231k|    }
  ------------------
 8468|   231k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 231k]
  ------------------
 8469|   231k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|   231k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   231k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   231k|    }                                                           \
  |  | 8421|   231k|    else {                                                      \
  |  | 8422|   231k|        return vis(monostate_val);                              \
  |  | 8423|   231k|    }
  ------------------
 8470|   231k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 231k]
  ------------------
 8471|   231k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|   231k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   231k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   231k|    }                                                           \
  |  | 8421|   231k|    else {                                                      \
  |  | 8422|   231k|        return vis(monostate_val);                              \
  |  | 8423|   231k|    }
  ------------------
 8472|   231k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 231k]
  ------------------
 8473|   231k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|   231k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   231k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   231k|    }                                                           \
  |  | 8421|   231k|    else {                                                      \
  |  | 8422|   231k|        return vis(monostate_val);                              \
  |  | 8423|   231k|    }
  ------------------
 8474|   231k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 231k]
  ------------------
 8475|   231k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|   231k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   231k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   231k|    }                                                           \
  |  | 8421|   231k|    else {                                                      \
  |  | 8422|   231k|        return vis(monostate_val);                              \
  |  | 8423|   231k|    }
  ------------------
 8476|       |
 8477|   231k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 231k]
  ------------------
 8478|   231k|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|   231k|            return vis(
 8480|   231k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 231k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 231k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   231k|            SCN_CLANG_POP
 8495|   231k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5543|  1.25M|        : m_format{format}, m_next_arg_id{next_arg_id}
 5544|  1.25M|    {
 5545|  1.25M|    }
_ZN3scn2v318basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8136|   628k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  928|   628k|    static_cast<    \
  |  |  929|   628k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8137|   628k|    {
 8138|   628k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8054|  1.25M|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|  1.25M|    static_cast<    \
  |  |  929|  1.25M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|  1.25M|    static_cast<    \
  |  |  929|  1.25M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8055|  1.25M|    {
 8056|  1.25M|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   629k|{
 7044|   629k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   629k|    handler.check_args_exhausted();
 7046|   629k|    return handler.get_error();
 7047|   629k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   629k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   629k|    auto begin = format.data();
 7013|   629k|    auto it = begin;
 7014|   629k|    const auto end = format.data() + format.size();
 7015|       |
 7016|  1.06M|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 629k, False: 437k]
  ------------------
 7017|   629k|        const auto ch = *it++;
 7018|   629k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 629k, False: 0]
  ------------------
 7019|   629k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   629k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   629k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 192k, False: 437k]
  ------------------
 7023|   192k|                return;
 7024|   192k|            }
 7025|   629k|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|   629k|    }
 7036|       |
 7037|   437k|    handler.on_literal_text(begin, end);
 7038|   437k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6941|   629k|{
 6942|   629k|    struct id_adapter {
 6943|   629k|        constexpr void operator()()
 6944|   629k|        {
 6945|   629k|            arg_id = handler.on_arg_id();
 6946|   629k|        }
 6947|   629k|        constexpr void operator()(std::size_t id)
 6948|   629k|        {
 6949|   629k|            arg_id = handler.on_arg_id(id);
 6950|   629k|        }
 6951|       |
 6952|   629k|        constexpr void on_error(const char* msg)
 6953|   629k|        {
 6954|   629k|            SCN_UNLIKELY_ATTR
 6955|   629k|            handler.on_error(msg);
 6956|   629k|        }
 6957|       |
 6958|   629k|        Handler& handler;
 6959|   629k|        std::size_t arg_id;
 6960|   629k|    };
 6961|       |
 6962|   629k|    ++begin;
 6963|   629k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   629k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 629k]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|   629k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 629k]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|   629k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 629k]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|   629k|    else {
 6975|   629k|        auto adapter = id_adapter{handler, 0};
 6976|   629k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|   629k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   629k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 629k]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|   629k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 629k]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|   629k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 629k, False: 0]
  ------------------
 6987|   629k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   629k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 629k]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|   629k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|   629k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  1.25M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 629k]
  |  |  |  Branch (859:45): [True: 0, False: 629k]
  |  |  |  Branch (859:45): [True: 0, False: 629k]
  |  |  ------------------
  ------------------
 6993|      0|                handler.on_error("Unknown format specifier");
 6994|      0|                return begin;
 6995|      0|            }
 6996|   629k|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|   629k|    }
 7003|   629k|    return begin + 1;
 7004|   629k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 8038|  1.25M|    {
 8039|  1.25M|        return m_args.get(id);
 8040|  1.25M|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8048|  1.25M|    {
 8049|  1.25M|        return m_locale;
 8050|  1.25M|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5565|  1.25M|    {
 5566|  1.25M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  1.25M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.25M]
  |  |  ------------------
  ------------------
 5567|      0|            on_error(
 5568|      0|                "Cannot switch from manual to automatic argument indexing");
 5569|      0|            return 0;
 5570|      0|        }
 5571|       |
 5572|  1.25M|        auto id = static_cast<size_t>(m_next_arg_id++);
 5573|  1.25M|        do_check_arg_id(id);
 5574|  1.25M|        return id;
 5575|  1.25M|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6053|  1.25M|{
 6054|  1.25M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6054:9): [Folded - Ignored]
  ------------------
 6055|  1.25M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6055:10): [Folded - Ignored]
  |  Branch (6055:22): [Folded - Ignored]
  ------------------
 6056|       |        // The cast below will cause an error on gcc pre-12
 6057|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6058|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6058:13): [True: 0, False: 0]
  ------------------
 6059|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6060|      0|            SCN_UNLIKELY_ATTR
 6061|      0|            on_error("Argument not found");
 6062|      0|        }
 6063|      0|    }
 6064|  1.25M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|   629k|{
 6443|   629k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   629k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   629k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|   629k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 629k, False: 0]
  |  Branch (6444:26): [True: 0, False: 629k]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|   629k|    handler();
 6449|   629k|    return begin;
 6450|   629k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|   629k|        {
 6945|   629k|            arg_id = handler.on_arg_id();
 6946|   629k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5251|  2.51M|    {
 5252|  2.51M|        return m_type;
 5253|  2.51M|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5560|  1.25M|    {
 5561|  1.25M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5562|  1.25M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE3getEv:
 4343|   859k|{
 4344|   859k|    if (is_contiguous()) {
  ------------------
  |  Branch (4344:9): [True: 0, False: 859k]
  ------------------
 4345|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4346|      0|                                ranges::default_sentinel};
 4347|      0|    }
 4348|   859k|    return ranges::subrange{forward_iterator{this, 0},
 4349|   859k|                            ranges::default_sentinel};
 4350|   859k|}
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4175|   859k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4176|   859k|    {
 4177|   859k|        SCN_EXPECT(parent);
  ------------------
  |  |  924|   859k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   859k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4178|   859k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|   859k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   859k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4179|   859k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5549|  2.51M|    {
 5550|  2.51M|        return m_format.data();
 5551|  2.51M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7120|   629k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|   629k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7121|   629k|    {
 7122|   629k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   629k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   629k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|   629k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6857|   629k|{
 6858|   629k|    auto do_presentation = [&]() -> const CharT* {
 6859|   629k|        if (*begin == CharT{'['}) {
 6860|   629k|            auto set = parse_presentation_set(begin, end, handler);
 6861|   629k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|   629k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|   629k|                return begin;
 6866|   629k|            }
 6867|   629k|            handler.on_character_set_string(set);
 6868|   629k|            return begin;
 6869|   629k|        }
 6870|   629k|        if (*begin == CharT{'/'}) {
 6871|   629k|            return parse_presentation_regex(begin, end, handler);
 6872|   629k|        }
 6873|   629k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   629k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|   629k|            handler.on_error("Invalid type specifier in format string");
 6876|   629k|            return begin;
 6877|   629k|        }
 6878|   629k|        handler.on_type(type);
 6879|   629k|        return begin;
 6880|   629k|    };
 6881|       |
 6882|   629k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 629k, False: 0]
  |  Branch (6882:28): [True: 629k, False: 0]
  ------------------
 6883|   629k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 629k, False: 0]
  |  Branch (6883:36): [True: 475k, False: 154k]
  ------------------
 6884|   475k|        return do_presentation();
 6885|   475k|    }
 6886|       |
 6887|   154k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   154k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 154k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|   154k|    begin = parse_align(begin, end, handler);
 6893|   154k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   154k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 154k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|   154k|    begin = parse_width(begin, end, handler);
 6899|   154k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   154k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 154k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|   154k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 154k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|   154k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 154k, False: 0]
  ------------------
 6918|   154k|        handler.on_localized();
 6919|   154k|        ++begin;
 6920|   154k|    }
 6921|   154k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   154k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 154k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|   154k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 154k, False: 0]
  |  Branch (6926:25): [True: 0, False: 154k]
  ------------------
 6927|      0|        do_presentation();
 6928|      0|    }
 6929|   154k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   154k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 154k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|   154k|    return begin;
 6935|   154k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6506|  1.25M|{
 6507|  1.25M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6507:13): [True: 950k, False: 307k]
  |  Branch (6507:33): [True: 950k, False: 0]
  ------------------
 6508|  1.25M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6508:13): [True: 307k, False: 0]
  |  Branch (6508:33): [True: 307k, False: 0]
  ------------------
 6509|  1.25M|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6858|   475k|    auto do_presentation = [&]() -> const CharT* {
 6859|   475k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 0, False: 475k]
  ------------------
 6860|      0|            auto set = parse_presentation_set(begin, end, handler);
 6861|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|      0|            handler.on_character_set_string(set);
 6868|      0|            return begin;
 6869|      0|        }
 6870|   475k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 475k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|   475k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   475k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   475k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 475k]
  |  |  ------------------
  ------------------
 6875|      0|            handler.on_error("Invalid type specifier in format string");
 6876|      0|            return begin;
 6877|      0|        }
 6878|   475k|        handler.on_type(type);
 6879|   475k|        return begin;
 6880|   475k|    };
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6454|   950k|{
 6455|   950k|    switch (type) {
 6456|      0|        case 'b':
  ------------------
  |  Branch (6456:9): [True: 0, False: 950k]
  ------------------
 6457|      0|        case 'B':
  ------------------
  |  Branch (6457:9): [True: 0, False: 950k]
  ------------------
 6458|      0|            return presentation_type::int_binary;
 6459|      0|        case 'd':
  ------------------
  |  Branch (6459:9): [True: 0, False: 950k]
  ------------------
 6460|      0|            return presentation_type::int_decimal;
 6461|      0|        case 'i':
  ------------------
  |  Branch (6461:9): [True: 0, False: 950k]
  ------------------
 6462|      0|            return presentation_type::int_generic;
 6463|      0|        case 'u':
  ------------------
  |  Branch (6463:9): [True: 0, False: 950k]
  ------------------
 6464|      0|            return presentation_type::int_unsigned_decimal;
 6465|      0|        case 'o':
  ------------------
  |  Branch (6465:9): [True: 0, False: 950k]
  ------------------
 6466|      0|            return presentation_type::int_octal;
 6467|      0|        case 'x':
  ------------------
  |  Branch (6467:9): [True: 0, False: 950k]
  ------------------
 6468|      0|        case 'X':
  ------------------
  |  Branch (6468:9): [True: 0, False: 950k]
  ------------------
 6469|      0|            return presentation_type::int_hex;
 6470|      0|        case 'r':
  ------------------
  |  Branch (6470:9): [True: 0, False: 950k]
  ------------------
 6471|      0|        case 'R':
  ------------------
  |  Branch (6471:9): [True: 0, False: 950k]
  ------------------
 6472|      0|            return presentation_type::int_arbitrary_base;
 6473|   338k|        case 'a':
  ------------------
  |  Branch (6473:9): [True: 338k, False: 611k]
  ------------------
 6474|   338k|        case 'A':
  ------------------
  |  Branch (6474:9): [True: 0, False: 950k]
  ------------------
 6475|   338k|            return presentation_type::float_hex;
 6476|  78.8k|        case 'e':
  ------------------
  |  Branch (6476:9): [True: 78.8k, False: 871k]
  ------------------
 6477|  78.8k|        case 'E':
  ------------------
  |  Branch (6477:9): [True: 0, False: 950k]
  ------------------
 6478|  78.8k|            return presentation_type::float_scientific;
 6479|   243k|        case 'f':
  ------------------
  |  Branch (6479:9): [True: 243k, False: 707k]
  ------------------
 6480|   243k|        case 'F':
  ------------------
  |  Branch (6480:9): [True: 0, False: 950k]
  ------------------
 6481|   243k|            return presentation_type::float_fixed;
 6482|   289k|        case 'g':
  ------------------
  |  Branch (6482:9): [True: 289k, False: 660k]
  ------------------
 6483|   289k|        case 'G':
  ------------------
  |  Branch (6483:9): [True: 0, False: 950k]
  ------------------
 6484|   289k|            return presentation_type::float_general;
 6485|      0|        case 's':
  ------------------
  |  Branch (6485:9): [True: 0, False: 950k]
  ------------------
 6486|      0|            return presentation_type::string;
 6487|      0|        case 'c':
  ------------------
  |  Branch (6487:9): [True: 0, False: 950k]
  ------------------
 6488|      0|            return presentation_type::character;
 6489|      0|        case '?':
  ------------------
  |  Branch (6489:9): [True: 0, False: 950k]
  ------------------
 6490|      0|            return presentation_type::escaped_character;
 6491|      0|        case 'p':
  ------------------
  |  Branch (6491:9): [True: 0, False: 950k]
  ------------------
 6492|      0|            return presentation_type::pointer;
 6493|      0|        case '[':
  ------------------
  |  Branch (6493:9): [True: 0, False: 950k]
  ------------------
 6494|      0|        case '/':
  ------------------
  |  Branch (6494:9): [True: 0, False: 950k]
  ------------------
 6495|       |            // Should be handled by parse_presentation_set and
 6496|       |            // parse_presentation_regex
 6497|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6498|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6499|      0|        default:
  ------------------
  |  Branch (6499:9): [True: 0, False: 950k]
  ------------------
 6500|      0|            return presentation_type::none;
 6501|   950k|    }
 6502|   950k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6531|   154k|{
 6532|   154k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   154k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   154k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|   154k|    auto check_align = [](wchar_t ch) {
 6535|   154k|        switch (ch) {
 6536|   154k|            case L'<':
 6537|   154k|                return align_type::left;
 6538|   154k|            case L'>':
 6539|   154k|                return align_type::right;
 6540|   154k|            case L'^':
 6541|   154k|                return align_type::center;
 6542|   154k|            default:
 6543|   154k|                return align_type::none;
 6544|   154k|        }
 6545|   154k|    };
 6546|       |
 6547|   154k|    auto potential_fill_len = code_point_length(begin, end);
 6548|   154k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   308k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 154k]
  |  |  |  Branch (859:45): [True: 0, False: 154k]
  |  |  |  Branch (859:45): [True: 0, False: 154k]
  |  |  ------------------
  ------------------
 6549|   154k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|   154k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|   154k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|   154k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|   154k|    const auto begin_before_fill = begin;
 6559|   154k|    begin += potential_fill_len;
 6560|       |
 6561|   154k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 154k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|   154k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|   154k|    const auto begin_after_fill = begin;
 6567|   154k|    ++begin;
 6568|       |
 6569|   154k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 154k, False: 0]
  ------------------
 6570|   154k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   154k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 154k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|   154k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 0, False: 154k]
  ------------------
 6575|      0|            return begin_before_fill;
 6576|      0|        }
 6577|   154k|    }
 6578|       |
 6579|   154k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 154k, False: 0]
  ------------------
 6580|   154k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 154k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|   154k|        return begin_before_fill;
 6585|   154k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|   154k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6513|   307k|{
 6514|   307k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   307k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   307k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6515|   307k|    if constexpr (sizeof(CharT) != 1) {
 6516|   307k|        return 1;
 6517|       |    }
 6518|       |    else {
 6519|       |        const auto lengths =
 6520|       |            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6521|       |            "\3\4";
 6522|       |        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6523|       |        return len;
 6524|       |    }
 6525|   307k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6534|   308k|    auto check_align = [](wchar_t ch) {
 6535|   308k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 308k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 308k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 308k]
  ------------------
 6541|      0|                return align_type::center;
 6542|   308k|            default:
  ------------------
  |  Branch (6542:13): [True: 308k, False: 0]
  ------------------
 6543|   308k|                return align_type::none;
 6544|   308k|        }
 6545|   308k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6596|   154k|{
 6597|   154k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   154k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   154k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|   154k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 154k, False: 0]
  |  Branch (6599:33): [True: 0, False: 154k]
  ------------------
 6600|      0|        int width = parse_simple_int(begin, end);
 6601|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6602|      0|            handler.on_width(width);
 6603|      0|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|      0|    }
 6609|   154k|    return begin;
 6610|   154k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7126|   154k|    {
 7127|   154k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|   154k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 154k, False: 0]
  ------------------
 7129|   154k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 154k, False: 0]
  ------------------
 7130|   154k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 0, False: 154k]
  ------------------
 7131|   154k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 0, False: 0]
  ------------------
 7132|      0|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|      0|        }
 7137|       |
 7138|   154k|        Handler::on_localized();
 7139|   154k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   629k|{
 8417|   629k|#define SCN_VISIT(Type)                                         \
 8418|   629k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   629k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   629k|    }                                                           \
 8421|   629k|    else {                                                      \
 8422|   629k|        return vis(monostate_val);                              \
 8423|   629k|    }
 8424|       |
 8425|   629k|    monostate monostate_val{};
 8426|       |
 8427|   629k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 629k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 629k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 629k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 629k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 629k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 629k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 629k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 629k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 629k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 629k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 629k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 629k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 629k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 629k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 629k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   196k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 196k, False: 433k]
  ------------------
 8459|   196k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   196k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   196k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   196k|    }                                                           \
  |  | 8421|   196k|    else {                                                      \
  |  | 8422|   196k|        return vis(monostate_val);                              \
  |  | 8423|   196k|    }
  ------------------
 8460|   411k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 214k, False: 414k]
  ------------------
 8461|   411k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   411k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   411k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   411k|    }                                                           \
  |  | 8421|   411k|    else {                                                      \
  |  | 8422|   411k|        return vis(monostate_val);                              \
  |  | 8423|   411k|    }
  ------------------
 8462|   629k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 218k, False: 411k]
  ------------------
 8463|   629k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   629k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   629k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   629k|    }                                                           \
  |  | 8421|   629k|    else {                                                      \
  |  | 8422|   629k|        return vis(monostate_val);                              \
  |  | 8423|   629k|    }
  ------------------
 8464|   629k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 629k]
  ------------------
 8465|   629k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|   629k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   629k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   629k|    }                                                           \
  |  | 8421|   629k|    else {                                                      \
  |  | 8422|   629k|        return vis(monostate_val);                              \
  |  | 8423|   629k|    }
  ------------------
 8466|   629k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 629k]
  ------------------
 8467|   629k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|   629k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   629k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   629k|    }                                                           \
  |  | 8421|   629k|    else {                                                      \
  |  | 8422|   629k|        return vis(monostate_val);                              \
  |  | 8423|   629k|    }
  ------------------
 8468|   629k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 629k]
  ------------------
 8469|   629k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|   629k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   629k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   629k|    }                                                           \
  |  | 8421|   629k|    else {                                                      \
  |  | 8422|   629k|        return vis(monostate_val);                              \
  |  | 8423|   629k|    }
  ------------------
 8470|   629k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 629k]
  ------------------
 8471|   629k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|   629k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   629k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   629k|    }                                                           \
  |  | 8421|   629k|    else {                                                      \
  |  | 8422|   629k|        return vis(monostate_val);                              \
  |  | 8423|   629k|    }
  ------------------
 8472|   629k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 629k]
  ------------------
 8473|   629k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|   629k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   629k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   629k|    }                                                           \
  |  | 8421|   629k|    else {                                                      \
  |  | 8422|   629k|        return vis(monostate_val);                              \
  |  | 8423|   629k|    }
  ------------------
 8474|   629k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 629k]
  ------------------
 8475|   629k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|   629k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   629k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   629k|    }                                                           \
  |  | 8421|   629k|    else {                                                      \
  |  | 8422|   629k|        return vis(monostate_val);                              \
  |  | 8423|   629k|    }
  ------------------
 8476|       |
 8477|   629k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 629k]
  ------------------
 8478|   629k|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|   629k|            return vis(
 8480|   629k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 629k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 629k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   629k|            SCN_CLANG_POP
 8495|   629k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   230k|{
 8417|   230k|#define SCN_VISIT(Type)                                         \
 8418|   230k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   230k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   230k|    }                                                           \
 8421|   230k|    else {                                                      \
 8422|   230k|        return vis(monostate_val);                              \
 8423|   230k|    }
 8424|       |
 8425|   230k|    monostate monostate_val{};
 8426|       |
 8427|   230k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 230k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 230k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 230k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 230k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 230k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 230k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 230k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 230k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 230k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 230k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 230k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 230k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 230k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 230k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 230k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|  66.7k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 66.7k, False: 164k]
  ------------------
 8459|  66.7k|            SCN_VISIT(float);
  ------------------
  |  | 8418|  66.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  66.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  66.7k|    }                                                           \
  |  | 8421|  66.7k|    else {                                                      \
  |  | 8422|  66.7k|        return vis(monostate_val);                              \
  |  | 8423|  66.7k|    }
  ------------------
 8460|   147k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 80.7k, False: 150k]
  ------------------
 8461|   147k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   147k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   147k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   147k|    }                                                           \
  |  | 8421|   147k|    else {                                                      \
  |  | 8422|   147k|        return vis(monostate_val);                              \
  |  | 8423|   147k|    }
  ------------------
 8462|   230k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 83.2k, False: 147k]
  ------------------
 8463|   230k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   230k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   230k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   230k|    }                                                           \
  |  | 8421|   230k|    else {                                                      \
  |  | 8422|   230k|        return vis(monostate_val);                              \
  |  | 8423|   230k|    }
  ------------------
 8464|   230k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 230k]
  ------------------
 8465|   230k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|   230k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   230k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   230k|    }                                                           \
  |  | 8421|   230k|    else {                                                      \
  |  | 8422|   230k|        return vis(monostate_val);                              \
  |  | 8423|   230k|    }
  ------------------
 8466|   230k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 230k]
  ------------------
 8467|   230k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|   230k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   230k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   230k|    }                                                           \
  |  | 8421|   230k|    else {                                                      \
  |  | 8422|   230k|        return vis(monostate_val);                              \
  |  | 8423|   230k|    }
  ------------------
 8468|   230k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 230k]
  ------------------
 8469|   230k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|   230k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   230k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   230k|    }                                                           \
  |  | 8421|   230k|    else {                                                      \
  |  | 8422|   230k|        return vis(monostate_val);                              \
  |  | 8423|   230k|    }
  ------------------
 8470|   230k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 230k]
  ------------------
 8471|   230k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|   230k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   230k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   230k|    }                                                           \
  |  | 8421|   230k|    else {                                                      \
  |  | 8422|   230k|        return vis(monostate_val);                              \
  |  | 8423|   230k|    }
  ------------------
 8472|   230k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 230k]
  ------------------
 8473|   230k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|   230k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   230k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   230k|    }                                                           \
  |  | 8421|   230k|    else {                                                      \
  |  | 8422|   230k|        return vis(monostate_val);                              \
  |  | 8423|   230k|    }
  ------------------
 8474|   230k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 230k]
  ------------------
 8475|   230k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|   230k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   230k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   230k|    }                                                           \
  |  | 8421|   230k|    else {                                                      \
  |  | 8422|   230k|        return vis(monostate_val);                              \
  |  | 8423|   230k|    }
  ------------------
 8476|       |
 8477|   230k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 230k]
  ------------------
 8478|   230k|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|   230k|            return vis(
 8480|   230k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 230k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 230k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   230k|            SCN_CLANG_POP
 8495|   230k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   628k|{
 7044|   628k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   628k|    handler.check_args_exhausted();
 7046|   628k|    return handler.get_error();
 7047|   628k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   628k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   628k|    auto begin = format.data();
 7013|   628k|    auto it = begin;
 7014|   628k|    const auto end = format.data() + format.size();
 7015|       |
 7016|  1.06M|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 628k, False: 436k]
  ------------------
 7017|   628k|        const auto ch = *it++;
 7018|   628k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 628k, False: 0]
  ------------------
 7019|   628k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   628k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   628k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 192k, False: 436k]
  ------------------
 7023|   192k|                return;
 7024|   192k|            }
 7025|   628k|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|   628k|    }
 7036|       |
 7037|   436k|    handler.on_literal_text(begin, end);
 7038|   436k|}
_ZN3scn2v318basic_scan_contextIwE10advance_toENS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
 8174|   436k|    {
 8175|   436k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   436k|    static_cast<    \
  |  |  929|   436k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8176|   436k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 6941|   628k|{
 6942|   628k|    struct id_adapter {
 6943|   628k|        constexpr void operator()()
 6944|   628k|        {
 6945|   628k|            arg_id = handler.on_arg_id();
 6946|   628k|        }
 6947|   628k|        constexpr void operator()(std::size_t id)
 6948|   628k|        {
 6949|   628k|            arg_id = handler.on_arg_id(id);
 6950|   628k|        }
 6951|       |
 6952|   628k|        constexpr void on_error(const char* msg)
 6953|   628k|        {
 6954|   628k|            SCN_UNLIKELY_ATTR
 6955|   628k|            handler.on_error(msg);
 6956|   628k|        }
 6957|       |
 6958|   628k|        Handler& handler;
 6959|   628k|        std::size_t arg_id;
 6960|   628k|    };
 6961|       |
 6962|   628k|    ++begin;
 6963|   628k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   628k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 628k]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|   628k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 628k]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|   628k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 628k]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|   628k|    else {
 6975|   628k|        auto adapter = id_adapter{handler, 0};
 6976|   628k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|   628k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   628k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 628k]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|   628k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 628k]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|   628k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 628k, False: 0]
  ------------------
 6987|   628k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   628k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 628k]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|   628k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|   628k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  1.25M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 628k]
  |  |  |  Branch (859:45): [True: 0, False: 628k]
  |  |  |  Branch (859:45): [True: 0, False: 628k]
  |  |  ------------------
  ------------------
 6993|      0|                handler.on_error("Unknown format specifier");
 6994|      0|                return begin;
 6995|      0|            }
 6996|   628k|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|   628k|    }
 7003|   628k|    return begin + 1;
 7004|   628k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|   628k|{
 6443|   628k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   628k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   628k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|   628k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 628k, False: 0]
  |  Branch (6444:26): [True: 0, False: 628k]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|   628k|    handler();
 6449|   628k|    return begin;
 6450|   628k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|   628k|        {
 6945|   628k|            arg_id = handler.on_arg_id();
 6946|   628k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7120|   628k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|   628k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7121|   628k|    {
 7122|   628k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   628k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   628k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|   628k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6857|   628k|{
 6858|   628k|    auto do_presentation = [&]() -> const CharT* {
 6859|   628k|        if (*begin == CharT{'['}) {
 6860|   628k|            auto set = parse_presentation_set(begin, end, handler);
 6861|   628k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|   628k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|   628k|                return begin;
 6866|   628k|            }
 6867|   628k|            handler.on_character_set_string(set);
 6868|   628k|            return begin;
 6869|   628k|        }
 6870|   628k|        if (*begin == CharT{'/'}) {
 6871|   628k|            return parse_presentation_regex(begin, end, handler);
 6872|   628k|        }
 6873|   628k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   628k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|   628k|            handler.on_error("Invalid type specifier in format string");
 6876|   628k|            return begin;
 6877|   628k|        }
 6878|   628k|        handler.on_type(type);
 6879|   628k|        return begin;
 6880|   628k|    };
 6881|       |
 6882|   628k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 628k, False: 0]
  |  Branch (6882:28): [True: 628k, False: 0]
  ------------------
 6883|   628k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 628k, False: 0]
  |  Branch (6883:36): [True: 475k, False: 153k]
  ------------------
 6884|   475k|        return do_presentation();
 6885|   475k|    }
 6886|       |
 6887|   153k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   153k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 153k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|   153k|    begin = parse_align(begin, end, handler);
 6893|   153k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   153k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 153k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|   153k|    begin = parse_width(begin, end, handler);
 6899|   153k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   153k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 153k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|   153k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 153k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|   153k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 153k, False: 0]
  ------------------
 6918|   153k|        handler.on_localized();
 6919|   153k|        ++begin;
 6920|   153k|    }
 6921|   153k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   153k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 153k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|   153k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 153k, False: 0]
  |  Branch (6926:25): [True: 0, False: 153k]
  ------------------
 6927|      0|        do_presentation();
 6928|      0|    }
 6929|   153k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   153k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 153k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|   153k|    return begin;
 6935|   153k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6858|   475k|    auto do_presentation = [&]() -> const CharT* {
 6859|   475k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 0, False: 475k]
  ------------------
 6860|      0|            auto set = parse_presentation_set(begin, end, handler);
 6861|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|      0|            handler.on_character_set_string(set);
 6868|      0|            return begin;
 6869|      0|        }
 6870|   475k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 475k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|   475k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   475k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   475k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 475k]
  |  |  ------------------
  ------------------
 6875|      0|            handler.on_error("Invalid type specifier in format string");
 6876|      0|            return begin;
 6877|      0|        }
 6878|   475k|        handler.on_type(type);
 6879|   475k|        return begin;
 6880|   475k|    };
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6531|   153k|{
 6532|   153k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   153k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   153k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|   153k|    auto check_align = [](wchar_t ch) {
 6535|   153k|        switch (ch) {
 6536|   153k|            case L'<':
 6537|   153k|                return align_type::left;
 6538|   153k|            case L'>':
 6539|   153k|                return align_type::right;
 6540|   153k|            case L'^':
 6541|   153k|                return align_type::center;
 6542|   153k|            default:
 6543|   153k|                return align_type::none;
 6544|   153k|        }
 6545|   153k|    };
 6546|       |
 6547|   153k|    auto potential_fill_len = code_point_length(begin, end);
 6548|   153k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   307k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 153k]
  |  |  |  Branch (859:45): [True: 0, False: 153k]
  |  |  |  Branch (859:45): [True: 0, False: 153k]
  |  |  ------------------
  ------------------
 6549|   153k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|   153k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|   153k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|   153k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|   153k|    const auto begin_before_fill = begin;
 6559|   153k|    begin += potential_fill_len;
 6560|       |
 6561|   153k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 153k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|   153k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|   153k|    const auto begin_after_fill = begin;
 6567|   153k|    ++begin;
 6568|       |
 6569|   153k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 153k, False: 0]
  ------------------
 6570|   153k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   153k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 153k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|   153k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 0, False: 153k]
  ------------------
 6575|      0|            return begin_before_fill;
 6576|      0|        }
 6577|   153k|    }
 6578|       |
 6579|   153k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 153k, False: 0]
  ------------------
 6580|   153k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 153k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|   153k|        return begin_before_fill;
 6585|   153k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|   153k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6534|   307k|    auto check_align = [](wchar_t ch) {
 6535|   307k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 307k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 307k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 307k]
  ------------------
 6541|      0|                return align_type::center;
 6542|   307k|            default:
  ------------------
  |  Branch (6542:13): [True: 307k, False: 0]
  ------------------
 6543|   307k|                return align_type::none;
 6544|   307k|        }
 6545|   307k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6596|   153k|{
 6597|   153k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   153k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   153k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|   153k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 153k, False: 0]
  |  Branch (6599:33): [True: 0, False: 153k]
  ------------------
 6600|      0|        int width = parse_simple_int(begin, end);
 6601|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6602|      0|            handler.on_width(width);
 6603|      0|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|      0|    }
 6609|   153k|    return begin;
 6610|   153k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 7126|   153k|    {
 7127|   153k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|   153k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 153k, False: 0]
  ------------------
 7129|   153k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 153k, False: 0]
  ------------------
 7130|   153k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 0, False: 153k]
  ------------------
 7131|   153k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 0, False: 0]
  ------------------
 7132|      0|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|      0|        }
 7137|       |
 7138|   153k|        Handler::on_localized();
 7139|   153k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   628k|{
 8417|   628k|#define SCN_VISIT(Type)                                         \
 8418|   628k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   628k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   628k|    }                                                           \
 8421|   628k|    else {                                                      \
 8422|   628k|        return vis(monostate_val);                              \
 8423|   628k|    }
 8424|       |
 8425|   628k|    monostate monostate_val{};
 8426|       |
 8427|   628k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 628k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 628k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 628k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 628k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 628k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 628k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 628k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 628k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 628k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 628k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 628k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 628k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 628k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 628k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 628k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   196k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 196k, False: 432k]
  ------------------
 8459|   196k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   196k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   196k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   196k|    }                                                           \
  |  | 8421|   196k|    else {                                                      \
  |  | 8422|   196k|        return vis(monostate_val);                              \
  |  | 8423|   196k|    }
  ------------------
 8460|   410k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 214k, False: 414k]
  ------------------
 8461|   410k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   410k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   410k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   410k|    }                                                           \
  |  | 8421|   410k|    else {                                                      \
  |  | 8422|   410k|        return vis(monostate_val);                              \
  |  | 8423|   410k|    }
  ------------------
 8462|   628k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 218k, False: 410k]
  ------------------
 8463|   628k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   628k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   628k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   628k|    }                                                           \
  |  | 8421|   628k|    else {                                                      \
  |  | 8422|   628k|        return vis(monostate_val);                              \
  |  | 8423|   628k|    }
  ------------------
 8464|   628k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 628k]
  ------------------
 8465|   628k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|   628k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   628k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   628k|    }                                                           \
  |  | 8421|   628k|    else {                                                      \
  |  | 8422|   628k|        return vis(monostate_val);                              \
  |  | 8423|   628k|    }
  ------------------
 8466|   628k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 628k]
  ------------------
 8467|   628k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|   628k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   628k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   628k|    }                                                           \
  |  | 8421|   628k|    else {                                                      \
  |  | 8422|   628k|        return vis(monostate_val);                              \
  |  | 8423|   628k|    }
  ------------------
 8468|   628k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 628k]
  ------------------
 8469|   628k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|   628k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   628k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   628k|    }                                                           \
  |  | 8421|   628k|    else {                                                      \
  |  | 8422|   628k|        return vis(monostate_val);                              \
  |  | 8423|   628k|    }
  ------------------
 8470|   628k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 628k]
  ------------------
 8471|   628k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|   628k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   628k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   628k|    }                                                           \
  |  | 8421|   628k|    else {                                                      \
  |  | 8422|   628k|        return vis(monostate_val);                              \
  |  | 8423|   628k|    }
  ------------------
 8472|   628k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 628k]
  ------------------
 8473|   628k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|   628k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   628k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   628k|    }                                                           \
  |  | 8421|   628k|    else {                                                      \
  |  | 8422|   628k|        return vis(monostate_val);                              \
  |  | 8423|   628k|    }
  ------------------
 8474|   628k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 628k]
  ------------------
 8475|   628k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|   628k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   628k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   628k|    }                                                           \
  |  | 8421|   628k|    else {                                                      \
  |  | 8422|   628k|        return vis(monostate_val);                              \
  |  | 8423|   628k|    }
  ------------------
 8476|       |
 8477|   628k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 628k]
  ------------------
 8478|   628k|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|   628k|            return vis(
 8480|   628k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 628k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 628k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   628k|            SCN_CLANG_POP
 8495|   628k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v36detail17basic_scan_bufferIwE8sync_allEv:
 4075|   249k|    {
 4076|   249k|        sync(0);
 4077|   249k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
 5419|   317k|    constexpr basic_scan_args() = default;
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
 5419|   153k|    constexpr basic_scan_args() = default;

_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|   120k|{
   89|   120k|    auto args = make_scan_args<wscan_context, Args...>();
   90|   120k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   120k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   120k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   120k|    static_cast<    \
  |  |  929|   120k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   120k|    static_cast<    \
  |  |  929|   120k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|   120k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   391k|{
   44|   391k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   391k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   391k|}
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|   120k|{
  127|   120k|    auto args = make_scan_args<wscan_context, Args...>();
  128|   120k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   120k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|   120k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   120k|    static_cast<    \
  |  |  929|   120k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   120k|    static_cast<    \
  |  |  929|   120k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|   120k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeETnPvLPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT0_OSF_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   391k|{
   60|   391k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   391k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   391k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  162|  22.2k|{
  163|  22.2k|    T value;
  164|  22.2k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  22.2k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  22.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  22.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  22.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  22.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.40k, False: 15.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  6.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  6.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  6.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  6.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  6.40k|    }                                                  \
  |  |  |  | 3671|  22.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  15.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  15.8k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  15.8k|    static_cast<    \
  |  |  929|  15.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  15.8k|    static_cast<    \
  |  |  929|  15.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  22.2k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  77.0k|{
   72|  77.0k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  77.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  77.0k|}
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|   134k|{
   89|   134k|    auto args = make_scan_args<wscan_context, Args...>();
   90|   134k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   134k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   134k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   134k|    static_cast<    \
  |  |  929|   134k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   134k|    static_cast<    \
  |  |  929|   134k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|   134k|}
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|   134k|{
  127|   134k|    auto args = make_scan_args<wscan_context, Args...>();
  128|   134k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   134k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|   134k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   134k|    static_cast<    \
  |  |  929|   134k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   134k|    static_cast<    \
  |  |  929|   134k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|   134k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  162|  26.9k|{
  163|  26.9k|    T value;
  164|  26.9k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  26.9k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  26.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  26.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  26.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  26.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.40k, False: 20.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  6.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  6.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  6.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  6.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  6.40k|    }                                                  \
  |  |  |  | 3671|  26.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  20.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  20.5k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  20.5k|    static_cast<    \
  |  |  929|  20.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  20.5k|    static_cast<    \
  |  |  929|  20.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  26.9k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|   136k|{
   89|   136k|    auto args = make_scan_args<wscan_context, Args...>();
   90|   136k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   136k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   136k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   136k|    static_cast<    \
  |  |  929|   136k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   136k|    static_cast<    \
  |  |  929|   136k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|   136k|}
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|   136k|{
  127|   136k|    auto args = make_scan_args<wscan_context, Args...>();
  128|   136k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   136k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|   136k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   136k|    static_cast<    \
  |  |  929|   136k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   136k|    static_cast<    \
  |  |  929|   136k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|   136k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  162|  27.7k|{
  163|  27.7k|    T value;
  164|  27.7k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  27.7k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  27.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  27.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  27.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  27.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.40k, False: 21.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  6.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  6.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  6.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  6.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  6.40k|    }                                                  \
  |  |  |  | 3671|  27.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  21.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  21.3k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  21.3k|    static_cast<    \
  |  |  929|  21.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  21.3k|    static_cast<    \
  |  |  929|  21.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  27.7k|}
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|   120k|{
   89|   120k|    auto args = make_scan_args<wscan_context, Args...>();
   90|   120k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   120k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   120k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   120k|    static_cast<    \
  |  |  929|   120k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   120k|    static_cast<    \
  |  |  929|   120k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|   120k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   391k|{
   44|   391k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   391k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   391k|}
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  126|   120k|{
  127|   120k|    auto args = make_scan_args<wscan_context, Args...>();
  128|   120k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   120k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|   120k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   120k|    static_cast<    \
  |  |  929|   120k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   120k|    static_cast<    \
  |  |  929|   120k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|   120k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeETnPvLPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT0_OSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   391k|{
   60|   391k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   391k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   391k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  162|  22.2k|{
  163|  22.2k|    T value;
  164|  22.2k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  22.2k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  22.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  22.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  22.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  22.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.40k, False: 15.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  6.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  6.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  6.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  6.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  6.40k|    }                                                  \
  |  |  |  | 3671|  22.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  15.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  15.8k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  15.8k|    static_cast<    \
  |  |  929|  15.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  15.8k|    static_cast<    \
  |  |  929|  15.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  22.2k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  76.9k|{
   72|  76.9k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  76.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  76.9k|}
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|   134k|{
   89|   134k|    auto args = make_scan_args<wscan_context, Args...>();
   90|   134k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   134k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   134k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   134k|    static_cast<    \
  |  |  929|   134k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   134k|    static_cast<    \
  |  |  929|   134k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|   134k|}
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  126|   134k|{
  127|   134k|    auto args = make_scan_args<wscan_context, Args...>();
  128|   134k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   134k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|   134k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   134k|    static_cast<    \
  |  |  929|   134k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   134k|    static_cast<    \
  |  |  929|   134k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|   134k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  162|  26.9k|{
  163|  26.9k|    T value;
  164|  26.9k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  26.9k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  26.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  26.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  26.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  26.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.40k, False: 20.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  6.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  6.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  6.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  6.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  6.40k|    }                                                  \
  |  |  |  | 3671|  26.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  20.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  20.5k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  20.5k|    static_cast<    \
  |  |  929|  20.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  20.5k|    static_cast<    \
  |  |  929|  20.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  26.9k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|   136k|{
   89|   136k|    auto args = make_scan_args<wscan_context, Args...>();
   90|   136k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   136k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   136k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   136k|    static_cast<    \
  |  |  929|   136k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   136k|    static_cast<    \
  |  |  929|   136k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|   136k|}
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  126|   136k|{
  127|   136k|    auto args = make_scan_args<wscan_context, Args...>();
  128|   136k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   136k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|   136k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   136k|    static_cast<    \
  |  |  929|   136k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   136k|    static_cast<    \
  |  |  929|   136k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|   136k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  162|  27.7k|{
  163|  27.7k|    T value;
  164|  27.7k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  27.7k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  27.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  27.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  27.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  27.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.40k, False: 21.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  6.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  6.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  6.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  6.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  6.40k|    }                                                  \
  |  |  |  | 3671|  27.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  21.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  21.3k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  21.3k|    static_cast<    \
  |  |  929|  21.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  21.3k|    static_cast<    \
  |  |  929|  21.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  27.7k|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  651|  2.29M|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  652|  2.29M|{
  653|  2.29M|    static_assert(std::is_same_v<Locale, std::locale>);
  654|  2.29M|}
_ZNK3scn2v36detail10locale_ref3getINSt3__16localeEEET_v:
  658|   967k|{
  659|   967k|    static_assert(std::is_same_v<Locale, std::locale>);
  660|   967k|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (660:12): [True: 483k, False: 483k]
  ------------------
  661|   967k|                    : std::locale{};
  662|   967k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1220|  1.02M|{
 1221|  1.02M|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  1.02M|                                  m_nan_payload_buffer, value);
 1223|  1.02M|    value = this->setsign(value);
 1224|  1.02M|    return n;
 1225|  1.02M|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1220|   407k|{
 1221|   407k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   407k|                                  m_nan_payload_buffer, value);
 1223|   407k|    value = this->setsign(value);
 1224|   407k|    return n;
 1225|   407k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|  1.06M|{
 1221|  1.06M|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  1.06M|                                  m_nan_payload_buffer, value);
 1223|  1.06M|    value = this->setsign(value);
 1224|  1.06M|    return n;
 1225|  1.06M|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|   470k|{
 1221|   470k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   470k|                                  m_nan_payload_buffer, value);
 1223|   470k|    value = this->setsign(value);
 1224|   470k|    return n;
 1225|   470k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1220|  1.07M|{
 1221|  1.07M|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  1.07M|                                  m_nan_payload_buffer, value);
 1223|  1.07M|    value = this->setsign(value);
 1224|  1.07M|    return n;
 1225|  1.07M|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1220|   480k|{
 1221|   480k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   480k|                                  m_nan_payload_buffer, value);
 1223|   480k|    value = this->setsign(value);
 1224|   480k|    return n;
 1225|   480k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2183|   697k|{
 2184|   697k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2185|   697k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2191|   816k|{
 2192|   816k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2193|   816k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   816k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 758k, False: 57.6k]
  |  |  ------------------
  ------------------
 2194|   758k|        source.sync(*n);
 2195|   758k|    }
 2196|  57.6k|    else {
 2197|  57.6k|        source.sync_all();
 2198|  57.6k|    }
 2199|   816k|    return n;
 2200|   816k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2207|   391k|{
 2208|   391k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2209|   391k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2215|   391k|{
 2216|   391k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2217|   391k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   391k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 276k, False: 115k]
  |  |  ------------------
  ------------------
 2218|   276k|        source.sync(*n);
 2219|   276k|    }
 2220|   115k|    else {
 2221|   115k|        source.sync_all();
 2222|   115k|    }
 2223|   391k|    return n;
 2224|   391k|}
_ZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  193|  1.40M|{
  194|  1.40M|    return find_classic_impl(
  195|  1.40M|        source, [](char ch) { return is_ascii_space(ch); },
  196|  1.40M|        [](char32_t cp) { return is_cp_space(cp); });
  197|  1.40M|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  201|  3.33M|{
  202|  3.33M|    return find_classic_impl(
  203|  3.33M|        source, [](char ch) { return !is_ascii_space(ch); },
  204|  3.33M|        [](char32_t cp) { return !is_cp_space(cp); });
  205|  3.33M|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2140|   697k|{
 2141|   697k|    return vscan_internal(source, format, args);
 2142|   697k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2146|   816k|{
 2147|   816k|    auto n = vscan_internal(source, format, args);
 2148|   816k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   816k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 758k, False: 57.6k]
  |  |  ------------------
  ------------------
 2149|   758k|        source.sync(*n);
 2150|   758k|    }
 2151|  57.6k|    else {
 2152|  57.6k|        source.sync_all();
 2153|  57.6k|    }
 2154|   816k|    return n;
 2155|   816k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2160|   391k|{
 2161|   391k|    return vscan_internal(source, format, args);
 2162|   391k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2166|   391k|{
 2167|   391k|    auto n = vscan_internal(source, format, args);
 2168|   391k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   391k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 276k, False: 115k]
  |  |  ------------------
  ------------------
 2169|   276k|        source.sync(*n);
 2170|   276k|    }
 2171|   115k|    else {
 2172|   115k|        source.sync_all();
 2173|   115k|    }
 2174|   391k|    return n;
 2175|   391k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2250|   151k|{
 2251|   151k|    return vscan_value_internal(source, arg);
 2252|   151k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2255|   165k|{
 2256|   165k|    auto n = vscan_value_internal(source, arg);
 2257|   165k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   165k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 156k, False: 9.60k]
  |  |  ------------------
  ------------------
 2258|   156k|        source.sync(*n);
 2259|   156k|    }
 2260|  9.60k|    else {
 2261|  9.60k|        source.sync_all();
 2262|  9.60k|    }
 2263|   165k|    return n;
 2264|   165k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2269|  77.0k|{
 2270|  77.0k|    return vscan_value_internal(source, arg);
 2271|  77.0k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2275|  76.9k|{
 2276|  76.9k|    auto n = vscan_value_internal(source, arg);
 2277|  76.9k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  76.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 57.7k, False: 19.2k]
  |  |  ------------------
  ------------------
 2278|  57.7k|        source.sync(*n);
 2279|  57.7k|    }
 2280|  19.2k|    else {
 2281|  19.2k|        source.sync_all();
 2282|  19.2k|    }
 2283|  76.9k|    return n;
 2284|  76.9k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  1.40M|{
  118|  1.40M|    auto it = source.begin();
  119|       |
  120|  4.59M|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 3.68M, False: 906k]
  ------------------
  121|  3.68M|        auto sv =
  122|  3.68M|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  3.68M|                .substr(0, 8);
  124|       |
  125|  3.68M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 3.60M, False: 82.7k]
  ------------------
  126|  3.60M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  3.60M|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  3.60M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 467k, False: 3.13M]
  ------------------
  129|   467k|                break;
  130|   467k|            }
  131|  3.13M|            continue;
  132|  3.60M|        }
  133|       |
  134|   279k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 230k, False: 48.9k]
  ------------------
  135|   230k|            auto tmp =
  136|   230k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   230k|            auto res = get_next_code_point(tmp);
  138|   230k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 33.7k, False: 196k]
  ------------------
  139|  33.7k|                return it;
  140|  33.7k|            }
  141|   196k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|   196k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|   196k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|   196k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|   196k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|   196k|        }
  145|  82.7k|    }
  146|       |
  147|  1.37M|    return detail::make_string_view_iterator(source, it);
  148|  1.40M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  104|  5.72M|{
  105|  5.72M|    static_assert(sizeof(*source.data()) == 1);
  106|  5.72M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|  5.72M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.72M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  107|  5.72M|    uint64_t word{};
  108|  5.72M|    std::memcpy(&word, source.data(), source.size());
  109|       |
  110|  5.72M|    return has_byte_greater(word, 127) != 0;
  111|  5.72M|}
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  195|  22.0M|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  196|   230k|        [](char32_t cp) { return is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  3.33M|{
  118|  3.33M|    auto it = source.begin();
  119|       |
  120|  3.64M|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 2.03M, False: 1.61M]
  ------------------
  121|  2.03M|        auto sv =
  122|  2.03M|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  2.03M|                .substr(0, 8);
  124|       |
  125|  2.03M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 1.92M, False: 114k]
  ------------------
  126|  1.92M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  1.92M|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  1.92M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 1.62M, False: 302k]
  ------------------
  129|  1.62M|                break;
  130|  1.62M|            }
  131|   302k|            continue;
  132|  1.92M|        }
  133|       |
  134|   214k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 204k, False: 10.1k]
  ------------------
  135|   204k|            auto tmp =
  136|   204k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   204k|            auto res = get_next_code_point(tmp);
  138|   204k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 104k, False: 100k]
  ------------------
  139|   104k|                return it;
  140|   104k|            }
  141|   100k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|   100k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|   100k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|   100k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|   100k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|   100k|        }
  145|   114k|    }
  146|       |
  147|  3.23M|    return detail::make_string_view_iterator(source, it);
  148|  3.33M|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  203|  3.01M|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  204|   204k|        [](char32_t cp) { return !is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  1.02M|{
 1138|  1.02M|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 5.65k, False: 1.01M]
  ------------------
 1139|  5.65k|        value = std::numeric_limits<T>::infinity();
 1140|  5.65k|        return 3;
 1141|  5.65k|    }
 1142|  1.01M|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 5.76k, False: 1.00M]
  ------------------
 1143|  5.76k|        value = std::numeric_limits<T>::infinity();
 1144|  5.76k|        return 8;
 1145|  5.76k|    }
 1146|  1.00M|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 39.2k, False: 970k]
  ------------------
 1147|  39.2k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  39.2k|        return 3;
 1149|  39.2k|    }
 1150|   970k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 2.00k, False: 968k]
  ------------------
 1151|  2.00k|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|  2.00k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|  2.00k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|  2.00k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|  2.00k|    }
 1182|       |
 1183|   968k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   968k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   968k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   968k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 209k, False: 758k]
  ------------------
 1185|   209k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   209k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.31k, False: 205k]
  |  |  ------------------
  ------------------
 1186|  4.31k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  4.31k|                                         "Invalid floating-point digit");
 1188|  4.31k|        }
 1189|   209k|    }
 1190|   964k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   964k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.3k, False: 952k]
  |  |  ------------------
  ------------------
 1191|  11.3k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  11.3k|                                     "Invalid floating-point digit");
 1193|  11.3k|    }
 1194|       |
 1195|       |    if constexpr (std::is_same_v<T, long double>) {
 1196|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|       |            double tmp{};
 1200|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|       |            value = tmp;
 1202|       |            return ret;
 1203|       |        }
 1204|       |        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|       |            return fast_float_fallback(data, value);
 1208|       |        }
 1209|       |    }
 1210|   952k|    else {
 1211|       |        // Default to fast_float
 1212|   952k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   952k|    }
 1214|   952k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIcfEC2ENS2_14impl_init_dataIcEE:
 1076|   952k|        : fast_float_impl_base{data.base()}, m_input(data.input)
 1077|   952k|    {
 1078|   952k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_114impl_init_dataIcE4baseEv:
  711|  3.43M|    {
  712|  3.43M|        return {kind, options};
  713|  3.43M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcfEclERf:
 1081|   952k|    {
 1082|   952k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 205k, False: 747k]
  ------------------
 1083|   952k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 31.2k, False: 716k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|   236k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|   236k|                                              value);
 1087|   236k|        }
 1088|       |
 1089|   716k|        const auto flags = get_flags();
 1090|   716k|        const auto view = get_view();
 1091|   716k|        const auto result = fast_float::from_chars(
 1092|   716k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|   716k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|   716k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 716k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|   716k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|   716k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.40k, False: 709k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  6.40k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  6.40k|                                              value);
 1102|  6.40k|        }
 1103|       |
 1104|   709k|        return result.ptr - view.data();
 1105|   716k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   242k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   242k|    {
 1048|   242k|#if !SCN_DISABLE_STRTOD
 1049|   242k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   242k|    }
 1056|   242k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfEC2ENS2_14impl_init_dataIcEE:
  892|   242k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  893|   242k|    {
  894|   242k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfEC2ENS2_9impl_baseE:
  725|   336k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfEclERf:
  897|   242k|    {
  898|   242k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   242k|                           generic_strtod);
  900|   242k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIcPFfPKcPPcEEENS0_13scan_expectedIlEERfPKT_T0_:
  731|   242k|    {
  732|   242k|        CharT* end{};
  733|   242k|        errno = 0;
  734|   242k|        value = strtod_cb(src, &end);
  735|   242k|        const auto saved_errno = errno;
  736|   242k|        auto chars_read = end - src;
  737|       |
  738|   242k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   242k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   242k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.58k, False: 235k]
  |  |  ------------------
  ------------------
  740|  7.58k|            return unexpected(e);
  741|  7.58k|        }
  742|       |
  743|   235k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 204k, False: 31.0k]
  ------------------
  744|   235k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 204k, False: 0]
  ------------------
  745|   204k|            chars_read -= 2;
  746|   204k|        }
  747|       |
  748|   235k|        return chars_read;
  749|   242k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE11check_errorElif:
  777|   336k|    {
  778|   336k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 133k, False: 203k]
  |  Branch (778:37): [True: 0, False: 133k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|   336k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 31.9k, False: 304k]
  ------------------
  785|   336k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 31.9k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|   336k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 13.1k, False: 323k]
  |  Branch (791:34): [True: 2.85k, False: 10.2k]
  ------------------
  792|  2.85k|            SCN_UNLIKELY_ATTR
  793|  2.85k|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|  2.85k|        }
  795|       |
  796|   333k|        SCN_GCC_COMPAT_PUSH
  797|   333k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|   333k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 333k, False: 0]
  ------------------
  800|   333k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 333k, False: 0]
  ------------------
  801|   333k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 10.2k, False: 323k]
  ------------------
  802|  10.2k|            SCN_UNLIKELY_ATTR
  803|  10.2k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|  10.2k|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|   323k|            return {};
  809|   333k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEf:
  686|   349k|{
  687|   349k|    return f == 0.0f || f == -0.0f;
  ------------------
  |  Branch (687:12): [True: 135k, False: 213k]
  |  Branch (687:25): [True: 0, False: 213k]
  ------------------
  688|   349k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   242k|    {
  755|   242k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 237k, False: 5.13k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   237k|            auto first_space = read_until_classic_space(input.view());
  758|   237k|            input.assign(
  759|   237k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   237k|        }
  761|       |
  762|   242k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 205k, False: 37.6k]
  ------------------
  763|   205k|            if constexpr (std::is_same_v<CharT, char>) {
  764|   205k|                input.get_allocated_string().insert(0, "0x");
  765|       |            }
  766|       |            else {
  767|       |                input.get_allocated_string().insert(0, L"0x");
  768|       |            }
  769|   205k|        }
  770|       |
  771|   242k|        return input.get_allocated_string().c_str();
  772|   242k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfE14generic_strtodEPKcPPc:
  904|   242k|    {
  905|   242k|        if constexpr (std::is_same_v<CharT, char>) {
  906|   242k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|       |        }
  908|       |        else {
  909|       |            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|       |        }
  911|   242k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE21generic_narrow_strtodEPKcPPc:
  812|   242k|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|   242k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|   242k|        if constexpr (std::is_same_v<T, float>) {
  838|   242k|            return std::strtof(str, str_end);
  839|       |        }
  840|       |        else if constexpr (std::is_same_v<T, double>) {
  841|       |            return std::strtod(str, str_end);
  842|       |        }
  843|       |        else if constexpr (std::is_same_v<T, long double>) {
  844|       |            return std::strtold(str, str_end);
  845|       |        }
  846|   242k|#endif
  847|   242k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_120fast_float_impl_base9get_flagsEv:
 1060|  2.07M|    {
 1061|  2.07M|        unsigned format_flags{};
 1062|  2.07M|        if ((m_options & float_reader_base::allow_fixed) != 0) {
  ------------------
  |  Branch (1062:13): [True: 2.06M, False: 13.4k]
  ------------------
 1063|  2.06M|            format_flags |= fast_float::fixed;
 1064|  2.06M|        }
 1065|  2.07M|        if ((m_options & float_reader_base::allow_scientific) != 0) {
  ------------------
  |  Branch (1065:13): [True: 1.75M, False: 320k]
  ------------------
 1066|  1.75M|            format_flags |= fast_float::scientific;
 1067|  1.75M|        }
 1068|       |
 1069|  2.07M|        return static_cast<fast_float::chars_format>(format_flags);
 1070|  2.07M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcfE8get_viewEv:
 1109|   716k|    {
 1110|   716k|        if constexpr (sizeof(CharT) == 1) {
 1111|   716k|            return m_input.view();
 1112|       |        }
 1113|       |        else if constexpr (sizeof(CharT) == 2) {
 1114|       |            return std::u16string_view{
 1115|       |                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|       |                m_input.view().size()};
 1117|       |        }
 1118|       |        else {
 1119|       |            return std::u32string_view{
 1120|       |                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|       |                m_input.view().size()};
 1122|       |        }
 1123|   716k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   407k|{
 1138|   407k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 407k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|   407k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 407k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|   407k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 407k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|   407k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 407k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|   407k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   407k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   407k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   407k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 99.5k, False: 307k]
  ------------------
 1185|  99.5k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  99.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.4k, False: 87.1k]
  |  |  ------------------
  ------------------
 1186|  12.4k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  12.4k|                                         "Invalid floating-point digit");
 1188|  12.4k|        }
 1189|  99.5k|    }
 1190|   394k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   394k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 29.7k, False: 364k]
  |  |  ------------------
  ------------------
 1191|  29.7k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  29.7k|                                     "Invalid floating-point digit");
 1193|  29.7k|    }
 1194|       |
 1195|       |    if constexpr (std::is_same_v<T, long double>) {
 1196|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|       |            double tmp{};
 1200|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|       |            value = tmp;
 1202|       |            return ret;
 1203|       |        }
 1204|       |        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|       |            return fast_float_fallback(data, value);
 1208|       |        }
 1209|       |    }
 1210|   364k|    else {
 1211|       |        // Default to fast_float
 1212|   364k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   364k|    }
 1214|   364k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIwfEC2ENS2_14impl_init_dataIwEE:
 1076|   364k|        : fast_float_impl_base{data.base()}, m_input(data.input)
 1077|   364k|    {
 1078|   364k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_114impl_init_dataIwE4baseEv:
  711|  1.41M|    {
  712|  1.41M|        return {kind, options};
  713|  1.41M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwfEclERf:
 1081|   364k|    {
 1082|   364k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 87.1k, False: 277k]
  ------------------
 1083|   364k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 700, False: 277k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|  87.8k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|  87.8k|                                              value);
 1087|  87.8k|        }
 1088|       |
 1089|   277k|        const auto flags = get_flags();
 1090|   277k|        const auto view = get_view();
 1091|   277k|        const auto result = fast_float::from_chars(
 1092|   277k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|   277k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|   277k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 277k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|   277k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|   277k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.44k, False: 271k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  5.44k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  5.44k|                                              value);
 1102|  5.44k|        }
 1103|       |
 1104|   271k|        return result.ptr - view.data();
 1105|   277k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  93.2k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  93.2k|    {
 1048|  93.2k|#if !SCN_DISABLE_STRTOD
 1049|  93.2k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  93.2k|    }
 1056|  93.2k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfEC2ENS2_14impl_init_dataIwEE:
  892|  93.2k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  893|  93.2k|    {
  894|  93.2k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfEclERf:
  897|  93.2k|    {
  898|  93.2k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  93.2k|                           generic_strtod);
  900|  93.2k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIwPFfPKwPPwEEENS0_13scan_expectedIlEERfPKT_T0_:
  731|  93.2k|    {
  732|  93.2k|        CharT* end{};
  733|  93.2k|        errno = 0;
  734|  93.2k|        value = strtod_cb(src, &end);
  735|  93.2k|        const auto saved_errno = errno;
  736|  93.2k|        auto chars_read = end - src;
  737|       |
  738|  93.2k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  93.2k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  93.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.52k, False: 87.7k]
  |  |  ------------------
  ------------------
  740|  5.52k|            return unexpected(e);
  741|  5.52k|        }
  742|       |
  743|  87.7k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 87.0k, False: 700]
  ------------------
  744|  87.7k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 87.0k, False: 0]
  ------------------
  745|  87.0k|            chars_read -= 2;
  746|  87.0k|        }
  747|       |
  748|  87.7k|        return chars_read;
  749|  93.2k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  93.2k|    {
  755|  93.2k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 90.1k, False: 3.16k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  90.1k|            auto first_space = read_until_classic_space(input.view());
  758|  90.1k|            input.assign(
  759|  90.1k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  90.1k|        }
  761|       |
  762|  93.2k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 87.1k, False: 6.14k]
  ------------------
  763|       |            if constexpr (std::is_same_v<CharT, char>) {
  764|       |                input.get_allocated_string().insert(0, "0x");
  765|       |            }
  766|  87.1k|            else {
  767|  87.1k|                input.get_allocated_string().insert(0, L"0x");
  768|  87.1k|            }
  769|  87.1k|        }
  770|       |
  771|  93.2k|        return input.get_allocated_string().c_str();
  772|  93.2k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfE14generic_strtodEPKwPPw:
  904|  93.2k|    {
  905|       |        if constexpr (std::is_same_v<CharT, char>) {
  906|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|       |        }
  908|  93.2k|        else {
  909|  93.2k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  93.2k|        }
  911|  93.2k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE19generic_wide_strtodEPKwPPw:
  850|  93.2k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|  93.2k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|  93.2k|        if constexpr (std::is_same_v<T, float>) {
  876|  93.2k|            return std::wcstof(str, str_end);
  877|       |        }
  878|       |        else if constexpr (std::is_same_v<T, double>) {
  879|       |            return std::wcstod(str, str_end);
  880|       |        }
  881|       |        else if constexpr (std::is_same_v<T, long double>) {
  882|       |            return std::wcstold(str, str_end);
  883|       |        }
  884|  93.2k|#endif
  885|  93.2k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwfE8get_viewEv:
 1109|   277k|    {
 1110|       |        if constexpr (sizeof(CharT) == 1) {
 1111|       |            return m_input.view();
 1112|       |        }
 1113|       |        else if constexpr (sizeof(CharT) == 2) {
 1114|       |            return std::u16string_view{
 1115|       |                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|       |                m_input.view().size()};
 1117|       |        }
 1118|   277k|        else {
 1119|   277k|            return std::u32string_view{
 1120|   277k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|   277k|                m_input.view().size()};
 1122|   277k|        }
 1123|   277k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  1.06M|{
 1138|  1.06M|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 6.31k, False: 1.05M]
  ------------------
 1139|  6.31k|        value = std::numeric_limits<T>::infinity();
 1140|  6.31k|        return 3;
 1141|  6.31k|    }
 1142|  1.05M|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 6.17k, False: 1.04M]
  ------------------
 1143|  6.17k|        value = std::numeric_limits<T>::infinity();
 1144|  6.17k|        return 8;
 1145|  6.17k|    }
 1146|  1.04M|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 40.4k, False: 1.00M]
  ------------------
 1147|  40.4k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  40.4k|        return 3;
 1149|  40.4k|    }
 1150|  1.00M|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 2.24k, False: 1.00M]
  ------------------
 1151|  2.24k|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|  2.24k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|  2.24k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|  2.24k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|  2.24k|    }
 1182|       |
 1183|  1.00M|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  1.00M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.00M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  1.00M|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 215k, False: 791k]
  ------------------
 1185|   215k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   215k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.44k, False: 210k]
  |  |  ------------------
  ------------------
 1186|  4.44k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  4.44k|                                         "Invalid floating-point digit");
 1188|  4.44k|        }
 1189|   215k|    }
 1190|  1.00M|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.9k, False: 990k]
  |  |  ------------------
  ------------------
 1191|  11.9k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  11.9k|                                     "Invalid floating-point digit");
 1193|  11.9k|    }
 1194|       |
 1195|       |    if constexpr (std::is_same_v<T, long double>) {
 1196|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|       |            double tmp{};
 1200|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|       |            value = tmp;
 1202|       |            return ret;
 1203|       |        }
 1204|       |        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|       |            return fast_float_fallback(data, value);
 1208|       |        }
 1209|       |    }
 1210|   990k|    else {
 1211|       |        // Default to fast_float
 1212|   990k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   990k|    }
 1214|   990k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIcdEC2ENS2_14impl_init_dataIcEE:
 1076|   990k|        : fast_float_impl_base{data.base()}, m_input(data.input)
 1077|   990k|    {
 1078|   990k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcdEclERd:
 1081|   990k|    {
 1082|   990k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 210k, False: 780k]
  ------------------
 1083|   990k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 33.5k, False: 746k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|   244k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|   244k|                                              value);
 1087|   244k|        }
 1088|       |
 1089|   746k|        const auto flags = get_flags();
 1090|   746k|        const auto view = get_view();
 1091|   746k|        const auto result = fast_float::from_chars(
 1092|   746k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|   746k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|   746k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 746k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|   746k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|   746k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.01k, False: 743k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  3.01k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  3.01k|                                              value);
 1102|  3.01k|        }
 1103|       |
 1104|   743k|        return result.ptr - view.data();
 1105|   746k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   247k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   247k|    {
 1048|   247k|#if !SCN_DISABLE_STRTOD
 1049|   247k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   247k|    }
 1056|   247k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdEC2ENS2_14impl_init_dataIcEE:
  892|   247k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  893|   247k|    {
  894|   247k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdEC2ENS2_9impl_baseE:
  725|   337k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdEclERd:
  897|   247k|    {
  898|   247k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   247k|                           generic_strtod);
  900|   247k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIcPFdPKcPPcEEENS0_13scan_expectedIlEERdPKT_T0_:
  731|   247k|    {
  732|   247k|        CharT* end{};
  733|   247k|        errno = 0;
  734|   247k|        value = strtod_cb(src, &end);
  735|   247k|        const auto saved_errno = errno;
  736|   247k|        auto chars_read = end - src;
  737|       |
  738|   247k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   247k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   247k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.54k, False: 243k]
  |  |  ------------------
  ------------------
  740|  3.54k|            return unexpected(e);
  741|  3.54k|        }
  742|       |
  743|   243k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 210k, False: 33.4k]
  ------------------
  744|   243k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 210k, False: 0]
  ------------------
  745|   210k|            chars_read -= 2;
  746|   210k|        }
  747|       |
  748|   243k|        return chars_read;
  749|   247k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE11check_errorElid:
  777|   337k|    {
  778|   337k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 131k, False: 205k]
  |  Branch (778:37): [True: 0, False: 131k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|   337k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 34.2k, False: 303k]
  ------------------
  785|   337k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 34.2k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|   337k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 6.06k, False: 331k]
  |  Branch (791:34): [True: 673, False: 5.38k]
  ------------------
  792|    673|            SCN_UNLIKELY_ATTR
  793|    673|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|    673|        }
  795|       |
  796|   336k|        SCN_GCC_COMPAT_PUSH
  797|   336k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|   336k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 336k, False: 0]
  ------------------
  800|   336k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 336k, False: 0]
  ------------------
  801|   336k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 5.38k, False: 331k]
  ------------------
  802|  5.38k|            SCN_UNLIKELY_ATTR
  803|  5.38k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|  5.38k|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|   331k|            return {};
  809|   336k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEd:
  690|   343k|{
  691|   343k|    return d == 0.0 || d == -0.0;
  ------------------
  |  Branch (691:12): [True: 132k, False: 211k]
  |  Branch (691:24): [True: 0, False: 211k]
  ------------------
  692|   343k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   247k|    {
  755|   247k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 243k, False: 3.73k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   243k|            auto first_space = read_until_classic_space(input.view());
  758|   243k|            input.assign(
  759|   243k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   243k|        }
  761|       |
  762|   247k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 210k, False: 36.5k]
  ------------------
  763|   210k|            if constexpr (std::is_same_v<CharT, char>) {
  764|   210k|                input.get_allocated_string().insert(0, "0x");
  765|       |            }
  766|       |            else {
  767|       |                input.get_allocated_string().insert(0, L"0x");
  768|       |            }
  769|   210k|        }
  770|       |
  771|   247k|        return input.get_allocated_string().c_str();
  772|   247k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdE14generic_strtodEPKcPPc:
  904|   247k|    {
  905|   247k|        if constexpr (std::is_same_v<CharT, char>) {
  906|   247k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|       |        }
  908|       |        else {
  909|       |            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|       |        }
  911|   247k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE21generic_narrow_strtodEPKcPPc:
  812|   247k|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|   247k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|       |        if constexpr (std::is_same_v<T, float>) {
  838|       |            return std::strtof(str, str_end);
  839|       |        }
  840|   247k|        else if constexpr (std::is_same_v<T, double>) {
  841|   247k|            return std::strtod(str, str_end);
  842|       |        }
  843|       |        else if constexpr (std::is_same_v<T, long double>) {
  844|       |            return std::strtold(str, str_end);
  845|       |        }
  846|   247k|#endif
  847|   247k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcdE8get_viewEv:
 1109|   746k|    {
 1110|   746k|        if constexpr (sizeof(CharT) == 1) {
 1111|   746k|            return m_input.view();
 1112|       |        }
 1113|       |        else if constexpr (sizeof(CharT) == 2) {
 1114|       |            return std::u16string_view{
 1115|       |                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|       |                m_input.view().size()};
 1117|       |        }
 1118|       |        else {
 1119|       |            return std::u32string_view{
 1120|       |                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|       |                m_input.view().size()};
 1122|       |        }
 1123|   746k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   470k|{
 1138|   470k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 470k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|   470k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 470k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|   470k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 470k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|   470k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 470k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|   470k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   470k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   470k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   470k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 99.5k, False: 370k]
  ------------------
 1185|  99.5k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  99.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.4k, False: 87.1k]
  |  |  ------------------
  ------------------
 1186|  12.4k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  12.4k|                                         "Invalid floating-point digit");
 1188|  12.4k|        }
 1189|  99.5k|    }
 1190|   457k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   457k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 30.6k, False: 427k]
  |  |  ------------------
  ------------------
 1191|  30.6k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  30.6k|                                     "Invalid floating-point digit");
 1193|  30.6k|    }
 1194|       |
 1195|       |    if constexpr (std::is_same_v<T, long double>) {
 1196|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|       |            double tmp{};
 1200|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|       |            value = tmp;
 1202|       |            return ret;
 1203|       |        }
 1204|       |        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|       |            return fast_float_fallback(data, value);
 1208|       |        }
 1209|       |    }
 1210|   427k|    else {
 1211|       |        // Default to fast_float
 1212|   427k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   427k|    }
 1214|   427k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIwdEC2ENS2_14impl_init_dataIwEE:
 1076|   427k|        : fast_float_impl_base{data.base()}, m_input(data.input)
 1077|   427k|    {
 1078|   427k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwdEclERd:
 1081|   427k|    {
 1082|   427k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 87.1k, False: 340k]
  ------------------
 1083|   427k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 700, False: 339k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|  87.8k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|  87.8k|                                              value);
 1087|  87.8k|        }
 1088|       |
 1089|   339k|        const auto flags = get_flags();
 1090|   339k|        const auto view = get_view();
 1091|   339k|        const auto result = fast_float::from_chars(
 1092|   339k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|   339k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|   339k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 339k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|   339k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|   339k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.45k, False: 336k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  2.45k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  2.45k|                                              value);
 1102|  2.45k|        }
 1103|       |
 1104|   336k|        return result.ptr - view.data();
 1105|   339k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  90.2k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  90.2k|    {
 1048|  90.2k|#if !SCN_DISABLE_STRTOD
 1049|  90.2k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  90.2k|    }
 1056|  90.2k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdEC2ENS2_14impl_init_dataIwEE:
  892|  90.2k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  893|  90.2k|    {
  894|  90.2k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdEclERd:
  897|  90.2k|    {
  898|  90.2k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  90.2k|                           generic_strtod);
  900|  90.2k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIwPFdPKwPPwEEENS0_13scan_expectedIlEERdPKT_T0_:
  731|  90.2k|    {
  732|  90.2k|        CharT* end{};
  733|  90.2k|        errno = 0;
  734|  90.2k|        value = strtod_cb(src, &end);
  735|  90.2k|        const auto saved_errno = errno;
  736|  90.2k|        auto chars_read = end - src;
  737|       |
  738|  90.2k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  90.2k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  90.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.51k, False: 87.7k]
  |  |  ------------------
  ------------------
  740|  2.51k|            return unexpected(e);
  741|  2.51k|        }
  742|       |
  743|  87.7k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 87.0k, False: 700]
  ------------------
  744|  87.7k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 87.0k, False: 0]
  ------------------
  745|  87.0k|            chars_read -= 2;
  746|  87.0k|        }
  747|       |
  748|  87.7k|        return chars_read;
  749|  90.2k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  90.2k|    {
  755|  90.2k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 88.5k, False: 1.67k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  88.5k|            auto first_space = read_until_classic_space(input.view());
  758|  88.5k|            input.assign(
  759|  88.5k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  88.5k|        }
  761|       |
  762|  90.2k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 87.1k, False: 3.15k]
  ------------------
  763|       |            if constexpr (std::is_same_v<CharT, char>) {
  764|       |                input.get_allocated_string().insert(0, "0x");
  765|       |            }
  766|  87.1k|            else {
  767|  87.1k|                input.get_allocated_string().insert(0, L"0x");
  768|  87.1k|            }
  769|  87.1k|        }
  770|       |
  771|  90.2k|        return input.get_allocated_string().c_str();
  772|  90.2k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdE14generic_strtodEPKwPPw:
  904|  90.2k|    {
  905|       |        if constexpr (std::is_same_v<CharT, char>) {
  906|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|       |        }
  908|  90.2k|        else {
  909|  90.2k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  90.2k|        }
  911|  90.2k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE19generic_wide_strtodEPKwPPw:
  850|  90.2k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|  90.2k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|       |        if constexpr (std::is_same_v<T, float>) {
  876|       |            return std::wcstof(str, str_end);
  877|       |        }
  878|  90.2k|        else if constexpr (std::is_same_v<T, double>) {
  879|  90.2k|            return std::wcstod(str, str_end);
  880|       |        }
  881|       |        else if constexpr (std::is_same_v<T, long double>) {
  882|       |            return std::wcstold(str, str_end);
  883|       |        }
  884|  90.2k|#endif
  885|  90.2k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwdE8get_viewEv:
 1109|   339k|    {
 1110|       |        if constexpr (sizeof(CharT) == 1) {
 1111|       |            return m_input.view();
 1112|       |        }
 1113|       |        else if constexpr (sizeof(CharT) == 2) {
 1114|       |            return std::u16string_view{
 1115|       |                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|       |                m_input.view().size()};
 1117|       |        }
 1118|   339k|        else {
 1119|   339k|            return std::u32string_view{
 1120|   339k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|   339k|                m_input.view().size()};
 1122|   339k|        }
 1123|   339k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  1.07M|{
 1138|  1.07M|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 6.47k, False: 1.06M]
  ------------------
 1139|  6.47k|        value = std::numeric_limits<T>::infinity();
 1140|  6.47k|        return 3;
 1141|  6.47k|    }
 1142|  1.06M|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 6.29k, False: 1.06M]
  ------------------
 1143|  6.29k|        value = std::numeric_limits<T>::infinity();
 1144|  6.29k|        return 8;
 1145|  6.29k|    }
 1146|  1.06M|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 40.6k, False: 1.01M]
  ------------------
 1147|  40.6k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  40.6k|        return 3;
 1149|  40.6k|    }
 1150|  1.01M|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 2.27k, False: 1.01M]
  ------------------
 1151|  2.27k|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|  2.27k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|  2.27k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|  2.27k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|  2.27k|    }
 1182|       |
 1183|  1.01M|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  1.01M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.01M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  1.01M|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 215k, False: 801k]
  ------------------
 1185|   215k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   215k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.55k, False: 211k]
  |  |  ------------------
  ------------------
 1186|  4.55k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  4.55k|                                         "Invalid floating-point digit");
 1188|  4.55k|        }
 1189|   215k|    }
 1190|  1.01M|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  1.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.4k, False: 1.00M]
  |  |  ------------------
  ------------------
 1191|  12.4k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  12.4k|                                     "Invalid floating-point digit");
 1193|  12.4k|    }
 1194|       |
 1195|  1.00M|    if constexpr (std::is_same_v<T, long double>) {
 1196|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|       |            double tmp{};
 1200|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|       |            value = tmp;
 1202|       |            return ret;
 1203|       |        }
 1204|  1.00M|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  1.00M|            return fast_float_fallback(data, value);
 1208|  1.00M|        }
 1209|       |    }
 1210|       |    else {
 1211|       |        // Default to fast_float
 1212|       |        return fast_float_impl<CharT, T>{data}(value);
 1213|       |    }
 1214|  1.00M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  1.00M|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  1.00M|    {
 1048|  1.00M|#if !SCN_DISABLE_STRTOD
 1049|  1.00M|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  1.00M|    }
 1056|  1.00M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceEC2ENS2_14impl_init_dataIcEE:
  892|  1.00M|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  893|  1.00M|    {
  894|  1.00M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeEC2ENS2_9impl_baseE:
  725|  1.43M|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceEclERe:
  897|  1.00M|    {
  898|  1.00M|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  1.00M|                           generic_strtod);
  900|  1.00M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIcPFePKcPPcEEENS0_13scan_expectedIlEERePKT_T0_:
  731|  1.00M|    {
  732|  1.00M|        CharT* end{};
  733|  1.00M|        errno = 0;
  734|  1.00M|        value = strtod_cb(src, &end);
  735|  1.00M|        const auto saved_errno = errno;
  736|  1.00M|        auto chars_read = end - src;
  737|       |
  738|  1.00M|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  1.00M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 831, False: 999k]
  |  |  ------------------
  ------------------
  740|    831|            return unexpected(e);
  741|    831|        }
  742|       |
  743|   999k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 211k, False: 788k]
  ------------------
  744|   999k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 211k, False: 0]
  ------------------
  745|   211k|            chars_read -= 2;
  746|   211k|        }
  747|       |
  748|   999k|        return chars_read;
  749|  1.00M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE11check_errorElie:
  777|  1.43M|    {
  778|  1.43M|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 624k, False: 813k]
  |  Branch (778:37): [True: 0, False: 624k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|  1.43M|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 34.3k, False: 1.40M]
  ------------------
  785|  1.43M|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 34.3k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|  1.43M|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 1.17k, False: 1.43M]
  |  Branch (791:34): [True: 163, False: 1.01k]
  ------------------
  792|    163|            SCN_UNLIKELY_ATTR
  793|    163|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|    163|        }
  795|       |
  796|  1.43M|        SCN_GCC_COMPAT_PUSH
  797|  1.43M|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|  1.43M|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 1.43M, False: 0]
  ------------------
  800|  1.43M|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 1.43M, False: 0]
  ------------------
  801|  1.43M|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 1.01k, False: 1.43M]
  ------------------
  802|  1.01k|            SCN_UNLIKELY_ATTR
  803|  1.01k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|  1.01k|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|  1.43M|            return {};
  809|  1.43M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEe:
  694|  1.43M|{
  695|  1.43M|    return ld == 0.0L || ld == -0.0L;
  ------------------
  |  Branch (695:12): [True: 624k, False: 814k]
  |  Branch (695:26): [True: 0, False: 814k]
  ------------------
  696|  1.43M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  1.00M|    {
  755|  1.00M|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 926k, False: 73.4k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   926k|            auto first_space = read_until_classic_space(input.view());
  758|   926k|            input.assign(
  759|   926k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   926k|        }
  761|       |
  762|  1.00M|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 211k, False: 789k]
  ------------------
  763|   211k|            if constexpr (std::is_same_v<CharT, char>) {
  764|   211k|                input.get_allocated_string().insert(0, "0x");
  765|       |            }
  766|       |            else {
  767|       |                input.get_allocated_string().insert(0, L"0x");
  768|       |            }
  769|   211k|        }
  770|       |
  771|  1.00M|        return input.get_allocated_string().c_str();
  772|  1.00M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceE14generic_strtodEPKcPPc:
  904|  1.00M|    {
  905|  1.00M|        if constexpr (std::is_same_v<CharT, char>) {
  906|  1.00M|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|       |        }
  908|       |        else {
  909|       |            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|       |        }
  911|  1.00M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE21generic_narrow_strtodEPKcPPc:
  812|  1.00M|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|  1.00M|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|       |        if constexpr (std::is_same_v<T, float>) {
  838|       |            return std::strtof(str, str_end);
  839|       |        }
  840|       |        else if constexpr (std::is_same_v<T, double>) {
  841|       |            return std::strtod(str, str_end);
  842|       |        }
  843|  1.00M|        else if constexpr (std::is_same_v<T, long double>) {
  844|  1.00M|            return std::strtold(str, str_end);
  845|  1.00M|        }
  846|  1.00M|#endif
  847|  1.00M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   480k|{
 1138|   480k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 480k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|   480k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 480k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|   480k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 480k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|   480k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 480k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|   480k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   480k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   480k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   480k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 99.6k, False: 381k]
  ------------------
 1185|  99.6k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  99.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.4k, False: 87.1k]
  |  |  ------------------
  ------------------
 1186|  12.4k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  12.4k|                                         "Invalid floating-point digit");
 1188|  12.4k|        }
 1189|  99.6k|    }
 1190|   468k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   468k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 31.3k, False: 437k]
  |  |  ------------------
  ------------------
 1191|  31.3k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  31.3k|                                     "Invalid floating-point digit");
 1193|  31.3k|    }
 1194|       |
 1195|   437k|    if constexpr (std::is_same_v<T, long double>) {
 1196|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|       |            double tmp{};
 1200|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|       |            value = tmp;
 1202|       |            return ret;
 1203|       |        }
 1204|   437k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|   437k|            return fast_float_fallback(data, value);
 1208|   437k|        }
 1209|       |    }
 1210|       |    else {
 1211|       |        // Default to fast_float
 1212|       |        return fast_float_impl<CharT, T>{data}(value);
 1213|       |    }
 1214|   437k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   437k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   437k|    {
 1048|   437k|#if !SCN_DISABLE_STRTOD
 1049|   437k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   437k|    }
 1056|   437k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweEC2ENS2_14impl_init_dataIwEE:
  892|   437k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  893|   437k|    {
  894|   437k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweEclERe:
  897|   437k|    {
  898|   437k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   437k|                           generic_strtod);
  900|   437k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIwPFePKwPPwEEENS0_13scan_expectedIlEERePKT_T0_:
  731|   437k|    {
  732|   437k|        CharT* end{};
  733|   437k|        errno = 0;
  734|   437k|        value = strtod_cb(src, &end);
  735|   437k|        const auto saved_errno = errno;
  736|   437k|        auto chars_read = end - src;
  737|       |
  738|   437k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   437k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   437k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 348, False: 436k]
  |  |  ------------------
  ------------------
  740|    348|            return unexpected(e);
  741|    348|        }
  742|       |
  743|   436k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 87.1k, False: 349k]
  ------------------
  744|   436k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 87.1k, False: 0]
  ------------------
  745|  87.1k|            chars_read -= 2;
  746|  87.1k|        }
  747|       |
  748|   436k|        return chars_read;
  749|   437k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   437k|    {
  755|   437k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 429k, False: 7.35k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   429k|            auto first_space = read_until_classic_space(input.view());
  758|   429k|            input.assign(
  759|   429k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   429k|        }
  761|       |
  762|   437k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 87.1k, False: 349k]
  ------------------
  763|       |            if constexpr (std::is_same_v<CharT, char>) {
  764|       |                input.get_allocated_string().insert(0, "0x");
  765|       |            }
  766|  87.1k|            else {
  767|  87.1k|                input.get_allocated_string().insert(0, L"0x");
  768|  87.1k|            }
  769|  87.1k|        }
  770|       |
  771|   437k|        return input.get_allocated_string().c_str();
  772|   437k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweE14generic_strtodEPKwPPw:
  904|   437k|    {
  905|       |        if constexpr (std::is_same_v<CharT, char>) {
  906|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|       |        }
  908|   437k|        else {
  909|   437k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|   437k|        }
  911|   437k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE19generic_wide_strtodEPKwPPw:
  850|   437k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|   437k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|       |        if constexpr (std::is_same_v<T, float>) {
  876|       |            return std::wcstof(str, str_end);
  877|       |        }
  878|       |        else if constexpr (std::is_same_v<T, double>) {
  879|       |            return std::wcstod(str, str_end);
  880|       |        }
  881|   437k|        else if constexpr (std::is_same_v<T, long double>) {
  882|   437k|            return std::wcstold(str, str_end);
  883|   437k|        }
  884|   437k|#endif
  885|   437k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2072|  1.63M|{
 2073|  1.63M|    const auto argcount = args.size();
 2074|  1.63M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2074:9): [True: 331k, False: 1.30M]
  |  Branch (2074:60): [True: 331k, False: 0]
  ------------------
 2075|   331k|        auto arg = args.get(0);
 2076|   331k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   331k|    static_cast<    \
  |  |  929|   331k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2077|   331k|    }
 2078|       |
 2079|  1.30M|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2079:9): [True: 0, False: 1.30M]
  ------------------
 2080|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2081|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|        return vscan_parse_format_string(format, handler);
 2084|      0|    }
 2085|       |
 2086|  1.30M|    SCN_UNLIKELY_ATTR
 2087|  1.30M|    {
 2088|  1.30M|        auto handler = format_handler<false, CharT>{
 2089|  1.30M|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.30M|    static_cast<    \
  |  |  929|  1.30M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.30M|    static_cast<    \
  |  |  929|  1.30M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2090|  1.30M|        return vscan_parse_format_string(format, handler);
 2091|  1.30M|    }
 2092|  1.30M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|  3.02M|{
 1625|  3.02M|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 2.39M, False: 634k]
  ------------------
 1626|  2.39M|        return false;
 1627|  2.39M|    }
 1628|   634k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 634k, False: 0]
  |  Branch (1628:39): [True: 634k, False: 0]
  ------------------
 1629|  3.02M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|   497k|{
 1658|   497k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   497k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 497k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|   497k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|   497k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 497k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|   497k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|   497k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|   497k|    static_cast<    \
  |  |  929|   497k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|   497k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   497k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   497k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   497k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   497k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 28.8k, False: 468k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  28.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  28.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  28.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  28.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  28.8k|    }                                                  \
  |  |  |  | 3671|   497k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   468k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|   468k|    return it.position();
 1675|   497k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1899|  1.09M|        : format_handler_base{argcount},
 1900|  1.09M|          parse_ctx{format},
 1901|  1.09M|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|  1.09M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|  1.09M|    static_cast<    \
  |  |  929|  1.09M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|  1.09M|    static_cast<    \
  |  |  929|  1.09M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|  1.09M|    {
 1903|  1.09M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1720|  3.65M|    format_handler_base(size_t argcount) : args_count(argcount)
 1721|  3.65M|    {
 1722|  3.65M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|  3.65M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.65M]
  |  |  ------------------
  ------------------
 1723|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1724|      0|        }
 1725|  3.65M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1851|  1.09M|        : contiguous_ctx(source, args, loc)
 1852|  1.09M|    {
 1853|  1.09M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|  1.09M|{
 2038|  1.09M|    const auto beg = handler.get_ctx().begin();
 2039|  1.09M|    detail::parse_format_string<false>(format, handler);
 2040|  1.09M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.09M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 96.0k, False: 997k]
  |  |  ------------------
  ------------------
 2041|  96.0k|        return unexpected(handler.error);
 2042|  96.0k|    }
 2043|   997k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|  1.09M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2021|  7.46M|    {
 2022|  7.46M|        return ctx.get();
 2023|  7.46M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1856|  7.46M|    {
 1857|  7.46M|        return contiguous_ctx;
 1858|  7.46M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1906|  2.09M|    {
 1907|  2.09M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 2.09M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|  2.09M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1680|  1.09M|{
 1681|  1.09M|    auto arg = ctx.arg(id);
 1682|  1.09M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  1.09M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.09M]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  1.09M|    return arg;
 1686|  1.09M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1796|  3.65M|    {
 1797|  3.65M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  3.65M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.65M]
  |  |  ------------------
  ------------------
 1798|      0|            on_error("Invalid out-of-range argument ID");
 1799|      0|            return;
 1800|      0|        }
 1801|       |
 1802|  3.65M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|  3.65M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.65M]
  |  |  ------------------
  ------------------
 1803|      0|            return on_error("Argument with this ID has already been scanned");
 1804|      0|        }
 1805|       |
 1806|  3.65M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  3.65M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.65M, False: 0]
  |  |  ------------------
  ------------------
 1807|  3.65M|            visited_args_lower64 |= (1ull << id);
 1808|  3.65M|            return;
 1809|  3.65M|        }
 1810|       |
 1811|      0|        id -= 64;
 1812|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1813|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1781|  3.65M|    {
 1782|  3.65M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  3.65M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.65M]
  |  |  ------------------
  ------------------
 1783|      0|            on_error("Invalid out-of-range argument ID");
 1784|      0|            return false;
 1785|      0|        }
 1786|       |
 1787|  3.65M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  3.65M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.65M, False: 0]
  |  |  ------------------
  ------------------
 1788|  3.65M|            return (visited_args_lower64 >> id) & 1ull;
 1789|  3.65M|        }
 1790|       |
 1791|      0|        id -= 64;
 1792|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1793|  3.65M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1765|   576k|    {
 1766|   576k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|   576k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 576k, False: 0]
  |  |  ------------------
  ------------------
 1767|   576k|            error = err;
 1768|   576k|        }
 1769|   576k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1943|  1.09M|    {
 1944|  1.09M|        return parse_ctx.next_arg_id();
 1945|  1.09M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1984|  1.09M|    {
 1985|  1.09M|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|  1.09M|        set_arg_as_visited(arg_id);
 1987|       |
 1988|  1.09M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 1.09M]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|  1.09M|        auto specs = detail::format_specs{};
 1998|  1.09M|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|  1.09M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|  1.09M|            arg.type()};
 2001|       |
 2002|  1.09M|        begin = detail::parse_format_specs(begin, end, handler);
 2003|  1.09M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 1.09M]
  |  Branch (2003:29): [True: 0, False: 1.09M]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|  1.09M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.09M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.09M]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|  1.09M|        parse_ctx.advance_to(begin);
 2012|       |
 2013|  1.09M|        on_visit_scan_arg(
 2014|  1.09M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|  1.09M|                                           get_ctx().locale()},
 2016|  1.09M|            arg);
 2017|  1.09M|        return parse_ctx.begin();
 2018|  1.09M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1699|  1.09M|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|  1.09M|    {
 1701|  1.09M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1955|  1.09M|    {
 1956|  1.09M|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 1.09M]
  |  Branch (1956:23): [True: 0, False: 1.09M]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|  1.09M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  1.09M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  1.09M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.09M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 96.0k, False: 997k]
  |  |  ------------------
  ------------------
 1963|  96.0k|            on_error(r.error());
 1964|  96.0k|        }
 1965|   997k|        else {
 1966|   997k|            get_ctx().advance_to(*r);
 1967|   997k|        }
 1968|  1.09M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1728|  3.65M|    {
 1729|  3.65M|        {
 1730|  3.65M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1730:45): [True: 0, False: 3.65M]
  ------------------
 1731|  3.65M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1731:35): [True: 0, False: 3.65M]
  ------------------
 1732|  3.65M|                                      ? std::numeric_limits<uint64_t>::max()
 1733|  3.65M|                                      : (1ull << args_count_lower64) - 1;
 1734|       |
 1735|  3.65M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1735:17): [True: 0, False: 3.65M]
  ------------------
 1736|      0|                return on_error("Argument list not exhausted");
 1737|      0|            }
 1738|  3.65M|        }
 1739|       |
 1740|  3.65M|        if (args_count < 64) {
  ------------------
  |  Branch (1740:13): [True: 3.65M, False: 0]
  ------------------
 1741|  3.65M|            return;
 1742|  3.65M|        }
 1743|       |
 1744|      0|        auto last_args_count = args_count - 64;
 1745|      0|        for (auto it = visited_args_upper.begin();
 1746|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1746:14): [True: 0, False: 0]
  ------------------
 1747|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1747:17): [True: 0, False: 0]
  ------------------
 1748|      0|                return on_error("Argument list not exhausted");
 1749|      0|            }
 1750|      0|            last_args_count -= 8;
 1751|      0|        }
 1752|       |
 1753|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1754|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1754:13): [True: 0, False: 0]
  ------------------
 1755|      0|            return on_error("Argument list not exhausted");
 1756|      0|        }
 1757|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1776|  3.65M|    {
 1777|  3.65M|        return error;
 1778|  3.65M|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1772|  10.9M|    {
 1773|  10.9M|        return static_cast<bool>(error);
 1774|  10.9M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
 1899|  1.30M|        : format_handler_base{argcount},
 1900|  1.30M|          parse_ctx{format},
 1901|  1.30M|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|  1.30M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|  1.30M|    static_cast<    \
  |  |  929|  1.30M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|  1.30M|    static_cast<    \
  |  |  929|  1.30M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|  1.30M|    {
 1903|  1.30M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
 1828|  1.30M|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  928|  1.30M|    static_cast<    \
  |  |  929|  1.30M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1829|  1.30M|    {
 1830|  1.30M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|  1.30M|{
 2038|  1.30M|    const auto beg = handler.get_ctx().begin();
 2039|  1.30M|    detail::parse_format_string<false>(format, handler);
 2040|  1.30M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.30M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 96.0k, False: 1.20M]
  |  |  ------------------
  ------------------
 2041|  96.0k|        return unexpected(handler.error);
 2042|  96.0k|    }
 2043|  1.20M|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|  1.30M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 2021|  8.91M|    {
 2022|  8.91M|        return ctx.get();
 2023|  8.91M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1833|  8.91M|    {
 1834|  8.91M|        return ctx;
 1835|  8.91M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1906|  2.50M|    {
 1907|  2.50M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 2.50M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|  2.50M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
 1680|  1.30M|{
 1681|  1.30M|    auto arg = ctx.arg(id);
 1682|  1.30M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  1.30M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.30M]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  1.30M|    return arg;
 1686|  1.30M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1943|  1.30M|    {
 1944|  1.30M|        return parse_ctx.next_arg_id();
 1945|  1.30M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1984|  1.30M|    {
 1985|  1.30M|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|  1.30M|        set_arg_as_visited(arg_id);
 1987|       |
 1988|  1.30M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 1.30M]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|  1.30M|        auto specs = detail::format_specs{};
 1998|  1.30M|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|  1.30M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|  1.30M|            arg.type()};
 2001|       |
 2002|  1.30M|        begin = detail::parse_format_specs(begin, end, handler);
 2003|  1.30M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 1.30M]
  |  Branch (2003:29): [True: 0, False: 1.30M]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|  1.30M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.30M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.30M]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|  1.30M|        parse_ctx.advance_to(begin);
 2012|       |
 2013|  1.30M|        on_visit_scan_arg(
 2014|  1.30M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|  1.30M|                                           get_ctx().locale()},
 2016|  1.30M|            arg);
 2017|  1.30M|        return parse_ctx.begin();
 2018|  1.30M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
 1699|  1.30M|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|  1.30M|    {
 1701|  1.30M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1955|  1.30M|    {
 1956|  1.30M|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 1.30M]
  |  Branch (1956:23): [True: 0, False: 1.30M]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|  1.30M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  1.30M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  1.30M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.30M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 96.0k, False: 1.20M]
  |  |  ------------------
  ------------------
 1963|  96.0k|            on_error(r.error());
 1964|  96.0k|        }
 1965|  1.20M|        else {
 1966|  1.20M|            get_ctx().advance_to(*r);
 1967|  1.20M|        }
 1968|  1.30M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|  1.39M|{
 2053|  1.39M|    const auto argcount = args.size();
 2054|  1.39M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 302k, False: 1.09M]
  |  Branch (2054:60): [True: 302k, False: 0]
  ------------------
 2055|   302k|        auto arg = args.get(0);
 2056|   302k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   302k|    static_cast<    \
  |  |  929|   302k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|   302k|    }
 2058|       |
 2059|  1.09M|    auto handler = format_handler<true, CharT>{
 2060|  1.09M|        ranges::subrange<const CharT*>{source.data(),
 2061|  1.09M|                                       source.data() + source.size()},
 2062|  1.09M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.09M|    static_cast<    \
  |  |  929|  1.09M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.09M|    static_cast<    \
  |  |  929|  1.09M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|  1.09M|    return vscan_parse_format_string(format, handler);
 2064|  1.39M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|   453k|{
 1638|   453k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   453k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 453k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|   453k|    auto reader =
 1644|   453k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|   453k|            ranges::subrange<const CharT*>{source.data(),
 1646|   453k|                                           source.data() + source.size()},
 1647|   453k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|   453k|    static_cast<    \
  |  |  929|   453k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|   453k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   453k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   453k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   453k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   453k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 28.8k, False: 424k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  28.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  28.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  28.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  28.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  28.8k|    }                                                  \
  |  |  |  | 3671|   453k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   424k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|   424k|    return ranges::distance(source.data(), it);
 1650|   453k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|   783k|{
 2053|   783k|    const auto argcount = args.size();
 2054|   783k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 154k, False: 629k]
  |  Branch (2054:60): [True: 154k, False: 0]
  ------------------
 2055|   154k|        auto arg = args.get(0);
 2056|   154k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   154k|    static_cast<    \
  |  |  929|   154k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|   154k|    }
 2058|       |
 2059|   629k|    auto handler = format_handler<true, CharT>{
 2060|   629k|        ranges::subrange<const CharT*>{source.data(),
 2061|   629k|                                       source.data() + source.size()},
 2062|   629k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   629k|    static_cast<    \
  |  |  929|   629k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   629k|    static_cast<    \
  |  |  929|   629k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   629k|    return vscan_parse_format_string(format, handler);
 2064|   783k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|  1.56M|{
 1625|  1.56M|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 1.25M, False: 307k]
  ------------------
 1626|  1.25M|        return false;
 1627|  1.25M|    }
 1628|   307k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 307k, False: 0]
  |  Branch (1628:39): [True: 307k, False: 0]
  ------------------
 1629|  1.56M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|   231k|{
 1638|   231k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   231k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 231k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|   231k|    auto reader =
 1644|   231k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|   231k|            ranges::subrange<const CharT*>{source.data(),
 1646|   231k|                                           source.data() + source.size()},
 1647|   231k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|   231k|    static_cast<    \
  |  |  929|   231k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|   231k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   231k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   231k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   231k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   231k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 57.6k, False: 173k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  57.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  57.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  57.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  57.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  57.6k|    }                                                  \
  |  |  |  | 3671|   231k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   173k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|   173k|    return ranges::distance(source.data(), it);
 1650|   231k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1899|   629k|        : format_handler_base{argcount},
 1900|   629k|          parse_ctx{format},
 1901|   629k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   629k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   629k|    static_cast<    \
  |  |  929|   629k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   629k|    static_cast<    \
  |  |  929|   629k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|   629k|    {
 1903|   629k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1851|   629k|        : contiguous_ctx(source, args, loc)
 1852|   629k|    {
 1853|   629k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   629k|{
 2038|   629k|    const auto beg = handler.get_ctx().begin();
 2039|   629k|    detail::parse_format_string<false>(format, handler);
 2040|   629k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   629k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 192k, False: 437k]
  |  |  ------------------
  ------------------
 2041|   192k|        return unexpected(handler.error);
 2042|   192k|    }
 2043|   437k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   629k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2021|  4.02M|    {
 2022|  4.02M|        return ctx.get();
 2023|  4.02M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1856|  4.02M|    {
 1857|  4.02M|        return contiguous_ctx;
 1858|  4.02M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1906|  1.06M|    {
 1907|  1.06M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 1.06M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|  1.06M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   629k|{
 1681|   629k|    auto arg = ctx.arg(id);
 1682|   629k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   629k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 629k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   629k|    return arg;
 1686|   629k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1943|   629k|    {
 1944|   629k|        return parse_ctx.next_arg_id();
 1945|   629k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1984|   629k|    {
 1985|   629k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   629k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   629k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 629k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   629k|        auto specs = detail::format_specs{};
 1998|   629k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   629k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   629k|            arg.type()};
 2001|       |
 2002|   629k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   629k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 629k]
  |  Branch (2003:29): [True: 0, False: 629k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   629k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   629k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 629k]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|   629k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   629k|        on_visit_scan_arg(
 2014|   629k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   629k|                                           get_ctx().locale()},
 2016|   629k|            arg);
 2017|   629k|        return parse_ctx.begin();
 2018|   629k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1699|   629k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|   629k|    {
 1701|   629k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1955|   629k|    {
 1956|   629k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 629k]
  |  Branch (1956:23): [True: 0, False: 629k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   629k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   629k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   629k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   629k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 192k, False: 437k]
  |  |  ------------------
  ------------------
 1963|   192k|            on_error(r.error());
 1964|   192k|        }
 1965|   437k|        else {
 1966|   437k|            get_ctx().advance_to(*r);
 1967|   437k|        }
 1968|   629k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2072|   782k|{
 2073|   782k|    const auto argcount = args.size();
 2074|   782k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2074:9): [True: 153k, False: 628k]
  |  Branch (2074:60): [True: 153k, False: 0]
  ------------------
 2075|   153k|        auto arg = args.get(0);
 2076|   153k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   153k|    static_cast<    \
  |  |  929|   153k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2077|   153k|    }
 2078|       |
 2079|   628k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2079:9): [True: 0, False: 628k]
  ------------------
 2080|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2081|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|        return vscan_parse_format_string(format, handler);
 2084|      0|    }
 2085|       |
 2086|   628k|    SCN_UNLIKELY_ATTR
 2087|   628k|    {
 2088|   628k|        auto handler = format_handler<false, CharT>{
 2089|   628k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   628k|    static_cast<    \
  |  |  929|   628k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   628k|    static_cast<    \
  |  |  929|   628k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2090|   628k|        return vscan_parse_format_string(format, handler);
 2091|   628k|    }
 2092|   628k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|   230k|{
 1658|   230k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   230k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 230k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|   230k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|   230k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 230k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|   230k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|   230k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|   230k|    static_cast<    \
  |  |  929|   230k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|   230k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   230k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   230k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   230k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   230k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 57.6k, False: 173k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  57.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  57.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  57.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  57.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  57.6k|    }                                                  \
  |  |  |  | 3671|   230k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   173k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|   173k|    return it.position();
 1675|   230k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
 1899|   628k|        : format_handler_base{argcount},
 1900|   628k|          parse_ctx{format},
 1901|   628k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   628k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   628k|    static_cast<    \
  |  |  929|   628k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   628k|    static_cast<    \
  |  |  929|   628k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|   628k|    {
 1903|   628k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
 1828|   628k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  928|   628k|    static_cast<    \
  |  |  929|   628k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1829|   628k|    {
 1830|   628k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   628k|{
 2038|   628k|    const auto beg = handler.get_ctx().begin();
 2039|   628k|    detail::parse_format_string<false>(format, handler);
 2040|   628k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   628k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 192k, False: 436k]
  |  |  ------------------
  ------------------
 2041|   192k|        return unexpected(handler.error);
 2042|   192k|    }
 2043|   436k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   628k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 2021|  4.01M|    {
 2022|  4.01M|        return ctx.get();
 2023|  4.01M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1833|  4.01M|    {
 1834|  4.01M|        return ctx;
 1835|  4.01M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1906|  1.06M|    {
 1907|  1.06M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 1.06M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|  1.06M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
 1680|   628k|{
 1681|   628k|    auto arg = ctx.arg(id);
 1682|   628k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   628k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 628k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   628k|    return arg;
 1686|   628k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1943|   628k|    {
 1944|   628k|        return parse_ctx.next_arg_id();
 1945|   628k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1984|   628k|    {
 1985|   628k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   628k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   628k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 628k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   628k|        auto specs = detail::format_specs{};
 1998|   628k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   628k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   628k|            arg.type()};
 2001|       |
 2002|   628k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   628k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 628k]
  |  Branch (2003:29): [True: 0, False: 628k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   628k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   628k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 628k]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|   628k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   628k|        on_visit_scan_arg(
 2014|   628k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   628k|                                           get_ctx().locale()},
 2016|   628k|            arg);
 2017|   628k|        return parse_ctx.begin();
 2018|   628k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
 1699|   628k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|   628k|    {
 1701|   628k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1955|   628k|    {
 1956|   628k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 628k]
  |  Branch (1956:23): [True: 0, False: 628k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   628k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   628k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   628k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   628k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 192k, False: 436k]
  |  |  ------------------
  ------------------
 1963|   192k|            on_error(r.error());
 1964|   192k|        }
 1965|   436k|        else {
 1966|   436k|            get_ctx().advance_to(*r);
 1967|   436k|        }
 1968|   628k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|   151k|{
 2099|   151k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   151k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|   151k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|   165k|{
 2099|   165k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   165k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|   165k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  77.0k|{
 2099|  77.0k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  77.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  77.0k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  76.9k|{
 2099|  76.9k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  76.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  76.9k|}

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1362|  3.20k|{
 1363|  3.20k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1364|       |
 1365|  3.20k|    if constexpr (sizeof(SourceCharT) == 1) {
 1366|       |        if constexpr (sizeof(DestCharT) == 2) {
 1367|       |            std::u32string tmp;
 1368|       |            transcode_to_string_impl_to32(src, tmp);
 1369|       |            return transcode_to_string_impl_32to16<false>(
 1370|       |                std::u32string_view{tmp}, dest);
 1371|       |        }
 1372|  3.20k|        else if constexpr (sizeof(DestCharT) == 4) {
 1373|  3.20k|            return transcode_to_string_impl_to32(src, dest);
 1374|  3.20k|        }
 1375|       |    }
 1376|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1377|       |        if constexpr (sizeof(DestCharT) == 1) {
 1378|       |            std::u32string tmp;
 1379|       |            transcode_to_string_impl_to32(src, tmp);
 1380|       |            return transcode_to_string_impl_32to8<false>(
 1381|       |                std::u32string_view{tmp}, dest);
 1382|       |        }
 1383|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1384|       |            return trasncode_to_string_impl_to32(src, dest);
 1385|       |        }
 1386|       |    }
 1387|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1388|       |        if constexpr (sizeof(DestCharT) == 1) {
 1389|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1390|       |        }
 1391|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1392|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1393|       |        }
 1394|       |    }
 1395|       |
 1396|  3.20k|    SCN_EXPECT(false);
  ------------------
  |  |  924|  3.20k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.20k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1397|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1398|  3.20k|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1255|  3.20k|{
 1256|  3.20k|    static_assert(sizeof(DestCharT) == 4);
 1257|       |
 1258|  3.20k|    auto it = src.begin();
 1259|  1.03M|    while (it != src.end()) {
  ------------------
  |  Branch (1259:12): [True: 1.03M, False: 3.20k]
  ------------------
 1260|  1.03M|        auto res = get_next_code_point(
 1261|  1.03M|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1262|  1.03M|                                                                 src.end()));
 1263|  1.03M|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|  1.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.07k, False: 1.02M]
  |  |  ------------------
  ------------------
 1264|  4.07k|            dest.push_back(DestCharT{0xfffd});
 1265|  4.07k|        }
 1266|  1.02M|        else {
 1267|  1.02M|            dest.push_back(res.value);
 1268|  1.02M|        }
 1269|  1.03M|        it = detail::make_string_view_iterator(src, res.iterator);
 1270|  1.03M|    }
 1271|  3.20k|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|  1.46M|{
 1169|  1.46M|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|  1.46M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.46M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|  1.46M|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|  1.46M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  1.46M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 40.6k, False: 1.42M]
  |  |  ------------------
  ------------------
 1173|  40.6k|        return {get_start_for_next_code_point(input),
 1174|  40.6k|                detail::invalid_code_point};
 1175|  40.6k|    }
 1176|  1.42M|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|  1.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.11k, False: 1.42M]
  |  |  ------------------
  ------------------
 1177|  5.11k|        return {input.end(), detail::invalid_code_point};
 1178|  5.11k|    }
 1179|       |
 1180|  1.42M|    return {input.begin() + len,
 1181|  1.42M|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|  1.42M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  40.6k|{
 1155|  40.6k|    auto it = input.begin();
 1156|   327k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 318k, False: 8.99k]
  ------------------
 1157|   318k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 31.6k, False: 286k]
  ------------------
 1158|  31.6k|            break;
 1159|  31.6k|        }
 1160|   318k|    }
 1161|  40.6k|    return it;
 1162|  40.6k|}
_ZN3scn2v34impl11parse_errorC2ENS2_4codeE:
  807|  40.1M|    constexpr parse_error(code c) : m_code(c)
  808|  40.1M|    {
  809|  40.1M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  40.1M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  40.1M|    }
_ZN3scn2v34impleqENS1_11parse_errorES2_:
  822|  15.0M|    {
  823|  15.0M|        return a.m_code == b.m_code;
  824|  15.0M|    }
_ZN3scn2v34impl16clocale_restorerC2Ei:
 1726|  2.11M|    clocale_restorer(int cat) : m_category(cat)
 1727|  2.11M|    {
 1728|  2.11M|        const auto loc = std::setlocale(cat, nullptr);
 1729|  2.11M|        std::strcpy(m_locbuf, loc);
 1730|  2.11M|    }
_ZN3scn2v34impl16clocale_restorerD2Ev:
 1732|  2.11M|    {
 1733|       |        // Restore locale to what it was before
 1734|  2.11M|        std::setlocale(m_category, m_locbuf);
 1735|  2.11M|    }
_ZN3scn2v34impl25set_clocale_classic_guardC2Ei:
 1755|  2.11M|    set_clocale_classic_guard(int cat) : m_restorer(cat)
 1756|  2.11M|    {
 1757|  2.11M|        std::setlocale(cat, "C");
 1758|  2.11M|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2935|  3.65M|    {
 2936|  3.65M|        return m_msg == nullptr;
 2937|  3.65M|    }
_ZN3scn2v34impl17float_reader_baseC2Ej:
 3644|  3.61M|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|  25.0M|{
  458|  25.0M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  25.0M|        static_cast<unsigned char>(ch))];
  460|  25.0M|}
_ZN3scn2v34impl13is_ascii_charEc:
  468|   211k|{
  469|   211k|    return static_cast<unsigned char>(ch) <= 127;
  470|   211k|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|  5.72M|{
  539|  5.72M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  5.72M|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|  17.0M|{
  784|  17.0M|    return e != eof_error::good;
  785|  17.0M|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  48.0k|{
  798|  48.0k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|  48.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  48.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  48.0k|    return scan_error{scan_error::end_of_range, "EOF"};
  800|  48.0k|}
_ZN3scn2v34impl20make_eof_parse_errorENS1_9eof_errorE:
  844|   228k|{
  845|   228k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|   228k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   228k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|   228k|    return parse_error::eof;
  847|   228k|}
_ZN3scn2v34impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|  5.30M|{
  854|  5.30M|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 5.30M]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|  5.30M|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 83.9k, False: 5.22M]
  ------------------
  859|  83.9k|        return scan_error{scan_error::end_of_range, "EOF"};
  860|  83.9k|    }
  861|       |
  862|  5.22M|    return scan_error{code, msg};
  863|  5.30M|}
_ZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  5.30M|{
  868|  5.30M|    return [code, msg](parse_error err) {
  869|  5.30M|        return make_scan_error_from_parse_error(err, code, msg);
  870|  5.30M|    };
  871|  5.30M|}
_ZN3scn2v34impl11is_cp_spaceEDi:
 1199|  7.59M|{
 1200|       |    // Pattern_White_Space property
 1201|  7.59M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (1201:13): [True: 7.29M, False: 299k]
  |  Branch (1201:27): [True: 1.42M, False: 5.86M]
  ------------------
 1202|  7.59M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (1202:12): [True: 99.1k, False: 6.06M]
  ------------------
 1203|  7.59M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (1203:12): [True: 69.5k, False: 5.99M]
  ------------------
 1204|  7.59M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (1204:12): [True: 4.13k, False: 5.99M]
  ------------------
 1205|  7.59M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (1205:12): [True: 25.0k, False: 5.96M]
  ------------------
 1206|  7.59M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (1206:12): [True: 1.45M, False: 4.50M]
  ------------------
 1207|  7.59M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (1207:12): [True: 154, False: 4.50M]
  ------------------
 1208|  7.59M|}
_ZN3scn2v34impl17fast_streq_nocaseEPKcS3_m:
 2219|  4.03M|{
 2220|  4.03M|    unsigned char running_diff{0};
 2221|  15.1M|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2221:24): [True: 11.1M, False: 4.03M]
  ------------------
 2222|  11.1M|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2223|  11.1M|    }
 2224|  4.03M|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2224:12): [True: 116k, False: 3.91M]
  |  Branch (2224:33): [True: 22.6k, False: 3.89M]
  ------------------
 2225|  4.03M|}
_ZN3scn2v34impl11char_to_intEc:
 3122|  30.0M|{
 3123|  30.0M|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3124|  30.0M|}
_ZN3scn2v34impl11char_to_intEw:
 3126|  4.66M|{
 3127|  4.66M|#if WCHAR_MIN < 0
 3128|  4.66M|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3128:9): [True: 4.64M, False: 19.8k]
  |  Branch (3128:20): [True: 2.90M, False: 1.74M]
  ------------------
 3129|       |#else
 3130|       |    if (ch <= 255) {
 3131|       |#endif
 3132|  2.90M|        return char_to_int(static_cast<char>(ch));
 3133|  2.90M|    }
 3134|  1.76M|    return 255;
 3135|  4.66M|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6007|  3.07M|{
 6008|  3.07M|    if (specs.width != 0) {
  ------------------
  |  Branch (6008:9): [True: 0, False: 3.07M]
  ------------------
 6009|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6009:13): [True: 0, False: 0]
  ------------------
 6010|      0|            return {scan_error::invalid_scanned_value,
 6011|      0|                    "Scanned value too narrow, width did not exceed what "
 6012|      0|                    "was specified in the format string"};
 6013|      0|        }
 6014|      0|    }
 6015|  3.07M|    if (specs.precision != 0) {
  ------------------
  |  Branch (6015:9): [True: 0, False: 3.07M]
  ------------------
 6016|      0|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6016:13): [True: 0, False: 0]
  ------------------
 6017|      0|            return {scan_error::invalid_scanned_value,
 6018|      0|                    "Scanned value too wide, width exceeded the specified "
 6019|      0|                    "precision"};
 6020|      0|        }
 6021|      0|    }
 6022|  3.07M|    return {};
 6023|  3.07M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  4.51M|    {
  304|  4.51M|        ranges::advance(x, n);
  305|  4.51M|        return x;
  306|  4.51M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  4.51M|    {
  268|  4.51M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  4.51M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  4.51M|    {
  151|  4.51M|        i += n;
  152|  4.51M|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  5.33M|    {
  108|  5.33M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  5.33M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  5.33M|    {
   87|  5.33M|        return s - i;
   88|  5.33M|    }
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  2.81M|    {
  304|  2.81M|        ranges::advance(x, n);
  305|  2.81M|        return x;
  306|  2.81M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  2.81M|    {
  268|  2.81M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  2.81M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  2.81M|    {
  151|  2.81M|        i += n;
  152|  2.81M|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   808k|    {
  108|   808k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   808k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   808k|    {
   87|   808k|        return s - i;
   88|   808k|    }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|  1.79M|{
  981|       |    if constexpr (ranges::contiguous_range<Range> &&
  982|       |                  ranges::sized_range<Range>) {
  983|       |        return true;
  984|       |    }
  985|       |    else if constexpr (std::is_same_v<
  986|       |                           ranges::const_iterator_t<Range>,
  987|       |                           typename detail::basic_scan_buffer<
  988|  1.79M|                               detail::char_t<Range>>::forward_iterator>) {
  989|  1.79M|        auto beg = r.begin();
  990|  1.79M|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 1.79M, False: 0]
  ------------------
  991|  1.79M|            return false;
  992|  1.79M|        }
  993|       |        if constexpr (ranges::common_range<Range>) {
  994|       |            return beg.contiguous_segment().end() ==
  995|       |                   ranges::end(r).contiguous_segment().end();
  996|       |        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|       |    }
 1005|       |    else {
 1006|       |        return false;
 1007|       |    }
 1008|  1.79M|}
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  47.4M|    {
  763|  47.4M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  47.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  47.4M|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1856|  4.73M|{
 1857|  4.73M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  4.73M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.73M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|       |    if constexpr (ranges::sized_range<Range>) {
 1860|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|       |        if (sz < count) {
 1862|       |            return unexpected(eof_error::eof);
 1863|       |        }
 1864|       |
 1865|       |        return ranges::next(range.begin(), count);
 1866|       |    }
 1867|  4.73M|    else {
 1868|  4.73M|        auto it = range.begin();
 1869|  4.73M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 2.92M, False: 1.81M]
  ------------------
 1870|  2.92M|            return ranges::next(it, count);
 1871|  2.92M|        }
 1872|       |
 1873|  7.22M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 5.45M, False: 1.77M]
  ------------------
 1874|  5.45M|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 39.4k, False: 5.41M]
  ------------------
 1875|  39.4k|                return unexpected(eof_error::eof);
 1876|  39.4k|            }
 1877|  5.45M|        }
 1878|       |
 1879|  1.77M|        return it;
 1880|  1.81M|    }
 1881|  4.73M|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1094|  4.73M|{
 1095|       |    if constexpr (ranges::sized_range<Range>) {
 1096|       |        return r.size();
 1097|       |    }
 1098|       |    else if constexpr (std::is_same_v<
 1099|       |                           ranges::const_iterator_t<Range>,
 1100|       |                           typename detail::basic_scan_buffer<
 1101|  4.73M|                               detail::char_t<Range>>::forward_iterator>) {
 1102|       |        if constexpr (ranges::common_range<Range>) {
 1103|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|       |        }
 1105|  4.73M|        else {
 1106|  4.73M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1106:17): [True: 4.73M, False: 0]
  ------------------
 1107|  4.73M|                return static_cast<size_t>(
 1108|  4.73M|                    r.begin().parent()->chars_available() -
 1109|  4.73M|                    r.begin().position());
 1110|  4.73M|            }
 1111|      0|            return r.begin().contiguous_segment().size();
 1112|  4.73M|        }
 1113|       |    }
 1114|       |    else {
 1115|       |        return 0;
 1116|       |    }
 1117|  4.73M|}
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  4.35M|        : m_fptr([](storage fn,
  743|  4.35M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.35M|              cvref<T> obj = *get<T>(fn);
  745|  4.35M|              if constexpr (std::is_void_v<R>) {
  746|  4.35M|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.35M|              }
  748|  4.35M|              else {
  749|  4.35M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.35M|              }
  751|  4.35M|          }),
  752|  4.35M|          m_storage(std::addressof(f))
  753|  4.35M|    {
  754|  4.35M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEcE_clESK_c:
  743|  23.7M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  23.7M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  23.7M|              else {
  749|  23.7M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  23.7M|              }
  751|  23.7M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  23.7M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  23.7M|        else if constexpr (std::is_object_v<T>) {
  688|  23.7M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  23.7M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  4.35M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  4.35M|        {
  662|  4.35M|        }
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|  13.1M|    {
  763|  13.1M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  13.1M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  13.1M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  3.31M|        : m_fptr([](storage fn,
  743|  3.31M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.31M|              cvref<T> obj = *get<T>(fn);
  745|  3.31M|              if constexpr (std::is_void_v<R>) {
  746|  3.31M|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.31M|              }
  748|  3.31M|              else {
  749|  3.31M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.31M|              }
  751|  3.31M|          }),
  752|  3.31M|          m_storage(std::addressof(f))
  753|  3.31M|    {
  754|  3.31M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|  6.00M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.00M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  6.00M|              else {
  749|  6.00M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.00M|              }
  751|  6.00M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  6.00M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  6.00M|        else if constexpr (std::is_object_v<T>) {
  688|  6.00M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  6.00M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  3.31M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  3.31M|        {
  662|  3.31M|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6036|  1.30M|    {
 6037|  1.30M|        const bool need_skipped_width =
 6038|  1.30M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 1.30M]
  |  Branch (6038:33): [True: 0, False: 1.30M]
  ------------------
 6039|  1.30M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  1.30M|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 1.30M]
  ------------------
 6043|  1.30M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 1.30M]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|  1.30M|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 1.30M, False: 0]
  |  Branch (6047:56): [True: 1.30M, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  1.30M|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 1.30M]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  2.58M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|  1.30M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.30M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.30M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.30M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 16.9k, False: 1.28M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  16.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  16.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  16.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  16.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  16.9k|    }                                                  \
  |  |  |  | 3671|  1.30M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.28M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  2.58M|                            make_eof_scan_error));
 6058|       |
 6059|  2.58M|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 1.28M]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|  1.28M|            return result_type{it, 0};
 6067|  2.58M|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|  1.30M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|  3.47M|{
 1976|  3.47M|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  3.47M|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|  3.47M|{
 1957|       |    if constexpr (ranges::common_range<Range>) {
 1958|       |        return std::find_if(range.begin(), range.end(), pred);
 1959|       |    }
 1960|  3.47M|    else {
 1961|  3.47M|        auto first = range.begin();
 1962|  19.1M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 19.0M, False: 31.0k]
  ------------------
 1963|  19.0M|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 3.44M, False: 15.6M]
  ------------------
 1964|  3.44M|                return first;
 1965|  3.44M|            }
 1966|  19.0M|        }
 1967|  31.0k|        return first;
 1968|  3.47M|    }
 1969|  3.47M|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  3.09M|    {
  108|  3.09M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  3.09M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  3.09M|    {
   94|  3.09M|        iter_difference_t<I> counter{0};
   95|  31.0M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 27.9M, False: 3.09M]
  ------------------
   96|  27.9M|            ++i;
   97|  27.9M|            ++counter;
   98|  27.9M|        }
   99|  3.09M|        return counter;
  100|  3.09M|    }
_ZZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|  5.30M|    return [code, msg](parse_error err) {
  869|  5.30M|        return make_scan_error_from_parse_error(err, code, msg);
  870|  5.30M|    };
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1779|   661k|    {
 1780|   661k|        auto stdloc = loc.get<std::locale>();
 1781|   661k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|   661k|        grouping = numpunct.grouping();
 1783|   661k|        thousands_sep =
 1784|   661k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 661k]
  ------------------
 1785|   661k|        decimal_point = numpunct.decimal_point();
 1786|   661k|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1716|   661k|{
 1717|   661k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 661k, False: 0]
  ------------------
 1718|   661k|        return std::use_facet<Facet>(stdloc);
 1719|   661k|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|   661k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1845|  5.07M|{
 1846|  5.07M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 23.0k, False: 5.05M]
  |  |  ------------------
  ------------------
 1847|  23.0k|        return unexpected(e);
 1848|  23.0k|    }
 1849|       |
 1850|  5.05M|    return ranges::next(range.begin());
 1851|  5.07M|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  7.36M|{
  950|  7.36M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  7.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 45.4k, False: 7.31M]
  |  |  ------------------
  ------------------
  951|  45.4k|        return eof_error::eof;
  952|  45.4k|    }
  953|  7.31M|    return eof_error::good;
  954|  7.36M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  10.4M|{
  944|  10.4M|    return is_range_eof(r.begin(), r.end());
  945|  10.4M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  10.4M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  10.4M|    {
  937|  10.4M|        return begin == end;
  938|  10.4M|    }
  939|  10.4M|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|  5.05M|    {
  296|  5.05M|        ++x;
  297|  5.05M|        return x;
  298|  5.05M|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3140|  1.94M|{
 3141|  1.94M|    auto r = read_one_of_code_unit(range, "+-");
 3142|  1.94M|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 1.50M, False: 440k]
  ------------------
 3143|  1.50M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 1.50M, False: 309]
  ------------------
 3144|  1.50M|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  1.50M|        }
 3146|    309|        return unexpected(eof_error::eof);
 3147|  1.50M|    }
 3148|       |
 3149|   440k|    auto& it = *r;
 3150|   440k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 178k, False: 261k]
  ------------------
 3151|   178k|        return std::pair{it, sign_type::minus_sign};
 3152|   178k|    }
 3153|   261k|    return std::pair{it, sign_type::plus_sign};
 3154|   440k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2271|  3.38M|{
 2272|  3.38M|    auto it = read_code_unit(range);
 2273|  3.38M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  3.38M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.6k, False: 3.37M]
  |  |  ------------------
  ------------------
 2274|  13.6k|        return unexpected(make_eof_parse_error(it.error()));
 2275|  13.6k|    }
 2276|       |
 2277|  6.38M|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 6.38M, False: 2.76M]
  ------------------
 2278|  6.38M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 605k, False: 5.77M]
  ------------------
 2279|   605k|            return *it;
 2280|   605k|        }
 2281|  6.38M|    }
 2282|       |
 2283|  2.76M|    return unexpected(parse_error::error);
 2284|  3.37M|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2230|  4.73M|{
 2231|  4.73M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|       |    if constexpr (ranges::contiguous_range<Range> &&
 2234|       |                  std::is_same_v<char_type, char>) {
 2235|       |        if (range.size() < str.size()) {
 2236|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|       |        }
 2238|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|       |            return unexpected(parse_error::error);
 2240|       |        }
 2241|       |        return ranges::next(range.begin(), str.size());
 2242|       |    }
 2243|  4.73M|    else {
 2244|  4.73M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  4.73M|            if (ch < 'A' || ch > 'Z') {
 2246|  4.73M|                return ch;
 2247|  4.73M|            }
 2248|  4.73M|            return static_cast<char_type>(ch +
 2249|  4.73M|                                          static_cast<char_type>('a' - 'A'));
 2250|  4.73M|        };
 2251|       |
 2252|  4.73M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  4.73M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  4.73M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  4.73M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.73M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 39.4k, False: 4.70M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  39.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  39.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  39.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  39.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  39.4k|    }                                                  \
  |  |  |  | 3671|  4.73M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.70M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  4.70M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  4.70M|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  4.70M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  4.70M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.55M, False: 145k]
  |  |  ------------------
  ------------------
 2257|  4.70M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  4.70M|                    return ascii_tolower(a) ==
 2259|  4.70M|                           static_cast<detail::char_t<Range>>(b);
 2260|  4.70M|                }))) {
 2261|  4.55M|            return unexpected(parse_error::error);
 2262|  4.55M|        }
 2263|       |
 2264|   145k|        return it;
 2265|  4.70M|    }
 2266|  4.73M|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlcE_clEc:
 2244|  5.41M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  5.41M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 4.92M, False: 486k]
  |  Branch (2245:29): [True: 403k, False: 82.4k]
  ------------------
 2246|  5.33M|                return ch;
 2247|  5.33M|            }
 2248|  82.4k|            return static_cast<char_type>(ch +
 2249|  82.4k|                                          static_cast<char_type>('a' - 'A'));
 2250|  5.41M|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2145|  1.68M|{
 2146|  1.68M|    auto it = read_code_unit(range);
 2147|  1.68M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.68M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.45k, False: 1.67M]
  |  |  ------------------
  ------------------
 2148|  9.45k|        return unexpected(make_eof_parse_error(it.error()));
 2149|  9.45k|    }
 2150|       |
 2151|  1.67M|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  1.67M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.36M, False: 312k]
  |  |  ------------------
  ------------------
 2152|  1.67M|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  1.36M|        return unexpected(parse_error::error);
 2154|  1.36M|    }
 2155|       |
 2156|   312k|    return *it;
 2157|  1.67M|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1995|  3.46M|{
 1996|  3.46M|    auto it = read_while_code_unit(range, pred);
 1997|  3.46M|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 1.41M, False: 2.05M]
  ------------------
 1998|  1.41M|        return unexpected(parse_error::error);
 1999|  1.41M|    }
 2000|  2.05M|    return it;
 2001|  3.46M|}
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1620|  1.60M|    {
 1621|  1.60M|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|       |        if constexpr (ranges::borrowed_range<Range> &&
 1624|       |                      ranges::contiguous_range<Range> &&
 1625|       |                      ranges::sized_range<Range>) {
 1626|       |            m_storage.reset();
 1627|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1628|       |        }
 1629|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|       |                                          std::basic_string<CharT>>) {
 1631|       |            m_storage.emplace(SCN_FWD(range));
 1632|       |            m_view = string_view_type{*m_storage};
 1633|       |        }
 1634|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|       |                                          typename detail::basic_scan_buffer<
 1636|       |                                              value_t>::forward_iterator> &&
 1637|  1.60M|                           ranges::common_range<Range>) {
 1638|  1.60M|            auto beg_seg = range.begin().contiguous_segment();
 1639|  1.60M|            auto end_seg = range.end().contiguous_segment();
 1640|  1.60M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|  1.60M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 216k, False: 1.38M]
  |  |  ------------------
  ------------------
 1641|  1.60M|                             detail::to_address(end_seg.end()))) {
 1642|   216k|                auto& str = m_storage.emplace();
 1643|   216k|                str.reserve(range.end().position() - range.begin().position());
 1644|   216k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|   216k|                m_view = string_view_type{str};
 1646|   216k|                return;
 1647|   216k|            }
 1648|       |
 1649|  1.38M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  1.38M|                                                            end_seg.data());
 1651|  1.38M|            m_storage.reset();
 1652|       |        }
 1653|       |        else {
 1654|       |            auto& str = m_storage.emplace();
 1655|       |            if constexpr (ranges::sized_range<Range>) {
 1656|       |                str.reserve(range.size());
 1657|       |            }
 1658|       |            if constexpr (ranges::common_range<Range>) {
 1659|       |                std::copy(ranges::begin(range), ranges::end(range),
 1660|       |                          std::back_inserter(str));
 1661|       |            }
 1662|       |            else {
 1663|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|       |                     ++it) {
 1665|       |                    str.push_back(*it);
 1666|       |                }
 1667|       |            }
 1668|       |            m_view = string_view_type{str};
 1669|       |        }
 1670|  1.60M|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1581|  10.8M|    {
 1582|  10.8M|        return m_view;
 1583|  10.8M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1571|  6.60M|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6078|  1.19M|    {
 6079|  1.19M|        const bool need_skipped_width =
 6080|  1.19M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 1.19M]
  |  Branch (6080:33): [True: 0, False: 1.19M]
  ------------------
 6081|  1.19M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  1.19M|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 1.19M]
  ------------------
 6084|  1.19M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 1.19M]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|  1.19M|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 1.19M, False: 0]
  ------------------
 6093|  1.19M|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 0, False: 1.19M]
  ------------------
 6094|  1.19M|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 0]
  ------------------
 6096|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|  1.19M|        return result_type{rng.begin(), 0};
 6118|  1.19M|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|  2.28M|{
 1846|  2.28M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.28M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.46k, False: 2.28M]
  |  |  ------------------
  ------------------
 1847|  5.46k|        return unexpected(e);
 1848|  5.46k|    }
 1849|       |
 1850|  2.28M|    return ranges::next(range.begin());
 1851|  2.28M|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|  4.28M|{
  950|  4.28M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  4.28M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 23.4k, False: 4.26M]
  |  |  ------------------
  ------------------
  951|  23.4k|        return eof_error::eof;
  952|  23.4k|    }
  953|  4.26M|    return eof_error::good;
  954|  4.28M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|  4.28M|{
  944|  4.28M|    return is_range_eof(r.begin(), r.end());
  945|  4.28M|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|  4.28M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  4.28M|    {
  937|  4.28M|        return begin == end;
  938|  4.28M|    }
  939|  4.28M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  2.28M|    {
  296|  2.28M|        ++x;
  297|  2.28M|        return x;
  298|  2.28M|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|  1.56M|{
 3141|  1.56M|    auto r = read_one_of_code_unit(range, "+-");
 3142|  1.56M|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 1.21M, False: 352k]
  ------------------
 3143|  1.21M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 1.21M, False: 102]
  ------------------
 3144|  1.21M|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  1.21M|        }
 3146|    102|        return unexpected(eof_error::eof);
 3147|  1.21M|    }
 3148|       |
 3149|   352k|    auto& it = *r;
 3150|   352k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 154k, False: 198k]
  ------------------
 3151|   154k|        return std::pair{it, sign_type::minus_sign};
 3152|   154k|    }
 3153|   198k|    return std::pair{it, sign_type::plus_sign};
 3154|   352k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|  1.81M|{
 2272|  1.81M|    auto it = read_code_unit(range);
 2273|  1.81M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.81M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.40k, False: 1.81M]
  |  |  ------------------
  ------------------
 2274|  2.40k|        return unexpected(make_eof_parse_error(it.error()));
 2275|  2.40k|    }
 2276|       |
 2277|  3.40M|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 3.40M, False: 1.42M]
  ------------------
 2278|  3.40M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 389k, False: 3.01M]
  ------------------
 2279|   389k|            return *it;
 2280|   389k|        }
 2281|  3.40M|    }
 2282|       |
 2283|  1.42M|    return unexpected(parse_error::error);
 2284|  1.81M|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  4.06M|{
 2231|  4.06M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|       |    if constexpr (ranges::contiguous_range<Range> &&
 2234|  4.06M|                  std::is_same_v<char_type, char>) {
 2235|  4.06M|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2235:13): [True: 38.2k, False: 4.03M]
  ------------------
 2236|  38.2k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  38.2k|        }
 2238|  4.03M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2238:13): [True: 3.89M, False: 138k]
  ------------------
 2239|  3.89M|            return unexpected(parse_error::error);
 2240|  3.89M|        }
 2241|   138k|        return ranges::next(range.begin(), str.size());
 2242|       |    }
 2243|       |    else {
 2244|       |        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|       |            if (ch < 'A' || ch > 'Z') {
 2246|       |                return ch;
 2247|       |            }
 2248|       |            return static_cast<char_type>(ch +
 2249|       |                                          static_cast<char_type>('a' - 'A'));
 2250|       |        };
 2251|       |
 2252|       |        SCN_TRY(it, read_exactly_n_code_units(
 2253|       |                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|       |                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|       |        if (SCN_UNLIKELY(!std::equal(
 2257|       |                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|       |                    return ascii_tolower(a) ==
 2259|       |                           static_cast<detail::char_t<Range>>(b);
 2260|       |                }))) {
 2261|       |            return unexpected(parse_error::error);
 2262|       |        }
 2263|       |
 2264|       |        return it;
 2265|       |    }
 2266|  4.06M|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|   470k|{
 2146|   470k|    auto it = read_code_unit(range);
 2147|   470k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   470k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.05k, False: 467k]
  |  |  ------------------
  ------------------
 2148|  3.05k|        return unexpected(make_eof_parse_error(it.error()));
 2149|  3.05k|    }
 2150|       |
 2151|   467k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   467k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 386k, False: 81.4k]
  |  |  ------------------
  ------------------
 2152|   467k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|   386k|        return unexpected(parse_error::error);
 2154|   386k|    }
 2155|       |
 2156|  81.4k|    return *it;
 2157|   467k|}
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1502|  5.90M|    {
 1503|  5.90M|        return sv;
 1504|  5.90M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|   879k|{
 1976|   879k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|   879k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|   879k|{
 1957|   879k|    if constexpr (ranges::common_range<Range>) {
 1958|   879k|        return std::find_if(range.begin(), range.end(), pred);
 1959|       |    }
 1960|       |    else {
 1961|       |        auto first = range.begin();
 1962|       |        for (; first != range.end(); ++first) {
 1963|       |            if (pred(*first)) {
 1964|       |                return first;
 1965|       |            }
 1966|       |        }
 1967|       |        return first;
 1968|       |    }
 1969|   879k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|  1.54M|{
 2951|  1.54M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 1.54M, False: 0]
  ------------------
 2952|  1.54M|        auto it = read_while_classic_space(range);
 2953|  1.54M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  1.54M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.4k, False: 1.52M]
  |  |  ------------------
  ------------------
 2955|  13.4k|            return unexpected(e);
 2956|  13.4k|        }
 2957|       |
 2958|  1.52M|        return it;
 2959|  1.54M|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  1.54M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|  1.54M|{
 2117|       |    if constexpr (ranges::contiguous_range<Range> &&
 2118|       |                  ranges::sized_range<Range> &&
 2119|  1.54M|                  std::is_same_v<detail::char_t<Range>, char>) {
 2120|  1.54M|        auto buf = make_contiguous_buffer(range);
 2121|  1.54M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  1.54M|        return ranges::next(range.begin(),
 2123|  1.54M|                            ranges::distance(buf.view().begin(), it));
 2124|       |    }
 2125|       |    else {
 2126|       |        auto it = range.begin();
 2127|       |
 2128|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|       |            auto seg = get_contiguous_beginning(range);
 2130|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|       |                seg_it != seg.end()) {
 2132|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|       |            }
 2134|       |            ranges::advance(it, seg.size());
 2135|       |        }
 2136|       |
 2137|       |        return read_while_code_point(
 2138|       |            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|       |    }
 2140|  1.54M|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|  1.54M|{
 1683|       |    if constexpr (ranges::borrowed_range<Range> &&
 1684|       |                  ranges::contiguous_range<Range> &&
 1685|  1.54M|                  ranges::sized_range<Range>) {
 1686|  1.54M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  1.54M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|       |    }
 1688|       |    else {
 1689|       |        return contiguous_range_factory{SCN_FWD(range)};
 1690|       |    }
 1691|  1.54M|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1488|  1.54M|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1489|  1.54M|    {
 1490|  1.54M|    }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  4.79M|    {
  304|  4.79M|        ranges::advance(x, n);
  305|  4.79M|        return x;
  306|  4.79M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  6.39M|    {
  268|  6.39M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  6.39M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  6.39M|    {
  181|  30.4M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 24.0M, False: 6.39M]
  ------------------
  182|  24.0M|            ++i;
  183|  24.0M|        }
  184|  6.39M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6192|   419k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|       |                          basic_contiguous_scan_context<char_type>>) {
 6197|       |            auto rd = make_reader<T, char_type>();
 6198|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|       |                return unexpected(e);
 6200|       |            }
 6201|       |
 6202|       |            return impl(rd, range, value);
 6203|       |        }
 6204|   419k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   419k|            auto rd = make_reader<T, char_type>();
 6206|   419k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   419k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 419k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   419k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 419k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   419k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   419k|                return impl(rd, range, value);
 6213|   419k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|   419k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  2.39M|    {
 3040|  2.39M|        reader_error_handler eh{};
 3041|  2.39M|        get_derived().check_specs_impl(specs, eh);
 3042|  2.39M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  2.39M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.39M]
  |  |  ------------------
  ------------------
 3043|      0|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|      0|        }
 3045|  2.39M|        return {};
 3046|  2.39M|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3050|  2.39M|    {
 3051|  2.39M|        return static_cast<Derived&>(*this);
 3052|  2.39M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4144|  2.39M|    {
 4145|  2.39M|        detail::check_float_type_specs(specs, eh);
 4146|  2.39M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   419k|    {
 6124|   419k|        const bool need_skipped_width =
 6125|   419k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 419k]
  |  Branch (6125:33): [True: 0, False: 419k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   419k|        auto it = rng.begin();
 6129|   419k|        std::ptrdiff_t prefix_width = 0;
 6130|   419k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 419k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   419k|        else {
 6138|   419k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   419k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   419k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   419k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   419k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.10k, False: 414k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  5.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  5.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  5.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  5.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  5.10k|    }                                                  \
  |  |  |  | 3671|   419k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   414k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   414k|            std::tie(it, prefix_width) = prefix_result;
 6140|   414k|        }
 6141|   414k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   414k|        std::ptrdiff_t value_width = 0;
 6145|   414k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 414k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   414k|        else {
 6161|   414k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   414k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   414k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   414k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 26.9k, False: 387k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  26.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  26.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  26.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  26.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  26.9k|    }                                                  \
  |  | 3671|   414k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   414k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   387k|                                             specs, value, loc));
 6163|       |
 6164|   387k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 387k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   387k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   387k|        std::ptrdiff_t postfix_width = 0;
 6173|   387k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 383k, False: 4.14k]
  ------------------
 6174|   383k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   383k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   383k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   383k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   383k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 383k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   383k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   383k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   383k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   383k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   383k|                                 value_width));
 6178|   383k|            std::tie(it, postfix_width) = postfix_result;
 6179|   383k|        }
 6180|       |
 6181|   387k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   387k|                                                 value_width, postfix_width);
 6183|   387k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 387k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   387k|        return it;
 6188|   387k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3034|  5.52M|    {
 3035|  5.52M|        return true;
 3036|  5.52M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4216|  2.36M|    {
 4217|  2.36M|        unsigned options{};
 4218|  2.36M|        if (specs.localized) {
  ------------------
  |  Branch (4218:13): [True: 661k, False: 1.70M]
  ------------------
 4219|   661k|            options |= float_reader_base::allow_thsep;
 4220|   661k|        }
 4221|       |
 4222|  2.36M|        SCN_GCC_COMPAT_PUSH
 4223|  2.36M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4224|       |
 4225|  2.36M|        switch (specs.type) {
 4226|   359k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4226:13): [True: 359k, False: 2.00M]
  ------------------
 4227|   359k|                return options | float_reader_base::allow_fixed;
 4228|       |
 4229|  56.0k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4229:13): [True: 56.0k, False: 2.30M]
  ------------------
 4230|  56.0k|                return options | float_reader_base::allow_scientific;
 4231|       |
 4232|   719k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4232:13): [True: 719k, False: 1.64M]
  ------------------
 4233|   719k|                return options | float_reader_base::allow_hex;
 4234|       |
 4235|   568k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4235:13): [True: 568k, False: 1.79M]
  ------------------
 4236|   568k|                return options | float_reader_base::allow_scientific |
 4237|   568k|                       float_reader_base::allow_fixed;
 4238|       |
 4239|   661k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4239:13): [True: 661k, False: 1.70M]
  ------------------
 4240|   661k|                return options | float_reader_base::allow_scientific |
 4241|   661k|                       float_reader_base::allow_fixed |
 4242|   661k|                       float_reader_base::allow_hex;
 4243|       |
 4244|      0|            default:
  ------------------
  |  Branch (4244:13): [True: 0, False: 2.36M]
  ------------------
 4245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4246|  2.36M|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4247|  2.36M|        }
 4248|       |
 4249|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4250|  2.36M|    }
_ZN3scn2v34impl12float_readerIcEC2Ej:
 3659|  2.36M|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2Ev:
 1770|  3.30M|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIcEC2Ev:
 1531|  6.60M|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIcE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3690|  1.02M|    {
 3691|  1.02M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.02M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.02M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|  1.02M|        const std::ptrdiff_t sign_len =
 3694|  1.02M|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 234k, False: 786k]
  ------------------
 3695|       |
 3696|  1.02M|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|  1.02M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.02M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.02M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 23.2k, False: 997k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  23.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  23.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  23.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  23.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  23.2k|    }                                                  \
  |  |  |  | 3671|  1.02M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   997k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|   997k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|  1.02M|    }
_ZN3scn2v34impl12float_readerIcE17handle_separatorsEv:
 4056|  3.15M|    {
 4057|  3.15M|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4057:13): [True: 3.15M, False: 0]
  ------------------
 4058|  3.15M|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4058:13): [True: 3.15M, False: 0]
  ------------------
 4059|  3.15M|            return;
 4060|  3.15M|        }
 4061|       |
 4062|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4063|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4063:13): [True: 0, False: 0]
  ------------------
 4064|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4064:27): [True: 0, False: 0]
  ------------------
 4065|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4065:21): [True: 0, False: 0]
  ------------------
 4066|      0|                    ch = CharT{'.'};
 4067|      0|                }
 4068|      0|            }
 4069|      0|        }
 4070|       |
 4071|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4071:13): [True: 0, False: 0]
  ------------------
 4072|      0|            return;
 4073|      0|        }
 4074|       |
 4075|      0|        auto first =
 4076|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4077|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4077:13): [True: 0, False: 0]
  ------------------
 4078|      0|            return;
 4079|      0|        }
 4080|       |
 4081|      0|        m_thsep_indices.push_back(
 4082|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4083|       |
 4084|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4084:31): [True: 0, False: 0]
  ------------------
 4085|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4085:17): [True: 0, False: 0]
  ------------------
 4086|      0|                *first++ = std::move(*it);
 4087|      0|            }
 4088|      0|            else {
 4089|      0|                m_thsep_indices.push_back(
 4090|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4091|      0|            }
 4092|      0|        }
 4093|       |
 4094|      0|        str.erase(first, str.end());
 4095|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1586|  3.60M|    {
 1587|  3.60M|        return m_storage.has_value();
 1588|  3.60M|    }
_ZNR3scn2v34impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1591|  2.11M|    {
 1592|  2.11M|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|  2.11M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.11M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|  2.11M|        return *m_storage;
 1594|  2.11M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   414k|    {
 4170|   414k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   414k|#if !SCN_DISABLE_LOCALE
 4173|   414k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 115k, False: 299k]
  ------------------
 4174|   115k|            return read_impl<Range>(
 4175|   115k|                range, rd,
 4176|   115k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   115k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|   115k|                },
 4179|   115k|                value, loc);
 4180|   115k|        }
 4181|   299k|#endif
 4182|       |
 4183|   299k|        return read_impl<Range>(
 4184|   299k|            range, rd,
 4185|   299k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   299k|                return r.read_source(SCN_FWD(args)...);
 4187|   299k|            },
 4188|   299k|            value);
 4189|   414k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   572k|    {
 4206|   572k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   572k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   572k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 30.7k, False: 541k]
  |  |  ------------------
  ------------------
 4208|  30.7k|            return unexpected(r.error());
 4209|  30.7k|        }
 4210|       |
 4211|   541k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   541k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   541k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   541k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   541k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.17k, False: 537k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.17k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.17k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.17k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.17k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.17k|    }                                                  \
  |  |  |  | 3671|   541k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   537k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   537k|        return ranges::next(range.begin(), n);
 4213|   541k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|  1.77M|    {
  763|  1.77M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  1.77M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.77M|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   115k|        : m_fptr([](storage fn,
  743|   115k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   115k|              cvref<T> obj = *get<T>(fn);
  745|   115k|              if constexpr (std::is_void_v<R>) {
  746|   115k|                  obj(static_cast<decltype(args)>(args)...);
  747|   115k|              }
  748|   115k|              else {
  749|   115k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   115k|              }
  751|   115k|          }),
  752|   115k|          m_storage(std::addressof(f))
  753|   115k|    {
  754|   115k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   115k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   115k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   115k|              else {
  749|   115k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   115k|              }
  751|   115k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   115k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   115k|        else if constexpr (std::is_object_v<T>) {
  688|   115k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   115k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|   115k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   115k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   115k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|   115k|                },
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3678|   362k|    {
 3679|   362k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|   362k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|   362k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 362k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|   362k|        return read_source_impl(range);
 3685|   362k|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3704|  1.77M|    {
 3705|  1.77M|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|  1.77M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.77M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.77M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.77M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.77M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.77M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.77M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|  1.77M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|  1.77M|        auto it = sign_result.first;
 3708|  1.77M|        m_sign = sign_result.second;
 3709|       |
 3710|  1.77M|        auto digits_begin = it;
 3711|  1.77M|        auto r = ranges::subrange{it, range.end()};
 3712|       |        if constexpr (ranges::contiguous_range<Range> &&
 3713|       |                      ranges::sized_range<Range>) {
 3714|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3715|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|       |                SCN_TRY_ASSIGN(
 3717|       |                    it,
 3718|       |                    do_read_source_impl(
 3719|       |                        r,
 3720|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|       |            }
 3723|       |            else {
 3724|       |                auto cb = [&](const auto& rr)
 3725|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|       |                    auto res = read_all(rr);
 3727|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|       |                        return unexpected_scan_error(
 3729|       |                            scan_error::invalid_scanned_value,
 3730|       |                            "Invalid float value");
 3731|       |                    }
 3732|       |                    return res;
 3733|       |                };
 3734|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3735|       |            }
 3736|       |        }
 3737|  1.77M|        else {
 3738|  1.77M|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|  1.77M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  1.77M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  1.77M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 95.7k, False: 1.67M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  95.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  95.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  95.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  95.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  95.7k|    }                                                  \
  |  | 3671|  1.77M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  1.77M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3739|  1.67M|                it,
 3740|  1.67M|                do_read_source_impl(
 3741|  1.67M|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|  1.67M|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|  1.67M|        }
 3744|       |
 3745|  1.77M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.77M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.77M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|  1.67M|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 1.67M, False: 9.38k]
  |  Branch (3747:48): [True: 1.66M, False: 9.47k]
  ------------------
 3748|  1.67M|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 1.60M, False: 60.9k]
  ------------------
 3749|  1.67M|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 1.59M, False: 3.47k]
  ------------------
 3750|  1.59M|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|  1.59M|        }
 3752|       |
 3753|  1.67M|        handle_separators();
 3754|       |
 3755|  1.67M|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 1.67M]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|  1.67M|        return it;
 3768|  1.67M|    }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 3999|  1.77M|    {
 4000|  1.77M|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|  1.77M|        const bool allowed_nonhex =
 4002|  1.77M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|  1.77M|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|  1.77M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 1.75M, False: 18.8k]
  |  Branch (4005:45): [True: 0, False: 1.75M]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|  1.77M|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 18.8k, False: 1.75M]
  ------------------
 4011|  18.8k|            return *r;
 4012|  18.8k|        }
 4013|       |
 4014|  1.75M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 1.69M, False: 64.3k]
  |  Branch (4014:45): [True: 1.80k, False: 1.69M]
  ------------------
 4015|  1.80k|            return unexpected(r.error());
 4016|  1.80k|        }
 4017|  1.75M|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 64.3k, False: 1.69M]
  ------------------
 4018|  64.3k|            return *r;
 4019|  64.3k|        }
 4020|       |
 4021|  1.69M|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 1.18M, False: 502k]
  |  Branch (4021:28): [True: 377k, False: 811k]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|   377k|            auto it = range.begin();
 4025|       |
 4026|   377k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 15.8k, False: 361k]
  ------------------
 4027|  15.8k|                m_kind = float_kind::hex_with_prefix;
 4028|  15.8k|                it = *r;
 4029|  15.8k|            }
 4030|   361k|            else {
 4031|   361k|                m_kind = float_kind::hex_without_prefix;
 4032|   361k|            }
 4033|       |
 4034|   377k|            return read_hex(ranges::subrange{it, range.end()});
 4035|   377k|        }
 4036|  1.31M|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 502k, False: 811k]
  |  Branch (4036:29): [True: 502k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   502k|            m_kind = float_kind::generic;
 4040|   502k|            return read_regular_float(range);
 4041|   502k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|   811k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   811k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34.9k, False: 776k]
  |  |  ------------------
  ------------------
 4047|  34.9k|            m_kind = float_kind::hex_with_prefix;
 4048|  34.9k|            return read_hex(ranges::subrange{*r, range.end()});
 4049|  34.9k|        }
 4050|       |
 4051|   776k|        m_kind = float_kind::generic;
 4052|   776k|        return read_regular(range);
 4053|   811k|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3810|  1.77M|    {
 3811|  1.77M|        auto it = range.begin();
 3812|  1.77M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 1.75M, False: 18.8k]
  ------------------
 3813|  1.75M|            return unexpected(r.error());
 3814|  1.75M|        }
 3815|  18.8k|        else {
 3816|  18.8k|            it = *r;
 3817|  18.8k|        }
 3818|       |
 3819|  18.8k|        if (auto r = read_matching_string_classic_nocase(
 3820|  18.8k|                ranges::subrange{it, range.end()}, "inity");
 3821|  18.8k|            !r) {
  ------------------
  |  Branch (3821:13): [True: 9.38k, False: 9.47k]
  ------------------
 3822|  9.38k|            m_kind = float_kind::inf_short;
 3823|  9.38k|            return it;
 3824|  9.38k|        }
 3825|  9.47k|        else {
 3826|  9.47k|            m_kind = float_kind::inf_long;
 3827|  9.47k|            return *r;
 3828|  9.47k|        }
 3829|  18.8k|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3833|  1.75M|    {
 3834|  1.75M|        auto it = range.begin();
 3835|  1.75M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 1.69M, False: 66.1k]
  ------------------
 3836|  1.69M|            return r.transform_error(map_parse_error_to_scan_error(
 3837|  1.69M|                scan_error::invalid_scanned_value,
 3838|  1.69M|                "Invalid floating-point NaN value"));
 3839|  1.69M|        }
 3840|  66.1k|        else {
 3841|  66.1k|            it = *r;
 3842|  66.1k|        }
 3843|       |
 3844|  66.1k|        if (auto r =
 3845|  66.1k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|  66.1k|            !r) {
  ------------------
  |  Branch (3846:13): [True: 60.9k, False: 5.27k]
  ------------------
 3847|  60.9k|            m_kind = float_kind::nan_simple;
 3848|  60.9k|            return it;
 3849|  60.9k|        }
 3850|  5.27k|        else {
 3851|  5.27k|            it = *r;
 3852|  5.27k|        }
 3853|       |
 3854|  5.27k|        auto payload_beg_it = it;
 3855|  5.27k|        it = read_while_code_unit(
 3856|  5.27k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  5.27k|                return is_ascii_char(ch) &&
 3858|  5.27k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|  5.27k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|  5.27k|            });
 3861|  5.27k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|  5.27k|        m_kind = float_kind::nan_with_payload;
 3864|  5.27k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 3.47k, False: 1.80k]
  ------------------
 3865|  5.27k|                                             ')')) {
 3866|  3.47k|            return *r;
 3867|  3.47k|        }
 3868|  1.80k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|  1.80k|                                     "Invalid floating-point NaN payload");
 3870|  5.27k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|  5.27k|        : m_fptr([](storage fn,
  743|  5.27k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.27k|              cvref<T> obj = *get<T>(fn);
  745|  5.27k|              if constexpr (std::is_void_v<R>) {
  746|  5.27k|                  obj(static_cast<decltype(args)>(args)...);
  747|  5.27k|              }
  748|  5.27k|              else {
  749|  5.27k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.27k|              }
  751|  5.27k|          }),
  752|  5.27k|          m_storage(std::addressof(f))
  753|  5.27k|    {
  754|  5.27k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|   117k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   117k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   117k|              else {
  749|   117k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   117k|              }
  751|   117k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_EUlcE_EEDaNS3_7storageE:
  683|   117k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   117k|        else if constexpr (std::is_object_v<T>) {
  688|   117k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   117k|    }
_ZZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlcE_clEc:
 3856|   117k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|   117k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3857:24): [True: 117k, False: 122]
  ------------------
 3858|   117k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3858:26): [True: 113k, False: 4.06k]
  |  Branch (3858:39): [True: 103k, False: 9.74k]
  |  Branch (3858:54): [True: 2.93k, False: 10.8k]
  |  Branch (3858:67): [True: 2.84k, False: 83]
  ------------------
 3859|   117k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3859:26): [True: 6.90k, False: 4.06k]
  |  Branch (3859:39): [True: 2.55k, False: 4.34k]
  |  Branch (3859:53): [True: 4.26k, False: 4.14k]
  ------------------
 3860|   117k|            });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  5.27k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  5.27k|        {
  662|  5.27k|        }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3803|  1.18M|    {
 3804|  1.18M|        return read_matching_string_classic_nocase(range, "0x");
 3805|  1.18M|    }
_ZN3scn2v34impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3903|   412k|    {
 3904|   412k|        auto it = range.begin();
 3905|       |
 3906|   412k|        std::ptrdiff_t digits_count = 0;
 3907|   412k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3908|   412k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   412k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.1k, False: 399k]
  |  |  ------------------
  ------------------
 3909|  12.1k|            return r.transform_error(map_parse_error_to_scan_error(
 3910|  12.1k|                scan_error::invalid_scanned_value,
 3911|  12.1k|                "Invalid hexadecimal floating-point value"));
 3912|  12.1k|        }
 3913|   399k|        else {
 3914|   399k|            digits_count += ranges::distance(it, *r);
 3915|   399k|            it = *r;
 3916|   399k|        }
 3917|       |
 3918|   399k|        m_integral_part_length = digits_count;
 3919|   399k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3919:18): [True: 64.6k, False: 335k]
  ------------------
 3920|   399k|                                             m_locale_options.decimal_point)) {
 3921|  64.6k|            it = *r;
 3922|  64.6k|        }
 3923|       |
 3924|   399k|        if (auto r =
  ------------------
  |  Branch (3924:18): [True: 59.2k, False: 340k]
  ------------------
 3925|   399k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3926|  59.2k|            digits_count += ranges::distance(it, *r);
 3927|  59.2k|            it = *r;
 3928|  59.2k|        }
 3929|       |
 3930|   399k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   399k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 399k]
  |  |  ------------------
  ------------------
 3931|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3932|      0|                                         "No significand digits in hexfloat");
 3933|      0|        }
 3934|       |
 3935|   399k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3936|       |
 3937|   399k|        return it;
 3938|   399k|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3788|   812k|    {
 3789|   812k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   812k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 812k]
  |  |  |  Branch (859:45): [True: 0, False: 812k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3790|   812k|                         thsep_allowed)) {
 3791|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3792|      0|                return char_to_int(ch) < 16 ||
 3793|      0|                       ch == m_locale_options.thousands_sep;
 3794|      0|            });
 3795|      0|        }
 3796|       |
 3797|   812k|        return read_while1_code_unit(
 3798|   812k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3799|   812k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|   812k|        : m_fptr([](storage fn,
  743|   812k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   812k|              cvref<T> obj = *get<T>(fn);
  745|   812k|              if constexpr (std::is_void_v<R>) {
  746|   812k|                  obj(static_cast<decltype(args)>(args)...);
  747|   812k|              }
  748|   812k|              else {
  749|   812k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   812k|              }
  751|   812k|          }),
  752|   812k|          m_storage(std::addressof(f))
  753|   812k|    {
  754|   812k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  4.34M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.34M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  4.34M|              else {
  749|  4.34M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.34M|              }
  751|  4.34M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  4.34M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  4.34M|        else if constexpr (std::is_object_v<T>) {
  688|  4.34M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  4.34M|    }
_ZZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3798|  4.34M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   812k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   812k|        {
  662|   812k|        }
_ZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3875|  1.44M|    {
 3876|  1.44M|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 165k, False: 1.28M]
  ------------------
 3877|   165k|            auto beg_exp_it = range.begin();
 3878|   165k|            auto it = *r;
 3879|       |
 3880|   165k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 164k, False: 309]
  ------------------
 3881|   165k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|   164k|                it = r_sign->first;
 3883|   164k|            }
 3884|       |
 3885|   165k|            if (auto r_exp = read_while1_code_unit(
 3886|   165k|                    ranges::subrange{it, range.end()},
 3887|   165k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|   165k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|   165k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.39k, False: 162k]
  |  |  ------------------
  ------------------
 3889|  2.39k|                it = beg_exp_it;
 3890|  2.39k|            }
 3891|   162k|            else {
 3892|   162k|                it = *r_exp;
 3893|   162k|            }
 3894|       |
 3895|   165k|            return it;
 3896|   165k|        }
 3897|  1.28M|        return range.begin();
 3898|  1.44M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|   165k|        : m_fptr([](storage fn,
  743|   165k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   165k|              cvref<T> obj = *get<T>(fn);
  745|   165k|              if constexpr (std::is_void_v<R>) {
  746|   165k|                  obj(static_cast<decltype(args)>(args)...);
  747|   165k|              }
  748|   165k|              else {
  749|   165k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   165k|              }
  751|   165k|          }),
  752|   165k|          m_storage(std::addressof(f))
  753|   165k|    {
  754|   165k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES15_c:
  743|   534k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   534k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   534k|              else {
  749|   534k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   534k|              }
  751|   534k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|   534k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   534k|        else if constexpr (std::is_object_v<T>) {
  688|   534k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   534k|    }
_ZZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlcE_clEc:
 3887|   534k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|   165k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   165k|        {
  662|   165k|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3943|  1.27M|    {
 3944|  1.27M|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|  1.27M|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 1.09M, False: 182k]
  |  Branch (3945:50): [True: 27.9k, False: 1.06M]
  ------------------
 3946|       |
 3947|  1.27M|        auto it = ranges::begin(range);
 3948|  1.27M|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|  1.27M|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|  1.27M|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.27M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 65.1k, False: 1.21M]
  |  |  ------------------
  ------------------
 3952|  65.1k|            return r.transform_error(
 3953|  65.1k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|  65.1k|                                              "Invalid floating-point value"));
 3955|  65.1k|        }
 3956|  1.21M|        else {
 3957|  1.21M|            digits_count += ranges::distance(it, *r);
 3958|  1.21M|            it = *r;
 3959|  1.21M|        }
 3960|       |
 3961|  1.21M|        m_integral_part_length = digits_count;
 3962|  1.21M|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 239k, False: 974k]
  ------------------
 3963|  1.21M|                                             m_locale_options.decimal_point)) {
 3964|   239k|            it = *r;
 3965|   239k|        }
 3966|       |
 3967|  1.21M|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 222k, False: 990k]
  ------------------
 3968|  1.21M|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|   222k|            digits_count += ranges::distance(it, *r);
 3970|   222k|            it = *r;
 3971|   222k|        }
 3972|       |
 3973|  1.21M|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|  1.21M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.21M]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|  1.21M|        auto beg_exp_it = it;
 3979|  1.21M|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 1.04M, False: 165k]
  ------------------
 3980|  1.04M|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|  1.04M|        }
 3982|  1.21M|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 26.9k, False: 1.18M]
  |  Branch (3982:29): [True: 16.6k, False: 10.2k]
  ------------------
 3983|  16.6k|            return unexpected_scan_error(
 3984|  16.6k|                scan_error::invalid_scanned_value,
 3985|  16.6k|                "No exponent given to scientific float");
 3986|  16.6k|        }
 3987|       |
 3988|  1.19M|        m_kind =
 3989|  1.19M|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 1.03M, False: 161k]
  ------------------
 3990|       |
 3991|  1.19M|        return it;
 3992|  1.21M|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3773|  2.49M|    {
 3774|  2.49M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|  2.49M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.49M]
  |  |  |  Branch (859:45): [True: 0, False: 2.49M]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|  2.49M|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|  2.49M|        return read_while1_code_unit(
 3783|  2.49M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|  2.49M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|  2.49M|        : m_fptr([](storage fn,
  743|  2.49M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.49M|              cvref<T> obj = *get<T>(fn);
  745|  2.49M|              if constexpr (std::is_void_v<R>) {
  746|  2.49M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.49M|              }
  748|  2.49M|              else {
  749|  2.49M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.49M|              }
  751|  2.49M|          }),
  752|  2.49M|          m_storage(std::addressof(f))
  753|  2.49M|    {
  754|  2.49M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  14.0M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  14.0M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  14.0M|              else {
  749|  14.0M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  14.0M|              }
  751|  14.0M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  14.0M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  14.0M|        else if constexpr (std::is_object_v<T>) {
  688|  14.0M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  14.0M|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3783|  14.0M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  2.49M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.49M|        {
  662|  2.49M|        }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSG_:
 1576|  1.60M|    {
 1577|  1.60M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  1.60M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  1.60M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   115k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   115k|        {
  662|   115k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   299k|        : m_fptr([](storage fn,
  743|   299k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   299k|              cvref<T> obj = *get<T>(fn);
  745|   299k|              if constexpr (std::is_void_v<R>) {
  746|   299k|                  obj(static_cast<decltype(args)>(args)...);
  747|   299k|              }
  748|   299k|              else {
  749|   299k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   299k|              }
  751|   299k|          }),
  752|   299k|          m_storage(std::addressof(f))
  753|   299k|    {
  754|   299k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   299k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   299k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   299k|              else {
  749|   299k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   299k|              }
  751|   299k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   299k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   299k|        else if constexpr (std::is_object_v<T>) {
  688|   299k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   299k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   299k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   299k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   299k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   299k|            },
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3664|  1.41M|    {
 3665|  1.41M|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|  1.41M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.41M]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|  1.41M|        return read_source_impl(range);
 3671|  1.41M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   299k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   299k|        {
  662|   299k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   351k|    {
 4170|   351k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   351k|#if !SCN_DISABLE_LOCALE
 4173|   351k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 96.4k, False: 255k]
  ------------------
 4174|  96.4k|            return read_impl<Range>(
 4175|  96.4k|                range, rd,
 4176|  96.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  96.4k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  96.4k|                },
 4179|  96.4k|                value, loc);
 4180|  96.4k|        }
 4181|   255k|#endif
 4182|       |
 4183|   255k|        return read_impl<Range>(
 4184|   255k|            range, rd,
 4185|   255k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   255k|                return r.read_source(SCN_FWD(args)...);
 4187|   255k|            },
 4188|   255k|            value);
 4189|   351k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   496k|    {
 4206|   496k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   496k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   496k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.1k, False: 479k]
  |  |  ------------------
  ------------------
 4208|  17.1k|            return unexpected(r.error());
 4209|  17.1k|        }
 4210|       |
 4211|   479k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   479k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   479k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   479k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   479k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 19.0k, False: 460k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  19.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  19.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  19.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  19.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  19.0k|    }                                                  \
  |  |  |  | 3671|   479k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   460k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   460k|        return ranges::next(range.begin(), n);
 4213|   479k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|  1.52M|    {
  763|  1.52M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  1.52M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.52M|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  96.4k|        : m_fptr([](storage fn,
  743|  96.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  96.4k|              cvref<T> obj = *get<T>(fn);
  745|  96.4k|              if constexpr (std::is_void_v<R>) {
  746|  96.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  96.4k|              }
  748|  96.4k|              else {
  749|  96.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  96.4k|              }
  751|  96.4k|          }),
  752|  96.4k|          m_storage(std::addressof(f))
  753|  96.4k|    {
  754|  96.4k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  96.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  96.4k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  96.4k|              else {
  749|  96.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  96.4k|              }
  751|  96.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  96.4k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  96.4k|        else if constexpr (std::is_object_v<T>) {
  688|  96.4k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  96.4k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  96.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  96.4k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  96.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  96.4k|                },
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3678|   299k|    {
 3679|   299k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|   299k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|   299k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 299k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|   299k|        return read_source_impl(range);
 3685|   299k|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3704|  1.52M|    {
 3705|  1.52M|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|  1.52M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.52M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.52M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.52M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.52M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.52M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.52M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|  1.52M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|  1.52M|        auto it = sign_result.first;
 3708|  1.52M|        m_sign = sign_result.second;
 3709|       |
 3710|  1.52M|        auto digits_begin = it;
 3711|  1.52M|        auto r = ranges::subrange{it, range.end()};
 3712|       |        if constexpr (ranges::contiguous_range<Range> &&
 3713|  1.52M|                      ranges::sized_range<Range>) {
 3714|  1.52M|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  3.05M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.52M]
  |  |  |  Branch (859:45): [True: 0, False: 1.52M]
  |  |  |  Branch (859:45): [True: 0, False: 1.52M]
  |  |  ------------------
  ------------------
 3715|  1.52M|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|      0|    }                                                  \
  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3717|      0|                    it,
 3718|      0|                    do_read_source_impl(
 3719|      0|                        r,
 3720|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|      0|            }
 3723|  1.52M|            else {
 3724|  1.52M|                auto cb = [&](const auto& rr)
 3725|  1.52M|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|  1.52M|                    auto res = read_all(rr);
 3727|  1.52M|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|  1.52M|                        return unexpected_scan_error(
 3729|  1.52M|                            scan_error::invalid_scanned_value,
 3730|  1.52M|                            "Invalid float value");
 3731|  1.52M|                    }
 3732|  1.52M|                    return res;
 3733|  1.52M|                };
 3734|  1.52M|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3667|  1.52M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  1.52M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  1.52M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 52.5k, False: 1.47M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  52.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  52.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  52.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  52.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  52.5k|    }                                                  \
  |  | 3671|  1.52M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  1.52M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3735|  1.47M|            }
 3736|       |        }
 3737|       |        else {
 3738|       |            SCN_TRY_ASSIGN(
 3739|       |                it,
 3740|       |                do_read_source_impl(
 3741|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|       |        }
 3744|       |
 3745|  1.52M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.52M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.52M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|  1.47M|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 1.46M, False: 9.06k]
  |  Branch (3747:48): [True: 1.45M, False: 8.74k]
  ------------------
 3748|  1.47M|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 1.39M, False: 59.4k]
  ------------------
 3749|  1.47M|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 1.39M, False: 3.05k]
  ------------------
 3750|  1.39M|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|  1.39M|        }
 3752|       |
 3753|  1.47M|        handle_separators();
 3754|       |
 3755|  1.47M|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 1.47M]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|  1.47M|        return it;
 3768|  1.47M|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3810|  1.52M|    {
 3811|  1.52M|        auto it = range.begin();
 3812|  1.52M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 1.51M, False: 17.8k]
  ------------------
 3813|  1.51M|            return unexpected(r.error());
 3814|  1.51M|        }
 3815|  17.8k|        else {
 3816|  17.8k|            it = *r;
 3817|  17.8k|        }
 3818|       |
 3819|  17.8k|        if (auto r = read_matching_string_classic_nocase(
 3820|  17.8k|                ranges::subrange{it, range.end()}, "inity");
 3821|  17.8k|            !r) {
  ------------------
  |  Branch (3821:13): [True: 9.06k, False: 8.74k]
  ------------------
 3822|  9.06k|            m_kind = float_kind::inf_short;
 3823|  9.06k|            return it;
 3824|  9.06k|        }
 3825|  8.74k|        else {
 3826|  8.74k|            m_kind = float_kind::inf_long;
 3827|  8.74k|            return *r;
 3828|  8.74k|        }
 3829|  17.8k|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|  1.51M|    {
 3834|  1.51M|        auto it = range.begin();
 3835|  1.51M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 1.44M, False: 64.0k]
  ------------------
 3836|  1.44M|            return r.transform_error(map_parse_error_to_scan_error(
 3837|  1.44M|                scan_error::invalid_scanned_value,
 3838|  1.44M|                "Invalid floating-point NaN value"));
 3839|  1.44M|        }
 3840|  64.0k|        else {
 3841|  64.0k|            it = *r;
 3842|  64.0k|        }
 3843|       |
 3844|  64.0k|        if (auto r =
 3845|  64.0k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|  64.0k|            !r) {
  ------------------
  |  Branch (3846:13): [True: 59.4k, False: 4.54k]
  ------------------
 3847|  59.4k|            m_kind = float_kind::nan_simple;
 3848|  59.4k|            return it;
 3849|  59.4k|        }
 3850|  4.54k|        else {
 3851|  4.54k|            it = *r;
 3852|  4.54k|        }
 3853|       |
 3854|  4.54k|        auto payload_beg_it = it;
 3855|  4.54k|        it = read_while_code_unit(
 3856|  4.54k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  4.54k|                return is_ascii_char(ch) &&
 3858|  4.54k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|  4.54k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|  4.54k|            });
 3861|  4.54k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|  4.54k|        m_kind = float_kind::nan_with_payload;
 3864|  4.54k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 3.05k, False: 1.49k]
  ------------------
 3865|  4.54k|                                             ')')) {
 3866|  3.05k|            return *r;
 3867|  3.05k|        }
 3868|  1.49k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|  1.49k|                                     "Invalid floating-point NaN payload");
 3870|  4.54k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|  4.54k|        : m_fptr([](storage fn,
  743|  4.54k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.54k|              cvref<T> obj = *get<T>(fn);
  745|  4.54k|              if constexpr (std::is_void_v<R>) {
  746|  4.54k|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.54k|              }
  748|  4.54k|              else {
  749|  4.54k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.54k|              }
  751|  4.54k|          }),
  752|  4.54k|          m_storage(std::addressof(f))
  753|  4.54k|    {
  754|  4.54k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|  93.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  93.7k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  93.7k|              else {
  749|  93.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  93.7k|              }
  751|  93.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_EUlcE_EEDaNS3_7storageE:
  683|  93.7k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  93.7k|        else if constexpr (std::is_object_v<T>) {
  688|  93.7k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  93.7k|    }
_ZZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlcE_clEc:
 3856|  93.7k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  93.7k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3857:24): [True: 93.6k, False: 116]
  ------------------
 3858|  93.7k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3858:26): [True: 90.2k, False: 3.35k]
  |  Branch (3858:39): [True: 80.6k, False: 9.62k]
  |  Branch (3858:54): [True: 2.80k, False: 10.1k]
  |  Branch (3858:67): [True: 2.72k, False: 83]
  ------------------
 3859|  93.6k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3859:26): [True: 6.90k, False: 3.35k]
  |  Branch (3859:39): [True: 2.55k, False: 4.34k]
  |  Branch (3859:53): [True: 4.26k, False: 3.44k]
  ------------------
 3860|  93.7k|            });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  4.54k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  4.54k|        {
  662|  4.54k|        }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3803|  1.01M|    {
 3804|  1.01M|        return read_matching_string_classic_nocase(range, "0x");
 3805|  1.01M|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|   875k|{
 1996|   875k|    auto it = read_while_code_unit(range, pred);
 1997|   875k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 368k, False: 506k]
  ------------------
 1998|   368k|        return unexpected(parse_error::error);
 1999|   368k|    }
 2000|   506k|    return it;
 2001|   875k|}
_ZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3875|   252k|    {
 3876|   252k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 37.0k, False: 215k]
  ------------------
 3877|  37.0k|            auto beg_exp_it = range.begin();
 3878|  37.0k|            auto it = *r;
 3879|       |
 3880|  37.0k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 36.9k, False: 102]
  ------------------
 3881|  37.0k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|  36.9k|                it = r_sign->first;
 3883|  36.9k|            }
 3884|       |
 3885|  37.0k|            if (auto r_exp = read_while1_code_unit(
 3886|  37.0k|                    ranges::subrange{it, range.end()},
 3887|  37.0k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|  37.0k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  37.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 818, False: 36.1k]
  |  |  ------------------
  ------------------
 3889|    818|                it = beg_exp_it;
 3890|    818|            }
 3891|  36.1k|            else {
 3892|  36.1k|                it = *r_exp;
 3893|  36.1k|            }
 3894|       |
 3895|  37.0k|            return it;
 3896|  37.0k|        }
 3897|   215k|        return range.begin();
 3898|   252k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_:
  742|  37.0k|        : m_fptr([](storage fn,
  743|  37.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  37.0k|              cvref<T> obj = *get<T>(fn);
  745|  37.0k|              if constexpr (std::is_void_v<R>) {
  746|  37.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  37.0k|              }
  748|  37.0k|              else {
  749|  37.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  37.0k|              }
  751|  37.0k|          }),
  752|  37.0k|          m_storage(std::addressof(f))
  753|  37.0k|    {
  754|  37.0k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEcE_clES12_c:
  743|   110k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   110k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   110k|              else {
  749|   110k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   110k|              }
  751|   110k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|   110k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   110k|        else if constexpr (std::is_object_v<T>) {
  688|   110k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   110k|    }
_ZZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlcE_clEc:
 3887|   110k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|  37.0k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  37.0k|        {
  662|  37.0k|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3943|   435k|    {
 3944|   435k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|   435k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 268k, False: 167k]
  |  Branch (3945:50): [True: 25.5k, False: 243k]
  ------------------
 3946|       |
 3947|   435k|        auto it = ranges::begin(range);
 3948|   435k|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|   435k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|   435k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   435k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 33.8k, False: 402k]
  |  |  ------------------
  ------------------
 3952|  33.8k|            return r.transform_error(
 3953|  33.8k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|  33.8k|                                              "Invalid floating-point value"));
 3955|  33.8k|        }
 3956|   402k|        else {
 3957|   402k|            digits_count += ranges::distance(it, *r);
 3958|   402k|            it = *r;
 3959|   402k|        }
 3960|       |
 3961|   402k|        m_integral_part_length = digits_count;
 3962|   402k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 73.8k, False: 328k]
  ------------------
 3963|   402k|                                             m_locale_options.decimal_point)) {
 3964|  73.8k|            it = *r;
 3965|  73.8k|        }
 3966|       |
 3967|   402k|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 67.8k, False: 334k]
  ------------------
 3968|   402k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|  67.8k|            digits_count += ranges::distance(it, *r);
 3970|  67.8k|            it = *r;
 3971|  67.8k|        }
 3972|       |
 3973|   402k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   402k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 402k]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|   402k|        auto beg_exp_it = it;
 3979|   402k|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 252k, False: 149k]
  ------------------
 3980|   252k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|   252k|        }
 3982|   402k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 23.9k, False: 378k]
  |  Branch (3982:29): [True: 16.3k, False: 7.64k]
  ------------------
 3983|  16.3k|            return unexpected_scan_error(
 3984|  16.3k|                scan_error::invalid_scanned_value,
 3985|  16.3k|                "No exponent given to scientific float");
 3986|  16.3k|        }
 3987|       |
 3988|   385k|        m_kind =
 3989|   385k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 349k, False: 36.1k]
  ------------------
 3990|       |
 3991|   385k|        return it;
 3992|   402k|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3773|   838k|    {
 3774|   838k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   838k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 838k]
  |  |  |  Branch (859:45): [True: 0, False: 838k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|   838k|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|   838k|        return read_while1_code_unit(
 3783|   838k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|   838k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|   838k|        : m_fptr([](storage fn,
  743|   838k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   838k|              cvref<T> obj = *get<T>(fn);
  745|   838k|              if constexpr (std::is_void_v<R>) {
  746|   838k|                  obj(static_cast<decltype(args)>(args)...);
  747|   838k|              }
  748|   838k|              else {
  749|   838k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   838k|              }
  751|   838k|          }),
  752|   838k|          m_storage(std::addressof(f))
  753|   838k|    {
  754|   838k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|  4.45M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.45M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  4.45M|              else {
  749|  4.45M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.45M|              }
  751|  4.45M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  683|  4.45M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  4.45M|        else if constexpr (std::is_object_v<T>) {
  688|  4.45M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  4.45M|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3783|  4.45M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   838k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   838k|        {
  662|   838k|        }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3999|  1.52M|    {
 4000|  1.52M|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|  1.52M|        const bool allowed_nonhex =
 4002|  1.52M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|  1.52M|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|  1.52M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 1.51M, False: 17.8k]
  |  Branch (4005:45): [True: 0, False: 1.51M]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|  1.52M|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 17.8k, False: 1.51M]
  ------------------
 4011|  17.8k|            return *r;
 4012|  17.8k|        }
 4013|       |
 4014|  1.51M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 1.44M, False: 62.5k]
  |  Branch (4014:45): [True: 1.49k, False: 1.44M]
  ------------------
 4015|  1.49k|            return unexpected(r.error());
 4016|  1.49k|        }
 4017|  1.50M|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 62.5k, False: 1.44M]
  ------------------
 4018|  62.5k|            return *r;
 4019|  62.5k|        }
 4020|       |
 4021|  1.44M|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 1.01M, False: 435k]
  |  Branch (4021:28): [True: 305k, False: 705k]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|   305k|            auto it = range.begin();
 4025|       |
 4026|   305k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 14.1k, False: 291k]
  ------------------
 4027|  14.1k|                m_kind = float_kind::hex_with_prefix;
 4028|  14.1k|                it = *r;
 4029|  14.1k|            }
 4030|   291k|            else {
 4031|   291k|                m_kind = float_kind::hex_without_prefix;
 4032|   291k|            }
 4033|       |
 4034|   305k|            return read_hex(ranges::subrange{it, range.end()});
 4035|   305k|        }
 4036|  1.14M|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 435k, False: 705k]
  |  Branch (4036:29): [True: 435k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   435k|            m_kind = float_kind::generic;
 4040|   435k|            return read_regular_float(range);
 4041|   435k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|   705k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   705k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34.2k, False: 671k]
  |  |  ------------------
  ------------------
 4047|  34.2k|            m_kind = float_kind::hex_with_prefix;
 4048|  34.2k|            return read_hex(ranges::subrange{*r, range.end()});
 4049|  34.2k|        }
 4050|       |
 4051|   671k|        m_kind = float_kind::generic;
 4052|   671k|        return read_regular(range);
 4053|   705k|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3725|  1.01M|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|  1.01M|                    auto res = read_all(rr);
 3727|  1.01M|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|  1.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 879, False: 1.01M]
  |  |  ------------------
  ------------------
 3728|    879|                        return unexpected_scan_error(
 3729|    879|                            scan_error::invalid_scanned_value,
 3730|    879|                            "Invalid float value");
 3731|    879|                    }
 3732|  1.01M|                    return res;
 3733|  1.01M|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|  1.01M|{
 1839|  1.01M|    return ranges::next(range.begin(), range.end());
 1840|  1.01M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|  1.01M|    {
  313|  1.01M|        ranges::advance(x, bound);
  314|  1.01M|        return x;
  315|  1.01M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|  1.01M|    {
  275|  1.01M|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|  1.01M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|  1.01M|    {
  190|  1.01M|        i = std::move(bound);
  191|  1.01M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1576|  1.40M|    {
 1577|  1.40M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  1.40M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  1.40M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1620|  1.40M|    {
 1621|  1.40M|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|       |        if constexpr (ranges::borrowed_range<Range> &&
 1624|       |                      ranges::contiguous_range<Range> &&
 1625|  1.40M|                      ranges::sized_range<Range>) {
 1626|  1.40M|            m_storage.reset();
 1627|  1.40M|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|       |        }
 1629|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|       |                                          std::basic_string<CharT>>) {
 1631|       |            m_storage.emplace(SCN_FWD(range));
 1632|       |            m_view = string_view_type{*m_storage};
 1633|       |        }
 1634|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|       |                                          typename detail::basic_scan_buffer<
 1636|       |                                              value_t>::forward_iterator> &&
 1637|       |                           ranges::common_range<Range>) {
 1638|       |            auto beg_seg = range.begin().contiguous_segment();
 1639|       |            auto end_seg = range.end().contiguous_segment();
 1640|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|       |                             detail::to_address(end_seg.end()))) {
 1642|       |                auto& str = m_storage.emplace();
 1643|       |                str.reserve(range.end().position() - range.begin().position());
 1644|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|       |                m_view = string_view_type{str};
 1646|       |                return;
 1647|       |            }
 1648|       |
 1649|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|       |                                                            end_seg.data());
 1651|       |            m_storage.reset();
 1652|       |        }
 1653|       |        else {
 1654|       |            auto& str = m_storage.emplace();
 1655|       |            if constexpr (ranges::sized_range<Range>) {
 1656|       |                str.reserve(range.size());
 1657|       |            }
 1658|       |            if constexpr (ranges::common_range<Range>) {
 1659|       |                std::copy(ranges::begin(range), ranges::end(range),
 1660|       |                          std::back_inserter(str));
 1661|       |            }
 1662|       |            else {
 1663|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|       |                     ++it) {
 1665|       |                    str.push_back(*it);
 1666|       |                }
 1667|       |            }
 1668|       |            m_view = string_view_type{str};
 1669|       |        }
 1670|  1.40M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  96.4k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  96.4k|        {
  662|  96.4k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   255k|        : m_fptr([](storage fn,
  743|   255k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   255k|              cvref<T> obj = *get<T>(fn);
  745|   255k|              if constexpr (std::is_void_v<R>) {
  746|   255k|                  obj(static_cast<decltype(args)>(args)...);
  747|   255k|              }
  748|   255k|              else {
  749|   255k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   255k|              }
  751|   255k|          }),
  752|   255k|          m_storage(std::addressof(f))
  753|   255k|    {
  754|   255k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   255k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   255k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   255k|              else {
  749|   255k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   255k|              }
  751|   255k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   255k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   255k|        else if constexpr (std::is_object_v<T>) {
  688|   255k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   255k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   255k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   255k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   255k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   255k|            },
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3664|  1.22M|    {
 3665|  1.22M|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|  1.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.22M]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|  1.22M|        return read_source_impl(range);
 3671|  1.22M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   255k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   255k|        {
  662|   255k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6192|   438k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|       |                          basic_contiguous_scan_context<char_type>>) {
 6197|       |            auto rd = make_reader<T, char_type>();
 6198|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|       |                return unexpected(e);
 6200|       |            }
 6201|       |
 6202|       |            return impl(rd, range, value);
 6203|       |        }
 6204|   438k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   438k|            auto rd = make_reader<T, char_type>();
 6206|   438k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   438k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 438k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   438k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 438k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   438k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   438k|                return impl(rd, range, value);
 6213|   438k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|   438k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   438k|    {
 6124|   438k|        const bool need_skipped_width =
 6125|   438k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 438k]
  |  Branch (6125:33): [True: 0, False: 438k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   438k|        auto it = rng.begin();
 6129|   438k|        std::ptrdiff_t prefix_width = 0;
 6130|   438k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 438k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   438k|        else {
 6138|   438k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   438k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   438k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   438k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   438k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.75k, False: 432k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  5.75k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  5.75k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  5.75k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  5.75k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  5.75k|    }                                                  \
  |  |  |  | 3671|   438k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   432k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   432k|            std::tie(it, prefix_width) = prefix_result;
 6140|   432k|        }
 6141|   432k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   432k|        std::ptrdiff_t value_width = 0;
 6145|   432k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 432k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   432k|        else {
 6161|   432k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   432k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   432k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   432k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 26.2k, False: 406k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  26.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  26.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  26.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  26.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  26.2k|    }                                                  \
  |  | 3671|   432k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   432k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   406k|                                             specs, value, loc));
 6163|       |
 6164|   406k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 406k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   406k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   406k|        std::ptrdiff_t postfix_width = 0;
 6173|   406k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 401k, False: 4.67k]
  ------------------
 6174|   401k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   401k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   401k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   401k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   401k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 401k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   401k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   401k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   401k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   401k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   401k|                                 value_width));
 6178|   401k|            std::tie(it, postfix_width) = postfix_result;
 6179|   401k|        }
 6180|       |
 6181|   406k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   406k|                                                 value_width, postfix_width);
 6183|   406k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 406k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   406k|        return it;
 6188|   406k|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3690|  1.06M|    {
 3691|  1.06M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.06M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.06M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|  1.06M|        const std::ptrdiff_t sign_len =
 3694|  1.06M|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 244k, False: 817k]
  ------------------
 3695|       |
 3696|  1.06M|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|  1.06M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.06M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.06M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 19.9k, False: 1.04M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  19.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  19.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  19.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  19.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  19.9k|    }                                                  \
  |  |  |  | 3671|  1.06M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|  1.04M|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|  1.06M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   432k|    {
 4170|   432k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   432k|#if !SCN_DISABLE_LOCALE
 4173|   432k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 122k, False: 310k]
  ------------------
 4174|   122k|            return read_impl<Range>(
 4175|   122k|                range, rd,
 4176|   122k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   122k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|   122k|                },
 4179|   122k|                value, loc);
 4180|   122k|        }
 4181|   310k|#endif
 4182|       |
 4183|   310k|        return read_impl<Range>(
 4184|   310k|            range, rd,
 4185|   310k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   310k|                return r.read_source(SCN_FWD(args)...);
 4187|   310k|            },
 4188|   310k|            value);
 4189|   432k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   598k|    {
 4206|   598k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   598k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   598k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 32.0k, False: 566k]
  |  |  ------------------
  ------------------
 4208|  32.0k|            return unexpected(r.error());
 4209|  32.0k|        }
 4210|       |
 4211|   566k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   566k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   566k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   566k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   566k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.97k, False: 564k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.97k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.97k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.97k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.97k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.97k|    }                                                  \
  |  |  |  | 3671|   566k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   564k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   564k|        return ranges::next(range.begin(), n);
 4213|   566k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   122k|        : m_fptr([](storage fn,
  743|   122k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   122k|              cvref<T> obj = *get<T>(fn);
  745|   122k|              if constexpr (std::is_void_v<R>) {
  746|   122k|                  obj(static_cast<decltype(args)>(args)...);
  747|   122k|              }
  748|   122k|              else {
  749|   122k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   122k|              }
  751|   122k|          }),
  752|   122k|          m_storage(std::addressof(f))
  753|   122k|    {
  754|   122k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   122k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   122k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   122k|              else {
  749|   122k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   122k|              }
  751|   122k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   122k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   122k|        else if constexpr (std::is_object_v<T>) {
  688|   122k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   122k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|   122k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   122k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   122k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|   122k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   122k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   122k|        {
  662|   122k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   310k|        : m_fptr([](storage fn,
  743|   310k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   310k|              cvref<T> obj = *get<T>(fn);
  745|   310k|              if constexpr (std::is_void_v<R>) {
  746|   310k|                  obj(static_cast<decltype(args)>(args)...);
  747|   310k|              }
  748|   310k|              else {
  749|   310k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   310k|              }
  751|   310k|          }),
  752|   310k|          m_storage(std::addressof(f))
  753|   310k|    {
  754|   310k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   310k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   310k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   310k|              else {
  749|   310k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   310k|              }
  751|   310k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   310k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   310k|        else if constexpr (std::is_object_v<T>) {
  688|   310k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   310k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   310k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   310k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   310k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   310k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   310k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   310k|        {
  662|   310k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   362k|    {
 4170|   362k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   362k|#if !SCN_DISABLE_LOCALE
 4173|   362k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 100k, False: 262k]
  ------------------
 4174|   100k|            return read_impl<Range>(
 4175|   100k|                range, rd,
 4176|   100k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   100k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|   100k|                },
 4179|   100k|                value, loc);
 4180|   100k|        }
 4181|   262k|#endif
 4182|       |
 4183|   262k|        return read_impl<Range>(
 4184|   262k|            range, rd,
 4185|   262k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   262k|                return r.read_source(SCN_FWD(args)...);
 4187|   262k|            },
 4188|   262k|            value);
 4189|   362k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   513k|    {
 4206|   513k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   513k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   513k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.5k, False: 495k]
  |  |  ------------------
  ------------------
 4208|  17.5k|            return unexpected(r.error());
 4209|  17.5k|        }
 4210|       |
 4211|   495k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   495k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   495k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   495k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   495k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 18.0k, False: 477k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  18.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  18.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  18.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  18.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  18.0k|    }                                                  \
  |  |  |  | 3671|   495k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   477k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   477k|        return ranges::next(range.begin(), n);
 4213|   495k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   100k|        : m_fptr([](storage fn,
  743|   100k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   100k|              cvref<T> obj = *get<T>(fn);
  745|   100k|              if constexpr (std::is_void_v<R>) {
  746|   100k|                  obj(static_cast<decltype(args)>(args)...);
  747|   100k|              }
  748|   100k|              else {
  749|   100k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   100k|              }
  751|   100k|          }),
  752|   100k|          m_storage(std::addressof(f))
  753|   100k|    {
  754|   100k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   100k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   100k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   100k|              else {
  749|   100k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   100k|              }
  751|   100k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   100k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   100k|        else if constexpr (std::is_object_v<T>) {
  688|   100k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   100k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|   100k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   100k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|   100k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   100k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   100k|        {
  662|   100k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   262k|        : m_fptr([](storage fn,
  743|   262k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   262k|              cvref<T> obj = *get<T>(fn);
  745|   262k|              if constexpr (std::is_void_v<R>) {
  746|   262k|                  obj(static_cast<decltype(args)>(args)...);
  747|   262k|              }
  748|   262k|              else {
  749|   262k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   262k|              }
  751|   262k|          }),
  752|   262k|          m_storage(std::addressof(f))
  753|   262k|    {
  754|   262k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   262k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   262k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   262k|              else {
  749|   262k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   262k|              }
  751|   262k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   262k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   262k|        else if constexpr (std::is_object_v<T>) {
  688|   262k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   262k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   262k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   262k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   262k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   262k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   262k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   262k|        {
  662|   262k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6192|   442k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|       |                          basic_contiguous_scan_context<char_type>>) {
 6197|       |            auto rd = make_reader<T, char_type>();
 6198|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|       |                return unexpected(e);
 6200|       |            }
 6201|       |
 6202|       |            return impl(rd, range, value);
 6203|       |        }
 6204|   442k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   442k|            auto rd = make_reader<T, char_type>();
 6206|   442k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   442k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 442k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   442k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 442k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   442k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   442k|                return impl(rd, range, value);
 6213|   442k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|   442k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   442k|    {
 6124|   442k|        const bool need_skipped_width =
 6125|   442k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 442k]
  |  Branch (6125:33): [True: 0, False: 442k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   442k|        auto it = rng.begin();
 6129|   442k|        std::ptrdiff_t prefix_width = 0;
 6130|   442k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 442k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   442k|        else {
 6138|   442k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   442k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   442k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   442k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   442k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.14k, False: 436k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  6.14k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  6.14k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  6.14k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  6.14k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  6.14k|    }                                                  \
  |  |  |  | 3671|   442k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   436k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   436k|            std::tie(it, prefix_width) = prefix_result;
 6140|   436k|        }
 6141|   436k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   436k|        std::ptrdiff_t value_width = 0;
 6145|   436k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 436k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   436k|        else {
 6161|   436k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   436k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   436k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   436k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 25.8k, False: 410k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  25.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  25.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  25.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  25.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  25.8k|    }                                                  \
  |  | 3671|   436k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   436k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   410k|                                             specs, value, loc));
 6163|       |
 6164|   410k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 410k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   410k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   410k|        std::ptrdiff_t postfix_width = 0;
 6173|   410k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 405k, False: 4.96k]
  ------------------
 6174|   405k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   405k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   405k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   405k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   405k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 405k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   405k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   405k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   405k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   405k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   405k|                                 value_width));
 6178|   405k|            std::tie(it, postfix_width) = postfix_result;
 6179|   405k|        }
 6180|       |
 6181|   410k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   410k|                                                 value_width, postfix_width);
 6183|   410k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 410k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   410k|        return it;
 6188|   410k|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3690|  1.07M|    {
 3691|  1.07M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.07M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.07M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|  1.07M|        const std::ptrdiff_t sign_len =
 3694|  1.07M|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 250k, False: 822k]
  ------------------
 3695|       |
 3696|  1.07M|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|  1.07M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.07M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.07M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 17.8k, False: 1.05M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  17.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  17.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  17.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  17.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  17.8k|    }                                                  \
  |  |  |  | 3671|  1.07M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|  1.05M|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|  1.07M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   436k|    {
 4170|   436k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   436k|#if !SCN_DISABLE_LOCALE
 4173|   436k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 124k, False: 312k]
  ------------------
 4174|   124k|            return read_impl<Range>(
 4175|   124k|                range, rd,
 4176|   124k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   124k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|   124k|                },
 4179|   124k|                value, loc);
 4180|   124k|        }
 4181|   312k|#endif
 4182|       |
 4183|   312k|        return read_impl<Range>(
 4184|   312k|            range, rd,
 4185|   312k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   312k|                return r.read_source(SCN_FWD(args)...);
 4187|   312k|            },
 4188|   312k|            value);
 4189|   436k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   604k|    {
 4206|   604k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   604k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   604k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 32.9k, False: 571k]
  |  |  ------------------
  ------------------
 4208|  32.9k|            return unexpected(r.error());
 4209|  32.9k|        }
 4210|       |
 4211|   571k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   571k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   571k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   571k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   571k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 593, False: 570k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    593|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    593|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    593|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    593|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    593|    }                                                  \
  |  |  |  | 3671|   571k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   570k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   570k|        return ranges::next(range.begin(), n);
 4213|   571k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   124k|        : m_fptr([](storage fn,
  743|   124k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   124k|              cvref<T> obj = *get<T>(fn);
  745|   124k|              if constexpr (std::is_void_v<R>) {
  746|   124k|                  obj(static_cast<decltype(args)>(args)...);
  747|   124k|              }
  748|   124k|              else {
  749|   124k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   124k|              }
  751|   124k|          }),
  752|   124k|          m_storage(std::addressof(f))
  753|   124k|    {
  754|   124k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   124k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   124k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   124k|              else {
  749|   124k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   124k|              }
  751|   124k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   124k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   124k|        else if constexpr (std::is_object_v<T>) {
  688|   124k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   124k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|   124k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   124k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|   124k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   124k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   124k|        {
  662|   124k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   312k|        : m_fptr([](storage fn,
  743|   312k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   312k|              cvref<T> obj = *get<T>(fn);
  745|   312k|              if constexpr (std::is_void_v<R>) {
  746|   312k|                  obj(static_cast<decltype(args)>(args)...);
  747|   312k|              }
  748|   312k|              else {
  749|   312k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   312k|              }
  751|   312k|          }),
  752|   312k|          m_storage(std::addressof(f))
  753|   312k|    {
  754|   312k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   312k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   312k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   312k|              else {
  749|   312k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   312k|              }
  751|   312k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   312k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   312k|        else if constexpr (std::is_object_v<T>) {
  688|   312k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   312k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   312k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   312k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   312k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   312k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   312k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   312k|        {
  662|   312k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   366k|    {
 4170|   366k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   366k|#if !SCN_DISABLE_LOCALE
 4173|   366k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 102k, False: 263k]
  ------------------
 4174|   102k|            return read_impl<Range>(
 4175|   102k|                range, rd,
 4176|   102k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   102k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|   102k|                },
 4179|   102k|                value, loc);
 4180|   102k|        }
 4181|   263k|#endif
 4182|       |
 4183|   263k|        return read_impl<Range>(
 4184|   263k|            range, rd,
 4185|   263k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   263k|                return r.read_source(SCN_FWD(args)...);
 4187|   263k|            },
 4188|   263k|            value);
 4189|   366k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   519k|    {
 4206|   519k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   519k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   519k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.8k, False: 501k]
  |  |  ------------------
  ------------------
 4208|  17.8k|            return unexpected(r.error());
 4209|  17.8k|        }
 4210|       |
 4211|   501k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   501k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   501k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   501k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   501k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 17.2k, False: 484k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  17.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  17.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  17.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  17.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  17.2k|    }                                                  \
  |  |  |  | 3671|   501k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   484k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   484k|        return ranges::next(range.begin(), n);
 4213|   501k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   102k|        : m_fptr([](storage fn,
  743|   102k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   102k|              cvref<T> obj = *get<T>(fn);
  745|   102k|              if constexpr (std::is_void_v<R>) {
  746|   102k|                  obj(static_cast<decltype(args)>(args)...);
  747|   102k|              }
  748|   102k|              else {
  749|   102k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   102k|              }
  751|   102k|          }),
  752|   102k|          m_storage(std::addressof(f))
  753|   102k|    {
  754|   102k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   102k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   102k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   102k|              else {
  749|   102k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   102k|              }
  751|   102k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   102k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   102k|        else if constexpr (std::is_object_v<T>) {
  688|   102k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   102k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|   102k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   102k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|   102k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   102k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   102k|        {
  662|   102k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   263k|        : m_fptr([](storage fn,
  743|   263k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   263k|              cvref<T> obj = *get<T>(fn);
  745|   263k|              if constexpr (std::is_void_v<R>) {
  746|   263k|                  obj(static_cast<decltype(args)>(args)...);
  747|   263k|              }
  748|   263k|              else {
  749|   263k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   263k|              }
  751|   263k|          }),
  752|   263k|          m_storage(std::addressof(f))
  753|   263k|    {
  754|   263k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   263k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   263k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   263k|              else {
  749|   263k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   263k|              }
  751|   263k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   263k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   263k|        else if constexpr (std::is_object_v<T>) {
  688|   263k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   263k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   263k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   263k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   263k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   263k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   263k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   263k|        {
  662|   263k|        }
_ZN3scn2v34impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1038|  1.79M|{
 1039|       |    if constexpr (ranges::contiguous_range<Range> &&
 1040|       |                  ranges::sized_range<Range>) {
 1041|       |        return r;
 1042|       |    }
 1043|       |    else if constexpr (std::is_same_v<
 1044|       |                           ranges::const_iterator_t<Range>,
 1045|       |                           typename detail::basic_scan_buffer<
 1046|  1.79M|                               detail::char_t<Range>>::forward_iterator>) {
 1047|       |        if constexpr (ranges::common_range<Range>) {
 1048|       |            auto seg = r.begin().contiguous_segment();
 1049|       |            auto dist =
 1050|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|       |            return seg.substr(0, std::min(seg.size(), dist));
 1052|       |        }
 1053|  1.79M|        else {
 1054|  1.79M|            return r.begin().contiguous_segment();
 1055|  1.79M|        }
 1056|       |    }
 1057|       |    else {
 1058|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1059|       |    }
 1060|  1.79M|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|  1.59M|{
 2061|  1.59M|    auto it = range.begin();
 2062|  3.06M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 3.05M, False: 17.5k]
  ------------------
 2063|  3.05M|        const auto val =
 2064|  3.05M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  3.05M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  3.05M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.03M, False: 19.9k]
  |  |  ------------------
  ------------------
 2066|  3.03M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  3.03M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  3.03M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 1.57M, False: 1.45M]
  ------------------
 2069|  1.57M|                return it;
 2070|  1.57M|            }
 2071|  3.03M|        }
 2072|  1.47M|        it = val.iterator;
 2073|  1.47M|    }
 2074|       |
 2075|  17.5k|    return it;
 2076|  1.59M|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|  3.05M|{
 1899|  3.05M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  3.05M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.05M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  3.05M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  3.05M|    auto it = range.begin();
 1903|  3.05M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  3.05M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  3.05M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.9k, False: 3.03M]
  |  |  ------------------
  ------------------
 1906|  19.9k|        ++it;
 1907|  19.9k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|  19.9k|        return {it, {}};
 1909|  19.9k|    }
 1910|       |
 1911|  3.03M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 3.00M, False: 26.3k]
  ------------------
 1912|  3.00M|        ++it;
 1913|  3.00M|        return {it, string_type(1, *range.begin())};
 1914|  3.00M|    }
 1915|       |
 1916|  26.3k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|  26.3k|    return {it, string_type{range.begin(), it}};
 1918|  3.03M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1154|  19.9k|{
 1155|  19.9k|    auto it = input.begin();
 1156|   196k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 195k, False: 1.46k]
  ------------------
 1157|   195k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 18.4k, False: 176k]
  ------------------
 1158|  18.4k|            break;
 1159|  18.4k|        }
 1160|   195k|    }
 1161|  19.9k|    return it;
 1162|  19.9k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  26.3k|    {
  283|  26.3k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  26.3k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  26.3k|    {
  252|  26.3k|        constexpr iter_difference_t<I> zero{0};
  253|  26.3k|        iter_difference_t<I> counter{0};
  254|       |
  255|  79.8k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 54.5k, False: 25.3k]
  |  Branch (255:30): [True: 53.4k, False: 1.04k]
  ------------------
  256|  53.4k|            ++i;
  257|  53.4k|            ++counter;
  258|  53.4k|        }
  259|       |
  260|  26.3k|        return counter;
  261|  26.3k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1889|  3.05M|    {
 1890|  3.05M|        return !codepoint.empty();
 1891|  3.05M|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|  1.59M|{
 2082|  1.59M|    return read_until_code_point(range, std::not_fn(pred));
 2083|  1.59M|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|  1.79M|{
 2951|  1.79M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 1.79M, False: 0]
  ------------------
 2952|  1.79M|        auto it = read_while_classic_space(range);
 2953|  1.79M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  1.79M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.79M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.5k, False: 1.77M]
  |  |  ------------------
  ------------------
 2955|  17.5k|            return unexpected(e);
 2956|  17.5k|        }
 2957|       |
 2958|  1.77M|        return it;
 2959|  1.79M|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  1.79M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|  1.79M|{
 2117|       |    if constexpr (ranges::contiguous_range<Range> &&
 2118|       |                  ranges::sized_range<Range> &&
 2119|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2120|       |        auto buf = make_contiguous_buffer(range);
 2121|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|       |        return ranges::next(range.begin(),
 2123|       |                            ranges::distance(buf.view().begin(), it));
 2124|       |    }
 2125|  1.79M|    else {
 2126|  1.79M|        auto it = range.begin();
 2127|       |
 2128|  1.79M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|  1.79M|            auto seg = get_contiguous_beginning(range);
 2130|  1.79M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  1.79M|                seg_it != seg.end()) {
  ------------------
  |  Branch (2131:17): [True: 196k, False: 1.59M]
  ------------------
 2132|   196k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   196k|            }
 2134|  1.59M|            ranges::advance(it, seg.size());
 2135|  1.59M|        }
 2136|       |
 2137|      0|        return read_while_code_point(
 2138|  1.79M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  1.79M|    }
 2140|  1.79M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|  1.59M|        : m_fptr([](storage fn,
  743|  1.59M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.59M|              cvref<T> obj = *get<T>(fn);
  745|  1.59M|              if constexpr (std::is_void_v<R>) {
  746|  1.59M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.59M|              }
  748|  1.59M|              else {
  749|  1.59M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.59M|              }
  751|  1.59M|          }),
  752|  1.59M|          m_storage(std::addressof(f))
  753|  1.59M|    {
  754|  1.59M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  3.03M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.03M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  3.03M|              else {
  749|  3.03M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.03M|              }
  751|  3.03M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  3.03M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  3.03M|        else if constexpr (std::is_object_v<T>) {
  688|  3.03M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  3.03M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|  3.03M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  1.59M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.59M|        {
  662|  1.59M|        }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|   859k|{
  981|       |    if constexpr (ranges::contiguous_range<Range> &&
  982|       |                  ranges::sized_range<Range>) {
  983|       |        return true;
  984|       |    }
  985|       |    else if constexpr (std::is_same_v<
  986|       |                           ranges::const_iterator_t<Range>,
  987|       |                           typename detail::basic_scan_buffer<
  988|   859k|                               detail::char_t<Range>>::forward_iterator>) {
  989|   859k|        auto beg = r.begin();
  990|   859k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 859k, False: 0]
  ------------------
  991|   859k|            return false;
  992|   859k|        }
  993|       |        if constexpr (ranges::common_range<Range>) {
  994|       |            return beg.contiguous_segment().end() ==
  995|       |                   ranges::end(r).contiguous_segment().end();
  996|       |        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|       |    }
 1005|       |    else {
 1006|       |        return false;
 1007|       |    }
 1008|   859k|}
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|  6.09M|    {
  763|  6.09M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  6.09M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  6.09M|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1856|  2.26M|{
 1857|  2.26M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  2.26M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.26M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|       |    if constexpr (ranges::sized_range<Range>) {
 1860|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|       |        if (sz < count) {
 1862|       |            return unexpected(eof_error::eof);
 1863|       |        }
 1864|       |
 1865|       |        return ranges::next(range.begin(), count);
 1866|       |    }
 1867|  2.26M|    else {
 1868|  2.26M|        auto it = range.begin();
 1869|  2.26M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 1.37M, False: 889k]
  ------------------
 1870|  1.37M|            return ranges::next(it, count);
 1871|  1.37M|        }
 1872|       |
 1873|  3.46M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 2.63M, False: 830k]
  ------------------
 1874|  2.63M|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 59.7k, False: 2.57M]
  ------------------
 1875|  59.7k|                return unexpected(eof_error::eof);
 1876|  59.7k|            }
 1877|  2.63M|        }
 1878|       |
 1879|   830k|        return it;
 1880|   889k|    }
 1881|  2.26M|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1094|  2.26M|{
 1095|       |    if constexpr (ranges::sized_range<Range>) {
 1096|       |        return r.size();
 1097|       |    }
 1098|       |    else if constexpr (std::is_same_v<
 1099|       |                           ranges::const_iterator_t<Range>,
 1100|       |                           typename detail::basic_scan_buffer<
 1101|  2.26M|                               detail::char_t<Range>>::forward_iterator>) {
 1102|       |        if constexpr (ranges::common_range<Range>) {
 1103|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|       |        }
 1105|  2.26M|        else {
 1106|  2.26M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1106:17): [True: 2.26M, False: 0]
  ------------------
 1107|  2.26M|                return static_cast<size_t>(
 1108|  2.26M|                    r.begin().parent()->chars_available() -
 1109|  2.26M|                    r.begin().position());
 1110|  2.26M|            }
 1111|      0|            return r.begin().contiguous_segment().size();
 1112|  2.26M|        }
 1113|       |    }
 1114|       |    else {
 1115|       |        return 0;
 1116|       |    }
 1117|  2.26M|}
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  2.00M|        : m_fptr([](storage fn,
  743|  2.00M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.00M|              cvref<T> obj = *get<T>(fn);
  745|  2.00M|              if constexpr (std::is_void_v<R>) {
  746|  2.00M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.00M|              }
  748|  2.00M|              else {
  749|  2.00M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.00M|              }
  751|  2.00M|          }),
  752|  2.00M|          m_storage(std::addressof(f))
  753|  2.00M|    {
  754|  2.00M|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEwE_clESK_w:
  743|  3.04M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.04M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  3.04M|              else {
  749|  3.04M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.04M|              }
  751|  3.04M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  3.04M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  3.04M|        else if constexpr (std::is_object_v<T>) {
  688|  3.04M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  3.04M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  2.00M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.00M|        {
  662|  2.00M|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6036|   628k|    {
 6037|   628k|        const bool need_skipped_width =
 6038|   628k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 628k]
  |  Branch (6038:33): [True: 0, False: 628k]
  ------------------
 6039|   628k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|   628k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 628k]
  ------------------
 6043|   628k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 628k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|   628k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 628k, False: 0]
  |  Branch (6047:56): [True: 628k, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|   628k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 628k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  1.25M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|   628k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   628k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   628k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   628k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.86k, False: 626k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.86k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.86k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.86k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.86k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.86k|    }                                                  \
  |  |  |  | 3671|   628k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   626k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  1.25M|                            make_eof_scan_error));
 6058|       |
 6059|  1.25M|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 626k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|   626k|            return result_type{it, 0};
 6067|  1.25M|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|   628k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|  1.49M|{
 1976|  1.49M|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  1.49M|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|  1.49M|{
 1957|       |    if constexpr (ranges::common_range<Range>) {
 1958|       |        return std::find_if(range.begin(), range.end(), pred);
 1959|       |    }
 1960|  1.49M|    else {
 1961|  1.49M|        auto first = range.begin();
 1962|  2.28M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 2.28M, False: 3.27k]
  ------------------
 1963|  2.28M|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 1.49M, False: 795k]
  ------------------
 1964|  1.49M|                return first;
 1965|  1.49M|            }
 1966|  2.28M|        }
 1967|  3.27k|        return first;
 1968|  1.49M|    }
 1969|  1.49M|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  1.05M|    {
  108|  1.05M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  1.05M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  1.05M|    {
   94|  1.05M|        iter_difference_t<I> counter{0};
   95|  2.81M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 1.75M, False: 1.05M]
  ------------------
   96|  1.75M|            ++i;
   97|  1.75M|            ++counter;
   98|  1.75M|        }
   99|  1.05M|        return counter;
  100|  1.05M|    }
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1779|   306k|    {
 1780|   306k|        auto stdloc = loc.get<std::locale>();
 1781|   306k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|   306k|        grouping = numpunct.grouping();
 1783|   306k|        thousands_sep =
 1784|   306k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 306k]
  ------------------
 1785|   306k|        decimal_point = numpunct.decimal_point();
 1786|   306k|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1716|   306k|{
 1717|   306k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 306k, False: 0]
  ------------------
 1718|   306k|        return std::use_facet<Facet>(stdloc);
 1719|   306k|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|   306k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1845|  2.02M|{
 1846|  2.02M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.15k, False: 2.02M]
  |  |  ------------------
  ------------------
 1847|  2.15k|        return unexpected(e);
 1848|  2.15k|    }
 1849|       |
 1850|  2.02M|    return ranges::next(range.begin());
 1851|  2.02M|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  3.11M|{
  950|  3.11M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  3.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.00k, False: 3.11M]
  |  |  ------------------
  ------------------
  951|  6.00k|        return eof_error::eof;
  952|  6.00k|    }
  953|  3.11M|    return eof_error::good;
  954|  3.11M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  4.60M|{
  944|  4.60M|    return is_range_eof(r.begin(), r.end());
  945|  4.60M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  4.60M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  4.60M|    {
  937|  4.60M|        return begin == end;
  938|  4.60M|    }
  939|  4.60M|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|  2.02M|    {
  296|  2.02M|        ++x;
  297|  2.02M|        return x;
  298|  2.02M|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3140|   873k|{
 3141|   873k|    auto r = read_one_of_code_unit(range, "+-");
 3142|   873k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 864k, False: 8.91k]
  ------------------
 3143|   864k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 864k, False: 91]
  ------------------
 3144|   864k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|   864k|        }
 3146|     91|        return unexpected(eof_error::eof);
 3147|   864k|    }
 3148|       |
 3149|  8.91k|    auto& it = *r;
 3150|  8.91k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 7.54k, False: 1.37k]
  ------------------
 3151|  7.54k|        return std::pair{it, sign_type::minus_sign};
 3152|  7.54k|    }
 3153|  1.37k|    return std::pair{it, sign_type::plus_sign};
 3154|  8.91k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2271|  1.41M|{
 2272|  1.41M|    auto it = read_code_unit(range);
 2273|  1.41M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.41M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.19k, False: 1.40M]
  |  |  ------------------
  ------------------
 2274|  1.19k|        return unexpected(make_eof_parse_error(it.error()));
 2275|  1.19k|    }
 2276|       |
 2277|  2.81M|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 2.81M, False: 1.38M]
  ------------------
 2278|  2.81M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 26.9k, False: 2.78M]
  ------------------
 2279|  26.9k|            return *it;
 2280|  26.9k|        }
 2281|  2.81M|    }
 2282|       |
 2283|  1.38M|    return unexpected(parse_error::error);
 2284|  1.40M|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2230|  2.26M|{
 2231|  2.26M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|       |    if constexpr (ranges::contiguous_range<Range> &&
 2234|       |                  std::is_same_v<char_type, char>) {
 2235|       |        if (range.size() < str.size()) {
 2236|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|       |        }
 2238|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|       |            return unexpected(parse_error::error);
 2240|       |        }
 2241|       |        return ranges::next(range.begin(), str.size());
 2242|       |    }
 2243|  2.26M|    else {
 2244|  2.26M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  2.26M|            if (ch < 'A' || ch > 'Z') {
 2246|  2.26M|                return ch;
 2247|  2.26M|            }
 2248|  2.26M|            return static_cast<char_type>(ch +
 2249|  2.26M|                                          static_cast<char_type>('a' - 'A'));
 2250|  2.26M|        };
 2251|       |
 2252|  2.26M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  2.26M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.26M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.26M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.26M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 59.7k, False: 2.20M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  59.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  59.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  59.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  59.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  59.7k|    }                                                  \
  |  |  |  | 3671|  2.26M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.20M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  2.20M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  2.20M|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  2.20M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  2.20M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.20M, False: 1.44k]
  |  |  ------------------
  ------------------
 2257|  2.20M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  2.20M|                    return ascii_tolower(a) ==
 2259|  2.20M|                           static_cast<detail::char_t<Range>>(b);
 2260|  2.20M|                }))) {
 2261|  2.20M|            return unexpected(parse_error::error);
 2262|  2.20M|        }
 2263|       |
 2264|  1.44k|        return it;
 2265|  2.20M|    }
 2266|  2.26M|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlwE_clEw:
 2244|  2.57M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  2.57M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 2.02M, False: 557k]
  |  Branch (2245:29): [True: 541k, False: 16.9k]
  ------------------
 2246|  2.56M|                return ch;
 2247|  2.56M|            }
 2248|  16.9k|            return static_cast<char_type>(ch +
 2249|  16.9k|                                          static_cast<char_type>('a' - 'A'));
 2250|  2.57M|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2145|   619k|{
 2146|   619k|    auto it = read_code_unit(range);
 2147|   619k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   619k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 952, False: 618k]
  |  |  ------------------
  ------------------
 2148|    952|        return unexpected(make_eof_parse_error(it.error()));
 2149|    952|    }
 2150|       |
 2151|   618k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   618k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 615k, False: 3.08k]
  |  |  ------------------
  ------------------
 2152|   618k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|   615k|        return unexpected(parse_error::error);
 2154|   615k|    }
 2155|       |
 2156|  3.08k|    return *it;
 2157|   618k|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1995|  1.49M|{
 1996|  1.49M|    auto it = read_while_code_unit(range, pred);
 1997|  1.49M|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 854k, False: 638k]
  ------------------
 1998|   854k|        return unexpected(parse_error::error);
 1999|   854k|    }
 2000|   638k|    return it;
 2001|  1.49M|}
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1620|   614k|    {
 1621|   614k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|       |        if constexpr (ranges::borrowed_range<Range> &&
 1624|       |                      ranges::contiguous_range<Range> &&
 1625|       |                      ranges::sized_range<Range>) {
 1626|       |            m_storage.reset();
 1627|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1628|       |        }
 1629|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|       |                                          std::basic_string<CharT>>) {
 1631|       |            m_storage.emplace(SCN_FWD(range));
 1632|       |            m_view = string_view_type{*m_storage};
 1633|       |        }
 1634|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|       |                                          typename detail::basic_scan_buffer<
 1636|       |                                              value_t>::forward_iterator> &&
 1637|   614k|                           ranges::common_range<Range>) {
 1638|   614k|            auto beg_seg = range.begin().contiguous_segment();
 1639|   614k|            auto end_seg = range.end().contiguous_segment();
 1640|   614k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|   614k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.1k, False: 594k]
  |  |  ------------------
  ------------------
 1641|   614k|                             detail::to_address(end_seg.end()))) {
 1642|  20.1k|                auto& str = m_storage.emplace();
 1643|  20.1k|                str.reserve(range.end().position() - range.begin().position());
 1644|  20.1k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  20.1k|                m_view = string_view_type{str};
 1646|  20.1k|                return;
 1647|  20.1k|            }
 1648|       |
 1649|   594k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   594k|                                                            end_seg.data());
 1651|   594k|            m_storage.reset();
 1652|       |        }
 1653|       |        else {
 1654|       |            auto& str = m_storage.emplace();
 1655|       |            if constexpr (ranges::sized_range<Range>) {
 1656|       |                str.reserve(range.size());
 1657|       |            }
 1658|       |            if constexpr (ranges::common_range<Range>) {
 1659|       |                std::copy(ranges::begin(range), ranges::end(range),
 1660|       |                          std::back_inserter(str));
 1661|       |            }
 1662|       |            else {
 1663|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|       |                     ++it) {
 1665|       |                    str.push_back(*it);
 1666|       |                }
 1667|       |            }
 1668|       |            m_view = string_view_type{str};
 1669|       |        }
 1670|   614k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1581|  5.42M|    {
 1582|  5.42M|        return m_view;
 1583|  5.42M|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1571|  3.42M|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6078|   435k|    {
 6079|   435k|        const bool need_skipped_width =
 6080|   435k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 435k]
  |  Branch (6080:33): [True: 0, False: 435k]
  ------------------
 6081|   435k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|   435k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 435k]
  ------------------
 6084|   435k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 435k]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|   435k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 435k, False: 0]
  ------------------
 6093|   435k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 0, False: 435k]
  ------------------
 6094|   435k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 0]
  ------------------
 6096|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|   435k|        return result_type{rng.begin(), 0};
 6118|   435k|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1856|  2.26M|{
 1857|  2.26M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  2.26M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.26M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  2.26M|    if constexpr (ranges::sized_range<Range>) {
 1860|  2.26M|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  2.26M|        if (sz < count) {
  ------------------
  |  Branch (1861:13): [True: 59.8k, False: 2.20M]
  ------------------
 1862|  59.8k|            return unexpected(eof_error::eof);
 1863|  59.8k|        }
 1864|       |
 1865|  2.20M|        return ranges::next(range.begin(), count);
 1866|       |    }
 1867|       |    else {
 1868|       |        auto it = range.begin();
 1869|       |        if (guaranteed_minimum_size(range) >= count) {
 1870|       |            return ranges::next(it, count);
 1871|       |        }
 1872|       |
 1873|       |        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1874|       |            if (it == range.end()) {
 1875|       |                return unexpected(eof_error::eof);
 1876|       |            }
 1877|       |        }
 1878|       |
 1879|       |        return it;
 1880|       |    }
 1881|  2.26M|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|  2.63M|{
 1899|  2.63M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  2.63M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.63M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  2.63M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  2.63M|    auto it = range.begin();
 1903|  2.63M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  2.63M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  2.63M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.63M]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|  2.63M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 2.63M, False: 0]
  ------------------
 1912|  2.63M|        ++it;
 1913|  2.63M|        return {it, string_type(1, *range.begin())};
 1914|  2.63M|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|  2.63M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|  4.90M|{
  944|  4.90M|    return is_range_eof(r.begin(), r.end());
  945|  4.90M|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|  4.90M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  4.90M|    {
  937|  4.90M|        return begin == end;
  938|  4.90M|    }
  939|  4.90M|}
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|   552k|    {
  190|   552k|        i = std::move(bound);
  191|   552k|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1889|  2.63M|    {
 1890|  2.63M|        return !codepoint.empty();
 1891|  2.63M|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|  2.26M|{
  950|  2.26M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  2.26M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.37k, False: 2.26M]
  |  |  ------------------
  ------------------
  951|  4.37k|        return eof_error::eof;
  952|  4.37k|    }
  953|  2.26M|    return eof_error::good;
  954|  2.26M|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|  1.17M|{
 1846|  1.17M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 524, False: 1.17M]
  |  |  ------------------
  ------------------
 1847|    524|        return unexpected(e);
 1848|    524|    }
 1849|       |
 1850|  1.17M|    return ranges::next(range.begin());
 1851|  1.17M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  1.17M|    {
  296|  1.17M|        ++x;
  297|  1.17M|        return x;
  298|  1.17M|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|   862k|{
 3141|   862k|    auto r = read_one_of_code_unit(range, "+-");
 3142|   862k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 857k, False: 5.38k]
  ------------------
 3143|   857k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 857k, False: 30]
  ------------------
 3144|   857k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|   857k|        }
 3146|     30|        return unexpected(eof_error::eof);
 3147|   857k|    }
 3148|       |
 3149|  5.38k|    auto& it = *r;
 3150|  5.38k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 4.24k, False: 1.13k]
  ------------------
 3151|  4.24k|        return std::pair{it, sign_type::minus_sign};
 3152|  4.24k|    }
 3153|  1.13k|    return std::pair{it, sign_type::plus_sign};
 3154|  5.38k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|   976k|{
 2272|   976k|    auto it = read_code_unit(range);
 2273|   976k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   976k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 264, False: 976k]
  |  |  ------------------
  ------------------
 2274|    264|        return unexpected(make_eof_parse_error(it.error()));
 2275|    264|    }
 2276|       |
 2277|  1.95M|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 1.95M, False: 965k]
  ------------------
 2278|  1.95M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 11.5k, False: 1.94M]
  ------------------
 2279|  11.5k|            return *it;
 2280|  11.5k|        }
 2281|  1.95M|    }
 2282|       |
 2283|   965k|    return unexpected(parse_error::error);
 2284|   976k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  2.26M|{
 2231|  2.26M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|       |    if constexpr (ranges::contiguous_range<Range> &&
 2234|       |                  std::is_same_v<char_type, char>) {
 2235|       |        if (range.size() < str.size()) {
 2236|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|       |        }
 2238|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|       |            return unexpected(parse_error::error);
 2240|       |        }
 2241|       |        return ranges::next(range.begin(), str.size());
 2242|       |    }
 2243|  2.26M|    else {
 2244|  2.26M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  2.26M|            if (ch < 'A' || ch > 'Z') {
 2246|  2.26M|                return ch;
 2247|  2.26M|            }
 2248|  2.26M|            return static_cast<char_type>(ch +
 2249|  2.26M|                                          static_cast<char_type>('a' - 'A'));
 2250|  2.26M|        };
 2251|       |
 2252|  2.26M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  2.26M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.26M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.26M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.26M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 59.8k, False: 2.20M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  59.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  59.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  59.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  59.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  59.8k|    }                                                  \
  |  |  |  | 3671|  2.26M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.20M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  2.20M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  2.20M|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  2.20M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  2.20M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.20M, False: 1.44k]
  |  |  ------------------
  ------------------
 2257|  2.20M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  2.20M|                    return ascii_tolower(a) ==
 2259|  2.20M|                           static_cast<detail::char_t<Range>>(b);
 2260|  2.20M|                }))) {
 2261|  2.20M|            return unexpected(parse_error::error);
 2262|  2.20M|        }
 2263|       |
 2264|  1.44k|        return it;
 2265|  2.20M|    }
 2266|  2.26M|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2244|  2.58M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  2.58M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 2.02M, False: 560k]
  |  Branch (2245:29): [True: 543k, False: 17.0k]
  ------------------
 2246|  2.56M|                return ch;
 2247|  2.56M|            }
 2248|  17.0k|            return static_cast<char_type>(ch +
 2249|  17.0k|                                          static_cast<char_type>('a' - 'A'));
 2250|  2.58M|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|   197k|{
 2146|   197k|    auto it = read_code_unit(range);
 2147|   197k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   197k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 260, False: 196k]
  |  |  ------------------
  ------------------
 2148|    260|        return unexpected(make_eof_parse_error(it.error()));
 2149|    260|    }
 2150|       |
 2151|   196k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   196k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 195k, False: 1.24k]
  |  |  ------------------
  ------------------
 2152|   196k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|   195k|        return unexpected(parse_error::error);
 2154|   195k|    }
 2155|       |
 2156|  1.24k|    return *it;
 2157|   196k|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|   507k|{
 1976|   507k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|   507k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|   507k|{
 1957|   507k|    if constexpr (ranges::common_range<Range>) {
 1958|   507k|        return std::find_if(range.begin(), range.end(), pred);
 1959|       |    }
 1960|       |    else {
 1961|       |        auto first = range.begin();
 1962|       |        for (; first != range.end(); ++first) {
 1963|       |            if (pred(*first)) {
 1964|       |                return first;
 1965|       |            }
 1966|       |        }
 1967|       |        return first;
 1968|       |    }
 1969|   507k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|   860k|{
 2951|   860k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 860k, False: 0]
  ------------------
 2952|   860k|        auto it = read_while_classic_space(range);
 2953|   860k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   860k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   860k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.37k, False: 856k]
  |  |  ------------------
  ------------------
 2955|  3.37k|            return unexpected(e);
 2956|  3.37k|        }
 2957|       |
 2958|   856k|        return it;
 2959|   860k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   860k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|   860k|{
 2117|       |    if constexpr (ranges::contiguous_range<Range> &&
 2118|       |                  ranges::sized_range<Range> &&
 2119|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2120|       |        auto buf = make_contiguous_buffer(range);
 2121|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|       |        return ranges::next(range.begin(),
 2123|       |                            ranges::distance(buf.view().begin(), it));
 2124|       |    }
 2125|   860k|    else {
 2126|   860k|        auto it = range.begin();
 2127|       |
 2128|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|       |            auto seg = get_contiguous_beginning(range);
 2130|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|       |                seg_it != seg.end()) {
 2132|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|       |            }
 2134|       |            ranges::advance(it, seg.size());
 2135|       |        }
 2136|       |
 2137|   860k|        return read_while_code_point(
 2138|   860k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   860k|    }
 2140|   860k|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|   860k|{
 2082|   860k|    return read_until_code_point(range, std::not_fn(pred));
 2083|   860k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|  1.46M|{
 2061|  1.46M|    auto it = range.begin();
 2062|  3.01M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 2.63M, False: 377k]
  ------------------
 2063|  2.63M|        const auto val =
 2064|  2.63M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  2.63M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  2.63M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.63M, False: 0]
  |  |  ------------------
  ------------------
 2066|  2.63M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  2.63M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  2.63M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 1.09M, False: 1.54M]
  ------------------
 2069|  1.09M|                return it;
 2070|  1.09M|            }
 2071|  2.63M|        }
 2072|  1.54M|        it = val.iterator;
 2073|  1.54M|    }
 2074|       |
 2075|   377k|    return it;
 2076|  1.46M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|   860k|        : m_fptr([](storage fn,
  743|   860k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   860k|              cvref<T> obj = *get<T>(fn);
  745|   860k|              if constexpr (std::is_void_v<R>) {
  746|   860k|                  obj(static_cast<decltype(args)>(args)...);
  747|   860k|              }
  748|   860k|              else {
  749|   860k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   860k|              }
  751|   860k|          }),
  752|   860k|          m_storage(std::addressof(f))
  753|   860k|    {
  754|   860k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|  1.48M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.48M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.48M|              else {
  749|  1.48M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.48M|              }
  751|  1.48M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  1.48M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.48M|        else if constexpr (std::is_object_v<T>) {
  688|  1.48M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.48M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2138|  1.48M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|   860k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   860k|        {
  662|   860k|        }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  1.98M|    {
  304|  1.98M|        ranges::advance(x, n);
  305|  1.98M|        return x;
  306|  1.98M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  1.98M|    {
  268|  1.98M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.98M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  1.98M|    {
  181|  6.34M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 4.35M, False: 1.98M]
  ------------------
  182|  4.35M|            ++i;
  183|  4.35M|        }
  184|  1.98M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6192|   196k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|       |                          basic_contiguous_scan_context<char_type>>) {
 6197|       |            auto rd = make_reader<T, char_type>();
 6198|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|       |                return unexpected(e);
 6200|       |            }
 6201|       |
 6202|       |            return impl(rd, range, value);
 6203|       |        }
 6204|   196k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   196k|            auto rd = make_reader<T, char_type>();
 6206|   196k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   196k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 196k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   196k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 196k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   196k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   196k|                return impl(rd, range, value);
 6213|   196k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|   196k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|  1.25M|    {
 3040|  1.25M|        reader_error_handler eh{};
 3041|  1.25M|        get_derived().check_specs_impl(specs, eh);
 3042|  1.25M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  1.25M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.25M]
  |  |  ------------------
  ------------------
 3043|      0|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|      0|        }
 3045|  1.25M|        return {};
 3046|  1.25M|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3050|  1.25M|    {
 3051|  1.25M|        return static_cast<Derived&>(*this);
 3052|  1.25M|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4144|  1.25M|    {
 4145|  1.25M|        detail::check_float_type_specs(specs, eh);
 4146|  1.25M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   196k|    {
 6124|   196k|        const bool need_skipped_width =
 6125|   196k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 196k]
  |  Branch (6125:33): [True: 0, False: 196k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   196k|        auto it = rng.begin();
 6129|   196k|        std::ptrdiff_t prefix_width = 0;
 6130|   196k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 196k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   196k|        else {
 6138|   196k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   196k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   196k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   196k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   196k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 894, False: 195k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    894|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    894|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    894|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    894|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    894|    }                                                  \
  |  |  |  | 3671|   196k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   195k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   195k|            std::tie(it, prefix_width) = prefix_result;
 6140|   195k|        }
 6141|   195k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   195k|        std::ptrdiff_t value_width = 0;
 6145|   195k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 195k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   195k|        else {
 6161|   195k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   195k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   195k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   195k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 63.1k, False: 131k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  63.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  63.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  63.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  63.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  63.1k|    }                                                  \
  |  | 3671|   195k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   195k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   131k|                                             specs, value, loc));
 6163|       |
 6164|   131k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 131k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   131k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   131k|        std::ptrdiff_t postfix_width = 0;
 6173|   131k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 131k, False: 396]
  ------------------
 6174|   131k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   131k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   131k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   131k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   131k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 131k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   131k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   131k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   131k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   131k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   131k|                                 value_width));
 6178|   131k|            std::tie(it, postfix_width) = postfix_result;
 6179|   131k|        }
 6180|       |
 6181|   131k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   131k|                                                 value_width, postfix_width);
 6183|   131k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 131k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   131k|        return it;
 6188|   131k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3034|  2.59M|    {
 3035|  2.59M|        return true;
 3036|  2.59M|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4216|  1.25M|    {
 4217|  1.25M|        unsigned options{};
 4218|  1.25M|        if (specs.localized) {
  ------------------
  |  Branch (4218:13): [True: 306k, False: 946k]
  ------------------
 4219|   306k|            options |= float_reader_base::allow_thsep;
 4220|   306k|        }
 4221|       |
 4222|  1.25M|        SCN_GCC_COMPAT_PUSH
 4223|  1.25M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4224|       |
 4225|  1.25M|        switch (specs.type) {
 4226|   242k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4226:13): [True: 242k, False: 1.01M]
  ------------------
 4227|   242k|                return options | float_reader_base::allow_fixed;
 4228|       |
 4229|  78.4k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4229:13): [True: 78.4k, False: 1.17M]
  ------------------
 4230|  78.4k|                return options | float_reader_base::allow_scientific;
 4231|       |
 4232|   336k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4232:13): [True: 336k, False: 915k]
  ------------------
 4233|   336k|                return options | float_reader_base::allow_hex;
 4234|       |
 4235|   288k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4235:13): [True: 288k, False: 964k]
  ------------------
 4236|   288k|                return options | float_reader_base::allow_scientific |
 4237|   288k|                       float_reader_base::allow_fixed;
 4238|       |
 4239|   306k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4239:13): [True: 306k, False: 946k]
  ------------------
 4240|   306k|                return options | float_reader_base::allow_scientific |
 4241|   306k|                       float_reader_base::allow_fixed |
 4242|   306k|                       float_reader_base::allow_hex;
 4243|       |
 4244|      0|            default:
  ------------------
  |  Branch (4244:13): [True: 0, False: 1.25M]
  ------------------
 4245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4246|  1.25M|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4247|  1.25M|        }
 4248|       |
 4249|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4250|  1.25M|    }
_ZN3scn2v34impl12float_readerIwEC2Ej:
 3659|  1.25M|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2Ev:
 1770|  1.71M|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIwEC2Ev:
 1531|  3.42M|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIwE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3690|   407k|    {
 3691|   407k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   407k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   407k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   407k|        const std::ptrdiff_t sign_len =
 3694|   407k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 2.15k, False: 404k]
  ------------------
 3695|       |
 3696|   407k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   407k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   407k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   407k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   407k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 47.6k, False: 359k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  47.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  47.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  47.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  47.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  47.6k|    }                                                  \
  |  |  |  | 3671|   407k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   359k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|   359k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   407k|    }
_ZN3scn2v34impl12float_readerIwE17handle_separatorsEv:
 4056|  1.35M|    {
 4057|  1.35M|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4057:13): [True: 1.35M, False: 0]
  ------------------
 4058|  1.35M|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4058:13): [True: 1.35M, False: 0]
  ------------------
 4059|  1.35M|            return;
 4060|  1.35M|        }
 4061|       |
 4062|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4063|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4063:13): [True: 0, False: 0]
  ------------------
 4064|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4064:27): [True: 0, False: 0]
  ------------------
 4065|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4065:21): [True: 0, False: 0]
  ------------------
 4066|      0|                    ch = CharT{'.'};
 4067|      0|                }
 4068|      0|            }
 4069|      0|        }
 4070|       |
 4071|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4071:13): [True: 0, False: 0]
  ------------------
 4072|      0|            return;
 4073|      0|        }
 4074|       |
 4075|      0|        auto first =
 4076|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4077|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4077:13): [True: 0, False: 0]
  ------------------
 4078|      0|            return;
 4079|      0|        }
 4080|       |
 4081|      0|        m_thsep_indices.push_back(
 4082|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4083|       |
 4084|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4084:31): [True: 0, False: 0]
  ------------------
 4085|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4085:17): [True: 0, False: 0]
  ------------------
 4086|      0|                *first++ = std::move(*it);
 4087|      0|            }
 4088|      0|            else {
 4089|      0|                m_thsep_indices.push_back(
 4090|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4091|      0|            }
 4092|      0|        }
 4093|       |
 4094|      0|        str.erase(first, str.end());
 4095|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1586|  1.50M|    {
 1587|  1.50M|        return m_storage.has_value();
 1588|  1.50M|    }
_ZNR3scn2v34impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1591|   881k|    {
 1592|   881k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|   881k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   881k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|   881k|        return *m_storage;
 1594|   881k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   195k|    {
 4170|   195k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   195k|#if !SCN_DISABLE_LOCALE
 4173|   195k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 44.3k, False: 150k]
  ------------------
 4174|  44.3k|            return read_impl<Range>(
 4175|  44.3k|                range, rd,
 4176|  44.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  44.3k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  44.3k|                },
 4179|  44.3k|                value, loc);
 4180|  44.3k|        }
 4181|   150k|#endif
 4182|       |
 4183|   150k|        return read_impl<Range>(
 4184|   150k|            range, rd,
 4185|   150k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   150k|                return r.read_source(SCN_FWD(args)...);
 4187|   150k|            },
 4188|   150k|            value);
 4189|   195k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   261k|    {
 4206|   261k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   261k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   261k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 79.2k, False: 182k]
  |  |  ------------------
  ------------------
 4208|  79.2k|            return unexpected(r.error());
 4209|  79.2k|        }
 4210|       |
 4211|   182k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   182k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   182k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   182k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   182k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.78k, False: 179k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.78k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.78k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.78k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.78k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.78k|    }                                                  \
  |  |  |  | 3671|   182k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   179k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   179k|        return ranges::next(range.begin(), n);
 4213|   182k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|   855k|    {
  763|   855k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   855k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   855k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  44.3k|        : m_fptr([](storage fn,
  743|  44.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  44.3k|              cvref<T> obj = *get<T>(fn);
  745|  44.3k|              if constexpr (std::is_void_v<R>) {
  746|  44.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  44.3k|              }
  748|  44.3k|              else {
  749|  44.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  44.3k|              }
  751|  44.3k|          }),
  752|  44.3k|          m_storage(std::addressof(f))
  753|  44.3k|    {
  754|  44.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  44.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  44.3k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  44.3k|              else {
  749|  44.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  44.3k|              }
  751|  44.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  44.3k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  44.3k|        else if constexpr (std::is_object_v<T>) {
  688|  44.3k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  44.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  44.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  44.3k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  44.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  44.3k|                },
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3678|   153k|    {
 3679|   153k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|   153k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|   153k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 153k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|   153k|        return read_source_impl(range);
 3685|   153k|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3704|   855k|    {
 3705|   855k|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|   855k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   855k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   855k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   855k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 855k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   855k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   855k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|   855k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|   855k|        auto it = sign_result.first;
 3708|   855k|        m_sign = sign_result.second;
 3709|       |
 3710|   855k|        auto digits_begin = it;
 3711|   855k|        auto r = ranges::subrange{it, range.end()};
 3712|       |        if constexpr (ranges::contiguous_range<Range> &&
 3713|       |                      ranges::sized_range<Range>) {
 3714|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3715|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|       |                SCN_TRY_ASSIGN(
 3717|       |                    it,
 3718|       |                    do_read_source_impl(
 3719|       |                        r,
 3720|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|       |            }
 3723|       |            else {
 3724|       |                auto cb = [&](const auto& rr)
 3725|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|       |                    auto res = read_all(rr);
 3727|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|       |                        return unexpected_scan_error(
 3729|       |                            scan_error::invalid_scanned_value,
 3730|       |                            "Invalid float value");
 3731|       |                    }
 3732|       |                    return res;
 3733|       |                };
 3734|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3735|       |            }
 3736|       |        }
 3737|   855k|        else {
 3738|   855k|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|   855k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   855k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   855k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 241k, False: 614k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|   241k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|   241k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|   241k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|   241k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|   241k|    }                                                  \
  |  | 3671|   855k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   855k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3739|   614k|                it,
 3740|   614k|                do_read_source_impl(
 3741|   614k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|   614k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|   614k|        }
 3744|       |
 3745|   855k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   855k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   855k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|   614k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 614k, False: 0]
  |  Branch (3747:48): [True: 614k, False: 0]
  ------------------
 3748|   614k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 614k, False: 0]
  ------------------
 3749|   614k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 614k, False: 0]
  ------------------
 3750|   614k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|   614k|        }
 3752|       |
 3753|   614k|        handle_separators();
 3754|       |
 3755|   614k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 614k]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|   614k|        return it;
 3768|   614k|    }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 3999|   855k|    {
 4000|   855k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|   855k|        const bool allowed_nonhex =
 4002|   855k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|   855k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|   855k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 855k, False: 0]
  |  Branch (4005:45): [True: 0, False: 855k]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|   855k|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 855k]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|   855k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 855k, False: 0]
  |  Branch (4014:45): [True: 0, False: 855k]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|   855k|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 855k]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|   855k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 551k, False: 304k]
  |  Branch (4021:28): [True: 168k, False: 383k]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|   168k|            auto it = range.begin();
 4025|       |
 4026|   168k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 438, False: 167k]
  ------------------
 4027|    438|                m_kind = float_kind::hex_with_prefix;
 4028|    438|                it = *r;
 4029|    438|            }
 4030|   167k|            else {
 4031|   167k|                m_kind = float_kind::hex_without_prefix;
 4032|   167k|            }
 4033|       |
 4034|   168k|            return read_hex(ranges::subrange{it, range.end()});
 4035|   168k|        }
 4036|   687k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 304k, False: 383k]
  |  Branch (4036:29): [True: 304k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   304k|            m_kind = float_kind::generic;
 4040|   304k|            return read_regular_float(range);
 4041|   304k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|   383k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   383k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.01k, False: 382k]
  |  |  ------------------
  ------------------
 4047|  1.01k|            m_kind = float_kind::hex_with_prefix;
 4048|  1.01k|            return read_hex(ranges::subrange{*r, range.end()});
 4049|  1.01k|        }
 4050|       |
 4051|   382k|        m_kind = float_kind::generic;
 4052|   382k|        return read_regular(range);
 4053|   383k|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3810|   855k|    {
 3811|   855k|        auto it = range.begin();
 3812|   855k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 855k, False: 0]
  ------------------
 3813|   855k|            return unexpected(r.error());
 3814|   855k|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3833|   855k|    {
 3834|   855k|        auto it = range.begin();
 3835|   855k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 855k, False: 0]
  ------------------
 3836|   855k|            return r.transform_error(map_parse_error_to_scan_error(
 3837|   855k|                scan_error::invalid_scanned_value,
 3838|   855k|                "Invalid floating-point NaN value"));
 3839|   855k|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3803|   551k|    {
 3804|   551k|        return read_matching_string_classic_nocase(range, "0x");
 3805|   551k|    }
_ZN3scn2v34impl12float_readerIwE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3903|   169k|    {
 3904|   169k|        auto it = range.begin();
 3905|       |
 3906|   169k|        std::ptrdiff_t digits_count = 0;
 3907|   169k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3908|   169k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   169k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 37.8k, False: 131k]
  |  |  ------------------
  ------------------
 3909|  37.8k|            return r.transform_error(map_parse_error_to_scan_error(
 3910|  37.8k|                scan_error::invalid_scanned_value,
 3911|  37.8k|                "Invalid hexadecimal floating-point value"));
 3912|  37.8k|        }
 3913|   131k|        else {
 3914|   131k|            digits_count += ranges::distance(it, *r);
 3915|   131k|            it = *r;
 3916|   131k|        }
 3917|       |
 3918|   131k|        m_integral_part_length = digits_count;
 3919|   131k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3919:18): [True: 564, False: 130k]
  ------------------
 3920|   131k|                                             m_locale_options.decimal_point)) {
 3921|    564|            it = *r;
 3922|    564|        }
 3923|       |
 3924|   131k|        if (auto r =
  ------------------
  |  Branch (3924:18): [True: 462, False: 130k]
  ------------------
 3925|   131k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3926|    462|            digits_count += ranges::distance(it, *r);
 3927|    462|            it = *r;
 3928|    462|        }
 3929|       |
 3930|   131k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   131k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 131k]
  |  |  ------------------
  ------------------
 3931|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3932|      0|                                         "No significand digits in hexfloat");
 3933|      0|        }
 3934|       |
 3935|   131k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3936|       |
 3937|   131k|        return it;
 3938|   131k|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3788|   300k|    {
 3789|   300k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   300k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 300k]
  |  |  |  Branch (859:45): [True: 0, False: 300k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3790|   300k|                         thsep_allowed)) {
 3791|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3792|      0|                return char_to_int(ch) < 16 ||
 3793|      0|                       ch == m_locale_options.thousands_sep;
 3794|      0|            });
 3795|      0|        }
 3796|       |
 3797|   300k|        return read_while1_code_unit(
 3798|   300k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3799|   300k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|   300k|        : m_fptr([](storage fn,
  743|   300k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   300k|              cvref<T> obj = *get<T>(fn);
  745|   300k|              if constexpr (std::is_void_v<R>) {
  746|   300k|                  obj(static_cast<decltype(args)>(args)...);
  747|   300k|              }
  748|   300k|              else {
  749|   300k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   300k|              }
  751|   300k|          }),
  752|   300k|          m_storage(std::addressof(f))
  753|   300k|    {
  754|   300k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|   469k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   469k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   469k|              else {
  749|   469k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   469k|              }
  751|   469k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|   469k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   469k|        else if constexpr (std::is_object_v<T>) {
  688|   469k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   469k|    }
_ZZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3798|   469k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   300k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   300k|        {
  662|   300k|        }
_ZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3875|   536k|    {
 3876|   536k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 17.9k, False: 518k]
  ------------------
 3877|  17.9k|            auto beg_exp_it = range.begin();
 3878|  17.9k|            auto it = *r;
 3879|       |
 3880|  17.9k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 17.9k, False: 91]
  ------------------
 3881|  17.9k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|  17.9k|                it = r_sign->first;
 3883|  17.9k|            }
 3884|       |
 3885|  17.9k|            if (auto r_exp = read_while1_code_unit(
 3886|  17.9k|                    ranges::subrange{it, range.end()},
 3887|  17.9k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|  17.9k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  17.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.62k, False: 16.3k]
  |  |  ------------------
  ------------------
 3889|  1.62k|                it = beg_exp_it;
 3890|  1.62k|            }
 3891|  16.3k|            else {
 3892|  16.3k|                it = *r_exp;
 3893|  16.3k|            }
 3894|       |
 3895|  17.9k|            return it;
 3896|  17.9k|        }
 3897|   518k|        return range.begin();
 3898|   536k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|  17.9k|        : m_fptr([](storage fn,
  743|  17.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  17.9k|              cvref<T> obj = *get<T>(fn);
  745|  17.9k|              if constexpr (std::is_void_v<R>) {
  746|  17.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  17.9k|              }
  748|  17.9k|              else {
  749|  17.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  17.9k|              }
  751|  17.9k|          }),
  752|  17.9k|          m_storage(std::addressof(f))
  753|  17.9k|    {
  754|  17.9k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES15_w:
  743|  62.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  62.1k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  62.1k|              else {
  749|  62.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  62.1k|              }
  751|  62.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  62.1k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  62.1k|        else if constexpr (std::is_object_v<T>) {
  688|  62.1k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  62.1k|    }
_ZZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlwE_clEw:
 3887|  62.1k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|  17.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  17.9k|        {
  662|  17.9k|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3943|   686k|    {
 3944|   686k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|   686k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 565k, False: 121k]
  |  Branch (3945:50): [True: 39.2k, False: 526k]
  ------------------
 3946|       |
 3947|   686k|        auto it = ranges::begin(range);
 3948|   686k|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|   686k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|   686k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   686k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 198k, False: 488k]
  |  |  ------------------
  ------------------
 3952|   198k|            return r.transform_error(
 3953|   198k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|   198k|                                              "Invalid floating-point value"));
 3955|   198k|        }
 3956|   488k|        else {
 3957|   488k|            digits_count += ranges::distance(it, *r);
 3958|   488k|            it = *r;
 3959|   488k|        }
 3960|       |
 3961|   488k|        m_integral_part_length = digits_count;
 3962|   488k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 2.51k, False: 485k]
  ------------------
 3963|   488k|                                             m_locale_options.decimal_point)) {
 3964|  2.51k|            it = *r;
 3965|  2.51k|        }
 3966|       |
 3967|   488k|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 2.09k, False: 485k]
  ------------------
 3968|   488k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|  2.09k|            digits_count += ranges::distance(it, *r);
 3970|  2.09k|            it = *r;
 3971|  2.09k|        }
 3972|       |
 3973|   488k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   488k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 488k]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|   488k|        auto beg_exp_it = it;
 3979|   488k|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 404k, False: 83.1k]
  ------------------
 3980|   404k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|   404k|        }
 3982|   488k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 6.43k, False: 481k]
  |  Branch (3982:29): [True: 5.18k, False: 1.25k]
  ------------------
 3983|  5.18k|            return unexpected_scan_error(
 3984|  5.18k|                scan_error::invalid_scanned_value,
 3985|  5.18k|                "No exponent given to scientific float");
 3986|  5.18k|        }
 3987|       |
 3988|   482k|        m_kind =
 3989|   482k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 466k, False: 16.2k]
  ------------------
 3990|       |
 3991|   482k|        return it;
 3992|   488k|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3773|  1.17M|    {
 3774|  1.17M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|  1.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.17M]
  |  |  |  Branch (859:45): [True: 0, False: 1.17M]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|  1.17M|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|  1.17M|        return read_while1_code_unit(
 3783|  1.17M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|  1.17M|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|  1.17M|        : m_fptr([](storage fn,
  743|  1.17M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.17M|              cvref<T> obj = *get<T>(fn);
  745|  1.17M|              if constexpr (std::is_void_v<R>) {
  746|  1.17M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.17M|              }
  748|  1.17M|              else {
  749|  1.17M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.17M|              }
  751|  1.17M|          }),
  752|  1.17M|          m_storage(std::addressof(f))
  753|  1.17M|    {
  754|  1.17M|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|  1.75M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.75M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.75M|              else {
  749|  1.75M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.75M|              }
  751|  1.75M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|  1.75M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.75M|        else if constexpr (std::is_object_v<T>) {
  688|  1.75M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.75M|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3783|  1.75M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  1.17M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.17M|        {
  662|  1.17M|        }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSG_:
 1576|   614k|    {
 1577|   614k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   614k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|   614k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  44.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  44.3k|        {
  662|  44.3k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   150k|        : m_fptr([](storage fn,
  743|   150k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   150k|              cvref<T> obj = *get<T>(fn);
  745|   150k|              if constexpr (std::is_void_v<R>) {
  746|   150k|                  obj(static_cast<decltype(args)>(args)...);
  747|   150k|              }
  748|   150k|              else {
  749|   150k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   150k|              }
  751|   150k|          }),
  752|   150k|          m_storage(std::addressof(f))
  753|   150k|    {
  754|   150k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   150k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   150k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   150k|              else {
  749|   150k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   150k|              }
  751|   150k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   150k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   150k|        else if constexpr (std::is_object_v<T>) {
  688|   150k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   150k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   150k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   150k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   150k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   150k|            },
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3664|   702k|    {
 3665|   702k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   702k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 702k]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|   702k|        return read_source_impl(range);
 3671|   702k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   150k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   150k|        {
  662|   150k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   195k|    {
 4170|   195k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   195k|#if !SCN_DISABLE_LOCALE
 4173|   195k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 44.3k, False: 150k]
  ------------------
 4174|  44.3k|            return read_impl<Range>(
 4175|  44.3k|                range, rd,
 4176|  44.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  44.3k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  44.3k|                },
 4179|  44.3k|                value, loc);
 4180|  44.3k|        }
 4181|   150k|#endif
 4182|       |
 4183|   150k|        return read_impl<Range>(
 4184|   150k|            range, rd,
 4185|   150k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   150k|                return r.read_source(SCN_FWD(args)...);
 4187|   150k|            },
 4188|   150k|            value);
 4189|   195k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   261k|    {
 4206|   261k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   261k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   261k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 37.2k, False: 224k]
  |  |  ------------------
  ------------------
 4208|  37.2k|            return unexpected(r.error());
 4209|  37.2k|        }
 4210|       |
 4211|   224k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   224k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   224k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   224k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   224k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 44.8k, False: 179k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  44.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  44.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  44.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  44.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  44.8k|    }                                                  \
  |  |  |  | 3671|   224k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   179k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   179k|        return ranges::next(range.begin(), n);
 4213|   224k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|   856k|    {
  763|   856k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   856k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   856k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  44.3k|        : m_fptr([](storage fn,
  743|  44.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  44.3k|              cvref<T> obj = *get<T>(fn);
  745|  44.3k|              if constexpr (std::is_void_v<R>) {
  746|  44.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  44.3k|              }
  748|  44.3k|              else {
  749|  44.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  44.3k|              }
  751|  44.3k|          }),
  752|  44.3k|          m_storage(std::addressof(f))
  753|  44.3k|    {
  754|  44.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  44.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  44.3k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  44.3k|              else {
  749|  44.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  44.3k|              }
  751|  44.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  44.3k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  44.3k|        else if constexpr (std::is_object_v<T>) {
  688|  44.3k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  44.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  44.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  44.3k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  44.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  44.3k|                },
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3678|   153k|    {
 3679|   153k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|   153k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|   153k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 153k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|   153k|        return read_source_impl(range);
 3685|   153k|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3704|   856k|    {
 3705|   856k|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|   856k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   856k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   856k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   856k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 856k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   856k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   856k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|   856k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|   856k|        auto it = sign_result.first;
 3708|   856k|        m_sign = sign_result.second;
 3709|       |
 3710|   856k|        auto digits_begin = it;
 3711|   856k|        auto r = ranges::subrange{it, range.end()};
 3712|       |        if constexpr (ranges::contiguous_range<Range> &&
 3713|   856k|                      ranges::sized_range<Range>) {
 3714|   856k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  1.71M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 856k]
  |  |  |  Branch (859:45): [True: 0, False: 856k]
  |  |  |  Branch (859:45): [True: 0, False: 856k]
  |  |  ------------------
  ------------------
 3715|   856k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|      0|    }                                                  \
  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3717|      0|                    it,
 3718|      0|                    do_read_source_impl(
 3719|      0|                        r,
 3720|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|      0|            }
 3723|   856k|            else {
 3724|   856k|                auto cb = [&](const auto& rr)
 3725|   856k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|   856k|                    auto res = read_all(rr);
 3727|   856k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|   856k|                        return unexpected_scan_error(
 3729|   856k|                            scan_error::invalid_scanned_value,
 3730|   856k|                            "Invalid float value");
 3731|   856k|                    }
 3732|   856k|                    return res;
 3733|   856k|                };
 3734|   856k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3667|   856k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   856k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   856k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 112k, False: 743k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|   112k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|   112k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|   112k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|   112k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|   112k|    }                                                  \
  |  | 3671|   856k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   856k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3735|   743k|            }
 3736|       |        }
 3737|       |        else {
 3738|       |            SCN_TRY_ASSIGN(
 3739|       |                it,
 3740|       |                do_read_source_impl(
 3741|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|       |        }
 3744|       |
 3745|   856k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   856k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   856k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|   743k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 743k, False: 0]
  |  Branch (3747:48): [True: 743k, False: 0]
  ------------------
 3748|   743k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 743k, False: 0]
  ------------------
 3749|   743k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 743k, False: 0]
  ------------------
 3750|   743k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|   743k|        }
 3752|       |
 3753|   743k|        handle_separators();
 3754|       |
 3755|   743k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 743k]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|   743k|        return it;
 3768|   743k|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3810|   856k|    {
 3811|   856k|        auto it = range.begin();
 3812|   856k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 856k, False: 0]
  ------------------
 3813|   856k|            return unexpected(r.error());
 3814|   856k|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|   856k|    {
 3834|   856k|        auto it = range.begin();
 3835|   856k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 856k, False: 0]
  ------------------
 3836|   856k|            return r.transform_error(map_parse_error_to_scan_error(
 3837|   856k|                scan_error::invalid_scanned_value,
 3838|   856k|                "Invalid floating-point NaN value"));
 3839|   856k|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3803|   552k|    {
 3804|   552k|        return read_matching_string_classic_nocase(range, "0x");
 3805|   552k|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|   507k|{
 1996|   507k|    auto it = read_while_code_unit(range, pred);
 1997|   507k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 304k, False: 203k]
  ------------------
 1998|   304k|        return unexpected(parse_error::error);
 1999|   304k|    }
 2000|   203k|    return it;
 2001|   507k|}
_ZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3875|   114k|    {
 3876|   114k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 6.14k, False: 107k]
  ------------------
 3877|  6.14k|            auto beg_exp_it = range.begin();
 3878|  6.14k|            auto it = *r;
 3879|       |
 3880|  6.14k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 6.11k, False: 30]
  ------------------
 3881|  6.14k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|  6.11k|                it = r_sign->first;
 3883|  6.11k|            }
 3884|       |
 3885|  6.14k|            if (auto r_exp = read_while1_code_unit(
 3886|  6.14k|                    ranges::subrange{it, range.end()},
 3887|  6.14k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|  6.14k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  6.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 614, False: 5.53k]
  |  |  ------------------
  ------------------
 3889|    614|                it = beg_exp_it;
 3890|    614|            }
 3891|  5.53k|            else {
 3892|  5.53k|                it = *r_exp;
 3893|  5.53k|            }
 3894|       |
 3895|  6.14k|            return it;
 3896|  6.14k|        }
 3897|   107k|        return range.begin();
 3898|   114k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_:
  742|  6.14k|        : m_fptr([](storage fn,
  743|  6.14k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.14k|              cvref<T> obj = *get<T>(fn);
  745|  6.14k|              if constexpr (std::is_void_v<R>) {
  746|  6.14k|                  obj(static_cast<decltype(args)>(args)...);
  747|  6.14k|              }
  748|  6.14k|              else {
  749|  6.14k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.14k|              }
  751|  6.14k|          }),
  752|  6.14k|          m_storage(std::addressof(f))
  753|  6.14k|    {
  754|  6.14k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEwE_clES12_w:
  743|  21.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  21.1k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  21.1k|              else {
  749|  21.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  21.1k|              }
  751|  21.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  21.1k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  21.1k|        else if constexpr (std::is_object_v<T>) {
  688|  21.1k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  21.1k|    }
_ZZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlwE_clEw:
 3887|  21.1k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|  6.14k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  6.14k|        {
  662|  6.14k|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3943|   304k|    {
 3944|   304k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|   304k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 183k, False: 121k]
  |  Branch (3945:50): [True: 39.2k, False: 144k]
  ------------------
 3946|       |
 3947|   304k|        auto it = ranges::begin(range);
 3948|   304k|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|   304k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|   304k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   304k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 107k, False: 197k]
  |  |  ------------------
  ------------------
 3952|   107k|            return r.transform_error(
 3953|   107k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|   107k|                                              "Invalid floating-point value"));
 3955|   107k|        }
 3956|   197k|        else {
 3957|   197k|            digits_count += ranges::distance(it, *r);
 3958|   197k|            it = *r;
 3959|   197k|        }
 3960|       |
 3961|   197k|        m_integral_part_length = digits_count;
 3962|   197k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 1.24k, False: 195k]
  ------------------
 3963|   197k|                                             m_locale_options.decimal_point)) {
 3964|  1.24k|            it = *r;
 3965|  1.24k|        }
 3966|       |
 3967|   197k|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 1.02k, False: 196k]
  ------------------
 3968|   197k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|  1.02k|            digits_count += ranges::distance(it, *r);
 3970|  1.02k|            it = *r;
 3971|  1.02k|        }
 3972|       |
 3973|   197k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   197k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 197k]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|   197k|        auto beg_exp_it = it;
 3979|   197k|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 114k, False: 83.1k]
  ------------------
 3980|   114k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|   114k|        }
 3982|   197k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 6.43k, False: 190k]
  |  Branch (3982:29): [True: 5.18k, False: 1.25k]
  ------------------
 3983|  5.18k|            return unexpected_scan_error(
 3984|  5.18k|                scan_error::invalid_scanned_value,
 3985|  5.18k|                "No exponent given to scientific float");
 3986|  5.18k|        }
 3987|       |
 3988|   191k|        m_kind =
 3989|   191k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 186k, False: 5.53k]
  ------------------
 3990|       |
 3991|   191k|        return it;
 3992|   197k|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3773|   501k|    {
 3774|   501k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   501k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 501k]
  |  |  |  Branch (859:45): [True: 0, False: 501k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|   501k|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|   501k|        return read_while1_code_unit(
 3783|   501k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|   501k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|   501k|        : m_fptr([](storage fn,
  743|   501k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   501k|              cvref<T> obj = *get<T>(fn);
  745|   501k|              if constexpr (std::is_void_v<R>) {
  746|   501k|                  obj(static_cast<decltype(args)>(args)...);
  747|   501k|              }
  748|   501k|              else {
  749|   501k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   501k|              }
  751|   501k|          }),
  752|   501k|          m_storage(std::addressof(f))
  753|   501k|    {
  754|   501k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES10_w:
  743|   740k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   740k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   740k|              else {
  749|   740k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   740k|              }
  751|   740k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  683|   740k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   740k|        else if constexpr (std::is_object_v<T>) {
  688|   740k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   740k|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3783|   740k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   501k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   501k|        {
  662|   501k|        }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3999|   856k|    {
 4000|   856k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|   856k|        const bool allowed_nonhex =
 4002|   856k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|   856k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|   856k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 856k, False: 0]
  |  Branch (4005:45): [True: 0, False: 856k]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|   856k|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 856k]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|   856k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 856k, False: 0]
  |  Branch (4014:45): [True: 0, False: 856k]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|   856k|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 856k]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|   856k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 552k, False: 304k]
  |  Branch (4021:28): [True: 168k, False: 383k]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|   168k|            auto it = range.begin();
 4025|       |
 4026|   168k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 438, False: 168k]
  ------------------
 4027|    438|                m_kind = float_kind::hex_with_prefix;
 4028|    438|                it = *r;
 4029|    438|            }
 4030|   168k|            else {
 4031|   168k|                m_kind = float_kind::hex_without_prefix;
 4032|   168k|            }
 4033|       |
 4034|   168k|            return read_hex(ranges::subrange{it, range.end()});
 4035|   168k|        }
 4036|   688k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 304k, False: 383k]
  |  Branch (4036:29): [True: 304k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   304k|            m_kind = float_kind::generic;
 4040|   304k|            return read_regular_float(range);
 4041|   304k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|   383k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   383k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.01k, False: 382k]
  |  |  ------------------
  ------------------
 4047|  1.01k|            m_kind = float_kind::hex_with_prefix;
 4048|  1.01k|            return read_hex(ranges::subrange{*r, range.end()});
 4049|  1.01k|        }
 4050|       |
 4051|   382k|        m_kind = float_kind::generic;
 4052|   382k|        return read_regular(range);
 4053|   383k|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3725|   552k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|   552k|                    auto res = read_all(rr);
 3727|   552k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|   552k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 151, False: 551k]
  |  |  ------------------
  ------------------
 3728|    151|                        return unexpected_scan_error(
 3729|    151|                            scan_error::invalid_scanned_value,
 3730|    151|                            "Invalid float value");
 3731|    151|                    }
 3732|   551k|                    return res;
 3733|   552k|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|   552k|{
 1839|   552k|    return ranges::next(range.begin(), range.end());
 1840|   552k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|   552k|    {
  313|   552k|        ranges::advance(x, bound);
  314|   552k|        return x;
  315|   552k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|   552k|    {
  275|   552k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|   552k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1576|   743k|    {
 1577|   743k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   743k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|   743k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1620|   743k|    {
 1621|   743k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|       |        if constexpr (ranges::borrowed_range<Range> &&
 1624|       |                      ranges::contiguous_range<Range> &&
 1625|   743k|                      ranges::sized_range<Range>) {
 1626|   743k|            m_storage.reset();
 1627|   743k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|       |        }
 1629|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|       |                                          std::basic_string<CharT>>) {
 1631|       |            m_storage.emplace(SCN_FWD(range));
 1632|       |            m_view = string_view_type{*m_storage};
 1633|       |        }
 1634|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|       |                                          typename detail::basic_scan_buffer<
 1636|       |                                              value_t>::forward_iterator> &&
 1637|       |                           ranges::common_range<Range>) {
 1638|       |            auto beg_seg = range.begin().contiguous_segment();
 1639|       |            auto end_seg = range.end().contiguous_segment();
 1640|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|       |                             detail::to_address(end_seg.end()))) {
 1642|       |                auto& str = m_storage.emplace();
 1643|       |                str.reserve(range.end().position() - range.begin().position());
 1644|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|       |                m_view = string_view_type{str};
 1646|       |                return;
 1647|       |            }
 1648|       |
 1649|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|       |                                                            end_seg.data());
 1651|       |            m_storage.reset();
 1652|       |        }
 1653|       |        else {
 1654|       |            auto& str = m_storage.emplace();
 1655|       |            if constexpr (ranges::sized_range<Range>) {
 1656|       |                str.reserve(range.size());
 1657|       |            }
 1658|       |            if constexpr (ranges::common_range<Range>) {
 1659|       |                std::copy(ranges::begin(range), ranges::end(range),
 1660|       |                          std::back_inserter(str));
 1661|       |            }
 1662|       |            else {
 1663|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|       |                     ++it) {
 1665|       |                    str.push_back(*it);
 1666|       |                }
 1667|       |            }
 1668|       |            m_view = string_view_type{str};
 1669|       |        }
 1670|   743k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  44.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  44.3k|        {
  662|  44.3k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   150k|        : m_fptr([](storage fn,
  743|   150k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   150k|              cvref<T> obj = *get<T>(fn);
  745|   150k|              if constexpr (std::is_void_v<R>) {
  746|   150k|                  obj(static_cast<decltype(args)>(args)...);
  747|   150k|              }
  748|   150k|              else {
  749|   150k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   150k|              }
  751|   150k|          }),
  752|   150k|          m_storage(std::addressof(f))
  753|   150k|    {
  754|   150k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   150k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   150k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   150k|              else {
  749|   150k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   150k|              }
  751|   150k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   150k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   150k|        else if constexpr (std::is_object_v<T>) {
  688|   150k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   150k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   150k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   150k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   150k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   150k|            },
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3664|   703k|    {
 3665|   703k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   703k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 703k]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|   703k|        return read_source_impl(range);
 3671|   703k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   150k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   150k|        {
  662|   150k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6192|   214k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|       |                          basic_contiguous_scan_context<char_type>>) {
 6197|       |            auto rd = make_reader<T, char_type>();
 6198|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|       |                return unexpected(e);
 6200|       |            }
 6201|       |
 6202|       |            return impl(rd, range, value);
 6203|       |        }
 6204|   214k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   214k|            auto rd = make_reader<T, char_type>();
 6206|   214k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   214k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 214k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   214k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 214k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   214k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   214k|                return impl(rd, range, value);
 6213|   214k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|   214k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   214k|    {
 6124|   214k|        const bool need_skipped_width =
 6125|   214k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 214k]
  |  Branch (6125:33): [True: 0, False: 214k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   214k|        auto it = rng.begin();
 6129|   214k|        std::ptrdiff_t prefix_width = 0;
 6130|   214k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 214k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   214k|        else {
 6138|   214k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   214k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   214k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   214k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   214k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 962, False: 213k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    962|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    962|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    962|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    962|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    962|    }                                                  \
  |  |  |  | 3671|   214k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   213k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   213k|            std::tie(it, prefix_width) = prefix_result;
 6140|   213k|        }
 6141|   213k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   213k|        std::ptrdiff_t value_width = 0;
 6145|   213k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 213k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   213k|        else {
 6161|   213k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   213k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   213k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   213k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 63.0k, False: 150k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  63.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  63.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  63.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  63.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  63.0k|    }                                                  \
  |  | 3671|   213k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   213k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   150k|                                             specs, value, loc));
 6163|       |
 6164|   150k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 150k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   150k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   150k|        std::ptrdiff_t postfix_width = 0;
 6173|   150k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 150k, False: 428]
  ------------------
 6174|   150k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   150k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   150k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   150k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   150k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 150k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   150k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   150k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   150k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   150k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   150k|                                 value_width));
 6178|   150k|            std::tie(it, postfix_width) = postfix_result;
 6179|   150k|        }
 6180|       |
 6181|   150k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   150k|                                                 value_width, postfix_width);
 6183|   150k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 150k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   150k|        return it;
 6188|   150k|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3690|   470k|    {
 3691|   470k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   470k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   470k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   470k|        const std::ptrdiff_t sign_len =
 3694|   470k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 2.23k, False: 468k]
  ------------------
 3695|       |
 3696|   470k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   470k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   470k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   470k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   470k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 45.6k, False: 424k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  45.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  45.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  45.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  45.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  45.6k|    }                                                  \
  |  |  |  | 3671|   470k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   424k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|   424k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   470k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   213k|    {
 4170|   213k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   213k|#if !SCN_DISABLE_LOCALE
 4173|   213k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 53.6k, False: 160k]
  ------------------
 4174|  53.6k|            return read_impl<Range>(
 4175|  53.6k|                range, rd,
 4176|  53.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  53.6k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  53.6k|                },
 4179|  53.6k|                value, loc);
 4180|  53.6k|        }
 4181|   160k|#endif
 4182|       |
 4183|   160k|        return read_impl<Range>(
 4184|   160k|            range, rd,
 4185|   160k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   160k|                return r.read_source(SCN_FWD(args)...);
 4187|   160k|            },
 4188|   160k|            value);
 4189|   213k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   294k|    {
 4206|   294k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   294k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   294k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 80.6k, False: 213k]
  |  |  ------------------
  ------------------
 4208|  80.6k|            return unexpected(r.error());
 4209|  80.6k|        }
 4210|       |
 4211|   213k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   213k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   213k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   213k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   213k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.28k, False: 212k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.28k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.28k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.28k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.28k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.28k|    }                                                  \
  |  |  |  | 3671|   213k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   212k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   212k|        return ranges::next(range.begin(), n);
 4213|   213k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  53.6k|        : m_fptr([](storage fn,
  743|  53.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  53.6k|              cvref<T> obj = *get<T>(fn);
  745|  53.6k|              if constexpr (std::is_void_v<R>) {
  746|  53.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  53.6k|              }
  748|  53.6k|              else {
  749|  53.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  53.6k|              }
  751|  53.6k|          }),
  752|  53.6k|          m_storage(std::addressof(f))
  753|  53.6k|    {
  754|  53.6k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  53.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  53.6k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  53.6k|              else {
  749|  53.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  53.6k|              }
  751|  53.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  53.6k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  53.6k|        else if constexpr (std::is_object_v<T>) {
  688|  53.6k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  53.6k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  53.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  53.6k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  53.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  53.6k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  53.6k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  53.6k|        {
  662|  53.6k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   160k|        : m_fptr([](storage fn,
  743|   160k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   160k|              cvref<T> obj = *get<T>(fn);
  745|   160k|              if constexpr (std::is_void_v<R>) {
  746|   160k|                  obj(static_cast<decltype(args)>(args)...);
  747|   160k|              }
  748|   160k|              else {
  749|   160k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   160k|              }
  751|   160k|          }),
  752|   160k|          m_storage(std::addressof(f))
  753|   160k|    {
  754|   160k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   160k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   160k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   160k|              else {
  749|   160k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   160k|              }
  751|   160k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   160k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   160k|        else if constexpr (std::is_object_v<T>) {
  688|   160k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   160k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   160k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   160k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   160k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   160k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   160k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   160k|        {
  662|   160k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   213k|    {
 4170|   213k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   213k|#if !SCN_DISABLE_LOCALE
 4173|   213k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 53.6k, False: 160k]
  ------------------
 4174|  53.6k|            return read_impl<Range>(
 4175|  53.6k|                range, rd,
 4176|  53.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  53.6k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  53.6k|                },
 4179|  53.6k|                value, loc);
 4180|  53.6k|        }
 4181|   160k|#endif
 4182|       |
 4183|   160k|        return read_impl<Range>(
 4184|   160k|            range, rd,
 4185|   160k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   160k|                return r.read_source(SCN_FWD(args)...);
 4187|   160k|            },
 4188|   160k|            value);
 4189|   213k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   294k|    {
 4206|   294k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   294k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   294k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 37.6k, False: 256k]
  |  |  ------------------
  ------------------
 4208|  37.6k|            return unexpected(r.error());
 4209|  37.6k|        }
 4210|       |
 4211|   256k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   256k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   256k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   256k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   256k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 44.3k, False: 212k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  44.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  44.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  44.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  44.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  44.3k|    }                                                  \
  |  |  |  | 3671|   256k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   212k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   212k|        return ranges::next(range.begin(), n);
 4213|   256k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  53.6k|        : m_fptr([](storage fn,
  743|  53.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  53.6k|              cvref<T> obj = *get<T>(fn);
  745|  53.6k|              if constexpr (std::is_void_v<R>) {
  746|  53.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  53.6k|              }
  748|  53.6k|              else {
  749|  53.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  53.6k|              }
  751|  53.6k|          }),
  752|  53.6k|          m_storage(std::addressof(f))
  753|  53.6k|    {
  754|  53.6k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  53.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  53.6k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  53.6k|              else {
  749|  53.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  53.6k|              }
  751|  53.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  53.6k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  53.6k|        else if constexpr (std::is_object_v<T>) {
  688|  53.6k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  53.6k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  53.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  53.6k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  53.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  53.6k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  53.6k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  53.6k|        {
  662|  53.6k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   160k|        : m_fptr([](storage fn,
  743|   160k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   160k|              cvref<T> obj = *get<T>(fn);
  745|   160k|              if constexpr (std::is_void_v<R>) {
  746|   160k|                  obj(static_cast<decltype(args)>(args)...);
  747|   160k|              }
  748|   160k|              else {
  749|   160k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   160k|              }
  751|   160k|          }),
  752|   160k|          m_storage(std::addressof(f))
  753|   160k|    {
  754|   160k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   160k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   160k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   160k|              else {
  749|   160k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   160k|              }
  751|   160k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   160k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   160k|        else if constexpr (std::is_object_v<T>) {
  688|   160k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   160k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   160k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   160k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   160k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   160k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   160k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   160k|        {
  662|   160k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6192|   218k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|       |                          basic_contiguous_scan_context<char_type>>) {
 6197|       |            auto rd = make_reader<T, char_type>();
 6198|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|       |                return unexpected(e);
 6200|       |            }
 6201|       |
 6202|       |            return impl(rd, range, value);
 6203|       |        }
 6204|   218k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   218k|            auto rd = make_reader<T, char_type>();
 6206|   218k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   218k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 218k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   218k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 218k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   218k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   218k|                return impl(rd, range, value);
 6213|   218k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|   218k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   218k|    {
 6124|   218k|        const bool need_skipped_width =
 6125|   218k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 218k]
  |  Branch (6125:33): [True: 0, False: 218k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   218k|        auto it = rng.begin();
 6129|   218k|        std::ptrdiff_t prefix_width = 0;
 6130|   218k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 218k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   218k|        else {
 6138|   218k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   218k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   218k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   218k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   218k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.01k, False: 217k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.01k|    }                                                  \
  |  |  |  | 3671|   218k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   217k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   217k|            std::tie(it, prefix_width) = prefix_result;
 6140|   217k|        }
 6141|   217k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   217k|        std::ptrdiff_t value_width = 0;
 6145|   217k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 217k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   217k|        else {
 6161|   217k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   217k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   217k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   217k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 63.0k, False: 154k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  63.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  63.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  63.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  63.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  63.0k|    }                                                  \
  |  | 3671|   217k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   217k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   154k|                                             specs, value, loc));
 6163|       |
 6164|   154k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 154k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   154k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   154k|        std::ptrdiff_t postfix_width = 0;
 6173|   154k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 153k, False: 450]
  ------------------
 6174|   153k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   153k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   153k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   153k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   153k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 153k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   153k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   153k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   153k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   153k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   153k|                                 value_width));
 6178|   153k|            std::tie(it, postfix_width) = postfix_result;
 6179|   153k|        }
 6180|       |
 6181|   154k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   154k|                                                 value_width, postfix_width);
 6183|   154k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 154k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   154k|        return it;
 6188|   154k|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3690|   480k|    {
 3691|   480k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   480k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   480k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   480k|        const std::ptrdiff_t sign_len =
 3694|   480k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 2.24k, False: 478k]
  ------------------
 3695|       |
 3696|   480k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   480k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   480k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   480k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   480k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 44.1k, False: 436k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  44.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  44.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  44.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  44.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  44.1k|    }                                                  \
  |  |  |  | 3671|   480k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   436k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|   436k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   480k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   217k|    {
 4170|   217k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   217k|#if !SCN_DISABLE_LOCALE
 4173|   217k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 55.2k, False: 161k]
  ------------------
 4174|  55.2k|            return read_impl<Range>(
 4175|  55.2k|                range, rd,
 4176|  55.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  55.2k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  55.2k|                },
 4179|  55.2k|                value, loc);
 4180|  55.2k|        }
 4181|   161k|#endif
 4182|       |
 4183|   161k|        return read_impl<Range>(
 4184|   161k|            range, rd,
 4185|   161k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   161k|                return r.read_source(SCN_FWD(args)...);
 4187|   161k|            },
 4188|   161k|            value);
 4189|   217k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   300k|    {
 4206|   300k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   300k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   300k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 81.6k, False: 218k]
  |  |  ------------------
  ------------------
 4208|  81.6k|            return unexpected(r.error());
 4209|  81.6k|        }
 4210|       |
 4211|   218k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   218k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   218k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   218k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   218k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 198, False: 218k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    198|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    198|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    198|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    198|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    198|    }                                                  \
  |  |  |  | 3671|   218k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   218k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   218k|        return ranges::next(range.begin(), n);
 4213|   218k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  55.2k|        : m_fptr([](storage fn,
  743|  55.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  55.2k|              cvref<T> obj = *get<T>(fn);
  745|  55.2k|              if constexpr (std::is_void_v<R>) {
  746|  55.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  55.2k|              }
  748|  55.2k|              else {
  749|  55.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  55.2k|              }
  751|  55.2k|          }),
  752|  55.2k|          m_storage(std::addressof(f))
  753|  55.2k|    {
  754|  55.2k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  55.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  55.2k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  55.2k|              else {
  749|  55.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  55.2k|              }
  751|  55.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  55.2k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  55.2k|        else if constexpr (std::is_object_v<T>) {
  688|  55.2k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  55.2k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  55.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  55.2k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  55.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  55.2k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  55.2k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  55.2k|        {
  662|  55.2k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   161k|        : m_fptr([](storage fn,
  743|   161k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   161k|              cvref<T> obj = *get<T>(fn);
  745|   161k|              if constexpr (std::is_void_v<R>) {
  746|   161k|                  obj(static_cast<decltype(args)>(args)...);
  747|   161k|              }
  748|   161k|              else {
  749|   161k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   161k|              }
  751|   161k|          }),
  752|   161k|          m_storage(std::addressof(f))
  753|   161k|    {
  754|   161k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   161k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   161k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   161k|              else {
  749|   161k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   161k|              }
  751|   161k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   161k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   161k|        else if constexpr (std::is_object_v<T>) {
  688|   161k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   161k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   161k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   161k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   161k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   161k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   161k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   161k|        {
  662|   161k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   217k|    {
 4170|   217k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   217k|#if !SCN_DISABLE_LOCALE
 4173|   217k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 55.3k, False: 161k]
  ------------------
 4174|  55.3k|            return read_impl<Range>(
 4175|  55.3k|                range, rd,
 4176|  55.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  55.3k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  55.3k|                },
 4179|  55.3k|                value, loc);
 4180|  55.3k|        }
 4181|   161k|#endif
 4182|       |
 4183|   161k|        return read_impl<Range>(
 4184|   161k|            range, rd,
 4185|   161k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   161k|                return r.read_source(SCN_FWD(args)...);
 4187|   161k|            },
 4188|   161k|            value);
 4189|   217k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   300k|    {
 4206|   300k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   300k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   300k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 37.9k, False: 262k]
  |  |  ------------------
  ------------------
 4208|  37.9k|            return unexpected(r.error());
 4209|  37.9k|        }
 4210|       |
 4211|   262k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   262k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   262k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   262k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   262k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 43.9k, False: 218k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  43.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  43.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  43.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  43.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  43.9k|    }                                                  \
  |  |  |  | 3671|   262k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   218k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   218k|        return ranges::next(range.begin(), n);
 4213|   262k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  55.3k|        : m_fptr([](storage fn,
  743|  55.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  55.3k|              cvref<T> obj = *get<T>(fn);
  745|  55.3k|              if constexpr (std::is_void_v<R>) {
  746|  55.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  55.3k|              }
  748|  55.3k|              else {
  749|  55.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  55.3k|              }
  751|  55.3k|          }),
  752|  55.3k|          m_storage(std::addressof(f))
  753|  55.3k|    {
  754|  55.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  55.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  55.3k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  55.3k|              else {
  749|  55.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  55.3k|              }
  751|  55.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  55.3k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  55.3k|        else if constexpr (std::is_object_v<T>) {
  688|  55.3k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  55.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  55.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  55.3k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  55.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  55.3k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  55.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  55.3k|        {
  662|  55.3k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   161k|        : m_fptr([](storage fn,
  743|   161k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   161k|              cvref<T> obj = *get<T>(fn);
  745|   161k|              if constexpr (std::is_void_v<R>) {
  746|   161k|                  obj(static_cast<decltype(args)>(args)...);
  747|   161k|              }
  748|   161k|              else {
  749|   161k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   161k|              }
  751|   161k|          }),
  752|   161k|          m_storage(std::addressof(f))
  753|   161k|    {
  754|   161k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   161k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   161k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   161k|              else {
  749|   161k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   161k|              }
  751|   161k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   161k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   161k|        else if constexpr (std::is_object_v<T>) {
  688|   161k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   161k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   161k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   161k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   161k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   161k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   161k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   161k|        {
  662|   161k|        }
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|   859k|{
 2061|   859k|    auto it = range.begin();
 2062|  1.49M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 1.48M, False: 3.37k]
  ------------------
 2063|  1.48M|        const auto val =
 2064|  1.48M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  1.48M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  1.48M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.48M, False: 0]
  |  |  ------------------
  ------------------
 2066|  1.48M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  1.48M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  1.48M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 855k, False: 632k]
  ------------------
 2069|   855k|                return it;
 2070|   855k|            }
 2071|  1.48M|        }
 2072|   632k|        it = val.iterator;
 2073|   632k|    }
 2074|       |
 2075|  3.37k|    return it;
 2076|   859k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|  1.48M|{
 1899|  1.48M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  1.48M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.48M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  1.48M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  1.48M|    auto it = range.begin();
 1903|  1.48M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  1.48M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  1.48M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.48M]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|  1.48M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 1.48M, False: 0]
  ------------------
 1912|  1.48M|        ++it;
 1913|  1.48M|        return {it, string_type(1, *range.begin())};
 1914|  1.48M|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|  1.48M|}
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1889|  1.48M|    {
 1890|  1.48M|        return !codepoint.empty();
 1891|  1.48M|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|   859k|{
 2082|   859k|    return read_until_code_point(range, std::not_fn(pred));
 2083|   859k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|   859k|{
 2951|   859k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 859k, False: 0]
  ------------------
 2952|   859k|        auto it = read_while_classic_space(range);
 2953|   859k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   859k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   859k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.37k, False: 855k]
  |  |  ------------------
  ------------------
 2955|  3.37k|            return unexpected(e);
 2956|  3.37k|        }
 2957|       |
 2958|   855k|        return it;
 2959|   859k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   859k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|   859k|{
 2117|       |    if constexpr (ranges::contiguous_range<Range> &&
 2118|       |                  ranges::sized_range<Range> &&
 2119|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2120|       |        auto buf = make_contiguous_buffer(range);
 2121|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|       |        return ranges::next(range.begin(),
 2123|       |                            ranges::distance(buf.view().begin(), it));
 2124|       |    }
 2125|   859k|    else {
 2126|   859k|        auto it = range.begin();
 2127|       |
 2128|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|       |            auto seg = get_contiguous_beginning(range);
 2130|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|       |                seg_it != seg.end()) {
 2132|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|       |            }
 2134|       |            ranges::advance(it, seg.size());
 2135|       |        }
 2136|       |
 2137|   859k|        return read_while_code_point(
 2138|   859k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   859k|    }
 2140|   859k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   859k|        : m_fptr([](storage fn,
  743|   859k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   859k|              cvref<T> obj = *get<T>(fn);
  745|   859k|              if constexpr (std::is_void_v<R>) {
  746|   859k|                  obj(static_cast<decltype(args)>(args)...);
  747|   859k|              }
  748|   859k|              else {
  749|   859k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   859k|              }
  751|   859k|          }),
  752|   859k|          m_storage(std::addressof(f))
  753|   859k|    {
  754|   859k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  1.48M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.48M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.48M|              else {
  749|  1.48M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.48M|              }
  751|  1.48M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  1.48M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.48M|        else if constexpr (std::is_object_v<T>) {
  688|  1.48M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.48M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|  1.48M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   859k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   859k|        {
  662|   859k|        }
_ZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2087|  1.40M|{
 2088|       |    if constexpr (ranges::contiguous_range<Range> &&
 2089|       |                  ranges::sized_range<Range> &&
 2090|  1.40M|                  std::is_same_v<detail::char_t<Range>, char>) {
 2091|  1.40M|        auto buf = make_contiguous_buffer(range);
 2092|  1.40M|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  1.40M|        return ranges::next(range.begin(),
 2094|  1.40M|                            ranges::distance(buf.view().begin(), it));
 2095|       |    }
 2096|       |    else {
 2097|       |        auto it = range.begin();
 2098|       |
 2099|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2100|       |            auto seg = get_contiguous_beginning(range);
 2101|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|       |                seg_it != seg.end()) {
 2103|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|       |            }
 2105|       |            ranges::advance(it, seg.size());
 2106|       |        }
 2107|       |
 2108|       |        return read_until_code_point(
 2109|       |            ranges::subrange{it, range.end()},
 2110|       |            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|       |    }
 2112|  1.40M|}
_ZN3scn2v34impl22make_contiguous_bufferIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 1682|  1.40M|{
 1683|       |    if constexpr (ranges::borrowed_range<Range> &&
 1684|       |                  ranges::contiguous_range<Range> &&
 1685|  1.40M|                  ranges::sized_range<Range>) {
 1686|  1.40M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  1.40M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|       |    }
 1688|       |    else {
 1689|       |        return contiguous_range_factory{SCN_FWD(range)};
 1690|       |    }
 1691|  1.40M|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEETnPNS5_9enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISC_Esr6rangesE11sized_rangeISC_EEvE4typeELPv0EEEOSC_:
 1488|  1.40M|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1489|  1.40M|    {
 1490|  1.40M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEETnPNS5_9enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSD_:
 1576|  1.40M|    {
 1577|  1.40M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  1.40M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  1.40M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEvOT_:
 1620|  1.40M|    {
 1621|  1.40M|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|       |        if constexpr (ranges::borrowed_range<Range> &&
 1624|       |                      ranges::contiguous_range<Range> &&
 1625|       |                      ranges::sized_range<Range>) {
 1626|       |            m_storage.reset();
 1627|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1628|       |        }
 1629|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|  1.40M|                                          std::basic_string<CharT>>) {
 1631|  1.40M|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  930|  1.40M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1632|  1.40M|            m_view = string_view_type{*m_storage};
 1633|       |        }
 1634|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|       |                                          typename detail::basic_scan_buffer<
 1636|       |                                              value_t>::forward_iterator> &&
 1637|       |                           ranges::common_range<Range>) {
 1638|       |            auto beg_seg = range.begin().contiguous_segment();
 1639|       |            auto end_seg = range.end().contiguous_segment();
 1640|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|       |                             detail::to_address(end_seg.end()))) {
 1642|       |                auto& str = m_storage.emplace();
 1643|       |                str.reserve(range.end().position() - range.begin().position());
 1644|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|       |                m_view = string_view_type{str};
 1646|       |                return;
 1647|       |            }
 1648|       |
 1649|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|       |                                                            end_seg.data());
 1651|       |            m_storage.reset();
 1652|       |        }
 1653|       |        else {
 1654|       |            auto& str = m_storage.emplace();
 1655|       |            if constexpr (ranges::sized_range<Range>) {
 1656|       |                str.reserve(range.size());
 1657|       |            }
 1658|       |            if constexpr (ranges::common_range<Range>) {
 1659|       |                std::copy(ranges::begin(range), ranges::end(range),
 1660|       |                          std::back_inserter(str));
 1661|       |            }
 1662|       |            else {
 1663|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|       |                     ++it) {
 1665|       |                    str.push_back(*it);
 1666|       |                }
 1667|       |            }
 1668|       |            m_view = string_view_type{str};
 1669|       |        }
 1670|  1.40M|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIfEET_S5_:
 4099|  1.02M|    {
 4100|  1.02M|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 100k, False: 920k]
  ------------------
 4101|   100k|            return std::copysign(value, T{-1.0});
 4102|   100k|        }
 4103|   920k|        return std::copysign(value, T{1.0});
 4104|  1.02M|    }
_ZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2087|   608k|{
 2088|       |    if constexpr (ranges::contiguous_range<Range> &&
 2089|       |                  ranges::sized_range<Range> &&
 2090|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2091|       |        auto buf = make_contiguous_buffer(range);
 2092|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2093|       |        return ranges::next(range.begin(),
 2094|       |                            ranges::distance(buf.view().begin(), it));
 2095|       |    }
 2096|   608k|    else {
 2097|   608k|        auto it = range.begin();
 2098|       |
 2099|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2100|       |            auto seg = get_contiguous_beginning(range);
 2101|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|       |                seg_it != seg.end()) {
 2103|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|       |            }
 2105|       |            ranges::advance(it, seg.size());
 2106|       |        }
 2107|       |
 2108|   608k|        return read_until_code_point(
 2109|   608k|            ranges::subrange{it, range.end()},
 2110|   608k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|   608k|    }
 2112|   608k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_:
  742|   608k|        : m_fptr([](storage fn,
  743|   608k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   608k|              cvref<T> obj = *get<T>(fn);
  745|   608k|              if constexpr (std::is_void_v<R>) {
  746|   608k|                  obj(static_cast<decltype(args)>(args)...);
  747|   608k|              }
  748|   608k|              else {
  749|   608k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   608k|              }
  751|   608k|          }),
  752|   608k|          m_storage(std::addressof(f))
  753|   608k|    {
  754|   608k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESU_Di:
  743|  1.15M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.15M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.15M|              else {
  749|  1.15M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.15M|              }
  751|  1.15M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  683|  1.15M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.15M|        else if constexpr (std::is_object_v<T>) {
  688|  1.15M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.15M|    }
_ZZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2110|  1.15M|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vISE_EEvE4typeELPv0EEEPSE_:
  660|   608k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   608k|        {
  662|   608k|        }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEETnPNS5_9enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSD_:
 1576|   608k|    {
 1577|   608k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   608k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|   608k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEvOT_:
 1620|   608k|    {
 1621|   608k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|       |        if constexpr (ranges::borrowed_range<Range> &&
 1624|       |                      ranges::contiguous_range<Range> &&
 1625|       |                      ranges::sized_range<Range>) {
 1626|       |            m_storage.reset();
 1627|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1628|       |        }
 1629|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|   608k|                                          std::basic_string<CharT>>) {
 1631|   608k|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  930|   608k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1632|   608k|            m_view = string_view_type{*m_storage};
 1633|       |        }
 1634|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|       |                                          typename detail::basic_scan_buffer<
 1636|       |                                              value_t>::forward_iterator> &&
 1637|       |                           ranges::common_range<Range>) {
 1638|       |            auto beg_seg = range.begin().contiguous_segment();
 1639|       |            auto end_seg = range.end().contiguous_segment();
 1640|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|       |                             detail::to_address(end_seg.end()))) {
 1642|       |                auto& str = m_storage.emplace();
 1643|       |                str.reserve(range.end().position() - range.begin().position());
 1644|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|       |                m_view = string_view_type{str};
 1646|       |                return;
 1647|       |            }
 1648|       |
 1649|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|       |                                                            end_seg.data());
 1651|       |            m_storage.reset();
 1652|       |        }
 1653|       |        else {
 1654|       |            auto& str = m_storage.emplace();
 1655|       |            if constexpr (ranges::sized_range<Range>) {
 1656|       |                str.reserve(range.size());
 1657|       |            }
 1658|       |            if constexpr (ranges::common_range<Range>) {
 1659|       |                std::copy(ranges::begin(range), ranges::end(range),
 1660|       |                          std::back_inserter(str));
 1661|       |            }
 1662|       |            else {
 1663|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|       |                     ++it) {
 1665|       |                    str.push_back(*it);
 1666|       |                }
 1667|       |            }
 1668|       |            m_view = string_view_type{str};
 1669|       |        }
 1670|   608k|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIfEET_S5_:
 4099|   407k|    {
 4100|   407k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 1.66k, False: 405k]
  ------------------
 4101|  1.66k|            return std::copysign(value, T{-1.0});
 4102|  1.66k|        }
 4103|   405k|        return std::copysign(value, T{1.0});
 4104|   407k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIdEET_S5_:
 4099|  1.06M|    {
 4100|  1.06M|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 104k, False: 957k]
  ------------------
 4101|   104k|            return std::copysign(value, T{-1.0});
 4102|   104k|        }
 4103|   957k|        return std::copysign(value, T{1.0});
 4104|  1.06M|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIdEET_S5_:
 4099|   470k|    {
 4100|   470k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 1.69k, False: 468k]
  ------------------
 4101|  1.69k|            return std::copysign(value, T{-1.0});
 4102|  1.69k|        }
 4103|   468k|        return std::copysign(value, T{1.0});
 4104|   470k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIeEET_S5_:
 4099|  1.07M|    {
 4100|  1.07M|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 107k, False: 965k]
  ------------------
 4101|   107k|            return std::copysign(value, T{-1.0});
 4102|   107k|        }
 4103|   965k|        return std::copysign(value, T{1.0});
 4104|  1.07M|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIeEET_S5_:
 4099|   480k|    {
 4100|   480k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 1.71k, False: 479k]
  ------------------
 4101|  1.71k|            return std::copysign(value, T{-1.0});
 4102|  1.71k|        }
 4103|   479k|        return std::copysign(value, T{1.0});
 4104|   480k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|   453k|{
 5795|   453k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   453k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.58k, False: 449k]
  |  |  ------------------
  ------------------
 5796|  4.58k|        return unexpected(e);
 5797|  4.58k|    }
 5798|       |
 5799|   449k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 449k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   449k|    return skip_classic_whitespace(range);
 5804|   449k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIfEENS0_13scan_expectedIPKcEERT_:
 5870|   146k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|   146k|                          basic_contiguous_scan_context<char_type>>) {
 5875|   146k|            auto rd = make_reader<T, char_type>();
 5876|   146k|            return impl(rd, range, value);
 5877|       |        }
 5878|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5879|       |            auto rd = make_reader<T, char_type>();
 5880|       |            if (!is_segment_contiguous(range)) {
 5881|       |                return impl(rd, range, value);
 5882|       |            }
 5883|       |            auto crange = get_as_contiguous(range);
 5884|       |            SCN_TRY(it, impl(rd, crange, value));
 5885|       |            return ranges::next(range.begin(),
 5886|       |                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|   146k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|   146k|    {
 5863|   146k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   146k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   146k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   146k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   146k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.50k, False: 144k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.50k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.50k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.50k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.50k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.50k|    }                                                  \
  |  |  |  | 3671|   146k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   144k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   144k|                        .transform_error(make_eof_scan_error));
 5865|   144k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   146k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|   144k|    {
 4152|   144k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   144k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   144k|        float_reader<CharT> rd{};
 4155|   144k|        return read_impl<Range>(
 4156|   144k|            range, rd,
 4157|   144k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   144k|                return r.read_source(SCN_FWD(args)...);
 4159|   144k|            },
 4160|   144k|            value);
 4161|   144k|    }
_ZN3scn2v34impl12float_readerIcEC2Ev:
 3657|   940k|    constexpr float_reader() = default;
_ZN3scn2v34impl17float_reader_baseC2Ev:
 3643|  1.40M|    constexpr float_reader_base() = default;
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|   144k|        : m_fptr([](storage fn,
  743|   144k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   144k|              cvref<T> obj = *get<T>(fn);
  745|   144k|              if constexpr (std::is_void_v<R>) {
  746|   144k|                  obj(static_cast<decltype(args)>(args)...);
  747|   144k|              }
  748|   144k|              else {
  749|   144k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   144k|              }
  751|   144k|          }),
  752|   144k|          m_storage(std::addressof(f))
  753|   144k|    {
  754|   144k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|   144k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   144k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   144k|              else {
  749|   144k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   144k|              }
  751|   144k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   144k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   144k|        else if constexpr (std::is_object_v<T>) {
  688|   144k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   144k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|   144k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   144k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   144k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   144k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   144k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   144k|        {
  662|   144k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 5870|   152k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|   152k|                          basic_contiguous_scan_context<char_type>>) {
 5875|   152k|            auto rd = make_reader<T, char_type>();
 5876|   152k|            return impl(rd, range, value);
 5877|       |        }
 5878|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5879|       |            auto rd = make_reader<T, char_type>();
 5880|       |            if (!is_segment_contiguous(range)) {
 5881|       |                return impl(rd, range, value);
 5882|       |            }
 5883|       |            auto crange = get_as_contiguous(range);
 5884|       |            SCN_TRY(it, impl(rd, crange, value));
 5885|       |            return ranges::next(range.begin(),
 5886|       |                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|   152k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|   152k|    {
 5863|   152k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   152k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   152k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   152k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   152k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.72k, False: 150k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.72k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.72k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.72k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.72k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.72k|    }                                                  \
  |  |  |  | 3671|   152k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   150k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   150k|                        .transform_error(make_eof_scan_error));
 5865|   150k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   152k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|   150k|    {
 4152|   150k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   150k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   150k|        float_reader<CharT> rd{};
 4155|   150k|        return read_impl<Range>(
 4156|   150k|            range, rd,
 4157|   150k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   150k|                return r.read_source(SCN_FWD(args)...);
 4159|   150k|            },
 4160|   150k|            value);
 4161|   150k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|   150k|        : m_fptr([](storage fn,
  743|   150k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   150k|              cvref<T> obj = *get<T>(fn);
  745|   150k|              if constexpr (std::is_void_v<R>) {
  746|   150k|                  obj(static_cast<decltype(args)>(args)...);
  747|   150k|              }
  748|   150k|              else {
  749|   150k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   150k|              }
  751|   150k|          }),
  752|   150k|          m_storage(std::addressof(f))
  753|   150k|    {
  754|   150k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|   150k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   150k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   150k|              else {
  749|   150k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   150k|              }
  751|   150k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   150k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   150k|        else if constexpr (std::is_object_v<T>) {
  688|   150k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   150k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|   150k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   150k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   150k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   150k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   150k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   150k|        {
  662|   150k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIeEENS0_13scan_expectedIPKcEERT_:
 5870|   155k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|   155k|                          basic_contiguous_scan_context<char_type>>) {
 5875|   155k|            auto rd = make_reader<T, char_type>();
 5876|   155k|            return impl(rd, range, value);
 5877|       |        }
 5878|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5879|       |            auto rd = make_reader<T, char_type>();
 5880|       |            if (!is_segment_contiguous(range)) {
 5881|       |                return impl(rd, range, value);
 5882|       |            }
 5883|       |            auto crange = get_as_contiguous(range);
 5884|       |            SCN_TRY(it, impl(rd, crange, value));
 5885|       |            return ranges::next(range.begin(),
 5886|       |                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|   155k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|   155k|    {
 5863|   155k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   155k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   155k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   155k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.86k, False: 153k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.86k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.86k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.86k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.86k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.86k|    }                                                  \
  |  |  |  | 3671|   155k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   153k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   153k|                        .transform_error(make_eof_scan_error));
 5865|   153k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   155k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|   153k|    {
 4152|   153k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   153k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   153k|        float_reader<CharT> rd{};
 4155|   153k|        return read_impl<Range>(
 4156|   153k|            range, rd,
 4157|   153k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   153k|                return r.read_source(SCN_FWD(args)...);
 4159|   153k|            },
 4160|   153k|            value);
 4161|   153k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|   153k|        : m_fptr([](storage fn,
  743|   153k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   153k|              cvref<T> obj = *get<T>(fn);
  745|   153k|              if constexpr (std::is_void_v<R>) {
  746|   153k|                  obj(static_cast<decltype(args)>(args)...);
  747|   153k|              }
  748|   153k|              else {
  749|   153k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   153k|              }
  751|   153k|          }),
  752|   153k|          m_storage(std::addressof(f))
  753|   153k|    {
  754|   153k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|   153k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   153k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   153k|              else {
  749|   153k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   153k|              }
  751|   153k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   153k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   153k|        else if constexpr (std::is_object_v<T>) {
  688|   153k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   153k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|   153k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   153k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   153k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   153k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   153k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   153k|        {
  662|   153k|        }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5794|   497k|{
 5795|   497k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   497k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.79k, False: 492k]
  |  |  ------------------
  ------------------
 5796|  4.79k|        return unexpected(e);
 5797|  4.79k|    }
 5798|       |
 5799|   492k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 492k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   492k|    return skip_classic_whitespace(range);
 5804|   492k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|   159k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|       |                          basic_contiguous_scan_context<char_type>>) {
 5875|       |            auto rd = make_reader<T, char_type>();
 5876|       |            return impl(rd, range, value);
 5877|       |        }
 5878|   159k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|   159k|            auto rd = make_reader<T, char_type>();
 5880|   159k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 159k, False: 0]
  ------------------
 5881|   159k|                return impl(rd, range, value);
 5882|   159k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|   159k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|   159k|    {
 5863|   159k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   159k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   159k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   159k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   159k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.58k, False: 158k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.58k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.58k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.58k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.58k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.58k|    }                                                  \
  |  |  |  | 3671|   159k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   158k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   158k|                        .transform_error(make_eof_scan_error));
 5865|   158k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   159k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|   158k|    {
 4152|   158k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   158k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   158k|        float_reader<CharT> rd{};
 4155|   158k|        return read_impl<Range>(
 4156|   158k|            range, rd,
 4157|   158k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   158k|                return r.read_source(SCN_FWD(args)...);
 4159|   158k|            },
 4160|   158k|            value);
 4161|   158k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|   158k|        : m_fptr([](storage fn,
  743|   158k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   158k|              cvref<T> obj = *get<T>(fn);
  745|   158k|              if constexpr (std::is_void_v<R>) {
  746|   158k|                  obj(static_cast<decltype(args)>(args)...);
  747|   158k|              }
  748|   158k|              else {
  749|   158k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   158k|              }
  751|   158k|          }),
  752|   158k|          m_storage(std::addressof(f))
  753|   158k|    {
  754|   158k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|   158k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   158k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   158k|              else {
  749|   158k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   158k|              }
  751|   158k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   158k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   158k|        else if constexpr (std::is_object_v<T>) {
  688|   158k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   158k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|   158k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   158k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   158k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   158k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   158k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   158k|        {
  662|   158k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|   168k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|       |                          basic_contiguous_scan_context<char_type>>) {
 5875|       |            auto rd = make_reader<T, char_type>();
 5876|       |            return impl(rd, range, value);
 5877|       |        }
 5878|   168k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|   168k|            auto rd = make_reader<T, char_type>();
 5880|   168k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 168k, False: 0]
  ------------------
 5881|   168k|                return impl(rd, range, value);
 5882|   168k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|   168k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|   168k|    {
 5863|   168k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   168k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   168k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   168k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   168k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.82k, False: 166k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.82k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.82k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.82k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.82k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.82k|    }                                                  \
  |  |  |  | 3671|   168k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   166k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   166k|                        .transform_error(make_eof_scan_error));
 5865|   166k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   168k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|   166k|    {
 4152|   166k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   166k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   166k|        float_reader<CharT> rd{};
 4155|   166k|        return read_impl<Range>(
 4156|   166k|            range, rd,
 4157|   166k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   166k|                return r.read_source(SCN_FWD(args)...);
 4159|   166k|            },
 4160|   166k|            value);
 4161|   166k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|   166k|        : m_fptr([](storage fn,
  743|   166k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   166k|              cvref<T> obj = *get<T>(fn);
  745|   166k|              if constexpr (std::is_void_v<R>) {
  746|   166k|                  obj(static_cast<decltype(args)>(args)...);
  747|   166k|              }
  748|   166k|              else {
  749|   166k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   166k|              }
  751|   166k|          }),
  752|   166k|          m_storage(std::addressof(f))
  753|   166k|    {
  754|   166k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|   166k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   166k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   166k|              else {
  749|   166k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   166k|              }
  751|   166k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   166k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   166k|        else if constexpr (std::is_object_v<T>) {
  688|   166k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   166k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|   166k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   166k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   166k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   166k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   166k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   166k|        {
  662|   166k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|   169k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|       |                          basic_contiguous_scan_context<char_type>>) {
 5875|       |            auto rd = make_reader<T, char_type>();
 5876|       |            return impl(rd, range, value);
 5877|       |        }
 5878|   169k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|   169k|            auto rd = make_reader<T, char_type>();
 5880|   169k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 169k, False: 0]
  ------------------
 5881|   169k|                return impl(rd, range, value);
 5882|   169k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|   169k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|   169k|    {
 5863|   169k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   169k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   169k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   169k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   169k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.95k, False: 167k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.95k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.95k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.95k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.95k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.95k|    }                                                  \
  |  |  |  | 3671|   169k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   167k|                        .transform_error(make_eof_scan_error));
 5865|   167k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   169k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|   167k|    {
 4152|   167k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   167k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   167k|        float_reader<CharT> rd{};
 4155|   167k|        return read_impl<Range>(
 4156|   167k|            range, rd,
 4157|   167k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   167k|                return r.read_source(SCN_FWD(args)...);
 4159|   167k|            },
 4160|   167k|            value);
 4161|   167k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|   167k|        : m_fptr([](storage fn,
  743|   167k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   167k|              cvref<T> obj = *get<T>(fn);
  745|   167k|              if constexpr (std::is_void_v<R>) {
  746|   167k|                  obj(static_cast<decltype(args)>(args)...);
  747|   167k|              }
  748|   167k|              else {
  749|   167k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   167k|              }
  751|   167k|          }),
  752|   167k|          m_storage(std::addressof(f))
  753|   167k|    {
  754|   167k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|   167k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   167k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   167k|              else {
  749|   167k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   167k|              }
  751|   167k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   167k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   167k|        else if constexpr (std::is_object_v<T>) {
  688|   167k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   167k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|   167k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   167k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   167k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   167k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   167k|        {
  662|   167k|        }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISF_EEvE4typeELPv0EEEOSF_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2875|  1.09M|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  928|  1.09M|    static_cast<    \
  |  |  929|  1.09M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2876|  1.09M|          m_range(SCN_FWD(r)),
  ------------------
  |  |  930|  1.09M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2877|  1.09M|          m_current(m_range.begin())
 2878|  1.09M|    {
 2879|  1.09M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2882|  3.18M|    {
 2883|  3.18M|        return m_current;
 2884|  3.18M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2887|  2.09M|    {
 2888|  2.09M|        return m_range.end();
 2889|  2.09M|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2902|   997k|    {
 2903|   997k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   997k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   997k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|   997k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 2905|   997k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 997k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|   997k|        }
 2909|   997k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   997k|    static_cast<    \
  |  |  929|   997k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|   997k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2892|  1.09M|    {
 2893|  1.09M|        return ranges::subrange{begin(), end()};
 2894|  1.09M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|  1.09M|    {
 6037|  1.09M|        const bool need_skipped_width =
 6038|  1.09M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 1.09M]
  |  Branch (6038:33): [True: 0, False: 1.09M]
  ------------------
 6039|  1.09M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  1.09M|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 1.09M]
  ------------------
 6043|  1.09M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 1.09M]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|  1.09M|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 1.09M, False: 0]
  |  Branch (6047:56): [True: 1.09M, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  1.09M|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 1.09M]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  2.17M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|  1.09M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.09M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.09M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.09M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12.9k, False: 1.08M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  12.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  12.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  12.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  12.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  12.9k|    }                                                  \
  |  |  |  | 3671|  1.09M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.08M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  2.17M|                            make_eof_scan_error));
 6058|       |
 6059|  2.17M|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 1.08M]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|  1.08M|            return result_type{it, 0};
 6067|  2.17M|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|  1.09M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|   985k|    {
 6079|   985k|        const bool need_skipped_width =
 6080|   985k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 985k]
  |  Branch (6080:33): [True: 0, False: 985k]
  ------------------
 6081|   985k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|   985k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 985k]
  ------------------
 6084|   985k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 985k]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|   985k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 985k, False: 0]
  ------------------
 6093|   985k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 0, False: 985k]
  ------------------
 6094|   985k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 0]
  ------------------
 6096|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|   985k|        return result_type{rng.begin(), 0};
 6118|   985k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIfEENS0_13scan_expectedIPKcEERT_:
 6192|   355k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|   355k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   355k|            auto rd = make_reader<T, char_type>();
 6198|   355k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   355k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 355k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   355k|            return impl(rd, range, value);
 6203|       |        }
 6204|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6205|       |            auto rd = make_reader<T, char_type>();
 6206|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|       |                return unexpected(e);
 6208|       |            }
 6209|       |
 6210|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|       |                specs.width != 0) {
 6212|       |                return impl(rd, range, value);
 6213|       |            }
 6214|       |
 6215|       |            auto crange = get_as_contiguous(range);
 6216|       |            SCN_TRY(it, impl(rd, crange, value));
 6217|       |            return ranges::next(range.begin(),
 6218|       |                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|   355k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   355k|    {
 6124|   355k|        const bool need_skipped_width =
 6125|   355k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 355k]
  |  Branch (6125:33): [True: 0, False: 355k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   355k|        auto it = rng.begin();
 6129|   355k|        std::ptrdiff_t prefix_width = 0;
 6130|   355k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 355k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   355k|        else {
 6138|   355k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   355k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   355k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   355k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   355k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.92k, False: 351k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.92k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.92k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.92k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.92k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.92k|    }                                                  \
  |  |  |  | 3671|   355k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   351k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   351k|            std::tie(it, prefix_width) = prefix_result;
 6140|   351k|        }
 6141|   351k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   351k|        std::ptrdiff_t value_width = 0;
 6145|   351k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 351k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   351k|        else {
 6161|   351k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   351k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   351k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   351k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 28.1k, False: 323k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  28.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  28.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  28.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  28.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  28.1k|    }                                                  \
  |  | 3671|   351k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   351k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   323k|                                             specs, value, loc));
 6163|       |
 6164|   323k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 323k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   323k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   323k|        std::ptrdiff_t postfix_width = 0;
 6173|   323k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 320k, False: 3.49k]
  ------------------
 6174|   320k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   320k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   320k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   320k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   320k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 320k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   320k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   320k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   320k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   320k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   320k|                                 value_width));
 6178|   320k|            std::tie(it, postfix_width) = postfix_result;
 6179|   320k|        }
 6180|       |
 6181|   323k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   323k|                                                 value_width, postfix_width);
 6183|   323k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 323k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   323k|        return it;
 6188|   323k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 6192|   366k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|   366k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   366k|            auto rd = make_reader<T, char_type>();
 6198|   366k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   366k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 366k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   366k|            return impl(rd, range, value);
 6203|       |        }
 6204|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6205|       |            auto rd = make_reader<T, char_type>();
 6206|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|       |                return unexpected(e);
 6208|       |            }
 6209|       |
 6210|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|       |                specs.width != 0) {
 6212|       |                return impl(rd, range, value);
 6213|       |            }
 6214|       |
 6215|       |            auto crange = get_as_contiguous(range);
 6216|       |            SCN_TRY(it, impl(rd, crange, value));
 6217|       |            return ranges::next(range.begin(),
 6218|       |                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|   366k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   366k|    {
 6124|   366k|        const bool need_skipped_width =
 6125|   366k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 366k]
  |  Branch (6125:33): [True: 0, False: 366k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   366k|        auto it = rng.begin();
 6129|   366k|        std::ptrdiff_t prefix_width = 0;
 6130|   366k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 366k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   366k|        else {
 6138|   366k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   366k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   366k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   366k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   366k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.38k, False: 362k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.38k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.38k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.38k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.38k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.38k|    }                                                  \
  |  |  |  | 3671|   366k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   362k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   362k|            std::tie(it, prefix_width) = prefix_result;
 6140|   362k|        }
 6141|   362k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   362k|        std::ptrdiff_t value_width = 0;
 6145|   362k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 362k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   362k|        else {
 6161|   362k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   362k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   362k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   362k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 27.6k, False: 334k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  27.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  27.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  27.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  27.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  27.6k|    }                                                  \
  |  | 3671|   362k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   362k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   334k|                                             specs, value, loc));
 6163|       |
 6164|   334k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 334k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   334k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   334k|        std::ptrdiff_t postfix_width = 0;
 6173|   334k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 330k, False: 3.90k]
  ------------------
 6174|   330k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   330k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   330k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   330k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   330k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 330k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   330k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   330k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   330k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   330k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   330k|                                 value_width));
 6178|   330k|            std::tie(it, postfix_width) = postfix_result;
 6179|   330k|        }
 6180|       |
 6181|   334k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   334k|                                                 value_width, postfix_width);
 6183|   334k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 334k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   334k|        return it;
 6188|   334k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIeEENS0_13scan_expectedIPKcEERT_:
 6192|   370k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|   370k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   370k|            auto rd = make_reader<T, char_type>();
 6198|   370k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   370k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 370k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   370k|            return impl(rd, range, value);
 6203|       |        }
 6204|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6205|       |            auto rd = make_reader<T, char_type>();
 6206|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|       |                return unexpected(e);
 6208|       |            }
 6209|       |
 6210|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|       |                specs.width != 0) {
 6212|       |                return impl(rd, range, value);
 6213|       |            }
 6214|       |
 6215|       |            auto crange = get_as_contiguous(range);
 6216|       |            SCN_TRY(it, impl(rd, crange, value));
 6217|       |            return ranges::next(range.begin(),
 6218|       |                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|   370k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   370k|    {
 6124|   370k|        const bool need_skipped_width =
 6125|   370k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 370k]
  |  Branch (6125:33): [True: 0, False: 370k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   370k|        auto it = rng.begin();
 6129|   370k|        std::ptrdiff_t prefix_width = 0;
 6130|   370k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 370k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   370k|        else {
 6138|   370k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   370k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   370k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   370k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   370k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.65k, False: 366k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.65k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.65k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.65k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.65k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.65k|    }                                                  \
  |  |  |  | 3671|   370k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   366k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   366k|            std::tie(it, prefix_width) = prefix_result;
 6140|   366k|        }
 6141|   366k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   366k|        std::ptrdiff_t value_width = 0;
 6145|   366k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 366k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   366k|        else {
 6161|   366k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   366k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   366k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   366k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 27.3k, False: 338k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  27.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  27.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  27.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  27.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  27.3k|    }                                                  \
  |  | 3671|   366k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   366k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   338k|                                             specs, value, loc));
 6163|       |
 6164|   338k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 338k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   338k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   338k|        std::ptrdiff_t postfix_width = 0;
 6173|   338k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 334k, False: 4.14k]
  ------------------
 6174|   334k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   334k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   334k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   334k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   334k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 334k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   334k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   334k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   334k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   334k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   334k|                                 value_width));
 6178|   334k|            std::tie(it, postfix_width) = postfix_result;
 6179|   334k|        }
 6180|       |
 6181|   338k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   338k|                                                 value_width, postfix_width);
 6183|   338k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 338k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   338k|        return it;
 6188|   338k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|   231k|{
 5795|   231k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   231k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 474, False: 230k]
  |  |  ------------------
  ------------------
 5796|    474|        return unexpected(e);
 5797|    474|    }
 5798|       |
 5799|   230k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 230k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   230k|    return skip_classic_whitespace(range);
 5804|   230k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIfEENS0_13scan_expectedIPKwEERT_:
 5870|  66.8k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|  66.8k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  66.8k|            auto rd = make_reader<T, char_type>();
 5876|  66.8k|            return impl(rd, range, value);
 5877|       |        }
 5878|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5879|       |            auto rd = make_reader<T, char_type>();
 5880|       |            if (!is_segment_contiguous(range)) {
 5881|       |                return impl(rd, range, value);
 5882|       |            }
 5883|       |            auto crange = get_as_contiguous(range);
 5884|       |            SCN_TRY(it, impl(rd, crange, value));
 5885|       |            return ranges::next(range.begin(),
 5886|       |                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|  66.8k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  66.8k|    {
 5863|  66.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  66.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  66.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  66.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  66.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 291, False: 66.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    291|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    291|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    291|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    291|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    291|    }                                                  \
  |  |  |  | 3671|  66.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  66.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  66.5k|                        .transform_error(make_eof_scan_error));
 5865|  66.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  66.8k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|  66.5k|    {
 4152|  66.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  66.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  66.5k|        float_reader<CharT> rd{};
 4155|  66.5k|        return read_impl<Range>(
 4156|  66.5k|            range, rd,
 4157|  66.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  66.5k|                return r.read_source(SCN_FWD(args)...);
 4159|  66.5k|            },
 4160|  66.5k|            value);
 4161|  66.5k|    }
_ZN3scn2v34impl12float_readerIwEC2Ev:
 3657|   459k|    constexpr float_reader() = default;
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  66.5k|        : m_fptr([](storage fn,
  743|  66.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  66.5k|              cvref<T> obj = *get<T>(fn);
  745|  66.5k|              if constexpr (std::is_void_v<R>) {
  746|  66.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  66.5k|              }
  748|  66.5k|              else {
  749|  66.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  66.5k|              }
  751|  66.5k|          }),
  752|  66.5k|          m_storage(std::addressof(f))
  753|  66.5k|    {
  754|  66.5k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  66.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  66.5k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  66.5k|              else {
  749|  66.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  66.5k|              }
  751|  66.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  66.5k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  66.5k|        else if constexpr (std::is_object_v<T>) {
  688|  66.5k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  66.5k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|  66.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  66.5k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  66.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  66.5k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  66.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  66.5k|        {
  662|  66.5k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 5870|  80.8k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|  80.8k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  80.8k|            auto rd = make_reader<T, char_type>();
 5876|  80.8k|            return impl(rd, range, value);
 5877|       |        }
 5878|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5879|       |            auto rd = make_reader<T, char_type>();
 5880|       |            if (!is_segment_contiguous(range)) {
 5881|       |                return impl(rd, range, value);
 5882|       |            }
 5883|       |            auto crange = get_as_contiguous(range);
 5884|       |            SCN_TRY(it, impl(rd, crange, value));
 5885|       |            return ranges::next(range.begin(),
 5886|       |                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|  80.8k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  80.8k|    {
 5863|  80.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  80.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  80.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  80.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  80.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 330, False: 80.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    330|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    330|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    330|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    330|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    330|    }                                                  \
  |  |  |  | 3671|  80.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  80.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  80.5k|                        .transform_error(make_eof_scan_error));
 5865|  80.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  80.8k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|  80.5k|    {
 4152|  80.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  80.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  80.5k|        float_reader<CharT> rd{};
 4155|  80.5k|        return read_impl<Range>(
 4156|  80.5k|            range, rd,
 4157|  80.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  80.5k|                return r.read_source(SCN_FWD(args)...);
 4159|  80.5k|            },
 4160|  80.5k|            value);
 4161|  80.5k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  80.5k|        : m_fptr([](storage fn,
  743|  80.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  80.5k|              cvref<T> obj = *get<T>(fn);
  745|  80.5k|              if constexpr (std::is_void_v<R>) {
  746|  80.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  80.5k|              }
  748|  80.5k|              else {
  749|  80.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  80.5k|              }
  751|  80.5k|          }),
  752|  80.5k|          m_storage(std::addressof(f))
  753|  80.5k|    {
  754|  80.5k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  80.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  80.5k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  80.5k|              else {
  749|  80.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  80.5k|              }
  751|  80.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  80.5k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  80.5k|        else if constexpr (std::is_object_v<T>) {
  688|  80.5k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  80.5k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|  80.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  80.5k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  80.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  80.5k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  80.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  80.5k|        {
  662|  80.5k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIeEENS0_13scan_expectedIPKwEERT_:
 5870|  83.3k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|  83.3k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  83.3k|            auto rd = make_reader<T, char_type>();
 5876|  83.3k|            return impl(rd, range, value);
 5877|       |        }
 5878|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5879|       |            auto rd = make_reader<T, char_type>();
 5880|       |            if (!is_segment_contiguous(range)) {
 5881|       |                return impl(rd, range, value);
 5882|       |            }
 5883|       |            auto crange = get_as_contiguous(range);
 5884|       |            SCN_TRY(it, impl(rd, crange, value));
 5885|       |            return ranges::next(range.begin(),
 5886|       |                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|  83.3k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  83.3k|    {
 5863|  83.3k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  83.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  83.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  83.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  83.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 363, False: 83.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    363|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    363|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    363|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    363|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    363|    }                                                  \
  |  |  |  | 3671|  83.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  83.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  83.0k|                        .transform_error(make_eof_scan_error));
 5865|  83.0k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  83.3k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|  83.0k|    {
 4152|  83.0k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  83.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  83.0k|        float_reader<CharT> rd{};
 4155|  83.0k|        return read_impl<Range>(
 4156|  83.0k|            range, rd,
 4157|  83.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  83.0k|                return r.read_source(SCN_FWD(args)...);
 4159|  83.0k|            },
 4160|  83.0k|            value);
 4161|  83.0k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  83.0k|        : m_fptr([](storage fn,
  743|  83.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  83.0k|              cvref<T> obj = *get<T>(fn);
  745|  83.0k|              if constexpr (std::is_void_v<R>) {
  746|  83.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  83.0k|              }
  748|  83.0k|              else {
  749|  83.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  83.0k|              }
  751|  83.0k|          }),
  752|  83.0k|          m_storage(std::addressof(f))
  753|  83.0k|    {
  754|  83.0k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  83.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  83.0k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  83.0k|              else {
  749|  83.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  83.0k|              }
  751|  83.0k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  83.0k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  83.0k|        else if constexpr (std::is_object_v<T>) {
  688|  83.0k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  83.0k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|  83.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  83.0k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  83.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  83.0k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  83.0k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  83.0k|        {
  662|  83.0k|        }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISF_EEvE4typeELPv0EEEOSF_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2875|   629k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  928|   629k|    static_cast<    \
  |  |  929|   629k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2876|   629k|          m_range(SCN_FWD(r)),
  ------------------
  |  |  930|   629k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2877|   629k|          m_current(m_range.begin())
 2878|   629k|    {
 2879|   629k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2882|  1.69M|    {
 2883|  1.69M|        return m_current;
 2884|  1.69M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2887|  1.06M|    {
 2888|  1.06M|        return m_range.end();
 2889|  1.06M|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2902|   437k|    {
 2903|   437k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   437k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   437k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|   437k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 2905|   437k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 437k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|   437k|        }
 2909|   437k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   437k|    static_cast<    \
  |  |  929|   437k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|   437k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2892|   629k|    {
 2893|   629k|        return ranges::subrange{begin(), end()};
 2894|   629k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|   629k|    {
 6037|   629k|        const bool need_skipped_width =
 6038|   629k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 629k]
  |  Branch (6038:33): [True: 0, False: 629k]
  ------------------
 6039|   629k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|   629k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 629k]
  ------------------
 6043|   629k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 629k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|   629k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 629k, False: 0]
  |  Branch (6047:56): [True: 629k, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|   629k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 629k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  1.25M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|   629k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   629k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   629k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   629k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.86k, False: 626k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.86k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.86k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.86k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.86k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.86k|    }                                                  \
  |  |  |  | 3671|   629k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   626k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  1.25M|                            make_eof_scan_error));
 6058|       |
 6059|  1.25M|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 626k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|   626k|            return result_type{it, 0};
 6067|  1.25M|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|   629k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|   436k|    {
 6079|   436k|        const bool need_skipped_width =
 6080|   436k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 436k]
  |  Branch (6080:33): [True: 0, False: 436k]
  ------------------
 6081|   436k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|   436k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 436k]
  ------------------
 6084|   436k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 436k]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|   436k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 436k, False: 0]
  ------------------
 6093|   436k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 0, False: 436k]
  ------------------
 6094|   436k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 0]
  ------------------
 6096|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|   436k|        return result_type{rng.begin(), 0};
 6118|   436k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIfEENS0_13scan_expectedIPKwEERT_:
 6192|   196k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|   196k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   196k|            auto rd = make_reader<T, char_type>();
 6198|   196k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   196k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 196k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   196k|            return impl(rd, range, value);
 6203|       |        }
 6204|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6205|       |            auto rd = make_reader<T, char_type>();
 6206|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|       |                return unexpected(e);
 6208|       |            }
 6209|       |
 6210|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|       |                specs.width != 0) {
 6212|       |                return impl(rd, range, value);
 6213|       |            }
 6214|       |
 6215|       |            auto crange = get_as_contiguous(range);
 6216|       |            SCN_TRY(it, impl(rd, crange, value));
 6217|       |            return ranges::next(range.begin(),
 6218|       |                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|   196k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   196k|    {
 6124|   196k|        const bool need_skipped_width =
 6125|   196k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 196k]
  |  Branch (6125:33): [True: 0, False: 196k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   196k|        auto it = rng.begin();
 6129|   196k|        std::ptrdiff_t prefix_width = 0;
 6130|   196k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 196k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   196k|        else {
 6138|   196k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   196k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   196k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   196k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   196k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 894, False: 195k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    894|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    894|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    894|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    894|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    894|    }                                                  \
  |  |  |  | 3671|   196k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   195k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   195k|            std::tie(it, prefix_width) = prefix_result;
 6140|   195k|        }
 6141|   195k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   195k|        std::ptrdiff_t value_width = 0;
 6145|   195k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 195k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   195k|        else {
 6161|   195k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   195k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   195k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   195k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 63.1k, False: 132k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  63.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  63.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  63.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  63.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  63.1k|    }                                                  \
  |  | 3671|   195k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   195k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   132k|                                             specs, value, loc));
 6163|       |
 6164|   132k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 132k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   132k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   132k|        std::ptrdiff_t postfix_width = 0;
 6173|   132k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 131k, False: 396]
  ------------------
 6174|   131k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   131k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   131k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   131k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   131k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 131k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   131k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   131k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   131k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   131k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   131k|                                 value_width));
 6178|   131k|            std::tie(it, postfix_width) = postfix_result;
 6179|   131k|        }
 6180|       |
 6181|   132k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   132k|                                                 value_width, postfix_width);
 6183|   132k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 132k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   132k|        return it;
 6188|   132k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 6192|   214k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|   214k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   214k|            auto rd = make_reader<T, char_type>();
 6198|   214k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   214k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 214k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   214k|            return impl(rd, range, value);
 6203|       |        }
 6204|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6205|       |            auto rd = make_reader<T, char_type>();
 6206|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|       |                return unexpected(e);
 6208|       |            }
 6209|       |
 6210|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|       |                specs.width != 0) {
 6212|       |                return impl(rd, range, value);
 6213|       |            }
 6214|       |
 6215|       |            auto crange = get_as_contiguous(range);
 6216|       |            SCN_TRY(it, impl(rd, crange, value));
 6217|       |            return ranges::next(range.begin(),
 6218|       |                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|   214k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   214k|    {
 6124|   214k|        const bool need_skipped_width =
 6125|   214k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 214k]
  |  Branch (6125:33): [True: 0, False: 214k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   214k|        auto it = rng.begin();
 6129|   214k|        std::ptrdiff_t prefix_width = 0;
 6130|   214k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 214k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   214k|        else {
 6138|   214k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   214k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   214k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   214k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   214k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 962, False: 213k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    962|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    962|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    962|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    962|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    962|    }                                                  \
  |  |  |  | 3671|   214k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   213k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   213k|            std::tie(it, prefix_width) = prefix_result;
 6140|   213k|        }
 6141|   213k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   213k|        std::ptrdiff_t value_width = 0;
 6145|   213k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 213k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   213k|        else {
 6161|   213k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   213k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   213k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   213k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 63.0k, False: 150k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  63.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  63.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  63.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  63.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  63.0k|    }                                                  \
  |  | 3671|   213k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   213k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   150k|                                             specs, value, loc));
 6163|       |
 6164|   150k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 150k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   150k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   150k|        std::ptrdiff_t postfix_width = 0;
 6173|   150k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 150k, False: 428]
  ------------------
 6174|   150k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   150k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   150k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   150k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   150k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 150k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   150k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   150k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   150k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   150k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   150k|                                 value_width));
 6178|   150k|            std::tie(it, postfix_width) = postfix_result;
 6179|   150k|        }
 6180|       |
 6181|   150k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   150k|                                                 value_width, postfix_width);
 6183|   150k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 150k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   150k|        return it;
 6188|   150k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIeEENS0_13scan_expectedIPKwEERT_:
 6192|   218k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|   218k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   218k|            auto rd = make_reader<T, char_type>();
 6198|   218k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   218k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 218k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   218k|            return impl(rd, range, value);
 6203|       |        }
 6204|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6205|       |            auto rd = make_reader<T, char_type>();
 6206|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|       |                return unexpected(e);
 6208|       |            }
 6209|       |
 6210|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|       |                specs.width != 0) {
 6212|       |                return impl(rd, range, value);
 6213|       |            }
 6214|       |
 6215|       |            auto crange = get_as_contiguous(range);
 6216|       |            SCN_TRY(it, impl(rd, crange, value));
 6217|       |            return ranges::next(range.begin(),
 6218|       |                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|   218k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   218k|    {
 6124|   218k|        const bool need_skipped_width =
 6125|   218k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 218k]
  |  Branch (6125:33): [True: 0, False: 218k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   218k|        auto it = rng.begin();
 6129|   218k|        std::ptrdiff_t prefix_width = 0;
 6130|   218k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 218k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   218k|        else {
 6138|   218k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   218k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   218k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   218k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   218k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.01k, False: 217k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.01k|    }                                                  \
  |  |  |  | 3671|   218k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   217k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   217k|            std::tie(it, prefix_width) = prefix_result;
 6140|   217k|        }
 6141|   217k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   217k|        std::ptrdiff_t value_width = 0;
 6145|   217k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 217k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   217k|        else {
 6161|   217k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   217k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   217k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   217k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 63.0k, False: 154k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  63.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  63.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  63.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  63.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  63.0k|    }                                                  \
  |  | 3671|   217k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   217k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   154k|                                             specs, value, loc));
 6163|       |
 6164|   154k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 154k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   154k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   154k|        std::ptrdiff_t postfix_width = 0;
 6173|   154k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 153k, False: 450]
  ------------------
 6174|   153k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   153k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   153k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   153k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   153k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 153k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   153k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   153k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   153k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   153k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   153k|                                 value_width));
 6178|   153k|            std::tie(it, postfix_width) = postfix_result;
 6179|   153k|        }
 6180|       |
 6181|   154k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   154k|                                                 value_width, postfix_width);
 6183|   154k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 154k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   154k|        return it;
 6188|   154k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5794|   230k|{
 5795|   230k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   230k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 474, False: 230k]
  |  |  ------------------
  ------------------
 5796|    474|        return unexpected(e);
 5797|    474|    }
 5798|       |
 5799|   230k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 230k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   230k|    return skip_classic_whitespace(range);
 5804|   230k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  66.7k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|       |                          basic_contiguous_scan_context<char_type>>) {
 5875|       |            auto rd = make_reader<T, char_type>();
 5876|       |            return impl(rd, range, value);
 5877|       |        }
 5878|  66.7k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  66.7k|            auto rd = make_reader<T, char_type>();
 5880|  66.7k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 66.7k, False: 0]
  ------------------
 5881|  66.7k|                return impl(rd, range, value);
 5882|  66.7k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|  66.7k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  66.7k|    {
 5863|  66.7k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  66.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  66.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  66.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  66.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 291, False: 66.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    291|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    291|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    291|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    291|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    291|    }                                                  \
  |  |  |  | 3671|  66.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  66.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  66.4k|                        .transform_error(make_eof_scan_error));
 5865|  66.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  66.7k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|  66.4k|    {
 4152|  66.4k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  66.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  66.4k|        float_reader<CharT> rd{};
 4155|  66.4k|        return read_impl<Range>(
 4156|  66.4k|            range, rd,
 4157|  66.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  66.4k|                return r.read_source(SCN_FWD(args)...);
 4159|  66.4k|            },
 4160|  66.4k|            value);
 4161|  66.4k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  66.4k|        : m_fptr([](storage fn,
  743|  66.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  66.4k|              cvref<T> obj = *get<T>(fn);
  745|  66.4k|              if constexpr (std::is_void_v<R>) {
  746|  66.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  66.4k|              }
  748|  66.4k|              else {
  749|  66.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  66.4k|              }
  751|  66.4k|          }),
  752|  66.4k|          m_storage(std::addressof(f))
  753|  66.4k|    {
  754|  66.4k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  66.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  66.4k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  66.4k|              else {
  749|  66.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  66.4k|              }
  751|  66.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  66.4k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  66.4k|        else if constexpr (std::is_object_v<T>) {
  688|  66.4k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  66.4k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|  66.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  66.4k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  66.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  66.4k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  66.4k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  66.4k|        {
  662|  66.4k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  80.7k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|       |                          basic_contiguous_scan_context<char_type>>) {
 5875|       |            auto rd = make_reader<T, char_type>();
 5876|       |            return impl(rd, range, value);
 5877|       |        }
 5878|  80.7k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  80.7k|            auto rd = make_reader<T, char_type>();
 5880|  80.7k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 80.7k, False: 0]
  ------------------
 5881|  80.7k|                return impl(rd, range, value);
 5882|  80.7k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|  80.7k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  80.7k|    {
 5863|  80.7k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  80.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  80.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  80.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  80.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 330, False: 80.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    330|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    330|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    330|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    330|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    330|    }                                                  \
  |  |  |  | 3671|  80.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  80.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  80.4k|                        .transform_error(make_eof_scan_error));
 5865|  80.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  80.7k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|  80.4k|    {
 4152|  80.4k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  80.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  80.4k|        float_reader<CharT> rd{};
 4155|  80.4k|        return read_impl<Range>(
 4156|  80.4k|            range, rd,
 4157|  80.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  80.4k|                return r.read_source(SCN_FWD(args)...);
 4159|  80.4k|            },
 4160|  80.4k|            value);
 4161|  80.4k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  80.4k|        : m_fptr([](storage fn,
  743|  80.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  80.4k|              cvref<T> obj = *get<T>(fn);
  745|  80.4k|              if constexpr (std::is_void_v<R>) {
  746|  80.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  80.4k|              }
  748|  80.4k|              else {
  749|  80.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  80.4k|              }
  751|  80.4k|          }),
  752|  80.4k|          m_storage(std::addressof(f))
  753|  80.4k|    {
  754|  80.4k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  80.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  80.4k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  80.4k|              else {
  749|  80.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  80.4k|              }
  751|  80.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  80.4k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  80.4k|        else if constexpr (std::is_object_v<T>) {
  688|  80.4k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  80.4k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|  80.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  80.4k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  80.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  80.4k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  80.4k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  80.4k|        {
  662|  80.4k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  83.2k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|       |                          basic_contiguous_scan_context<char_type>>) {
 5875|       |            auto rd = make_reader<T, char_type>();
 5876|       |            return impl(rd, range, value);
 5877|       |        }
 5878|  83.2k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  83.2k|            auto rd = make_reader<T, char_type>();
 5880|  83.2k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 83.2k, False: 0]
  ------------------
 5881|  83.2k|                return impl(rd, range, value);
 5882|  83.2k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|  83.2k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  83.2k|    {
 5863|  83.2k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  83.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  83.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  83.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  83.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 363, False: 82.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    363|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    363|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    363|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    363|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    363|    }                                                  \
  |  |  |  | 3671|  83.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  82.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  82.9k|                        .transform_error(make_eof_scan_error));
 5865|  82.9k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  83.2k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|  82.9k|    {
 4152|  82.9k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  82.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  82.9k|        float_reader<CharT> rd{};
 4155|  82.9k|        return read_impl<Range>(
 4156|  82.9k|            range, rd,
 4157|  82.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  82.9k|                return r.read_source(SCN_FWD(args)...);
 4159|  82.9k|            },
 4160|  82.9k|            value);
 4161|  82.9k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  82.9k|        : m_fptr([](storage fn,
  743|  82.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  82.9k|              cvref<T> obj = *get<T>(fn);
  745|  82.9k|              if constexpr (std::is_void_v<R>) {
  746|  82.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  82.9k|              }
  748|  82.9k|              else {
  749|  82.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  82.9k|              }
  751|  82.9k|          }),
  752|  82.9k|          m_storage(std::addressof(f))
  753|  82.9k|    {
  754|  82.9k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  82.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  82.9k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  82.9k|              else {
  749|  82.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  82.9k|              }
  751|  82.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  82.9k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  82.9k|        else if constexpr (std::is_object_v<T>) {
  688|  82.9k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  82.9k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|  82.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  82.9k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  82.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  82.9k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  82.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  82.9k|        {
  662|  82.9k|        }

LLVMFuzzerTestOneInput:
   54|  3.20k|{
   55|  3.20k|    scn::fuzz::run(data, size);
   56|  3.20k|    return 0;
   57|  3.20k|}
float_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   32|  3.20k|{
   33|  3.20k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (33:9): [True: 0, False: 3.20k]
  |  Branch (33:35): [True: 0, False: 3.20k]
  ------------------
   34|      0|        return;
   35|      0|    }
   36|       |
   37|  3.20k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   38|       |
   39|  3.20k|    const auto& f =
   40|  3.20k|        get_format_strings<char>("{}", "{:a}", "{:e}", "{:f}", "{:g}", "{:L}");
   41|  3.20k|    do_basic_run(sv, f);
   42|       |
   43|  3.20k|    const auto& wf = get_format_strings<wchar_t>(L"{}", L"{:a}", L"{:e}",
   44|  3.20k|                                                 L"{:f}", L"{:g}", L"{:L}");
   45|  3.20k|    do_basic_run(wsv_reinterpret, wf);
   46|  3.20k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (46:9): [True: 3.20k, False: 0]
  ------------------
   47|  3.20k|        do_basic_run(wsv_transcode, wf);
   48|  3.20k|    }
   49|  3.20k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  3.20k|{
   25|  3.20k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  3.20k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  3.20k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  3.20k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  3.20k|{
   25|  3.20k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  3.20k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  3.20k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  3.20k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  6.40k|{
   25|  6.40k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  6.40k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  6.40k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  6.40k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  6.40k|{
   25|  6.40k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  6.40k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  6.40k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  6.40k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|  3.20k|{
   52|  3.20k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|  3.20k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.20k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  3.20k|    string_buffer.resize(size);
   56|  3.20k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|  3.20k|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|  3.20k|    const auto wsv_reinterpret_size =
   61|  3.20k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 71, False: 3.13k]
  ------------------
   62|  3.20k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|  3.20k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|  3.20k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|  3.20k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|  3.20k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|  3.20k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|  3.20k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  3.20k|{
  122|  3.20k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  3.20k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  3.20k|    buf.resize(sizeof...(Args));
  125|  3.20k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  3.20k|    return buf;
  127|  3.20k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  107|  3.20k|{
  108|  3.20k|    if constexpr (std::is_same_v<CharT, char>) {
  109|  3.20k|        return format_string_view_buffer;
  110|       |    }
  111|       |    else {
  112|       |        return wformat_string_view_buffer;
  113|       |    }
  114|  3.20k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  3.20k|{
  185|  3.20k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  3.20k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  3.20k|                                   format_strings);
  188|  3.20k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  3.20k|{
  133|       |    // Regular scan
  134|  19.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 19.2k, False: 3.20k]
  ------------------
  135|  19.2k|        auto it = scn::ranges::begin(source);
  136|   226k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   226k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   226k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   226k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   226k|            auto result = scn::scan<T>(
  139|   226k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   226k|                scn::runtime_format(f));
  141|   226k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 19.2k, False: 207k]
  ------------------
  142|  19.2k|                break;
  143|  19.2k|            }
  144|   207k|            it = result->begin();
  145|   207k|        }
  146|  19.2k|    }
  147|       |
  148|       |    // scan localized
  149|  19.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 19.2k, False: 3.20k]
  ------------------
  150|  19.2k|        auto it = scn::ranges::begin(source);
  151|   226k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   226k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   226k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   226k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   226k|            auto result = scn::scan<T>(
  154|   226k|                global_locale,
  155|   226k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   226k|                scn::runtime_format(f));
  157|   226k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 19.2k, False: 207k]
  ------------------
  158|  19.2k|                break;
  159|  19.2k|            }
  160|   207k|            it = result->begin();
  161|   207k|        }
  162|  19.2k|    }
  163|       |
  164|       |    // scan_value
  165|  3.20k|    {
  166|  3.20k|        auto it = scn::ranges::begin(source);
  167|  48.7k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  48.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  48.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  48.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  48.7k|            auto result = scn::scan_value<T>(
  170|  48.7k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  48.7k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.20k, False: 45.5k]
  ------------------
  172|  3.20k|                break;
  173|  3.20k|            }
  174|  45.5k|            it = result->begin();
  175|  45.5k|        }
  176|  3.20k|    }
  177|  3.20k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  3.20k|{
  133|       |    // Regular scan
  134|  19.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 19.2k, False: 3.20k]
  ------------------
  135|  19.2k|        auto it = scn::ranges::begin(source);
  136|   234k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   234k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   234k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   234k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   234k|            auto result = scn::scan<T>(
  139|   234k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   234k|                scn::runtime_format(f));
  141|   234k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 19.2k, False: 215k]
  ------------------
  142|  19.2k|                break;
  143|  19.2k|            }
  144|   215k|            it = result->begin();
  145|   215k|        }
  146|  19.2k|    }
  147|       |
  148|       |    // scan localized
  149|  19.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 19.2k, False: 3.20k]
  ------------------
  150|  19.2k|        auto it = scn::ranges::begin(source);
  151|   234k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   234k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   234k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   234k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   234k|            auto result = scn::scan<T>(
  154|   234k|                global_locale,
  155|   234k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   234k|                scn::runtime_format(f));
  157|   234k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 19.2k, False: 215k]
  ------------------
  158|  19.2k|                break;
  159|  19.2k|            }
  160|   215k|            it = result->begin();
  161|   215k|        }
  162|  19.2k|    }
  163|       |
  164|       |    // scan_value
  165|  3.20k|    {
  166|  3.20k|        auto it = scn::ranges::begin(source);
  167|  50.7k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  50.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  50.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  50.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  50.7k|            auto result = scn::scan_value<T>(
  170|  50.7k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  50.7k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.20k, False: 47.5k]
  ------------------
  172|  3.20k|                break;
  173|  3.20k|            }
  174|  47.5k|            it = result->begin();
  175|  47.5k|        }
  176|  3.20k|    }
  177|  3.20k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  3.20k|{
  133|       |    // Regular scan
  134|  19.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 19.2k, False: 3.20k]
  ------------------
  135|  19.2k|        auto it = scn::ranges::begin(source);
  136|   237k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   237k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   237k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   237k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   237k|            auto result = scn::scan<T>(
  139|   237k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   237k|                scn::runtime_format(f));
  141|   237k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 19.2k, False: 217k]
  ------------------
  142|  19.2k|                break;
  143|  19.2k|            }
  144|   217k|            it = result->begin();
  145|   217k|        }
  146|  19.2k|    }
  147|       |
  148|       |    // scan localized
  149|  19.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 19.2k, False: 3.20k]
  ------------------
  150|  19.2k|        auto it = scn::ranges::begin(source);
  151|   237k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   237k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   237k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   237k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   237k|            auto result = scn::scan<T>(
  154|   237k|                global_locale,
  155|   237k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   237k|                scn::runtime_format(f));
  157|   237k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 19.2k, False: 217k]
  ------------------
  158|  19.2k|                break;
  159|  19.2k|            }
  160|   217k|            it = result->begin();
  161|   217k|        }
  162|  19.2k|    }
  163|       |
  164|       |    // scan_value
  165|  3.20k|    {
  166|  3.20k|        auto it = scn::ranges::begin(source);
  167|  51.7k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  51.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  51.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  51.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  51.7k|            auto result = scn::scan_value<T>(
  170|  51.7k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  51.7k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.20k, False: 48.5k]
  ------------------
  172|  3.20k|                break;
  173|  3.20k|            }
  174|  48.5k|            it = result->begin();
  175|  48.5k|        }
  176|  3.20k|    }
  177|  3.20k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  3.20k|{
  133|       |    // Regular scan
  134|  19.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 19.2k, False: 3.20k]
  ------------------
  135|  19.2k|        auto it = scn::ranges::begin(source);
  136|   262k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   262k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   262k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   262k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   262k|            auto result = scn::scan<T>(
  139|   262k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   262k|                scn::runtime_format(f));
  141|   262k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 19.2k, False: 243k]
  ------------------
  142|  19.2k|                break;
  143|  19.2k|            }
  144|   243k|            it = result->begin();
  145|   243k|        }
  146|  19.2k|    }
  147|       |
  148|       |    // scan localized
  149|  19.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 19.2k, False: 3.20k]
  ------------------
  150|  19.2k|        auto it = scn::ranges::begin(source);
  151|   262k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   262k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   262k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   262k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   262k|            auto result = scn::scan<T>(
  154|   262k|                global_locale,
  155|   262k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   262k|                scn::runtime_format(f));
  157|   262k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 19.2k, False: 243k]
  ------------------
  158|  19.2k|                break;
  159|  19.2k|            }
  160|   243k|            it = result->begin();
  161|   243k|        }
  162|  19.2k|    }
  163|       |
  164|       |    // scan_value
  165|  3.20k|    {
  166|  3.20k|        auto it = scn::ranges::begin(source);
  167|  53.2k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  53.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  53.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  53.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  53.2k|            auto result = scn::scan_value<T>(
  170|  53.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  53.2k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.20k, False: 50.0k]
  ------------------
  172|  3.20k|                break;
  173|  3.20k|            }
  174|  50.0k|            it = result->begin();
  175|  50.0k|        }
  176|  3.20k|    }
  177|  3.20k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  3.20k|{
  133|       |    // Regular scan
  134|  19.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 19.2k, False: 3.20k]
  ------------------
  135|  19.2k|        auto it = scn::ranges::begin(source);
  136|   275k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   275k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   275k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   275k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   275k|            auto result = scn::scan<T>(
  139|   275k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   275k|                scn::runtime_format(f));
  141|   275k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 19.2k, False: 255k]
  ------------------
  142|  19.2k|                break;
  143|  19.2k|            }
  144|   255k|            it = result->begin();
  145|   255k|        }
  146|  19.2k|    }
  147|       |
  148|       |    // scan localized
  149|  19.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 19.2k, False: 3.20k]
  ------------------
  150|  19.2k|        auto it = scn::ranges::begin(source);
  151|   275k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   275k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   275k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   275k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   275k|            auto result = scn::scan<T>(
  154|   275k|                global_locale,
  155|   275k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   275k|                scn::runtime_format(f));
  157|   275k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 19.2k, False: 255k]
  ------------------
  158|  19.2k|                break;
  159|  19.2k|            }
  160|   255k|            it = result->begin();
  161|   255k|        }
  162|  19.2k|    }
  163|       |
  164|       |    // scan_value
  165|  3.20k|    {
  166|  3.20k|        auto it = scn::ranges::begin(source);
  167|  56.0k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  56.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  56.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  56.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  56.0k|            auto result = scn::scan_value<T>(
  170|  56.0k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  56.0k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.20k, False: 52.8k]
  ------------------
  172|  3.20k|                break;
  173|  3.20k|            }
  174|  52.8k|            it = result->begin();
  175|  52.8k|        }
  176|  3.20k|    }
  177|  3.20k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  3.20k|{
  133|       |    // Regular scan
  134|  19.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 19.2k, False: 3.20k]
  ------------------
  135|  19.2k|        auto it = scn::ranges::begin(source);
  136|   277k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   277k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   277k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   277k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   277k|            auto result = scn::scan<T>(
  139|   277k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   277k|                scn::runtime_format(f));
  141|   277k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 19.2k, False: 258k]
  ------------------
  142|  19.2k|                break;
  143|  19.2k|            }
  144|   258k|            it = result->begin();
  145|   258k|        }
  146|  19.2k|    }
  147|       |
  148|       |    // scan localized
  149|  19.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 19.2k, False: 3.20k]
  ------------------
  150|  19.2k|        auto it = scn::ranges::begin(source);
  151|   277k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   277k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   277k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   277k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   277k|            auto result = scn::scan<T>(
  154|   277k|                global_locale,
  155|   277k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   277k|                scn::runtime_format(f));
  157|   277k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 19.2k, False: 258k]
  ------------------
  158|  19.2k|                break;
  159|  19.2k|            }
  160|   258k|            it = result->begin();
  161|   258k|        }
  162|  19.2k|    }
  163|       |
  164|       |    // scan_value
  165|  3.20k|    {
  166|  3.20k|        auto it = scn::ranges::begin(source);
  167|  56.6k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  56.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  56.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  56.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  56.6k|            auto result = scn::scan_value<T>(
  170|  56.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  56.6k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.20k, False: 53.4k]
  ------------------
  172|  3.20k|                break;
  173|  3.20k|            }
  174|  53.4k|            it = result->begin();
  175|  53.4k|        }
  176|  3.20k|    }
  177|  3.20k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   89|  3.20k|{
   90|  3.20k|    using char_type = ranges::range_value_t<Source>;
   91|  3.20k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  3.20k|    deque.clear();
   93|  3.20k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  3.20k|              std::back_inserter(deque));
   95|  3.20k|    return deque;
   96|  3.20k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   78|  3.20k|{
   79|  3.20k|    if constexpr (std::is_same_v<CharT, char>) {
   80|  3.20k|        return noncontiguous_buffer;
   81|       |    }
   82|       |    else {
   83|       |        return wnoncontiguous_buffer;
   84|       |    }
   85|  3.20k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  3.20k|{
  122|  3.20k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  3.20k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  3.20k|    buf.resize(sizeof...(Args));
  125|  3.20k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  3.20k|    return buf;
  127|  3.20k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  107|  3.20k|{
  108|       |    if constexpr (std::is_same_v<CharT, char>) {
  109|       |        return format_string_view_buffer;
  110|       |    }
  111|  3.20k|    else {
  112|  3.20k|        return wformat_string_view_buffer;
  113|  3.20k|    }
  114|  3.20k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  6.40k|{
  185|  6.40k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  6.40k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  6.40k|                                   format_strings);
  188|  6.40k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  6.40k|{
  133|       |    // Regular scan
  134|  38.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 38.4k, False: 6.40k]
  ------------------
  135|  38.4k|        auto it = scn::ranges::begin(source);
  136|   120k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   120k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   120k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   120k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   120k|            auto result = scn::scan<T>(
  139|   120k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   120k|                scn::runtime_format(f));
  141|   120k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 38.4k, False: 81.9k]
  ------------------
  142|  38.4k|                break;
  143|  38.4k|            }
  144|  81.9k|            it = result->begin();
  145|  81.9k|        }
  146|  38.4k|    }
  147|       |
  148|       |    // scan localized
  149|  38.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 38.4k, False: 6.40k]
  ------------------
  150|  38.4k|        auto it = scn::ranges::begin(source);
  151|   120k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   120k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   120k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   120k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   120k|            auto result = scn::scan<T>(
  154|   120k|                global_locale,
  155|   120k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   120k|                scn::runtime_format(f));
  157|   120k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 38.4k, False: 81.9k]
  ------------------
  158|  38.4k|                break;
  159|  38.4k|            }
  160|  81.9k|            it = result->begin();
  161|  81.9k|        }
  162|  38.4k|    }
  163|       |
  164|       |    // scan_value
  165|  6.40k|    {
  166|  6.40k|        auto it = scn::ranges::begin(source);
  167|  22.2k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  22.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  22.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  22.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  22.2k|            auto result = scn::scan_value<T>(
  170|  22.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  22.2k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 6.40k, False: 15.8k]
  ------------------
  172|  6.40k|                break;
  173|  6.40k|            }
  174|  15.8k|            it = result->begin();
  175|  15.8k|        }
  176|  6.40k|    }
  177|  6.40k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  6.40k|{
  133|       |    // Regular scan
  134|  38.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 38.4k, False: 6.40k]
  ------------------
  135|  38.4k|        auto it = scn::ranges::begin(source);
  136|   134k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   134k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   134k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   134k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   134k|            auto result = scn::scan<T>(
  139|   134k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   134k|                scn::runtime_format(f));
  141|   134k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 38.4k, False: 95.9k]
  ------------------
  142|  38.4k|                break;
  143|  38.4k|            }
  144|  95.9k|            it = result->begin();
  145|  95.9k|        }
  146|  38.4k|    }
  147|       |
  148|       |    // scan localized
  149|  38.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 38.4k, False: 6.40k]
  ------------------
  150|  38.4k|        auto it = scn::ranges::begin(source);
  151|   134k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   134k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   134k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   134k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   134k|            auto result = scn::scan<T>(
  154|   134k|                global_locale,
  155|   134k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   134k|                scn::runtime_format(f));
  157|   134k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 38.4k, False: 95.9k]
  ------------------
  158|  38.4k|                break;
  159|  38.4k|            }
  160|  95.9k|            it = result->begin();
  161|  95.9k|        }
  162|  38.4k|    }
  163|       |
  164|       |    // scan_value
  165|  6.40k|    {
  166|  6.40k|        auto it = scn::ranges::begin(source);
  167|  26.9k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  26.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  26.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  26.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  26.9k|            auto result = scn::scan_value<T>(
  170|  26.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  26.9k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 6.40k, False: 20.5k]
  ------------------
  172|  6.40k|                break;
  173|  6.40k|            }
  174|  20.5k|            it = result->begin();
  175|  20.5k|        }
  176|  6.40k|    }
  177|  6.40k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  6.40k|{
  133|       |    // Regular scan
  134|  38.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 38.4k, False: 6.40k]
  ------------------
  135|  38.4k|        auto it = scn::ranges::begin(source);
  136|   136k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   136k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   136k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   136k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   136k|            auto result = scn::scan<T>(
  139|   136k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   136k|                scn::runtime_format(f));
  141|   136k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 38.4k, False: 98.5k]
  ------------------
  142|  38.4k|                break;
  143|  38.4k|            }
  144|  98.5k|            it = result->begin();
  145|  98.5k|        }
  146|  38.4k|    }
  147|       |
  148|       |    // scan localized
  149|  38.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 38.4k, False: 6.40k]
  ------------------
  150|  38.4k|        auto it = scn::ranges::begin(source);
  151|   136k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   136k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   136k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   136k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   136k|            auto result = scn::scan<T>(
  154|   136k|                global_locale,
  155|   136k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   136k|                scn::runtime_format(f));
  157|   136k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 38.4k, False: 98.5k]
  ------------------
  158|  38.4k|                break;
  159|  38.4k|            }
  160|  98.5k|            it = result->begin();
  161|  98.5k|        }
  162|  38.4k|    }
  163|       |
  164|       |    // scan_value
  165|  6.40k|    {
  166|  6.40k|        auto it = scn::ranges::begin(source);
  167|  27.7k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  27.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  27.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  27.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  27.7k|            auto result = scn::scan_value<T>(
  170|  27.7k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  27.7k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 6.40k, False: 21.3k]
  ------------------
  172|  6.40k|                break;
  173|  6.40k|            }
  174|  21.3k|            it = result->begin();
  175|  21.3k|        }
  176|  6.40k|    }
  177|  6.40k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  6.40k|{
  133|       |    // Regular scan
  134|  38.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 38.4k, False: 6.40k]
  ------------------
  135|  38.4k|        auto it = scn::ranges::begin(source);
  136|   120k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   120k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   120k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   120k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   120k|            auto result = scn::scan<T>(
  139|   120k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   120k|                scn::runtime_format(f));
  141|   120k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 38.4k, False: 81.8k]
  ------------------
  142|  38.4k|                break;
  143|  38.4k|            }
  144|  81.8k|            it = result->begin();
  145|  81.8k|        }
  146|  38.4k|    }
  147|       |
  148|       |    // scan localized
  149|  38.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 38.4k, False: 6.40k]
  ------------------
  150|  38.4k|        auto it = scn::ranges::begin(source);
  151|   120k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   120k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   120k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   120k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   120k|            auto result = scn::scan<T>(
  154|   120k|                global_locale,
  155|   120k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   120k|                scn::runtime_format(f));
  157|   120k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 38.4k, False: 81.8k]
  ------------------
  158|  38.4k|                break;
  159|  38.4k|            }
  160|  81.8k|            it = result->begin();
  161|  81.8k|        }
  162|  38.4k|    }
  163|       |
  164|       |    // scan_value
  165|  6.40k|    {
  166|  6.40k|        auto it = scn::ranges::begin(source);
  167|  22.2k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  22.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  22.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  22.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  22.2k|            auto result = scn::scan_value<T>(
  170|  22.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  22.2k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 6.40k, False: 15.8k]
  ------------------
  172|  6.40k|                break;
  173|  6.40k|            }
  174|  15.8k|            it = result->begin();
  175|  15.8k|        }
  176|  6.40k|    }
  177|  6.40k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  6.40k|{
  133|       |    // Regular scan
  134|  38.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 38.4k, False: 6.40k]
  ------------------
  135|  38.4k|        auto it = scn::ranges::begin(source);
  136|   134k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   134k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   134k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   134k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   134k|            auto result = scn::scan<T>(
  139|   134k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   134k|                scn::runtime_format(f));
  141|   134k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 38.4k, False: 95.8k]
  ------------------
  142|  38.4k|                break;
  143|  38.4k|            }
  144|  95.8k|            it = result->begin();
  145|  95.8k|        }
  146|  38.4k|    }
  147|       |
  148|       |    // scan localized
  149|  38.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 38.4k, False: 6.40k]
  ------------------
  150|  38.4k|        auto it = scn::ranges::begin(source);
  151|   134k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   134k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   134k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   134k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   134k|            auto result = scn::scan<T>(
  154|   134k|                global_locale,
  155|   134k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   134k|                scn::runtime_format(f));
  157|   134k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 38.4k, False: 95.8k]
  ------------------
  158|  38.4k|                break;
  159|  38.4k|            }
  160|  95.8k|            it = result->begin();
  161|  95.8k|        }
  162|  38.4k|    }
  163|       |
  164|       |    // scan_value
  165|  6.40k|    {
  166|  6.40k|        auto it = scn::ranges::begin(source);
  167|  26.9k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  26.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  26.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  26.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  26.9k|            auto result = scn::scan_value<T>(
  170|  26.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  26.9k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 6.40k, False: 20.5k]
  ------------------
  172|  6.40k|                break;
  173|  6.40k|            }
  174|  20.5k|            it = result->begin();
  175|  20.5k|        }
  176|  6.40k|    }
  177|  6.40k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  6.40k|{
  133|       |    // Regular scan
  134|  38.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 38.4k, False: 6.40k]
  ------------------
  135|  38.4k|        auto it = scn::ranges::begin(source);
  136|   136k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   136k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   136k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   136k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   136k|            auto result = scn::scan<T>(
  139|   136k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   136k|                scn::runtime_format(f));
  141|   136k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 38.4k, False: 98.4k]
  ------------------
  142|  38.4k|                break;
  143|  38.4k|            }
  144|  98.4k|            it = result->begin();
  145|  98.4k|        }
  146|  38.4k|    }
  147|       |
  148|       |    // scan localized
  149|  38.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 38.4k, False: 6.40k]
  ------------------
  150|  38.4k|        auto it = scn::ranges::begin(source);
  151|   136k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   136k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   136k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   136k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   136k|            auto result = scn::scan<T>(
  154|   136k|                global_locale,
  155|   136k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   136k|                scn::runtime_format(f));
  157|   136k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 38.4k, False: 98.4k]
  ------------------
  158|  38.4k|                break;
  159|  38.4k|            }
  160|  98.4k|            it = result->begin();
  161|  98.4k|        }
  162|  38.4k|    }
  163|       |
  164|       |    // scan_value
  165|  6.40k|    {
  166|  6.40k|        auto it = scn::ranges::begin(source);
  167|  27.7k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  27.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  27.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  27.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  27.7k|            auto result = scn::scan_value<T>(
  170|  27.7k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  27.7k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 6.40k, False: 21.3k]
  ------------------
  172|  6.40k|                break;
  173|  6.40k|            }
  174|  21.3k|            it = result->begin();
  175|  21.3k|        }
  176|  6.40k|    }
  177|  6.40k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   89|  6.40k|{
   90|  6.40k|    using char_type = ranges::range_value_t<Source>;
   91|  6.40k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  6.40k|    deque.clear();
   93|  6.40k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  6.40k|              std::back_inserter(deque));
   95|  6.40k|    return deque;
   96|  6.40k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   78|  6.40k|{
   79|       |    if constexpr (std::is_same_v<CharT, char>) {
   80|       |        return noncontiguous_buffer;
   81|       |    }
   82|  6.40k|    else {
   83|  6.40k|        return wnoncontiguous_buffer;
   84|  6.40k|    }
   85|  6.40k|}

